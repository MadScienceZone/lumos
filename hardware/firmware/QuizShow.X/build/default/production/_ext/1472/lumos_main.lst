MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; OSCCON:SCS=00;HS;
                      00002 ; vim:set syntax=pic ts=8:
                      00003 ;
                      00004                 LIST n=90
                      00005 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00006 ;@@                                                                         @@
                      00007 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00008 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.1   @@ 
                      00009 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00010 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00011 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00012 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00013 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00014 ;@@                                                                         @@
                      00015 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00016 ;
                      00017 ; ************                                                           /\
                      00018 ; * WARNING! *    EXPERIMENTAL DESIGN FOR EDUCATIONAL PURPOSES          /  \
                      00019 ; * WARNING! *                USE AT YOUR OWN RISK!                    / !  \
                      00020 ; ************                                                        /______\
                      00021 ; 
                      00022 ; PLEASE READ AND BE SURE YOU UNDERSTAND THE FOLLOWING SAFETY WARNINGS:
                      00023 ;
                      00024 ; THIS FIRMWARE AND THE ACCOMPANYING HARDWARE AND CONTROLLING SOFTWARE ARE
                      00025 ; EXPERIMENTAL "HOBBYIST" DESIGNS AND ARE NOT INTENDED FOR GENERAL CONSUMER USE
                      00026 ; OR FOR ANY APPLICATION WHERE THERE IS ANY POSSIBILITY OF RISK OF INJURY,
                      00027 ; PROPERTY DAMAGE, OR ANY OTHER SITUATION WHERE ANY FAILURE OF THE FIRMWARE,
                      00028 ; SOFTWARE AND/OR HARDWARE COULD RESULT IN HARM TO ANYONE OR ANYTHING.  
                      00029 ;
                      00030 ; THIS FIRMWARE, SOFTWARE, AND/OR HARDWARE ARE NOT INTENDED NOR RECOMMENDED 
                      00031 ; FOR APPLICATIONS INVOLVING LIFE SUPPORT OR SAFETY-CRITICAL SYSTEMS, RUNNING 
                      00032 ; FIREWORKS/PYROTECHNIC DISPLAYS, ETC.  
                      00033 ;
                      00034 ; BY OBTAINING AND USING THIS FIRMWARE, AND/OR ACCOMPANYING HARDWARE AND/OR 
                      00035 ; CONTROLLING SOFTWARE, YOU AGREE TO THESE CONDITIONS AND THAT TO THE FULLEST 
                      00036 ; EXTENT OF APPLICABLE LAW, THE ABOVE-LISTED ITEMS AND ALL ACCOMPANYING 
                      00037 ; DOCUMENTATION AND OTHER MATERIALS ARE PROVIDED TO YOU AS-IS, WITHOUT WARRANTY 
                      00038 ; OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
                      00039 ; WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE.  YOU 
                      00040 ; FURTHER AGREE TO DEFEND, INDEMNIFY, AND HOLD BLAMELESS, THE AUTHOR, STEVEN 
                      00041 ; L. Willoughby AND ANY OF HIS AGENTS AND ASSOCIATES ASSISTING WITH THIS WORK, 
                      00042 ; FROM ANY DAMAGES DIRECT OR INCIDENTAL ARISING FROM THE USE OF, OR INABILITY 
                      00043 ; TO USE, THE ABOVE-LISTED PRODUCTS.
                      00044 ; 
                      00045 ;
                      00046 ; Copyright (c) 2012, 2013, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00047 ; All Rights Reserved.  Released under the terms and conditions of the 
                      00048 ; Open Software License, version 3.0.
                      00049 ;
                      00050 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00051 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00052 ;
                      00053 ; -*- -*- -* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00054 ;
                      00055 ; Main implementation module.
                      00056 ;
                      00057 #include "lumos_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  
                      00018 ; Released under the terms and conditions of the Open Software
                      00019 ; License, version 3.0.
                      00020 ;
                      00021 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00022 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028 ;
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; CONFIGURATION OPTIONS
                      00032 ;==============================================================================
                      00033 #ifndef LUMOS_CONFIG_INC
                      00034 #define LUMOS_CONFIG_INC
                      00035 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00036 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00037 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00038 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00039 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00040 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00041 ;
                      00042 ; Un-comment one of these to select board type for this ROM image:
                      00043 ;
                      00044 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00045 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00046 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00047 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00048 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00049 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00050 ;
                      00051 ;
                      00052 ;
                      00053 #define LUMOS_ZC                0x55
                      00054 #define LUMOS_INTERNAL          0x58
                      00055 
                      00056  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00057   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00058  ELSE
                      00059   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00060    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00061   ELSE
                      00062    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00063   ENDIF
                      00064  ENDIF
                      00065  
                      00066  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00067   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00068  ENDIF
                      00069 
                      00070 
                      00071  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00072   #define ROLE_MASTER       (1)
                      00073   #define ROLE_SLAVE        (0)
                      00074   #define ROLE_STANDALONE   (0)
                      00075   #define NUM_CHANNELS      (.48)
                      00076   #define QSCC_PORT         (0)
                      00077  ELSE
                      00078   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00079    #define ROLE_MASTER      (0)
                      00080    #define ROLE_SLAVE       (1)
                      00081    #define ROLE_STANDALONE  (0)
                      00082    #define NUM_CHANNELS     (.48)
                      00083    #define QSCC_PORT        (0)
                      00084   ELSE
                      00085    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00086     #define ROLE_MASTER     (0)
                      00087     #define ROLE_SLAVE      (0)
                      00088     #define ROLE_STANDALONE (1)
                      00089     #define NUM_CHANNELS    (.24)
                      00090     #define QSCC_PORT       (0)
                      00091    ELSE
                      00092     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00093      #define ROLE_MASTER     (0)
                      00094      #define ROLE_SLAVE      (0)
                      00095      #define ROLE_STANDALONE (1)
                      00096      #define NUM_CHANNELS    (.4)
                      00097      #define QSCC_PORT       (0)
                      00098     ELSE
                      00099      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00100       #define ROLE_MASTER     (0)
                      00101       #define ROLE_SLAVE      (0)
                      00102       #define ROLE_STANDALONE (1)
                      00103       #define NUM_CHANNELS    (.14)
                      00104       #define QSCC_PORT       (1)
                      00105      ELSE
                      00106       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00107        #define ROLE_MASTER     (0)
                      00108        #define ROLE_SLAVE      (0)
                      00109        #define ROLE_STANDALONE (1)
                      00110        #define NUM_CHANNELS    (.20)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00111        #define QSCC_PORT       (1)
                      00112       ELSE
                      00113        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00114       ENDIF
                      00115      ENDIF
                      00116     ENDIF
                      00117    ENDIF
                      00118   ENDIF
                      00119  ENDIF
                      00120 
                      00121 #define LUMOS_ARCH_4685  (0x4685)
                      00122 #define LUMOS_ARCH_14K50 (0x1450)
                      00123 
                      00124  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00125   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00126   PROCESSOR 18F4685
                      00127   #include <p18f4685.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4685 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      05130         LIST
                      00128  ELSE
                      00129   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00130    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00131    PROCESSOR 18F14K50
                      00132    #include <p18f14k50.inc>
                      00133   ELSE
                      00134    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00135   ENDIF
                      00136  ENDIF
                      00137 
                      00138 ;
                      00139 ; The following public symbols can be used after this file is
                      00140 ; included (and this file should be included everywhere before
                      00141 ; anything else is included, and in lieu of PROCESSOR directives
                      00142 ; or #includes which bring in processor-specific bits--this file
                      00143 ; will do that for you):
                      00144 ;
                      00145 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00146 ;                   of the target chip will be and what its particular 
                      00147 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00148 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00149 ;
                      00150 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00151 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00152 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00153 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00154 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00155 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00156 ;
                      00157 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00158 ;                   slice timer sync pulse is coming from:
                      00159 ;
                      00160 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00161 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00162 ;
                      00163 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00164 ;                   is targeted, strictly to determine chip-specific details,
                      00165 ;                   not how Lumos is using it.
                      00166 ;
                      00167 ;       "14K50"         - The PIC18F14K50
                      00168 ;       "4685"          - The PIC18F4685
                      00169 ;
                      00170 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00171 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00172 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00173 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00174 #endif
                      00058         RADIX   DEC
                      00059 #include "lumos_init.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All Rights
                      00017 ; Reserved.  Released under the terms and conditions of the Open Software
                      00018 ; License, version 3.0.
                      00019 ;
                      00020 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00021 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00022 ;
                      00023 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00024 ;
                      00025 ; Device initialization code.  See lumos_main.asm for hardware implementation
                      00026 ; details.
                      00027 ;
                      00028 #include "lumos_config.inc"
                      00175 ; vim:set syntax=pic ts=8:
                      00176 ;
                      00177                 LIST n=90
                      00178 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00179 ;@@                                                                         @@
                      00180 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00181 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00182 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00183 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00184 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00185 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00186 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00187 ;@@                                                                         @@
                      00188 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00189 ;
                      00190 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00191 ; All Rights Reserved.  
                      00192 ; Released under the terms and conditions of the Open Software
                      00193 ; License, version 3.0.
                      00194 ;
                      00195 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00196 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00197 ;
                      00198 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00199 ;
                      00200 ; Configuration options.  Set these as desired and then re-assemble the
                      00201 ; code to produce the desired version of the ROM.
                      00202 ;
                      00203 ; 
                      00204 ;==============================================================================
                      00205 ; CONFIGURATION OPTIONS
                      00206 ;==============================================================================
                      00207 #ifndef LUMOS_CONFIG_INC
                      00208 #define LUMOS_CONFIG_INC
                      00209 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00210 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00211 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00212 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00213 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00214 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00215 ;
                      00216 ; Un-comment one of these to select board type for this ROM image:
                      00217 ;
                      00218 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00219 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00220 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00221 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00222 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00223 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00224 ;
                      00225 ;
                      00226 ;
                      00227 #define LUMOS_ZC                0x55
                      00228 #define LUMOS_INTERNAL          0x58
                      00229 
                      00230  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00231   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00232  ELSE
                      00233   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00234    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00235   ELSE
                      00236    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00237   ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238  ENDIF
                      00239  
                      00240  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00241   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00242  ENDIF
                      00243 
                      00244 
                      00245  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00246   #define ROLE_MASTER       (1)
                      00247   #define ROLE_SLAVE        (0)
                      00248   #define ROLE_STANDALONE   (0)
                      00249   #define NUM_CHANNELS      (.48)
                      00250   #define QSCC_PORT         (0)
                      00251  ELSE
                      00252   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00253    #define ROLE_MASTER      (0)
                      00254    #define ROLE_SLAVE       (1)
                      00255    #define ROLE_STANDALONE  (0)
                      00256    #define NUM_CHANNELS     (.48)
                      00257    #define QSCC_PORT        (0)
                      00258   ELSE
                      00259    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00260     #define ROLE_MASTER     (0)
                      00261     #define ROLE_SLAVE      (0)
                      00262     #define ROLE_STANDALONE (1)
                      00263     #define NUM_CHANNELS    (.24)
                      00264     #define QSCC_PORT       (0)
                      00265    ELSE
                      00266     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00267      #define ROLE_MASTER     (0)
                      00268      #define ROLE_SLAVE      (0)
                      00269      #define ROLE_STANDALONE (1)
                      00270      #define NUM_CHANNELS    (.4)
                      00271      #define QSCC_PORT       (0)
                      00272     ELSE
                      00273      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00274       #define ROLE_MASTER     (0)
                      00275       #define ROLE_SLAVE      (0)
                      00276       #define ROLE_STANDALONE (1)
                      00277       #define NUM_CHANNELS    (.14)
                      00278       #define QSCC_PORT       (1)
                      00279      ELSE
                      00280       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00281        #define ROLE_MASTER     (0)
                      00282        #define ROLE_SLAVE      (0)
                      00283        #define ROLE_STANDALONE (1)
                      00284        #define NUM_CHANNELS    (.20)
                      00285        #define QSCC_PORT       (1)
                      00286       ELSE
                      00287        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00288       ENDIF
                      00289      ENDIF
                      00290     ENDIF
                      00291    ENDIF
                      00292   ENDIF
                      00293  ENDIF
                      00294 
                      00295 #define LUMOS_ARCH_4685  (0x4685)
                      00296 #define LUMOS_ARCH_14K50 (0x1450)
                      00297 
                      00298  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00299   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00300   PROCESSOR 18F4685
                      00301   #include <p18f4685.inc>
                      00302  ELSE
                      00303   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00304    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00305    PROCESSOR 18F14K50
                      00306    #include <p18f14k50.inc>
                      00307   ELSE
                      00308    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00309   ENDIF
                      00310  ENDIF
                      00311 
                      00312 ;
                      00313 ; The following public symbols can be used after this file is
                      00314 ; included (and this file should be included everywhere before
                      00315 ; anything else is included, and in lieu of PROCESSOR directives
                      00316 ; or #includes which bring in processor-specific bits--this file
                      00317 ; will do that for you):
                      00318 ;
                      00319 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00320 ;                   of the target chip will be and what its particular 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00321 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00322 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00323 ;
                      00324 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00325 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00326 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00327 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00328 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00329 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00330 ;
                      00331 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00332 ;                   slice timer sync pulse is coming from:
                      00333 ;
                      00334 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00335 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00336 ;
                      00337 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00338 ;                   is targeted, strictly to determine chip-specific details,
                      00339 ;                   not how Lumos is using it.
                      00340 ;
                      00341 ;       "14K50"         - The PIC18F14K50
                      00342 ;       "4685"          - The PIC18F4685
                      00343 ;
                      00344 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00345 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00346 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00347 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00348 #endif
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; PUBLIC ENTRY POINTS
                      00032 ;==============================================================================
  0000                00033         EXTERN  LUMOS_INIT      ; Call this to set up the hardware before use.
                      00034 ;
                      00035 ;
                      00060 #include "serial-io.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST n=90
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; General serial console I/O handling
                      00022 ;
                      00023 #include "serial-io-bits.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST n=90
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; serial io (SIO) module bit definitions, included by caller and the module
                      00022 ;
                      00023 #include "serial-io-user.inc"
                      00001 ;
                      00002 ; To use the serial I/O module, you need to edit this
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ; include file to suit your application.
                      00004 ;
                      00005 #include "lumos_config.inc"
                      00349 ; vim:set syntax=pic ts=8:
                      00350 ;
                      00351                 LIST n=90
                      00352 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00353 ;@@                                                                         @@
                      00354 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00355 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00356 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00357 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00358 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00359 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00360 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00361 ;@@                                                                         @@
                      00362 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00363 ;
                      00364 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00365 ; All Rights Reserved.  
                      00366 ; Released under the terms and conditions of the Open Software
                      00367 ; License, version 3.0.
                      00368 ;
                      00369 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00370 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00371 ;
                      00372 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00373 ;
                      00374 ; Configuration options.  Set these as desired and then re-assemble the
                      00375 ; code to produce the desired version of the ROM.
                      00376 ;
                      00377 ; 
                      00378 ;==============================================================================
                      00379 ; CONFIGURATION OPTIONS
                      00380 ;==============================================================================
                      00381 #ifndef LUMOS_CONFIG_INC
                      00382 #define LUMOS_CONFIG_INC
                      00383 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00384 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00385 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00386 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00387 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00388 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00389 ;
                      00390 ; Un-comment one of these to select board type for this ROM image:
                      00391 ;
                      00392 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00393 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00394 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00395 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00396 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00397 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00398 ;
                      00399 ;
                      00400 ;
                      00401 #define LUMOS_ZC                0x55
                      00402 #define LUMOS_INTERNAL          0x58
                      00403 
                      00404  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00405   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00406  ELSE
                      00407   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00408    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00409   ELSE
                      00410    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00411   ENDIF
                      00412  ENDIF
                      00413  
                      00414  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00415   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00416  ENDIF
                      00417 
                      00418 
                      00419  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00420   #define ROLE_MASTER       (1)
                      00421   #define ROLE_SLAVE        (0)
                      00422   #define ROLE_STANDALONE   (0)
                      00423   #define NUM_CHANNELS      (.48)
                      00424   #define QSCC_PORT         (0)
                      00425  ELSE
                      00426   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00427    #define ROLE_MASTER      (0)
                      00428    #define ROLE_SLAVE       (1)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00429    #define ROLE_STANDALONE  (0)
                      00430    #define NUM_CHANNELS     (.48)
                      00431    #define QSCC_PORT        (0)
                      00432   ELSE
                      00433    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00434     #define ROLE_MASTER     (0)
                      00435     #define ROLE_SLAVE      (0)
                      00436     #define ROLE_STANDALONE (1)
                      00437     #define NUM_CHANNELS    (.24)
                      00438     #define QSCC_PORT       (0)
                      00439    ELSE
                      00440     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00441      #define ROLE_MASTER     (0)
                      00442      #define ROLE_SLAVE      (0)
                      00443      #define ROLE_STANDALONE (1)
                      00444      #define NUM_CHANNELS    (.4)
                      00445      #define QSCC_PORT       (0)
                      00446     ELSE
                      00447      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00448       #define ROLE_MASTER     (0)
                      00449       #define ROLE_SLAVE      (0)
                      00450       #define ROLE_STANDALONE (1)
                      00451       #define NUM_CHANNELS    (.14)
                      00452       #define QSCC_PORT       (1)
                      00453      ELSE
                      00454       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00455        #define ROLE_MASTER     (0)
                      00456        #define ROLE_SLAVE      (0)
                      00457        #define ROLE_STANDALONE (1)
                      00458        #define NUM_CHANNELS    (.20)
                      00459        #define QSCC_PORT       (1)
                      00460       ELSE
                      00461        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00462       ENDIF
                      00463      ENDIF
                      00464     ENDIF
                      00465    ENDIF
                      00466   ENDIF
                      00467  ENDIF
                      00468 
                      00469 #define LUMOS_ARCH_4685  (0x4685)
                      00470 #define LUMOS_ARCH_14K50 (0x1450)
                      00471 
                      00472  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00473   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00474   PROCESSOR 18F4685
                      00475   #include <p18f4685.inc>
                      00476  ELSE
                      00477   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00478    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00479    PROCESSOR 18F14K50
                      00480    #include <p18f14k50.inc>
                      00481   ELSE
                      00482    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00483   ENDIF
                      00484  ENDIF
                      00485 
                      00486 ;
                      00487 ; The following public symbols can be used after this file is
                      00488 ; included (and this file should be included everywhere before
                      00489 ; anything else is included, and in lieu of PROCESSOR directives
                      00490 ; or #includes which bring in processor-specific bits--this file
                      00491 ; will do that for you):
                      00492 ;
                      00493 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00494 ;                   of the target chip will be and what its particular 
                      00495 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00496 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00497 ;
                      00498 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00499 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00500 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00501 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00502 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00503 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00504 ;
                      00505 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00506 ;                   slice timer sync pulse is coming from:
                      00507 ;
                      00508 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00509 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00510 ;
                      00511 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00512 ;                   is targeted, strictly to determine chip-specific details,
                      00513 ;                   not how Lumos is using it.
                      00514 ;
                      00515 ;       "14K50"         - The PIC18F14K50
                      00516 ;       "4685"          - The PIC18F4685
                      00517 ;
                      00518 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00519 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00520 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00521 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00522 #endif
                      00006 
                      00007                         IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000100            00008 SIO_TX_BUFFER_START      EQU    0x100   ; Starting address of 256-byte Tx buffer*
  00000200            00009 SIO_RX_BUFFER_START      EQU    0x200   ; Starting address of 256-byte Rx buffer*
  00000300            00010 SIO_DATA_START           EQU    0x300   ; Starting address for SIO module variable storage
  00015000            00011 SIO_TABLE_START          EQU    0x15000 ; Starting ROM address for SIO module tables*
                      00012                         ELSE
                      00013                          IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00014 SIO_TX_BUFFER_START       EQU   0x100   ; Starting address of 256-byte Tx buffer*
                      00015 SIO_RX_BUFFER_START       EQU   0x200   ; Starting address of 256-byte Rx buffer*
                      00016 SIO_DATA_START            EQU   0x0E4   ; Starting address for SIO module variable storage
                      00017 SIO_TABLE_START           EQU   0x2F00  ; Starting ROM address for SIO module tables*
                      00018                          ELSE
                      00019                           ERROR "Invalid architecture switch in serial-io-user.inc"
                      00020                          ENDIF
                      00021                         ENDIF
                      00022 ;
                      00023 ; * must be aligned to the start of a 256-byte bank.
                      00024 ;
                      00024 ;       
                      00025 ;                    bit 7      6      5      4      3      2      1      0
                      00026 ;                     _______________________________________________________
                      00027 ; +$00 SIO_STATUS    |      |      |SIO_  |SIO_  |RXDATA|TXDATA|RXDATA|TXDATA|
                      00028 ;                    |      |      | FERR | ORUN |_FULL |_FULL |_QUEUE|_QUEUE|
                      00029 ;                    |______|______|______|______|______|______|______|______|
                      00030 ;
  00000000            00031 TXDATA_QUEUE    EQU     0       ; Tx data waiting in buffer now to be sent
  00000001            00032 RXDATA_QUEUE    EQU     1       ; Rx data waiting in buffer to be retrieved
  00000002            00033 TXDATA_FULL     EQU     2       ; Tx buffer full
  00000003            00034 RXDATA_FULL     EQU     3       ; Rx buffer full
  00000004            00035 SIO_ORUN        EQU     4       ; I/O Error: incoming data overrun  (caller clears)
  00000005            00036 SIO_FERR        EQU     5       ; I/O Error: break/framing error received  (caller clears)
                      00037 ;
                      00038 ; Baud rate settings
                      00039 ;
  00000000            00040 SIO_300         EQU     0x00
  00000001            00041 SIO_600         EQU     0x01
  00000002            00042 SIO_1200        EQU     0x02
  00000003            00043 SIO_2400        EQU     0x03
  00000004            00044 SIO_4800        EQU     0x04
  00000005            00045 SIO_9600        EQU     0x05
  00000006            00046 SIO_19200       EQU     0x06
  00000007            00047 SIO_38400       EQU     0x07
  00000008            00048 SIO_57600       EQU     0x08
  00000009            00049 SIO_115200      EQU     0x09
  0000000A            00050 SIO_250000      EQU     0x0A
                      00024 ; 
                      00025 ;==============================================================================
                      00026 ; PUBLIC ENTRY POINTS
                      00027 ;==============================================================================
                      00028 ;
  0000                00029         EXTERN  SIO_INIT        ; Call this to set up the module before use.
  0000                00030         EXTERN  SIO_RECV        ; Call from ISR when a byte is received.
  0000                00031         EXTERN  SIO_SEND        ; Call from ISR when clear to send next byte.
  0000                00032         EXTERN  SIO_ECHO        ; Print char in SIO_OUTPUT in printable form.**
  0000                00033         EXTERN  SIO_ECHO_W      ; Print char in WREG in printable form.* **
  0000                00034         EXTERN  SIO_WRITE       ; Print char in SIO_OUTPUT in raw form.
  0000                00035         EXTERN  SIO_WRITE_W     ; Print char in WREG in raw form.*
  0000                00036         EXTERN  SIO_PUTCHAR     ; Blocking form of SIO_WRITE.**
  0000                00037         EXTERN  SIO_PUTCHAR_W   ; Blocking form of SIO_WRITE_W.* **
  0000                00038         EXTERN  SIO_READ        ; Read a character to SIO_INPUT.
  0000                00039         EXTERN  SIO_READ_W      ; Read a character to SIO_INPUT and WREG.
  0000                00040         EXTERN  SIO_GETCHAR     ; Blocking form of SIO_READ.**
  0000                00041         EXTERN  SIO_GETCHAR_W   ; Blocking form of SIO_READ_W.**
  0000                00042         EXTERN  SIO_NEWLINE     ; Print a carriage return/line feed.**
  0000                00043         EXTERN  SIO_PRINT_HEX   ; Print value in SIO_OUTPUT as hex byte.**
  0000                00044         EXTERN  SIO_PRINT_HEX_W ; Print value in SIO_OUTPUT as hex byte.* **
  0000                00045         EXTERN  B32__BIN2BCD    ; B32__BIN[4] -> B32__BCD_ASC[5]; big-endian
  0000                00046         EXTERN  B32__BCD2ASCII  ; B32__BCD_ASC[5] -> B32__BCD_ASC[10]
  0000                00047         EXTERN  SIO_SET_BAUD_W  ; Set baud rate from code in W (See serial-io-bits.inc)
  0000                00048         EXTERN  SIO_FLUSH_INPUT ; Clear input buffer; discards any unread received data
  0000                00049         EXTERN  SIO_FLUSH_OUTPUT; Clear output buffer; discards any unsent data
                      00050 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051 ; *Also overwrites SIO_OUTPUT or SIO_INPUT.
                      00052 ; **Blocks execution until device/buffer ready.
                      00053 ;
                      00054 ; The SIO_READ functions are non-blocking, in case you need non-blocking I/O,
                      00055 ; although a better approach would be to check SIO_STATUS<RXDATA_QUEUE> to see
                      00056 ; if there's data queued up waiting to be read before calling SIO_READ.
                      00057 ; Alternatively the SIO_GETCHAR functions always block to wait for data to be
                      00058 ; available.  The SIO_PUTCHAR, SIO_NEWLINE, and SIO_ECHO functions always block 
                      00059 ; until the characters can be successfully buffered to be transmitted.  A
                      00060 ; non-blocking write is avilable from SIO_WRITE.
                      00061 ;
                      00062 ; "printable form" means that control characters print as the two-character
                      00063 ; sequence "^x" (i.e., 0x00="^@", 0x01="^A", etc.); the escape character 0x1B
                      00064 ; prints as "$"; the delete character 0x7F prints as "^?"; and meta-characters
                      00065 ; (i.e., 0x80-0xFF) print as "M-" followed by what the character would have
                      00066 ; echoed as if the high bit were not sent (e.g., 0x80="M-^@", 0xD0="M-P").
                      00067 ;
                      00068 ; "raw form" send the 8-bit byte to the serial port with no translation at all.
                      00069 ;
                      00070 ; The READ functions are non-blocking; they will return 0 if no character is
                      00071 ; available (check SIO_STATUS<RXDATA_QUEUE> to see if data is ready to read).
                      00072 ;
                      00073 ; The GETCHAR functions are blocking; they will wait until they are able to write
                      00074 ; data before completing.
                      00075 ;
                      00076 ;==============================================================================
                      00077 ; PUBLIC DATA
                      00078 ;==============================================================================
                      00079 ;
  0000                00080         EXTERN  SIO_STATUS      ; status register (see serial-io-bits.inc for bit values)
  0000                00081         EXTERN  SIO_INPUT       ; last byte read from serial port (output from module)
  0000                00082         EXTERN  SIO_OUTPUT      ; byte to write to serial port (input to module)
  0000                00083         EXTERN  B32__BIN        ; 4-byte big-endian input to B32__BIN2BCD
  0000                00084         EXTERN  B32__BCD_ASC    ; 5-byte output from B32__BIN2BCD and input/output to/from
                      00085                                 ; B32__BCD2ASCII.
                      00086 ;
                      00087 ; If writing data to the port and the buffer fills up, the printed characters
                      00088 ; will be ignored past the point where the buffer fills up, and the SIO_STATUS<TXDATA_FULL>
                      00089 ; flag will be set.
                      00090 ;
                      00091 ; If too much data arrives at the serial port before you read it out with this module's
                      00092 ; functions, the extra incoming bytes will be discarded, and the SIO_STATUS<RXDATA_FULL>
                      00093 ; flag will be set.
                      00094 ;
                      00095 ; Framing errors and buffer overruns (data received faster than the SIO_RECV function
                      00096 ; could handle them, usually because the SIO_RECV function isn't being called quickly
                      00097 ; enough) cause the SIO_STATUS<SIO_FERR> and SIO_STATUS<SIO_ORUN> bits to be set,
                      00098 ; respectively.
                      00099 ;
                      00100 ; It is the caller's responsibility to clear these flags.
                      00101 ;
                      00102 ; This module will automatically turn on/off the TXIE interrupt enable
                      00103 ; bit as needed to handle shipping out buffered data to the serial port.
                      00104 ; Just ensure that your ISR calls SIO_RECV when an RXIF interrupt is
                      00105 ; detected (you should clear RXIF when that's done), and you also call
                      00106 ; SIO_SEND when TXIF is detected (and clear that bit, too).
                      00107 ;
                      00061         IF QSCC_PORT
                      00062 #include "qscc_init.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 ; Device initialization code.  See lumos_main.asm for hardware implementation
                      00027 ; details.  Most of the initialization will be done in the Lumos firmware.
                      00028 ;
                      00029 #include "quizshow_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
                      00028 ;
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; CONFIGURATION OPTIONS
                      00032 ;==============================================================================
                      00033 ;
                      00034 ; Note: set LUMOS_CHIP_TYPE to LUMOS_CHIP_QSCC or _QSRC in lumos_config.inc
                      00035 ;
                      00030 ; 
                      00031 ;==============================================================================
                      00032 ; PUBLIC ENTRY POINTS
                      00033 ;==============================================================================
  0000                00034         EXTERN  QSCC_INIT       ; Call this to set up the hardware before use.
  0000                00035         EXTERN  QSCC_START      ; Call this before starting the main event loop.
  0000                00036         EXTERN  QSCC_MAIN       ; Call this in each main loop iteration.
  0000                00037         EXTERN  QSCC_CMD6_START
  0000                00038         EXTERN  QS_STOP_SCANNER
                      00039 
                      00040 ;
                      00041 ;
  0000                00063          GLOBAL S0_CMD0
  0000                00064          GLOBAL SSR_00_VALUE
  0000                00065          GLOBAL SSR_00_FLAGS
  0000                00066          GLOBAL SSR_00_STEP
  0000                00067          GLOBAL SSR_00_SPEED
  0000                00068          GLOBAL SSR_00_COUNTER
                      00069         ELSE
                      00070 #include "flash_update.inc"
                      00071         ENDIF
                      00072 
                      00073 ; Works on Lumos 48-Channel controller boards 48CTL-3-1 with retrofit
                      00074 ; and 24SSR-DC-1.0.8 boards.
                      00075 ;
                      00076 ; N.B. THE BOARD SELECT BITS IN LUMOS_CONFIG.INC MUST BE SELECTED
                      00077 ; FOR THE TARGET CONFIGURATION!  EACH ROM IS DIFFERENT!
                      00078 ;
                      00079 ; Target Microcontroller is PIC18F4685, Q=40MHz (100nS instruction cycle)
                      00080 ; (Original was designed for PIC16F777 and PIC16F877A; you must upgrade
                      00081 ; the uC to a PIC18F4685 AND retrofit some parts on the old board as
                      00082 ; follows:
                      00083 ;    Replace X0 and X1 with 10 MHz crystals.
                      00084 ;    Interface off-board reset button to ground J5 and J6 pin 3 when pressed.
                      00085 ;    Interface off-board option button to ground J5 pin 5 when pressed.
                      00086 ;    Install a 10K pull-up resistor between J5 pin 5 and +5V.
                      00087 ;    (Optional) /PWRCTL output to P/S available on J5 pin 4.
                      00088 ;    Option button should only be attached to the master microcontroller.
                      00089 ;    Both need reset signals.
                      00090 ;
                      00091 ; Serial control (RS-232 or RS-485) at 19.2kbps by default.
                      00092 ; Configurable from 300 to 250000 baud.
                      00093 ;
                      00094 ;=============================================================================
                      00095 ; DIAGNOSTICS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00096 ;-----------------------------------------------------------------------------
                      00097 ;
                      00098 ; The front panel LEDs provide the following indications of status.  
                      00099 ;
                      00100 ; A  G  Y  R
                      00101 ; C  R  E  E
                      00102 ; T  N  L  D PHASE MEANING
                      00103 ; ---------- ----- -------
                      00104 ; .  .  .  . BOOT  Never started into boot sequence
                      00105 ; .  .  .  * BOOT  Halted during EEPROM setup
                      00106 ; .  .  *  * BOOT  Halted during EEPROM write operation
                      00107 ; .  .  *  . BOOT  Halted during EEPROM read / system init
                      00108 ; .  *  *  . BOOT  Halted during system initialization
                      00109 ; .  *  .  . BOOT  Initialized but main loop or timing system non-functional
                      00110 ;** ** ** ** RUN   Factory defaults restored (then reboots)
                      00111 ; . (*) .  . RUN   Normal operations
                      00112 ; . **  .  . RUN   Normal operations + privileged (config) mode enabled
                      00113 ; ! (*) X  X RUN   Received command for this unit
                      00114 ; X  X  !  X RUN   Master/Slave communications
                      00115 ; X  X  X  * RUN   Command error
                      00116 ; X  X  * ** RUN   Communications error (framing error)
                      00117 ; X  X ** ** RUN   Communications error (overrun error)
                      00118 ; X  X (*)** RUN   Communications error (buffer full error)
                      00119 ;** (*)**  . RUN   Internal error (exact error displayed on 2nd set of LEDs)*
                      00120 ; . () () () SLEEP Sleep Mode
                      00121 ; .  .  .  % HALT  System Halted normally
                      00122 ; ?  ?  ? ** HALT  Fatal error (exact error displayed on other LEDs)
                      00123 ;**  . ** ** HALT  Fatal error: reset/halt failure
                      00124 ;
                      00125 ; .=off  *=steady (*)=slowly fading on/off X=don't care
                      00126 ; ()=slow flash **=rapid flash !=blink/fade once (**)=rapid fade
                      00127 ; %=extra-slow flash
                      00128 ;
                      00129 ;
                      00130 ; *Internal error codes on 2nd LEDs (48-channel models only)
                      00131 ; A  G  Y  R
                      00132 ; C  R  E  E
                      00133 ; T  N  L  D MEANING
                      00134 ; ---------- -------
                      00135 ;-- **  .  . dispatch table overrun
                      00136 ;--  X  .  * input validator failure
                      00137 ;-- ** ** ** reset failure
                      00138 ;--  X  . ** device/hardware problem
                      00139 ;--  X  .(*) internal command error
                      00140 ;--  . **  . unknown/other error class
                      00141 ;-- 
                      00142 ;
                      00143 ; Error codes retrieved from query command
                      00144 ; 01  Command decode error (dispatch overrun)
                      00145 ; 02  Input validator failed to deal with bad value (channel number range for SET_LVL)
                      00146 ; 03  Input validator failed to deal with bad value (channel number range for BULK_UPD)
                      00147 ; 04  Input validator failed to deal with bad value (BULK_UPD data block scan)
                      00148 ; 05  Command decode error (dispatch overrun in S6 final command execution)
                      00149 ; 06  Input validator failed to deal with bad value (channel number range for RAMP_LVL)
                      00150 ; 07  Command decode error (dispatch overrun in S9 internal command execution)
                      00151 ; 08  Command decode error (illegal state transition in S10 for IC_TXDAT/IC_TXSTA)
                      00152 ; 09  Command impossible to carry out on this hardware (chip without T/R tried to take control of bus)
                      00153 ; 0A  Illegal internal command sent from master chip (invalid packet in S11 IC_TXDAT/IC_TXSTA)
                      00154 ; 0B  Command decode error (illegal state transition in S11 for IC_TXDAT/IC_TXSTA)
                      00155 ; 0C  Command decode error (illegal state transition in S12 for IC_LED)
                      00156 ; 0D  Command decode error (illegal state transition in S13 for IC_LED)
                      00157 ; 0E  Command decode error (extended dispatch overrun)
                      00158 ; 0F  Illegal internal command sent from master chip (received raw QUERY packet)
                      00159 ; 10  Could not determine device type                                  _
                      00160 ; 11  Command impossible to carry out on this hardware (chip without T/R tried to release control of bus
                            )
                      00161 ; 12  Internal inter-CPU command executed on wrong class hardware
                      00162 ; 
                      00163 ; 20  Unrecognized command received or command arguments incorrect
                      00164 ; 21  Attempt to invoke privileged command from normal run mode
                      00165 ; 22  Command not yet implemented
                      00166 ; 23  Command received before previous one completed (previous command aborted)
                      00167 ; 70  CPU failed to reset with new configuration (execution bounds check)
                      00168 ; 71  CPU failed to halt when requested (execution bounds check)
                      00169 ;
                      00170 ; OPTION BUTTON:
                      00171 ; 
                      00172 ; Pres and hold the option button to enter field setup mode.  The lights will
                      00173 ; flash rapidly to signal this mode change.  Release the button and wait.  
                      00174 ; The lights will remain steady.  This enables the privileged 
                      00175 ; (configuration) command mode, allowing the Lumos unit to receive device 
                      00176 ; configuration commands from the host PC.
                      00177 ;
                      00178 ; Press the button again to enter self-test mode.  The LEDs will chase
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00179 ; once to signal this mode.  In this mode, serial communication to the
                      00180 ; unit will be ignored.  Each output channel in turn will be turned on 
                      00181 ; for one second. The dimmer is NOT used, only fully on/fully off.  The
                      00182 ; LEDs on the top board will show the least-significant 4 bits of the
                      00183 ; output channel currently on.  If present, the bottom board's LEDs will
                      00184 ; show the most significant bits.
                      00185 ; 
                      00186 ; Pressing the button in this mode causes the cycle to pause on the current
                      00187 ; output channel until the button is pressed again to resume the cycle.
                      00188 ; 
                      00189 ; Pressing and holding the button will exit option mode and return to
                      00190 ; regular (but still privileged) run mode.  The host PC can issue a command
                      00191 ; to drop privileged mode, or the RESET button may be pressed to reset the
                      00192 ; system completely which includes disabling privileged mode.
                      00193 ; 
                      00194 ; ---TOP*---  --BOT--
                      00195 ; A  G  Y  R  G  Y  R
                      00196 ; C  R  E  E  R  E  E
                      00197 ; T  N  L  D  N  L  D  PHASE  MEANING
                      00198 ; -------------------  -----  -------
                      00199 ;** ** ** ** ** ** **  OPTION Entering option mode
                      00200 ; X **  X  X  X  X  X  OPTION Entered privileged run mode
                      00201 ;b3 b2 b1 b0 b5 b4 (*) OPTION Self-test mode (cycling)
                      00202 ;b3 b2 b1 b0 b5 b4  *  OPTION Self-test mode (paused)
                      00203 ;
                      00204 ; 24-channel models only have the top LEDs.  If sensors are installed
                      00205 ; in place of LEDs, some of these may not be present.
                      00206 ;
                      00207 ;=============================================================================
                      00208 ; IMPLEMENTATION NOTES
                      00209 ;-----------------------------------------------------------------------------
                      00210 ;
                      00211 ; The SSR controller firmware consists of a number of somewhat independent 
                      00212 ; subsystems:
                      00213 ; 
                      00214 ; START
                      00215 ;       Initializes the microcontroller, starts up the required peripherals,
                      00216 ;       indicates the device ID on the front panel, and enters the main loop
                      00217 ;
                      00218 ; SIO
                      00219 ;       Handles all serial I/O operations in the background (interrupt-driven)
                      00220 ;       so the rest of the code only needs to be concerned with higher-level
                      00221 ;       reads and writes.  Buffers hold 256 characters each of input and output.
                      00222 ;
                      00223 ; ISR
                      00224 ;       The interrupt service routine manages a set of counters and timers:
                      00225 ;       1. At each AC line zero-crossing point, we reset a two-stage waveform
                      00226 ;          slicing timing chain which governs the ability for the SSRs to dim
                      00227 ;          incandescent lamps plugged into them; 
                      00228 ;       2. For DC boards, we run a 120 Hz timer which provides approximately
                      00229 ;          the same time base since those boards have no zero-crossing detection;
                      00230 ;       3. Each front panel LED has a counter for how long their current 
                      00231 ;          status is to be held, to allow a human to have enough time to 
                      00232 ;          see the LED before it would be extinguished. (This is less explicit
                      00233 ;          now than the previous major firmware version.  The LEDs are now simply
                      00234 ;          treated just like extra SSR lines, so they use the same code to manage
                      00235 ;          them.)
                      00236 ;
                      00237 ; MAIN_LOOP
                      00238 ;       Manages the display of the front panel LEDs
                      00239 ;       Updates the status of the SSR lines if it's time to do so
                      00240 ;       Receives a character from the serial line if one's waiting
                      00241 ;
                      00242 ; INTERPRETER
                      00243 ;       When a byte is received on the serial line, it is processed by
                      00244 ;       a small state machine.  The current state is held in YY_STATE (named
                      00245 ;       in honor of the venerable yacc).
                      00246 ;
                      00247 ; FLASH_UPDATE
                      00248 ;       (flash_update.asm) Loader code to receive new firmware image over the
                      00249 ;       serial line and write it into the microcontroller's flash memory.
                      00250 ;
                      00251 ;-----------------------------------------------------------------------------
                      00252 ; Command Protocol:
                      00253 ;                     ___7______6______5______4______3______2______1______0__
                      00254 ; Command Byte:      |      |                    |                           |
                      00255 ;                    |   1  |    Command code    |   Target device address   |
                      00256 ;                    |______|______|______|______|______|______|______|______|
                      00257 ;
                      00258 ; Any byte with its MSB set is the beginning of a command.  If the target 
                      00259 ; device matches this unit's address, the state machine kicks into gear and
                      00260 ; processes the command (which may require some following data bytes, all
                      00261 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00262 ; byte.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00263 ;
                      00264 ;                     ___7______6______5______4______3______2______1______0__
                      00265 ; Extended Command:  |      |                    |                           |
                      00266 ;                    |   1  |          7         |   Target device address   |
                      00267 ;                    |______|______|______|______|______|______|______|______|
                      00268 ;                    |      |                                                |
                      00269 ;                    |   0  |                  Command code                  |
                      00270 ;                    |______|______|______|______|______|______|______|______|
                      00271 ;
                      00272 ; The most common commands are given ID 0-6 so that they may be sent in as few
                      00273 ; bytes as possible (as few as a single byte), but we have more than 8 commands
                      00274 ; so we have an extended code.  If the command code is 7 (all bits set), then
                      00275 ; the following byte contains the actual command code which may be any value
                      00276 ; from 0-127.
                      00277 ;
                      00278 ;                     ___7______6______5______4______3______2______1______0__
                      00279 ; Data Byte:         |      |                                                |
                      00280 ;                    |   0  |                      Data                      |
                      00281 ;                    |______|______|______|______|______|______|______|______|
                      00282 ;
                      00283 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00284 ; in the middle of interpreting a multi-byte command, in which case it's interpreted
                      00285 ; appropriately as data supporting the command being executed.  This way, other
                      00286 ; devices which share the same protocol format but not necessarily a compatible
                      00287 ; command set may safely know which bytes can be ignored without knowing the
                      00288 ; details of each other's command sets.
                      00289 ;
                      00290 ; Two special bytes are recognized:
                      00291 ;
                      00292 ;                     ___7______6______5______4______3______2______1______0__
                      00293 ; MSB Escape:        |      |                                                |
                      00294 ;                    |   0  |   1      1      1      1      1      1      0  |
                      00295 ;                    |______|______|______|______|______|______|______|______|
                      00296 ;
                      00297 ; If this ($7E) byte is received, it is ignored but the next byte received will
                      00298 ; have its MSB bit set.  This allows data bytes to have full 8-bit values without
                      00299 ; violating the communication protocol described above.  That second byte is not
                      00300 ; interpreted further.
                      00301 ;
                      00302 ;                     ___7______6______5______4______3______2______1______0__
                      00303 ; Literal Escape     |      |                                                |
                      00304 ;                    |   0  |   1      1      1      1      1      1      1  |
                      00305 ;                    |______|______|______|______|______|______|______|______|
                      00306 ;
                      00307 ; If this ($7F) byte is received, it is ignored but the next byte is accepted
                      00308 ; as-is without further interpretation.
                      00309 ;
                      00310 ; Specific Example Cases of interest:
                      00311 ;       Sequence    Resulting byte
                      00312 ;       $7E $7E     $FE
                      00313 ;       $7E $7F     $FF
                      00314 ;       $7F $7E     $7E
                      00315 ;       $7F $7F     $7F
                      00316 ;
                      00317 ; A command byte (received with MSB already set) trumps all of the above.  It is
                      00318 ; taken as the start of a command and the escape sequence in progress is canceled.
                      00319 ;
                      00320 ; Commands recognized:
                      00321 ;
                      00322 ;   COMMAND  CODE  BITS
                      00323 ;   BLACKOUT 0     1000aaaa
                      00324 ;   ON_OFF   1     1001aaaa 0scccccc            Turn channel <c> on (<s>=1) or off (<s>=0)
                      00325 ;   SET_LVL  2     1010aaaa 0hcccccc 0vvvvvvv    Set dimmer level <v>:<h> on channel <c>
                      00326 ;   BULK_UPD 3     1011aaaa 0mcccccc ...                Bulk-upload multiple channel levels
                      00327 ;   RAMP_LVL 4     1100aaaa Cdcccccc ...         Ramp channel <c> smoothly up (<d>=1) or down (<C>=1 cyc
                            le)
                      00328 ;            5     1101aaaa                      Reserved for future use
                      00329 ;            6     1110aaaa                      Reserved for future use
                      00330 ;   EXTENDED 7     1111aaaa                      Extended command, decoded further in next byte
                      00331 ; @ SLEEP    7+0   1111aaaa 00000000 01011010 01011010  Put unit to sleep
                      00332 ; @ WAKE     7+1   1111aaaa 00000001 01011010 01011010  Take unit out of sleep mode
                      00333 ;   SHUTDOWN 7+2   1111aaaa 00000010 01011000 01011001  Take unit completely offline
                      00334 ; < QUERY    7+3   1111aaaa 00000011 00100100 01010100  Report device status
                      00335 ;X! DEF_SEQ  7+4   1111aaaa 00000100 0iiiiiii ...       Define sequence <i>
                      00336 ;X  EXEC_SEQ 7+5   1111aaaa 00000101 0iiiiiii           Execute sequence <i> (0=stop)
                      00337 ;X  DEF_SENS 7+6   1111aaaa 00000110 ...                Define sensor trigger
                      00338 ;X  MSK_SENS 7+7   1111aaaa 00000111 0000ABCD           Mask inputs (1=enable, 0=disable)
                      00339 ;X! CLR_SEQ  7+8   1111aaaa 00001000 01000011 01000001  Erase all stored sequences
                      00340 ;   XPRIV    7+9   1111aaaa 00001001                    Forbid priviliged mode
                      00341 ;            7+10  1111aaaa 00001010                    Reserved for future use
                      00342 ;             :        :        :                           :     :     :    : 
                      00343 ;            7+29  1111aaaa 00011101                    Reserved for future use                 
                      00344 ;   OUT_NAK  7+30  1111aaaa 00011110                    QUERY NAK                               
                      00345 ;   OUT_RPLY 7+31  1111aaaa 00011111 ...                Reply to QUERY command_________________ 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00346 ;   IC_TXDAT 7+32  11110000 00100000 0nnnnnnn (...)*<n>+1 00011011 data -> serial port INTERNAL
                      00347 ;   IC_LED   7+33  11110000 00100001 00GGGYYY 00000RRR             LED Control         ////////
                      00348 ;   IC_HALT  7+34  11110000 00100010                               CPU Halt            ////////
                      00349 ;   IC_TXSTA 7+35  11110000 00100011 0nnnnnnn (...)*<n>+1 00011011 TXDAT + status+sent ////////
                      00350 ;            7+36  11110000 00100100                    Reserved for new commands      ////////
                      00351 ;             :        :        :                           :     :   :      :         ////////
                      00352 ;            7+63  11110000 00111111                    Reserved for new commands______////////
                      00353 ;*! CF_PHASE 7+64  1111aaaa 010000pp 0ppppppp 01010000 01001111   Phase offset=<p>       CONFIG
                      00354 ;*! CF_ADDR  7+96  1111aaaa 0110AAAA 01001001 01000001 01000100   Change address to <A>  ||||||
                      00355 ;*  CF_NOPRV 7+112 1111aaaa 01110000                              Leave privileged mode  ||||||
                      00356 ;*  CF_CONF  7+113 1111aaaa 01110001 ...                          Configure device       ||||||
                      00357 ;*! CF_BAUD  7+114 1111aaaa 01110010 0bbbbbbb 00100110            Set baud rate to <b>   ||||||
                      00358 ;*! CF_RESET 7+115 1111aaaa 01110011 00100100 01110010            Reset factory defaults ||||||
                      00359 ;*  CF_XPRIV 7+116 1111aaaa 01110100                              Forbid priviliged mode ||||||
                      00360 ;*  CF_FLROM 7+117 1111aaaa 01110101 00110011 01001100 00011100   Begin ROM update cycle ||||||
                      00361 ;*           7+118 1111aaaa 01110110                     Reserved for future config cmd  ||||||
                      00362 ;*                     :        :                            :     :     :      :    :   ||||||
                      00363 ;*           7+127 1111aaaa 01111111                     Reserved for future config cmd__||||||
                      00364 ;
                      00365 ; Legend:
                      00366 ;   X Not yet implemented; planned for future; subject to change
                      00367 ;   @ Unit may automatically take this action
                      00368 ;   * Privileged configuration-mode command
                      00369 ;   ! Permanent effect (written to EEPROM)
                      00370 ;   < Command generates response data (back to host)
                      00371 ;   a Device address (0-15)
                      00372 ;   b Baud rate code (0-127), but units may only define a small subset of those values
                      00373 ;   c Output channel (0-63, but unit may only support a lesser number)
                      00374 ;   d Direction: up (<d>=1) or down (<d>=0).
                      00375 ;   h High-res level bit (LSB of 8-bit value when in high-res mode)
                      00376 ;   m Mode (1=high-res, 0=low-res)
                      00377 ;   n Number of items affected
                      00378 ;   s Output state: 0=off, 1=on
                      00379 ;   v Value of dimmer (0-127) (most significant 7 bits of dimmer value)
                      00380 ;
                      00381 ; Payloads for many-byte commands
                      00382 ;
                      00383 ; BULK_UPD:  00cccccc 0nnnnnnn v0 v1 v2 ... vn 01010101
                      00384 ;       Updates <n>+1 channels starting at <c>, giving <v> values for each as per SET_LVL.
                      00385 ;
                      00386 ; RAMP_LVL:  0dcccccc 0sssssss 0ttttttt   Channel <c> up/down in <s>+1 steps every <t>+1/120 sec
                      00387 ;
                      00388 ; DEF_SEQ:   0iiiiiii 0nnnnnnn (...)*<n+1> 01000100 01110011  Define sequence <i> of length <n+1>
                      00389 ;                                                             0 is boot sequence, 1-63 is EEPROM
                      00390 ;                                                             64-127 is RAM.
                      00391 ;
                      00392 ; DEF_SENS:  0owE00SS 0IIIIIII 0iiiiiii 0PPPPPPP 00111100
                      00393 ;       Defines the trigger for sensor <S> (00=A, 01=B, 10=C, 11=D), where the event triggers
                      00394 ;       when sensor input goes low (<E>=0) or high (<E>=1).  When triggered, sequence <I>
                      00395 ;       initially, then continues playing sequence <i> (once if <O>=1, else while the sensor
                      00396 ;       remains active if <W>=1, else forever until forced to stop), then sequence <P> is
                      00397 ;       played at the end of the event.
                      00398 ;
                      00399 ; IC_LED:    00GGGYYY 00000RRR
                      00400 ;       each 3 bits decode as:
                      00401 ;               000 steady off  001 steady on
                      00402 ;               010 slow fade   011 fast fade
                      00403 ;               100 slow flash  101 fast flash
                      00404 ;               11x no change
                      00405 ;
                      00406 ; CF_CONF:   0ABCDdcc 0ccccccc 00111010 00111101
                      00407 ;       Configure sensor lines ABCD as 1=sensor inputs or 0=LED outputs,
                      00408 ;       DMX mode if <d>=1, with Lumos channel 0 at DMX channel <c>+1.
                      00409 ;       
                      00410 ; CF_BAUD:   Values recognized:
                      00411 ;       00000000 ($00)      300 baud
                      00412 ;       00000001 ($01)      600
                      00413 ;       00000010 ($02)    1,200
                      00414 ;       00000011 ($03)    2,400
                      00415 ;       00000100 ($04)    4,800
                      00416 ;       00000101 ($05)    9,600
                      00417 ;       00000110 ($06)   19,200
                      00418 ;       00000111 ($07)   38,400
                      00419 ;       00001000 ($08)   57,600
                      00420 ;       00001001 ($09)  115,200
                      00421 ;       00001010 ($0A)  250,000
                      00422 ;
                      00423 ;
                      00424 ; Response packet from QUERY command (37 bytes):
                      00425 ; note the ROM version byte also serves to indicate the format of the response
                      00426 ; bytes which follow.  If the query packet format changes, the ROM version byte
                      00427 ; MUST also change.
                      00428 ;
                      00429 ;    1111aaaa 00011111 00110001 0ABCDdcc 0ccccccc 0ABCDqsf 0ABCDXpp 0ppppppp 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00430 ;        \__/           \_/\__/  \__/|\_________/  \__/|||  \__/|\_________/  
                      00431 ;          |             maj |     | |   |           | |||   |  |      `--phase
                      00432 ;          `--reporting    minor   | |   `--DMX      | |||   |  `--config locked?
                      00433 ;              unit addr  rom      | |      channel  | |||   `--active
                      00434 ;                         vers.    | |               | ||`--mem full?
                      00435 ;                                  | `--DMX mode?    | |`--sleeping?
                      00436 ;                                  `--configured     | `--config mode?
                      00437 ;                                                    `--masks
                      00438 ;
                      00439 ;    0eeeeeee 0eeeeeee 0MMMMMMM 0MMMMMMM 0X0iiiii 0xxxxxxx 
                      00440 ;     \______________/  \______________/  | \___/  \_____/
                      00441 ;        `--EEPROM free    `--RAM free    |   |       `--executing seq.
                      00442 ;                                         |   `--device model
                      00443 ;                                         `--seq running?
                      00444 ;
                      00445 ;    0owE0000 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for A
                      00446 ;    0owE0001 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for B
                      00447 ;    0owE0010 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for C
                      00448 ;    0owE0011 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for D
                      00449 ;
                      00450 ;    0fffffff 0fffffff 000000pp 0ppppppp ssssssss ssssssss 00110011
                      00451 ;    \______/ \______/       \_________/ \______S/N______/
                      00452 ;        |        |               `--phase (channels 24-47)
                      00453 ;        |        `--fault code (channels 24-47)
                      00454 ;        `--fault code (channels 0-23)
                      00455 ;
                      00456 ; Also note that the controller is allowed to send OUT_NAK packets to the
                      00457 ; host in response to QUERY commands.  This does not complete the exchange,
                      00458 ; but serves to ask the host to continue waiting if the device won't be able
                      00459 ; to reply to the QUERY for long enough that it risks a timeout.  The host
                      00460 ; is under no obligation to respect the OUT_NAK packets.
                      00461 ;
                      00462 ;   1111aaaa 00011110 
                      00463 ;
                      00464 ; A controller MUST never send data except in response to an explicit
                      00465 ; request from the host.  Controllers MUST immediately cease sending
                      00466 ; data upon receiving any bytes on the network (this indicates that
                      00467 ; the host is no longer waiting for a reply but has moved on to something
                      00468 ; else or is querying another device now).  No further data may be sent
                      00469 ; until again explicitly asked for.
                      00470 ;
                      00471 ; This version of the Lumos ROM does not send OUT_NAK packets.
                      00472 ;
                      00473 ; 
                      00474 ;
                      00475 ;
                      00476 ;                     _______________________________________________________
                      00477 ; Channel ID:        |      |      |                                         |
                      00478 ;                    |  0   | ON   |               Channel ID                |
                      00479 ;                    |______|______|______|______|______|______|______|______|
                      00480 ; The ON bit <6> determines whether the channel is being turned on (1) or 
                      00481 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00482 ; setting the channel to a specific dimmer value.
                      00483 ;
                      00484 ;-----------------------------------------------------------------------------
                      00485 ; State Machine Details
                      00486 ;
                      00487 ; Normally sits at state 0 (Idle) where it pretty much spins free waiting
                      00488 ; for the start of a command to come along.
                      00489 ;
                      00490 ;  __________ my   __________
                      00491 ; |17 |      |slot|18 |      |
                      00492 ; |___|      |--->|___|      |
                      00493 ; | DMX WAIT |<---| DMX UPD  |
                      00494 ; |__________| brk|__________|
                      00495 ;    ^  |nottype0       |done
                      00496 ;    |  V_______________V_____________________________________.
                      00497 ; brk|  |                                                     |
                      00498 ;  __|__V____      __________                                 |
                      00499 ; | 0 |      |    | 1 |      |                                |
                      00500 ; |___|      |--->|___|      |                                |
                      00501 ; |   IDLE   |<---| ON_OFF   |                                | 
                      00502 ; |__________|  ch|__________|                                |
                      00503 ;    ^  |          __________      ___                        |
                      00504 ;    |  |         | 2 |      |ch  |   |v                      |
                      00505 ;    |  |-------->|___|      |--->| 3 |---------------------->|
                      00506 ;    |  |         | SET_LVL  |    |___|                       |
                      00507 ;    |  |         |__________|                                |
                      00508 ;    |  |          __________      ___      ___               |
                      00509 ;    |  |         | 5 |      |ch  |   |s   |   |t             |
                      00510 ;    |  |-------->|___|      |--->| 7 |--->| 8 |------------->|
                      00511 ;    |  |         | RAMP_LVL |    |___|    |___|              |
                      00512 ;    |  |         |__________|                                |
                      00513 ;    |  |          __________                  __________     |
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00514 ;    |  |         | 4 |      |ch              | 6 | Wait |    |
                      00515 ;    |  |-------->|___|      |--------------->|___|  for |--->|
                      00516 ;    |  |         | BULK_UPD |                | Sentinel |    |
                      00517 ;  __|__V____     |__________|                |__________|    |
                      00518 ; | 9 |      |                                      ^         |
                      00519 ; |___|      |                                      |         |
                      00520 ; | Extended |------------------------------------->|         |
                      00521 ; |__________|                                      |         |
                      00522 ;       |          __________                       |         |
                      00523 ;       |         |14 |      |i                     |         |
                      00524 ;       |-------->|___|      |----------------------'         |
                      00525 ;       |         | DEF_SEQ  |                                |
                      00526 ;       |         |__________|                                |
                      00527 ;       |          __________      ____                       |
                      00528 ;       |         |10 |      |N   |    |(done)                |
                      00529 ;       |-------->|___|      |--->| 11 |--------------------->|
                      00530 ;       |         | IC_TXDAT |    |____|                      |
                      00531 ;       |         | IC_TXSTA |                                |
                      00532 ;       |         |__________|                                |
                      00533 ;       |          __________      ____                       |
                      00534 ;       |         |12 |      |GY  |    |R                     |
                      00535 ;       |-------->|___|      |--->| 13 |--------------------->|
                      00536 ;       |         | IC_LED   |    |____|                      |
                      00537 ;       |         |__________|                                |
                      00538 ;       |          __________                                 |
                      00539 ;       |         |15 |      |i                               |
                      00540 ;       |-------->|___|      |------------------------------->|
                      00541 ;       |         | EXEC_SEQ |                                |
                      00542 ;       |         |__________|                                |
                      00543 ;       |          __________                                 |
                      00544 ;       |         |16 |      |m                               |
                      00545 ;       `-------->|___|      |--------------------------------'
                      00546 ;                 | MSK_SENS |    
                      00547 ;                 |__________|              
                      00548 ;
                      00549 ;-----------------------------------------------------------------------------
                      00550 ; System Timing Notes
                      00551 ;
                      00552 ; The system has some fairly specific real-time timing requirements in order
                      00553 ; to function properly.  The main external event we're synchronized to is the
                      00554 ; point where the AC waveform crosses the 0V line (the "zero crossing" point).
                      00555 ;
                      00556 ; An optoisolator on the controller board is connected to the AC input of the
                      00557 ; transformer and sends a positive-logic pulse to the INT pin of the micro-
                      00558 ; controller every time the AC line crosses 0V.  (Actually, the leading edge
                      00559 ; will slightly lead the zero crossing point and the trailing edge will 
                      00560 ; slightly lag behind it.)  So we enter our ISR once every 1/120 sec 
                      00561 ; (assuming US-standard 60Hz power).  For reference, this is 0.00833333 sec 
                      00562 ; or enough time for 83,333.333 instructions to be executed between each 
                      00563 ; interrupt.
                      00564 ;
                      00565 ; Slices  Time/slice (s)  Instructions/slice
                      00566 ;   1     0.00833333      83,333.333
                      00567 ;  32     0.00026042       2,604.167
                      00568 ;  64     0.00013021       1,302.083
                      00569 ; 128     0.00006510         651.042
                      00570 ; 132     0.00006313         631.313    128 levels + 2 on each end
                      00571 ; 260     0.00003205         320.513    256 levels + 2 on each end
                      00572 ;
                      00573 ; We divide the half-wave into "slices".  We need a minimum of 256 slices
                      00574 ; to get 256 levels of dimmer control, but we should add at least one on either
                      00575 ; end in case our timing's slightly off between the ZC points and the free-
                      00576 ; running timer.  For good measure, let's throw in a couple more to allow for
                      00577 ; pin settling times, minimum turn-on times for the triacs and just to be
                      00578 ; paranoid.  So let's say 260 slices per half-wave.  
                      00579 ;
                      00580 ; At 260 slices per ZC, each slice is 0.00003205128205128205 seconds.
                      00581 ; We set TMR2's period register to 159, with a 1:2 postscaler and no prescaler.
                      00582 ; That gives us a timer interrupt every 320 clock ticks, or every .000032 seconds.
                      00583 ; That's 320 instruction cycles worth of work we can pack into these cycles.
                      00584 ; Most of the work per cycle takes about 1/3 that much, so this should be ok.
                      00585 ;
  0000009F            00586 SLICE_TMR_PERIOD        EQU     0x9F
                      00587 ;
                      00588 ; For standalone DC boards, we don't have a zero-crossing input so we set up
                      00589 ; our own 120 Hz timing signal by running TMR0 with a 1:2 prescaler for 
                      00590 ; 41,666 clock ticks (i.e., running the timer from $5D3D-$FFFF).
                      00591 ;
                      00592                         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
  00005D3D            00593 CYCLE_TMR_PERIOD         EQU    0x5D3D
                      00594                         ENDIF
                      00595 ;
                      00596 ; In the previous (prototype) version of this controller, we took the ZC
                      00597 ; signal from the *secondary* side of the transformer, which meant that it
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00598 ; was possible for that to be out of phase with the actual AC ZC event, so
                      00599 ; the "phase delay" feature of the event handling code was written to 
                      00600 ; compensate for this.  Now that we sample the AC line directly, we set 
                      00601 ; this delay to a constant value and that should be good.  We left the 
                      00602 ; capability in here, though, to account for any need for adjustment which
                      00603 ; may turn up due to component tolerances, propagation delays, or similar
                      00604 ; things.  We correct for any phase offset by adding a software delay
                      00605 ; from 0-511 (although really only 0-260 make much sense) slices between the ZC
                      00606 ; interrupt and the start of the dimmer cycle of 260 slices.  (The other 4 
                      00607 ; slices are idle (not active) slices.) 
                      00608 ;
                      00609 ; The value for PHASE_OFFSET should be chosen to start the cycle one or two
                      00610 ; slices into the actual half-wave.  So if there is no phase difference at all
                      00611 ; between sides of the transformer, PHASE_OFFSET should be 2.
                      00612 ;
                      00613 ; Here's the timeline:
                      00614 ;
                      00615 ;                    REAL                               REAL
                      00616 ;                     ZC                                 ZC
                      00617 ;    |................|..|...............|....|....|.....|..|..............
                      00618 ;    |phase delay------->|               |phase delay------>|
                      00619 ;    |                   |working slices----->|    |        |working slices-->
                      00620 ;    |                                   |    |idle|
                      00621 ;   INT                                 INT
                      00622 ;   (ZC)                                (ZC)
                      00623 ;
                      00624 ; Of course, in the current design, there is no phase shift across
                      00625 ; the transformer, so we'd have the trivial case of PHASE_OFFSET=2 (2 just to
                      00626 ; allow a little fudge room with the free-running slice timer which is not
                      00627 ; *quite* an even factor of the half-wave time):
                      00628 ;
                      00629 ;    REAL                         REAL
                      00630 ;     ZC                           ZC
                      00631 ;    .|..|....................|....|..|.................|
                      00632 ;     |->|                    |    |->|                 |
                      00633 ;     |  |working slices----->|    |  |working slices-->|
                      00634 ;     |  |                    |idle|  |                 |
                      00635 ;    INT                          INT
                      00636 ;
                      00637 ; Since the free-running slice timer isn't exactly in sync with the ZC timing,
                      00638 ; we'll start our working slices some variable fraction of 1/260th of a half-cycle
                      00639 ; each time.  This will cause a "wobble" in brightness level of not more than 
                      00640 ; 1/260th brightness level (something less than one brightness increment), which
                      00641 ; ought to be difficult or impossible to notice by looking at an incandescent
                      00642 ; light load.  This is one reason why PHASE_OFFSET should be set to allow 1-2
                      00643 ; idle slices before we start turning on SSRs.
                      00644 ;
                      00645 ; On ZC interrupt, we set CUR_PRE to PHASE_OFFSET and set <PRECYC>.
                      00646 ; On TMR2 interrupt, if SSR_STATE<PRECYC>, decrement CUR_PRE.
                      00647 ;   if zero, clear SSR_STATE<PRECYC>, set CUR_SLICE to 256, set <INCYC>,<DIM_START>.
                      00648 ;   if SSR_STATE<INCYC>, decrement CUR_SLICE; if zero, set DIM_END, clr INCYC; else set SLICE_UPD
                      00649 ; 
                      00650 ; In main polling loop:
                      00651 ;   if DIM_START: turn on "on" SSRs, clear DIM_START
                      00652 ;   if SLICE_UPD: turn on SSR == CUR_SLICE for SSRs with SSRDIM set; clear SLICE_UPD
                      00653 ;   if DIM_END:   turn off all except SSR_ON, clear DIM_END
                      00654 ;
                      00655 ; PRECYC INCYC SLICE_UPD  CUR_PRE CUR_SLICE
                      00656 ;    0     x       x         x       x
                      00657 ;    1     x       x         4       x       <--zc
                      00658 ;    1     x       x         3       x
                      00659 ;    1     x       x         2       x
                      00660 ;    1     x       x         1       x
                      00661 ;    0     1     1-->0       0      255      SSR@255/on turned on
                      00662 ;    0     1     1-->0       0      254      SSR@254    turned on
                      00663 ; ...
                      00664 ;    0     1     1-->0       0       2       SSR@2     turned on
                      00665 ;    0     1     1-->0       0       1       SSR@1     turned on
                      00666 ;    0     0     1-->0       0       0       all non-on turned off
                      00667 ;    0     0       0         0       0       idle...
                      00668 ; ...
                      00669 ;    1     0       0         4       0       <--zc
                      00670 ; 
                      00671 ;
                      00672 ;=============================================================================
                      00673 ; HARDWARE DESCRIPTION
                      00674 ;-----------------------------------------------------------------------------
                      00675 ;
                      00676 ; The 48-channel and 24-channel boards use the 18F4685 microcontroller 
                      00677 ; (LUMOS_ARCH == "4685"), while the 4-channel boards use the smaller
                      00678 ; 18F14K50 chip (LUMOS_ARCH == "14K50").
                      00679 ;
                      00680 ;  PIC18F4685 Microcontroller I/O pin assignments:
                      00681 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00682 ; 24-CH   48-CH          ________   _________         48-CH   24-CH
                      00683 ; BOARD:  BOARD:        |o       \_/         |        BOARD:  BOARD:
                      00684 ; /RESET  /RESET -->  1 | /MCLR RE3  PGD RB7 | 40 --> /PWRCTL /PWRCTL
                      00685 ; /SSR23  /SSR16 <--  2 | RA0        PGC RB6 | 39 <-- /OPTION /OPTION
                      00686 ; /SSR22  /SSR14 <--  3 | RA1        PGM RB5 | 38 --> /SSR15  /SSR00
                      00687 ; /SSR21  /SSR12 <--  4 | RA2            RB4 | 37 --> /SSR13  /SSR01
                      00688 ; /SSR20  /SSR10 <--  5 | RA3            RB3 | 36 --> /SSR11  /SSR02
                      00689 ; /SSR19  /SSR08 <--  6 | RA4       INT2 RB2 | 35 --> /SSR09  /SSR03
                      00690 ; ACT    ACT*LED <--  7 | RA5       INT1 RB1 | 34 --> /SSR07  /SSR04 _
                      00691 ; GRN    GRN LED <--  8 | RE0       INT0 RB0 | 33 <-- ZC INT  -->  T/R
                      00692 ; YEL    YEL LED <--  9 | RE1            VDD | 32 --- +5V       
                      00693 ; RED    RED LED <-- 10 | RE2            VSS | 31 --- GND      
                      00694 ;            +5V --- 11 | VDD            RD7 | 30 --> /SSR17  /SSR05
                      00695 ;            GND --- 12 | VSS            RD6 | 29 --> /SSR06  /SSR06
                      00696 ;           xtal --- 13 | OSC            RD5 | 28 --> /SSR05  /SSR07
                      00697 ;             +----- 14 | OSC            RD4 | 27 --> /SSR18  /SSR08
                      00698 ; /SSR18  /SSR04 <-- 15 | RC0         RX RC7 | 26 <-- Serial RxD
                      00699 ; /SSR17  /SSR19 <-- 16 | RC1         TX RC6 | 25 --> Serial TxD
                      00700 ; /SSR16  /SSR03 <-- 17 | RC2            RC5 | 24 --> /SSR02  /SSR09
                      00701 ; /SSR15  /SSR01 <-- 18 | RC3            RC4 | 23 --> /SSR00  /SSR10
                      00702 ; /SSR14  /SSR23 <-- 19 | RD0            RD3 | 22 --> /SSR22  /SSR11
                      00703 ; /SSR13  /SSR21 <-- 20 | RD1            RD2 | 21 --> /SSR20  /SSR12
                      00704 ;                       |____________________|
                      00705 ;                  _
                      00706 ; *pin 7 goes to T/R on the slave controller instead of the LED.
                      00707 ;
                      00708 ;
                      00709 ; The outputs from the controller board are on a 26-bin ribbon cable
                      00710 ; header with this pinout:
                      00711 ;
                      00712 ;                               _________
                      00713 ;                       SSR23  |  1 |  2 |  SSR00
                      00714 ;                       SSR22  |  3 |  4 |  SSR01
                      00715 ;                       SSR21  |  5 |  6 |  SSR02
                      00716 ;                       SSR20  |  7 |  8 |  SSR03
                      00717 ;                       SSR19  |  9 | 10 |  SSR04
                      00718 ;                       SSR18  | 11 | 12 |  SSR05
                      00719 ;                       SSR17  | 13 | 14 |  SSR06
                      00720 ;                         GND  | 15 | 16 |  +5V
                      00721 ;                       SSR16  | 17 | 18 |  SSR07
                      00722 ;                       SSR15  | 18 | 20 |  SSR08
                      00723 ;                       SSR14  | 21 | 22 |  SSR09
                      00724 ;                       SSR13  | 23 | 24 |  SSR10
                      00725 ;                       SSR12  |_25_|_26_|  SSR11
                      00726 ;
                      00727 ;
                      00728 ; Communications are via RS-485 serial network using an 8p8c modular
                      00729 ; connector with this pinout:
                      00730 ;
                      00731 ;  ________
                      00732 ; |12345678|    1- Return Data Y (+)    5- Data A (+)
                      00733 ; |        |    2- Return Data Z (-)    6- Cable Check OUT
                      00734 ; |___  ___|    3- Cable Check IN       7- Data GND 
                      00735 ;    |__|       4- Data B (-)           8- Return Data GND
                      00736 ;
                      00737 ; CC is a cable check indicator.  A signal is sent out by the host on pin 3, with the
                      00738 ; expectation that each controller will pass it on down the cable to the terminator
                      00739 ; which connects it to pin 6 and sends the signal back through the controllers to the
                      00740 ; host again.  Note that the controllers themselves do nothing with the CC signal other
                      00741 ; than pass those pins straight through; it is available however for something at the 
                      00742 ; host side to verify cable integrity.
                      00743 ;
                      00744 ; Data A/B is the twisted pair for the RS-485 data between the host PC and controllers.
                      00745 ;
                      00746 ; Return Data Y/Z is only implemented if a full duplex RS-485 network is implemented
                      00747 ; (an option for some boards but not the default case).  This is dedicated for controllers
                      00748 ; sending data back to the host PC.  If using half-duplex, the same data pair is used
                      00749 ; for both sending and receiving, and the host PC needs to switch to receive mode
                      00750 ; when a controller is asked to report back.
                      00751 ;
                      00752 ;
                      00753 ; Termination at the end of the loop should be provided with a plug
                      00754 ; wired as:
                      00755 ; 
                      00756 ;     3 ------------ 6
                      00757 ; 
                      00758 ;     1 ---/\/\/---- 2 <--(if full duplex)
                      00759 ;         120 ohms
                      00760 ; 
                      00761 ;     4 ---/\/\/---- 5
                      00762 ;         120 ohms
                      00763 ;------------------------------------------------------------------------ 
                      00764 ;
                      00765 ;  PIC18F14K50 Microcontroller I/O pin assignments:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00766 ;
                      00767 ;         4-CH           ________   _________         4-CH
                      00768 ;         BOARD:        |o       \_/         |        BOARD: 
                      00769 ;            +5V ---  1 | Vdd            Vss | 20 --- GND    
                      00770 ;           XTAL ---  2 | OSC1       PGD RA0 | 19 --> /PWRCTL
                      00771 ;           XTAL ---  3 | OSC2       PGC RA1 | 18 <-- /OPTION
                      00772 ;          /MCLR -->  4 | /MCLR         Vusb | 17 
                      00773 ;    /A  ACT LED <->  5 | RC5            RC0 | 16 --> /SSR3
                      00774 ;        GRN LED <--  6 | RC4            RC1 | 15 --> /SSR2
                      00775 ;    /C  YEL LED <->  7 | RC3            RC2 | 14 --> /SSR1
                      00776 ;    /B  RED LED <->  8 | RC6            RB4 | 13 --> /SSR0
                      00777 ;    /D          -->  9 | RC7        RxD RB5 | 12 <-- RxD
                      00778 ;            TxD <-- 10 | RB7 TxD        RB6 | 11 --> T/R
                      00779 ;                       |____________________|
                      00780 ;
                      00781 ;
                      00782 ;
                      00783 ; ========================================================================
                      00784 ; PROGRAM MEMORY MAP
                      00785 ; ______________________________________________________________________________
                      00786 ;
                      00787 ; 14K50 4685    _________________ ___
                      00788 ; $00000 $00000 | RESET Vector    | V_RST
                      00789 ; $00007 $00007 |_________________|___
                      00790 ; $00008 $00008 | High Int Vector | V_INT_H
                      00791 ; $00017 $00017 |_________________|___
                      00792 ; $00018 $00018 | Low Int Vector  | V_INT_L
                      00793 ; $0001F $0001F |_________________|
                      00794 ; $00020 $00020 |/////////////////|
                      00795 ; $000FF $000FF |/////////////////|___
                      00796 ; $00100 $00100 | Boot code       | _BOOT
                      00797 ;               |.................|___
                      00798 ;               | Interrupt hand- | _INT
                      00799 ;               |  lers           |      
                      00800 ;               |/////////////////|
                      00801 ; $007FF $007FF |/////////////////|___
                      00802 ; $00800 $00800 | Mainline code   | _MAIN
                      00803 ;               |.................|___
                      00804 ;           ??? | Device init     | LUMOS_CODE_INIT
                      00805 ;               |_________________|___
                      00806 ;           ??? | Serial I/O      | _SIO_CODE
                      00807 ;               | Module          |
                      00808 ;               |_________________|___
                      00809 ;               |/////////////////|
                      00810 ;               |/////////////////|
                      00811 ;               |/////////////////|
                      00812 ;               |/////////////////|
                      00813 ;               |/////////////////|___
                      00814 ; $02E00 $14000 | EEPROM defaults | _MAIN_EEPROM_TBL
                      00815 ; $02EFF $14FFF |_________________|___
                      00816 ; $02F00 $15000 |Serial I/O Mod   | _SIO_LOOKUP_TABLES
                      00817 ;               |lookup tables    |
                      00818 ;        $150FF |_________________|___
                      00819 ;        $15100 |                 |
                      00820 ;               |                 |
                      00821 ; $02FEF $16FEF |_________________|___
                      00822 ; $02FF0 $16FF0 |System Mfg Data  | _SYSTEM_MFG_DATA
                      00823 ; $02FFF $16FFF |_________________|___
                      00824 ; $03000 $17000 |Flash Loader Code| _FLASH_UPDATE_LOADER
                      00825 ; $03FFF $17FFF |_________________|___
                      00826 ;               |/////////////////|
                      00827 ;               |/////////////////|
                      00828 ;$1FFFFF$1FFFFF |/////////////////|___
                      00829 ;
                      00830  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00014000            00831 _MAIN_EEPROM_TBL        EQU     0x14000
  00016FF0            00832 _SYSTEM_MFG_DATA        EQU     0x16FF0
                      00833  ELSE
                      00834   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00835 _MAIN_EEPROM_TBL        EQU     0x02E00
                      00836 _SYSTEM_MFG_DATA        EQU     0x02FE0
                      00837   ELSE
                      00838    ERROR "Invalid architecture switch"
                      00839   ENDIF
                      00840  ENDIF
                      00841 ;
                      00842 ;
                      00843 ; ========================================================================
                      00844 ; DATA MEMORY MAP (4685)
                      00845 ;
                      00846 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00847 ; $000 | global state,   | _ADATA            BANK 0
                      00848 ; $05F | ISR data, etc.  |                (ACCESS AREA)
                      00849 ;      |.................|...............................
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00850 ; $060 |                 |                   
                      00851 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00852 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00853 ;      | ring buffer     |
                      00854 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00855 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00856 ;      | ring buffer     |
                      00857 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00858 ; $300 | Serial I/O mod  | _SIO_VAR_DATA     BANK 3
                      00859 ;      | variable space  |
                      00860 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00861 ; $400 | SSR state data  | _SSR_DATA         BANK 4
                      00862 ;      |                 |
                      00863 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00864 ; $500 | Parser buffer   | _MAINDATA         BANK 5
                      00865 ;      |.................|
                      00866 ; $5?? |                 |
                      00867 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00868 ; $600 | Stored sequences| _SEQ_DATA         BANK 6
                      00869 ;      | (1792 bytes)    |
                      00870 ;              .
                      00871 ;              .                 
                      00872 ;              .                
                      00873 ;      |                 |
                      00874 ;      |                 |
                      00875 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00876 ; $D00 |                 |                   BANK D
                      00877 ;      | CAN special     |
                      00878 ;      | function        |___ ___ ___ ___ ___ ___ ___ ___
                      00879 ; $E00 | registers       |                   BANK E
                      00880 ;      | (not used for   |
                      00881 ;      | Lumos)          |___ ___ ___ ___ ___ ___ ___ ___
                      00882 ; $F00 |                 |                   BANK F
                      00883 ;      |                 |
                      00884 ; $F5F |.................|...............................
                      00885 ; $F60 | Special Function|                (ACCESS AREA)
                      00886 ;      | (device) regis- |
                      00887 ;      | ters            |
                      00888 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00889 ;
                      00890 ; ------------------------------------------------------------------------
                      00891 ; DATA MEMORY MAP (14K50)
                      00892 ;
                      00893 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00894 ; $000 | global state,   | _ADATA            BANK 0
                      00895 ; $022 | ISR data, etc.  |                (ACCESS AREA)
                      00896 ;      |.................|
                      00897 ; $023 |                 |                   
                      00898 ;      |                 |                   
                      00899 ; $05F |_________________|...............................
                      00900 ; $060 | SSR state data  | _SSR_DATA         BANK 0
                      00901 ;      |                 |                (BANKED AREA)
                      00902 ; $07F |_________________|
                      00903 ; $088 | Parser buffer   | _MAINDATA
                      00904 ; $0E1 |.................|
                      00905 ; $0E2 |    [unused]     |
                      00906 ; $0E3 |_________________|
                      00907 ; $0E4 | Serial I/O mod  | _SIO_VAR_DATA
                      00908 ;      | variable space  |
                      00909 ; $0FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00910 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00911 ;      | ring buffer     |
                      00912 ; $1FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00913 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00914 ;      | ring buffer     |
                      00915 ; $2FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00916 ; $300 |/////////////////|///////////////////////////////
                      00917 ;      |/////////////////|
                      00918 ;              .
                      00919 ;              .                 
                      00920 ;              .                DOES NOT EXIST
                      00921 ;      |/////////////////|
                      00922 ;      |/////////////////|
                      00923 ; $EFF |/////////////////|///////////////////////////////
                      00924 ; $F00 |/////////////////|                   
                      00925 ; $F52 |/////////////////|
                      00926 ; $F53 | Special Function|
                      00927 ; $F5F |.................|...............................
                      00928 ; $F60 | Special Function|                (ACCESS AREA)
                      00929 ;      | (device) regis- |
                      00930 ;      | ters            |
                      00931 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00932 ;
                      00933 ; ========================================================================
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00934 ; EEPROM MEMORY
                      00935 ;
                      00936 ;
                      00937 ;       ______________            ______________ 
                      00938 ; $000 |_0xFF_________|     $010 | Saved        |
                      00939 ; $001 |_Baud_Rate____|     $011 | Sequence     |
                      00940 ; $002 |_Device_ID____|     $012 | Storage      |
                      00941 ; $003 | Phase     MSB|     $013 |       |      |
                      00942 ; $004 |_Offset____LSB|     $014 |       |      |
                      00943 ; $005 |_DMX_Slot__MSB|     $015 |       |      |
                      00944 ; $006 |_DMX_Slot__LSB|       .          .
                      00945 ; $007 |_Sensor_cfg___|       .          .
                      00946 ; $008 |______________|       .          .
                      00947 ; $009 |______________|     $3F9 |       |      |
                      00948 ; $00A |______________|     $3FA |       |      |
                      00949 ; $00B |______________|     $3FB | (1008 |      |
                      00950 ; $00C |______________|     $3FC | bytes)|      |
                      00951 ; $00D |______________|     $3FD |       |      |
                      00952 ; $00E |______________|     $3FE |       |      |
                      00953 ; $00F |_0x42_________|     $3FF |_______V______|
                      00954 ;
                      00955 ;
                      00956 __SYS__ CODE_PACK       _SYSTEM_MFG_DATA
016FF0 A4             00957 SYS_SNH DE      0xA4            ; Device serial number
016FF1 45             00958 SYS_SNL DE      0x45
                      00959 
                      00960 _EEPROM CODE_PACK       0xF00000
F00000 FF             00961         DE      0xFF            ; 000: 0xFF constant
F00001 06             00962         DE      SIO_19200       ; 001: baud rate default
F00002 00             00963         DE      0x00            ; 002: default device ID
F00003 00 02          00964         DE      0x00, 0x02      ; 003: default phase offset
F00005 00 00          00965         DE      0x00, 0x00      ; 005: default DMX=0 (disabled, ch=1)
F00007 00             00966         DE      0x00            ; 007: default sensors (disabled)
F00008 00 00          00967         DE      0x00, 0x00      ; 008: reserved
F0000A 00 00 00       00968         DE      0x00, 0x00, 0x00; 00A: reserved
F0000D 00 00          00969         DE      0x00, 0x00      ; 00D: reserved
F0000F 42             00970         DE      0x42            ; 00F: sentinel
                      00971 
  00000000            00972 EE_START        EQU     0x000
  00000001            00973 EE_BAUD         EQU     0x001
  00000002            00974 EE_DEV_ID       EQU     0x002
  00000003            00975 EE_PHASE_H      EQU     0x003
  00000004            00976 EE_PHASE_L      EQU     0x004
  00000005            00977 EE_DMX_H        EQU     0x005
  00000006            00978 EE_DMX_L        EQU     0x006
  00000007            00979 EE_SENSOR_CFG   EQU     0x007
  00000008            00980 EE_RESERVED_8   EQU     0x008
  00000009            00981 EE_RESERVED_9   EQU     0x009
  0000000A            00982 EE_RESERVED_A   EQU     0x00A
  0000000B            00983 EE_RESERVED_B   EQU     0x00B
  0000000C            00984 EE_RESERVED_C   EQU     0x00C
  0000000D            00985 EE_RESERVED_D   EQU     0x00D
  0000000E            00986 EE_RESERVED_E   EQU     0x00E
  0000000F            00987 EE_END          EQU     0x00F
                      00988 
                      00989 _EEPROM_DEFS_TBL CODE_PACK _MAIN_EEPROM_TBL
014000                00990 DEFAULT_TBL:
014000 FF             00991         DB      0xFF                    ; $000: constant $FF
014001 06             00992         DB      SIO_19200               ; $001: 19200 baud
014002 00             00993         DB      0x00                    ; $002: device ID=0
014003 00 02          00994         DB      0x00, 0x02              ; $003: phase offset=2
014005 00 00          00995         DB      0x00, 0x00              ; $005: DMX slot=0 (disabled, ch=1)
014007 00             00996         DB      0x00                    ; $007: no sensors configured
014008 00 00 00       00997         DB      0x00, 0x00, 0x00        ; $008-$00A
01400B 00 00 00 00    00998         DB      0x00, 0x00, 0x00, 0x00  ; $00B-$00E
01400F 42             00999         DB      0x42                    ; $00F: constant $42
                      01000 
  00000010            01001 EEPROM_SETTINGS_LEN     EQU     .16
  00000010            01002 EEPROM_USER_START       EQU     0x010   
  000003FF            01003 EEPROM_USER_END         EQU     0x3FF
                      01004 ;
                      01005 ; ========================================================================
                      01006 ; DEVICES USED
                      01007 ;
                      01008 ; TMR0    120 Hz interrupt source (for boards without zero-crossing detector)
                      01009 ; TMR1
                      01010 ; TMR2    Dimmer slice timer (1/260 of a 120 Hz half-cycle)
                      01011 ; TMR3    Break detector for DMX reception
                      01012 ; UART    SIO module
                      01013 ;=============================================================================
                      01014 ;
                      01015 ;
                      01016 ;-----------------------------------------------------------------------------
                      01017 ; I/O PORT ASSIGNMENTS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01018 ;-----------------------------------------------------------------------------
                      01019 ;
                      01020 ;          7   6   5   4   3   2   1   0
                      01021 ; PORT RA --- --- ACT /08 /10 /12 /14 /16    48-Board AC/DC master
                      01022 ; PORT RA --- --- T/R /08 /10 /12 /14 /16    48-Board AC/DC slave
                      01023 ; PORT RA --- --- ACT /19 /20 /21 /22 /23    24-Board DC    standalone
                      01024 ;          <OSC>   O   O   O   O   O   O
                      01025 ; PORT RA /////// --- --- --- /// /OP /PS     4-Board DC
                      01026 ;         ///////  <OSC>   I  ///  I   O
                      01027 ;
                      01028 ;          7   6   5   4   3   2   1   0
                      01029 ; PORT RB /PS /OP /15 /13 /11 /09 /07 ---    48-Board AC/DC master
                      01030 ;          O   I   O   O   O   O   O  INT
                      01031 ; PORT RB /PS --- /15 /13 /11 /09 /07 ---    48-Board AC/DC slave
                      01032 ;          O   O   O   O   O   O   O  INT
                      01033 ; PORT RB /PS /OP /00 /01 /02 /03 /04 T/R    24-Board DC    standalone
                      01034 ;          O   I_  O   O   O   O   O   O 
                      01035 ; PORT RB --- T/R --- /00 ///////////////     4-Board DC
                      01036 ;         <O>  O  <I>  O  ///////////////
                      01037 ;
                      01038 ;          7   6   5   4   3   2   1   0
                      01039 ; PORT RC --- --- /02 /00 /01 /03 /19 /04    48-Board AC/DC master/slave
                      01040 ; PORT RC --- --- /09 /10 /15 /16 /17 /18    24-Board DC    standalone
                      01041 ;          <I/O>   O   O   O   O   O   O
                      01042 ; PORT RC /D  RED ACT GRN YEL /01 /02 /03     4-Board DC
                      01043 ;          I   O   O   O   O   O   O   O
                      01044 ;
                      01045 ;          7   6   5   4   3   2   1   0
                      01046 ; PORT RD /17 /06 /05 /18 /22 /20 /21 /23    48-Board AC/DC master/slave
                      01047 ; PORT RD /05 /06 /07 /08 /11 /12 /13 /14    24-Board DC    standalone
                      01048 ;         ///////////////////////////////     4-Board DC
                      01049 ;          O   O   O   O   O   O   O   O
                      01050 ;
                      01051 ;          7   6   5   4   3   2   1   0
                      01052 ; PORT RE --- --- --- --- --- RED YEL GRN    All boards
                      01053 ;         ///////////////////////////////     4-Board DC
                      01054 ;                              O   O   O
                      01055 ;
                      01056 ;------------------------------------------------------------------------------
                      01057 ; Significant Registers (ACCESS BANK)
                      01058 ;------------------------------------------------------------------------------
                      01059 ;
                      01060 ;                     ___7______6______5______4______3______2______1______0__
                      01061 ; ISR_TMPL_STATUS    |                                                       |
                      01062 ;                    | Temporary storage for STATUS register in low-pri ISR  |
                      01063 ;                    |______|______|______|______|______|______|______|______|
                      01064 ; ISR_TMPL_BSR       |                                                       |
                      01065 ;                    | Temporary storage for BSR register in low-priority ISR|
                      01066 ;                    |______|______|______|______|______|______|______|______|
                      01067 ; ISR_TMPL_WREG      |                                                       |
                      01068 ;                    | Temporary storage for W register in low-priority ISR  |
                      01069 ;                    |______|______|______|______|______|______|______|______|
                      01070 ; MY_ADDRESS         |                           |                           |
                      01071 ;                    |                           |       Unit address        |
                      01072 ;                    |______|______|______|______|______|______|______|______|
                      01073 ; PHASE_OFFSETH      |                                                       |
                      01074 ;                    |               Phase offset value (MSB)                |
                      01075 ;                    |______|______|______|______|______|______|______|______|
                      01076 ; PHASE_OFFSETL      |                                                       |
                      01077 ;                    |               Phase offset value (LSB)                |
                      01078 ;                    |______|______|______|______|______|______|______|______|
                      01079 ; SSR_STATE          |      |      |SLICE |PRIV_ |SLEEP |DRAIN |PRE_  |TEST_ |
                      01080 ;                    |INCYC |PRECYC| _UPD | MODE |_MODE |_TR   |PRIV  |MODE  |
                      01081 ;                    |______|______|______|______|______|______|______|______|
                      01082 ; SSR_STATE2         |TEST_ |TEST_ |TEST_ |ALL_  |PRIV_ |INHIBI|MSB_  |LITER |
                      01083 ;                    |PAUSE |UPD   |BUTTON|OFF   |FORBID|T_OUTP|ESC   |AL_ESC|
                      01084 ;                    |______|______|______|______|______|UT____|______|______|
                      01085 ; DMX_SLOTH          |DMX_EN|DMX_  |DMX_  |                           |DMX Sl|
                      01086 ;                    |      |SPEED |FRAME |                           |ot MSB|
                      01087 ;                    |______|______|______|______|______|______|______|______|
                      01088 ; DMX_SLOTL          |                                                       |
                      01089 ;                    |       Starting DMX Slot Number - 1 (low 8 bits)       |
                      01090 ;                    |______|______|______|______|______|______|______|______|
                      01091 ; YY_STATE           |                                                       |
                      01092 ;                    |                      Parser State                     |
                      01093 ;                    |______|______|______|______|______|______|______|______|
                      01094 ; YY_COMMAND         |                                                       |
                      01095 ;                    |                      Command Code                     |
                      01096 ;                    |______|______|______|______|______|______|______|______|
                      01097 ; YY_CMD_FLAGS       |                                                       |
                      01098 ;                    |               Command-specific Flag Bits              |
                      01099 ;                    |______|______|______|______|______|______|______|______|
                      01100 ; YY_DATA            |                                                       |
                      01101 ;                    |                      Command Data                     |
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01102 ;                    |______|______|______|______|______|______|______|______|
                      01103 ; YY_LOOKAHEAD_MAX   |                                                       |
                      01104 ;                    |               Maximum length for look-ahead           |
                      01105 ;                    |______|______|______|______|______|______|______|______|
                      01106 ; YY_LOOK_FOR        |                                                       |
                      01107 ;                    |               Sentinel value to search for            |
                      01108 ;                    |______|______|______|______|______|______|______|______|
                      01109 ; YY_BUF_IDX         |                                                       |
                      01110 ;                    |     Offset in YY_BUFFER where we will write next      |
                      01111 ;                    |______|______|______|______|______|______|______|______|
                      01112 ; YY_NEXT_STATE      |                                                       |
                      01113 ;                    |     State to transition to when YY_LOOK_FOR is found  |
                      01114 ;                    |______|______|______|______|______|______|______|______|
                      01115 ; YY_YY              |                                                       |
                      01116 ;                    |     General-purpose storage for use inside commands   |
                      01117 ;                    |______|______|______|______|______|______|______|______|
                      01118 ; LAST_ERROR         |                                                       |
                      01119 ;                    |  Last error code encountered (cleared when reported)  |
                      01120 ;                    |______|______|______|______|______|______|______|______|
                      01121 ; CUR_PREH           |                                                       |
                      01122 ;                    |         Pre-cycle count-down ticks left (MSB)         |
                      01123 ;                    |______|______|______|______|______|______|______|______|
                      01124 ; CUR_PRE            |                                                       |
                      01125 ;                    |         Pre-cycle count-down ticks left (LSB)         |
                      01126 ;                    |______|______|______|______|______|______|______|______|
                      01127 ; CUR_SLICE          |                                                       |
                      01128 ;                    |      Slice number within active portion of cycle      |
                      01129 ;                    |______|______|______|______|______|______|______|______|
                      01130 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01131 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01132 ;                    |______|______|______|______|______|______|______|______|
                      01133 ; OPTION_DEBOUNCE    |                                                       |
                      01134 ;                    |      Counter to debounce OPTION button presses        |
                      01135 ;                    |______|______|______|______|______|______|______|______|
                      01136 ; OPTION_HOLD        |                                                       |
                      01137 ;                    |      Counter for how long OPTION button is held       |
                      01138 ;                    |______|______|______|______|______|______|______|______|
                      01139 ; TEST_CYCLE         |                                                       |
                      01140 ;                    |        Count-down of ZC cycles until next step        |
                      01141 ;                    |______|______|______|______|______|______|______|______|
                      01142 ; TEST_SSR           |             |                                         |
                      01143 ;                    |             |  current SSR being tested               |
                      01144 ;                    |______|______|______|______|______|______|______|______|
                      01145 ; AUTO_OFF_CTRH      |                                                       |
                      01146 ;                    |         countdown register until auto-power-off (MSB) |
                      01147 ;                    |______|______|______|______|______|______|______|______|
                      01148 ; AUTO_OFF_CTRL      |                                                       |
                      01149 ;                    |         countdown register until auto-power-off (LSB) |
                      01150 ;                    |______|______|______|______|______|______|______|______|
                      01151 ; I                  |                                                       |
                      01152 ;                    |      General-purpose local counter variable           |
                      01153 ;                    |______|______|______|______|______|______|______|______|
                      01154 ; J                  |                                                       |
                      01155 ;                    |      General-purpose local counter variable           |
                      01156 ;                    |______|______|______|______|______|______|______|______|
                      01157 ; K                  |                                                       |
                      01158 ;                    |      General-purpose local counter variable           |
                      01159 ;                    |______|______|______|______|______|______|______|______|
                      01160 ; KK                 |                                                       |
                      01161 ;                    |      General-purpose local counter variable           |
                      01162 ;                    |______|______|______|______|______|______|______|______|
                      01163 ; TR_I               |                                                       |
                      01164 ;                    |      T/R delay timer delay counter                    |
                      01165 ;                    |______|______|______|______|______|______|______|______|
                      01166 ;
                      01167 ;
                      01168 ;------------------------------------------------------------------------------
                      01169 ; (SSR_DATA_BANK)
                      01170 ;------------------------------------------------------------------------------
                      01171 ;
                      01172 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      01173 ;
                      01174 ;                     ___7______6______5______4______3______2______1______0__
                      01175 ; SSR_00_VALUE       |                                                       |
                      01176 ;                    | Brightness value of SSR #00 (00=off, ... FF=fully on) |
                      01177 ;                    |______|______|______|______|______|______|______|______|
                      01178 ;                    |                                                       |
                      01179 ;                    | Brightness value of SSR #01 (00=off, ... FF=fully on) |
                      01180 ;                    |______|______|______|______|______|______|______|______|
                      01181 ;                                                .
                      01182 ;                                                .
                      01183 ;                     ___________________________.___________________________
                      01184 ;                    |                                                       |
                      01185 ;                    | Brightness value of SSR #23 (00=off, ... FF=fully on) |
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01186 ;                    |______|______|______|______|______|______|______|______|
                      01187 ;                    |                                                       |
                      01188 ;                    | Brightness value of Green   (00=off, ... FF=fully on) |
                      01189 ;                    |______|______|______|______|______|______|______|______|
                      01190 ;                    |                                                       |
                      01191 ;                    | Brightness value of Yellow  (00=off, ... FF=fully on) |
                      01192 ;                    |______|______|______|______|______|______|______|______|
                      01193 ;                    |                                                       |
                      01194 ;                    | Brightness value of Red     (00=off, ... FF=fully on) |
                      01195 ;                    |______|______|______|______|______|______|______|______|
                      01196 ;                    | IF MASTER/STANDALONE:                                 |
                      01197 ;                    | Brightness value of Active  (00=off, ... FF=fully on) |
                      01198 ;                    |______|______|______|______|______|______|______|______|
                      01199 ; SSR_00_FLAGS       | FADE | FADE | FADE_|MAX_OF|      |      |      |      |
                      01200 ;                    | _UP  | _DOWN| CYCLE|F_TIME|      |      |      |      |
                      01201 ;                    |______|______|______|______|______|______|______|______|
                      01202 ;                                                .
                      01203 ;                                                .
                      01204 ;                     ___________________________.___________________________
                      01205 ; SSR_00_STEP        |                                                       |
                      01206 ;                    |          Brightness increment (0..255)                |
                      01207 ;                    |______|______|______|______|______|______|______|______|
                      01208 ;                                                .
                      01209 ;                                                .
                      01210 ;                     ___________________________.___________________________
                      01211 ; SSR_00_SPEED       |                                                       |
                      01212 ;                    |          Cycles between each step (0..255)            |
                      01213 ;                    |______|______|______|______|______|______|______|______|
                      01214 ;                                                .
                      01215 ;                                                .
                      01216 ;                     ___________________________.___________________________
                      01217 ; SSR_00_COUNTER     |                                                       |
                      01218 ;                    |          Cycles until next step (0..255)              |
                      01219 ;                    |______|______|______|______|______|______|______|______|
                      01220 ;                                                .
                      01221 ;                                                .
                      01222 ;                                                .                           
                      01223 ;
                      01224 ; SSR_STATE holds the execution state of the controller, including our
                      01225 ; main timing chain flags.
                      01226 ;
  00000007            01227 INCYC           EQU     7       ; 1-------  We are in a dimmer cycle now
  00000006            01228 PRECYC          EQU     6       ; -1------  We are in the pre-cycle countdown
  00000005            01229 SLICE_UPD       EQU     5       ; --1-----  Slice update needs to be done
  00000004            01230 PRIV_MODE       EQU     4       ; ---1----  We are in privileged (config) mode
  00000003            01231 SLEEP_MODE      EQU     3       ; ----1---  We are in sleep mode
  00000002            01232 DRAIN_TR        EQU     2       ; -----1--  Need to drain output queue then turn off transmitter
  00000001            01233 PRE_PRIV        EQU     1       ; ------1-  Entering privileged mode
  00000000            01234 TEST_MODE       EQU     0       ; -------1  In self-test mode
                      01235 ;
                      01236 ; SSR_STATE2 flags:
                      01237 ;
  00000007            01238 TEST_PAUSE      EQU     7       ; 1-------  We're pausing the test mode
  00000006            01239 TEST_UPD        EQU     6       ; -1------  Time to update the test count-down timer
  00000005            01240 TEST_BUTTON     EQU     5       ; --1-----  Waiting for button release in test mode
  00000004            01241 ALL_OFF         EQU     4       ; ---1----  All SSRs are currently completely off
  00000003            01242 PRIV_FORBID     EQU     3       ; ----1---  Forbidden to enter privileged mode again
  00000002            01243 INHIBIT_OUTPUT  EQU     2       ; -----1--  Forbid any further output
  00000001            01244 MSB_ESC         EQU     1       ; ------1-  MSB Escape pending
  00000000            01245 LITERAL_ESC     EQU     0       ; -------1  Literal Escape pending
                      01246 
                      01247 ; YY_CMD_FLAGS holds various command flag bits
                      01248 ;
  00000007            01249 YCF_RAMP_CYCLE  EQU     7       ; 1-------  Ramp should cycle now
                      01250                                 ; -XXXXXXX  Unassigned
                      01251 ;
                      01252 ; DMX_SLOTH contains these flags and the high-order bit of the DMX channel
                      01253 ;
  00000007            01254 DMX_EN          EQU     7       ; 1-------  DMX mode enabled
  00000006            01255 DMX_SPEED       EQU     6       ; -1------  UART at DMX speed now
  00000005            01256 DMX_FRAME       EQU     5       ; --1-----  Start of frame detected
                      01257 ;                               ; ---XXXX-  Reserved
  00000000            01258 DMX_BIT8        EQU     0       ; -------1  MSB of DMX channel
                      01259 
                      01260 ;
                      01261 ; TARGET_SSR has these flags:
                      01262 ;                     _______________________________________________________
                      01263 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01264 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01265 ;                    |______|______|______|______|______|______|______|______|
                      01266 ;
  00000007            01267 NOT_MY_SSR      EQU     7
  00000006            01268 INVALID_SSR     EQU     6               ; MUST be bit 6
  0000003F            01269 TARGET_SSR_MSK  EQU     0x3F
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01270 
                      01271 
                      01272 ;
                      01273 ; CHIP-SPECIFIC PORT/PIN MAPPINGS
                      01274 ;
                      01275 ; 48-Channel board (master CPU)
                      01276 ;
                      01277                 IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      01278 PORT_RX          EQU    PORTC
                      01279 BIT_RX           EQU    7
                      01280 
                      01281 HAS_T_R          EQU    0
                      01282 HAS_ACTIVE       EQU    1
                      01283 HAS_SENSORS      EQU    1
                      01284 HAS_OPTION       EQU    1
                      01285 
                      01286 TRIS_SENS_A      EQU    TRISE   ; Sensor A == RED LED
                      01287 PORT_SENS_A      EQU    PORTE   ; Sensor A == RED LED
                      01288 BIT_SENS_A       EQU    2       ; Sensor A == RED LED
                      01289 TRIS_SENS_B      EQU    TRISE   ; Sensor B == GREEN LED
                      01290 PORT_SENS_B      EQU    PORTE   ; Sensor B == GREEN LED
                      01291 BIT_SENS_B       EQU    0       ; Sensor B == GREEN LED
                      01292 TRIS_SENS_C      EQU    TRISA   ; Sensor C == ACTIVE LED
                      01293 PORT_SENS_C      EQU    PORTA   ; Sensor C == ACTIVE LED
                      01294 BIT_SENS_C       EQU    5       ; Sensor C == ACTIVE LED
                      01295 TRIS_SENS_D      EQU    TRISE   ; Sensor D == YELLOW LED
                      01296 PORT_SENS_D      EQU    PORTE   ; Sensor D == YELLOW LED
                      01297 BIT_SENS_D       EQU    1       ; Sensor D == YELLOW LED
                      01298 
                      01299 PLAT_ACTIVE      EQU    LATA
                      01300 PLAT_RED         EQU    LATE
                      01301 PLAT_YELLOW      EQU    LATE
                      01302 PLAT_GREEN       EQU    LATE
                      01303 BIT_ACTIVE       EQU    5
                      01304 BIT_RED          EQU    2
                      01305 BIT_YELLOW       EQU    1
                      01306 BIT_GREEN        EQU    0
                      01307 
                      01308 PORT_OPTION      EQU    PORTB
                      01309 BIT_OPTION       EQU    6
                      01310 
                      01311 PLAT_PWR_ON      EQU    LATB
                      01312 BIT_PWR_ON       EQU    7
                      01313 
                      01314 PLAT_0           EQU    LATC
                      01315 PLAT_1           EQU    LATC
                      01316 PLAT_2           EQU    LATC
                      01317 PLAT_3           EQU    LATC
                      01318 PLAT_4           EQU    LATC
                      01319 PLAT_5           EQU    LATD
                      01320 PLAT_6           EQU    LATD
                      01321 PLAT_7           EQU    LATB
                      01322 PLAT_8           EQU    LATA
                      01323 PLAT_9           EQU    LATB
                      01324 PLAT_10          EQU    LATA
                      01325 PLAT_11          EQU    LATB
                      01326 PLAT_12          EQU    LATA
                      01327 PLAT_13          EQU    LATB
                      01328 PLAT_14          EQU    LATA
                      01329 PLAT_15          EQU    LATB
                      01330 PLAT_16          EQU    LATA
                      01331 PLAT_17          EQU    LATD
                      01332 PLAT_18          EQU    LATD
                      01333 PLAT_19          EQU    LATC
                      01334 PLAT_20          EQU    LATD
                      01335 PLAT_21          EQU    LATD
                      01336 PLAT_22          EQU    LATD
                      01337 PLAT_23          EQU    LATD
                      01338 
                      01339 BIT_0            EQU    4
                      01340 BIT_1            EQU    3
                      01341 BIT_2            EQU    5
                      01342 BIT_3            EQU    2
                      01343 BIT_4            EQU    0
                      01344 BIT_5            EQU    5
                      01345 BIT_6            EQU    6
                      01346 BIT_7            EQU    1
                      01347 BIT_8            EQU    4
                      01348 BIT_9            EQU    2
                      01349 BIT_10           EQU    3
                      01350 BIT_11           EQU    3
                      01351 BIT_12           EQU    2
                      01352 BIT_13           EQU    4
                      01353 BIT_14           EQU    1
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01354 BIT_15           EQU    5
                      01355 BIT_16           EQU    0
                      01356 BIT_17           EQU    7
                      01357 BIT_18           EQU    4
                      01358 BIT_19           EQU    1
                      01359 BIT_20           EQU    2
                      01360 BIT_21           EQU    1
                      01361 BIT_22           EQU    3
                      01362 BIT_23           EQU    0
                      01363 
                      01364 SSR_LIGHTS       EQU    24      ; first light ID (as opposed to SSR)
                      01365                 ELSE
                      01366                  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      01367 ;
                      01368 ; 48-Channel Board (slave CPU)
                      01369 ;
                      01370 PORT_RX           EQU   PORTC
                      01371 BIT_RX            EQU   7
                      01372 
                      01373 HAS_T_R           EQU   1
                      01374 HAS_ACTIVE        EQU   0
                      01375 HAS_SENSORS       EQU   0
                      01376 HAS_OPTION        EQU   0
                      01377 
                      01378 PLAT_T_R          EQU   LATA
                      01379 PORT_T_R          EQU   PORTA
                      01380 TRIS_T_R          EQU   TRISA
                      01381 BIT_T_R           EQU   5
                      01382 
                      01383 PLAT_RED          EQU   LATE
                      01384 PLAT_YELLOW       EQU   LATE
                      01385 PLAT_GREEN        EQU   LATE
                      01386 
                      01387 BIT_RED           EQU   2
                      01388 BIT_YELLOW        EQU   1
                      01389 BIT_GREEN         EQU   0
                      01390 
                      01391 PLAT_PWR_ON       EQU   LATB
                      01392 BIT_PWR_ON        EQU   7
                      01393 
                      01394 PLAT_0            EQU   LATC
                      01395 PLAT_1            EQU   LATC
                      01396 PLAT_2            EQU   LATC
                      01397 PLAT_3            EQU   LATC
                      01398 PLAT_4            EQU   LATC
                      01399 PLAT_5            EQU   LATD
                      01400 PLAT_6            EQU   LATD
                      01401 PLAT_7            EQU   LATB
                      01402 PLAT_8            EQU   LATA
                      01403 PLAT_9            EQU   LATB
                      01404 PLAT_10           EQU   LATA
                      01405 PLAT_11           EQU   LATB
                      01406 PLAT_12           EQU   LATA
                      01407 PLAT_13           EQU   LATB
                      01408 PLAT_14           EQU   LATA
                      01409 PLAT_15           EQU   LATB
                      01410 PLAT_16           EQU   LATA
                      01411 PLAT_17           EQU   LATD
                      01412 PLAT_18           EQU   LATD
                      01413 PLAT_19           EQU   LATC
                      01414 PLAT_20           EQU   LATD
                      01415 PLAT_21           EQU   LATD
                      01416 PLAT_22           EQU   LATD
                      01417 PLAT_23           EQU   LATD
                      01418 
                      01419 BIT_0             EQU   4
                      01420 BIT_1             EQU   3
                      01421 BIT_2             EQU   5
                      01422 BIT_3             EQU   2
                      01423 BIT_4             EQU   0
                      01424 BIT_5             EQU   5
                      01425 BIT_6             EQU   6
                      01426 BIT_7             EQU   1
                      01427 BIT_8             EQU   4
                      01428 BIT_9             EQU   2
                      01429 BIT_10            EQU   3
                      01430 BIT_11            EQU   3
                      01431 BIT_12            EQU   2
                      01432 BIT_13            EQU   4
                      01433 BIT_14            EQU   1
                      01434 BIT_15            EQU   5
                      01435 BIT_16            EQU   0
                      01436 BIT_17            EQU   7
                      01437 BIT_18            EQU   4
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01438 BIT_19            EQU   1
                      01439 BIT_20            EQU   2
                      01440 BIT_21            EQU   1
                      01441 BIT_22            EQU   3
                      01442 BIT_23            EQU   0
                      01443 
                      01444 SSR_LIGHTS        EQU   24      ; first light ID (as opposed to SSR)
                      01445                  ELSE
                      01446                   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      01447 ;
                      01448 ; 24-Channel board (Standalone CPU)
                      01449 ;
                      01450 PORT_RX            EQU  PORTC
                      01451 BIT_RX             EQU  7
                      01452 
                      01453 HAS_T_R            EQU  1
                      01454 HAS_ACTIVE         EQU  1
                      01455 HAS_SENSORS        EQU  1
                      01456 HAS_OPTION         EQU  1
                      01457 
                      01458 TRIS_SENS_A        EQU  TRISE   ; Sensor A == RED LED
                      01459 PORT_SENS_A        EQU  PORTE   ; Sensor A == RED LED
                      01460 BIT_SENS_A         EQU  2       ; Sensor A == RED LED
                      01461 TRIS_SENS_B        EQU  TRISE   ; Sensor B == GREEN LED
                      01462 PORT_SENS_B        EQU  PORTE   ; Sensor B == GREEN LED
                      01463 BIT_SENS_B         EQU  0       ; Sensor B == GREEN LED
                      01464 TRIS_SENS_C        EQU  TRISA   ; Sensor C == ACTIVE LED
                      01465 PORT_SENS_C        EQU  PORTA   ; Sensor C == ACTIVE LED
                      01466 BIT_SENS_C         EQU  5       ; Sensor C == ACTIVE LED
                      01467 TRIS_SENS_D        EQU  TRISE   ; Sensor D == YELLOW LED
                      01468 PORT_SENS_D        EQU  PORTE   ; Sensor D == YELLOW LED
                      01469 BIT_SENS_D         EQU  1       ; Sensor D == YELLOW LED
                      01470 
                      01471 PLAT_T_R           EQU  LATB
                      01472 PORT_T_R           EQU  PORTB
                      01473 TRIS_T_R           EQU  TRISB
                      01474 BIT_T_R            EQU  0
                      01475 
                      01476 PLAT_ACTIVE        EQU  LATA
                      01477 PLAT_RED           EQU  LATE
                      01478 PLAT_YELLOW        EQU  LATE
                      01479 PLAT_GREEN         EQU  LATE
                      01480 BIT_ACTIVE         EQU  5
                      01481 BIT_RED            EQU  2
                      01482 BIT_YELLOW         EQU  1
                      01483 BIT_GREEN          EQU  0
                      01484 
                      01485 PORT_OPTION        EQU  PORTB
                      01486 BIT_OPTION         EQU  6
                      01487 
                      01488 PLAT_PWR_ON        EQU  LATB
                      01489 BIT_PWR_ON         EQU  7
                      01490 
                      01491 PLAT_0             EQU  LATB
                      01492 PLAT_1             EQU  LATB
                      01493 PLAT_2             EQU  LATB
                      01494 PLAT_3             EQU  LATB
                      01495 PLAT_4             EQU  LATB
                      01496 PLAT_5             EQU  LATD
                      01497 PLAT_6             EQU  LATD
                      01498 PLAT_7             EQU  LATD
                      01499 PLAT_8             EQU  LATD
                      01500 PLAT_9             EQU  LATC
                      01501 PLAT_10            EQU  LATC
                      01502 PLAT_11            EQU  LATD
                      01503 PLAT_12            EQU  LATD
                      01504 PLAT_13            EQU  LATD
                      01505 PLAT_14            EQU  LATD
                      01506 PLAT_15            EQU  LATC
                      01507 PLAT_16            EQU  LATC
                      01508 PLAT_17            EQU  LATC
                      01509 PLAT_18            EQU  LATC
                      01510 PLAT_19            EQU  LATA
                      01511 PLAT_20            EQU  LATA
                      01512 PLAT_21            EQU  LATA
                      01513 PLAT_22            EQU  LATA
                      01514 PLAT_23            EQU  LATA
                      01515 
                      01516 BIT_0              EQU  5
                      01517 BIT_1              EQU  4
                      01518 BIT_2              EQU  3
                      01519 BIT_3              EQU  2
                      01520 BIT_4              EQU  1
                      01521 BIT_5              EQU  7
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01522 BIT_6              EQU  6
                      01523 BIT_7              EQU  5
                      01524 BIT_8              EQU  4
                      01525 BIT_9              EQU  5
                      01526 BIT_10             EQU  4
                      01527 BIT_11             EQU  3
                      01528 BIT_12             EQU  2
                      01529 BIT_13             EQU  1
                      01530 BIT_14             EQU  0
                      01531 BIT_15             EQU  3
                      01532 BIT_16             EQU  2
                      01533 BIT_17             EQU  1
                      01534 BIT_18             EQU  0
                      01535 BIT_19             EQU  4
                      01536 BIT_20             EQU  3
                      01537 BIT_21             EQU  2
                      01538 BIT_22             EQU  1
                      01539 BIT_23             EQU  0
                      01540 
                      01541 SSR_LIGHTS         EQU  24      ; first light ID (as opposed to SSR)
                      01542                   ELSE
                      01543                    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      01544 ;
                      01545 ; 4-Channel Board (Mini Standalone CPU)
                      01546 ;
                      01547 PORT_RX             EQU PORTB
                      01548 BIT_RX              EQU 5
                      01549 
                      01550 HAS_T_R             EQU 1
                      01551 HAS_ACTIVE          EQU 1
                      01552 HAS_SENSORS         EQU 1
                      01553 HAS_OPTION          EQU 1
                      01554 
                      01555 TRIS_SENS_A         EQU TRISC   ; Sensor A == ACTIVE LED
                      01556 PORT_SENS_A         EQU PORTC   ; Sensor A == ACTIVE LED
                      01557 BIT_SENS_A          EQU 5       ; Sensor A == ACTIVE LED
                      01558 TRIS_SENS_B         EQU TRISC   ; Sensor B == RED LED
                      01559 PORT_SENS_B         EQU PORTC   ; Sensor B == RED LED
                      01560 BIT_SENS_B          EQU 6       ; Sensor B == RED LED
                      01561 TRIS_SENS_C         EQU TRISC   ; Sensor C == YELLOW LED
                      01562 PORT_SENS_C         EQU PORTC   ; Sensor C == YELLOW LED
                      01563 BIT_SENS_C          EQU 3       ; Sensor C == YELLOW LED
                      01564 TRIS_SENS_D         EQU TRISC   ; Sensor D
                      01565 PORT_SENS_D         EQU PORTC   ; Sensor D
                      01566 BIT_SENS_D          EQU 7       ; Sensor D
                      01567 
                      01568 PLAT_T_R            EQU LATB
                      01569 PORT_T_R            EQU PORTB
                      01570 TRIS_T_R            EQU TRISB
                      01571 BIT_T_R             EQU 6
                      01572 
                      01573 PLAT_ACTIVE         EQU LATC
                      01574 PLAT_RED            EQU LATC
                      01575 PLAT_YELLOW         EQU LATC
                      01576 PLAT_GREEN          EQU LATC
                      01577 BIT_ACTIVE          EQU 5
                      01578 BIT_RED             EQU 6
                      01579 BIT_YELLOW          EQU 3
                      01580 BIT_GREEN           EQU 4
                      01581 
                      01582 PORT_OPTION         EQU PORTA
                      01583 BIT_OPTION          EQU 1
                      01584 
                      01585 PLAT_PWR_ON         EQU LATA
                      01586 BIT_PWR_ON          EQU 0
                      01587 
                      01588 PLAT_0              EQU LATB
                      01589 PLAT_1              EQU LATC
                      01590 PLAT_2              EQU LATC
                      01591 PLAT_3              EQU LATC
                      01592 
                      01593 BIT_0               EQU 4
                      01594 BIT_1               EQU 2
                      01595 BIT_2               EQU 1
                      01596 BIT_3               EQU 0
                      01597 
                      01598 SSR_LIGHTS          EQU 4       ; first light ID (as opposed to SSR)
                      01599                    ELSE
                      01600                     IF QSCC_PORT
                      01601                      #include "qscc_hook_main_pins.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos device initialization code which sets up I/O pins.
                      00027 ; We want them arranged differently than the Lumos controllers do, but we put
                      00028 ; the QuizShow code here to keep the Lumos product clean and separate.
                      00029 ; 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_main_pins only used for QS*C systems"
                      00032         ENDIF
                      00033 
                      00034 ;
                      00035 ; QSCC
                      00036 ;
                      00037                     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00038 N_BUTTONS            EQU        6       ; X L A B C D
                      00039 BTN_IDX_X0           EQU        0
                      00040 BTN_IDX_L0           EQU        1
                      00041 BTN_IDX_A0           EQU        2
                      00042 BTN_IDX_B0           EQU        3
                      00043 BTN_IDX_C0           EQU        4
                      00044 BTN_IDX_D0           EQU        5
                      00045 PORT_X0              EQU        PORTA
                      00046 PORT_L0              EQU        PORTA
                      00047 PORT_A0              EQU        PORTA
                      00048 PORT_B0              EQU        PORTA
                      00049 PORT_C0              EQU        PORTA
                      00050 PORT_D0              EQU        PORTA
                      00051 BIT_X0               EQU        1
                      00052 BIT_L0               EQU        0
                      00053 BIT_A0               EQU        5
                      00054 BIT_B0               EQU        4
                      00055 BIT_C0               EQU        3
                      00056 BIT_D0               EQU        2
                      00057 
                      00058 PORT_RX              EQU        PORTC
                      00059 BIT_RX               EQU        7
                      00060 
                      00061 HAS_T_R              EQU        1
                      00062 HAS_ACTIVE           EQU        0
                      00063 HAS_SENSORS          EQU        0
                      00064 HAS_OPTION           EQU        0
                      00065 HAS_STATUS_LEDS      EQU        0
                      00066 HAS_POWER_CTRL       EQU        0
                      00067 
                      00068 PLAT_T_R             EQU        LATC
                      00069 PORT_T_R             EQU        PORTC
                      00070 TRIS_T_R             EQU        TRISC
                      00071 BIT_T_R              EQU        3
                      00072 
                      00073 CHAN_X0R             EQU        .0
                      00074 CHAN_X0G             EQU        .1
                      00075 CHAN_X0B             EQU        .2
                      00076 CHAN_L0R             EQU        .3
                      00077 CHAN_L0Y             EQU        .4
                      00078 CHAN_L0G             EQU        .5
                      00079 CHAN_A0L             EQU        .6
                      00080 CHAN_B0L             EQU        .7
                      00081 CHAN_C0L             EQU        .8
                      00082 CHAN_D0L             EQU        .9
                      00083 CHAN_F_R             EQU        .10
                      00084 CHAN_F_G             EQU        .11
                      00085 CHAN_F_B             EQU        .12
                      00086 CHAN_F_W             EQU        .13
                      00087 
                      00088 PLAT_0               EQU        LATC    ; XR
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00089 PLAT_1               EQU        LATC    ; XG
                      00090 PLAT_2               EQU        LATC    ; XB
                      00091 PLAT_3               EQU        LATE    ; LR
                      00092 PLAT_4               EQU        LATE    ; LY
                      00093 PLAT_5               EQU        LATE    ; LG
                      00094 PLAT_6               EQU        LATB    ; AL
                      00095 PLAT_7               EQU        LATB    ; BL
                      00096 PLAT_8               EQU        LATB    ; CL
                      00097 PLAT_9               EQU        LATB    ; DL
                      00098 PLAT_10              EQU        LATB    ; FR
                      00099 PLAT_11              EQU        LATB    ; FG
                      00100 PLAT_12              EQU        LATB    ; FB
                      00101 PLAT_13              EQU        LATB    ; FW
                      00102 SSR_MAX              EQU        13
                      00103 
                      00104 BIT_0                EQU        2       ; XR
                      00105 BIT_1                EQU        1       ; XG
                      00106 BIT_2                EQU        0       ; XB
                      00107 BIT_3                EQU        2       ; LR
                      00108 BIT_4                EQU        0       ; LY
                      00109 BIT_5                EQU        1       ; LG
                      00110 BIT_6                EQU        7       ; AL
                      00111 BIT_7                EQU        6       ; BL
                      00112 BIT_8                EQU        5       ; CL
                      00113 BIT_9                EQU        4       ; DL
                      00114 BIT_10               EQU        3       ; FR
                      00115 BIT_11               EQU        2       ; FG
                      00116 BIT_12               EQU        1       ; FB
                      00117 BIT_13               EQU        0       ; FW
                      00118                     ELSE
                      00119                      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
  0000000A            00120 N_BUTTONS             EQU       10      ; X0 L0 X1 L1 ... X4 L4
  00000000            00121 BTN_IDX_X0            EQU       0
  00000001            00122 BTN_IDX_L0            EQU       1
  00000002            00123 BTN_IDX_X1            EQU       2
  00000003            00124 BTN_IDX_L1            EQU       3
  00000004            00125 BTN_IDX_X2            EQU       4
  00000005            00126 BTN_IDX_L2            EQU       5
  00000006            00127 BTN_IDX_X3            EQU       6
  00000007            00128 BTN_IDX_L3            EQU       7
  00000008            00129 BTN_IDX_X4            EQU       8
  00000009            00130 BTN_IDX_L4            EQU       9
                      00131 
  00000F80            00132 PORT_X0               EQU       PORTA
  00000F80            00133 PORT_L0               EQU       PORTA
  00000F80            00134 PORT_X1               EQU       PORTA
  00000F80            00135 PORT_L1               EQU       PORTA
  00000F80            00136 PORT_X2               EQU       PORTA
  00000F80            00137 PORT_L2               EQU       PORTA
  00000F82            00138 PORT_X3               EQU       PORTC
  00000F83            00139 PORT_L3               EQU       PORTD
  00000F83            00140 PORT_X4               EQU       PORTD
  00000F82            00141 PORT_L4               EQU       PORTC
  00000003            00142 BIT_X0                EQU       3
  00000002            00143 BIT_L0                EQU       2
  00000001            00144 BIT_X1                EQU       1
  00000000            00145 BIT_L1                EQU       0
  00000004            00146 BIT_X2                EQU       4
  00000005            00147 BIT_L2                EQU       5
  00000004            00148 BIT_X3                EQU       4
  00000000            00149 BIT_L3                EQU       0
  00000004            00150 BIT_X4                EQU       4
  00000005            00151 BIT_L4                EQU       5
                      00152 
  00000F82            00153 PORT_RX               EQU       PORTC
  00000007            00154 BIT_RX                EQU       7
                      00155 
  00000001            00156 HAS_T_R               EQU       1
  00000000            00157 HAS_ACTIVE            EQU       0
  00000000            00158 HAS_SENSORS           EQU       0
  00000000            00159 HAS_OPTION            EQU       0
  00000000            00160 HAS_STATUS_LEDS       EQU       0
  00000000            00161 HAS_POWER_CTRL        EQU       0
                      00162 
  00000F8B            00163 PLAT_T_R              EQU       LATC
  00000F82            00164 PORT_T_R              EQU       PORTC
  00000F94            00165 TRIS_T_R              EQU       TRISC
  00000003            00166 BIT_T_R               EQU       3
                      00167 
  00000000            00168 CHAN_X0R              EQU       .0
  00000001            00169 CHAN_X0G              EQU       .1
  00000002            00170 CHAN_X0B              EQU       .2
  00000003            00171 CHAN_L0R              EQU       .3
  00000004            00172 CHAN_X1R              EQU       .4
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000005            00173 CHAN_X1G              EQU       .5
  00000006            00174 CHAN_X1B              EQU       .6
  00000007            00175 CHAN_L1R              EQU       .7
  00000008            00176 CHAN_X2R              EQU       .8
  00000009            00177 CHAN_X2G              EQU       .9
  0000000A            00178 CHAN_X2B              EQU       .10
  0000000B            00179 CHAN_L2R              EQU       .11
  0000000C            00180 CHAN_X3R              EQU       .12
  0000000D            00181 CHAN_X3G              EQU       .13
  0000000E            00182 CHAN_X3B              EQU       .14
  0000000F            00183 CHAN_L3R              EQU       .15
  00000010            00184 CHAN_X4R              EQU       .16
  00000011            00185 CHAN_X4G              EQU       .17
  00000012            00186 CHAN_X4B              EQU       .18
  00000013            00187 CHAN_L4R              EQU       .19
  00000F8B            00188 PLAT_0                EQU       LATC    ; X0R
  00000F8B            00189 PLAT_1                EQU       LATC    ; X0G
  00000F8B            00190 PLAT_2                EQU       LATC    ; X0B
  00000F8D            00191 PLAT_3                EQU       LATE    ; L0R
  00000F8A            00192 PLAT_4                EQU       LATB    ; X1R
  00000F8A            00193 PLAT_5                EQU       LATB    ; X1G
  00000F8A            00194 PLAT_6                EQU       LATB    ; X1B
  00000F8A            00195 PLAT_7                EQU       LATB    ; L1R
  00000F8A            00196 PLAT_8                EQU       LATB    ; X2R
  00000F8A            00197 PLAT_9                EQU       LATB    ; X2G
  00000F8A            00198 PLAT_10               EQU       LATB    ; X2B
  00000F8D            00199 PLAT_11               EQU       LATE    ; L2R
  00000F8C            00200 PLAT_12               EQU       LATD    ; X3R
  00000F8C            00201 PLAT_13               EQU       LATD    ; X3G
  00000F8C            00202 PLAT_14               EQU       LATD    ; X3B
  00000F8D            00203 PLAT_15               EQU       LATE    ; L3R
  00000F8A            00204 PLAT_16               EQU       LATB    ; X4R
  00000F8C            00205 PLAT_17               EQU       LATD    ; X4G
  00000F8C            00206 PLAT_18               EQU       LATD    ; X4B
  00000F8C            00207 PLAT_19               EQU       LATD    ; L4R
  00000013            00208 SSR_MAX               EQU       19
                      00209 
  00000002            00210 BIT_0                 EQU       2       ; X0R
  00000001            00211 BIT_1                 EQU       1       ; X0G
  00000000            00212 BIT_2                 EQU       0       ; X0B
  00000002            00213 BIT_3                 EQU       2       ; L0R
  00000007            00214 BIT_4                 EQU       7       ; X1R
  00000006            00215 BIT_5                 EQU       6       ; X1G
  00000005            00216 BIT_6                 EQU       5       ; X1B
  00000004            00217 BIT_7                 EQU       4       ; L1R
  00000003            00218 BIT_8                 EQU       3       ; X2R
  00000002            00219 BIT_9                 EQU       2       ; X2G
  00000001            00220 BIT_10                EQU       1       ; X2B
  00000000            00221 BIT_11                EQU       0       ; L2R
  00000007            00222 BIT_12                EQU       7       ; X3R
  00000006            00223 BIT_13                EQU       6       ; X3G
  00000005            00224 BIT_14                EQU       5       ; X3B
  00000001            00225 BIT_15                EQU       1       ; L3R
  00000000            00226 BIT_16                EQU       0       ; X4R
  00000003            00227 BIT_17                EQU       3       ; X4G
  00000001            00228 BIT_18                EQU       1       ; X4B
  00000002            00229 BIT_19                EQU       2       ; L4R
                      00230                      ENDIF
                      00231                     ENDIF
                      00232 
                      01602                     ELSE
                      01603                      ERROR "Invalid platform select"
                      01604                     ENDIF
                      01605                    ENDIF
                      01606                   ENDIF
                      01607                  ENDIF
                      01608                 ENDIF
                      01609 ;
                      01610 ; THESE SSR LINES ARE NEGATIVE-LOGIC CONTROLLED!
                      01611 ; (0=ON, 1=OFF)
                      01612 ;
                      01613 
                      01614 ; In this version, we have an array of outputs mapped with 0-255 values
                      01615 ; and another block of flags, etc. in SSR_DATA_BANK.
                      01616 ; We include the panel LEDs here, too, so we can handle them like the 
                      01617 ; others as far as timed patterns and display refreshes and the like.
                      01618 ;
                      01619 ; Offsets for panel lights
                      01620                         IF      HAS_STATUS_LEDS
                      01621 SSR_GREEN                EQU    SSR_LIGHTS+0    ; NOTE These are positive-logic, not negative like SSRs
                      01622 SSR_YELLOW               EQU    SSR_LIGHTS+1
                      01623 SSR_RED                  EQU    SSR_LIGHTS+2
                      01624 ;
                      01625 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01626 ; Aliases for macro expansion (continues SSR numbering into these too)
                      01627 ;
                      01628 PLAT_0                   EQU    PLAT_RED
                      01629 PLAT_0                   EQU    PLAT_YELLOW
                      01630 PLAT_0                   EQU    PLAT_GREEN
                      01631 BIT_0                    EQU    BIT_RED
                      01632 BIT_0                    EQU    BIT_YELLOW
                      01633 BIT_0                    EQU    BIT_GREEN
                      01634 ;
                      01635 ;
                      01636                          IF HAS_ACTIVE
                      01637 SSR_ACTIVE                EQU   SSR_LIGHTS+3
                      01638 PLAT_0                    EQU   PLAT_ACTIVE
                      01639 BIT_0                     EQU   BIT_ACTIVE
                      01640 SSR_MAX                   EQU   SSR_LIGHTS+3
                      01641                          ELSE
                      01642 SSR_MAX                   EQU   SSR_LIGHTS+2
                      01643                          ENDIF
                      01644                         ENDIF
                      01645 
                      01646                         IF HAS_STATUS_LEDS
                      01647 OUTPUT_CHAN_MAX          EQU    SSR_LIGHTS-1
                      01648                         ELSE
  00000013            01649 OUTPUT_CHAN_MAX          EQU    SSR_MAX
                      01650                         ENDIF
                      01651 
                      01652 WAIT_FOR_SENTINEL MACRO MAX_LEN, SENTINEL_VALUE, NEXT_STATE
                      01653          MOVLW  MAX_LEN
                      01654          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
                      01655          MOVLW  SENTINEL_VALUE
                      01656          MOVWF  YY_LOOK_FOR, ACCESS
                      01657          MOVLW  6                       ; -> state 6 (wait for end of packet)
                      01658          MOVWF  YY_STATE, ACCESS
                      01659          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
                      01660          MOVLW  NEXT_STATE
                      01661          MOVWF  YY_NEXT_STATE, ACCESS
                      01662         ENDM
                      01663 
  00000001            01664 ERR_CLASS_OVERRUN       EQU     1       ; ID dispatch overrun
  00000002            01665 ERR_CLASS_IN_VALID      EQU     2       ; Input validation failure
  00000003            01666 ERR_CLASS_FATAL_RESET   EQU     3       ; reset failure
  00000004            01667 ERR_CLASS_DEVICE        EQU     4       ; hardware issue
  00000005            01668 ERR_CLASS_INT_COMMAND   EQU     5       ; internal command invalid
                      01669 ERR_BUG MACRO   ERR_CODE, ERR_CLASS
                      01670          MOVLW  ERR_CODE
                      01671          MOVWF  LAST_ERROR, ACCESS
                      01672          IF HAS_ACTIVE
                      01673           SET_SSR_RAPID_FLASH SSR_ACTIVE
                      01674          ENDIF
                      01675          IF HAS_STATUS_LEDS
                      01676           SET_SSR_RAPID_FLASH SSR_YELLOW
                      01677           IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01678            SET_SSR_RAPID_FLASH SSR_RED
                      01679            SET_SSR_OFF SSR_GREEN
                      01680           ELSE
                      01681            SET_SSR_OFF SSR_RED
                      01682           ENDIF
                      01683          ENDIF
                      01684          IF ROLE_MASTER
                      01685           ; Send extra flags to slave
                      01686           MOVLW 0xF0
                      01687           CALL  SIO_WRITE_W
                      01688           MOVLW 0x21
                      01689           CALL  SIO_WRITE_W
                      01690           IF ERR_CLASS == ERR_CLASS_OVERRUN
                      01691            MOVLW B'00101000'
                      01692            CALL SIO_WRITE_W
                      01693            MOVLW B'00000000'
                      01694           ELSE
                      01695            IF ERR_CLASS == ERR_CLASS_IN_VALID
                      01696             MOVLW B'00111000'
                      01697             CALL SIO_WRITE_W
                      01698             MOVLW B'00000001'
                      01699            ELSE
                      01700             IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01701              MOVLW B'00101101'
                      01702              CALL SIO_WRITE_W
                      01703              MOVLW B'00000101'
                      01704             ELSE
                      01705              IF ERR_CLASS == ERR_CLASS_DEVICE
                      01706               MOVLW B'00111000'
                      01707               CALL SIO_WRITE_W
                      01708               MOVLW B'00000101'
                      01709              ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01710               IF ERR_CLASS == ERR_CLASS_INT_COMMAND
                      01711                MOVLW B'00111000'
                      01712                CALL SIO_WRITE_W
                      01713                MOVLW B'00000110'
                      01714               ELSE
                      01715                MOVLW B'00000101'
                      01716                CALL  SIO_WRITE_W
                      01717                MOVLW B'00000000'
                      01718               ENDIF
                      01719              ENDIF
                      01720             ENDIF
                      01721            ENDIF
                      01722           ENDIF
                      01723           CALL SIO_WRITE_W
                      01724          ENDIF
                      01725          CLRF   YY_STATE, ACCESS
                      01726          RETURN
                      01727         ENDM
                      01728 
                      01729 #include "lumos_set_ssr.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  
                      00018 ; Released under the terms and conditions of the Open Software
                      00019 ; License, version 3.0.
                      00020 ;
                      00021 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00022 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 #ifndef LUMOS_SET_SSR_INC
                      00027 #define LUMOS_SET_SSR_INC
                      00028 
                      00029  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000400            00030 SSR_DATA_BANK   EQU     0x400
  00000500            00031 MAIN_DATA       EQU     0x500
  000000C8            00032 YY_BUF_LEN      EQU     .200
                      00033  ELSE
                      00034   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00035 SSR_DATA_BANK   EQU     0x060
                      00036 MAIN_DATA       EQU     0x088
                      00037 YY_BUF_LEN      EQU     .90 
                      00038   ELSE
                      00039    ERROR "Invalid architecture switch for SSR_DATA_BANK"
                      00040   ENDIF
                      00041  ENDIF
                      00042 
                      00043 ;
                      00044 ; SSR_FLAGS words for each output show state information about those
                      00045 ; channels.
                      00046 ;
  00000007            00047 FADE_UP         EQU     7       ; 1-------  This channel is fading up
  00000006            00048 FADE_DOWN       EQU     6       ; -1------  This channel is fading down
  00000005            00049 FADE_CYCLE      EQU     5       ; --1-----  This channel is fading up<-->down
  00000004            00050 MAX_OFF_TIME    EQU     4       ; ---1----  Use maximum off-time in cycle
  00000080            00051 BIT_FADE_UP     EQU     0x80
  00000040            00052 BIT_FADE_DOWN   EQU     0x40
  00000020            00053 BIT_FADE_CYCLE  EQU     0x20
  00000010            00054 BIT_MAX_OFF_TIME EQU    0x10
                      00055 
                      00056 SET_SSR_VALUE MACRO IDX, LEVEL
                      00057         BANKSEL SSR_DATA_BANK
                      00058          MOVLW  LEVEL
                      00059          MOVWF  SSR_00_VALUE+IDX, BANKED
                      00060          CLRF   SSR_00_STEP+IDX, BANKED
                      00061          CLRF   SSR_00_SPEED+IDX, BANKED
                      00062          CLRF   SSR_00_COUNTER+IDX, BANKED
                      00063          CLRF   SSR_00_FLAGS+IDX, BANKED
                      00064         ENDM
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00065 
                      00066 SET_SSR_PATTERN MACRO IDX, LEVEL, STEP, SPEED, FLAGS
                      00067         BANKSEL SSR_DATA_BANK
                      00068          MOVLW  LEVEL
                      00069          MOVWF  SSR_00_VALUE+IDX, BANKED
                      00070          MOVLW  STEP
                      00071          MOVWF  SSR_00_STEP+IDX, BANKED
                      00072          MOVLW  SPEED
                      00073          MOVWF  SSR_00_SPEED+IDX, BANKED
                      00074          MOVWF  SSR_00_COUNTER+IDX, BANKED
                      00075          MOVLW  FLAGS
                      00076          MOVWF  SSR_00_FLAGS+IDX, BANKED
                      00077         ENDM
                      00078 
                      00079 SET_SSR_NORMAL_MODE MACRO IDX
                      00080          SET_SSR_PATTERN IDX, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      00081         ENDM
                      00082 
                      00083 SET_SSR_DMX_MODE MACRO IDX
                      00084          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00085         ENDM
                      00086 
                      00087 SET_SSR_RAPID_FLASH MACRO IDX
                      00088          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE
                      00089         ENDM
                      00090 
                      00091 SET_SSR_BLINK_FADE MACRO IDX
                      00092          SET_SSR_PATTERN IDX, 255,   2,  1, BIT_FADE_DOWN
                      00093         ENDM
                      00094 
                      00095 SET_SSR_SLOW_FLASH MACRO IDX
                      00096          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE|BIT_MAX_OFF_TIME
                      00097         ENDM
                      00098 
                      00099 SET_SSR_RAPID_FADE MACRO IDX
                      00100          SET_SSR_PATTERN IDX, 0, 4, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00101         ENDM
                      00102 
                      00103 SET_SSR_SLOW_FADE MACRO IDX
                      00104          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00105         ENDM
                      00106 
                      00107 SET_SSR_STEADY MACRO IDX
                      00108          SET_SSR_VALUE IDX, 255
                      00109         ENDM
                      00110 
                      00111 SET_SSR_OFF MACRO IDX
                      00112          SET_SSR_VALUE IDX, 0
                      00113         ENDM
                      00114 #endif
                      01730 
                      01731 ;
                      01732 ; Sending 8-bit data bytes in our 7-bit protocol
                      01733 ; (in data bytes, in other words) requires this
                      01734 ; escaping mechanism:
                      01735 ;   If high bit set, send $7E + low 7 bits
                      01736 ;   Literal $7E is sent as $7F + $7E
                      01737 ;   Literal $7F is sent as $7F + $7F
                      01738 ; 
                      01739 ; Other interesting cases inferred from the above:
                      01740 ;   $FE is sent as $7E + $7E
                      01741 ;   $FF is sent as $7E + $7F
                      01742 ;
                      01743 ; This calls the SIO_WRITE_W entry point, so the bank
                      01744 ; will shift as a result.
                      01745 ;
                      01746 SND8BIT MACRO   VALUE
                      01747         MOVLW   VALUE
                      01748         SEND_8_BIT_W
                      01749         ENDM
                      01750 
  00000001            01751 S8B_LABEL SET   1
                      01752 SEND_8_BIT_W MACRO
                      01753         MOVWF   EIGHTBITSIOBUF, ACCESS
                      01754         MOVLW   0x7F                            ; sending literal $7F?
                      01755         CPFSEQ  EIGHTBITSIOBUF, ACCESS
                      01756         BRA     S8B_CHK_7E#v(S8B_LABEL)
                      01757         CALL    SIO_WRITE_W                     ; send $7F to escape first
                      01758         MOVLW   0x7F                            ; then the literal $7F itself.
                      01759         CALL    SIO_WRITE_W                     
                      01760         BRA     S8B_END#v(S8B_LABEL)
                      01761 S8B_CHK_7E#v(S8B_LABEL):
                      01762         MOVLW   0x7E                            ; sending literal $7E?
                      01763         CPFSEQ  EIGHTBITSIOBUF, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01764         BRA     S8B_CHK_MSB#v(S8B_LABEL)
                      01765         MOVLW   0x7F                            ; send $7F to escape first
                      01766         CALL    SIO_WRITE_W
                      01767         MOVLW   0x7E                            ; then the literal $7E itself.
                      01768         CALL    SIO_WRITE_W
                      01769         BRA     S8B_END#v(S8B_LABEL)
                      01770 S8B_CHK_MSB#v(S8B_LABEL):
                      01771         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
                      01772         BRA     S8B_SEND_NORMAL#v(S8B_LABEL)
                      01773         MOVLW   0x7E                            ; send $7E to escape first
                      01774         CALL    SIO_WRITE_W
                      01775         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
                      01776 S8B_SEND_NORMAL#v(S8B_LABEL):
                      01777         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
                      01778         CALL    SIO_WRITE_W     
                      01779 S8B_END#v(S8B_LABEL):
                      01780 S8B_LABEL ++
                      01781         ENDM
                      01782 
                      01783 ;==============================================================================
                      01784 ; BOOT BLOCK
                      01785 ;______________________________________________________________________________
                      01786 
                      01787 ;
                      01788 ; RESET VECTOR
                      01789 ;
                      01790 V_RST   CODE    0x0000
000000 0004           01791         CLRWDT
000002 EF?? F???      01792         GOTO    START
                      01793 ;
                      01794 ; HIGH-PRIORITY INTERRUPT VECTOR
                      01795 ;
                      01796 V_INT_H CODE    0x0008
000008 0004           01797         CLRWDT
00000A EF?? F???      01798         GOTO    INT_HIGH
                      01799 ;
                      01800 ; LOW-PRIORITY INTERRUPT VECTOR
                      01801 ;
                      01802 V_INT_L CODE    0x0018
000018 0004           01803         CLRWDT
00001A EF?? F???      01804         GOTO    INT_LOW
                      01805 ;
                      01806 ; INITIALIZATION CODE
                      01807 ;
                      01808 _BOOT   CODE    0x0100
                      01809 
000100                01810 S_FLASH:
                      01811         IF HAS_STATUS_LEDS
                      01812          BSF    PLAT_RED, BIT_RED, ACCESS
                      01813          RCALL  DELAY_1_6_SEC
                      01814          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01815          RCALL  DELAY_1_6_SEC
                      01816         
                      01817          BCF    PLAT_RED, BIT_RED, ACCESS
                      01818          RCALL  DELAY_1_6_SEC
                      01819          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01820          RCALL  DELAY_1_6_SEC
                      01821         ENDIF
000100 0012           01822         RETURN
                      01823 
000102                01824 D_FLASH:
                      01825         IF HAS_STATUS_LEDS
                      01826          BSF    PLAT_RED, BIT_RED, ACCESS
                      01827          RCALL  DELAY_1_12_SEC
                      01828          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01829          RCALL  DELAY_1_12_SEC
                      01830          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01831          RCALL  DELAY_1_12_SEC
                      01832          IF HAS_ACTIVE
                      01833           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01834           RCALL DELAY_1_12_SEC
                      01835          ENDIF
                      01836         
                      01837          BCF    PLAT_RED, BIT_RED, ACCESS
                      01838          RCALL  DELAY_1_12_SEC
                      01839          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01840          RCALL  DELAY_1_12_SEC
                      01841          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01842          RCALL  DELAY_1_12_SEC
                      01843          IF HAS_ACTIVE
                      01844           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01845           RCALL DELAY_1_12_SEC
                      01846          ENDIF
                      01847         ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000102 0012           01848         RETURN
                      01849 
000104                01850 START:
000104 0004           01851         CLRWDT
000106 6AFC           01852         CLRF    STKPTR, ACCESS          ; clear stack error bits, set SP=0
000108 EC?? F???      01853         CALL    LUMOS_INIT
                      01854         IF ! HAS_SENSORS && !QSCC_PORT
                      01855          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS         ; If this device can't possibly
                      01856          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS         ; support sensor inputs, enable outputs
                      01857          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS         ; on those pins early to let the LEDs
                      01858          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS         ; work ASAP.
                      01859         ENDIF
                      01860         IF 0
                      01861         ;
                      01862         ; Extra start-up delay to investigate boot bug
                      01863         ;
                      01864         MOVLW   .10
                      01865         MOVWF   I, ACCESS
                      01866 SSS_SSS:
                      01867         CLRWDT
                      01868         CALL    S_FLASH
                      01869         DECFSZ  I, F, ACCESS
                      01870         BRA     SSS_SSS
                      01871         ENDIF
                      01872         ;
00010C EC?? F???      01873         CALL    D_FLASH
000110 EC?? F???      01874         CALL    SIO_INIT                ; call after other TRIS bits set
                      01875         ;
                      01876         ; Get EEPROM settings
                      01877         ;
                      01878         IF HAS_STATUS_LEDS
                      01879          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () () () R
                      01880         ENDIF
                      01881         ;
                      01882         ; Test sentinel values $000==$FF and $00F==$42.
                      01883         ; If they are not there, do a full factory reset of those
                      01884         ; settings to restore something that we know will work.
                      01885         ;
000114 0004           01886         CLRWDT
000116 6AAA           01887         CLRF    EEADRH, ACCESS          ; EEPROM location $000
000118 6AA9           01888         CLRF    EEADR, ACCESS           ; (note interrupts are still off now)
00011A 9EA6           01889         BCF     EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
00011C 9CA6           01890         BCF     EECON1, CFGS, ACCESS
00011E 94A6           01891         BCF     EECON1, WREN, ACCESS    ; disable writing
000120 80A6           01892         BSF     EECON1, RD, ACCESS      ; initiate read operation
000122 0EFF           01893         MOVLW   0xFF                    ; 
000124 62A8           01894         CPFSEQ  EEDATA, ACCESS          ; byte == $FF?
000126 D???           01895         BRA     FACTORY_RESET           ; if not, overwrite everything!
000128 0E0F           01896         MOVLW   0x0F                    ; try ending sentinel
00012A 6EA9           01897         MOVWF   EEADR, ACCESS           ; at $00F
00012C 80A6           01898         BSF     EECON1, RD, ACCESS
00012E 0E42           01899         MOVLW   0x42
000130 62A8           01900         CPFSEQ  EEDATA, ACCESS          ; byte == $42?
000132 D???           01901         BRA     FACTORY_RESET           ; else, overwrite.
                      01902         ;
                      01903         ; Values checked out, so assume EEPROM is intact.
                      01904         ; Read values into RAM variables and continue booting.
                      01905         ;
000134 0004           01906         CLRWDT
000136 98A1           01907         BCF     PIR2, EEIF, ACCESS      ; clear interrupt flag
                      01908         IF HAS_STATUS_LEDS
                      01909          BCF    PLAT_RED, BIT_RED, ACCESS       
                      01910          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y ()
                      01911         ENDIF
                      01912         ;
000138 94A6           01913         BCF     EECON1, WREN, ACCESS    ; Read (not write) access to memory
00013A 9EA6           01914         BCF     EECON1, EEPGD, ACCESS   ; Select access to DATA area
00013C 9CA6           01915         BCF     EECON1, CFGS, ACCESS
                      01916         ;
00013E 6AAA           01917         CLRF    EEADRH, ACCESS
000140 0E01           01918         MOVLW   1
000142 6EA9           01919         MOVWF   EEADR, ACCESS           ; EEPROM location 0x001: baud rate
000144 80A6           01920         BSF     EECON1, RD, ACCESS
000146 50A8           01921         MOVF    EEDATA, W, ACCESS
000148 EC?? F???      01922         CALL    SIO_SET_BAUD_W
                      01923         ;
00014C 2AA9           01924         INCF    EEADR, F, ACCESS        ; EEPROM location 0x002: device address
00014E 80A6           01925         BSF     EECON1, RD, ACCESS
000150 CFA8 F???      01926         MOVFF   EEDATA, MY_ADDRESS
                      01927         ;
000154 2AA9           01928         INCF    EEADR, F, ACCESS        ; EEPROM location 0x003: phase offset MSB
000156 80A6           01929         BSF     EECON1, RD, ACCESS
000158 CFA8 F???      01930         MOVFF   EEDATA, PHASE_OFFSETH
                      01931         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00015C 2AA9           01932         INCF    EEADR, F, ACCESS        ; EEPROM location 0x004: phase offset LSB
00015E 80A6           01933         BSF     EECON1, RD, ACCESS
000160 CFA8 F???      01934         MOVFF   EEDATA, PHASE_OFFSETL
                      01935         ;
000164 2AA9           01936         INCF    EEADR, F, ACCESS        ; EEPROM location 0x005: DMX slot MSB
000166 80A6           01937         BSF     EECON1, RD, ACCESS
000168 CFA8 F???      01938         MOVFF   EEDATA, DMX_SLOTH
                      01939         ;
00016C 2AA9           01940         INCF    EEADR, F, ACCESS        ; EEPROM location 0x006: DMX slot LSB
00016E 80A6           01941         BSF     EECON1, RD, ACCESS
000170 CFA8 F???      01942         MOVFF   EEDATA, DMX_SLOTL
000174 9C00           01943         BCF     DMX_SLOTH, DMX_SPEED, ACCESS    ; clear flag (we're not running at DMX speed yet)
                      01944         ;
000176 2AA9           01945         INCF    EEADR, F, ACCESS        ; EEPROM location 0x007: Sensor Configuration
                      01946         IF HAS_SENSORS
                      01947          BSF    EECON1, RD, ACCESS
                      01948          BTFSS  EEDATA, 3, ACCESS
                      01949          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      01950          BTFSS  EEDATA, 2, ACCESS
                      01951          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      01952          BTFSS  EEDATA, 1, ACCESS
                      01953          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      01954          BTFSS  EEDATA, 0, ACCESS
                      01955          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      01956         ENDIF
                      01957         ;
000178 6AA9           01958         CLRF    EEADR, ACCESS   ; Leave pointer at 0x000
                      01959         ;
                      01960         IF HAS_STATUS_LEDS
                      01961          BSF    PLAT_GREEN, BIT_GREEN, ACCESS   ; Panel: () G Y ()
                      01962         ENDIF
                      01963         ;
00017A 989F           01964         BCF     IPR1, TXIP, ACCESS      ; TxD interrupt = low priority
00017C 9A9F           01965         BCF     IPR1, RCIP, ACCESS      ; RxD interrupt = low priority
00017E 0004           01966         CLRWDT
                      01967         ;
                      01968         ; Initialize data structures
                      01969         ;
000180 6A00           01970         CLRF    SSR_STATE, ACCESS
000182 6A00           01971         CLRF    SSR_STATE2, ACCESS
000184 6A00           01972         CLRF    YY_STATE, ACCESS
                      01973         ;
000186 0E80           01974         MOVLW   .128
000188 6E00           01975         MOVWF   OPTION_DEBOUNCE, ACCESS
00018A 6A00           01976         CLRF    OPTION_HOLD, ACCESS
00018C 6800           01977         SETF    AUTO_OFF_CTRH, ACCESS
00018E 6800           01978         SETF    AUTO_OFF_CTRL, ACCESS
000190 0104           01979         BANKSEL SSR_DATA_BANK
  00000000            01980 CH      SET     0
                      01981         WHILE CH<=SSR_MAX
000192 6B00           01982          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
000194 6B00           01983          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
000196 6B00           01984          CLRF   SSR_00_STEP+0,      BANKED
000198 6B00           01985          CLRF   SSR_00_SPEED+0,      BANKED
00019A 6B00           01986          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            01987 CH       ++
00019C 6B00           01982          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
00019E 6B00           01983          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
0001A0 6B00           01984          CLRF   SSR_00_STEP+1,      BANKED
0001A2 6B00           01985          CLRF   SSR_00_SPEED+1,      BANKED
0001A4 6B00           01986          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            01987 CH       ++
0001A6 6B00           01982          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
0001A8 6B00           01983          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
0001AA 6B00           01984          CLRF   SSR_00_STEP+2,      BANKED
0001AC 6B00           01985          CLRF   SSR_00_SPEED+2,      BANKED
0001AE 6B00           01986          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            01987 CH       ++
0001B0 6B00           01982          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
0001B2 6B00           01983          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
0001B4 6B00           01984          CLRF   SSR_00_STEP+3,      BANKED
0001B6 6B00           01985          CLRF   SSR_00_SPEED+3,      BANKED
0001B8 6B00           01986          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            01987 CH       ++
0001BA 6B00           01982          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
0001BC 6B00           01983          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
0001BE 6B00           01984          CLRF   SSR_00_STEP+4,      BANKED
0001C0 6B00           01985          CLRF   SSR_00_SPEED+4,      BANKED
0001C2 6B00           01986          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            01987 CH       ++
0001C4 6B00           01982          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
0001C6 6B00           01983          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
0001C8 6B00           01984          CLRF   SSR_00_STEP+5,      BANKED
0001CA 6B00           01985          CLRF   SSR_00_SPEED+5,      BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001CC 6B00           01986          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            01987 CH       ++
0001CE 6B00           01982          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
0001D0 6B00           01983          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
0001D2 6B00           01984          CLRF   SSR_00_STEP+6,      BANKED
0001D4 6B00           01985          CLRF   SSR_00_SPEED+6,      BANKED
0001D6 6B00           01986          CLRF   SSR_00_COUNTER+6,      BANKED
  00000007            01987 CH       ++
0001D8 6B00           01982          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
0001DA 6B00           01983          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
0001DC 6B00           01984          CLRF   SSR_00_STEP+7,      BANKED
0001DE 6B00           01985          CLRF   SSR_00_SPEED+7,      BANKED
0001E0 6B00           01986          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            01987 CH       ++
0001E2 6B00           01982          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
0001E4 6B00           01983          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
0001E6 6B00           01984          CLRF   SSR_00_STEP+8,      BANKED
0001E8 6B00           01985          CLRF   SSR_00_SPEED+8,      BANKED
0001EA 6B00           01986          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            01987 CH       ++
0001EC 6B00           01982          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
0001EE 6B00           01983          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
0001F0 6B00           01984          CLRF   SSR_00_STEP+9,      BANKED
0001F2 6B00           01985          CLRF   SSR_00_SPEED+9,      BANKED
0001F4 6B00           01986          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            01987 CH       ++
0001F6 6B00           01982          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
0001F8 6B00           01983          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
0001FA 6B00           01984          CLRF   SSR_00_STEP+10,     BANKED
0001FC 6B00           01985          CLRF   SSR_00_SPEED+10,     BANKED
0001FE 6B00           01986          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            01987 CH       ++
000200 6B00           01982          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
000202 6B00           01983          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
000204 6B00           01984          CLRF   SSR_00_STEP+11,     BANKED
000206 6B00           01985          CLRF   SSR_00_SPEED+11,     BANKED
000208 6B00           01986          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            01987 CH       ++
00020A 6B00           01982          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
00020C 6B00           01983          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
00020E 6B00           01984          CLRF   SSR_00_STEP+12,     BANKED
000210 6B00           01985          CLRF   SSR_00_SPEED+12,     BANKED
000212 6B00           01986          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            01987 CH       ++
000214 6B00           01982          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
000216 6B00           01983          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
000218 6B00           01984          CLRF   SSR_00_STEP+13,     BANKED
00021A 6B00           01985          CLRF   SSR_00_SPEED+13,     BANKED
00021C 6B00           01986          CLRF   SSR_00_COUNTER+13,     BANKED
  0000000E            01987 CH       ++
00021E 6B00           01982          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
000220 6B00           01983          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
000222 6B00           01984          CLRF   SSR_00_STEP+14,     BANKED
000224 6B00           01985          CLRF   SSR_00_SPEED+14,     BANKED
000226 6B00           01986          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            01987 CH       ++
000228 6B00           01982          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
00022A 6B00           01983          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
00022C 6B00           01984          CLRF   SSR_00_STEP+15,     BANKED
00022E 6B00           01985          CLRF   SSR_00_SPEED+15,     BANKED
000230 6B00           01986          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            01987 CH       ++
000232 6B00           01982          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
000234 6B00           01983          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
000236 6B00           01984          CLRF   SSR_00_STEP+16,     BANKED
000238 6B00           01985          CLRF   SSR_00_SPEED+16,     BANKED
00023A 6B00           01986          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            01987 CH       ++
00023C 6B00           01982          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
00023E 6B00           01983          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
000240 6B00           01984          CLRF   SSR_00_STEP+17,     BANKED
000242 6B00           01985          CLRF   SSR_00_SPEED+17,     BANKED
000244 6B00           01986          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            01987 CH       ++
000246 6B00           01982          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
000248 6B00           01983          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
00024A 6B00           01984          CLRF   SSR_00_STEP+18,     BANKED
00024C 6B00           01985          CLRF   SSR_00_SPEED+18,     BANKED
00024E 6B00           01986          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            01987 CH       ++
000250 6B00           01982          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
000252 6B00           01983          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
000254 6B00           01984          CLRF   SSR_00_STEP+19,     BANKED
000256 6B00           01985          CLRF   SSR_00_SPEED+19,     BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000258 6B00           01986          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            01987 CH       ++
                      01988         ENDW
                      01989         IF HAS_STATUS_LEDS
                      01990          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G Y R
                      01991         ENDIF
                      01992         ;
                      01993         ; Timer 0 for non-ZC boards
                      01994         ;
                      01995         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
00025A 6AD7           01996          CLRF   TMR0H, ACCESS
00025C 6AD6           01997          CLRF   TMR0L, ACCESS
00025E 84F1           01998          BSF    INTCON2, TMR0IP, ACCESS ; set HIGH priority for timing
000260 8AF2           01999          BSF    INTCON, TMR0IE, ACCESS  ; enable timer 0 interrupts
000262 8ED5           02000          BSF    T0CON, TMR0ON, ACCESS   ; start timer 0 running
                      02001         ELSE
                      02002          IF LUMOS_SLICE_TIMER == LUMOS_ZC
                      02003           BSF   INTCON, INT0IE, ACCESS  ; enable ZC detect pin interrupt
                      02004          ELSE
                      02005           ERROR "LUMOS_SLICE_TIMER set incorrectly"
                      02006          ENDIF
                      02007         ENDIF
                      02008         IF HAS_STATUS_LEDS
                      02009          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () G () R
                      02010         ENDIF
                      02011         ;
                      02012         ; Timer 2 for half-wave slice timing
                      02013         ;
000264 0E9F           02014         MOVLW   SLICE_TMR_PERIOD        ; set timer period
000266 6ECB           02015         MOVWF   PR2, ACCESS
000268 6ACC           02016         CLRF    TMR2, ACCESS            ; reset timer
00026A 829F           02017         BSF     IPR1, TMR2IP, ACCESS    ; set HIGH priority for timing
00026C 929E           02018         BCF     PIR1, TMR2IF, ACCESS    ; clear any pending interrupt
00026E 829D           02019         BSF     PIE1, TMR2IE, ACCESS    ; enable timer 2 interrupts
000270 84CA           02020         BSF     T2CON, TMR2ON, ACCESS   ; start timer 2 running
                      02021         ;
000272 8A9D           02022         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts
                      02023         ;
                      02024         ; Clear all interrupt flags and enable interrupts
                      02025         ;
000274 6A9E           02026         CLRF    PIR1, ACCESS
000276 6AA1           02027         CLRF    PIR2, ACCESS
000278 6AA4           02028         CLRF    PIR3, ACCESS
00027A 94F2           02029         BCF     INTCON, TMR0IF, ACCESS
00027C 92F2           02030         BCF     INTCON, INT0IF, ACCESS
00027E 8EF2           02031         BSF     INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000280 8CF2           02032         BSF     INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02033         ;
                      02034         ; Check for factory reset jumper
                      02035         ;  (short J11 pins 4 and 5, then power up device [or press reset].  When 
                      02036         ;  all lights flash, pull the jumper away. device will restore factory 
                      02037         ;  settings.)
                      02038         ;                                                            ______
                      02039         ; With the jumper in place, the OPTION input will follow the PWRCTL output.
                      02040         ; If they start off unequal, we skip this check and don't disturb the power
                      02041         ; supply logic at all.  Otherwise, we will flip our output a couple of times
                      02042         ; and see that OPTION keeps pace, which indicates that the jumper is there.
                      02043         ; we'll wait for the jumper to be pulled to avoid an infinite loop of resets,
                      02044         ; and also to provide a way out (power off first and no reset will have happened).
                      02045         ;
000282 0004           02046         CLRWDT
                      02047         IF HAS_POWER_CTRL
                      02048          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; turn on power supply
                      02049         ENDIF
000284                02050 FACTORY_RESET_JUMPER_CHECK:
                      02051         IF HAS_OPTION
                      02052          RCALL  DELAY_1_12_SEC
                      02053          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS
                      02054          BRA    END_FRJC                        ; OPTION button not jumpered, boot normally
                      02055 
                      02056          CLRWDT                                 
                      02057          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping the output bit
                      02058          RCALL  DELAY_1_12_SEC
                      02059          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS ; OPTION was down, but not because of the 
                      02060          BRA    END_FRJC                        ; jumper--boot normally
                      02061 
                      02062          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping back
                      02063          RCALL  DELAY_1_12_SEC
                      02064          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS 
                      02065          BRA    END_FRJC                        
                      02066 
                      02067          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping back last time
                      02068          RCALL  DELAY_1_12_SEC
                      02069          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02070          BRA    END_FRJC                        
                      02071 
                      02072         ;
                      02073         ; After perhaps a bit too much caution, we're convinced there's a jumper there.
                      02074         ; wait for it to go away now, then do the reset.
                      02075         ;                                         ______                ______
                      02076          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; PWRCTL low, watch for PWR_ON->1
                      02077 FRJC_LOOP:
                      02078          CLRWDT
                      02079          BTG    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02080          BTG    PLAT_GREEN, BIT_GREEN, ACCESS
                      02081          BTG    PLAT_RED, BIT_RED, ACCESS       
                      02082          IF HAS_ACTIVE
                      02083           BTG   PLAT_ACTIVE, BIT_ACTIVE, ACCESS 
                      02084          ENDIF
                      02085          RCALL  DELAY_1_12_SEC
                      02086          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS
                      02087          BRA    FRJC_LOOP
                      02088          GOTO   FACTORY_RESET
                      02089         ENDIF
                      02090         
000284                02091 END_FRJC:
                      02092         IF QSCC_PORT
000284 EC?? F???      02093          CALL   QSCC_START
                      02094         ENDIF
                      02095         ;
                      02096         ; Launch mainline code
                      02097         ;
000288 0104           02098         BANKSEL SSR_DATA_BANK
                      02099         IF HAS_STATUS_LEDS
                      02100          BCF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G () ()
                      02101          CLRF   SSR_00_VALUE+SSR_GREEN, BANKED  ; Green light cycles ~ 1/4 Hz
                      02102          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      02103          SET_SSR_NORMAL_MODE SSR_GREEN
                      02104         ENDIF
                      02105         ;       
                      02106         ; If we're in DMX mode, change our baud rate to 250,000 bps
                      02107         ;
00028A AE00           02108         BTFSS   DMX_SLOTH, DMX_EN, ACCESS
00028C EF?? F???      02109         GOTO    MAIN
000290 0E0A           02110         MOVLW   SIO_250000
000292 EC?? F???      02111         CALL    SIO_SET_BAUD_W
000296 8C00           02112         BSF     DMX_SLOTH, DMX_SPEED, ACCESS
                      02113         IF HAS_STATUS_LEDS
                      02114          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      02115          SET_SSR_DMX_MODE SSR_GREEN
                      02116         ENDIF
000298 EF?? F???      02117         GOTO    MAIN
                      02118 
                      02119 BEGIN_EEPROM_READ MACRO START_ADDR
                      02120          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02121          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02122          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02123          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02124          BCF    EECON1, CFGS, ACCESS
                      02125          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02126         ENDM
                      02127 
                      02128 BEGIN_EEPROM_WRITE MACRO START_ADDR
                      02129          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02130          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02131          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02132          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02133          BCF    EECON1, CFGS, ACCESS
                      02134          BSF    EECON1, WREN, ACCESS    ; enable writing
                      02135         ENDM
                      02136 
                      02137 END_EEPROM_READ MACRO                   ; THIS CANNOT CHANGE WREG
                      02138          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02139          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02140          CLRF   EEADRH, ACCESS
                      02141          CLRF   EEADR, ACCESS
                      02142         ENDM
                      02143         
                      02144 END_EEPROM_WRITE MACRO
                      02145          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02146          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02147          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02148          CLRF   EEADRH, ACCESS
                      02149          CLRF   EEADR, ACCESS
                      02150         ENDM
                      02151 
                      02152 SET_EEPROM_ADDRESS MACRO ADDR
                      02153          MOVLW  HIGH(ADDR)              ; NOTE interrupts need to be OFF here!
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02154          MOVWF  EEADRH, ACCESS
                      02155          MOVLW  LOW(ADDR)
                      02156          MOVWF  EEADR, ACCESS
                      02157         ENDM
                      02158 
  00000000            02159 EE_LL_XX    SET 0
                      02160 WRITE_EEPROM_DATA MACRO
                      02161          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02162          MOVLW  0x55
                      02163          MOVWF  EECON2, ACCESS
                      02164          MOVLW  0xAA
                      02165          MOVWF  EECON2, ACCESS
                      02166          BSF    EECON1, WR, ACCESS      ; start write cycle
                      02167 WRITE_EEPROM_LOOP#v(EE_LL_XX):
                      02168          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
                      02169          BRA    WRITE_EEPROM_LOOP#v(EE_LL_XX)
                      02170          CLRWDT
                      02171          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02172 EE_LL_XX    ++
                      02173         ENDM
                      02174 
                      02175 WRITE_EEPROM_DATA_INC MACRO
                      02176         WRITE_EEPROM_DATA
                      02177         INCF    EEADR, F, ACCESS
                      02178         ENDM
                      02179 
                      02180 WRITE_EEPROM_DATA_W MACRO
                      02181         MOVWF   EEDATA, ACCESS
                      02182         WRITE_EEPROM_DATA
                      02183         ENDM
                      02184 
                      02185 WRITE_EEPROM_DATA_W_INC MACRO
                      02186         WRITE_EEPROM_DATA_W
                      02187         INCF    EEADR, F, ACCESS
                      02188         ENDM
                      02189 
                      02190 READ_EEPROM_DATA MACRO
                      02191         BSF     EECON1, RD, ACCESS
                      02192         ENDM
                      02193 
                      02194 READ_EEPROM_DATA_REG MACRO REGISTER
                      02195         READ_EEPROM_DATA
                      02196         MOVFF   EEDATA, REGISTER
                      02197         ENDM
                      02198 
                      02199 READ_EEPROM_DATA_W MACRO
                      02200         READ_EEPROM_DATA
                      02201         MOVFF   EEDATA, WREG
                      02202         ENDM
                      02203 
                      02204 READ_EEPROM_DATA_W_INC MACRO
                      02205         READ_EEPROM_DATA_W
                      02206         INCF    EEADR, F, ACCESS
                      02207         ENDM
                      02208         
00029C                02209 FACTORY_RESET:
00029C 0004           02210         CLRWDT
                      02211         ;
                      02212         ; write default configuration to EEPROM
                      02213         ;
                      02214         BEGIN_EEPROM_WRITE EE_START
00029E 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
0002A0 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_START    ; NOTE interrupts need to be OFF here!
0002A2 0E00               M          MOVLW  HIGH(EE_START)          ; NOTE interrupts need to be OFF here!
0002A4 6EAA               M          MOVWF  EEADRH, ACCESS
0002A6 0E00               M          MOVLW  LOW(EE_START)
0002A8 6EA9               M          MOVWF  EEADR, ACCESS
0002AA 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
0002AC 9CA6               M          BCF    EECON1, CFGS, ACCESS
0002AE 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
0002B0 0E??           02215         MOVLW   UPPER(DEFAULT_TBL)      ; load lookup table pointer
0002B2 6EF8           02216         MOVWF   TBLPTRU, ACCESS
0002B4 0E??           02217         MOVLW   HIGH(DEFAULT_TBL)
0002B6 6EF7           02218         MOVWF   TBLPTRH, ACCESS
0002B8 0E??           02219         MOVLW   LOW(DEFAULT_TBL)
0002BA 6EF6           02220         MOVWF   TBLPTR, ACCESS
                      02221 
0002BC 0E10           02222         MOVLW   EEPROM_SETTINGS_LEN
0002BE 6E00           02223         MOVWF   I, ACCESS
                      02224 
0002C0                02225 FACTORY_RESET_LOOP:
0002C0 0009           02226         TBLRD   *+                      ; byte -> TABLAT
0002C2 CFF5 FFA8      02227         MOVFF   TABLAT, EEDATA
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02228         IF HAS_STATUS_LEDS
                      02229          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y R
                      02230         ENDIF
                      02231         WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
0002C6 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
0002C8 0E55               M          MOVLW  0x55
0002CA 6EA7               M          MOVWF  EECON2, ACCESS
0002CC 0EAA               M          MOVLW  0xAA
0002CE 6EA7               M          MOVWF  EECON2, ACCESS
0002D0 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
0002D2                    M WRITE_EEPROM_LOOP0:
0002D2 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
0002D4 D???               M          BRA    WRITE_EEPROM_LOOP0
0002D6 0004               M          CLRWDT
0002D8 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000001                M EE_LL_XX    ++
0002DA 2AA9               M         INCF    EEADR, F, ACCESS
                      02232         IF HAS_STATUS_LEDS
                      02233          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () () R
                      02234         ENDIF
                      02235 
0002DC 2E00           02236         DECFSZ  I, F, ACCESS
0002DE D???           02237         BRA     FACTORY_RESET_LOOP
                      02238         END_EEPROM_WRITE
0002E0 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
0002E2 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
0002E4 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
0002E6 6AAA               M          CLRF   EEADRH, ACCESS
0002E8 6AA9               M          CLRF   EEADR, ACCESS
                      02239 
0002EA 0E10           02240         MOVLW   .16
0002EC 6E00           02241         MOVWF   I, ACCESS
                      02242 
0002EE 0004           02243         CLRWDT
0002F0 9EF2           02244         BCF     INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
0002F2 9CF2           02245         BCF     INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02246 
0002F4                02247 FACTORY_RESET_FLASH:
                      02248         IF HAS_STATUS_LEDS
                      02249          IF HAS_ACTIVE
                      02250           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: A G Y R
                      02251          ENDIF
                      02252          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02253          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02254          BSF    PLAT_RED, BIT_RED, ACCESS
                      02255          RCALL  DELAY_1_12_SEC
                      02256          IF HAS_ACTIVE
                      02257           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: () () () ()
                      02258          ENDIF
                      02259          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02260          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02261          BCF    PLAT_RED, BIT_RED, ACCESS
                      02262          RCALL  DELAY_1_6_SEC
                      02263          DECFSZ I, F, ACCESS
                      02264          BRA    FACTORY_RESET_FLASH
                      02265         ENDIF
0002F4 00FF           02266         RESET
                      02267 
0002F6                02268 DELAY_1_12_SEC: ; Approx 1/12 sec delay loop
0002F6 0004           02269         CLRWDT
0002F8 0E04           02270         MOVLW   .4
0002FA 6E00           02271         MOVWF   KK, ACCESS
0002FC D???           02272         BRA     D_1_6_KK
                      02273 
0002FE                02274 DELAY_1_6_SEC:  ; Approx 1/6 sec delay loop
0002FE 0004           02275         CLRWDT
000300 0E08           02276         MOVLW   .8
000302 6E00           02277         MOVWF   KK, ACCESS
000304                02278 D_1_6_KK:
000304 6800           02279         SETF    J, ACCESS
000306                02280 D_1_6_J:
000306 6800           02281         SETF    K, ACCESS
000308                02282 D_1_6_K:
000308 2E00           02283         DECFSZ  K, F, ACCESS
00030A D???           02284         BRA     D_1_6_K
00030C 2E00           02285         DECFSZ  J, F, ACCESS
00030E D???           02286         BRA     D_1_6_J
000310 2E00           02287         DECFSZ  KK, F, ACCESS
000312 D???           02288         BRA     D_1_6_KK
000314 0012           02289         RETURN
                      02290 
                      02291 ;==============================================================================
                      02292 ; INTERRUPT HANDLERS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02293 ;______________________________________________________________________________
                      02294 _INT    CODE
000000                02295 INT_LOW:
000000 6E00           02296         MOVWF   ISR_TMPL_WREG, ACCESS   ; Save W, status, and bank registers
000002 CFD8 F???      02297         MOVFF   STATUS, ISR_TMPL_STATUS
000006 CFE0 F???      02298         MOVFF   BSR, ISR_TMPL_BSR
                      02299         ;
                      02300         ; Serial I/O ready for transmit?
                      02301         ;
00000A                02302 INT_TX:
00000A A89E           02303         BTFSS   PIR1, TXIF, ACCESS
00000C D???           02304         BRA     INT_TX_END
00000E EC?? F???      02305         CALL    SIO_SEND                ; push next byte out
000012 989E           02306         BCF     PIR1, TXIF, ACCESS      ; acknowledge interrupt
000014                02307 INT_TX_END:
                      02308         ;
                      02309         ; Serial I/O received a byte?
                      02310         ;
000014                02311 INT_RX:
000014 AA9E           02312         BTFSS   PIR1, RCIF, ACCESS
000016 D???           02313         BRA     INT_RX_END
000018 EC?? F???      02314         CALL    SIO_RECV                ; grab next byte
00001C 9A9E           02315         BCF     PIR1, RCIF, ACCESS      ; acknowledge interrupt
00001E                02316 INT_RX_END:
                      02317         ;
                      02318         ; Finished with low-priority interrupts.
                      02319         ; Clean up and go home.
                      02320         ;
00001E C??? FFE0      02321         MOVFF   ISR_TMPL_BSR, BSR
000022 5000           02322         MOVF    ISR_TMPL_WREG, W, ACCESS
000024 C??? FFD8      02323         MOVFF   ISR_TMPL_STATUS, STATUS
000028 0010           02324         RETFIE
                      02325 
00002A                02326 INT_HIGH:
                      02327         ; High-priority interrupts automatically
                      02328         ; save state (fast interrupt call)
                      02329         ;
                      02330         ; Zero-crossing start-of-cycle event signal
                      02331         ;
00002A                02332 INT_ZC:
                      02333         IF LUMOS_SLICE_TIMER==LUMOS_ZC
                      02334          BTFSS  INTCON, INT0IF, ACCESS  ; ZC signal asserted?
                      02335          BRA    INT_ZC_END              ; no, move along...
                      02336          BCF    INTCON, INT0IF, ACCESS  ; acknowledge interrupt
                      02337         ELSE
                      02338          IF LUMOS_SLICE_TIMER==LUMOS_INTERNAL
00002A A4F2           02339           BTFSS INTCON, TMR0IF, ACCESS  ; 120 Hz timer expired?
00002C D???           02340           BRA   INT_ZC_END              ; no, move along...
00002E 0E5D           02341           MOVLW HIGH(CYCLE_TMR_PERIOD)  ; reset timer for another 1/120 sec.
000030 6ED7           02342           MOVWF TMR0H, ACCESS
000032 0E3D           02343           MOVLW LOW(CYCLE_TMR_PERIOD)
000034 6ED6           02344           MOVWF TMR0L, ACCESS
000036 94F2           02345           BCF   INTCON, TMR0IF, ACCESS  ; acknowledge interrupt
                      02346          ELSE
                      02347           ERROR "LUMOS_SLICE_TIMER not set correctly"
                      02348          ENDIF
                      02349         ENDIF
000038 8C00           02350         BSF     SSR_STATE, PRECYC, ACCESS       ; mark start of pre-cycle countdown
00003A 8C00           02351         BSF     SSR_STATE2, TEST_UPD, ACCESS    ; time for next test-mode countdown
00003C C??? F???      02352         MOVFF   PHASE_OFFSETH, CUR_PREH
000040 C??? F???      02353         MOVFF   PHASE_OFFSETL, CUR_PRE
                      02354         ;
                      02355         ; handle OPTION button
                      02356         ; increment hold counter if we see it pressed, decrement if not.
                      02357         ;
                      02358         IF HAS_OPTION
                      02359          COMF   OPTION_DEBOUNCE, W, ACCESS      ; button fully on?
                      02360          BZ     INT_ZC_OPTION_ON
                      02361          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; button fully off?
                      02362          BRA    INT_ZC_OPTION_UNDEFINED
                      02363 INT_ZC_OPTION_OFF:
                      02364          TSTFSZ OPTION_HOLD, ACCESS             ; unless already at zero,
                      02365          DECF   OPTION_HOLD, F, ACCESS          ; decrement counter
                      02366          BRA    INT_ZC_END_OPTION
                      02367 INT_ZC_OPTION_ON:
                      02368          INFSNZ OPTION_HOLD, F, ACCESS          ; increment counter
                      02369          SETF   OPTION_HOLD, ACCESS             ; but don't let it overflow
                      02370 INT_ZC_OPTION_UNDEFINED:
                      02371          ; If the button is still floating between on and off, don't
                      02372          ; count it yet.  It needs to stay on or off for a while before
                      02373          ; we count it toward the hold time.
                      02374 INT_ZC_END_OPTION:
                      02375         ENDIF
000044                02376 INT_ZC_END:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02377         ;
                      02378         ; Start of cycle slice signal
                      02379         ;
000044                02380 INT_TMR2:
000044 A29E           02381         BTFSS   PIR1, TMR2IF, ACCESS            ; has timer expired?
000046 D???           02382         BRA     INT_TMR2_END                    ; no, move along...
                      02383         ;
                      02384         ; debounce OPTION button
                      02385         ;
                      02386         IF HAS_OPTION
                      02387          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS ; is option button triggered? (active-low)
                      02388          BRA    INT_OPTION_OFF                  
                      02389 INT_OPTION_ON:
                      02390          INFSNZ OPTION_DEBOUNCE, F, ACCESS      ; increment bounce counter
                      02391          SETF   OPTION_DEBOUNCE, ACCESS         ; but not too far - don't overflow
                      02392          BRA    INT_OPTION_END
                      02393 INT_OPTION_OFF:
                      02394          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; if not already at zero,
                      02395          DECF   OPTION_DEBOUNCE, F, ACCESS      ; decrement counter
                      02396 INT_OPTION_END:
                      02397         ENDIF
                      02398         ;
                      02399         ; rest of cycle timing code
                      02400         ;
000048 AC00           02401         BTFSS   SSR_STATE, PRECYC, ACCESS       ; are we in pre-cycle countdown?
00004A D???           02402         BRA     INT_TMR2_NEXT                   ; no, signal next update run
00004C 2E00           02403         DECFSZ  CUR_PRE, F, ACCESS              ; count down
00004E D???           02404         BRA     INT_TMR2_DONE
000050 6600           02405         TSTFSZ  CUR_PREH, ACCESS                ; high-order byte
000052 D???           02406         BRA     INT_TMR2_MSB
000054 9C00           02407         BCF     SSR_STATE, PRECYC, ACCESS       ; END pre-cycle
000056 8E00           02408         BSF     SSR_STATE, INCYC, ACCESS        ; BEGIN active cycle
000058 6800           02409         SETF    CUR_SLICE, ACCESS               ; initial slice value 0xFF (will count down to 0x00)
00005A                02410 INT_TMR2_NEXT:
00005A BE00           02411         BTFSC   SSR_STATE, INCYC, ACCESS        ; if we're in active dimmer cycle now,
00005C 8A00           02412         BSF     SSR_STATE, SLICE_UPD, ACCESS    ; then signal next update run
00005E                02413 INT_TMR2_DONE:
00005E 929E           02414         BCF     PIR1, TMR2IF, ACCESS            ; acknowledge interrrupt
000060                02415 INT_TMR2_END:
                      02416 
000060 0011           02417         RETFIE  FAST
                      02418 
000062                02419 INT_TMR2_MSB:
000062 0600           02420         DECF    CUR_PREH, F, ACCESS             ; tick down MSB, start another loop
000064 6800           02421         SETF    CUR_PRE, ACCESS
000066 D???           02422         BRA     INT_TMR2_DONE
                      02423 
                      02424 ;==============================================================================
                      02425 ; ACCESS DATA BANK
                      02426 ;______________________________________________________________________________
                      02427 _ADATA  UDATA_ACS       0x000
000000                02428 ISR_TMPL_STATUS RES     1
000001                02429 ISR_TMPL_BSR    RES     1
000002                02430 ISR_TMPL_WREG   RES     1
                      02431 ;ISR_TMPH_STATUS        RES     1
                      02432 ;ISR_TMPH_BSR   RES     1
                      02433 ;ISR_TMPH_WREG  RES     1
000003                02434 MY_ADDRESS      RES     1
000004                02435 PHASE_OFFSETH   RES     1
000005                02436 PHASE_OFFSETL   RES     1
000006                02437 SSR_STATE       RES     1               ; major state/timing flags
000007                02438 SSR_STATE2      RES     1               ; major state/timing flags
000008                02439 DMX_SLOTH       RES     1
000009                02440 DMX_SLOTL       RES     1
00000A                02441 YY_STATE        RES     1
00000B                02442 YY_COMMAND      RES     1
00000C                02443 YY_CMD_FLAGS    RES     1
00000D                02444 YY_DATA         RES     1
00000E                02445 YY_LOOKAHEAD_MAX RES    1
00000F                02446 YY_LOOK_FOR     RES     1
000010                02447 YY_BUF_IDX      RES     1
000011                02448 YY_NEXT_STATE   RES     1
000012                02449 YY_YY           RES     1
000013                02450 LAST_ERROR      RES     1
000014                02451 CUR_PREH        RES     1
000015                02452 CUR_PRE         RES     1
000016                02453 CUR_SLICE       RES     1
000017                02454 TARGET_SSR      RES     1
000018                02455 OPTION_DEBOUNCE RES     1
000019                02456 OPTION_HOLD     RES     1
00001A                02457 TEST_CYCLE      RES     1
00001B                02458 TEST_SSR        RES     1
00001C                02459 AUTO_OFF_CTRH   RES     1
00001D                02460 AUTO_OFF_CTRL   RES     1
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00001E                02461 EIGHTBITSIOBUF  RES     1               ; buffer for 8-bit data adjustments
00001F                02462 I               RES     1
000020                02463 J               RES     1
000021                02464 K               RES     1
000022                02465 KK              RES     1
000023                02466 TR_I            RES     1
                      02467 ;                      --
                      02468 ;                      35
                      02469 
                      02470 ;==============================================================================
                      02471 ; DATA BANK 4
                      02472 ;______________________________________________________________________________
                      02473 
                      02474 _SSR_DATA       UDATA   SSR_DATA_BANK
                      02475 ;
                      02476 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      02477 ; and in fact, that size must be SSR_BLOCK_LEN.  THEY MUST ALSO be
                      02478 ; in this order, due to some optimizations that occur in the code.
                      02479 ;
  00000014            02480 SSR_BLOCK_LEN   EQU     SSR_MAX+1
000400                02481 SSR_00_VALUE    RES     SSR_BLOCK_LEN   ; each SSR value 0x00-FF
000414                02482 SSR_00_FLAGS    RES     SSR_BLOCK_LEN
000428                02483 SSR_00_STEP     RES     SSR_BLOCK_LEN
00043C                02484 SSR_00_SPEED    RES     SSR_BLOCK_LEN
000450                02485 SSR_00_COUNTER  RES     SSR_BLOCK_LEN
                      02486 
                      02487 ;==============================================================================
                      02488 ; DATA BANK 5: MAIN CODE DATA STORAGE
                      02489 ;______________________________________________________________________________
                      02490 _MAINDATA       UDATA   MAIN_DATA
000500                02491 YY_BUFFER       RES     YY_BUF_LEN
                      02492 
                      02493 ;==============================================================================
                      02494 ; DATA BANKS 6-: SEQUENCE STORAGE
                      02495 ;______________________________________________________________________________
  00000600            02496 SEQ_DATA        EQU     0x600                   ; XXX NOT on 14K50!!!
                      02497 _SEQ_DATA       UDATA   SEQ_DATA
                      02498 
                      02499 ;==============================================================================
                      02500 ; MAINLINE CODE
                      02501 ;______________________________________________________________________________
                      02502 _MAIN   CODE    0x0800
000800                02503 MAIN:
000800 0004           02504         CLRWDT
                      02505         IF QSCC_PORT
000802 EC?? F???      02506          CALL   QSCC_MAIN
                      02507         ENDIF
                      02508 
000806 0004           02509         CLRWDT
000808 BA00           02510         BTFSC   SSR_STATE, SLICE_UPD, ACCESS
00080A EC?? F???      02511         CALL    UPDATE_SSR_OUTPUTS
                      02512 
                      02513         ; DMX mode: poll for framing error to start DMX frame reception
00080E AE00           02514         BTFSS   DMX_SLOTH, DMX_EN, ACCESS
000810 D???           02515         BRA     NOT_DMX
000812 0103           02516         BANKSEL SIO_DATA_START
000814 AB00           02517         BTFSS   SIO_STATUS, SIO_FERR, BANKED    ; Did SIO code find a framing error first?
000816 D???           02518         BRA     BRK_DET2                        ; No, check ourselves then
                      02519         IF HAS_ACTIVE
                      02520          SET_SSR_BLINK_FADE SSR_ACTIVE
                      02521         ENDIF
000818 EC?? F???      02522         CALL    SIO_GETCHAR                     ; Yes, then read the byte we received
00081C 6700           02523         TSTFSZ  SIO_INPUT, BANKED               ; ...  is the received byte all zeroes?
00081E D???           02524         BRA     NOT_DMX                         ; No, must not really be a break then
000820 0103           02525         BANKSEL SIO_DATA_START
000822 9B00           02526         BCF     SIO_STATUS, SIO_FERR, BANKED    ; Yes: clear the status and proceed
000824 D???           02527         BRA     BRK_DET
000826                02528 BRK_DET2:
000826 A4AB           02529         BTFSS   RCSTA, FERR, ACCESS
000828 D???           02530         BRA     NOT_DMX
                      02531         ; found framing error -- is it a break?
                      02532         IF HAS_ACTIVE
                      02533          SET_SSR_BLINK_FADE SSR_ACTIVE
                      02534         ENDIF
00082A 50AE           02535         MOVF    RCREG, W, ACCESS        ; read byte, clear FERR, see if data all zeroes
00082C E1??           02536         BNZ     NOT_DMX                 ; no, must be line noise, carry on...
00082E                02537 BRK_DET:
                      02538         ;
                      02539         ; BREAK DETECTED
                      02540         ;
                      02541         ; Now we start counting while we watch the RxD line for the 0->1 transition
                      02542         ; If it took <56uS, we'll interpret it as noise.  Otherwise, it's a break and
                      02543         ; the start of our DMX frame.  As a safety measure, if the break lasts longer
                      02544         ; than ~8,000uS, we abandon the frame.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02545         ; 
                      02546         IF HAS_STATUS_LEDS
                      02547          SET_SSR_BLINK_FADE SSR_YELLOW
                      02548         ENDIF
00082E 9A9D           02549         BCF     PIE1, RCIE, ACCESS      ; Disable RxD interrupts for now
000830 0EE0           02550         MOVLW   0xE0
000832 6EB3           02551         MOVWF   TMR3H, ACCESS
000834 0EC7           02552         MOVLW   0xC7
000836 6EB2           02553         MOVWF   TMR3L, ACCESS           ; $E0C7 is 7,992 away from overflowing and 56 away
                      02554                                         ; from overflowing the LSB
000838 92A1           02555         BCF     PIR2, TMR3IF, ACCESS    ; Clear overflow status bit
00083A 92A0           02556         BCF     PIE2, TMR3IE, ACCESS    ; Don't use as interrupt
00083C 80B1           02557         BSF     T3CON, TMR3ON, ACCESS   ; Start Timer 3 Running
                      02558         ;
                      02559         ; Watch the RxD line for a transition away from the break
                      02560         ;
00083E                02561 WATCH_BREAK:
00083E 0004           02562         CLRWDT
000840 BA00           02563         BTFSC   SSR_STATE, SLICE_UPD, ACCESS    ; keep updating SSR outputs during this
000842 EC?? F???      02564         CALL    UPDATE_SSR_OUTPUTS
000846 BE82           02565         BTFSC   PORT_RX, BIT_RX, ACCESS ; Is the line 0?
000848 D???           02566         BRA     BREAK_CONFIRMED
00084A A2A1           02567         BTFSS   PIR2, TMR3IF, ACCESS    ; Did we exceed our limit?
00084C D???           02568         BRA     WATCH_BREAK
                      02569         ;
                      02570         ; We've been holding too long, give up on the break signal.
                      02571         ; 
00084E 90B1           02572         BCF     T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
000850 8A9D           02573         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
000852 D???           02574         BRA     BAD_BREAK
                      02575 
000854                02576 BREAK_CONFIRMED:
                      02577         ;
                      02578         ; Break over, reset UART and interpret frame
                      02579         ;
                      02580         IF HAS_STATUS_LEDS
                      02581          SET_SSR_BLINK_FADE SSR_RED
                      02582         ENDIF
000854 90B1           02583         BCF     T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
000856 8A9D           02584         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
000858 98AB           02585         BCF     RCSTA, CREN, ACCESS
00085A 88AB           02586         BSF     RCSTA, CREN, ACCESS
00085C 0EE0           02587         MOVLW   0xE0
00085E 50B2           02588         MOVF    TMR3L, W, ACCESS        ; Initiate 16-bit read of TMR3 register
000860 62B3           02589         CPFSEQ  TMR3H, ACCESS           ; If MSB of Timer3 advanced, it was >56uS
000862 D???           02590         BRA     START_DMX_FRAME         ; and therefore the start of the frame
                      02591         ;                               ; If not, it's noise and we interpret as "NOT_DMX"
                      02592         ;        | |
                      02593         ;       _| |_
                      02594         ;       \   /
                      02595         ;        \ /
                      02596         ;         V
000864                02597 NOT_DMX:
000864 0103           02598         BANKSEL SIO_DATA_START
000866 BB00           02599         BTFSC   SIO_STATUS, SIO_FERR, BANKED
000868                02600 BAD_BREAK:
000868 D???           02601         RCALL   ERR_SERIAL_FRAMING
                      02602 
00086A 0103           02603         BANKSEL SIO_DATA_START
00086C B900           02604         BTFSC   SIO_STATUS, SIO_ORUN, BANKED
00086E D???           02605         RCALL   ERR_SERIAL_OVERRUN
                      02606 
000870 0103           02607         BANKSEL SIO_DATA_START
000872 B700           02608         BTFSC   SIO_STATUS, RXDATA_FULL, BANKED
000874 D???           02609         RCALL   ERR_SERIAL_FULL
                      02610 
000876 0103           02611         BANKSEL SIO_DATA_START
000878 A300           02612         BTFSS   SIO_STATUS, RXDATA_QUEUE, BANKED
00087A D???           02613         BRA     END_SERIAL_READ
00087C B000           02614         BTFSC   SSR_STATE, TEST_MODE, ACCESS
00087E D???           02615         BRA     TEST_MODE_BYPASS
000880 D???           02616         RCALL   RECEIVE_COMMAND
000882 D???           02617         BRA     END_SERIAL_READ
000884                02618 TEST_MODE_BYPASS:
000884 EC?? F???      02619         CALL    SIO_READ                ; read and discard input while in test mode
000888                02620 END_SERIAL_READ:
                      02621 
000888 B400           02622         BTFSC   SSR_STATE, DRAIN_TR, ACCESS
00088A D???           02623         RCALL   DRAIN_TRANSMITTER
                      02624 
00088C B000           02625         BTFSC   SSR_STATE, TEST_MODE, ACCESS
00088E D???           02626         RCALL   DO_TEST_MODE
                      02627 
                      02628         IF HAS_OPTION
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02629 OPTION_HANDLER:
                      02630          BTFSS  SSR_STATE, PRIV_MODE, ACCESS            ; are we in privileged mode?
                      02631          BRA    OPTION_PRE_PRIV                         ; no, check if we're in pre-priv...
                      02632                                                         ; ----------------------------------------------
                            ---PRIV_MODE
                      02633          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; PRIV_MODE+PRE_PRIV: transitioning to TEST mode
                      02634          BRA    OPTION_PRIV_MODE                        ; just PRIV_MODE: skip down a bit...
                      02635          TSTFSZ OPTION_DEBOUNCE, ACCESS                 ; has button released yet?
                      02636          BRA    END_OPTION_HANDLER                      ; no, keep waiting
                      02637          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; yes: move to test mode now
                      02638          BSF    SSR_STATE, TEST_MODE, ACCESS
                      02639          MOVLW  .120
                      02640          MOVWF  TEST_CYCLE, ACCESS
                      02641          SETF   TEST_SSR, ACCESS                        ; initialize ssr index
                      02642          CLRF   OPTION_HOLD, ACCESS
                      02643          IF HAS_STATUS_LEDS
                      02644           IF HAS_ACTIVE
                      02645            SET_SSR_OFF SSR_ACTIVE
                      02646           ENDIF
                      02647           SET_SSR_OFF SSR_GREEN
                      02648           SET_SSR_OFF SSR_YELLOW
                      02649           SET_SSR_OFF SSR_RED
                      02650          ENDIF
                      02651          IF ROLE_MASTER
                      02652           MOVLW 0xF0                                    ; send to slave chip: F0 21 00000000 00000000
                      02653           CALL  SIO_WRITE_W                             ; (all LEDs off)
                      02654           MOVLW 0x21
                      02655           CALL  SIO_WRITE_W
                      02656           MOVLW 0x00
                      02657           CALL  SIO_WRITE_W
                      02658           MOVLW 0x00
                      02659           CALL  SIO_WRITE_W
                      02660          ENDIF
                      02661          RCALL  S0_CMD0                                 ; blackout all SSR outputs
                      02662          BRA    END_OPTION_HANDLER
                      02663 
                      02664 OPTION_PRIV_MODE:
                      02665          COMF   OPTION_HOLD, W, ACCESS                  ; is option pressed ~2s?
                      02666          BNZ    END_OPTION_HANDLER                      ; no
                      02667          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; set PRE_PRIV (wait for button release)
                      02668          BRA    END_OPTION_HANDLER
                      02669 
                      02670 OPTION_PRE_PRIV:                                        
                      02671          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; are we in pre-priv state?
                      02672          BRA    OPTION_NORMAL                           ; no, must be normal operating mode.
                      02673          TSTFSZ OPTION_HOLD, ACCESS                     ; ----------------------------------------------
                            ----PRE_PRIV
                      02674          BRA    END_OPTION_HANDLER                      ; wait for button to be released ~2s
                      02675          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; move to privileged run mode
                      02676          BTFSC  SSR_STATE2, PRIV_FORBID, ACCESS         ; unless we have privileges locked out now...
                      02677          BRA    END_OPTION_HANDLER
                      02678          BSF    SSR_STATE, PRIV_MODE, ACCESS            ; turn on privileged mode
                      02679          IF HAS_STATUS_LEDS
                      02680           IF HAS_ACTIVE
                      02681            SET_SSR_BLINK_FADE SSR_ACTIVE
                      02682           ENDIF
                      02683           SET_SSR_BLINK_FADE SSR_YELLOW
                      02684           SET_SSR_BLINK_FADE SSR_RED
                      02685          ENDIF
                      02686          IF ROLE_MASTER
                      02687           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101000 00000000
                      02688           CALL  SIO_WRITE_W                             ; (rapid flash green, others off)
                      02689           MOVLW 0x21
                      02690           CALL  SIO_WRITE_W
                      02691           MOVLW 0x28
                      02692           CALL  SIO_WRITE_W
                      02693           MOVLW 0x00
                      02694           CALL  SIO_WRITE_W
                      02695          ENDIF
                      02696          CALL   DMX_EXIT_TEMPORARILY
                      02697          BRA END_OPTION_HANDLER
                      02698 
                      02699 OPTION_NORMAL:                                          ; ----------------------------------------------
                            ------NORMAL
                      02700          COMF   OPTION_HOLD, W, ACCESS                  ; has option been held full time?
                      02701          BNZ    END_OPTION_HANDLER                      ; nope, move along...
                      02702          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; yes, initiate pre-priv mode (wait for button r
                            elease)
                      02703          IF HAS_STATUS_LEDS
                      02704           IF HAS_ACTIVE
                      02705            SET_SSR_RAPID_FLASH SSR_ACTIVE
                      02706           ENDIF
                      02707           SET_SSR_RAPID_FLASH SSR_GREEN
                      02708           SET_SSR_RAPID_FLASH SSR_YELLOW
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02709           SET_SSR_RAPID_FLASH SSR_RED
                      02710          ENDIF
                      02711          IF ROLE_MASTER
                      02712           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101101 00000101
                      02713           CALL  SIO_WRITE_W                             ; (rapid flash all LEDs)
                      02714           MOVLW 0x21
                      02715           CALL  SIO_WRITE_W
                      02716           MOVLW 0x2D
                      02717           CALL  SIO_WRITE_W
                      02718           MOVLW 0x05
                      02719           CALL  SIO_WRITE_W
                      02720          ENDIF
                      02721 END_OPTION_HANDLER:
                      02722         ENDIF
                      02723 
                      02724         ; OPTION button handler
                      02725         ; normal: option held ~2s, -> init option mode
                      02726         ; initopt: option released -> priv mode
                      02727         ; priv: option held ~2s and release -> test mode
                      02728         ; test: option press -> pause, wait for release
                      02729         ; pause: option press -> wait for release, test
                      02730         ; XXX test/pause: option held ~2s -> priv
                      02731 
000890 D???           02732         BRA     MAIN
                      02733         
000892                02734 DRAIN_TRANSMITTER:
                      02735         IF HAS_T_R
000892 0103           02736          BANKSEL SIO_DATA_START
000894 B100           02737          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED        ; data still waiting in our output buffer?
000896 0012           02738          RETURN
000898 A89E           02739          BTFSS  PIR1, TXIF, ACCESS                      ; data in transit into UART shift register?
00089A 0012           02740          RETURN
00089C A2AC           02741          BTFSS  TXSTA, TRMT, ACCESS                     ; data being shifted out now?
00089E 0012           02742          RETURN
0008A0 9400           02743          BCF    SSR_STATE, DRAIN_TR, ACCESS             ; none of the above--shut down transmitter now
0008A2 EC?? F???      02744          CALL   TR_OFF_DELAY
0008A6 968B           02745          BCF    PLAT_T_R, BIT_T_R, ACCESS               
0008A8 0012           02746          RETURN
                      02747         ELSE
                      02748          ERR_BUG 0x11, ERR_CLASS_DEVICE
                      02749         ENDIF
                      02750 
0008AA                02751 DRAIN_M_S_TX_BLOCKING:
                      02752         ;
                      02753         ; version of DRAIN_TRANSMITTER which is designed to clear
                      02754         ; master->slave comms in critical situations.  Blocks until
                      02755         ; the pending output is sent to the slave.
                      02756         ;
                      02757         IF ROLE_MASTER
                      02758          BANKSEL SIO_DATA_START
                      02759          CLRWDT
                      02760 DRAIN_M_S_DRAIN_SIO_QUEUE:
                      02761          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED
                      02762          BRA    DRAIN_M_S_DRAIN_SIO_QUEUE
                      02763          CLRWDT
                      02764 DRAIN_M_S_DRAIN_UART_TX_BUF:
                      02765          BTFSS  PIR1, TXIF, ACCESS
                      02766          BRA    DRAIN_M_S_DRAIN_UART_TX_BUF
                      02767          CLRWDT
                      02768 DRAIN_M_S_DRAIN_UART_SHIFT_REG:
                      02769          BTFSS  TXSTA, TRMT, ACCESS
                      02770          BRA    DRAIN_M_S_DRAIN_UART_SHIFT_REG
                      02771          CLRWDT
                      02772          RETURN
                      02773         ELSE
                      02774          ERR_BUG 0x12, ERR_CLASS_DEVICE
0008AA 0E12               M          MOVLW  0x12
0008AC 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_DEVICE == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_DEVICE == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_DEVICE == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0008AE 6A00               M          CLRF   YY_STATE, ACCESS
0008B0 0012               M          RETURN
                      02775         ENDIF
                      02776 
0008B2                02777 DO_TEST_MODE:
0008B2 0004           02778         CLRWDT
                      02779 
0008B4 1C00           02780         COMF    OPTION_DEBOUNCE, W, ACCESS      ; is option button pressed?
0008B6 E1??           02781         BNZ     TEST_NOT_PRESSED
0008B8 8A00           02782         BSF     SSR_STATE2, TEST_BUTTON, ACCESS ; yes, keep waiting for it to be released
0008BA D???           02783         BRA     TEST_MODE_1
0008BC                02784 TEST_NOT_PRESSED:
0008BC 6600           02785         TSTFSZ  OPTION_DEBOUNCE, ACCESS         ; is option button fully off?
0008BE D???           02786         BRA     TEST_MODE_1
0008C0 AA00           02787         BTFSS   SSR_STATE2, TEST_BUTTON, ACCESS ; were we waiting for this button cycle event?
0008C2 D???           02788         BRA     TEST_MODE_1                     ; 
                      02789         ;
                      02790         ; OPTION button was pressed and then released.  Toggle pause state.
                      02791         ;
0008C4 9A00           02792         BCF     SSR_STATE2, TEST_BUTTON, ACCESS ; 
0008C6 7E00           02793         BTG     SSR_STATE2, TEST_PAUSE, ACCESS  ;
0008C8 6800           02794         SETF    TEST_CYCLE, ACCESS              ; reset cycle timer
                      02795         IF ROLE_MASTER                          ; MASTER  SLAVE           STANDALONE
                      02796          MOVLW  0xF0                            ; A G Y R G Y R           A G Y R
                      02797          CALL   SIO_WRITE_W                     ; b3b2b1b0b5b4(*)         b2b1b0(*)  run
                      02798          MOVLW  0x21                            ;              *                 *   pause
                      02799          CALL   SIO_WRITE_W
                      02800          MOVLW  B'00111111'
                      02801          CALL   SIO_WRITE_W
                      02802          MOVLW  B'00000001'
                      02803          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
                      02804          MOVLW  B'00000010'
                      02805          CALL   SIO_WRITE_W
                      02806         ELSE
0008CA AE00           02807          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
0008CC D???           02808          BRA    TEST_NP_1
                      02809          IF HAS_STATUS_LEDS
                      02810           SET_SSR_STEADY SSR_RED
                      02811          ENDIF
0008CE D???           02812          BRA    TEST_NP_2
0008D0                02813 TEST_NP_1:
                      02814          IF HAS_STATUS_LEDS
                      02815           SET_SSR_SLOW_FADE SSR_RED
                      02816          ENDIF
0008D0                02817 TEST_NP_2:
                      02818         ENDIF
                      02819         
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008D0                02820 TEST_MODE_1:
0008D0 AE00           02821         BTFSS   SSR_STATE2, TEST_PAUSE, ACCESS  ; paused? 
0008D2 AC00           02822         BTFSS   SSR_STATE2, TEST_UPD, ACCESS    ; time to count down?
0008D4 0012           02823         RETURN                                  ; either we're paused or not time to update; stop.
                      02824         
0008D6 9C00           02825         BCF     SSR_STATE2, TEST_UPD, ACCESS    ; clear flag about being time to update
0008D8 2E00           02826         DECFSZ  TEST_CYCLE, F, ACCESS           ; count down until time to change channels
0008DA 0012           02827         RETURN
0008DC 0E78           02828         MOVLW   .120
0008DE 6E00           02829         MOVWF   TEST_CYCLE, ACCESS              ; reset counter time for next channel
                      02830 
0008E0 D???           02831         RCALL   S0_CMD0                         ; kill all outputs
0008E2 2A00           02832         INCF    TEST_SSR, F, ACCESS             ; jump to next SSR
0008E4 0E14           02833         MOVLW   NUM_CHANNELS
0008E6 6000           02834         CPFSLT  TEST_SSR, ACCESS                ; channel > last channel?
0008E8 6A00           02835         CLRF    TEST_SSR, ACCESS                ; cycle to 0 if exceeded our limit
                      02836 
0008EA 0E3F           02837         MOVLW   0x3F
0008EC 1400           02838         ANDWF   TEST_SSR, W, ACCESS             ; keep to limits of channel number
0008EE 6E00           02839         MOVWF   YY_DATA, ACCESS                 ; set up YY_DATA for ON_OFF call
0008F0 8C00           02840         BSF     YY_DATA, 6, ACCESS              ; turn on
0008F2 D???           02841         RCALL   ON_OFF_YY_DATA                  ; execute
                      02842 
0008F4 0104           02843         BANKSEL SSR_DATA_BANK
                      02844         IF HAS_STATUS_LEDS
                      02845          CLRF   SSR_00_VALUE + SSR_RED, BANKED
                      02846          CLRF   SSR_00_VALUE + SSR_YELLOW, BANKED
                      02847          CLRF   SSR_00_VALUE + SSR_GREEN, BANKED
                      02848          IF HAS_ACTIVE
                      02849           CLRF  SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02850          ENDIF
                      02851         ENDIF
                      02852 
                      02853         IF ROLE_MASTER                                  ; MASTER----- SLAVE---      STANDALONE-
                      02854          IF HAS_STATUS_LEDS
                      02855           BTFSC TEST_SSR, 2, ACCESS                     ; A  G  Y  R  G  Y  R       A  G  Y  R
                      02856           SETF  SSR_00_VALUE + SSR_RED, BANKED          ; b5 b4 b3 b2 b1 b0 (*)     b2 b1 b0 (*)
                      02857           BTFSC TEST_SSR, 3, ACCESS
                      02858           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      02859           BTFSC TEST_SSR, 4, ACCESS
                      02860           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      02861           IF HAS_ACTIVE
                      02862            BTFSC TEST_SSR, 5, ACCESS
                      02863            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02864           ENDIF
                      02865          ENDIF
                      02866 
                      02867          MOVLW  0xF0                                    ; send to slave chip: F0 21 00gggyyy 00000rrr
                      02868          CALL   SIO_WRITE_W
                      02869          MOVLW  0x21
                      02870          CALL   SIO_WRITE_W
                      02871          CLRF   WREG, ACCESS
                      02872          BTFSC  TEST_SSR, 1, ACCESS
                      02873          BSF    WREG, 3, ACCESS
                      02874          BTFSC  TEST_SSR, 0, ACCESS
                      02875          BSF    WREG, 0, ACCESS
                      02876          CALL   SIO_WRITE_W
                      02877          MOVLW  0x02
                      02878          CALL   SIO_WRITE_W
                      02879         ELSE
                      02880          IF HAS_STATUS_LEDS
                      02881           BTFSC TEST_SSR, 0, ACCESS
                      02882           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      02883           BTFSC TEST_SSR, 1, ACCESS
                      02884           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      02885           IF HAS_ACTIVE
                      02886            BTFSC TEST_SSR, 2, ACCESS
                      02887            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02888           ENDIF
                      02889           SET_SSR_SLOW_FADE SSR_RED
                      02890          ENDIF
                      02891         ENDIF
                      02892 
0008F6 0012           02893         RETURN
                      02894 
0008F8                02895 ERR_SERIAL_FRAMING:
0008F8 0103           02896         BANKSEL SIO_DATA_START
0008FA 9B00           02897         BCF     SIO_STATUS, SIO_FERR, BANKED
                      02898 ;       BTFSC   DMX_SLOTH, DMX_EN, ACCESS
                      02899 ;       BRA     START_DMX_FRAME
                      02900         IF HAS_STATUS_LEDS
                      02901          SET_SSR_RAPID_FLASH SSR_RED
                      02902          SET_SSR_STEADY SSR_YELLOW
                      02903         ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008FC 0012           02904         RETURN
0008FE                02905 START_DMX_FRAME:
                      02906         ;
                      02907         ; We're in DMX mode so a framing error (aka break) is really
                      02908         ; not an error, but the start of our data frame!
                      02909         ;
0008FE 8A00           02910         BSF     DMX_SLOTH, DMX_FRAME, ACCESS
                      02911         IF HAS_STATUS_LEDS
                      02912          SET_SSR_RAPID_FLASH SSR_YELLOW
                      02913         ENDIF
000900 0012           02914         RETURN
                      02915         
000902                02916 ERR_SERIAL_OVERRUN:
000902 0103           02917         BANKSEL SIO_DATA_START
000904 9900           02918         BCF     SIO_STATUS, SIO_ORUN, BANKED
                      02919         IF HAS_STATUS_LEDS
                      02920          SET_SSR_RAPID_FLASH SSR_RED
                      02921          SET_SSR_RAPID_FLASH SSR_YELLOW
                      02922         ENDIF
000906 0012           02923         RETURN
                      02924 
000908                02925 ERR_SERIAL_FULL:
                      02926         IF HAS_STATUS_LEDS
                      02927          SET_SSR_RAPID_FLASH SSR_RED
                      02928          SET_SSR_SLOW_FADE SSR_YELLOW
                      02929         ENDIF
                      02930         ; clear input buffer and reset state machine
000908 6A00           02931         CLRF    YY_STATE, ACCESS
00090A EC?? F???      02932         CALL    SIO_FLUSH_INPUT
00090E 0012           02933         RETURN
                      02934 
000910                02935 ERR_CMD_INCOMPLETE:
000910 0E23           02936         MOVLW   0x23
000912 6E00           02937         MOVWF   LAST_ERROR, ACCESS
                      02938         IF HAS_STATUS_LEDS
                      02939          SET_SSR_SLOW_FLASH SSR_RED
                      02940         ENDIF
000914 EF?? F???      02941         GOTO    ERR_ABORT
000918                02942 ERR_NOT_IMP:
000918 0E22           02943         MOVLW   0x22
00091A 6E00           02944         MOVWF   LAST_ERROR, ACCESS
                      02945         IF HAS_STATUS_LEDS
                      02946          SET_SSR_RAPID_FLASH SSR_RED
                      02947         ENDIF
00091C EF?? F???      02948         GOTO    ERR_ABORT
000920                02949 ERR_COMMAND:
000920 0E20           02950         MOVLW   0x20
000922 6E00           02951         MOVWF   LAST_ERROR, ACCESS
                      02952         IF HAS_STATUS_LEDS
                      02953          SET_SSR_PATTERN SSR_RED, .255, .1, .32, BIT_FADE_DOWN
                      02954         ENDIF
000924                02955 ERR_ABORT:
                      02956         ;SET_SSR_STEADY SSR_RED
000924 6A00           02957         CLRF    YY_STATE, ACCESS        ; reset state machine
000926 0012           02958         RETURN
                      02959 
000928                02960 RECEIVE_COMMAND:
  00000007            02961 CMD_BIT EQU     7
                      02962 
000928 0004           02963         CLRWDT
                      02964         ;
                      02965         ; First of all, if we received a byte at all, that means
                      02966         ; we're not the one expected to be talking anymore.
                      02967         ; we should never see this while trying to output anything,
                      02968         ; if everyone else is playing by the same rules,
                      02969         ; but this is a fail-safe just in case.  In this case, we
                      02970         ; will immediately shut up.
                      02971         ;
00092A 8400           02972         BSF     SSR_STATE2, INHIBIT_OUTPUT, ACCESS
                      02973         ;
                      02974         ; We just received a byte.  The state machine dictates what
                      02975         ; we do with the byte we just got.
                      02976         ;
                      02977         ; State:        Byte:
                      02978         ; [0] IDLE      DATA: ignore
                      02979         ;               CMD for someone else: ignore
                      02980         ;               store command, then decode it.
                      02981         ;
00092C EC?? F???      02982         CALL    SIO_GETCHAR_W
000930 BC00           02983         BTFSC   DMX_SLOTH, DMX_SPEED, ACCESS    ; check if we're trying to read DMX now
000932 EF?? F???      02984         GOTO    DMX_RECEIVED_BYTE
                      02985         ;
000936 0004           02986         CLRWDT
000938 0103           02987         BANKSEL SIO_DATA_START
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00093A AF00           02988         BTFSS   SIO_INPUT, CMD_BIT, BANKED
00093C D???           02989         BRA     DATA_BYTE               ; it's a data byte
                      02990         ;
                      02991         ; ok, so it's a command. are we still waiting for another
                      02992         ; command to complete?  If so, abort it and start over.
                      02993         ; otherwise, get to work.
                      02994         ;
00093E 9200           02995         BCF     SSR_STATE2, MSB_ESC, ACCESS     ; cancel escape sequence if any
000940 9000           02996         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
000942 5000           02997         MOVF    YY_STATE, W, ACCESS
000944 E0??           02998         BZ      INTERP_START     
                      02999         ;
                      03000         ; ERROR: We hadn't finished with the last command yet, and here we
                      03001         ; have another one!  (Yes, even if it's someone else's command, that
                      03002         ; still means ours is apparently abandoned.)
                      03003         ;
000946 D???           03004         RCALL   ERR_CMD_INCOMPLETE              ; let user know
                      03005         
000948                03006 INTERP_START:
                      03007         ;
                      03008         ; Start of a new command.
                      03009         ;
000948 0103           03010         BANKSEL SIO_DATA_START
00094A 0004           03011         CLRWDT
                      03012         ;
                      03013         ; Is it ours?
                      03014         ;
                      03015         IF QSCC_PORT
                      03016          #include "qscc_hook_global_commands.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpretation code so that we handle
                      00027 ; globally-recognized commands, which isn't something Lumos controllers do.
                      00028 ;
                      00029 ; Force global commands to be our address
                      00030 ;
                      00031 ; Context: SIO data bank selected
                      00032 ; SIO_INPUT contains command byte on input.
                      00033 ; RETURN from here will end command interpretation, so if we branch to
                      00034 ; a command handler, its return will go back to our caller.
                      00035 ;
00094C 0E8F           00036         MOVLW   b'10001111'     ; 8F: Global Blackout
00094E 6300           00037         CPFSEQ  SIO_INPUT, BANKED
000950 D???           00038         BRA     QSCC_G_C_1
000952 EF?? F???      00039         GOTO    S0_CMD0
                      00040 
000956                00041 QSCC_G_C_1:
000956 EF?? F???      00042         GOTO    S0_CMD0
00095A 0EDF           00043         MOVLW   b'11011111'     ; DF: Global Start
00095C 6300           00044         CPFSEQ  SIO_INPUT, BANKED
00095E D???           00045         BRA     QSCC_G_C_2
000960 EF?? F???      00046         GOTO    QSCC_CMD6_START
                      00047 
000964                00048 QSCC_G_C_2:
                      03017         ENDIF
                      03018         IF ! ROLE_SLAVE         ; the slave chip has no address and sees no other commands
000964 5100           03019          MOVF   SIO_INPUT, W, BANKED
000966 0B0F           03020          ANDLW  0x0F
000968 6200           03021          CPFSEQ MY_ADDRESS, ACCESS
00096A 0012           03022          RETURN ; not my problem.
                      03023         ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03024         ;
                      03025         ; ok, so it's OUR command.  We're at state 0,
                      03026         ; so let's decode it and go from here.
                      03027         ;
                      03028         ; === STATE 0 ===
                      03029         ; New command byte received
                      03030         ;
                      03031         ; CMD 0 (BLACKOUT): exec -> 0
                      03032         ; CMD 1 (ON_OFF): -> 1
                      03033         ; CMD 2 (SET_LVL): -> 2
                      03034         ; CMD 3 (BULK_UPD): -> 4
                      03035         ; CMD 4 (RAMP_LVL): -> 5
                      03036         ; CMD 5 ERROR -> 0
                      03037         ; CMD 6 ERROR -> 0
                      03038         ; CMD 7 (EXTENDED) -> 9
                      03039         ;
                      03040         IF HAS_ACTIVE
                      03041          SET_SSR_BLINK_FADE SSR_ACTIVE  ; activity indicator
                      03042         ENDIF
                      03043         IF ROLE_SLAVE && HAS_STATUS_LEDS
                      03044          SET_SSR_BLINK_FADE SSR_YELLOW  ; slave activity indicator
                      03045         ENDIF
00096C 0103           03046         BANKSEL SIO_DATA_START
00096E 3900           03047         SWAPF   SIO_INPUT, W, BANKED
000970 0B07           03048         ANDLW   0x07
000972 E0??           03049         BZ      S0_CMD0
000974 EF?? F???      03050         GOTO    S0_CMD1         ; can't do BNZ S0_CMD1 because it's too far away from here
                      03051 
000978                03052 S0_CMD0:
                      03053         ;
                      03054         ; BLACKOUT:
                      03055         ;
                      03056         ;   ___7______6______5______4______3______2______1______0__
                      03057         ;  |      |                    |                           |
                      03058         ;  |   1  |          0         |   Target device address   | SIO_INPUT
                      03059         ;  |______|______|______|______|______|______|______|______|
                      03060         ;  |                                  |          0         |
                      03061         ;  |                 0                |   (Command code)   | W
                      03062         ;  |______|______|______|______|______|______|______|______|
                      03063         ;
000978 0104           03064         BANKSEL SSR_DATA_BANK
  00000000            03065 CH      SET     0
                      03066         WHILE CH <= OUTPUT_CHAN_MAX
00097A 6B00           03067          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
00097C 6B00           03068          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
00097E 6B00           03069          CLRF   SSR_00_STEP+0,      BANKED
000980 6B00           03070          CLRF   SSR_00_SPEED+0,      BANKED
000982 6B00           03071          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            03072 CH       ++
000984 6B00           03067          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
000986 6B00           03068          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
000988 6B00           03069          CLRF   SSR_00_STEP+1,      BANKED
00098A 6B00           03070          CLRF   SSR_00_SPEED+1,      BANKED
00098C 6B00           03071          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            03072 CH       ++
00098E 6B00           03067          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
000990 6B00           03068          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
000992 6B00           03069          CLRF   SSR_00_STEP+2,      BANKED
000994 6B00           03070          CLRF   SSR_00_SPEED+2,      BANKED
000996 6B00           03071          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            03072 CH       ++
000998 6B00           03067          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
00099A 6B00           03068          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
00099C 6B00           03069          CLRF   SSR_00_STEP+3,      BANKED
00099E 6B00           03070          CLRF   SSR_00_SPEED+3,      BANKED
0009A0 6B00           03071          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            03072 CH       ++
0009A2 6B00           03067          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
0009A4 6B00           03068          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
0009A6 6B00           03069          CLRF   SSR_00_STEP+4,      BANKED
0009A8 6B00           03070          CLRF   SSR_00_SPEED+4,      BANKED
0009AA 6B00           03071          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            03072 CH       ++
0009AC 6B00           03067          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
0009AE 6B00           03068          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
0009B0 6B00           03069          CLRF   SSR_00_STEP+5,      BANKED
0009B2 6B00           03070          CLRF   SSR_00_SPEED+5,      BANKED
0009B4 6B00           03071          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            03072 CH       ++
0009B6 6B00           03067          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
0009B8 6B00           03068          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
0009BA 6B00           03069          CLRF   SSR_00_STEP+6,      BANKED
0009BC 6B00           03070          CLRF   SSR_00_SPEED+6,      BANKED
0009BE 6B00           03071          CLRF   SSR_00_COUNTER+6,      BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000007            03072 CH       ++
0009C0 6B00           03067          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
0009C2 6B00           03068          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
0009C4 6B00           03069          CLRF   SSR_00_STEP+7,      BANKED
0009C6 6B00           03070          CLRF   SSR_00_SPEED+7,      BANKED
0009C8 6B00           03071          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            03072 CH       ++
0009CA 6B00           03067          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
0009CC 6B00           03068          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
0009CE 6B00           03069          CLRF   SSR_00_STEP+8,      BANKED
0009D0 6B00           03070          CLRF   SSR_00_SPEED+8,      BANKED
0009D2 6B00           03071          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            03072 CH       ++
0009D4 6B00           03067          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
0009D6 6B00           03068          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
0009D8 6B00           03069          CLRF   SSR_00_STEP+9,      BANKED
0009DA 6B00           03070          CLRF   SSR_00_SPEED+9,      BANKED
0009DC 6B00           03071          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            03072 CH       ++
0009DE 6B00           03067          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
0009E0 6B00           03068          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
0009E2 6B00           03069          CLRF   SSR_00_STEP+10,     BANKED
0009E4 6B00           03070          CLRF   SSR_00_SPEED+10,     BANKED
0009E6 6B00           03071          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            03072 CH       ++
0009E8 6B00           03067          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
0009EA 6B00           03068          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
0009EC 6B00           03069          CLRF   SSR_00_STEP+11,     BANKED
0009EE 6B00           03070          CLRF   SSR_00_SPEED+11,     BANKED
0009F0 6B00           03071          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            03072 CH       ++
0009F2 6B00           03067          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
0009F4 6B00           03068          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
0009F6 6B00           03069          CLRF   SSR_00_STEP+12,     BANKED
0009F8 6B00           03070          CLRF   SSR_00_SPEED+12,     BANKED
0009FA 6B00           03071          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            03072 CH       ++
0009FC 6B00           03067          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
0009FE 6B00           03068          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
000A00 6B00           03069          CLRF   SSR_00_STEP+13,     BANKED
000A02 6B00           03070          CLRF   SSR_00_SPEED+13,     BANKED
000A04 6B00           03071          CLRF   SSR_00_COUNTER+13,     BANKED
  0000000E            03072 CH       ++
000A06 6B00           03067          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
000A08 6B00           03068          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
000A0A 6B00           03069          CLRF   SSR_00_STEP+14,     BANKED
000A0C 6B00           03070          CLRF   SSR_00_SPEED+14,     BANKED
000A0E 6B00           03071          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            03072 CH       ++
000A10 6B00           03067          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
000A12 6B00           03068          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
000A14 6B00           03069          CLRF   SSR_00_STEP+15,     BANKED
000A16 6B00           03070          CLRF   SSR_00_SPEED+15,     BANKED
000A18 6B00           03071          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            03072 CH       ++
000A1A 6B00           03067          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
000A1C 6B00           03068          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
000A1E 6B00           03069          CLRF   SSR_00_STEP+16,     BANKED
000A20 6B00           03070          CLRF   SSR_00_SPEED+16,     BANKED
000A22 6B00           03071          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            03072 CH       ++
000A24 6B00           03067          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
000A26 6B00           03068          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
000A28 6B00           03069          CLRF   SSR_00_STEP+17,     BANKED
000A2A 6B00           03070          CLRF   SSR_00_SPEED+17,     BANKED
000A2C 6B00           03071          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            03072 CH       ++
000A2E 6B00           03067          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
000A30 6B00           03068          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
000A32 6B00           03069          CLRF   SSR_00_STEP+18,     BANKED
000A34 6B00           03070          CLRF   SSR_00_SPEED+18,     BANKED
000A36 6B00           03071          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            03072 CH       ++
000A38 6B00           03067          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
000A3A 6B00           03068          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
000A3C 6B00           03069          CLRF   SSR_00_STEP+19,     BANKED
000A3E 6B00           03070          CLRF   SSR_00_SPEED+19,     BANKED
000A40 6B00           03071          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            03072 CH       ++
                      03073         ENDW
                      03074 
                      03075         IF ROLE_MASTER
                      03076          MOVLW  0x80            ; Pass this command on to the other 
                      03077          CALL   SIO_WRITE_W     ; processor too
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03078          IF HAS_STATUS_LEDS
                      03079           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03080          ENDIF
                      03081         ENDIF
000A42 0012           03082         RETURN
                      03083 
000A44                03084 S0_CMD1:
000A44 6E00           03085         MOVWF   YY_COMMAND, ACCESS      ; save command byte in YY_COMMAND
000A46 2CE8           03086         DECFSZ  WREG, W, ACCESS
000A48 D???           03087         BRA     S0_CMD2
                      03088         ; ON_OFF:
000A4A 0E01           03089         MOVLW   1
000A4C 6E00           03090         MOVWF   YY_STATE, ACCESS        ; -> state 1 (wait for channel)
000A4E 0012           03091         RETURN
                      03092 
000A50                03093 S0_CMD2:
                      03094         ; SET_LEVEL
000A50 2CE8           03095         DECFSZ  WREG, W, ACCESS
000A52 D???           03096         BRA     S0_CMD3
000A54 0E02           03097         MOVLW   2
000A56 6E00           03098         MOVWF   YY_STATE, ACCESS        ; -> state 2 (wait for channel)
000A58 0012           03099         RETURN
                      03100 
000A5A                03101 S0_CMD3:
                      03102         ; BULK_UPD
000A5A 2CE8           03103         DECFSZ  WREG, W, ACCESS
000A5C D???           03104         BRA     S0_CMD4
000A5E 0E04           03105         MOVLW   4
000A60 6E00           03106         MOVWF   YY_STATE, ACCESS        ; -> state 4 (wait for channel)
000A62 0012           03107         RETURN
                      03108 
000A64                03109 S0_CMD4:
                      03110         ; RAMP_LVL
000A64 2CE8           03111         DECFSZ  WREG, W, ACCESS
000A66 D???           03112         BRA     S0_CMD5
000A68 0E05           03113         MOVLW   5
000A6A 6E00           03114         MOVWF   YY_STATE, ACCESS        ; -> state 5 (wait for channel)
000A6C 0012           03115         RETURN
                      03116 
                      03117         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      03118          #include "qscc_hook_5_6.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos device initialization code which sets up I/O pins.
                      00027 ; We want them arranged differently than the Lumos controllers do, but we put
                      00028 ; the QuizShow code here to keep the Lumos product clean and separate.
                      00029 ; 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_5_5 only used for QS*C systems"
                      00032         ENDIF
                      00033 
000A6E                00034 S0_CMD5:
                      00035          ; Unimplemented Command
000A6E 2CE8           00036          DECFSZ WREG, W, ACCESS
000A70 D???           00037          BRA    S0_CMD6
000A72 EF?? F???      00038          GOTO   ERR_NOT_IMP             ; XXX
                      00039 
000A76                00040 S0_CMD6:
                      00041          ; Unimplemented Command
000A76 2CE8           00042          DECFSZ WREG, W, ACCESS
000A78 D???           00043          BRA    S0_CMD7
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A7A EF?? F???      00044          GOTO   ERR_NOT_IMP             ; XXX
                      03119         ELSE
                      03120 S0_CMD5:
                      03121          ; Unimplemented Command
                      03122          DECFSZ WREG, W, ACCESS
                      03123          BRA    S0_CMD6
                      03124          GOTO   ERR_NOT_IMP             ; XXX
                      03125 
                      03126 S0_CMD6:
                      03127          ; Unimplemented Command
                      03128          DECFSZ WREG, W, ACCESS
                      03129          BRA    S0_CMD7
                      03130          GOTO   ERR_NOT_IMP             ; XXX
                      03131         ENDIF
                      03132 
000A7E                03133 S0_CMD7:
                      03134         ; Extended commands
000A7E 2CE8           03135         DECFSZ  WREG, W, ACCESS
000A80 D???           03136         BRA     S0_CMD_ERR
000A82 0E09           03137         MOVLW   9
000A84 6E00           03138         MOVWF   YY_STATE, ACCESS        ; -> state 9 (decode extended command)
000A86 0012           03139         RETURN
                      03140 
000A88                03141 S0_CMD_ERR:
                      03142         ; BUG: We really shouldn't have arrived here!
                      03143         ERR_BUG 0x01, ERR_CLASS_OVERRUN
000A88 0E01               M          MOVLW  0x01
000A8A 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000A8C 6A00               M          CLRF   YY_STATE, ACCESS
000A8E 0012               M          RETURN
                      03144          
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A90                03145 DATA_BYTE:
000A90 0004           03146         CLRWDT
                      03147         ;
                      03148         ; Check for escape sequences
                      03149         ;
                      03150         ; in MSB mode? set this byte's MSB and skip down
000A92 A200           03151         BTFSS   SSR_STATE2, MSB_ESC, ACCESS
000A94 D???           03152         BRA     DB_CHK_LITERAL
000A96 8F00           03153         BSF     SIO_INPUT, 7, BANKED
000A98 9200           03154         BCF     SSR_STATE2, MSB_ESC, ACCESS
000A9A D???           03155         BRA     DB_HANDLER
000A9C                03156 DB_CHK_LITERAL:
                      03157         ; no, how about in literal mode? if so, just pass through this byte
000A9C A000           03158         BTFSS   SSR_STATE2, LITERAL_ESC, ACCESS
000A9E D???           03159         BRA     DB_CHK_7E
000AA0 9000           03160         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
000AA2 D???           03161         BRA     DB_HANDLER
000AA4                03162 DB_CHK_7E:
                      03163         ; no, ok, then is this the start of an MSB escape?
000AA4 0E7E           03164         MOVLW   0x7E
000AA6 6300           03165         CPFSEQ  SIO_INPUT, BANKED
000AA8 D???           03166         BRA     DB_CHK_7F
000AAA 8200           03167         BSF     SSR_STATE2, MSB_ESC, ACCESS
000AAC 0012           03168         RETURN
                      03169 
000AAE                03170 DB_CHK_7F:
                      03171         ; no, then maybe we're starting a literal escape?
000AAE 0E7F           03172         MOVLW   0x7F
000AB0 6300           03173         CPFSEQ  SIO_INPUT, BANKED
000AB2 D???           03174         BRA     DB_HANDLER
000AB4 8000           03175         BSF     SSR_STATE2, LITERAL_ESC, ACCESS
000AB6 0012           03176         RETURN
                      03177         
000AB8                03178 DB_HANDLER:
                      03179         ;
                      03180         ; Data byte:  If we're at state 0, we aren't expecting
                      03181         ; this, so just ignore it. 
                      03182         ;
000AB8 5000           03183         MOVF    YY_STATE, W, ACCESS
000ABA E1??           03184         BNZ     S1_DATA
000ABC 0012           03185         RETURN
                      03186         ;
                      03187         ; We're collecting data, so add this to the pile, depending
                      03188         ; on where the state machine is now.
                      03189         ;
000ABE                03190 S1_DATA:
                      03191         ;
                      03192         ; STATE 1: collect channel number for ON_OFF command
                      03193         ;          and execute.
                      03194         ;
000ABE C??? F???      03195         MOVFF   SIO_INPUT, YY_DATA;             Save data byte in YY_DATA
000AC2 2CE8           03196         DECFSZ  WREG, W, ACCESS
000AC4 D???           03197         BRA     S2_DATA
                      03198         ;
                      03199         ; ON_OFF:
                      03200         ;
                      03201         ;   ___7______6______5______4______3______2______1______0__
                      03202         ;  |                                  |                    |
                      03203         ;  |                0                 |          1         | YY_COMMAND
                      03204         ;  |______|______|______|______|______|______|______|______|
                      03205         ;  |      |0=off |                                         |
                      03206         ;  |   0  |1=on  |           Channel ID (0-47)             | YY_DATA
                      03207         ;  |______|______|______|______|______|______|______|______|
                      03208         ;
000AC6                03209 ON_OFF_YY_DATA:
000AC6 EC?? F???      03210         CALL    XLATE_SSR_ID
000ACA 6A00           03211         CLRF    YY_STATE, ACCESS                        ; reset command state
000ACC BC00           03212         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000ACE EF?? F???      03213         GOTO    ERR_COMMAND                             ; SSR number out of range
000AD2 BE00           03214         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000AD4 D???           03215         BRA     PASS_DOWN_ON_OFF
000AD6 BC00           03216         BTFSC   YY_DATA, 6, ACCESS
000AD8 D???           03217         BRA     ON_OFF_ON
000ADA 6AE8           03218         CLRF    WREG, ACCESS
000ADC EF?? F???      03219         GOTO    SSR_OUTPUT_VALUE                        ; set value off and return
                      03220 
000AE0                03221 ON_OFF_ON:
000AE0 68E8           03222         SETF    WREG, ACCESS
000AE2 EF?? F???      03223         GOTO    SSR_OUTPUT_VALUE                        ; set value on and return
                      03224         
000AE6                03225 PASS_DOWN_ON_OFF:
                      03226         IF ROLE_MASTER
                      03227          MOVLW  0x90
                      03228          CALL   SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03229          MOVF   TARGET_SSR, W, ACCESS
                      03230          ANDLW  0x3F
                      03231          BTFSC  YY_DATA, 6, ACCESS
                      03232          BSF    WREG, 6, ACCESS
                      03233          SEND_8_BIT_W
                      03234          ;CALL  SIO_WRITE_W
                      03235          IF HAS_STATUS_LEDS
                      03236           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03237          ENDIF
                      03238          RETURN
                      03239         ELSE
000AE6 EF?? F???      03240          GOTO   ERR_COMMAND
                      03241         ENDIF
                      03242 
000AEA                03243 S2_DATA:
000AEA 2CE8           03244         DECFSZ  WREG, W, ACCESS
000AEC D???           03245         BRA     S3_DATA
                      03246         ; SET_LVL channel byte
000AEE EC?? F???      03247         CALL    XLATE_SSR_ID
000AF2 BC00           03248         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000AF4 EF?? F???      03249         GOTO    ERR_COMMAND
000AF8 BC00           03250         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (LSB of value)
000AFA 8C00           03251         BSF     TARGET_SSR, 6, ACCESS   ; Reuse bit 6 (INVALID_SSR) for this purpose now
000AFC 2A00           03252         INCF    YY_STATE, F, ACCESS     ; -> state 3 (wait for level byte)
000AFE 0012           03253         RETURN
                      03254 
000B00                03255 S3_DATA:
                      03256         ; SET_LVL value byte
000B00 2CE8           03257         DECFSZ  WREG, W, ACCESS
000B02 D???           03258         BRA     S4_DATA
                      03259         ;
                      03260         ; SET_LVL:
                      03261         ;
                      03262         ;   ___7______6______5______4______3______2______1______0__
                      03263         ;  |                                  |                    |
                      03264         ;  |                0                 |          2         | YY_COMMAND
                      03265         ;  |______|______|______|______|______|______|______|______|
                      03266         ;  |NOT_MY|Value |                                         |
                      03267         ;  | _SSR |LSB   |           Channel ID (0-47)             | TARGET_SSR
                      03268         ;  |______|______|______|______|______|______|______|______|
                      03269         ;  |      |                                                |
                      03270         ;  |   0  |            Value MSBs (0-127)                  | YY_DATA
                      03271         ;  |______|______|______|______|______|______|______|______|
                      03272         ;
000B04 BE00           03273         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000B06 D???           03274         BRA     PASS_DOWN_SET_LVL
000B08 90D8           03275         BCF     STATUS, C, ACCESS                       ; move LSB -> CARRY
000B0A BC00           03276         BTFSC   TARGET_SSR, 6, ACCESS
000B0C 80D8           03277         BSF     STATUS, C, ACCESS
000B0E 3400           03278         RLCF    YY_DATA, W, ACCESS                      ; Shift LSB into value byte
000B10 6A00           03279         CLRF    YY_STATE, ACCESS                        ; reset state (end of command)
                      03280         ;XXX removed MOVF       YY_DATA, W, ACCESS
000B12 EF?? F???      03281         GOTO    SSR_OUTPUT_VALUE                        ; set SSR to 8-bit YY_DATA value
                      03282 
000B16                03283 PASS_DOWN_SET_LVL:
                      03284         IF ROLE_MASTER
                      03285          MOVLW  0xA0
                      03286          CALL   SIO_WRITE_W
                      03287          BCF    TARGET_SSR, 7, ACCESS
                      03288          MOVF   TARGET_SSR, W, ACCESS
                      03289          SEND_8_BIT_W
                      03290          ;CALL  SIO_WRITE_W
                      03291          MOVF   YY_DATA, W, ACCESS
                      03292          SEND_8_BIT_W
                      03293          ;CALL  SIO_WRITE_W
                      03294          CLRF   YY_STATE, ACCESS
                      03295          IF HAS_STATUS_LEDS
                      03296           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03297          ENDIF
                      03298          RETURN
                      03299         ELSE
                      03300          ERR_BUG 0x02, ERR_CLASS_IN_VALID
000B16 0E02               M          MOVLW  0x02
000B18 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000B1A 6A00               M          CLRF   YY_STATE, ACCESS
000B1C 0012               M          RETURN
                      03301         ENDIF
                      03302 
000B1E                03303 S4_DATA:
000B1E 2CE8           03304         DECFSZ  WREG, W, ACCESS
000B20 D???           03305         BRA     S5_DATA
                      03306         ; BULK_UPD, received channel byte
000B22 EC?? F???      03307         CALL    XLATE_SSR_ID
000B26 BC00           03308         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000B28 EF?? F???      03309         GOTO    ERR_COMMAND
                      03310         ;BTFSC  YY_DATA, 6, ACCESS      ; preserve bit 7 (resolution flag)
                      03311         ;BSF    TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
                      03312         WAIT_FOR_SENTINEL .57, B'01010101', 0   ; -> S6.0 when sentinel found
000B2C 0E39               M          MOVLW  .57
000B2E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
000B30 0E55               M          MOVLW  B'01010101'
000B32 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
000B34 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
000B36 6E00               M          MOVWF  YY_STATE, ACCESS
000B38 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
000B3A 0E00               M          MOVLW  0
000B3C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
000B3E 0012           03313         RETURN
                      03314 
000B40                03315 S5_DATA:
000B40 2CE8           03316         DECFSZ  WREG, W, ACCESS
000B42 D???           03317         BRA     S6_DATA
                      03318         ; RAMP_LVL received channel number
000B44 EC?? F???      03319         CALL    XLATE_SSR_ID
000B48 BC00           03320         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000B4A EF?? F???      03321         GOTO    ERR_COMMAND
000B4E BC00           03322         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (direction flag)
000B50 8C00           03323         BSF     TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
000B52 6A00           03324         CLRF    YY_CMD_FLAGS, ACCESS
000B54 BE00           03325         BTFSC   YY_DATA, 7, ACCESS      ; bit 7: cycle flag -> YY_CMD_FLAGS
000B56 8E00           03326         BSF     YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
000B58 0E07           03327         MOVLW   7
000B5A 6E00           03328         MOVWF   YY_STATE, ACCESS        ; -> state 7 (wait for step count)
000B5C 0012           03329         RETURN
                      03330         
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03331 
000B5E                03332 S6_DATA:
000B5E 2CE8           03333         DECFSZ  WREG, W, ACCESS
000B60 EF?? F???      03334         GOTO    S7_DATA
                      03335         ;
                      03336         ; State 6: Wait for Sentinel
                      03337         ;
                      03338         ; In this state, the machine is looking ahead in the data stream
                      03339         ; for a sentinel pattern.  The pattern is terminated by the byte
                      03340         ; YY_LOOK_FOR and must be seen in the next YY_LOOKAHEAD_MAX bytes.
                      03341         ; If the sentinel is not recognized before YY_LOOKAHEAD_MAX runs
                      03342         ; out, we abort on ERR_COMMAND.
                      03343         ;
                      03344         ; Once it's recognized, we move to YY_NEXT_STATE immediately.  This is
                      03345         ; not a state here in the state machine, but a sub-case of state 6
                      03346         ; to interpret the final packet.
                      03347         ;
                      03348         ; In order to do this, we buffer up the input received in YY_BUFFER.  This is
                      03349         ; a YY_BUF_LEN-byte memory space aligned on a data bank boundary where YY_BUF_LEN
                      03350         ; is not more than 256 (currently it's 200).  We will record the character at
                      03351         ; YY_BUFFER[YY_BUF_IDX++] and stop if YY_BUF_IDX > YY_LOOKAHEAD_MAX.
                      03352         ;
000B64 0004           03353         CLRWDT
000B66 5000           03354         MOVF    YY_DATA, W, ACCESS              ; Is this the sentinel we're looking for?
000B68 6200           03355         CPFSEQ  YY_LOOK_FOR, ACCESS
000B6A EF?? F???      03356         GOTO    S6_KEEP_LOOKING
                      03357         ;
                      03358         ; We have a packet, now switch on YY_NEXT_STATE to decode and execute
                      03359         ; the completed command.
                      03360         ;
000B6E 5000           03361         MOVF    YY_NEXT_STATE, W, ACCESS
000B70 E0??           03362         BZ      S6_0_DATA
000B72 EF?? F???      03363         GOTO    S6_1_DATA       ; too far away for relative branch
                      03364         ;
                      03365         ; S6.0: Complete BULK_UPD command (from state 5)
                      03366         ;
                      03367         ;   ___7______6______5______4______3______2______1______0__
                      03368         ;  |                                  |                    |
                      03369         ;  |                0                 |          3         | YY_COMMAND
                      03370         ;  |______|______|______|______|______|______|______|______|
                      03371         ;  |NOT_MY|      |                                         |
                      03372         ;  | _SSR |      |   c = Starting Channel ID (0-47)        | TARGET_SSR
                      03373         ;  |______|______|______|______|______|______|______|______|
                      03374         ;  |      |                                                |
                      03375         ;  |   0  |      n = (Number of channels - 1) (0-47)       | YY_BUFFER+0
                      03376         ;  |______|______|______|______|______|______|______|______|
                      03377         ;  |                                                       |
                      03378         ;  |                  Value for SSR #c                     | YY_BUFFER+1
                      03379         ;  |______|______|______|______|______|______|______|______|
                      03380         ;  |                                                       |
                      03381         ;  |                  Value for SSR #c+1                   | YY_BUFFER+2
                      03382         ;  |______|______|______|______|______|______|______|______|
                      03383         ;                               .
                      03384         ;                               .
                      03385         ;                               .
                      03386         ;   _______________________________________________________
                      03387         ;  |                                                       |
                      03388         ;  |                  Value for SSR #c+n-1                 | YY_BUFFER+n
                      03389         ;  |______|______|______|______|______|______|______|______|
                      03390         ;                                                       <-- YY_BUF_IDX == n+1
                      03391         ;
                      03392         ;
                      03393         ;
000B76                03394 S6_0_DATA:
000B76 6A00           03395         CLRF    YY_STATE, ACCESS                ; go ahead and signal end of command parsing
                      03396         ;                                       ; now so we can just RETURN when done.
                      03397         ; Calculate expected data lengths
                      03398         ;
000B78 EE?? F0??      03399         LFSR    0, YY_BUFFER                    
000B7C 5000           03400         MOVF    TARGET_SSR, W, ACCESS           ; start
000B7E 0B3F           03401         ANDLW   0x3F
000B80 24EF           03402         ADDWF   INDF0, W, ACCESS                ; start + N-1      (N=#changed; N=n+1)
000B82 28E8           03403         INCF    WREG, W, ACCESS                 ; start + N
000B84 0814           03404         SUBLW   NUM_CHANNELS                    ; start + N > NUM_CHANNELS? 
000B86 E2??           03405         BC      S6_0_DATA_N_OK                  ; NO: proceed
000B88 EF?? F???      03406         GOTO    ERR_COMMAND                     ; YES: bad command - reject it!
                      03407         ;
                      03408         ; Do we have all the bytes yet?  (Or did a data byte happen to equal our sentinel?)
                      03409         ;
000B8C                03410 S6_0_DATA_N_OK:
000B8C 28EF           03411         INCF    INDF0, W, ACCESS                ; W=N
000B8E 6400           03412         CPFSGT  YY_BUF_IDX, ACCESS              ; if IDX > N, we're done.
000B90 EF?? F???      03413         GOTO    S6_KEEP_LOOKING                 ; otherwise, go back and wait for more data
                      03414         ; XXX Don't do this.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03415         ;INCF   INDF0, F, ACCESS                ; fix it so that YY_BUFFER[0] is N, not N-1
                      03416         ;
                      03417         ; start bulk update of channels
                      03418         ;
                      03419         ; Remember that since the protocol specifies that we get N-1 in the length field,
                      03420         ; we will always have at least 1 channel to change.  (There's no way to specify a
                      03421         ; BULK_UPD command to change 0 channels.)
                      03422         ;
                      03423         ; Does the target range of channels lie entirely within the slave chip's 
                      03424         ; range?  If so, just pass the whole command down to it, with starting SSR
                      03425         ; number translated down to its range...
                      03426         ;
000B94 AE00           03427         BTFSS   TARGET_SSR, NOT_MY_SSR, ACCESS
000B96 D???           03428         BRA     S6_0_UPDATE_MASTER
                      03429         IF ROLE_MASTER
                      03430          CLRWDT
                      03431          IF HAS_STATUS_LEDS
                      03432           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03433          ENDIF
                      03434          MOVLW  0xB0                            ; command code
                      03435          CALL   SIO_WRITE_W
                      03436          MOVF   TARGET_SSR, W, ACCESS           ; starting channel
                      03437          SEND_8_BIT_W
                      03438          LFSR   0, YY_BUFFER                    ; now write YY_BUFFER[0..YY_BUF_IDX-1]
                      03439 S6_0_PD_ALL:
                      03440          MOVF   POSTINC0, W, ACCESS
                      03441          SEND_8_BIT_W
                      03442          DECFSZ YY_BUF_IDX, F, ACCESS
                      03443          BRA    S6_0_PD_ALL
                      03444          MOVLW  0x55                            ; and finally the trailing sentinel byte $55.
                      03445          CALL   SIO_WRITE_W
                      03446          RETURN
                      03447         ELSE
                      03448          ERR_BUG 0x03, ERR_CLASS_IN_VALID
000B98 0E03               M          MOVLW  0x03
000B9A 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000B9C 6A00               M          CLRF   YY_STATE, ACCESS
000B9E 0012               M          RETURN
                      03449         ENDIF
                      03450 
000BA0                03451 S6_0_UPDATE_MASTER:
                      03452         ;
                      03453         ; Copy the bytes directly into SSR registers
                      03454         ;
000BA0 0004           03455         CLRWDT
000BA2 EE?? F0??      03456         LFSR    0, YY_BUFFER                    ; FSR0 points to each source data byte to copy
000BA6 EE?? F0??      03457         LFSR    1, SSR_00_VALUE                 ; FSR1 points to each destination SSR control block
000BAA EE?? F0??      03458         LFSR    2, SSR_00_FLAGS                 ; FSR2 points to the SSR flag blocks
000BAE 5000           03459         MOVF    TARGET_SSR, W, ACCESS           ; Move in to first SSR in target range
000BB0 0B3F           03460         ANDLW   0x3F
000BB2 26E1           03461         ADDWF   FSR1L, F, ACCESS                
000BB4 26D9           03462         ADDWF   FSR2L, F, ACCESS
                      03463         IF ROLE_MASTER
                      03464          SUBLW  .24
                      03465          MOVWF  KK, ACCESS                      ; KK=24-start (max # of channels on OUR chip)
                      03466         ENDIF
000BB6 CFEE F???      03467         MOVFF   POSTINC0, I                     ; I=N counter           (I = *FSR0++ + 1)
000BBA 2A00           03468         INCF    I, F, ACCESS                    ;                            \_____/
                      03469                                                 ;                               n
000BBC                03470 S6_0_UPDATE_NEXT:
000BBC 6ADE           03471         CLRF    POSTINC2, ACCESS                ; clear SSR flags       *fsr2++ = 0
000BBE CFEE FFE7      03472         MOVFF   POSTINC0, INDF1                 ; set SSR               *fsr1++ = *fsr0++
000BC2 2AE1           03473         INCF    FSR1L, F, ACCESS
                      03474         IF ROLE_MASTER                          ;
                      03475          DCFSNZ KK, F, ACCESS
                      03476          BRA    S6_0_PASS_DOWN                  ; ran out of KK, send rest to slave chip
                      03477         ENDIF
000BC4 2E00           03478         DECFSZ  I, F, ACCESS
000BC6 D???           03479         BRA     S6_0_UPDATE_NEXT
000BC8 0012           03480         RETURN
                      03481 
                      03482         IF ROLE_MASTER
                      03483 S6_0_PASS_DOWN:
                      03484          DCFSNZ I, F, ACCESS                    ; we left before I-- happened
                      03485          RETURN                                 ; already out of data to send; don't bother the slave
                      03486          IF HAS_STATUS_LEDS
                      03487           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03488          ENDIF
                      03489          MOVLW  0xB0                            ; Start command to slave with I remaining values
                      03490          CALL   SIO_WRITE_W                     
                      03491          CLRF   WREG, ACCESS                    ; target SSR always 0 in this case
                      03492          SEND_8_BIT_W
                      03493          DECF   I, W, ACCESS                    ; I channels left for slave to update, 
                      03494          SEND_8_BIT_W                           ;    protocol wants I-1
                      03495 S6_0_PD_NEXT:
                      03496          MOVF   POSTINC0, W, ACCESS
                      03497          SEND_8_BIT_W
                      03498          DECFSZ I, F, ACCESS
                      03499          BRA    S6_0_PD_NEXT
                      03500          MOVLW  0x55                            ; sentinel $55 after bytes
                      03501          CALL   SIO_WRITE_W
                      03502          RETURN
                      03503         ENDIF
000BCA 0012           03504         RETURN
                      03505 
                      03506 
000BCC                03507 S6_1_DATA:
000BCC 2EE8           03508         DECFSZ  WREG, F, ACCESS
000BCE D???           03509         BRA     S6_2_DATA
                      03510         ;
                      03511         ; S6.1: CF_CONF Command completed:
                      03512         ;
                      03513         ;   ___7______6______5______4______3______2______1______0__
                      03514         ;  |                                  |                    |
                      03515         ;  |                0                 |          7         | YY_COMMAND
                      03516         ;  |______|______|______|______|______|______|______|______|
                      03517         ;  |      |      |      |      |                           |
                      03518         ;  |   0  |   1  |   1  |   1  |             1             | (not saved)
                      03519         ;  |______|______|______|______|______|______|______|______|
                      03520         ;  |      |    Sensors connected      |DMX   | DMX start   |  
                      03521         ;  |   0  |   A      B      C      D  |MODE  | <8:7>       | YY_BUFFER+0
                      03522         ;  |______|______|______|______|______|______|______|______|
                      03523         ;  |      |                                                |
                      03524         ;  |   0  |               DMX start <6:0>                  | YY_BUFFER+1
                      03525         ;  |______|______|______|______|______|______|______|______|
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03526         ;  |      |                                                |
                      03527         ;  |   0  |                   $3A                          | YY_BUFFER+2
                      03528         ;  |______|______|______|______|______|______|______|______|
                      03529         ;  |      |                                                |
                      03530         ;  |   0  |                   $3B                          | YY_DATA
                      03531         ;  |______|______|______|______|______|______|______|______|
                      03532         ;
                      03533         ; Validate inputs
                      03534         ;
000BD0 0E03           03535         MOVLW   3
000BD2 5C00           03536         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000BD4 E2??           03537         BC      S6_1_VALID_1    
000BD6 EF?? F???      03538         GOTO    S6_KEEP_LOOKING                 ; input < 3? not done yet
                      03539 
000BDA                03540 S6_1_VALID_1:
000BDA E0??           03541         BZ      S6_1_VALID_2                    ; 
000BDC EF?? F???      03542         GOTO    ERR_COMMAND                     ; input > 3? too big: reject
                      03543 
000BE0                03544 S6_1_VALID_2:
000BE0 EE?? F0??      03545         LFSR    0, YY_BUFFER+2
000BE4 50ED           03546         MOVF    POSTDEC0, W, ACCESS             ; check 1st sentinel
                      03547         ;ANDLW  0x3F
000BE6 083A           03548         SUBLW   0x3A
000BE8 E0??           03549         BZ      S6_1_CONFIGURE
000BEA EF?? F???      03550         GOTO    ERR_COMMAND
                      03551 
000BEE                03552 S6_1_CONFIGURE:
000BEE CFED F???      03553         MOVFF   POSTDEC0, DMX_SLOTL
000BF2 6A00           03554         CLRF    DMX_SLOTH, ACCESS
000BF4 B0EF           03555         BTFSC   INDF0, 0, ACCESS
000BF6 8E00           03556         BSF     DMX_SLOTL, 7, ACCESS
000BF8 B2EF           03557         BTFSC   INDF0, 1, ACCESS
000BFA 8000           03558         BSF     DMX_SLOTH, DMX_BIT8, ACCESS
000BFC B4EF           03559         BTFSC   INDF0, 2, ACCESS
000BFE 8E00           03560         BSF     DMX_SLOTH, DMX_EN, ACCESS
                      03561         ;
                      03562         ; Save DMX settings to EEPROM
                      03563         ;
                      03564         BEGIN_EEPROM_WRITE EE_DMX_H
000C00 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000C02 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DMX_H    ; NOTE interrupts need to be OFF here!
000C04 0E00               M          MOVLW  HIGH(EE_DMX_H)          ; NOTE interrupts need to be OFF here!
000C06 6EAA               M          MOVWF  EEADRH, ACCESS
000C08 0E05               M          MOVLW  LOW(EE_DMX_H)
000C0A 6EA9               M          MOVWF  EEADR, ACCESS
000C0C 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000C0E 9CA6               M          BCF    EECON1, CFGS, ACCESS
000C10 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000C12 C??? FFA8      03565         MOVFF   DMX_SLOTH, EEDATA
                      03566         WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
000C16 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C18 0E55               M          MOVLW  0x55
000C1A 6EA7               M          MOVWF  EECON2, ACCESS
000C1C 0EAA               M          MOVLW  0xAA
000C1E 6EA7               M          MOVWF  EECON2, ACCESS
000C20 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C22                    M WRITE_EEPROM_LOOP1:
000C22 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C24 D???               M          BRA    WRITE_EEPROM_LOOP1
000C26 0004               M          CLRWDT
000C28 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000002                M EE_LL_XX    ++
000C2A 2AA9               M         INCF    EEADR, F, ACCESS
000C2C C??? FFA8      03567         MOVFF   DMX_SLOTL, EEDATA
                      03568         WRITE_EEPROM_DATA
000C30 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C32 0E55               M          MOVLW  0x55
000C34 6EA7               M          MOVWF  EECON2, ACCESS
000C36 0EAA               M          MOVLW  0xAA
000C38 6EA7               M          MOVWF  EECON2, ACCESS
000C3A 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C3C                    M WRITE_EEPROM_LOOP2:
000C3C A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C3E D???               M          BRA    WRITE_EEPROM_LOOP2
000C40 0004               M          CLRWDT
000C42 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000003                M EE_LL_XX    ++
                      03569         END_EEPROM_WRITE
000C44 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000C46 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000C48 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000C4A 6AAA               M          CLRF   EEADRH, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C4C 6AA9               M          CLRF   EEADR, ACCESS
                      03570         ;
                      03571         ; Configure sensors
                      03572         ;
                      03573         IF HAS_SENSORS
                      03574          BSF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      03575          BSF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03576          BSF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03577          BSF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03578          BTFSS  INDF0, 6, ACCESS                        ; A 
                      03579          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      03580          BTFSS  INDF0, 5, ACCESS                        ; B 
                      03581          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03582          BTFSS  INDF0, 4, ACCESS                        ; C 
                      03583          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03584          BTFSS  INDF0, 3, ACCESS                        ; D 
                      03585          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03586          ;
                      03587          ; Save these settings to EEPROM
                      03588          ;
                      03589          BEGIN_EEPROM_WRITE EE_SENSOR_CFG
                      03590          RRNCF  INDF0, W, ACCESS
                      03591          RRNCF  WREG, W, ACCESS
                      03592          RRNCF  WREG, W, ACCESS
                      03593          ANDLW  0x0f
                      03594          MOVFF  WREG, EEDATA
                      03595          WRITE_EEPROM_DATA
                      03596          END_EEPROM_WRITE
                      03597         ENDIF
                      03598 
000C4E 6A00           03599         CLRF    YY_STATE, ACCESS
000C50 0012           03600         RETURN
                      03601 
000C52                03602 S6_2_DATA:
000C52 2EE8           03603         DECFSZ  WREG, F, ACCESS
000C54 D???           03604         BRA     S6_3_DATA
                      03605         ;
                      03606         ; S6.2: CF_BAUD Command completed:
                      03607         ;
                      03608         ;   ___7______6______5______4______3______2______1______0__
                      03609         ;  |                                  |                    |
                      03610         ;  |                0                 |          7         | YY_COMMAND
                      03611         ;  |______|______|______|______|______|______|______|______|
                      03612         ;  |      |      |      |      |                           |
                      03613         ;  |   0  |   1  |   1  |   1  |             2             | (not saved)
                      03614         ;  |______|______|______|______|______|______|______|______|
                      03615         ;  |      |                                                |  
                      03616         ;  |   0  |              baud rate code                    | YY_BUFFER+0
                      03617         ;  |______|______|______|______|______|______|______|______|
                      03618         ;  |      |                                                |
                      03619         ;  |   0  |                   $26                          | YY_DATA
                      03620         ;  |______|______|______|______|______|______|______|______|
                      03621         ;
                      03622         ; Validate inputs
                      03623         ;
000C56 0E01           03624         MOVLW   1
000C58 5C00           03625         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000C5A E2??           03626         BC      S6_2_VALID1
000C5C EF?? F???      03627         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03628 
000C60                03629 S6_2_VALID1:
000C60 E0??           03630         BZ      S6_2_VALID2
000C62 EF?? F???      03631         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03632 
000C66                03633 S6_2_VALID2:
000C66 EE?? F0??      03634         LFSR    0, YY_BUFFER
000C6A 0E0B           03635         MOVLW   0x0B
000C6C 5CEF           03636         SUBWF   INDF0, W, ACCESS                ; test baud rate in range [$00,$0A]
000C6E E3??           03637         BNC     S6_2_SET_BAUD
000C70 EF?? F???      03638         GOTO    ERR_COMMAND
                      03639 
000C74                03640 S6_2_SET_BAUD:
                      03641         ;
                      03642         ; Change the baud rate in the slave first, or we'll
                      03643         ; never be able to talk to it again...
                      03644         ;
                      03645         ; limit baud rate value 
000C74 0E0F           03646         MOVLW   0x0F
000C76 16EF           03647         ANDWF   INDF0, F, ACCESS
                      03648         IF ROLE_MASTER
                      03649          IF HAS_STATUS_LEDS
                      03650           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03651          ENDIF
                      03652          MOVLW  0xF0                            ; F0 72 <baud> 26  -> slave
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03653          CALL   SIO_WRITE_W
                      03654          MOVLW  0x72
                      03655          CALL   SIO_WRITE_W
                      03656          MOVF   INDF0, W, ACCESS
                      03657          CALL   SIO_WRITE_W
                      03658          MOVLW  0x26
                      03659          CALL   SIO_WRITE_W
                      03660          CALL   DRAIN_M_S_TX_BLOCKING           ; wait for command to slave to be fully sent
                      03661         ENDIF                                   ; before changing the UART speed on it.
                      03662 
                      03663         BEGIN_EEPROM_WRITE EE_BAUD
000C78 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000C7A 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_BAUD     ; NOTE interrupts need to be OFF here!
000C7C 0E00               M          MOVLW  HIGH(EE_BAUD)           ; NOTE interrupts need to be OFF here!
000C7E 6EAA               M          MOVWF  EEADRH, ACCESS
000C80 0E01               M          MOVLW  LOW(EE_BAUD)
000C82 6EA9               M          MOVWF  EEADR, ACCESS
000C84 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000C86 9CA6               M          BCF    EECON1, CFGS, ACCESS
000C88 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000C8A CFEF FFA8      03664         MOVFF   INDF0, EEDATA                   ; save value permanently (address 001)
                      03665         WRITE_EEPROM_DATA
000C8E 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C90 0E55               M          MOVLW  0x55
000C92 6EA7               M          MOVWF  EECON2, ACCESS
000C94 0EAA               M          MOVLW  0xAA
000C96 6EA7               M          MOVWF  EECON2, ACCESS
000C98 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C9A                    M WRITE_EEPROM_LOOP3:
000C9A A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C9C D???               M          BRA    WRITE_EEPROM_LOOP3
000C9E 0004               M          CLRWDT
000CA0 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000004                M EE_LL_XX    ++
                      03666         END_EEPROM_WRITE
000CA2 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000CA4 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000CA6 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000CA8 6AAA               M          CLRF   EEADRH, ACCESS
000CAA 6AA9               M          CLRF   EEADR, ACCESS
000CAC 50EF           03667         MOVF    INDF0, W, ACCESS
000CAE EC?? F???      03668         CALL    SIO_SET_BAUD_W
000CB2 6A00           03669         CLRF    YY_STATE, ACCESS
000CB4 0012           03670         RETURN
                      03671 
000CB6                03672 S6_3_DATA:
000CB6 2EE8           03673         DECFSZ  WREG, F, ACCESS
000CB8 D???           03674         BRA     S6_4_DATA
                      03675         ;
                      03676         ; S6.3: CF_RESET Command completed:
                      03677         ;
                      03678         ;   ___7______6______5______4______3______2______1______0__
                      03679         ;  |                                  |                    |
                      03680         ;  |                0                 |          7         | YY_COMMAND
                      03681         ;  |______|______|______|______|______|______|______|______|
                      03682         ;  |      |      |      |      |                           |
                      03683         ;  |   0  |   1  |   1  |   1  |             3             | (not saved)
                      03684         ;  |______|______|______|______|______|______|______|______|
                      03685         ;  |      |                                                |
                      03686         ;  |   0  |                   $24                          | YY_BUFFER+0
                      03687         ;  |______|______|______|______|______|______|______|______|
                      03688         ;  |      |                                                |
                      03689         ;  |   0  |                   $72                          | YY_DATA
                      03690         ;  |______|______|______|______|______|______|______|______|
                      03691         ;
                      03692         ; Validate inputs
                      03693         ;
000CBA 0E01           03694         MOVLW   1
000CBC 5C00           03695         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000CBE E2??           03696         BC      S6_3_VALID      
000CC0 EF?? F???      03697         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03698 
000CC4                03699 S6_3_VALID:
000CC4 E0??           03700         BZ      S6_3_RESET
000CC6 EF?? F???      03701         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03702 
000CCA                03703 S6_3_RESET:
000CCA EE?? F0??      03704         LFSR    0, YY_BUFFER
000CCE 0E24           03705         MOVLW   0x24
000CD0 62EF           03706         CPFSEQ  INDF0, ACCESS
000CD2 EF?? F???      03707         GOTO    ERR_COMMAND
000CD6 EF?? F???      03708         GOTO    FACTORY_RESET                   ; we never return from here
                      03709         ERR_BUG 0x70, ERR_CLASS_FATAL_RESET     
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000CDA 0E70               M          MOVLW  0x70
000CDC 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_FATAL_RESET == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_FATAL_RESET == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_FATAL_RESET == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000CDE 6A00               M          CLRF   YY_STATE, ACCESS
000CE0 0012               M          RETURN
                      03710 
000CE2                03711 S6_3_HALT:
000CE2 D???           03712         BRA     S6_3_HALT
                      03713 
000CE4                03714 S6_4_DATA:
000CE4 2EE8           03715         DECFSZ  WREG, F, ACCESS
000CE6 D???           03716         BRA     S6_5_DATA
                      03717         ;
                      03718         ; S6.4: CF_PHASE Command completed:
                      03719         ;
                      03720         ;   ___7______6______5______4______3______2______1______0__
                      03721         ;  |                                  |                    |
                      03722         ;  |                0                 |          7         | YY_COMMAND
                      03723         ;  |______|______|______|______|______|______|______|______|
                      03724         ;  |      |      |      |      |             | phase       |
                      03725         ;  |   0  |   1  |   0  |   0  |   X      X  |  <8:7>      | YY_YY
                      03726         ;  |______|______|______|______|______|______|______|______|
                      03727         ;  |      |                                                |
                      03728         ;  |   0  |               phase <6:0>                      | YY_BUFFER+0
                      03729         ;  |______|______|______|______|______|______|______|______|
                      03730         ;  |      |                                                |
                      03731         ;  |   0  |                   $50                          | YY_BUFFER+1
                      03732         ;  |______|______|______|______|______|______|______|______|
                      03733         ;  |      |                                                |
                      03734         ;  |   0  |                   $4F                          | YY_DATA
                      03735         ;  |______|______|______|______|______|______|______|______|
                      03736         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03737         ; Validate inputs
                      03738         ;
000CE8 0E02           03739         MOVLW   2
000CEA 5C00           03740         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000CEC E2??           03741         BC      S6_4_VALID
000CEE EF?? F???      03742         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03743 
000CF2                03744 S6_4_VALID:
000CF2 E0??           03745         BZ      S6_4_SET_PHASE
000CF4 EF?? F???      03746         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03747 
000CF8                03748 S6_4_SET_PHASE:
000CF8 EE?? F0??      03749         LFSR    0, YY_BUFFER+1
000CFC 0E50           03750         MOVLW   0x50
000CFE 62ED           03751         CPFSEQ  POSTDEC0, ACCESS
000D00 EF?? F???      03752         GOTO    ERR_COMMAND
                      03753         ;
                      03754         ; Set phase (and notify slave)
                      03755         ;
                      03756         IF ROLE_MASTER
                      03757          IF HAS_STATUS_LEDS
                      03758           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03759          ENDIF
                      03760          MOVLW  0xF0
                      03761          CALL   SIO_WRITE_W
                      03762          MOVF   YY_YY, W, ACCESS
                      03763          SEND_8_BIT_W
                      03764          ;CALL  SIO_WRITE_W
                      03765          MOVF   INDF0, W, ACCESS
                      03766          SEND_8_BIT_W
                      03767          ;CALL  SIO_WRITE_W
                      03768          MOVLW  0x50
                      03769          CALL   SIO_WRITE_W
                      03770          MOVLW  0x4F
                      03771          CALL   SIO_WRITE_W
                      03772         ENDIF
000D04 CFEF F???      03773         MOVFF   INDF0, PHASE_OFFSETL
000D08 B000           03774         BTFSC   YY_YY, 0, ACCESS
000D0A 8E00           03775         BSF     PHASE_OFFSETL, 7, ACCESS
000D0C 6A00           03776         CLRF    PHASE_OFFSETH, ACCESS
000D0E B200           03777         BTFSC   YY_YY, 1, ACCESS
000D10 8000           03778         BSF     PHASE_OFFSETH, 0, ACCESS
                      03779         BEGIN_EEPROM_WRITE EE_PHASE_H
000D12 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000D14 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_PHASE_H  ; NOTE interrupts need to be OFF here!
000D16 0E00               M          MOVLW  HIGH(EE_PHASE_H)        ; NOTE interrupts need to be OFF here!
000D18 6EAA               M          MOVWF  EEADRH, ACCESS
000D1A 0E03               M          MOVLW  LOW(EE_PHASE_H)
000D1C 6EA9               M          MOVWF  EEADR, ACCESS
000D1E 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000D20 9CA6               M          BCF    EECON1, CFGS, ACCESS
000D22 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000D24 C??? FFA8      03780         MOVFF   PHASE_OFFSETH, EEDATA
                      03781         WRITE_EEPROM_DATA
000D28 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D2A 0E55               M          MOVLW  0x55
000D2C 6EA7               M          MOVWF  EECON2, ACCESS
000D2E 0EAA               M          MOVLW  0xAA
000D30 6EA7               M          MOVWF  EECON2, ACCESS
000D32 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D34                    M WRITE_EEPROM_LOOP4:
000D34 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D36 D???               M          BRA    WRITE_EEPROM_LOOP4
000D38 0004               M          CLRWDT
000D3A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000005                M EE_LL_XX    ++
                      03782         SET_EEPROM_ADDRESS EE_PHASE_L
000D3C 0E00               M          MOVLW  HIGH(EE_PHASE_L)        ; NOTE interrupts need to be OFF here!
000D3E 6EAA               M          MOVWF  EEADRH, ACCESS
000D40 0E04               M          MOVLW  LOW(EE_PHASE_L)
000D42 6EA9               M          MOVWF  EEADR, ACCESS
000D44 C??? FFA8      03783         MOVFF   PHASE_OFFSETL, EEDATA
                      03784         WRITE_EEPROM_DATA
000D48 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D4A 0E55               M          MOVLW  0x55
000D4C 6EA7               M          MOVWF  EECON2, ACCESS
000D4E 0EAA               M          MOVLW  0xAA
000D50 6EA7               M          MOVWF  EECON2, ACCESS
000D52 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D54                    M WRITE_EEPROM_LOOP5:
000D54 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D56 D???               M          BRA    WRITE_EEPROM_LOOP5
000D58 0004               M          CLRWDT
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D5A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000006                M EE_LL_XX    ++
                      03785         END_EEPROM_WRITE
000D5C 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000D5E 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000D60 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000D62 6AAA               M          CLRF   EEADRH, ACCESS
000D64 6AA9               M          CLRF   EEADR, ACCESS
000D66 6A00           03786         CLRF    YY_STATE, ACCESS
000D68 0012           03787         RETURN
                      03788         
000D6A                03789 S6_5_DATA:
000D6A 2EE8           03790         DECFSZ  WREG, F, ACCESS
000D6C D???           03791         BRA     S6_6_DATA
                      03792         ;
                      03793         ; S6.5: CF_ADDR Command completed:
                      03794         ;
                      03795         ;   ___7______6______5______4______3______2______1______0__
                      03796         ;  |                                  |                    |
                      03797         ;  |                0                 |          7         | YY_COMMAND
                      03798         ;  |______|______|______|______|______|______|______|______|
                      03799         ;  |      |      |      |      |                           |
                      03800         ;  |   0  |   1  |   1  |   0  |    new device address     | YY_YY      
                      03801         ;  |______|______|______|______|______|______|______|______|
                      03802         ;  |      |                                                |
                      03803         ;  |   0  |                   $49                          | YY_BUFFER+0
                      03804         ;  |______|______|______|______|______|______|______|______|
                      03805         ;  |      |                                                |
                      03806         ;  |   0  |                   $41                          | YY_BUFFER+1
                      03807         ;  |______|______|______|______|______|______|______|______|
                      03808         ;  |      |                                                |
                      03809         ;  |   0  |                   $44                          | YY_DATA
                      03810         ;  |______|______|______|______|______|______|______|______|
                      03811         ;
                      03812         ; Validate inputs
                      03813         ;
000D6E 0E02           03814         MOVLW   2
000D70 5C00           03815         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000D72 E2??           03816         BC      S6_5_VALID
000D74 EF?? F???      03817         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03818 
000D78                03819 S6_5_VALID:
000D78 E0??           03820         BZ      S6_5_ADDR
000D7A EF?? F???      03821         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03822 
000D7E                03823 S6_5_ADDR:
000D7E EE?? F0??      03824         LFSR    0, YY_BUFFER+1
000D82 0E41           03825         MOVLW   0x41
000D84 62ED           03826         CPFSEQ  POSTDEC0, ACCESS
000D86 EF?? F???      03827         GOTO    ERR_COMMAND
000D8A 0E49           03828         MOVLW   0x49
000D8C 62EF           03829         CPFSEQ  INDF0, ACCESS
000D8E EF?? F???      03830         GOTO    ERR_COMMAND
                      03831         ;
                      03832         ; set address
                      03833         ;
000D92 5000           03834         MOVF    YY_YY, W, ACCESS
000D94 0B0F           03835         ANDLW   0x0F
000D96 6E00           03836         MOVWF   MY_ADDRESS, ACCESS
                      03837         BEGIN_EEPROM_WRITE EE_DEV_ID
000D98 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000D9A 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DEV_ID   ; NOTE interrupts need to be OFF here!
000D9C 0E00               M          MOVLW  HIGH(EE_DEV_ID)         ; NOTE interrupts need to be OFF here!
000D9E 6EAA               M          MOVWF  EEADRH, ACCESS
000DA0 0E02               M          MOVLW  LOW(EE_DEV_ID)
000DA2 6EA9               M          MOVWF  EEADR, ACCESS
000DA4 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000DA6 9CA6               M          BCF    EECON1, CFGS, ACCESS
000DA8 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000DAA C??? FFA8      03838         MOVFF   MY_ADDRESS, EEDATA
                      03839         WRITE_EEPROM_DATA
000DAE 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000DB0 0E55               M          MOVLW  0x55
000DB2 6EA7               M          MOVWF  EECON2, ACCESS
000DB4 0EAA               M          MOVLW  0xAA
000DB6 6EA7               M          MOVWF  EECON2, ACCESS
000DB8 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000DBA                    M WRITE_EEPROM_LOOP6:
000DBA A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000DBC D???               M          BRA    WRITE_EEPROM_LOOP6
000DBE 0004               M          CLRWDT
000DC0 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000007                M EE_LL_XX    ++
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03840         END_EEPROM_WRITE
000DC2 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000DC4 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000DC6 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000DC8 6AAA               M          CLRF   EEADRH, ACCESS
000DCA 6AA9               M          CLRF   EEADR, ACCESS
000DCC 6A00           03841         CLRF    YY_STATE, ACCESS
000DCE 0012           03842         RETURN
                      03843 
000DD0                03844 S6_6_DATA:
000DD0 2EE8           03845         DECFSZ  WREG, F, ACCESS
000DD2 D???           03846         BRA     S6_7_DATA
                      03847         ;
                      03848         ; S6.6: SLEEP Command completed:
                      03849         ;
                      03850         ;   ___7______6______5______4______3______2______1______0__
                      03851         ;  |                                  |                    |
                      03852         ;  |                0                 |          7         | YY_COMMAND
                      03853         ;  |______|______|______|______|______|______|______|______|
                      03854         ;  |      |      |      |      |                           |
                      03855         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      03856         ;  |______|______|______|______|______|______|______|______|
                      03857         ;  |      |                                                |
                      03858         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      03859         ;  |______|______|______|______|______|______|______|______|
                      03860         ;  |      |                                                |
                      03861         ;  |   0  |                   $5A                          | YY_DATA
                      03862         ;  |______|______|______|______|______|______|______|______|
                      03863         ;
                      03864         ; Validate inputs
                      03865         ;
000DD4 0E01           03866         MOVLW   1
000DD6 5C00           03867         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000DD8 E2??           03868         BC      S6_6_VALID
000DDA EF?? F???      03869         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03870 
000DDE                03871 S6_6_VALID:
000DDE E0??           03872         BZ      S6_6_SLEEP
000DE0 EF?? F???      03873         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03874 
000DE4                03875 S6_6_SLEEP:
000DE4 EE?? F0??      03876         LFSR    0, YY_BUFFER
000DE8 0E5A           03877         MOVLW   0x5A
000DEA 62EF           03878         CPFSEQ  INDF0, ACCESS
000DEC EF?? F???      03879         GOTO    ERR_COMMAND
000DF0 6A00           03880         CLRF    YY_STATE, ACCESS
000DF2                03881 DO_CMD_SLEEP:
000DF2 B800           03882         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; don't sleep in priv mode
000DF4 0012           03883         RETURN
                      03884         ;
                      03885         ; Pass command to slave
                      03886         ;
                      03887         IF ROLE_MASTER
                      03888          IF HAS_STATUS_LEDS
                      03889           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03890          ENDIF
                      03891          MOVLW  0xF0
                      03892          CALL   SIO_WRITE_W
                      03893          CLRF   WREG, ACCESS
                      03894          CALL   SIO_WRITE_W
                      03895          MOVLW  0x5A
                      03896          CALL   SIO_WRITE_W
                      03897          MOVLW  0x5A
                      03898          CALL   SIO_WRITE_W
                      03899         ENDIF
                      03900         ;
                      03901         ; Tell power supply to sleep
                      03902         ;
                      03903         IF HAS_POWER_CTRL
                      03904          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      03905         ENDIF
                      03906         IF HAS_STATUS_LEDS
                      03907          SET_SSR_SLOW_FLASH SSR_GREEN
                      03908          SET_SSR_SLOW_FLASH SSR_YELLOW
                      03909          SET_SSR_SLOW_FLASH SSR_RED
                      03910         ENDIF
000DF6 8600           03911         BSF     SSR_STATE, SLEEP_MODE, ACCESS
000DF8 0012           03912         RETURN
                      03913 
000DFA                03914 S6_7_DATA:
000DFA 2EE8           03915         DECFSZ  WREG, F, ACCESS
000DFC D???           03916         BRA     S6_8_DATA
                      03917         ;
                      03918         ; S6.7: WAKE Command completed:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03919         ;
                      03920         ;   ___7______6______5______4______3______2______1______0__
                      03921         ;  |                                  |                    |
                      03922         ;  |                0                 |          7         | YY_COMMAND
                      03923         ;  |______|______|______|______|______|______|______|______|
                      03924         ;  |      |      |      |      |                           |
                      03925         ;  |   0  |   0  |   0  |   0  |             1             | (not saved)
                      03926         ;  |______|______|______|______|______|______|______|______|
                      03927         ;  |      |                                                |
                      03928         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      03929         ;  |______|______|______|______|______|______|______|______|
                      03930         ;  |      |                                                |
                      03931         ;  |   0  |                   $5A                          | YY_DATA
                      03932         ;  |______|______|______|______|______|______|______|______|
                      03933         ;
                      03934         ; Validate inputs
                      03935         ;
000DFE 0E01           03936         MOVLW   1
000E00 5C00           03937         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E02 E2??           03938         BC      S6_7_VALID
000E04 EF?? F???      03939         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03940 
000E08                03941 S6_7_VALID:
000E08 E0??           03942         BZ      S6_7_WAKE
000E0A EF?? F???      03943         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03944 
000E0E                03945 S6_7_WAKE:
000E0E EE?? F0??      03946         LFSR    0, YY_BUFFER
000E12 0E5A           03947         MOVLW   0x5A
000E14 62EF           03948         CPFSEQ  INDF0, ACCESS
000E16 EF?? F???      03949         GOTO    ERR_COMMAND
000E1A 6A00           03950         CLRF    YY_STATE, ACCESS
                      03951 
000E1C                03952 DO_CMD_WAKE:
                      03953         ;
                      03954         ; Pass command to slave
                      03955         ;
                      03956         IF ROLE_MASTER
                      03957          IF HAS_STATUS_LEDS
                      03958           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03959          ENDIF
                      03960          MOVLW  0xF0
                      03961          CALL   SIO_WRITE_W
                      03962          MOVLW  0x01
                      03963          CALL   SIO_WRITE_W
                      03964          MOVLW  0x5A
                      03965          CALL   SIO_WRITE_W
                      03966          MOVLW  0x5A
                      03967          CALL   SIO_WRITE_W
                      03968         ENDIF
                      03969         ;
                      03970         ; Tell power supply to wake up
                      03971         ;
                      03972         IF HAS_POWER_CTRL
                      03973          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      03974         ENDIF
                      03975         IF HAS_STATUS_LEDS
                      03976          ;SET_SSR_SLOW_FADE SSR_GREEN
                      03977          SET_SSR_NORMAL_MODE SSR_GREEN
                      03978         ENDIF
                      03979         ; If in DMX mode, use slower green LED pattern
000E1C AC00           03980         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
000E1E D???           03981         BRA     S6_8_X
                      03982         IF HAS_STATUS_LEDS
                      03983          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      03984          SET_SSR_DMX_MODE SSR_GREEN
                      03985         ENDIF
000E20                03986 S6_8_X:
                      03987         IF HAS_STATUS_LEDS
                      03988          SET_SSR_OFF SSR_YELLOW
                      03989          SET_SSR_OFF SSR_RED
                      03990         ENDIF
000E20 9600           03991         BCF     SSR_STATE, SLEEP_MODE, ACCESS
000E22 6800           03992         SETF    AUTO_OFF_CTRH, ACCESS
000E24 6800           03993         SETF    AUTO_OFF_CTRL, ACCESS
000E26 0012           03994         RETURN
                      03995 
000E28                03996 S6_8_DATA:
000E28 2EE8           03997         DECFSZ  WREG, F, ACCESS
000E2A D???           03998         BRA     S6_9_DATA
                      03999         ;
                      04000         ; S6.8: SHUTDOWN Command completed:
                      04001         ;
                      04002         ;   ___7______6______5______4______3______2______1______0__
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04003         ;  |                                  |                    |
                      04004         ;  |                0                 |          7         | YY_COMMAND
                      04005         ;  |______|______|______|______|______|______|______|______|
                      04006         ;  |      |      |      |      |                           |
                      04007         ;  |   0  |   0  |   0  |   0  |             2             | (not saved)
                      04008         ;  |______|______|______|______|______|______|______|______|
                      04009         ;  |      |                                                |
                      04010         ;  |   0  |                   $58                          | YY_BUFFER
                      04011         ;  |______|______|______|______|______|______|______|______|
                      04012         ;  |      |                                                |
                      04013         ;  |   0  |                   $59                          | YY_DATA
                      04014         ;  |______|______|______|______|______|______|______|______|
                      04015         ;
                      04016         ; Validate inputs
                      04017         ;
000E2C 0E01           04018         MOVLW   1
000E2E 5C00           04019         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E30 E2??           04020         BC      S6_8_VALID
000E32 EF?? F???      04021         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04022 
000E36                04023 S6_8_VALID:
000E36 E0??           04024         BZ      S6_8_SHUTDOWN
000E38 EF?? F???      04025         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04026 
000E3C                04027 S6_8_SHUTDOWN:
000E3C EE?? F0??      04028         LFSR    0, YY_BUFFER
000E40 0E58           04029         MOVLW   0x58
000E42 62EF           04030         CPFSEQ  INDF0, ACCESS
000E44 EF?? F???      04031         GOTO    ERR_COMMAND
                      04032         ;       
                      04033         ; shutdown
                      04034         ;
000E48 EF?? F???      04035         GOTO    HALT_MODE
                      04036 
000E4C                04037 S6_9_DATA:
000E4C 2EE8           04038         DECFSZ  WREG, F, ACCESS
000E4E D???           04039         BRA     S6_10_DATA
                      04040         ;
                      04041         ; S6.9: QUERY Command completed:
                      04042         ;
                      04043         ;   ___7______6______5______4______3______2______1______0__
                      04044         ;  |                                  |                    |
                      04045         ;  |                0                 |          7         | YY_COMMAND
                      04046         ;  |______|______|______|______|______|______|______|______|
                      04047         ;  |      |      |      |      |                           |
                      04048         ;  |   0  |   0  |   0  |   0  |             3             | (not saved)
                      04049         ;  |______|______|______|______|______|______|______|______|
                      04050         ;  |      |                                                |
                      04051         ;  |   0  |                   $24                          | YY_BUFFER+0
                      04052         ;  |______|______|______|______|______|______|______|______|
                      04053         ;  |      |                                                |
                      04054         ;  |   0  |                   $54                          | YY_DATA
                      04055         ;  |______|______|______|______|______|______|______|______|
                      04056         ;
                      04057         ; Validate inputs
                      04058         ;
000E50 0E01           04059         MOVLW   1
000E52 5C00           04060         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E54 E2??           04061         BC      S6_9_VALID
000E56 EF?? F???      04062         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04063 
000E5A                04064 S6_9_VALID:
000E5A E0??           04065         BZ      S6_9_QUERY
000E5C EF?? F???      04066         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04067 
000E60                04068 S6_9_QUERY:
000E60 EE?? F0??      04069         LFSR    0, YY_BUFFER
000E64 0E24           04070         MOVLW   0x24
000E66 62EF           04071         CPFSEQ  INDF0, ACCESS
000E68 EF?? F???      04072         GOTO    ERR_COMMAND
                      04073         ;
                      04074         ; return status of unit
                      04075         ;
                      04076         IF ROLE_MASTER
                      04077          IF HAS_STATUS_LEDS
                      04078           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04079          ENDIF
                      04080          MOVLW  0xF0                    ; initiate write-through IC_TXSTA command
                      04081          CALL   SIO_WRITE_W             ; to slave CPU
                      04082          MOVLW  0x23
                      04083          CALL   SIO_WRITE_W
                      04084          MOVLW  .30                     ; write 31-byte packet
                      04085          CALL   SIO_WRITE_W
                      04086         ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04087          IF ROLE_STANDALONE
000E6C EC?? F???      04088           CALL  TR_ON_DELAY
000E70 8682           04089           BSF   PORT_T_R, BIT_T_R, ACCESS               ; Fire up our transmitter now
000E72 9400           04090           BCF   SSR_STATE2, INHIBIT_OUTPUT, ACCESS      ; Allow sending output
                      04091          ELSE
                      04092           ERR_BUG 0x0F, ERR_CLASS_INT_COMMAND
                      04093          ENDIF
                      04094         ENDIF
000E74 5000           04095         MOVF    MY_ADDRESS, W, ACCESS
000E76 09F0           04096         IORLW   0xF0
                      04097         IF ROLE_MASTER
                      04098          BCF    WREG, 7, ACCESS
                      04099         ENDIF
000E78 EC?? F???      04100         CALL    SIO_WRITE_W                     ; 00 start byte                         <1111aaaa>
000E7C 0E1F           04101         MOVLW   0x1F
                      04102         SEND_8_BIT_W                            ; 01 "reply to query" packet type       <00011111>
000E7E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000E80 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000E82 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E84 D???               M         BRA     S8B_CHK_7E1
000E86 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000E8A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000E8C EC?? F???          M         CALL    SIO_WRITE_W                     
000E90 D???               M         BRA     S8B_END1
000E92                    M S8B_CHK_7E1:
000E92 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000E94 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E96 D???               M         BRA     S8B_CHK_MSB1
000E98 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000E9A EC?? F???          M         CALL    SIO_WRITE_W
000E9E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000EA0 EC?? F???          M         CALL    SIO_WRITE_W
000EA4 D???               M         BRA     S8B_END1
000EA6                    M S8B_CHK_MSB1:
000EA6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000EA8 D???               M         BRA     S8B_SEND_NORMAL1
000EAA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000EAC EC?? F???          M         CALL    SIO_WRITE_W
000EB0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000EB2                    M S8B_SEND_NORMAL1:
000EB2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000EB4 EC?? F???          M         CALL    SIO_WRITE_W     
000EB8                    M S8B_END1:
  00000002                M S8B_LABEL ++
000EB8 0E31           04103         MOVLW   0x31
                      04104         SEND_8_BIT_W                            ; 02 ROM/format version 3.1             <00110001>
000EBA 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000EBC 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000EBE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000EC0 D???               M         BRA     S8B_CHK_7E2
000EC2 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000EC6 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000EC8 EC?? F???          M         CALL    SIO_WRITE_W                     
000ECC D???               M         BRA     S8B_END2
000ECE                    M S8B_CHK_7E2:
000ECE 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000ED0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000ED2 D???               M         BRA     S8B_CHK_MSB2
000ED4 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000ED6 EC?? F???          M         CALL    SIO_WRITE_W
000EDA 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000EDC EC?? F???          M         CALL    SIO_WRITE_W
000EE0 D???               M         BRA     S8B_END2
000EE2                    M S8B_CHK_MSB2:
000EE2 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000EE4 D???               M         BRA     S8B_SEND_NORMAL2
000EE6 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000EE8 EC?? F???          M         CALL    SIO_WRITE_W
000EEC 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000EEE                    M S8B_SEND_NORMAL2:
000EEE 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000EF0 EC?? F???          M         CALL    SIO_WRITE_W     
000EF4                    M S8B_END2:
  00000003                M S8B_LABEL ++
000EF4 6AE8           04105         CLRF    WREG, ACCESS
                      04106         IF HAS_SENSORS
                      04107          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If sensor A is enabled on this board,
                      04108          BSF    WREG, 6, ACCESS                 ; set the Sc bit for that sensor.
                      04109          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS ; and for sensor B
                      04110          BSF    WREG, 5, ACCESS                 ; 
                      04111          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS ; and for sensor C
                      04112          BSF    WREG, 4, ACCESS                 ; 
                      04113          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS ; and for sensor D
                      04114          BSF    WREG, 3, ACCESS                 ; 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04115         ENDIF                                   ; W=0ABCD---  1=sensor configured; 0=LED
000EF6 BE00           04116         BTFSC   DMX_SLOTH, DMX_EN, ACCESS
000EF8 84E8           04117         BSF     WREG, 2, ACCESS                 ;   0----d--  DMX enable bit
000EFA B000           04118         BTFSC   DMX_SLOTH, DMX_BIT8, ACCESS
000EFC 82E8           04119         BSF     WREG, 1, ACCESS                 ;   0-----c-  DMX channel bit 8
000EFE BE00           04120         BTFSC   DMX_SLOTL, 7, ACCESS            ; 
000F00 80E8           04121         BSF     WREG, 0, ACCESS                 ;   0------c  DMX channel bit 7
                      04122         SEND_8_BIT_W                            ; 03 sensor, DMX status                 <0ABCDdcc> 
000F02 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F04 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F06 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F08 D???               M         BRA     S8B_CHK_7E3
000F0A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F0E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F10 EC?? F???          M         CALL    SIO_WRITE_W                     
000F14 D???               M         BRA     S8B_END3
000F16                    M S8B_CHK_7E3:
000F16 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F18 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F1A D???               M         BRA     S8B_CHK_MSB3
000F1C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F1E EC?? F???          M         CALL    SIO_WRITE_W
000F22 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F24 EC?? F???          M         CALL    SIO_WRITE_W
000F28 D???               M         BRA     S8B_END3
000F2A                    M S8B_CHK_MSB3:
000F2A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F2C D???               M         BRA     S8B_SEND_NORMAL3
000F2E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F30 EC?? F???          M         CALL    SIO_WRITE_W
000F34 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F36                    M S8B_SEND_NORMAL3:
000F36 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F38 EC?? F???          M         CALL    SIO_WRITE_W     
000F3C                    M S8B_END3:
  00000004                M S8B_LABEL ++
000F3C 5000           04123         MOVF    DMX_SLOTL, W, ACCESS            ;   0ccccccc  DMX channel bits 6:0
000F3E 0B7F           04124         ANDLW   0x7F
                      04125         SEND_8_BIT_W                            ; 04 DMX status
000F40 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F42 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F44 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F46 D???               M         BRA     S8B_CHK_7E4
000F48 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F4C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F4E EC?? F???          M         CALL    SIO_WRITE_W                     
000F52 D???               M         BRA     S8B_END4
000F54                    M S8B_CHK_7E4:
000F54 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F56 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F58 D???               M         BRA     S8B_CHK_MSB4
000F5A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F5C EC?? F???          M         CALL    SIO_WRITE_W
000F60 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F62 EC?? F???          M         CALL    SIO_WRITE_W
000F66 D???               M         BRA     S8B_END4
000F68                    M S8B_CHK_MSB4:
000F68 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F6A D???               M         BRA     S8B_SEND_NORMAL4
000F6C 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F6E EC?? F???          M         CALL    SIO_WRITE_W
000F72 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F74                    M S8B_SEND_NORMAL4:
000F74 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F76 EC?? F???          M         CALL    SIO_WRITE_W     
000F7A                    M S8B_END4:
  00000005                M S8B_LABEL ++
000F7A 6AE8           04126         CLRF    WREG, ACCESS
000F7C B800           04127         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; W=00000qs0
000F7E 84E8           04128         BSF     WREG, 2, ACCESS
000F80 B600           04129         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
000F82 82E8           04130         BSF     WREG, 1, ACCESS
                      04131         SEND_8_BIT_W
000F84 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F86 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F88 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F8A D???               M         BRA     S8B_CHK_7E5
000F8C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F90 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F92 EC?? F???          M         CALL    SIO_WRITE_W                     
000F96 D???               M         BRA     S8B_END5
000F98                    M S8B_CHK_7E5:
000F98 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F9A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F9C D???               M         BRA     S8B_CHK_MSB5
000F9E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000FA0 EC?? F???          M         CALL    SIO_WRITE_W
000FA4 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000FA6 EC?? F???          M         CALL    SIO_WRITE_W
000FAA D???               M         BRA     S8B_END5
000FAC                    M S8B_CHK_MSB5:
000FAC AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000FAE D???               M         BRA     S8B_SEND_NORMAL5
000FB0 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000FB2 EC?? F???          M         CALL    SIO_WRITE_W
000FB6 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000FB8                    M S8B_SEND_NORMAL5:
000FB8 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000FBA EC?? F???          M         CALL    SIO_WRITE_W     
000FBE                    M S8B_END5:
  00000006                M S8B_LABEL ++
                      04132         ;CALL   SIO_WRITE_W                     ; 05 masks, priv, sleep, mem full       <0ABCDqsf> XXX N
                            OT ALL IMPLEMENTED
000FBE 6AE8           04133         CLRF    WREG, ACCESS
                      04134         IF HAS_SENSORS
                      04135          MOVLW  0x78                            ; Initially set all sensors to 1
                      04136          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If that line is not a sensor... 
                      04137          BTFSC  PORT_SENS_A, BIT_SENS_A, ACCESS ; Or the sensor is not pulled low...
                      04138          BCF    WREG, 6, ACCESS                 ; Then clear the reported flag.
                      04139          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS 
                      04140          BTFSC  PORT_SENS_B, BIT_SENS_B, ACCESS 
                      04141          BCF    WREG, 5, ACCESS                 
                      04142          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS 
                      04143          BTFSC  PORT_SENS_C, BIT_SENS_C, ACCESS 
                      04144          BCF    WREG, 4, ACCESS                 
                      04145          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS 
                      04146          BTFSC  PORT_SENS_D, BIT_SENS_D, ACCESS 
                      04147          BCF    WREG, 3, ACCESS                 ; W=0ABCD---  1=sensor active (low) 0=inactive (high)
                      04148         ENDIF
000FC0 B600           04149         BTFSC   SSR_STATE2, PRIV_FORBID, ACCESS
000FC2 84E8           04150         BSF     WREG, 2, ACCESS                 
000FC4 B000           04151         BTFSC   PHASE_OFFSETH, 0, ACCESS
000FC6 82E8           04152         BSF     WREG, 1, ACCESS
000FC8 BE00           04153         BTFSC   PHASE_OFFSETL, 7, ACCESS
000FCA 80E8           04154         BSF     WREG, 0, ACCESS
                      04155         SEND_8_BIT_W
000FCC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000FCE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000FD0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FD2 D???               M         BRA     S8B_CHK_7E6
000FD4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000FD8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000FDA EC?? F???          M         CALL    SIO_WRITE_W                     
000FDE D???               M         BRA     S8B_END6
000FE0                    M S8B_CHK_7E6:
000FE0 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000FE2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FE4 D???               M         BRA     S8B_CHK_MSB6
000FE6 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000FE8 EC?? F???          M         CALL    SIO_WRITE_W
000FEC 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000FEE EC?? F???          M         CALL    SIO_WRITE_W
000FF2 D???               M         BRA     S8B_END6
000FF4                    M S8B_CHK_MSB6:
000FF4 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000FF6 D???               M         BRA     S8B_SEND_NORMAL6
000FF8 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000FFA EC?? F???          M         CALL    SIO_WRITE_W
000FFE 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001000                    M S8B_SEND_NORMAL6:
001000 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001002 EC?? F???          M         CALL    SIO_WRITE_W     
001006                    M S8B_END6:
  00000007                M S8B_LABEL ++
                      04156         ;CALL   SIO_WRITE_W                     ; 06 active sensors, xpriv, phase<8:7>  <0ABCDXpp> XXX N
                            OT ALL IMPLEMENTED
001006 5000           04157         MOVF    PHASE_OFFSETL, W, ACCESS
001008 9EE8           04158         BCF     WREG, 7, ACCESS
                      04159         SEND_8_BIT_W
00100A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00100C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00100E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001010 D???               M         BRA     S8B_CHK_7E7
001012 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001016 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001018 EC?? F???          M         CALL    SIO_WRITE_W                     
00101C D???               M         BRA     S8B_END7
00101E                    M S8B_CHK_7E7:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00101E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001020 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001022 D???               M         BRA     S8B_CHK_MSB7
001024 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001026 EC?? F???          M         CALL    SIO_WRITE_W
00102A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00102C EC?? F???          M         CALL    SIO_WRITE_W
001030 D???               M         BRA     S8B_END7
001032                    M S8B_CHK_MSB7:
001032 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001034 D???               M         BRA     S8B_SEND_NORMAL7
001036 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001038 EC?? F???          M         CALL    SIO_WRITE_W
00103C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00103E                    M S8B_SEND_NORMAL7:
00103E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001040 EC?? F???          M         CALL    SIO_WRITE_W     
001044                    M S8B_END7:
  00000008                M S8B_LABEL ++
                      04160         ;CALL   SIO_WRITE_W                     ; 07 phase <6:0>                        <0ppppppp>
001044 6AE8           04161         CLRF    WREG, ACCESS
001046 EC?? F???      04162         CALL    SIO_WRITE_W                     ; 08 eeprom memory free <14:7>          <0eeeeeee> XXX N
                            OT IMPLEMENTED
00104A 6AE8           04163         CLRF    WREG, ACCESS
00104C EC?? F???      04164         CALL    SIO_WRITE_W                     ; 09 eeprom memory free <6:0>           <0eeeeeee> XXX N
                            OT IMPLEMENTED
001050 6AE8           04165         CLRF    WREG, ACCESS
001052 EC?? F???      04166         CALL    SIO_WRITE_W                     ; 10 RAM memory free <14:7>             <0MMMMMMM> XXX N
                            OT IMPLEMENTED
001056 6AE8           04167         CLRF    WREG, ACCESS
001058 EC?? F???      04168         CALL    SIO_WRITE_W                     ; 11 RAM memory free <6:0>              <0MMMMMMM> XXX N
                            OT IMPLEMENTED
                      04169         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      04170          MOVLW  0x00
                      04171         ELSE
                      04172          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      04173           MOVLW 0x01
                      04174          ELSE
                      04175           ERR_BUG 0x10, ERR_CLASS_DEVICE
00105C 0E10               M          MOVLW  0x10
00105E 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_DEVICE == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_DEVICE == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_DEVICE == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001060 6A00               M          CLRF   YY_STATE, ACCESS
001062 0012               M          RETURN
                      04176          ENDIF
                      04177         ENDIF
                      04178         SEND_8_BIT_W
001064 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001066 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001068 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00106A D???               M         BRA     S8B_CHK_7E8
00106C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001070 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001072 EC?? F???          M         CALL    SIO_WRITE_W                     
001076 D???               M         BRA     S8B_END8
001078                    M S8B_CHK_7E8:
001078 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00107A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00107C D???               M         BRA     S8B_CHK_MSB8
00107E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001080 EC?? F???          M         CALL    SIO_WRITE_W
001084 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001086 EC?? F???          M         CALL    SIO_WRITE_W
00108A D???               M         BRA     S8B_END8
00108C                    M S8B_CHK_MSB8:
00108C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00108E D???               M         BRA     S8B_SEND_NORMAL8
001090 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001092 EC?? F???          M         CALL    SIO_WRITE_W
001096 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001098                    M S8B_SEND_NORMAL8:
001098 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00109A EC?? F???          M         CALL    SIO_WRITE_W     
00109E                    M S8B_END8:
  00000009                M S8B_LABEL ++
                      04179         ;CALL   SIO_WRITE_W                     ; 12 sequence flag, device ID           <0X0iiiii> XXX N
                            OT ALL IMPLEMENTED
00109E 6AE8           04180         CLRF    WREG, ACCESS
0010A0 EC?? F???      04181         CALL    SIO_WRITE_W                     ; 13 executing sequence                 <0xxxxxxx> XXX N
                            OT IMPLEMENTED
                      04182 
0010A4 0E00           04183         MOVLW   0x00
0010A6 EC?? F???      04184         CALL    SIO_WRITE_W                     ; 14 sensor A settings                  <0owE0000> XXX N
                            OT IMPLEMENTED
0010AA 0E00           04185         MOVLW   0x00
0010AC EC?? F???      04186         CALL    SIO_WRITE_W                     ; 15 sensor A pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010B0 0E00           04187         MOVLW   0x00
0010B2 EC?? F???      04188         CALL    SIO_WRITE_W                     ; 16 sensor A sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010B6 0E00           04189         MOVLW   0x00
0010B8 EC?? F???      04190         CALL    SIO_WRITE_W                     ; 17 sensor A post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04191 
0010BC 0E01           04192         MOVLW   0x01
0010BE EC?? F???      04193         CALL    SIO_WRITE_W                     ; 18 sensor B settings                  <0owE0001> XXX N
                            OT IMPLEMENTED
0010C2 0E00           04194         MOVLW   0x00
0010C4 EC?? F???      04195         CALL    SIO_WRITE_W                     ; 19 sensor B pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010C8 0E00           04196         MOVLW   0x00
0010CA EC?? F???      04197         CALL    SIO_WRITE_W                     ; 20 sensor B sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010CE 0E00           04198         MOVLW   0x00
0010D0 EC?? F???      04199         CALL    SIO_WRITE_W                     ; 21 sensor B post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04200 
0010D4 0E02           04201         MOVLW   0x02
0010D6 EC?? F???      04202         CALL    SIO_WRITE_W                     ; 22 sensor C settings                  <0owE0010> XXX N
                            OT IMPLEMENTED
0010DA 0E00           04203         MOVLW   0x00
0010DC EC?? F???      04204         CALL    SIO_WRITE_W                     ; 23 sensor C pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010E0 0E00           04205         MOVLW   0x00
0010E2 EC?? F???      04206         CALL    SIO_WRITE_W                     ; 24 sensor C sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010E6 0E00           04207         MOVLW   0x00
0010E8 EC?? F???      04208         CALL    SIO_WRITE_W                     ; 25 sensor C post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04209 
0010EC 0E03           04210         MOVLW   0x03
0010EE EC?? F???      04211         CALL    SIO_WRITE_W                     ; 26 sensor D settings                  <0owE0011> XXX N
                            OT IMPLEMENTED
0010F2 0E00           04212         MOVLW   0x00
0010F4 EC?? F???      04213         CALL    SIO_WRITE_W                     ; 27 sensor D pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010F8 0E00           04214         MOVLW   0x00
0010FA EC?? F???      04215         CALL    SIO_WRITE_W                     ; 28 sensor D sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010FE 0E00           04216         MOVLW   0x00
001100 EC?? F???      04217         CALL    SIO_WRITE_W                     ; 29 sensor D post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04218         
001104 5000           04219         MOVF    LAST_ERROR, W, ACCESS
001106 6A00           04220         CLRF    LAST_ERROR, ACCESS
                      04221         SEND_8_BIT_W
001108 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00110A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00110C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00110E D???               M         BRA     S8B_CHK_7E9
001110 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001114 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001116 EC?? F???          M         CALL    SIO_WRITE_W                     
00111A D???               M         BRA     S8B_END9
00111C                    M S8B_CHK_7E9:
00111C 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00111E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001120 D???               M         BRA     S8B_CHK_MSB9
001122 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001124 EC?? F???          M         CALL    SIO_WRITE_W
001128 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00112A EC?? F???          M         CALL    SIO_WRITE_W
00112E D???               M         BRA     S8B_END9
001130                    M S8B_CHK_MSB9:
001130 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001132 D???               M         BRA     S8B_SEND_NORMAL9
001134 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001136 EC?? F???          M         CALL    SIO_WRITE_W
00113A 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00113C                    M S8B_SEND_NORMAL9:
00113C 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00113E EC?? F???          M         CALL    SIO_WRITE_W     
001142                    M S8B_END9:
  0000000A                M S8B_LABEL ++
                      04222         ;CALL   SIO_WRITE_W                     ; 30 fault code                         <0fffffff>
                      04223         IF ROLE_MASTER
                      04224          MOVLW  B'00011011'
                      04225          CALL   SIO_WRITE_W                     ; 31 end of packet to slave chip
                      04226         ELSE
001142 6AE8           04227          CLRF   WREG, ACCESS
001144 EC?? F???      04228          CALL   SIO_WRITE_W                     ; 31 (nil) slave fault code
001148 6AE8           04229          CLRF   WREG, ACCESS    
00114A EC?? F???      04230          CALL   SIO_WRITE_W                     ; 32 (nil) slave phase offset <8:7>
00114E 6AE8           04231          CLRF   WREG, ACCESS    
001150 EC?? F???      04232          CALL   SIO_WRITE_W                     ; 33 (nil) slave phase offset <6:0>
001154 0E??           04233          MOVLW  UPPER(SYS_SNH)
001156 6EF8           04234          MOVWF  TBLPTRU, ACCESS
001158 0E??           04235          MOVLW  HIGH(SYS_SNH)
00115A 6EF7           04236          MOVWF  TBLPTRH, ACCESS
00115C 0E??           04237          MOVLW  LOW(SYS_SNH)
00115E 6EF6           04238          MOVWF  TBLPTRL, ACCESS
001160 0009           04239          TBLRD*+
001162 50F5           04240          MOVF   TABLAT, W, ACCESS
                      04241          SEND_8_BIT_W                           ; 34 Serial Number (MSB)
001164 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001166 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001168 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00116A D???               M         BRA     S8B_CHK_7E10
00116C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001170 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001172 EC?? F???          M         CALL    SIO_WRITE_W                     
001176 D???               M         BRA     S8B_END10
001178                    M S8B_CHK_7E10:
001178 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00117A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00117C D???               M         BRA     S8B_CHK_MSB10
00117E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001180 EC?? F???          M         CALL    SIO_WRITE_W
001184 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001186 EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00118A D???               M         BRA     S8B_END10
00118C                    M S8B_CHK_MSB10:
00118C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00118E D???               M         BRA     S8B_SEND_NORMAL10
001190 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001192 EC?? F???          M         CALL    SIO_WRITE_W
001196 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001198                    M S8B_SEND_NORMAL10:
001198 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00119A EC?? F???          M         CALL    SIO_WRITE_W     
00119E                    M S8B_END10:
  0000000B                M S8B_LABEL ++
00119E 0009           04242          TBLRD*+
0011A0 50F5           04243          MOVF   TABLAT, W, ACCESS
                      04244          SEND_8_BIT_W                           ; 35 Serial Number (LSB)
0011A2 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0011A4 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0011A6 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0011A8 D???               M         BRA     S8B_CHK_7E11
0011AA EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0011AE 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0011B0 EC?? F???          M         CALL    SIO_WRITE_W                     
0011B4 D???               M         BRA     S8B_END11
0011B6                    M S8B_CHK_7E11:
0011B6 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0011B8 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0011BA D???               M         BRA     S8B_CHK_MSB11
0011BC 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0011BE EC?? F???          M         CALL    SIO_WRITE_W
0011C2 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0011C4 EC?? F???          M         CALL    SIO_WRITE_W
0011C8 D???               M         BRA     S8B_END11
0011CA                    M S8B_CHK_MSB11:
0011CA AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0011CC D???               M         BRA     S8B_SEND_NORMAL11
0011CE 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0011D0 EC?? F???          M         CALL    SIO_WRITE_W
0011D4 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0011D6                    M S8B_SEND_NORMAL11:
0011D6 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0011D8 EC?? F???          M         CALL    SIO_WRITE_W     
0011DC                    M S8B_END11:
  0000000C                M S8B_LABEL ++
0011DC 0E33           04245          MOVLW  0x33
0011DE EC?? F???      04246          CALL   SIO_WRITE_W                     ; 36 sentinel at end of packet
0011E2 8400           04247          BSF    SSR_STATE, DRAIN_TR, ACCESS     ; schedule transmitter shut-down
                      04248         ENDIF
0011E4 6A00           04249         CLRF    YY_STATE, ACCESS
0011E6 0012           04250         RETURN
                      04251         
0011E8                04252 S6_10_DATA:
0011E8 2EE8           04253         DECFSZ  WREG, F, ACCESS
0011EA D???           04254         BRA     S6_11_DATA
                      04255         ;
                      04256         ; S6.10: DEF_SENS Command completed:
                      04257         ;
                      04258         ;   ___7______6______5______4______3______2______1______0__
                      04259         ;  |                                  |                    |
                      04260         ;  |                0                 |          7         | YY_COMMAND
                      04261         ;  |______|______|______|______|______|______|______|______|
                      04262         ;  |      |      |      |      |                           |
                      04263         ;  |   0  |   0  |   0  |   0  |             6             | (not saved)
                      04264         ;  |______|______|______|______|______|______|______|______|
                      04265         ;  |      |    Trigger modes   |             |             |  
                      04266         ;  |   0  | once | while|1=high|      0      |    sensor   | YY_BUFFER+0
                      04267         ;  |______|______|______|______|______|______|______|______|
                      04268         ;  |      |                                                |
                      04269         ;  |   0  |           pre-trigger sequence ID              | YY_BUFFER+1
                      04270         ;  |______|______|______|______|______|______|______|______|
                      04271         ;  |      |                                                |
                      04272         ;  |   0  |               trigger sequence ID              | YY_BUFFER+2
                      04273         ;  |______|______|______|______|______|______|______|______|
                      04274         ;  |      |                                                |
                      04275         ;  |   0  |          post-trigger sequence ID              | YY_BUFFER+3
                      04276         ;  |______|______|______|______|______|______|______|______|
                      04277         ;  |      |                                                |
                      04278         ;  |   0  |                   $3C                          | YY_DATA
                      04279         ;  |______|______|______|______|______|______|______|______|
                      04280         ;
                      04281         ;
0011EC 0E04           04282         MOVLW   4
0011EE 5C00           04283         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0011F0 E2??           04284         BC      S6_10_VALID
0011F2 EF?? F???      04285         GOTO    S6_KEEP_LOOKING                 ; input < 4? not done yet
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04286 
0011F6                04287 S6_10_VALID:
0011F6 E0??           04288         BZ      S6_10_DEF_SENS
0011F8 EF?? F???      04289         GOTO    ERR_COMMAND                     ; input > 4? too big: reject
                      04290 
0011FC                04291 S6_10_DEF_SENS:
0011FC EE?? F0??      04292         LFSR    0, YY_BUFFER
001200 EF?? F???      04293         GOTO    ERR_NOT_IMP             ; XXX
                      04294         
001204                04295 S6_11_DATA:
001204 2EE8           04296         DECFSZ  WREG, F, ACCESS
001206 D???           04297         BRA     S6_12_DATA
                      04298         ;
                      04299         ; S6.11: CLR_SEQ Command completed:
                      04300         ;
                      04301         ;   ___7______6______5______4______3______2______1______0__
                      04302         ;  |                                  |                    |
                      04303         ;  |                0                 |          7         | YY_COMMAND
                      04304         ;  |______|______|______|______|______|______|______|______|
                      04305         ;  |      |      |      |      |                           |
                      04306         ;  |   0  |   0  |   0  |   0  |             8             | (not saved)
                      04307         ;  |______|______|______|______|______|______|______|______|
                      04308         ;  |      |                                                |
                      04309         ;  |   0  |                   $43                          | YY_BUFFER
                      04310         ;  |______|______|______|______|______|______|______|______|
                      04311         ;  |      |                                                |
                      04312         ;  |   0  |                   $41                          | YY_DATA
                      04313         ;  |______|______|______|______|______|______|______|______|
                      04314         ;
                      04315         ; Validate inputs
                      04316         ;
001208 0E01           04317         MOVLW   1
00120A 5C00           04318         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
00120C E2??           04319         BC      S6_11_VALID
00120E EF?? F???      04320         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04321 
001212                04322 S6_11_VALID:
001212 E0??           04323         BZ      S6_11_CLR_SEQ
001214 EF?? F???      04324         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04325 
001218                04326 S6_11_CLR_SEQ:
001218 EE?? F0??      04327         LFSR    0, YY_BUFFER
00121C 0E43           04328         MOVLW   0x43
00121E 62EF           04329         CPFSEQ  INDF0, ACCESS
001220 EF?? F???      04330         GOTO    ERR_COMMAND
001224 EF?? F???      04331         GOTO    ERR_NOT_IMP             ; XXX
                      04332 
001228                04333 S6_12_DATA:
001228 2EE8           04334         DECFSZ  WREG, F, ACCESS
00122A D???           04335         BRA     S6_13_DATA
                      04336         ;
                      04337         ; S6.12: DEF_SEQ Command completed:
                      04338         ;
                      04339         ;   ___7______6______5______4______3______2______1______0__
                      04340         ;  |                                  |                    |
                      04341         ;  |                0                 |          7         | YY_COMMAND
                      04342         ;  |______|______|______|______|______|______|______|______|
                      04343         ;  |      |      |      |      |                           |
                      04344         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      04345         ;  |______|______|______|______|______|______|______|______|
                      04346         ;  |      |                                                |
                      04347         ;  |   0  |               sequence number                  | YY_YY
                      04348         ;  |______|______|______|______|______|______|______|______|
                      04349         ;  |      |                                                |
                      04350         ;  |   0  |             sequence length - 1 (N-1)          | YY_BUFFER+0
                      04351         ;  |______|______|______|______|______|______|______|______|
                      04352         ;  |      |                                                |
                      04353         ;  |   0  |              byte #0                           | YY_BUFFER+1
                      04354         ;  |______|______|______|______|______|______|______|______|
                      04355         ;                              .
                      04356         ;                              .
                      04357         ;                              .
                      04358         ;  _________________________________________________________
                      04359         ;  |      |                                                |
                      04360         ;  |   0  |              byte #N-1                         | YY_BUFFER+N
                      04361         ;  |______|______|______|______|______|______|______|______|
                      04362         ;  |      |                                                |
                      04363         ;  |   0  |                   $44                          | YY_BUFFER+N+1
                      04364         ;  |______|______|______|______|______|______|______|______|
                      04365         ;  |      |                                                |
                      04366         ;  |   0  |                   $73                          | YY_DATA
                      04367         ;  |______|______|______|______|______|______|______|______|
                      04368         ;
                      04369         ; Validate inputs
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04370         ; first, do we even have a full packet yet?
                      04371         ;
00122C 5000           04372         MOVF    YY_BUF_IDX, W, ACCESS
00122E E1??           04373         BNZ     S6_12_VALID
001230 EF?? F???      04374         GOTO    S6_KEEP_LOOKING                 
                      04375 
001234                04376 S6_12_VALID:
001234 EE?? F0??      04377         LFSR    0, YY_BUFFER
001238 28EF           04378         INCF    INDF0, W, ACCESS
00123A 28E8           04379         INCF    WREG, W, ACCESS
00123C 28E8           04380         INCF    WREG, W, ACCESS         ; W = (N-1)+3 = size our packet must be
00123E 5C00           04381         SUBWF   YY_BUF_IDX, W, ACCESS   ; bytes read < W?
001240 E2??           04382         BC      S6_12_VALID2
001242 EF?? F???      04383         GOTO    S6_KEEP_LOOKING         ; yes, keep reading more
                      04384 
001246                04385 S6_12_VALID2:
001246 E0??           04386         BZ      S6_12_DEF_SEQ
001248 EF?? F???      04387         GOTO    ERR_COMMAND             ; if read too much, reject command
                      04388 
00124C                04389 S6_12_DEF_SEQ:
                      04390         ;
                      04391         ; next, test sentinel
                      04392         ;
00124C 0400           04393         DECF    YY_BUF_IDX, W, ACCESS
00124E 26E9           04394         ADDWF   FSR0L, F, ACCESS
001250 0E44           04395         MOVLW   0x44
001252 62EF           04396         CPFSEQ  INDF0                   ; sentinel==$44?
001254 EF?? F???      04397         GOTO    ERR_COMMAND
                      04398         ;
                      04399         ; ok, define the sequence now
                      04400         ;
001258 EF?? F???      04401         GOTO    ERR_NOT_IMP             ; XXX
                      04402         
00125C                04403 S6_13_DATA:
00125C 2EE8           04404         DECFSZ  WREG, F, ACCESS
00125E D???           04405         BRA     S6_14_DATA
                      04406         ;
                      04407         ; S6.13: CF_FLROM Command completed:
                      04408         ;
                      04409         ;   ___7______6______5______4______3______2______1______0__
                      04410         ;  |                                  |                    |
                      04411         ;  |                0                 |          7         | YY_COMMAND
                      04412         ;  |______|______|______|______|______|______|______|______|
                      04413         ;  |      |      |      |      |                           |
                      04414         ;  |   0  |   1  |   1  |   1  |             5             | (not saved)
                      04415         ;  |______|______|______|______|______|______|______|______|
                      04416         ;  |      |                                                |
                      04417         ;  |   0  |                   $33                          | YY_BUFFER+0
                      04418         ;  |______|______|______|______|______|______|______|______|
                      04419         ;  |      |                                                |
                      04420         ;  |   0  |                   $4C                          | YY_BUFFER+1
                      04421         ;  |______|______|______|______|______|______|______|______|
                      04422         ;  |      |                                                |
                      04423         ;  |   0  |                   $1C                          | YY_DATA
                      04424         ;  |______|______|______|______|______|______|______|______|
                      04425         ;
                      04426         ; Validate inputs
                      04427         ;
001260 0E02           04428         MOVLW   2
001262 5C00           04429         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
001264 E0??           04430         BZ      S6_13_VALID                     ; 2 bytes received (plus final)? good.
001266 EF?? F???      04431         GOTO    ERR_COMMAND                     ; otherwise, it's not right.
                      04432         ;
                      04433         ; next, test sentinel
                      04434         ;
00126A                04435 S6_13_VALID:
00126A EE?? F0??      04436         LFSR    0, YY_BUFFER
00126E 0E33           04437         MOVLW   0x33
001270 62EE           04438         CPFSEQ  POSTINC0
001272 EF?? F???      04439         GOTO    ERR_COMMAND
001276 0E4C           04440         MOVLW   0x4C
001278 62EF           04441         CPFSEQ  INDF0
00127A EF?? F???      04442         GOTO    ERR_COMMAND
                      04443         ;
                      04444         ; ok, start updating the firmware!
                      04445         ;
                      04446         IF !QSCC_PORT
                      04447          GOTO   FLASH_UPDATE_START
                      04448         ELSE
00127E EF?? F???      04449          GOTO   ERR_COMMAND
                      04450         ENDIF
                      04451 
001282                04452 S6_14_DATA:
                      04453         IF QSCC_PORT
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04454          #include "qscc_hook_s6_14.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s6_14 only used for QS*C systems"
                      00031         ENDIF
                      00032 
001282                00033 S6_14_DATA_QS:
001282 2CE8           00034         DECFSZ  WREG, W, ACCESS 
001284 D???           00035         BRA     S6_15_DATA
                      00036         ;
                      00037         ; S6.14: DISP_TEXT command received.
                      00038         ;
                      00039         ;   ___7______6______5______4______3______2______1______0__
                      00040         ;  |                                  |                    |
                      00041         ;  |                0                 |          7         | YY_COMMAND
                      00042         ;  |______|______|______|______|______|______|______|______|
                      00043         ;  |      |      |      |      |                           |
                      00044         ;  |   0  |   0  |   0  |   0  |            12             | (not saved)
                      00045         ;  |______|______|______|______|______|______|______|______|
                      00046         ;  |      |      |                                         |
                      00047         ;  |   0  |   0  |                N                        | YY_BUFFER+0
                      00048         ;  |______|______|______|______|______|______|______|______|
                      00049         ;  |                                                       |
                      00050         ;  |                Character code 0                       | YY_BUFFER+1
                      00051         ;  |______|______|______|______|______|______|______|______|
                      00052         ;  |                                                       |
                      00053         ;  |                Character code 1                       | YY_BUFFER+2
                      00054         ;  |______|______|______|______|______|______|______|______|
                      00055         ;                              :
                      00056         ;                              :
                      00057         ;   _______________________________________________________
                      00058         ;  |                                                       |
                      00059         ;  |                Character code N-1                     | YY_BUFFER+N
                      00060         ;  |______|______|______|______|______|______|______|______|
                      00061         ;  |      |                                                |
                      00062         ;  |   0  |   1      0      1      0      1      0      1  | YY_DATA
                      00063         ;  |______|______|______|______|______|______|______|______|
                      00064         ;
                      00065         ; Validate inputs
                      00066         ;
001286 2800           00067         INCF    YY_BUFFER, W, ACCESS            ; expecting N+1 bytes
001288 5C00           00068         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
00128A E2??           00069         BC      S6_14_VALID                     ; N+1 bytes received (plus final)? good.
00128C EF?? F???      00070         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00071 
001290                00072 S6_14_VALID:
001290 E0??           00073         BZ      S6_14_DISP_TEXT                 ; exact byte length? great, execute command
001292 EF?? F???      00074         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00075 
001296                00076 S6_14_DISP_TEXT:
                      00077         ;
                      00078         ; XXX display YYBUFFER[1]..YYBUFFER[YY_BUFFER[0]] on scoreboard
                      00079         ;
001296 6A00           00080         CLRF    YY_STATE, ACCESS
001298 0012           00081         RETURN
                      00082 
00129A                00083 S6_15_DATA:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00129A 2CE8           00084         DECFSZ  WREG, W, ACCESS 
00129C D???           00085         BRA     S6_16_DATA
                      00086         ;
                      00087         ; S6.15: DISP_BITMAP command received.
                      00088         ;
                      00089         ;   ___7______6______5______4______3______2______1______0__
                      00090         ;  |                                  |                    |
                      00091         ;  |                0                 |          7         | YY_COMMAND
                      00092         ;  |______|______|______|______|______|______|______|______|
                      00093         ;  |      |      |      |      |                           |
                      00094         ;  |   0  |   0  |   0  |   0  |            13             | (not saved)
                      00095         ;  |______|______|______|______|______|______|______|______|
                      00096         ;  |                                                       |
                      00097         ;  | (0,0)  (0,1) ...                                      | YY_BUFFER+0
                      00098         ;  |______|______|______|______|______|______|______|______|
                      00099         ;                              :
                      00100         ;                              :
                      00101         ;   _______________________________________________________
                      00102         ;  |                                                       |
                      00103         ;  |                                          (6,62) (6,63)| YY_BUFFER+55
                      00104         ;  |______|______|______|______|______|______|______|______|
                      00105         ;  |      |                                                |
                      00106         ;  |   0  |   1      1      0      0      1      1      0  | YY_DATA
                      00107         ;  |______|______|______|______|______|______|______|______|
                      00108         ;
                      00109         ; Validate inputs
                      00110         ;
00129E 0E38           00111         MOVLW   .56                             ; expecting 56 bytes
0012A0 5C00           00112         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0012A2 E2??           00113         BC      S6_15_VALID                     ; 56 bytes received (plus final)? good.
0012A4 EF?? F???      00114         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00115 
0012A8                00116 S6_15_VALID:
0012A8 E0??           00117         BZ      S6_15_DISP_BITMAP               ; exact byte length? great, execute command
0012AA EF?? F???      00118         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00119 
0012AE                00120 S6_15_DISP_BITMAP:
                      00121         ;
                      00122         ; XXX display YYBUFFER[0]..YYBUFFER[55] as raw bits
                      00123         ;
0012AE 6A00           00124         CLRF    YY_STATE, ACCESS
0012B0 0012           00125         RETURN
                      00126 
0012B2                00127 S6_16_DATA:
0012B2 2CE8           00128         DECFSZ  WREG, W, ACCESS 
0012B4 D???           00129         BRA     S6_17_DATA
                      00130         ;
                      00131         ; S6.16: CF_SET_QS_PARAMS command received
                      00132         ;
                      00133         ;   ___7______6______5______4______3______2______1______0__
                      00134         ;  |                                  |                    |
                      00135         ;  |                0                 |          7         | YY_COMMAND
                      00136         ;  |______|______|______|______|______|______|______|______|
                      00137         ;  |      |      |      |      |                           |
                      00138         ;  |   0  |   1  |   1  |   1  |             6             | (not saved)
                      00139         ;  |______|______|______|______|______|______|______|______|
                      00140         ;  |                                                       |
                      00141         ;  |                Lockout time (x .1 sec)                | YY_BUFFER+0
                      00142         ;  |______|______|______|______|______|______|______|______|
                      00143         ;  |      |                                                |
                      00144         ;  |   0  |   0      1      1      0      0      1      0  | YY_BUFFER+1
                      00145         ;  |______|______|______|______|______|______|______|______|
                      00146         ;  |      |                                                |
                      00147         ;  |   0  |   1      0      1      1      0      1      0  | YY_DATA
                      00148         ;  |______|______|______|______|______|______|______|______|
                      00149         ;
                      00150         ; Validate inputs
                      00151         ;
0012B6 0E02           00152         MOVLW   .2                              ; expecting 2 bytes
0012B8 5C00           00153         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0012BA E2??           00154         BC      S6_16_VALID                     ; 2 bytes received (plus final)? good.
0012BC EF?? F???      00155         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00156 
0012C0                00157 S6_16_VALID:
0012C0 E0??           00158         BZ      S6_16_CF_SET_QS_PARAMS          ; exact byte length? great, execute command
0012C2 EF?? F???      00159         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00160 
0012C6                00161 S6_16_CF_SET_QS_PARAMS:
                      00162         ;
                      00163         ; Validate first sentinel byte
                      00164         ;
0012C6 0E32           00165         MOVLW   0x32
0012C8 6200           00166         CPFSEQ  YY_BUFFER+1, ACCESS
0012CA EF?? F???      00167         GOTO    ERR_COMMAND
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00168         ;
                      00169         ; XXX set params
                      00170         ;
0012CE 6A00           00171         CLRF    YY_STATE, ACCESS
0012D0 0012           00172         RETURN
                      00173 
0012D2                00174 S6_17_DATA:
                      00175         ERR_BUG 0x05, ERR_CLASS_OVERRUN
0012D2 0E05               M          MOVLW  0x05
0012D4 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0012D6 6A00               M          CLRF   YY_STATE, ACCESS
0012D8 0012               M          RETURN
                      04455         ELSE
                      04456          ERR_BUG 0x05, ERR_CLASS_OVERRUN
                      04457         ENDIF
                      04458 
0012DA                04459 S6_RESTART:
                      04460         ; We stopped too early -- resume now
0012DA 0012           04461         RETURN                                  ; 
                      04462 
0012DC                04463 S6_KEEP_LOOKING:
0012DC 5000           04464         MOVF    YY_BUF_IDX, W, ACCESS           ; Have we reached our limit (idx >= max)?
0012DE 6400           04465         CPFSGT  YY_LOOKAHEAD_MAX, ACCESS        ; (skip if MAX > bytes read so far)
0012E0 EF?? F???      04466         GOTO    ERR_COMMAND                     ; Yes:  Abort here and ignore data to next cmd
0012E4 EE?? F0??      04467         LFSR    0, YY_BUFFER                    ; No: Save character in buffer and keep waiting
0012E8 5000           04468         MOVF    YY_BUF_IDX, W, ACCESS
0012EA 26E9           04469         ADDWF   FSR0L, F, ACCESS
0012EC C??? FFEF      04470         MOVFF   YY_DATA, INDF0
0012F0 2A00           04471         INCF    YY_BUF_IDX, F, ACCESS
0012F2 0012           04472         RETURN
                      04473 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0012F4                04474 S7_DATA:
0012F4 2CE8           04475         DECFSZ  WREG, W, ACCESS
0012F6 D???           04476         BRA     S8_DATA
                      04477         ; RAMP_LVL recieved step count
0012F8 2800           04478         INCF    YY_DATA, W, ACCESS              ; step count - 1 sent in protocol
0012FA 6E00           04479         MOVWF   YY_YY, ACCESS                   ; actual step count saved in YY_YY (1-128)
0012FC 2A00           04480         INCF    YY_STATE, F, ACCESS             ; -> state 8 (wait for time interval byte)
0012FE 0012           04481         RETURN
                      04482         
001300                04483 S8_DATA:
001300 2CE8           04484         DECFSZ  WREG, W, ACCESS
001302 D???           04485         BRA     S9_DATA
001304 2A00           04486         INCF    YY_DATA, F, ACCESS
                      04487         ;
                      04488         ; RAMP_LVL:
                      04489         ;
                      04490         ;   ___7______6______5______4______3______2______1______0__
                      04491         ;  |                                  |                    |
                      04492         ;  |                0                 |          4         | YY_COMMAND
                      04493         ;  |______|______|______|______|______|______|______|______|
                      04494         ;  |NOT_MY|0=down|                                         |
                      04495         ;  | _SSR |1=up  |           Channel ID (0-23)             | TARGET_SSR
                      04496         ;  |______|______|______|______|______|______|______|______|
                      04497         ;  |                                                       |
                      04498         ;  |              Steps between update (1-128)             | YY_YY
                      04499         ;  |______|______|______|______|______|______|______|______|
                      04500         ;  |                                                       |
                      04501         ;  |             update every n/120 sec (1-128)            | YY_DATA
                      04502         ;  |______|______|______|______|______|______|______|______|
                      04503         ;  |YCF_  |                                                |
                      04504         ;  |RAMP_ |                                                | YY_CMD_FLAGS
                      04505         ;  |CYCLE_|______|______|______|______|______|______|______|
                      04506         ;
001306 BE00           04507         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
001308 D???           04508         BRA     S8_PASS_DOWN_RAMP_LVL
00130A EE?? F0??      04509         LFSR    0, SSR_00_FLAGS
00130E 5000           04510         MOVF    TARGET_SSR, W, ACCESS
001310 0B3F           04511         ANDLW   0x3F
001312 26E9           04512         ADDWF   FSR0L, F, ACCESS
001314 6AEF           04513         CLRF    INDF0, ACCESS
001316 BC00           04514         BTFSC   TARGET_SSR, 6, ACCESS           ; this is cheaper than branching :)
001318 8EEF           04515         BSF     INDF0, FADE_UP, ACCESS
00131A AC00           04516         BTFSS   TARGET_SSR, 6, ACCESS
00131C 8CEF           04517         BSF     INDF0, FADE_DOWN, ACCESS
00131E BE00           04518         BTFSC   YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
001320 8AEF           04519         BSF     INDF0, FADE_CYCLE, ACCESS
001322 0E14           04520         MOVLW   SSR_BLOCK_LEN
001324 26E9           04521         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's step byte
001326 C??? FFEF      04522         MOVFF   YY_YY, INDF0
00132A 26E9           04523         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's speed byte
00132C C??? FFEF      04524         MOVFF   YY_DATA, INDF0
001330 26E9           04525         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's counter byte
001332 C??? FFEF      04526         MOVFF   YY_DATA, INDF0
001336 6A00           04527         CLRF    YY_STATE, ACCESS
001338 0012           04528         RETURN
                      04529 
00133A                04530 S8_PASS_DOWN_RAMP_LVL:
                      04531         ;
                      04532         ; Hand off RAMP_LVL command to slave chip.
                      04533         ;
                      04534         IF ROLE_MASTER
                      04535          IF HAS_STATUS_LEDS
                      04536           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04537          ENDIF
                      04538          MOVLW  0xC0                            ; command byte
                      04539          CALL   SIO_WRITE_W
                      04540          BCF    TARGET_SSR, 7, ACCESS
                      04541          BTFSC  YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
                      04542          BSF    TARGET_SSR, 7, ACCESS
                      04543          MOVF   TARGET_SSR, W, ACCESS
                      04544          SEND_8_BIT_W
                      04545          ;CALL  SIO_WRITE_W                     ; channel + direction
                      04546          DECF   YY_YY, W, ACCESS                ; steps - 1
                      04547          SEND_8_BIT_W
                      04548          ;CALL  SIO_WRITE_W
                      04549          DECF   YY_DATA, W, ACCESS              ; speed - 1
                      04550          SEND_8_BIT_W
                      04551          ;CALL  SIO_WRITE_W
                      04552          CLRF   YY_STATE, ACCESS
                      04553          RETURN
                      04554         ENDIF
                      04555         ERR_BUG 0x06, ERR_CLASS_IN_VALID
00133A 0E06               M          MOVLW  0x06
00133C 6E00               M          MOVWF  LAST_ERROR, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
00133E 6A00               M          CLRF   YY_STATE, ACCESS
001340 0012               M          RETURN
                      04556         
001342                04557 S9_DATA:
001342 2CE8           04558         DECFSZ  WREG, W, ACCESS
001344 D???           04559         BRA     S10_DATA
                      04560         ;
                      04561         ; State 9:  Extended command code received; decode further
                      04562         ;
                      04563         ;   ___7______6______5______4______3______2______1______0__
                      04564         ;  |                                  |                    |
                      04565         ;  |                0                 |          7         | YY_COMMAND
                      04566         ;  |______|______|______|______|______|______|______|______|
                      04567         ;  |                                                       |
                      04568         ;  |               Extended Command Code                   | YY_DATA   
                      04569         ;  |______|______|______|______|______|______|______|______|
                      04570         ;
                      04571         ; Extended commands decode like this:
                      04572         ;       01xxxxxx        privileged configuration commands
                      04573         ;       010-----        CF_PHASE command (remaining bits are data)
                      04574         ;       0110----        CF_ADDR command (remaining bits are data)
                      04575         ;       0111----        other CF_* commands (remaining bits are command number)
                      04576         ;       001-----        IC_* internal (mater->slave) commands
                      04577         ;       000-----        Regular extended commands
                      04578         ;        
001346 BC00           04579         BTFSC   YY_DATA, 6, ACCESS
001348 D???           04580         BRA     S9_PRIV_CMD
00134A BA00           04581         BTFSC   YY_DATA, 5, ACCESS
00134C D???           04582         BRA     S9_INTERNAL_CMD
                      04583         ;
                      04584         ; Regular extended commands
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04585         ;
00134E 5000           04586         MOVF    YY_DATA, W, ACCESS
001350 E1??           04587         BNZ     S9_X1_WAKE
001352                04588 S9_X0_SLEEP:
                      04589         WAIT_FOR_SENTINEL 2, B'01011010', 6     ; -> S6.6 when sentinel found
001352 0E02               M          MOVLW  2
001354 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001356 0E5A               M          MOVLW  B'01011010'
001358 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00135A 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00135C 6E00               M          MOVWF  YY_STATE, ACCESS
00135E 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001360 0E06               M          MOVLW  6
001362 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001364 0012           04590         RETURN
001366                04591 S9_X1_WAKE:
001366 2CE8           04592         DECFSZ  WREG, W, ACCESS
001368 D???           04593         BRA     S9_X2_SHUTDOWN
                      04594         WAIT_FOR_SENTINEL 2, B'01011010', 7     ; -> S6.7 when sentinel found
00136A 0E02               M          MOVLW  2
00136C 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00136E 0E5A               M          MOVLW  B'01011010'
001370 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001372 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001374 6E00               M          MOVWF  YY_STATE, ACCESS
001376 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001378 0E07               M          MOVLW  7
00137A 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00137C 0012           04595         RETURN
00137E                04596 S9_X2_SHUTDOWN:
00137E 2CE8           04597         DECFSZ  WREG, W, ACCESS
001380 D???           04598         BRA     S9_X3_QUERY
                      04599         WAIT_FOR_SENTINEL 2, B'01011001', .8    ; -> S6.8 when sentinel found
001382 0E02               M          MOVLW  2
001384 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001386 0E59               M          MOVLW  B'01011001'
001388 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00138A 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00138C 6E00               M          MOVWF  YY_STATE, ACCESS
00138E 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001390 0E08               M          MOVLW  .8
001392 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001394 0012           04600         RETURN
001396                04601 S9_X3_QUERY:
001396 2CE8           04602         DECFSZ  WREG, W, ACCESS
001398 D???           04603         BRA     S9_X4_DEF_SEQ
                      04604         WAIT_FOR_SENTINEL 2, B'01010100', .9    ; -> S6.9 when sentinel found
00139A 0E02               M          MOVLW  2
00139C 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00139E 0E54               M          MOVLW  B'01010100'
0013A0 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013A2 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013A4 6E00               M          MOVWF  YY_STATE, ACCESS
0013A6 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013A8 0E09               M          MOVLW  .9
0013AA 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013AC 0012           04605         RETURN
0013AE                04606 S9_X4_DEF_SEQ:
0013AE 2CE8           04607         DECFSZ  WREG, W, ACCESS
0013B0 D???           04608         BRA     S9_X5_EXEC_SEQ
0013B2 0E0E           04609         MOVLW   .14
0013B4 6E00           04610         MOVWF   YY_STATE, ACCESS                ; -> 14, wait to get I byte
0013B6 0012           04611         RETURN
0013B8                04612 S9_X5_EXEC_SEQ:
0013B8 2CE8           04613         DECFSZ  WREG, W, ACCESS
0013BA D???           04614         BRA     S9_X6_DEF_SENS
0013BC 0E0F           04615         MOVLW   .15
0013BE 6E00           04616         MOVWF   YY_STATE, ACCESS                ; -> 15, wait to get I byte
0013C0 0012           04617         RETURN
0013C2                04618 S9_X6_DEF_SENS:
0013C2 2CE8           04619         DECFSZ  WREG, W, ACCESS
0013C4 D???           04620         BRA     S9_X7_MSK_SENS
                      04621         WAIT_FOR_SENTINEL 5, B'00111100', .10   ; -> S6.10 when sentinel found
0013C6 0E05               M          MOVLW  5
0013C8 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013CA 0E3C               M          MOVLW  B'00111100'
0013CC 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013CE 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013D0 6E00               M          MOVWF  YY_STATE, ACCESS
0013D2 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013D4 0E0A               M          MOVLW  .10
0013D6 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013D8 0012           04622         RETURN
0013DA                04623 S9_X7_MSK_SENS:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013DA 2CE8           04624         DECFSZ  WREG, W, ACCESS
0013DC D???           04625         BRA     S9_X8_CLR_SEQ
0013DE 0E10           04626         MOVLW   .16
0013E0 6E00           04627         MOVWF   YY_STATE, ACCESS                ; -> 16, wait to get sensor byte
0013E2 0012           04628         RETURN
0013E4                04629 S9_X8_CLR_SEQ:
0013E4 2CE8           04630         DECFSZ  WREG, W, ACCESS
0013E6 D???           04631         BRA     S9_X9_XPRIV
                      04632         WAIT_FOR_SENTINEL 2, B'01000001', .11   ; -> S6.11 when sentinel found
0013E8 0E02               M          MOVLW  2
0013EA 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013EC 0E41               M          MOVLW  B'01000001'
0013EE 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013F0 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013F2 6E00               M          MOVWF  YY_STATE, ACCESS
0013F4 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013F6 0E0B               M          MOVLW  .11
0013F8 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013FA 0012           04633         RETURN
0013FC                04634 S9_X9_XPRIV:
0013FC 2CE8           04635         DECFSZ  WREG, W, ACCESS                 
0013FE D???           04636         BRA     S9_XA_ERR_COMMAND
                      04637         ;
                      04638         ; XPRIV:
                      04639         ;
                      04640         ;   ___7______6______5______4______3______2______1______0__
                      04641         ;  |                                  |                    |
                      04642         ;  |                0                 |          7         | YY_COMMAND
                      04643         ;  |______|______|______|______|______|______|______|______|
                      04644         ;  |      |      |      |                                  |
                      04645         ;  |   0  |   0  |   0  |   0  |             9             | YY_DATA
                      04646         ;  |______|______|______|______|______|______|______|______|
                      04647         ;
001400 EF?? F???      04648         GOTO    CMD_XPRIV
                      04649 
001404                04650 S9_XA_ERR_COMMAND:
                      04651         IF QSCC_PORT
                      04652          #include "qscc_hook_s9_xa.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s9_xa only used for QS*C systems"
                      00031         ENDIF
                      00032 
001404                00033 S9_XA_QS_QUERY:
001404 2CE8           00034         DECFSZ  WREG, W, ACCESS
001406 D???           00035         BRA     S9_XB_BTN_MASK
001408 0E13           00036         MOVLW   .19
00140A 6E00           00037         MOVWF   YY_STATE, ACCESS
00140C 0012           00038         RETURN
                      00039 
00140E                00040 S9_XB_BTN_MASK:
00140E 2CE8           00041         DECFSZ  WREG, W, ACCESS
001410 D???           00042         BRA     S9_XC_DISP_TEXT
001412 0E14           00043         MOVLW   .20
001414 6E00           00044         MOVWF   YY_STATE, ACCESS
001416 0012           00045         RETURN
                      00046 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001418                00047 S9_XC_DISP_TEXT:
001418 2CE8           00048         DECFSZ  WREG, W, ACCESS
00141A D???           00049         BRA     S9_XD_DISP_BITMAP
                      00050         WAIT_FOR_SENTINEL .67, B'01010101', .14
00141C 0E43               M          MOVLW  .67
00141E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001420 0E55               M          MOVLW  B'01010101'
001422 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001424 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001426 6E00               M          MOVWF  YY_STATE, ACCESS
001428 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00142A 0E0E               M          MOVLW  .14
00142C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00142E 0012           00051         RETURN
                      00052 
001430                00053 S9_XD_DISP_BITMAP:
001430 2CE8           00054         DECFSZ  WREG, W, ACCESS
001432 D???           00055         BRA     S9_XE_ERR_COMMAND
                      00056         WAIT_FOR_SENTINEL .59, B'01100110', .15
001434 0E3B               M          MOVLW  .59
001436 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001438 0E66               M          MOVLW  B'01100110'
00143A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00143C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00143E 6E00               M          MOVWF  YY_STATE, ACCESS
001440 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001442 0E0F               M          MOVLW  .15
001444 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001446 0012           00057         RETURN
                      00058 
001448                00059 S9_XE_ERR_COMMAND:
001448 EF?? F???      00060         GOTO    ERR_COMMAND
                      04653         ELSE
                      04654          GOTO   ERR_COMMAND
                      04655         ENDIF
                      04656 
00144C                04657 S9_INTERNAL_CMD:
                      04658         ;
                      04659         ; received internal command from master
                      04660         ;
                      04661         IF !ROLE_SLAVE
00144C EF?? F???      04662          GOTO   ERR_COMMAND
                      04663         ELSE    ; BEGIN SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE--------
                      04664         MOVLW   0x1F                    ;                               ///////
                      04665         ANDWF   YY_DATA, W, ACCESS      ;                               ///////
                      04666         BNZ     S9_1_IC_LED             ;                               ///////
                      04667                                         ;                               ///////
                      04668 S9_0_IC_TXDAT:                          ;                               ///////
                      04669         ;                                                               ///////
                      04670         ; IC_TXDAT: Send byte stream to serial port                     ///////
                      04671         ;                                                               ///////
                      04672         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04673         ;                                                               ///////
                      04674         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04675         MOVLW   .10                     ;                               ///////
                      04676         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04677         RETURN                          ;                               ///////
                      04678                                         ;                               ///////
                      04679 S9_1_IC_LED:                            ;                               ///////
                      04680         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04681         BRA     S9_2_IC_HALT            ;                               ///////
                      04682         ;                               ;                               ///////
                      04683         ; IC_LED                        ;                               ///////
                      04684         ; wait for GY byte to arrive.   ;                               ///////
                      04685         ;                               ;                               ///////
                      04686         MOVLW   .12                     ;                               ///////
                      04687         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04688         RETURN                          ;                               ///////
                      04689                                         ;                               ///////
                      04690 S9_2_IC_HALT:                           ;                               ///////
                      04691         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04692         BRA     S9_3_IC_TXSTA           ;                               ///////
                      04693         ;                                                               ///////
                      04694         ; IC_HALT                                                       ///////
                      04695         ;                                                               ///////
                      04696         ; Close up shop.                                                ///////
                      04697         ;                                                               ///////
                      04698         IF HAS_ACTIVE                   ;                               ///////
                      04699          SET_SSR_OFF SSR_ACTIVE         ;                               ///////
                      04700         ENDIF                           ;                               ///////
                      04701         IF HAS_STATUS_LEDS
                      04702          SET_SSR_OFF SSR_GREEN          ; set LEDs for halt mode        ///////
                      04703          SET_SSR_OFF SSR_YELLOW         ;                               ///////
                      04704          SET_SSR_STEADY SSR_RED         ;                               ///////
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04705         ENDIF
                      04706         IF HAS_T_R                      ;                 _             ///////
                      04707          BCF    PLAT_T_R, BIT_T_R, ACCESS       ; Clear T/R output      ///////
                      04708         ENDIF                           ;                               ///////
                      04709         GOTO    HALT_MODE               ;                               ///////
                      04710                                         ;                               ///////
                      04711 S9_3_IC_TXSTA:                          ;                               ///////
                      04712         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04713         BRA     S9_4_OVERRUN            ;                               ///////
                      04714         ;                                                               ///////
                      04715         ; IC_TXSTA                                                      ///////
                      04716         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04717         ; so we can tell if we're doing this or IC_TXDAT later.         ///////
                      04718         ;                                                               ///////
                      04719         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04720         MOVLW   .10                     ;                               ///////
                      04721         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04722         RETURN                          ;                               ///////
                      04723                                         ;                               ///////
                      04724 S9_4_OVERRUN:                           ;                               ///////
                      04725         ERR_BUG 0x07, ERR_CLASS_OVERRUN ;                               ///////
                      04726         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
                      04727 
                      04728         
001450                04729 S9_PRIV_CMD:
                      04730         ; received privileged configuration command     ; 01xxxxxx
                      04731         ;
                      04732         ; Anything from here down requires the privilege bit to be set.
                      04733         ;
001450 B800           04734         BTFSC   SSR_STATE, PRIV_MODE, ACCESS
001452 D???           04735         BRA     S9_DO_PRIV_CMD
001454 0E21           04736         MOVLW   0x21
001456 6E00           04737         MOVWF   LAST_ERROR, ACCESS
001458 EF?? F???      04738         GOTO    ERR_ABORT
00145C                04739 S9_DO_PRIV_CMD:
                      04740         ;
                      04741         ; decode which command this is
                      04742         ;
00145C AA00           04743         BTFSS   YY_DATA, 5, ACCESS
00145E D???           04744         BRA     S9_CF_PHASE                             ; 010xxxxx
001460 A800           04745         BTFSS   YY_DATA, 4, ACCESS
001462 D???           04746         BRA     S9_CF_ADDR                              ; 0110xxxx
                      04747         ; other priv commands                           ; 0111xxxx
001464 0E0F           04748         MOVLW   0x0F
001466 1400           04749         ANDWF   YY_DATA, W, ACCESS
001468 E1??           04750         BNZ     S9_PRIV_1
                      04751 
00146A                04752 S9_PRIV_0:
                      04753         ;
                      04754         ; CF_NOPRV:
                      04755         ;
                      04756         ;   ___7______6______5______4______3______2______1______0__
                      04757         ;  |                                  |                    |
                      04758         ;  |                0                 |          7         | YY_COMMAND
                      04759         ;  |______|______|______|______|______|______|______|______|
                      04760         ;  |      |      |      |                                  |
                      04761         ;  |   0  |   1  |   1  |   1  |             0             | YY_DATA
                      04762         ;  |______|______|______|______|______|______|______|______|
                      04763         ;
                      04764         ;
00146A 9800           04765         BCF     SSR_STATE, PRIV_MODE, ACCESS
                      04766         IF HAS_STATUS_LEDS
                      04767          ;SET_SSR_SLOW_FADE SSR_GREEN
                      04768          SET_SSR_NORMAL_MODE SSR_GREEN
                      04769         ENDIF
00146C AC00           04770         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
00146E D???           04771         BRA     S9_PRIV_0X
                      04772         IF HAS_STATUS_LEDS
                      04773          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      04774          SET_SSR_DMX_MODE SSR_GREEN
                      04775         ENDIF
                      04776 
001470                04777 S9_PRIV_0X:
                      04778         IF ROLE_MASTER
                      04779          IF HAS_STATUS_LEDS
                      04780           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04781          ENDIF
                      04782          MOVLW  0xF0                                    ; send to slave chip: F0 21 00010111 00000111
                      04783          CALL   SIO_WRITE_W
                      04784          MOVLW  0x21
                      04785          CALL   SIO_WRITE_W
                      04786          MOVLW  0x17
                      04787          CALL   SIO_WRITE_W
                      04788          MOVLW  0x07
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04789          CALL   SIO_WRITE_W
                      04790         ENDIF
001470 6A00           04791         CLRF    YY_STATE, ACCESS
001472 EC?? F???      04792         CALL    DMX_RESUME
001476 0012           04793         RETURN
                      04794 
001478                04795 S9_PRIV_1:
001478 2CE8           04796         DECFSZ  WREG, W, ACCESS
00147A D???           04797         BRA     S9_PRIV_2
                      04798         ;
                      04799         ; CF_CONF command recognized.  Expect packet of 4 more bytes...
                      04800         ;
                      04801         WAIT_FOR_SENTINEL 4, B'00111101', 1     ; -> S6.1 when sentinel found
00147C 0E04               M          MOVLW  4
00147E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001480 0E3D               M          MOVLW  B'00111101'
001482 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001484 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001486 6E00               M          MOVWF  YY_STATE, ACCESS
001488 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00148A 0E01               M          MOVLW  1
00148C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00148E 0012           04802         RETURN
                      04803 
001490                04804 S9_PRIV_2:
001490 2CE8           04805         DECFSZ  WREG, W, ACCESS
001492 D???           04806         BRA     S9_PRIV_3
                      04807         ;
                      04808         ; CF_BAUD command recognized.  Expect packet of 2 more bytes...
                      04809         ;
                      04810         WAIT_FOR_SENTINEL 2, B'00100110', 2     ; -> S6.2 when sentinel found
001494 0E02               M          MOVLW  2
001496 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001498 0E26               M          MOVLW  B'00100110'
00149A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00149C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00149E 6E00               M          MOVWF  YY_STATE, ACCESS
0014A0 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014A2 0E02               M          MOVLW  2
0014A4 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014A6 0012           04811         RETURN
                      04812 
0014A8                04813 S9_PRIV_3:
0014A8 2CE8           04814         DECFSZ  WREG, W, ACCESS
0014AA D???           04815         BRA     S9_PRIV_4
                      04816         ;
                      04817         ; CF_RESET command recognized.  Expect packet of 2 more bytes...
                      04818         ;
                      04819         WAIT_FOR_SENTINEL 2, B'01110010', 3     ; -> S6.3 when sentinel found
0014AC 0E02               M          MOVLW  2
0014AE 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0014B0 0E72               M          MOVLW  B'01110010'
0014B2 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014B4 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014B6 6E00               M          MOVWF  YY_STATE, ACCESS
0014B8 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014BA 0E03               M          MOVLW  3
0014BC 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014BE 0012           04820         RETURN
                      04821 
0014C0                04822 S9_PRIV_4:
0014C0 2CE8           04823         DECFSZ  WREG, W, ACCESS
0014C2 D???           04824         BRA     S9_PRIV_5
                      04825         ;
                      04826         ; CF_XPRIV:
                      04827         ;
                      04828         ;   ___7______6______5______4______3______2______1______0__
                      04829         ;  |                                  |                    |
                      04830         ;  |                0                 |          7         | YY_COMMAND
                      04831         ;  |______|______|______|______|______|______|______|______|
                      04832         ;  |      |      |      |                                  |
                      04833         ;  |   0  |   1  |   1  |   1  |             4             | YY_DATA
                      04834         ;  |______|______|______|______|______|______|______|______|
                      04835         ;
                      04836         ;
0014C4                04837 CMD_XPRIV:
0014C4 8600           04838         BSF     SSR_STATE2, PRIV_FORBID, ACCESS
0014C6 EF?? F???      04839         GOTO    S9_PRIV_0
                      04840 
0014CA                04841 S9_PRIV_5:
0014CA 2CE8           04842         DECFSZ  WREG, W, ACCESS
0014CC D???           04843         BRA     S9_PRIV_6
                      04844         ;
                      04845         ; CF_FLROM command recognized.  Expect packet of 3 more bytes...
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04846         ;
                      04847         WAIT_FOR_SENTINEL 3, B'00011100', 13    ; -> S6.13 when sentinel found
0014CE 0E03               M          MOVLW  3
0014D0 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0014D2 0E1C               M          MOVLW  B'00011100'
0014D4 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014D6 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014D8 6E00               M          MOVWF  YY_STATE, ACCESS
0014DA 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014DC 0E0D               M          MOVLW  13
0014DE 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014E0 0012           04848         RETURN
                      04849 
0014E2                04850 S9_PRIV_6:
                      04851         IF QSCC_PORT
                      04852          #include "qscc_hook_s9_priv_6.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s9_priv_6 only used for QS*C systems"
                      00031         ENDIF
                      00032 
0014E2                00033 S9_PRIV_6_QS_PARAM:
0014E2 2CE8           00034         DECFSZ  WREG, W, ACCESS
0014E4 D???           00035         BRA     S9_PRIV_7
                      00036         WAIT_FOR_SENTINEL 5, B'01011010', .16
0014E6 0E05               M          MOVLW  5
0014E8 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0014EA 0E5A               M          MOVLW  B'01011010'
0014EC 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014EE 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014F0 6E00               M          MOVWF  YY_STATE, ACCESS
0014F2 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014F4 0E10               M          MOVLW  .16
0014F6 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014F8 0012           00037         RETURN
                      00038 
0014FA                00039 S9_PRIV_7:
0014FA EF?? F???      00040         GOTO    ERR_COMMAND
                      04853         ELSE
                      04854          GOTO   ERR_COMMAND
                      04855         ENDIF
                      04856 
0014FE                04857 S9_CF_PHASE:
0014FE C??? F???      04858         MOVFF   YY_DATA, YY_YY
                      04859         WAIT_FOR_SENTINEL 3, B'01001111', 4     ; -> S6.4 when sentinel found
001502 0E03               M          MOVLW  3
001504 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001506 0E4F               M          MOVLW  B'01001111'
001508 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00150A 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00150C 6E00               M          MOVWF  YY_STATE, ACCESS
00150E 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001510 0E04               M          MOVLW  4
001512 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001514 0012           04860         RETURN
                      04861 
001516                04862 S9_CF_ADDR:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001516 C??? F???      04863         MOVFF   YY_DATA, YY_YY
                      04864         WAIT_FOR_SENTINEL 3, B'01000100', 5     ; -> S6.5 when sentinel found
00151A 0E03               M          MOVLW  3
00151C 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00151E 0E44               M          MOVLW  B'01000100'
001520 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001522 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001524 6E00               M          MOVWF  YY_STATE, ACCESS
001526 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001528 0E05               M          MOVLW  5
00152A 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00152C 0012           04865         RETURN
                      04866         
00152E                04867 S10_DATA:
00152E 2CE8           04868         DECFSZ  WREG, W, ACCESS
001530 D???           04869         BRA     S11_DATA
                      04870         ;
                      04871         ; S10: IC_TXDAT / IC_TXSTA received N byte; time to loop
                      04872         ; transmitting N bytes. First byte will have MSB set.
                      04873         ;
                      04874         ;   ___7______6______5______4______3______2______1______0__
                      04875         ;  |      |                    |                           |
                      04876         ;  |   1  |          7         |             0             | (not saved)
                      04877         ;  |______|______|______|______|______|______|______|______|
                      04878         ;  |SET   |      |      |      |    IC_TXDAT:   0          |
                      04879         ;  |MSB?  |   0  |   1  |   0  |    IC_TXSTA:   3          | YY_COMMAND 
                      04880         ;  |______|______|______|______|______|______|______|______|
                      04881         ;  |                                                       |  
                      04882         ;  |                Bytes to transmit  (N)                 | YY_YY
                      04883         ;  |______|______|______|______|______|______|______|______|
                      04884         ;  |      |                                                |
                      04885         ;  |   0  |                 Data byte #0                   | (not yet received)
                      04886         ;  |______|______|______|______|______|______|______|______|
                      04887         ;                              .
                      04888         ;                              .                                    
                      04889         ;                              .
                      04890         ;   _______________________________________________________
                      04891         ;  |      |                                                |
                      04892         ;  |   0  |                 Data byte #N-1                 | (not yet received)
                      04893         ;  |______|______|______|______|______|______|______|______|
                      04894         ;  |      |                                                |
                      04895         ;  |   0  |                   $73                          | (not yet received)
                      04896         ;  |______|______|______|______|______|______|______|______|
                      04897         ;
                      04898         IF ROLE_SLAVE
                      04899          BSF    YY_COMMAND, 7, ACCESS   ; note need to set MSB in data stream
                      04900          INCF   YY_STATE, F, ACCESS     ; -> S11
                      04901          MOVFF  YY_DATA, YY_YY          ; Byte counter (N-1)
                      04902          INCF   YY_YY, F, ACCESS        ; Adjust to true byte count
                      04903          CALL   TR_ON_DELAY
                      04904          BSF    PLAT_T_R, BIT_T_R, ACCESS ; Assert bus master role by firing up the transmitter
                      04905          RETURN
                      04906         ELSE
                      04907          ERR_BUG 0x08, ERR_CLASS_OVERRUN
001532 0E08               M          MOVLW  0x08
001534 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001536 6A00               M          CLRF   YY_STATE, ACCESS
001538 0012               M          RETURN
                      04908         ENDIF
                      04909         
00153A                04910 S11_DATA:
00153A 2CE8           04911         DECFSZ  WREG, W, ACCESS
00153C D???           04912         BRA     S12_DATA
                      04913         ;
                      04914         ; IC_TXDAT / IC_TXSTA
                      04915         ; We're transmitting bytes as they come in until YY_YY is depleated.
                      04916         ;
                      04917         IF ROLE_SLAVE           ; BEGIN SLAVE-SIDE INTERNAL CMD CODE-----------
                      04918          TSTFSZ YY_YY, ACCESS                   ;                       ///////
                      04919          BRA    S11_WRITE_NEXT_BYTE             ;                       ///////
                      04920          ;                                                              ///////
                      04921          ; YY_YY is zero, the byte just received should be the sentinel.///////
                      04922          ;                                                              ///////
                      04923          MOVLW  0x73                            ;                       /////// 
                      04924          CPFSEQ YY_DATA, ACCESS                 ;                       /////// 
                      04925          BRA    S11_BAD_SENTINEL                ;                       /////// 
                      04926          ;                                                              ///////
                      04927          ; If we are processing IC_TXSTA, add our own six status bytes  ///////
                      04928          ; to the end of the output stream:                             ///////
                      04929          ;                                                              ///////
                      04930          ;                                                              ///////
                      04931          ;   ___7______6______5______4______3______2______1______0__    ///////
                      04932          ;  |      |                 fault code                     |  
                      04933          ;  |   0  |           (to be cleared after this)           | LAST_ERROR  
                      04934          ;  |______|______|______|______|______|______|______|______|
                      04935          ;  |      |                                  | phase offset|
                      04936          ;  |   0  |     unassigned, write as 0       |    <8:7>    | PHASE_OFFSET[HL]
                      04937          ;  |______|______|______|______|______|______|______|______|
                      04938          ;  |      |                                                |
                      04939          ;  |   0  |           phase offset <6:0>                   | PHASE_OFFSETL
                      04940          ;  |______|______|______|______|______|______|______|______|
                      04941          ;  |      |                                                |
                      04942          ;  |   0  |           serial number <13:7>                 | SYS_SNH
                      04943          ;  |______|______|______|______|______|______|______|______|
                      04944          ;  |      |                                                |
                      04945          ;  |   0  |           serial number <6:0>                  | SYS_SNL      
                      04946          ;  |______|______|______|______|______|______|______|______|
                      04947          ;  |      |                                                |   ///////
                      04948          ;  |   0  |                   $33                          |   ///////
                      04949          ;  |______|______|______|______|______|______|______|______|   ///////
                      04950          ;                                                              ///////
                      04951          ;                                                              ///////
                      04952          BTFSS  YY_COMMAND, 0, ACCESS           ; doing IC_TXSTA?       ///////
                      04953          BRA    S11_END_TRANSMIT                ; no, skip to end       ///////
                      04954          MOVF   LAST_ERROR, W, ACCESS           ; yes, send our private ///////
                      04955          SEND_8_BIT_W                           ;                       ///////
                      04956          ;CALL  SIO_WRITE_W                     ; at the end of the     ///////
                      04957          CLRF   LAST_ERROR, ACCESS              ; stream                ///////
                      04958          CLRF   WREG, ACCESS                    ;                       ///////
                      04959          BTFSC  PHASE_OFFSETH, 0, ACCESS        ;                       ///////
                      04960          BSF    WREG, 1, ACCESS                 ;                       ///////
                      04961          BTFSC  PHASE_OFFSETL, 7, ACCESS        ;                       ///////
                      04962          BSF    WREG, 0, ACCESS                 ;                       ///////
                      04963          SEND_8_BIT_W                           ;                       ///////
                      04964          ;CALL  SIO_WRITE_W                     ;                       ///////
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04965          MOVF   PHASE_OFFSETL, W, ACCESS        ;                       ///////
                      04966          BCF    WREG, 7, ACCESS                 ;                       ///////
                      04967          SEND_8_BIT_W                           ;                       ///////
                      04968          ;CALL  SIO_WRITE_W                     ;                       ///////
                      04969          MOVLW  UPPER(SYS_SNH)                  ;                       ///////
                      04970          MOVWF  TBLPTRU, ACCESS                 ;                       ///////
                      04971          MOVLW  HIGH(SYS_SNH)                   ;                       ///////
                      04972          MOVWF  TBLPTRH, ACCESS                 ;                       ///////
                      04973          MOVLW  LOW(SYS_SNH)                    ;                       ///////
                      04974          MOVWF  TBLPTRL, ACCESS                 ;                       ///////
                      04975          TBLRD*+                                ;                       ///////
                      04976          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      04977          SEND_8_BIT_W                           ;                       ///////
                      04978          TBLRD*+                                ;                       ///////
                      04979          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      04980          SEND_8_BIT_W                           ;                       ///////
                      04981          MOVLW  0x33                            ;                       ///////
                      04982          CALL   SIO_WRITE_W                     ;                       ///////
                      04983 S11_END_TRANSMIT:                               ;                       ///////
                      04984          ; we're done, shut down transmitter when data's all sent       ///////
                      04985          BSF    SSR_STATE, DRAIN_TR, ACCESS     ;                       ///////
                      04986          CLRF   YY_STATE, ACCESS                ;                       ///////
                      04987          RETURN                                 ;                       ///////
                      04988                                                 ;                       ///////
                      04989 S11_BAD_SENTINEL:                               ;                       ///////
                      04990          ERR_BUG 0x0A, ERR_CLASS_INT_COMMAND    ;                       ///////
                      04991                                                 ;                       ///////
                      04992 S11_WRITE_NEXT_BYTE:                            ;                       ///////
                      04993          MOVF   YY_DATA, W, ACCESS              ;                       ///////
                      04994          BTFSS  YY_COMMAND, 7, ACCESS           ; set the MSB of the    ///////
                      04995          BRA    S11_WNB_1                       ; first byte we see     ///////
                      04996          BSF    WREG, 7, ACCESS                 ;                       ///////
                      04997          BCF    YY_COMMAND, 7, ACCESS           ;                       ///////
                      04998          CALL   SIO_WRITE_W                     ; send raw 1st byte     ///////
                      04999          BRA    S11_END_1                       ;                       ///////
                      05000 S11_WNB_1:                                      ;                       ///////
                      05001          SEND_8_BIT_W                           ; send escaped byte     ///////
                      05002          ;CALL  SIO_WRITE_W                     ;                       ///////
                      05003 S11_END_1:                                      ;                       ///////
                      05004          DECF   YY_YY, F, ACCESS                ;                       ///////
                      05005          RETURN                                 ;                       ///////
                      05006         ELSE                                    ;                       ///////
                      05007          ERR_BUG 0x0B, ERR_CLASS_OVERRUN        ;                       ///////
00153E 0E0B               M          MOVLW  0x0B
001540 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001542 6A00               M          CLRF   YY_STATE, ACCESS
001544 0012               M          RETURN
                      05008         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
                      05009         
001546                05010 S12_DATA:
001546 2CE8           05011         DECFSZ  WREG, W, ACCESS
001548 D???           05012         BRA     S13_DATA
                      05013         ;
                      05014         ; IC_LED:  Received GY byte, store in YY_YY and wait for R byte.
                      05015         ;
                      05016         IF ROLE_SLAVE
                      05017          MOVFF  YY_DATA, YY_YY
                      05018          INCF   YY_STATE, F, ACCESS             ; -> S13
                      05019          RETURN
                      05020         ELSE
                      05021          ERR_BUG 0x0C, ERR_CLASS_OVERRUN
00154A 0E0C               M          MOVLW  0x0C
00154C 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M          ENDIF
00154E 6A00               M          CLRF   YY_STATE, ACCESS
001550 0012               M          RETURN
                      05022         ENDIF
                      05023         
001552                05024 S13_DATA:
001552 2CE8           05025         DECFSZ  WREG, W, ACCESS
001554 D???           05026         BRA     S14_DATA
                      05027         ;
                      05028         ; S13: IC_LED command received
                      05029         ;
                      05030         ;   ___7______6______5______4______3______2______1______0__
                      05031         ;  |                                  |                    |
                      05032         ;  |                0                 |          7         | YY_COMMAND
                      05033         ;  |______|______|______|______|______|______|______|______|
                      05034         ;  |      |      |      |      |                           |
                      05035         ;  |   0  |   0  |   1  |   0  |             1             | (not saved)
                      05036         ;  |______|______|______|______|______|______|______|______|
                      05037         ;  |      |      |                    |                    |  
                      05038         ;  |   0  |   0  |     green LED      |     yellow LED     | YY_YY
                      05039         ;  |______|______|______|______|______|______|______|______|
                      05040         ;  |      |                           |                    |
                      05041         ;  |   0  |             0             |      red LED       | YY_DATA
                      05042         ;  |______|______|______|______|______|______|______|______|
                      05043         ;
                      05044         ;
                      05045         IF ROLE_SLAVE
                      05046          IF HAS_STATUS_LEDS
                      05047 ALTER_LED_STATE MACRO COLOR
                      05048           ;
                      05049           ; Change LED state based on W:
                      05050           ;   000  steady off    001  steady on
                      05051           ;   010  slow fade     011  rapid fade
                      05052           ;   100  slow flash    101  rapid flash
                      05053           ;   11x  no change
                      05054           ;
                      05055           BNZ   ALTER_LED_0_1
                      05056           SET_SSR_OFF COLOR
                      05057           BRA   ALTER_LED_0_EXIT
                      05058 ALTER_LED_0_1:
                      05059           DECFSZ WREG, W, ACCESS
                      05060           BRA   ALTER_LED_0_2
                      05061           SET_SSR_STEADY COLOR
                      05062           BRA   ALTER_LED_0_EXIT
                      05063 ALTER_LED_0_2:
                      05064           DECFSZ WREG, W, ACCESS
                      05065           BRA   ALTER_LED_0_3
                      05066           SET_SSR_SLOW_FADE COLOR
                      05067           BRA   ALTER_LED_0_EXIT
                      05068 ALTER_LED_0_3:
                      05069           DECFSZ WREG, W, ACCESS
                      05070           BRA   ALTER_LED_0_4
                      05071           SET_SSR_RAPID_FADE COLOR
                      05072           BRA   ALTER_LED_0_EXIT
                      05073 ALTER_LED_0_4:
                      05074           DECFSZ WREG, W, ACCESS
                      05075           BRA   ALTER_LED_0_5
                      05076           SET_SSR_SLOW_FLASH COLOR
                      05077           BRA   ALTER_LED_0_EXIT
                      05078 ALTER_LED_0_5:
                      05079           DECFSZ WREG, W, ACCESS
                      05080           BRA   ALTER_LED_0_EXIT
                      05081           SET_SSR_RAPID_FLASH COLOR
                      05082           ; fall-through: other bit patterns defined as "no change"
                      05083 ALTER_LED_0_EXIT:
                      05084          ENDM
                      05085          MOVLW  0x07
                      05086          ANDWF  YY_YY, W, ACCESS
                      05087          ALTER_LED_STATE SSR_YELLOW
                      05088          MOVLW  0x38
                      05089          ANDWF  YY_YY, W, ACCESS
                      05090          RRNCF  WREG, W, ACCESS
                      05091          RRNCF  WREG, W, ACCESS
                      05092          RRNCF  WREG, W, ACCESS
                      05093          ALTER_LED_STATE SSR_GREEN
                      05094          MOVLW  0x07
                      05095          ANDWF  YY_DATA, W, ACCESS
                      05096          ALTER_LED_STATE SSR_RED
                      05097          ; and we're done.
                      05098          ENDIF
                      05099          CLRF   YY_STATE, ACCESS
                      05100          RETURN
                      05101         ELSE
                      05102          ERR_BUG 0x0D, ERR_CLASS_OVERRUN
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001556 0E0D               M          MOVLW  0x0D
001558 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
00155A 6A00               M          CLRF   YY_STATE, ACCESS
00155C 0012               M          RETURN
                      05103         ENDIF
                      05104         
00155E                05105 S14_DATA:
00155E 2CE8           05106         DECFSZ  WREG, W, ACCESS
001560 D???           05107         BRA     S15_DATA
                      05108         ;
                      05109         ; DEF_SEQ: sequence number received, now we need
                      05110         ; to collect the rest of the packet
                      05111         ;
001562 C??? F???      05112         MOVFF   YY_DATA, YY_YY          ; sequence number in YY_YY
                      05113         WAIT_FOR_SENTINEL .131, B'01110011', .12        ; S6.12 when sentinel found
001566 0E83               M          MOVLW  .131
001568 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00156A 0E73               M          MOVLW  B'01110011'
00156C 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00156E 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001570 6E00               M          MOVWF  YY_STATE, ACCESS
001572 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001574 0E0C               M          MOVLW  .12
001576 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001578 0012           05114         RETURN
                      05115         
00157A                05116 S15_DATA:
00157A 2CE8           05117         DECFSZ  WREG, W, ACCESS
00157C D???           05118         BRA     S16_DATA
                      05119         ;
                      05120         ; S15: EXEC_SEQ: execute sequence
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05121         ;
                      05122         ;   ___7______6______5______4______3______2______1______0__
                      05123         ;  |                                  |                    |
                      05124         ;  |                0                 |          7         | YY_COMMAND
                      05125         ;  |______|______|______|______|______|______|______|______|
                      05126         ;  |      |      |      |      |                           |
                      05127         ;  |   0  |   0  |   0  |   0  |             5             | (not saved)
                      05128         ;  |______|______|______|______|______|______|______|______|
                      05129         ;  |      |                                                |
                      05130         ;  |   0  |         sequence number or 0 to stop           | YY_DATA
                      05131         ;  |______|______|______|______|______|______|______|______|
                      05132         ;
00157E EF?? F???      05133         GOTO    ERR_NOT_IMP             ; XXX
                      05134         
001582                05135 S16_DATA:
001582 2CE8           05136         DECFSZ  WREG, W, ACCESS
001584 D???           05137         BRA     S17_DATA
                      05138         ;
                      05139         ; S16: MSK_SENS command received
                      05140         ;
                      05141         ;   ___7______6______5______4______3______2______1______0__
                      05142         ;  |                                  |                    |
                      05143         ;  |                0                 |          7         | YY_COMMAND
                      05144         ;  |______|______|______|______|______|______|______|______|
                      05145         ;  |      |      |      |      |                           |
                      05146         ;  |   0  |   0  |   0  |   0  |             7             | (not saved)
                      05147         ;  |______|______|______|______|______|______|______|______|
                      05148         ;  |      |                    |      Sensors enabled      |
                      05149         ;  |   0  |          0         |   A  |   B  |   C  |   D  | YY_DATA
                      05150         ;  |______|______|______|______|______|______|______|______|
                      05151         ;
                      05152         ;
001586 EF?? F???      05153         GOTO    ERR_NOT_IMP             ; XXX
                      05154 
00158A                05155 S17_DATA:
                      05156         ; Or this WOULD be state 17, except there isn't one!
                      05157         ; Any state >16 lands here.  Handle the exception and
                      05158         ; abort the command being processed.
                      05159         ;
                      05160         IF QSCC_PORT
                      05161          #include "qscc_hook_s17.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s17 only used for QS*C systems"
                      00031         ENDIF
                      00032 
00158A                00033 S17_DATA_NIL:
00158A 2CE8           00034         DECFSZ  WREG, W, ACCESS
00158C D???           00035         BRA     S18_DATA_NIL
00158E EF?? F???      00036         GOTO    ERR_COMMAND
                      00037 
001592                00038 S18_DATA_NIL:
001592 2CE8           00039         DECFSZ  WREG, W, ACCESS
001594 D???           00040         BRA     S19_DATA
001596 EF?? F???      00041         GOTO    ERR_COMMAND
                      00042 
00159A                00043 S19_DATA:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00159A 2CE8           00044         DECFSZ  WREG, W, ACCESS
00159C D???           00045         BRA     S20_DATA
                      00046         ;
                      00047         ; S19: QS_QUERY command received.
                      00048         ;
                      00049         ;   ___7______6______5______4______3______2______1______0__
                      00050         ;  |                                  |                    |
                      00051         ;  |                0                 |          7         | YY_COMMAND
                      00052         ;  |______|______|______|______|______|______|______|______|
                      00053         ;  |      |      |      |      |                           |
                      00054         ;  |   0  |   0  |   0  |   0  |             10            | (not saved)
                      00055         ;  |______|______|______|______|______|______|______|______|
                      00056         ;  |      |      |      |      |      |      |      |      |
                      00057         ;  |   0  |   1  |   1  |   0  |   0  |Button| Ping | Stop | YY_DATA
                      00058         ;  |______|______|______|______|______|______|______|______|
                      00059         ;
                      00060         ;
00159E 0004           00061         CLRWDT
0015A0 0EF8           00062         MOVLW   B'11111000'                     ; Verify YY_DATA's constant bits
0015A2 1400           00063         ANDWF   YY_DATA, W, ACCESS
0015A4 6E00           00064         MOVWF   YY_YY, ACCESS
0015A6 0E60           00065         MOVLW   B'01100000'
0015A8 6200           00066         CPFSEQ  YY_YY, ACCESS
0015AA EF?? F???      00067         GOTO    ERR_COMMAND
                      00068         
  00000002            00069 QS_QFLG_BUTTONS EQU     2
  00000001            00070 QS_QFLG_PING    EQU     1
  00000000            00071 QS_QFLG_STOP    EQU     0
                      00072 
0015AE B000           00073         BTFSC   YY_DATA, QS_QFLG_STOP, ACCESS
0015B0 EC?? F???      00074         CALL    QS_STOP_SCANNER
                      00075         ;
                      00076         ; XXX report out status
                      00077         ;
0015B4 6A00           00078         CLRF    YY_STATE, ACCESS
0015B6 0012           00079         RETURN
                      00080 
0015B8                00081 S20_DATA:
0015B8 2CE8           00082         DECFSZ  WREG, W, ACCESS
0015BA D???           00083         BRA     S21_DATA
                      00084         ;
                      00085         ; SET_BUTTON_MASKS first byte received
                      00086         ; Store in YY_YY, wait for second byte.
                      00087         ;
0015BC C??? F???      00088         MOVFF   YY_DATA, YY_YY
0015C0 2A00           00089         INCF    YY_STATE, F, ACCESS     ; -> state 21 (wait for final byte)
0015C2 0012           00090         RETURN
                      00091 
0015C4                00092 S21_DATA:
0015C4 2CE8           00093         DECFSZ  WREG, W, ACCESS
0015C6 D???           00094         BRA     S22_DATA
                      00095         ;
                      00096         ; S21: QS_SET_BUTTON_MASKS command received.
                      00097         ;
                      00098         ;   ___7______6______5______4______3______2______1______0__
                      00099         ;  |                                  |                    |
                      00100         ;  |                0                 |          7         | YY_COMMAND
                      00101         ;  |______|______|______|______|______|______|______|______|
                      00102         ;  |      |      |      |      |                           |
                      00103         ;  |   0  |   0  |   0  |   0  |             11            | (not saved)
                      00104         ;  |______|______|______|______|______|______|______|______|
                      00105         ;  |      |      | BUTTON MASKS (1=disabled, 0=enabled)    |
                      00106         ;  |   0  |   0  |   A  |   B  |   C  |   D  |   L  |   X  | YY_YY  
                      00107         ;  |______|______|__L2__|__X2__|__L1__|__X1__|__L0__|__X0__|        <-- QSRC
                      00108         ;  |      |      |                                         |
                      00109         ;  |   0  |   1  |   1  |   0  |   0  |   0  |   0  |   0  | YY_DATA
                      00110         ;  |______|______|___0__|___0__|__L4__|__X4__|__L3__|__X3__|        <-- QSRC
                      00111         ;
                      00112         ;
0015C8 AE00           00113         BTFSS   YY_YY, 7, ACCESS        ; Check postbyte 1 constant 00xxxxxx
0015CA BC00           00114         BTFSC   YY_YY, 6, ACCESS
0015CC EF?? F???      00115         GOTO    ERR_COMMAND
                      00116 
0015D0 AE00           00117         BTFSS   YY_DATA, 7, ACCESS      ; Check postbyte 2 constant 01xxxxxx
0015D2 AC00           00118         BTFSS   YY_DATA, 6, ACCESS
0015D4 EF?? F???      00119         GOTO    ERR_COMMAND
                      00120 
                      00121         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC 
                      00122          MOVLW  B'01100000'             ; Check postbyte 2 constant 01100000
                      00123          CPFSEQ YY_DATA, ACCESS
                      00124          GOTO   ERR_COMMAND
                      00125          ;
                      00126          ; XXX set button masks
                      00127          ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00128         ELSE
                      00129          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
0015D8 AA00           00130           BTFSS YY_DATA, 5, ACCESS      ; Check postbyte 2 constant xx00xxxx
0015DA B800           00131           BTFSC YY_DATA, 4, ACCESS
0015DC EF?? F???      00132           GOTO  ERR_COMMAND
                      00133           ;
                      00134           ; XXX set button masks
                      00135           ;
                      00136          ENDIF
                      00137         ENDIF
0015E0 6A00           00138         CLRF    YY_STATE, ACCESS
0015E2 0012           00139         RETURN
                      00140           
0015E4                00141 S22_DATA:
                      00142         ERR_BUG 0x05, ERR_CLASS_OVERRUN
0015E4 0E05               M          MOVLW  0x05
0015E6 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0015E8 6A00               M          CLRF   YY_STATE, ACCESS
0015EA 0012               M          RETURN
                      05162         ELSE
                      05163          ERR_BUG 0x0E, ERR_CLASS_OVERRUN
                      05164         ENDIF
                      05165 
0015EC                05166 SSR_OUTPUT_VALUE:
                      05167         ;
                      05168         ; Change an SSR's output value.  This does the same thing
                      05169         ; as SET_SSR_VALUE, except the other one is a macro we can
                      05170         ; only use at runtime with constant SSR IDs (but more efficiently)
                      05171         ; while this works at runtime.
                      05172         ;
                      05173         ; Changes the output value of TARGET_SSR to the W register.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05174         ; Uses FSR0 register and KK.
                      05175         ;
0015EC 0004           05176         CLRWDT
0015EE 9E00           05177         BCF     TARGET_SSR, 7, ACCESS
0015F0 9C00           05178         BCF     TARGET_SSR, 6, ACCESS
0015F2 6E00           05179         MOVWF   KK, ACCESS
0015F4 EE?? F0??      05180         LFSR    0, SSR_00_VALUE
0015F8 5000           05181         MOVF    TARGET_SSR, W, ACCESS           ; ssr value -> [ssr0 + target]
0015FA 26E9           05182         ADDWF   FSR0L, F, ACCESS
0015FC C??? FFEF      05183         MOVFF   KK, INDF0
001600 0E14           05184         MOVLW   SSR_BLOCK_LEN
001602 26E9           05185         ADDWF   FSR0L, F, ACCESS
001604 6AEF           05186         CLRF    INDF0                           ; clear flags
001606 26E9           05187         ADDWF   FSR0L, F, ACCESS
001608 6AEF           05188         CLRF    INDF0                           ; clear step
00160A 26E9           05189         ADDWF   FSR0L, F, ACCESS
00160C 6AEF           05190         CLRF    INDF0                           ; clear speed
00160E 26E9           05191         ADDWF   FSR0L, F, ACCESS
001610 6AEF           05192         CLRF    INDF0                           ; clear counter
001612 0012           05193         RETURN
                      05194         
001614                05195 XLATE_SSR_ID:
                      05196         ;
                      05197         ; Move YY_DATA -> TARGET_SSR
                      05198         ; setting flag bits as appropriate
                      05199         ;   _______________________________________________________
                      05200         ;  |             |                                         |
                      05201         ;  |             |           Channel ID (0-47)             | YY_DATA
                      05202         ;  |______|______|______|______|______|______|______|______|    |
                      05203         ;  |NOT_MY|INVALI|                                         |    V
                      05204         ;  | _SSR |D_SSR |           Channel ID (0-23)             | TARGET_SSR
                      05205         ;  |______|______|______|______|______|______|______|______|
                      05206         ;
                      05207         ; If INVALID_SSR=1, the ID cannot possibly be right for the device; disregard all other bits
                      05208         ; If NOT_MY_SSR=1, this channel exists on the slave chip; Channel ID has been adjusted to that C
                            PU.
                      05209         ; Else, Channel ID is for this chip and is in range [0,23].
                      05210         ;
001614 0004           05211         CLRWDT
001616 0E3F           05212         MOVLW   0x3F
001618 1400           05213         ANDWF   YY_DATA, W, ACCESS
00161A 6E00           05214         MOVWF   TARGET_SSR, ACCESS
00161C 0E17           05215         MOVLW   .23
00161E 6400           05216         CPFSGT  TARGET_SSR, ACCESS
001620 0012           05217         RETURN
                      05218         IF ROLE_MASTER
                      05219          MOVLW  .24
                      05220          SUBWF  TARGET_SSR, F, ACCESS
                      05221          CPFSLT TARGET_SSR, ACCESS
                      05222         ENDIF
001622 8C00           05223         BSF     TARGET_SSR, INVALID_SSR, ACCESS
001624 8E00           05224         BSF     TARGET_SSR, NOT_MY_SSR, ACCESS
001626 0012           05225         RETURN
                      05226 
001628                05227 UPDATE_SSR_OUTPUTS:
001628 0004           05228         CLRWDT
00162A 0104           05229         BANKSEL SSR_DATA_BANK
00162C 9A00           05230         BCF     SSR_STATE, SLICE_UPD, ACCESS
00162E 5000           05231         MOVF    CUR_SLICE, W, ACCESS    ; is this the last cycle?
001630 E0??           05232         BZ      UPDATE_MINIMUM_LEVEL
                      05233         ;
                      05234         ; For maximum speed in this tight loop, we save time by 
                      05235         ; unrolling all the tests and output settings into a flat
                      05236         ; instruction sequence (via assembly-time macro) instead of
                      05237         ; using a run-time loop or subroutines to calculate the bits
                      05238         ; and ports for each.  (Like we used to in the previous version.)
                      05239         ;
  00000000            05240 X       SET     0
                      05241         WHILE X <= SSR_MAX
001632 6300           05242          CPFSEQ SSR_00_VALUE+0,     BANKED      ; is this SSR set to our slice value?
001634 D???           05243          BRA    UPDATE_SSR_SKIP_0
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001636 848B           05245           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn on SSR
                      05248          ENDIF
001638                05249 UPDATE_SSR_SKIP_0:
  00000001            05250 X        ++
001638 6300           05242          CPFSEQ SSR_00_VALUE+1,     BANKED      ; is this SSR set to our slice value?
00163A D???           05243          BRA    UPDATE_SSR_SKIP_1
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00163C 828B           05245           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn on SSR
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05248          ENDIF
00163E                05249 UPDATE_SSR_SKIP_1:
  00000002            05250 X        ++
00163E 6300           05242          CPFSEQ SSR_00_VALUE+2,     BANKED      ; is this SSR set to our slice value?
001640 D???           05243          BRA    UPDATE_SSR_SKIP_2
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001642 808B           05245           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn on SSR
                      05248          ENDIF
001644                05249 UPDATE_SSR_SKIP_2:
  00000003            05250 X        ++
001644 6300           05242          CPFSEQ SSR_00_VALUE+3,     BANKED      ; is this SSR set to our slice value?
001646 D???           05243          BRA    UPDATE_SSR_SKIP_3
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001648 848D           05245           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn on SSR
                      05248          ENDIF
00164A                05249 UPDATE_SSR_SKIP_3:
  00000004            05250 X        ++
00164A 6300           05242          CPFSEQ SSR_00_VALUE+4,     BANKED      ; is this SSR set to our slice value?
00164C D???           05243          BRA    UPDATE_SSR_SKIP_4
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00164E 8E8A           05245           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn on SSR
                      05248          ENDIF
001650                05249 UPDATE_SSR_SKIP_4:
  00000005            05250 X        ++
001650 6300           05242          CPFSEQ SSR_00_VALUE+5,     BANKED      ; is this SSR set to our slice value?
001652 D???           05243          BRA    UPDATE_SSR_SKIP_5
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001654 8C8A           05245           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn on SSR
                      05248          ENDIF
001656                05249 UPDATE_SSR_SKIP_5:
  00000006            05250 X        ++
001656 6300           05242          CPFSEQ SSR_00_VALUE+6,     BANKED      ; is this SSR set to our slice value?
001658 D???           05243          BRA    UPDATE_SSR_SKIP_6
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00165A 8A8A           05245           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn on SSR
                      05248          ENDIF
00165C                05249 UPDATE_SSR_SKIP_6:
  00000007            05250 X        ++
00165C 6300           05242          CPFSEQ SSR_00_VALUE+7,     BANKED      ; is this SSR set to our slice value?
00165E D???           05243          BRA    UPDATE_SSR_SKIP_7
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001660 888A           05245           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn on SSR
                      05248          ENDIF
001662                05249 UPDATE_SSR_SKIP_7:
  00000008            05250 X        ++
001662 6300           05242          CPFSEQ SSR_00_VALUE+8,     BANKED      ; is this SSR set to our slice value?
001664 D???           05243          BRA    UPDATE_SSR_SKIP_8
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001666 868A           05245           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn on SSR
                      05248          ENDIF
001668                05249 UPDATE_SSR_SKIP_8:
  00000009            05250 X        ++
001668 6300           05242          CPFSEQ SSR_00_VALUE+9,     BANKED      ; is this SSR set to our slice value?
00166A D???           05243          BRA    UPDATE_SSR_SKIP_9
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00166C 848A           05245           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn on SSR
                      05248          ENDIF
00166E                05249 UPDATE_SSR_SKIP_9:
  0000000A            05250 X        ++
00166E 6300           05242          CPFSEQ SSR_00_VALUE+10,    BANKED      ; is this SSR set to our slice value?
001670 D???           05243          BRA    UPDATE_SSR_SKIP_10
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001672 828A           05245           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn on SSR
                      05248          ENDIF
001674                05249 UPDATE_SSR_SKIP_10:
  0000000B            05250 X        ++
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001674 6300           05242          CPFSEQ SSR_00_VALUE+11,    BANKED      ; is this SSR set to our slice value?
001676 D???           05243          BRA    UPDATE_SSR_SKIP_11
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001678 808D           05245           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn on SSR
                      05248          ENDIF
00167A                05249 UPDATE_SSR_SKIP_11:
  0000000C            05250 X        ++
00167A 6300           05242          CPFSEQ SSR_00_VALUE+12,    BANKED      ; is this SSR set to our slice value?
00167C D???           05243          BRA    UPDATE_SSR_SKIP_12
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00167E 8E8C           05245           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn on SSR
                      05248          ENDIF
001680                05249 UPDATE_SSR_SKIP_12:
  0000000D            05250 X        ++
001680 6300           05242          CPFSEQ SSR_00_VALUE+13,    BANKED      ; is this SSR set to our slice value?
001682 D???           05243          BRA    UPDATE_SSR_SKIP_13
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001684 8C8C           05245           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn on SSR
                      05248          ENDIF
001686                05249 UPDATE_SSR_SKIP_13:
  0000000E            05250 X        ++
001686 6300           05242          CPFSEQ SSR_00_VALUE+14,    BANKED      ; is this SSR set to our slice value?
001688 D???           05243          BRA    UPDATE_SSR_SKIP_14
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00168A 8A8C           05245           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn on SSR
                      05248          ENDIF
00168C                05249 UPDATE_SSR_SKIP_14:
  0000000F            05250 X        ++
00168C 6300           05242          CPFSEQ SSR_00_VALUE+15,    BANKED      ; is this SSR set to our slice value?
00168E D???           05243          BRA    UPDATE_SSR_SKIP_15
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001690 828D           05245           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn on SSR
                      05248          ENDIF
001692                05249 UPDATE_SSR_SKIP_15:
  00000010            05250 X        ++
001692 6300           05242          CPFSEQ SSR_00_VALUE+16,    BANKED      ; is this SSR set to our slice value?
001694 D???           05243          BRA    UPDATE_SSR_SKIP_16
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001696 808A           05245           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn on SSR
                      05248          ENDIF
001698                05249 UPDATE_SSR_SKIP_16:
  00000011            05250 X        ++
001698 6300           05242          CPFSEQ SSR_00_VALUE+17,    BANKED      ; is this SSR set to our slice value?
00169A D???           05243          BRA    UPDATE_SSR_SKIP_17
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00169C 868C           05245           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn on SSR
                      05248          ENDIF
00169E                05249 UPDATE_SSR_SKIP_17:
  00000012            05250 X        ++
00169E 6300           05242          CPFSEQ SSR_00_VALUE+18,    BANKED      ; is this SSR set to our slice value?
0016A0 D???           05243          BRA    UPDATE_SSR_SKIP_18
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0016A2 828C           05245           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn on SSR
                      05248          ENDIF
0016A4                05249 UPDATE_SSR_SKIP_18:
  00000013            05250 X        ++
0016A4 6300           05242          CPFSEQ SSR_00_VALUE+19,    BANKED      ; is this SSR set to our slice value?
0016A6 D???           05243          BRA    UPDATE_SSR_SKIP_19
                      05244          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0016A8 848C           05245           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn on light
                      05246          ELSE
                      05247           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn on SSR
                      05248          ENDIF
0016AA                05249 UPDATE_SSR_SKIP_19:
  00000014            05250 X        ++
                      05251         ENDW
0016AA 0600           05252         DECF    CUR_SLICE, F, ACCESS
0016AC 0012           05253         RETURN
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05254 
0016AE                05255 UPDATE_MINIMUM_LEVEL:
                      05256         ;
                      05257         ; turn off every output that isn't set to be fully on
                      05258         ; and handle ramping up/down
                      05259         ;
0016AE 0104           05260         BANKSEL SSR_DATA_BANK
0016B0 8800           05261         BSF     SSR_STATE2, ALL_OFF, ACCESS     
  00000000            05262 X       SET     0
                      05263         WHILE X <= SSR_MAX
0016B2 1D00           05264          COMF   SSR_00_VALUE+0,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
0016B4 E1??           05266          BNZ    UPDATE_MIN_DIMMED_0
                      05267          IF X <= OUTPUT_CHAN_MAX
0016B6 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
0016B8 D???           05270          BRA    UPDATE_MIN_SKIP_0
                      05271 
0016BA                05272 UPDATE_MIN_DIMMED_0:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0016BA 948B           05274           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+0,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
0016BC                05280 UPDATE_MIN_SKIP_0:
                      05281 
0016BC AF00           05282          BTFSS  SSR_00_FLAGS+0,     FADE_UP, BANKED
0016BE D???           05283          BRA    TRY_DOWN_0
0016C0 2F00           05284          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay to next step
0016C2 D???           05285          BRA    END_FADE_0
0016C4 C??? F???      05286          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0
0016C8 5100           05287          MOVF   SSR_00_STEP+0,     W, BANKED
0016CA 2700           05288          ADDWF  SSR_00_VALUE+0,     F, BANKED
0016CC E3??           05289          BNC    END_FADE_0
0016CE 6900           05290          SETF   SSR_00_VALUE+0,     BANKED              ; reached max value
0016D0 9F00           05291          BCF    SSR_00_FLAGS+0,     FADE_UP, BANKED     ; stop fading
0016D2 AB00           05292          BTFSS  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
0016D4 D???           05293          BRA    END_FADE_0
0016D6 8D00           05294          BSF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   
0016D8 D???           05295          BRA    END_FADE_0
                      05296 
0016DA                05297 TRY_DOWN_0:
0016DA AD00           05298          BTFSS  SSR_00_FLAGS+0,     FADE_DOWN, BANKED
0016DC D???           05299          BRA    END_FADE_0
0016DE 2F00           05300          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay
0016E0 D???           05301          BRA    END_FADE_0
0016E2 C??? F???      05302          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0; reset delay
0016E6 5100           05303          MOVF   SSR_00_STEP+0,     W, BANKED
0016E8 5F00           05304          SUBWF  SSR_00_VALUE+0,     F, BANKED
0016EA E2??           05305          BC     END_FADE_0
0016EC 6B00           05306          CLRF   SSR_00_VALUE+0,     BANKED              ; reached min value
0016EE 9D00           05307          BCF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   ; stop fading
0016F0 BB00           05308          BTFSC  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
0016F2 8F00           05309          BSF    SSR_00_FLAGS+0,     FADE_UP, BANKED
0016F4 B900           05310          BTFSC  SSR_00_FLAGS+0,     MAX_OFF_TIME, BANKED; maximizing off-time?
0016F6 6900           05311          SETF   SSR_00_COUNTER+0,     BANKED
                      05312 
0016F8                05313 END_FADE_0:
  00000001            05314 X        ++
0016F8 1D00           05264          COMF   SSR_00_VALUE+1,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
0016FA E1??           05266          BNZ    UPDATE_MIN_DIMMED_1
                      05267          IF X <= OUTPUT_CHAN_MAX
0016FC 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
0016FE D???           05270          BRA    UPDATE_MIN_SKIP_1
                      05271 
001700                05272 UPDATE_MIN_DIMMED_1:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001700 928B           05274           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+1,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001702                05280 UPDATE_MIN_SKIP_1:
                      05281 
001702 AF00           05282          BTFSS  SSR_00_FLAGS+1,     FADE_UP, BANKED
001704 D???           05283          BRA    TRY_DOWN_1
001706 2F00           05284          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay to next step
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001708 D???           05285          BRA    END_FADE_1
00170A C??? F???      05286          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1
00170E 5100           05287          MOVF   SSR_00_STEP+1,     W, BANKED
001710 2700           05288          ADDWF  SSR_00_VALUE+1,     F, BANKED
001712 E3??           05289          BNC    END_FADE_1
001714 6900           05290          SETF   SSR_00_VALUE+1,     BANKED              ; reached max value
001716 9F00           05291          BCF    SSR_00_FLAGS+1,     FADE_UP, BANKED     ; stop fading
001718 AB00           05292          BTFSS  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
00171A D???           05293          BRA    END_FADE_1
00171C 8D00           05294          BSF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   
00171E D???           05295          BRA    END_FADE_1
                      05296 
001720                05297 TRY_DOWN_1:
001720 AD00           05298          BTFSS  SSR_00_FLAGS+1,     FADE_DOWN, BANKED
001722 D???           05299          BRA    END_FADE_1
001724 2F00           05300          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay
001726 D???           05301          BRA    END_FADE_1
001728 C??? F???      05302          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1; reset delay
00172C 5100           05303          MOVF   SSR_00_STEP+1,     W, BANKED
00172E 5F00           05304          SUBWF  SSR_00_VALUE+1,     F, BANKED
001730 E2??           05305          BC     END_FADE_1
001732 6B00           05306          CLRF   SSR_00_VALUE+1,     BANKED              ; reached min value
001734 9D00           05307          BCF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   ; stop fading
001736 BB00           05308          BTFSC  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
001738 8F00           05309          BSF    SSR_00_FLAGS+1,     FADE_UP, BANKED
00173A B900           05310          BTFSC  SSR_00_FLAGS+1,     MAX_OFF_TIME, BANKED; maximizing off-time?
00173C 6900           05311          SETF   SSR_00_COUNTER+1,     BANKED
                      05312 
00173E                05313 END_FADE_1:
  00000002            05314 X        ++
00173E 1D00           05264          COMF   SSR_00_VALUE+2,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001740 E1??           05266          BNZ    UPDATE_MIN_DIMMED_2
                      05267          IF X <= OUTPUT_CHAN_MAX
001742 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001744 D???           05270          BRA    UPDATE_MIN_SKIP_2
                      05271 
001746                05272 UPDATE_MIN_DIMMED_2:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001746 908B           05274           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+2,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001748                05280 UPDATE_MIN_SKIP_2:
                      05281 
001748 AF00           05282          BTFSS  SSR_00_FLAGS+2,     FADE_UP, BANKED
00174A D???           05283          BRA    TRY_DOWN_2
00174C 2F00           05284          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay to next step
00174E D???           05285          BRA    END_FADE_2
001750 C??? F???      05286          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2
001754 5100           05287          MOVF   SSR_00_STEP+2,     W, BANKED
001756 2700           05288          ADDWF  SSR_00_VALUE+2,     F, BANKED
001758 E3??           05289          BNC    END_FADE_2
00175A 6900           05290          SETF   SSR_00_VALUE+2,     BANKED              ; reached max value
00175C 9F00           05291          BCF    SSR_00_FLAGS+2,     FADE_UP, BANKED     ; stop fading
00175E AB00           05292          BTFSS  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
001760 D???           05293          BRA    END_FADE_2
001762 8D00           05294          BSF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   
001764 D???           05295          BRA    END_FADE_2
                      05296 
001766                05297 TRY_DOWN_2:
001766 AD00           05298          BTFSS  SSR_00_FLAGS+2,     FADE_DOWN, BANKED
001768 D???           05299          BRA    END_FADE_2
00176A 2F00           05300          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay
00176C D???           05301          BRA    END_FADE_2
00176E C??? F???      05302          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2; reset delay
001772 5100           05303          MOVF   SSR_00_STEP+2,     W, BANKED
001774 5F00           05304          SUBWF  SSR_00_VALUE+2,     F, BANKED
001776 E2??           05305          BC     END_FADE_2
001778 6B00           05306          CLRF   SSR_00_VALUE+2,     BANKED              ; reached min value
00177A 9D00           05307          BCF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   ; stop fading
00177C BB00           05308          BTFSC  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
00177E 8F00           05309          BSF    SSR_00_FLAGS+2,     FADE_UP, BANKED
001780 B900           05310          BTFSC  SSR_00_FLAGS+2,     MAX_OFF_TIME, BANKED; maximizing off-time?
001782 6900           05311          SETF   SSR_00_COUNTER+2,     BANKED
                      05312 
001784                05313 END_FADE_2:
  00000003            05314 X        ++
001784 1D00           05264          COMF   SSR_00_VALUE+3,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001786 E1??           05266          BNZ    UPDATE_MIN_DIMMED_3
                      05267          IF X <= OUTPUT_CHAN_MAX
001788 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
00178A D???           05270          BRA    UPDATE_MIN_SKIP_3
                      05271 
00178C                05272 UPDATE_MIN_DIMMED_3:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00178C 948D           05274           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+3,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
00178E                05280 UPDATE_MIN_SKIP_3:
                      05281 
00178E AF00           05282          BTFSS  SSR_00_FLAGS+3,     FADE_UP, BANKED
001790 D???           05283          BRA    TRY_DOWN_3
001792 2F00           05284          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay to next step
001794 D???           05285          BRA    END_FADE_3
001796 C??? F???      05286          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3
00179A 5100           05287          MOVF   SSR_00_STEP+3,     W, BANKED
00179C 2700           05288          ADDWF  SSR_00_VALUE+3,     F, BANKED
00179E E3??           05289          BNC    END_FADE_3
0017A0 6900           05290          SETF   SSR_00_VALUE+3,     BANKED              ; reached max value
0017A2 9F00           05291          BCF    SSR_00_FLAGS+3,     FADE_UP, BANKED     ; stop fading
0017A4 AB00           05292          BTFSS  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
0017A6 D???           05293          BRA    END_FADE_3
0017A8 8D00           05294          BSF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   
0017AA D???           05295          BRA    END_FADE_3
                      05296 
0017AC                05297 TRY_DOWN_3:
0017AC AD00           05298          BTFSS  SSR_00_FLAGS+3,     FADE_DOWN, BANKED
0017AE D???           05299          BRA    END_FADE_3
0017B0 2F00           05300          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay
0017B2 D???           05301          BRA    END_FADE_3
0017B4 C??? F???      05302          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3; reset delay
0017B8 5100           05303          MOVF   SSR_00_STEP+3,     W, BANKED
0017BA 5F00           05304          SUBWF  SSR_00_VALUE+3,     F, BANKED
0017BC E2??           05305          BC     END_FADE_3
0017BE 6B00           05306          CLRF   SSR_00_VALUE+3,     BANKED              ; reached min value
0017C0 9D00           05307          BCF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   ; stop fading
0017C2 BB00           05308          BTFSC  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
0017C4 8F00           05309          BSF    SSR_00_FLAGS+3,     FADE_UP, BANKED
0017C6 B900           05310          BTFSC  SSR_00_FLAGS+3,     MAX_OFF_TIME, BANKED; maximizing off-time?
0017C8 6900           05311          SETF   SSR_00_COUNTER+3,     BANKED
                      05312 
0017CA                05313 END_FADE_3:
  00000004            05314 X        ++
0017CA 1D00           05264          COMF   SSR_00_VALUE+4,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
0017CC E1??           05266          BNZ    UPDATE_MIN_DIMMED_4
                      05267          IF X <= OUTPUT_CHAN_MAX
0017CE 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
0017D0 D???           05270          BRA    UPDATE_MIN_SKIP_4
                      05271 
0017D2                05272 UPDATE_MIN_DIMMED_4:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0017D2 9E8A           05274           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+4,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
0017D4                05280 UPDATE_MIN_SKIP_4:
                      05281 
0017D4 AF00           05282          BTFSS  SSR_00_FLAGS+4,     FADE_UP, BANKED
0017D6 D???           05283          BRA    TRY_DOWN_4
0017D8 2F00           05284          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay to next step
0017DA D???           05285          BRA    END_FADE_4
0017DC C??? F???      05286          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4
0017E0 5100           05287          MOVF   SSR_00_STEP+4,     W, BANKED
0017E2 2700           05288          ADDWF  SSR_00_VALUE+4,     F, BANKED
0017E4 E3??           05289          BNC    END_FADE_4
0017E6 6900           05290          SETF   SSR_00_VALUE+4,     BANKED              ; reached max value
0017E8 9F00           05291          BCF    SSR_00_FLAGS+4,     FADE_UP, BANKED     ; stop fading
0017EA AB00           05292          BTFSS  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
0017EC D???           05293          BRA    END_FADE_4
0017EE 8D00           05294          BSF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   
0017F0 D???           05295          BRA    END_FADE_4
                      05296 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0017F2                05297 TRY_DOWN_4:
0017F2 AD00           05298          BTFSS  SSR_00_FLAGS+4,     FADE_DOWN, BANKED
0017F4 D???           05299          BRA    END_FADE_4
0017F6 2F00           05300          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay
0017F8 D???           05301          BRA    END_FADE_4
0017FA C??? F???      05302          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4; reset delay
0017FE 5100           05303          MOVF   SSR_00_STEP+4,     W, BANKED
001800 5F00           05304          SUBWF  SSR_00_VALUE+4,     F, BANKED
001802 E2??           05305          BC     END_FADE_4
001804 6B00           05306          CLRF   SSR_00_VALUE+4,     BANKED              ; reached min value
001806 9D00           05307          BCF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   ; stop fading
001808 BB00           05308          BTFSC  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
00180A 8F00           05309          BSF    SSR_00_FLAGS+4,     FADE_UP, BANKED
00180C B900           05310          BTFSC  SSR_00_FLAGS+4,     MAX_OFF_TIME, BANKED; maximizing off-time?
00180E 6900           05311          SETF   SSR_00_COUNTER+4,     BANKED
                      05312 
001810                05313 END_FADE_4:
  00000005            05314 X        ++
001810 1D00           05264          COMF   SSR_00_VALUE+5,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001812 E1??           05266          BNZ    UPDATE_MIN_DIMMED_5
                      05267          IF X <= OUTPUT_CHAN_MAX
001814 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001816 D???           05270          BRA    UPDATE_MIN_SKIP_5
                      05271 
001818                05272 UPDATE_MIN_DIMMED_5:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001818 9C8A           05274           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+5,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
00181A                05280 UPDATE_MIN_SKIP_5:
                      05281 
00181A AF00           05282          BTFSS  SSR_00_FLAGS+5,     FADE_UP, BANKED
00181C D???           05283          BRA    TRY_DOWN_5
00181E 2F00           05284          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay to next step
001820 D???           05285          BRA    END_FADE_5
001822 C??? F???      05286          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5
001826 5100           05287          MOVF   SSR_00_STEP+5,     W, BANKED
001828 2700           05288          ADDWF  SSR_00_VALUE+5,     F, BANKED
00182A E3??           05289          BNC    END_FADE_5
00182C 6900           05290          SETF   SSR_00_VALUE+5,     BANKED              ; reached max value
00182E 9F00           05291          BCF    SSR_00_FLAGS+5,     FADE_UP, BANKED     ; stop fading
001830 AB00           05292          BTFSS  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
001832 D???           05293          BRA    END_FADE_5
001834 8D00           05294          BSF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   
001836 D???           05295          BRA    END_FADE_5
                      05296 
001838                05297 TRY_DOWN_5:
001838 AD00           05298          BTFSS  SSR_00_FLAGS+5,     FADE_DOWN, BANKED
00183A D???           05299          BRA    END_FADE_5
00183C 2F00           05300          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay
00183E D???           05301          BRA    END_FADE_5
001840 C??? F???      05302          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5; reset delay
001844 5100           05303          MOVF   SSR_00_STEP+5,     W, BANKED
001846 5F00           05304          SUBWF  SSR_00_VALUE+5,     F, BANKED
001848 E2??           05305          BC     END_FADE_5
00184A 6B00           05306          CLRF   SSR_00_VALUE+5,     BANKED              ; reached min value
00184C 9D00           05307          BCF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   ; stop fading
00184E BB00           05308          BTFSC  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
001850 8F00           05309          BSF    SSR_00_FLAGS+5,     FADE_UP, BANKED
001852 B900           05310          BTFSC  SSR_00_FLAGS+5,     MAX_OFF_TIME, BANKED; maximizing off-time?
001854 6900           05311          SETF   SSR_00_COUNTER+5,     BANKED
                      05312 
001856                05313 END_FADE_5:
  00000006            05314 X        ++
001856 1D00           05264          COMF   SSR_00_VALUE+6,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001858 E1??           05266          BNZ    UPDATE_MIN_DIMMED_6
                      05267          IF X <= OUTPUT_CHAN_MAX
00185A 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
00185C D???           05270          BRA    UPDATE_MIN_SKIP_6
                      05271 
00185E                05272 UPDATE_MIN_DIMMED_6:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00185E 9A8A           05274           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn off SSR
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05277           TSTFSZ SSR_00_VALUE+6,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001860                05280 UPDATE_MIN_SKIP_6:
                      05281 
001860 AF00           05282          BTFSS  SSR_00_FLAGS+6,     FADE_UP, BANKED
001862 D???           05283          BRA    TRY_DOWN_6
001864 2F00           05284          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay to next step
001866 D???           05285          BRA    END_FADE_6
001868 C??? F???      05286          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6
00186C 5100           05287          MOVF   SSR_00_STEP+6,     W, BANKED
00186E 2700           05288          ADDWF  SSR_00_VALUE+6,     F, BANKED
001870 E3??           05289          BNC    END_FADE_6
001872 6900           05290          SETF   SSR_00_VALUE+6,     BANKED              ; reached max value
001874 9F00           05291          BCF    SSR_00_FLAGS+6,     FADE_UP, BANKED     ; stop fading
001876 AB00           05292          BTFSS  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
001878 D???           05293          BRA    END_FADE_6
00187A 8D00           05294          BSF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   
00187C D???           05295          BRA    END_FADE_6
                      05296 
00187E                05297 TRY_DOWN_6:
00187E AD00           05298          BTFSS  SSR_00_FLAGS+6,     FADE_DOWN, BANKED
001880 D???           05299          BRA    END_FADE_6
001882 2F00           05300          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay
001884 D???           05301          BRA    END_FADE_6
001886 C??? F???      05302          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6; reset delay
00188A 5100           05303          MOVF   SSR_00_STEP+6,     W, BANKED
00188C 5F00           05304          SUBWF  SSR_00_VALUE+6,     F, BANKED
00188E E2??           05305          BC     END_FADE_6
001890 6B00           05306          CLRF   SSR_00_VALUE+6,     BANKED              ; reached min value
001892 9D00           05307          BCF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   ; stop fading
001894 BB00           05308          BTFSC  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
001896 8F00           05309          BSF    SSR_00_FLAGS+6,     FADE_UP, BANKED
001898 B900           05310          BTFSC  SSR_00_FLAGS+6,     MAX_OFF_TIME, BANKED; maximizing off-time?
00189A 6900           05311          SETF   SSR_00_COUNTER+6,     BANKED
                      05312 
00189C                05313 END_FADE_6:
  00000007            05314 X        ++
00189C 1D00           05264          COMF   SSR_00_VALUE+7,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
00189E E1??           05266          BNZ    UPDATE_MIN_DIMMED_7
                      05267          IF X <= OUTPUT_CHAN_MAX
0018A0 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
0018A2 D???           05270          BRA    UPDATE_MIN_SKIP_7
                      05271 
0018A4                05272 UPDATE_MIN_DIMMED_7:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0018A4 988A           05274           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+7,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
0018A6                05280 UPDATE_MIN_SKIP_7:
                      05281 
0018A6 AF00           05282          BTFSS  SSR_00_FLAGS+7,     FADE_UP, BANKED
0018A8 D???           05283          BRA    TRY_DOWN_7
0018AA 2F00           05284          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay to next step
0018AC D???           05285          BRA    END_FADE_7
0018AE C??? F???      05286          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7
0018B2 5100           05287          MOVF   SSR_00_STEP+7,     W, BANKED
0018B4 2700           05288          ADDWF  SSR_00_VALUE+7,     F, BANKED
0018B6 E3??           05289          BNC    END_FADE_7
0018B8 6900           05290          SETF   SSR_00_VALUE+7,     BANKED              ; reached max value
0018BA 9F00           05291          BCF    SSR_00_FLAGS+7,     FADE_UP, BANKED     ; stop fading
0018BC AB00           05292          BTFSS  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
0018BE D???           05293          BRA    END_FADE_7
0018C0 8D00           05294          BSF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   
0018C2 D???           05295          BRA    END_FADE_7
                      05296 
0018C4                05297 TRY_DOWN_7:
0018C4 AD00           05298          BTFSS  SSR_00_FLAGS+7,     FADE_DOWN, BANKED
0018C6 D???           05299          BRA    END_FADE_7
0018C8 2F00           05300          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay
0018CA D???           05301          BRA    END_FADE_7
0018CC C??? F???      05302          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7; reset delay
0018D0 5100           05303          MOVF   SSR_00_STEP+7,     W, BANKED
0018D2 5F00           05304          SUBWF  SSR_00_VALUE+7,     F, BANKED
0018D4 E2??           05305          BC     END_FADE_7
0018D6 6B00           05306          CLRF   SSR_00_VALUE+7,     BANKED              ; reached min value
0018D8 9D00           05307          BCF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   ; stop fading
0018DA BB00           05308          BTFSC  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0018DC 8F00           05309          BSF    SSR_00_FLAGS+7,     FADE_UP, BANKED
0018DE B900           05310          BTFSC  SSR_00_FLAGS+7,     MAX_OFF_TIME, BANKED; maximizing off-time?
0018E0 6900           05311          SETF   SSR_00_COUNTER+7,     BANKED
                      05312 
0018E2                05313 END_FADE_7:
  00000008            05314 X        ++
0018E2 1D00           05264          COMF   SSR_00_VALUE+8,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
0018E4 E1??           05266          BNZ    UPDATE_MIN_DIMMED_8
                      05267          IF X <= OUTPUT_CHAN_MAX
0018E6 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
0018E8 D???           05270          BRA    UPDATE_MIN_SKIP_8
                      05271 
0018EA                05272 UPDATE_MIN_DIMMED_8:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0018EA 968A           05274           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+8,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
0018EC                05280 UPDATE_MIN_SKIP_8:
                      05281 
0018EC AF00           05282          BTFSS  SSR_00_FLAGS+8,     FADE_UP, BANKED
0018EE D???           05283          BRA    TRY_DOWN_8
0018F0 2F00           05284          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay to next step
0018F2 D???           05285          BRA    END_FADE_8
0018F4 C??? F???      05286          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8
0018F8 5100           05287          MOVF   SSR_00_STEP+8,     W, BANKED
0018FA 2700           05288          ADDWF  SSR_00_VALUE+8,     F, BANKED
0018FC E3??           05289          BNC    END_FADE_8
0018FE 6900           05290          SETF   SSR_00_VALUE+8,     BANKED              ; reached max value
001900 9F00           05291          BCF    SSR_00_FLAGS+8,     FADE_UP, BANKED     ; stop fading
001902 AB00           05292          BTFSS  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
001904 D???           05293          BRA    END_FADE_8
001906 8D00           05294          BSF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   
001908 D???           05295          BRA    END_FADE_8
                      05296 
00190A                05297 TRY_DOWN_8:
00190A AD00           05298          BTFSS  SSR_00_FLAGS+8,     FADE_DOWN, BANKED
00190C D???           05299          BRA    END_FADE_8
00190E 2F00           05300          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay
001910 D???           05301          BRA    END_FADE_8
001912 C??? F???      05302          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8; reset delay
001916 5100           05303          MOVF   SSR_00_STEP+8,     W, BANKED
001918 5F00           05304          SUBWF  SSR_00_VALUE+8,     F, BANKED
00191A E2??           05305          BC     END_FADE_8
00191C 6B00           05306          CLRF   SSR_00_VALUE+8,     BANKED              ; reached min value
00191E 9D00           05307          BCF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   ; stop fading
001920 BB00           05308          BTFSC  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
001922 8F00           05309          BSF    SSR_00_FLAGS+8,     FADE_UP, BANKED
001924 B900           05310          BTFSC  SSR_00_FLAGS+8,     MAX_OFF_TIME, BANKED; maximizing off-time?
001926 6900           05311          SETF   SSR_00_COUNTER+8,     BANKED
                      05312 
001928                05313 END_FADE_8:
  00000009            05314 X        ++
001928 1D00           05264          COMF   SSR_00_VALUE+9,     W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
00192A E1??           05266          BNZ    UPDATE_MIN_DIMMED_9
                      05267          IF X <= OUTPUT_CHAN_MAX
00192C 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
00192E D???           05270          BRA    UPDATE_MIN_SKIP_9
                      05271 
001930                05272 UPDATE_MIN_DIMMED_9:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001930 948A           05274           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+9,     BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001932                05280 UPDATE_MIN_SKIP_9:
                      05281 
001932 AF00           05282          BTFSS  SSR_00_FLAGS+9,     FADE_UP, BANKED
001934 D???           05283          BRA    TRY_DOWN_9
001936 2F00           05284          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay to next step
001938 D???           05285          BRA    END_FADE_9
00193A C??? F???      05286          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9
00193E 5100           05287          MOVF   SSR_00_STEP+9,     W, BANKED
001940 2700           05288          ADDWF  SSR_00_VALUE+9,     F, BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001942 E3??           05289          BNC    END_FADE_9
001944 6900           05290          SETF   SSR_00_VALUE+9,     BANKED              ; reached max value
001946 9F00           05291          BCF    SSR_00_FLAGS+9,     FADE_UP, BANKED     ; stop fading
001948 AB00           05292          BTFSS  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
00194A D???           05293          BRA    END_FADE_9
00194C 8D00           05294          BSF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   
00194E D???           05295          BRA    END_FADE_9
                      05296 
001950                05297 TRY_DOWN_9:
001950 AD00           05298          BTFSS  SSR_00_FLAGS+9,     FADE_DOWN, BANKED
001952 D???           05299          BRA    END_FADE_9
001954 2F00           05300          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay
001956 D???           05301          BRA    END_FADE_9
001958 C??? F???      05302          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9; reset delay
00195C 5100           05303          MOVF   SSR_00_STEP+9,     W, BANKED
00195E 5F00           05304          SUBWF  SSR_00_VALUE+9,     F, BANKED
001960 E2??           05305          BC     END_FADE_9
001962 6B00           05306          CLRF   SSR_00_VALUE+9,     BANKED              ; reached min value
001964 9D00           05307          BCF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   ; stop fading
001966 BB00           05308          BTFSC  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
001968 8F00           05309          BSF    SSR_00_FLAGS+9,     FADE_UP, BANKED
00196A B900           05310          BTFSC  SSR_00_FLAGS+9,     MAX_OFF_TIME, BANKED; maximizing off-time?
00196C 6900           05311          SETF   SSR_00_COUNTER+9,     BANKED
                      05312 
00196E                05313 END_FADE_9:
  0000000A            05314 X        ++
00196E 1D00           05264          COMF   SSR_00_VALUE+10,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001970 E1??           05266          BNZ    UPDATE_MIN_DIMMED_10
                      05267          IF X <= OUTPUT_CHAN_MAX
001972 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001974 D???           05270          BRA    UPDATE_MIN_SKIP_10
                      05271 
001976                05272 UPDATE_MIN_DIMMED_10:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001976 928A           05274           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+10,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001978                05280 UPDATE_MIN_SKIP_10:
                      05281 
001978 AF00           05282          BTFSS  SSR_00_FLAGS+10,    FADE_UP, BANKED
00197A D???           05283          BRA    TRY_DOWN_10
00197C 2F00           05284          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay to next step
00197E D???           05285          BRA    END_FADE_10
001980 C??? F???      05286          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10
001984 5100           05287          MOVF   SSR_00_STEP+10,    W, BANKED
001986 2700           05288          ADDWF  SSR_00_VALUE+10,    F, BANKED
001988 E3??           05289          BNC    END_FADE_10
00198A 6900           05290          SETF   SSR_00_VALUE+10,    BANKED              ; reached max value
00198C 9F00           05291          BCF    SSR_00_FLAGS+10,    FADE_UP, BANKED     ; stop fading
00198E AB00           05292          BTFSS  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
001990 D???           05293          BRA    END_FADE_10
001992 8D00           05294          BSF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   
001994 D???           05295          BRA    END_FADE_10
                      05296 
001996                05297 TRY_DOWN_10:
001996 AD00           05298          BTFSS  SSR_00_FLAGS+10,    FADE_DOWN, BANKED
001998 D???           05299          BRA    END_FADE_10
00199A 2F00           05300          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay
00199C D???           05301          BRA    END_FADE_10
00199E C??? F???      05302          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10; reset delay
0019A2 5100           05303          MOVF   SSR_00_STEP+10,    W, BANKED
0019A4 5F00           05304          SUBWF  SSR_00_VALUE+10,    F, BANKED
0019A6 E2??           05305          BC     END_FADE_10
0019A8 6B00           05306          CLRF   SSR_00_VALUE+10,    BANKED              ; reached min value
0019AA 9D00           05307          BCF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   ; stop fading
0019AC BB00           05308          BTFSC  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
0019AE 8F00           05309          BSF    SSR_00_FLAGS+10,    FADE_UP, BANKED
0019B0 B900           05310          BTFSC  SSR_00_FLAGS+10,    MAX_OFF_TIME, BANKED; maximizing off-time?
0019B2 6900           05311          SETF   SSR_00_COUNTER+10,    BANKED
                      05312 
0019B4                05313 END_FADE_10:
  0000000B            05314 X        ++
0019B4 1D00           05264          COMF   SSR_00_VALUE+11,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
0019B6 E1??           05266          BNZ    UPDATE_MIN_DIMMED_11
                      05267          IF X <= OUTPUT_CHAN_MAX
0019B8 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05269          ENDIF
0019BA D???           05270          BRA    UPDATE_MIN_SKIP_11
                      05271 
0019BC                05272 UPDATE_MIN_DIMMED_11:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0019BC 908D           05274           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+11,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
0019BE                05280 UPDATE_MIN_SKIP_11:
                      05281 
0019BE AF00           05282          BTFSS  SSR_00_FLAGS+11,    FADE_UP, BANKED
0019C0 D???           05283          BRA    TRY_DOWN_11
0019C2 2F00           05284          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay to next step
0019C4 D???           05285          BRA    END_FADE_11
0019C6 C??? F???      05286          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11
0019CA 5100           05287          MOVF   SSR_00_STEP+11,    W, BANKED
0019CC 2700           05288          ADDWF  SSR_00_VALUE+11,    F, BANKED
0019CE E3??           05289          BNC    END_FADE_11
0019D0 6900           05290          SETF   SSR_00_VALUE+11,    BANKED              ; reached max value
0019D2 9F00           05291          BCF    SSR_00_FLAGS+11,    FADE_UP, BANKED     ; stop fading
0019D4 AB00           05292          BTFSS  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
0019D6 D???           05293          BRA    END_FADE_11
0019D8 8D00           05294          BSF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   
0019DA D???           05295          BRA    END_FADE_11
                      05296 
0019DC                05297 TRY_DOWN_11:
0019DC AD00           05298          BTFSS  SSR_00_FLAGS+11,    FADE_DOWN, BANKED
0019DE D???           05299          BRA    END_FADE_11
0019E0 2F00           05300          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay
0019E2 D???           05301          BRA    END_FADE_11
0019E4 C??? F???      05302          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11; reset delay
0019E8 5100           05303          MOVF   SSR_00_STEP+11,    W, BANKED
0019EA 5F00           05304          SUBWF  SSR_00_VALUE+11,    F, BANKED
0019EC E2??           05305          BC     END_FADE_11
0019EE 6B00           05306          CLRF   SSR_00_VALUE+11,    BANKED              ; reached min value
0019F0 9D00           05307          BCF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   ; stop fading
0019F2 BB00           05308          BTFSC  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
0019F4 8F00           05309          BSF    SSR_00_FLAGS+11,    FADE_UP, BANKED
0019F6 B900           05310          BTFSC  SSR_00_FLAGS+11,    MAX_OFF_TIME, BANKED; maximizing off-time?
0019F8 6900           05311          SETF   SSR_00_COUNTER+11,    BANKED
                      05312 
0019FA                05313 END_FADE_11:
  0000000C            05314 X        ++
0019FA 1D00           05264          COMF   SSR_00_VALUE+12,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
0019FC E1??           05266          BNZ    UPDATE_MIN_DIMMED_12
                      05267          IF X <= OUTPUT_CHAN_MAX
0019FE 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001A00 D???           05270          BRA    UPDATE_MIN_SKIP_12
                      05271 
001A02                05272 UPDATE_MIN_DIMMED_12:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001A02 9E8C           05274           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+12,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001A04                05280 UPDATE_MIN_SKIP_12:
                      05281 
001A04 AF00           05282          BTFSS  SSR_00_FLAGS+12,    FADE_UP, BANKED
001A06 D???           05283          BRA    TRY_DOWN_12
001A08 2F00           05284          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay to next step
001A0A D???           05285          BRA    END_FADE_12
001A0C C??? F???      05286          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12
001A10 5100           05287          MOVF   SSR_00_STEP+12,    W, BANKED
001A12 2700           05288          ADDWF  SSR_00_VALUE+12,    F, BANKED
001A14 E3??           05289          BNC    END_FADE_12
001A16 6900           05290          SETF   SSR_00_VALUE+12,    BANKED              ; reached max value
001A18 9F00           05291          BCF    SSR_00_FLAGS+12,    FADE_UP, BANKED     ; stop fading
001A1A AB00           05292          BTFSS  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
001A1C D???           05293          BRA    END_FADE_12
001A1E 8D00           05294          BSF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   
001A20 D???           05295          BRA    END_FADE_12
                      05296 
001A22                05297 TRY_DOWN_12:
001A22 AD00           05298          BTFSS  SSR_00_FLAGS+12,    FADE_DOWN, BANKED
001A24 D???           05299          BRA    END_FADE_12
001A26 2F00           05300          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A28 D???           05301          BRA    END_FADE_12
001A2A C??? F???      05302          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12; reset delay
001A2E 5100           05303          MOVF   SSR_00_STEP+12,    W, BANKED
001A30 5F00           05304          SUBWF  SSR_00_VALUE+12,    F, BANKED
001A32 E2??           05305          BC     END_FADE_12
001A34 6B00           05306          CLRF   SSR_00_VALUE+12,    BANKED              ; reached min value
001A36 9D00           05307          BCF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   ; stop fading
001A38 BB00           05308          BTFSC  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
001A3A 8F00           05309          BSF    SSR_00_FLAGS+12,    FADE_UP, BANKED
001A3C B900           05310          BTFSC  SSR_00_FLAGS+12,    MAX_OFF_TIME, BANKED; maximizing off-time?
001A3E 6900           05311          SETF   SSR_00_COUNTER+12,    BANKED
                      05312 
001A40                05313 END_FADE_12:
  0000000D            05314 X        ++
001A40 1D00           05264          COMF   SSR_00_VALUE+13,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001A42 E1??           05266          BNZ    UPDATE_MIN_DIMMED_13
                      05267          IF X <= OUTPUT_CHAN_MAX
001A44 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001A46 D???           05270          BRA    UPDATE_MIN_SKIP_13
                      05271 
001A48                05272 UPDATE_MIN_DIMMED_13:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001A48 9C8C           05274           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+13,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001A4A                05280 UPDATE_MIN_SKIP_13:
                      05281 
001A4A AF00           05282          BTFSS  SSR_00_FLAGS+13,    FADE_UP, BANKED
001A4C D???           05283          BRA    TRY_DOWN_13
001A4E 2F00           05284          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay to next step
001A50 D???           05285          BRA    END_FADE_13
001A52 C??? F???      05286          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13
001A56 5100           05287          MOVF   SSR_00_STEP+13,    W, BANKED
001A58 2700           05288          ADDWF  SSR_00_VALUE+13,    F, BANKED
001A5A E3??           05289          BNC    END_FADE_13
001A5C 6900           05290          SETF   SSR_00_VALUE+13,    BANKED              ; reached max value
001A5E 9F00           05291          BCF    SSR_00_FLAGS+13,    FADE_UP, BANKED     ; stop fading
001A60 AB00           05292          BTFSS  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
001A62 D???           05293          BRA    END_FADE_13
001A64 8D00           05294          BSF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   
001A66 D???           05295          BRA    END_FADE_13
                      05296 
001A68                05297 TRY_DOWN_13:
001A68 AD00           05298          BTFSS  SSR_00_FLAGS+13,    FADE_DOWN, BANKED
001A6A D???           05299          BRA    END_FADE_13
001A6C 2F00           05300          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay
001A6E D???           05301          BRA    END_FADE_13
001A70 C??? F???      05302          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13; reset delay
001A74 5100           05303          MOVF   SSR_00_STEP+13,    W, BANKED
001A76 5F00           05304          SUBWF  SSR_00_VALUE+13,    F, BANKED
001A78 E2??           05305          BC     END_FADE_13
001A7A 6B00           05306          CLRF   SSR_00_VALUE+13,    BANKED              ; reached min value
001A7C 9D00           05307          BCF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   ; stop fading
001A7E BB00           05308          BTFSC  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
001A80 8F00           05309          BSF    SSR_00_FLAGS+13,    FADE_UP, BANKED
001A82 B900           05310          BTFSC  SSR_00_FLAGS+13,    MAX_OFF_TIME, BANKED; maximizing off-time?
001A84 6900           05311          SETF   SSR_00_COUNTER+13,    BANKED
                      05312 
001A86                05313 END_FADE_13:
  0000000E            05314 X        ++
001A86 1D00           05264          COMF   SSR_00_VALUE+14,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001A88 E1??           05266          BNZ    UPDATE_MIN_DIMMED_14
                      05267          IF X <= OUTPUT_CHAN_MAX
001A8A 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001A8C D???           05270          BRA    UPDATE_MIN_SKIP_14
                      05271 
001A8E                05272 UPDATE_MIN_DIMMED_14:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001A8E 9A8C           05274           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+14,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001A90                05280 UPDATE_MIN_SKIP_14:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05281 
001A90 AF00           05282          BTFSS  SSR_00_FLAGS+14,    FADE_UP, BANKED
001A92 D???           05283          BRA    TRY_DOWN_14
001A94 2F00           05284          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay to next step
001A96 D???           05285          BRA    END_FADE_14
001A98 C??? F???      05286          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14
001A9C 5100           05287          MOVF   SSR_00_STEP+14,    W, BANKED
001A9E 2700           05288          ADDWF  SSR_00_VALUE+14,    F, BANKED
001AA0 E3??           05289          BNC    END_FADE_14
001AA2 6900           05290          SETF   SSR_00_VALUE+14,    BANKED              ; reached max value
001AA4 9F00           05291          BCF    SSR_00_FLAGS+14,    FADE_UP, BANKED     ; stop fading
001AA6 AB00           05292          BTFSS  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
001AA8 D???           05293          BRA    END_FADE_14
001AAA 8D00           05294          BSF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   
001AAC D???           05295          BRA    END_FADE_14
                      05296 
001AAE                05297 TRY_DOWN_14:
001AAE AD00           05298          BTFSS  SSR_00_FLAGS+14,    FADE_DOWN, BANKED
001AB0 D???           05299          BRA    END_FADE_14
001AB2 2F00           05300          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay
001AB4 D???           05301          BRA    END_FADE_14
001AB6 C??? F???      05302          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14; reset delay
001ABA 5100           05303          MOVF   SSR_00_STEP+14,    W, BANKED
001ABC 5F00           05304          SUBWF  SSR_00_VALUE+14,    F, BANKED
001ABE E2??           05305          BC     END_FADE_14
001AC0 6B00           05306          CLRF   SSR_00_VALUE+14,    BANKED              ; reached min value
001AC2 9D00           05307          BCF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   ; stop fading
001AC4 BB00           05308          BTFSC  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
001AC6 8F00           05309          BSF    SSR_00_FLAGS+14,    FADE_UP, BANKED
001AC8 B900           05310          BTFSC  SSR_00_FLAGS+14,    MAX_OFF_TIME, BANKED; maximizing off-time?
001ACA 6900           05311          SETF   SSR_00_COUNTER+14,    BANKED
                      05312 
001ACC                05313 END_FADE_14:
  0000000F            05314 X        ++
001ACC 1D00           05264          COMF   SSR_00_VALUE+15,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001ACE E1??           05266          BNZ    UPDATE_MIN_DIMMED_15
                      05267          IF X <= OUTPUT_CHAN_MAX
001AD0 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001AD2 D???           05270          BRA    UPDATE_MIN_SKIP_15
                      05271 
001AD4                05272 UPDATE_MIN_DIMMED_15:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001AD4 928D           05274           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+15,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001AD6                05280 UPDATE_MIN_SKIP_15:
                      05281 
001AD6 AF00           05282          BTFSS  SSR_00_FLAGS+15,    FADE_UP, BANKED
001AD8 D???           05283          BRA    TRY_DOWN_15
001ADA 2F00           05284          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay to next step
001ADC D???           05285          BRA    END_FADE_15
001ADE C??? F???      05286          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15
001AE2 5100           05287          MOVF   SSR_00_STEP+15,    W, BANKED
001AE4 2700           05288          ADDWF  SSR_00_VALUE+15,    F, BANKED
001AE6 E3??           05289          BNC    END_FADE_15
001AE8 6900           05290          SETF   SSR_00_VALUE+15,    BANKED              ; reached max value
001AEA 9F00           05291          BCF    SSR_00_FLAGS+15,    FADE_UP, BANKED     ; stop fading
001AEC AB00           05292          BTFSS  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
001AEE D???           05293          BRA    END_FADE_15
001AF0 8D00           05294          BSF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   
001AF2 D???           05295          BRA    END_FADE_15
                      05296 
001AF4                05297 TRY_DOWN_15:
001AF4 AD00           05298          BTFSS  SSR_00_FLAGS+15,    FADE_DOWN, BANKED
001AF6 D???           05299          BRA    END_FADE_15
001AF8 2F00           05300          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay
001AFA D???           05301          BRA    END_FADE_15
001AFC C??? F???      05302          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15; reset delay
001B00 5100           05303          MOVF   SSR_00_STEP+15,    W, BANKED
001B02 5F00           05304          SUBWF  SSR_00_VALUE+15,    F, BANKED
001B04 E2??           05305          BC     END_FADE_15
001B06 6B00           05306          CLRF   SSR_00_VALUE+15,    BANKED              ; reached min value
001B08 9D00           05307          BCF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   ; stop fading
001B0A BB00           05308          BTFSC  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
001B0C 8F00           05309          BSF    SSR_00_FLAGS+15,    FADE_UP, BANKED
001B0E B900           05310          BTFSC  SSR_00_FLAGS+15,    MAX_OFF_TIME, BANKED; maximizing off-time?
001B10 6900           05311          SETF   SSR_00_COUNTER+15,    BANKED
                      05312 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B12                05313 END_FADE_15:
  00000010            05314 X        ++
001B12 1D00           05264          COMF   SSR_00_VALUE+16,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001B14 E1??           05266          BNZ    UPDATE_MIN_DIMMED_16
                      05267          IF X <= OUTPUT_CHAN_MAX
001B16 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001B18 D???           05270          BRA    UPDATE_MIN_SKIP_16
                      05271 
001B1A                05272 UPDATE_MIN_DIMMED_16:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001B1A 908A           05274           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+16,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001B1C                05280 UPDATE_MIN_SKIP_16:
                      05281 
001B1C AF00           05282          BTFSS  SSR_00_FLAGS+16,    FADE_UP, BANKED
001B1E D???           05283          BRA    TRY_DOWN_16
001B20 2F00           05284          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay to next step
001B22 D???           05285          BRA    END_FADE_16
001B24 C??? F???      05286          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16
001B28 5100           05287          MOVF   SSR_00_STEP+16,    W, BANKED
001B2A 2700           05288          ADDWF  SSR_00_VALUE+16,    F, BANKED
001B2C E3??           05289          BNC    END_FADE_16
001B2E 6900           05290          SETF   SSR_00_VALUE+16,    BANKED              ; reached max value
001B30 9F00           05291          BCF    SSR_00_FLAGS+16,    FADE_UP, BANKED     ; stop fading
001B32 AB00           05292          BTFSS  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
001B34 D???           05293          BRA    END_FADE_16
001B36 8D00           05294          BSF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   
001B38 D???           05295          BRA    END_FADE_16
                      05296 
001B3A                05297 TRY_DOWN_16:
001B3A AD00           05298          BTFSS  SSR_00_FLAGS+16,    FADE_DOWN, BANKED
001B3C D???           05299          BRA    END_FADE_16
001B3E 2F00           05300          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay
001B40 D???           05301          BRA    END_FADE_16
001B42 C??? F???      05302          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16; reset delay
001B46 5100           05303          MOVF   SSR_00_STEP+16,    W, BANKED
001B48 5F00           05304          SUBWF  SSR_00_VALUE+16,    F, BANKED
001B4A E2??           05305          BC     END_FADE_16
001B4C 6B00           05306          CLRF   SSR_00_VALUE+16,    BANKED              ; reached min value
001B4E 9D00           05307          BCF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   ; stop fading
001B50 BB00           05308          BTFSC  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
001B52 8F00           05309          BSF    SSR_00_FLAGS+16,    FADE_UP, BANKED
001B54 B900           05310          BTFSC  SSR_00_FLAGS+16,    MAX_OFF_TIME, BANKED; maximizing off-time?
001B56 6900           05311          SETF   SSR_00_COUNTER+16,    BANKED
                      05312 
001B58                05313 END_FADE_16:
  00000011            05314 X        ++
001B58 1D00           05264          COMF   SSR_00_VALUE+17,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001B5A E1??           05266          BNZ    UPDATE_MIN_DIMMED_17
                      05267          IF X <= OUTPUT_CHAN_MAX
001B5C 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001B5E D???           05270          BRA    UPDATE_MIN_SKIP_17
                      05271 
001B60                05272 UPDATE_MIN_DIMMED_17:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001B60 968C           05274           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+17,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001B62                05280 UPDATE_MIN_SKIP_17:
                      05281 
001B62 AF00           05282          BTFSS  SSR_00_FLAGS+17,    FADE_UP, BANKED
001B64 D???           05283          BRA    TRY_DOWN_17
001B66 2F00           05284          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay to next step
001B68 D???           05285          BRA    END_FADE_17
001B6A C??? F???      05286          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17
001B6E 5100           05287          MOVF   SSR_00_STEP+17,    W, BANKED
001B70 2700           05288          ADDWF  SSR_00_VALUE+17,    F, BANKED
001B72 E3??           05289          BNC    END_FADE_17
001B74 6900           05290          SETF   SSR_00_VALUE+17,    BANKED              ; reached max value
001B76 9F00           05291          BCF    SSR_00_FLAGS+17,    FADE_UP, BANKED     ; stop fading
001B78 AB00           05292          BTFSS  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B7A D???           05293          BRA    END_FADE_17
001B7C 8D00           05294          BSF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   
001B7E D???           05295          BRA    END_FADE_17
                      05296 
001B80                05297 TRY_DOWN_17:
001B80 AD00           05298          BTFSS  SSR_00_FLAGS+17,    FADE_DOWN, BANKED
001B82 D???           05299          BRA    END_FADE_17
001B84 2F00           05300          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay
001B86 D???           05301          BRA    END_FADE_17
001B88 C??? F???      05302          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17; reset delay
001B8C 5100           05303          MOVF   SSR_00_STEP+17,    W, BANKED
001B8E 5F00           05304          SUBWF  SSR_00_VALUE+17,    F, BANKED
001B90 E2??           05305          BC     END_FADE_17
001B92 6B00           05306          CLRF   SSR_00_VALUE+17,    BANKED              ; reached min value
001B94 9D00           05307          BCF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   ; stop fading
001B96 BB00           05308          BTFSC  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
001B98 8F00           05309          BSF    SSR_00_FLAGS+17,    FADE_UP, BANKED
001B9A B900           05310          BTFSC  SSR_00_FLAGS+17,    MAX_OFF_TIME, BANKED; maximizing off-time?
001B9C 6900           05311          SETF   SSR_00_COUNTER+17,    BANKED
                      05312 
001B9E                05313 END_FADE_17:
  00000012            05314 X        ++
001B9E 1D00           05264          COMF   SSR_00_VALUE+18,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001BA0 E1??           05266          BNZ    UPDATE_MIN_DIMMED_18
                      05267          IF X <= OUTPUT_CHAN_MAX
001BA2 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001BA4 D???           05270          BRA    UPDATE_MIN_SKIP_18
                      05271 
001BA6                05272 UPDATE_MIN_DIMMED_18:
                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001BA6 928C           05274           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+18,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001BA8                05280 UPDATE_MIN_SKIP_18:
                      05281 
001BA8 AF00           05282          BTFSS  SSR_00_FLAGS+18,    FADE_UP, BANKED
001BAA D???           05283          BRA    TRY_DOWN_18
001BAC 2F00           05284          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay to next step
001BAE D???           05285          BRA    END_FADE_18
001BB0 C??? F???      05286          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18
001BB4 5100           05287          MOVF   SSR_00_STEP+18,    W, BANKED
001BB6 2700           05288          ADDWF  SSR_00_VALUE+18,    F, BANKED
001BB8 E3??           05289          BNC    END_FADE_18
001BBA 6900           05290          SETF   SSR_00_VALUE+18,    BANKED              ; reached max value
001BBC 9F00           05291          BCF    SSR_00_FLAGS+18,    FADE_UP, BANKED     ; stop fading
001BBE AB00           05292          BTFSS  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
001BC0 D???           05293          BRA    END_FADE_18
001BC2 8D00           05294          BSF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   
001BC4 D???           05295          BRA    END_FADE_18
                      05296 
001BC6                05297 TRY_DOWN_18:
001BC6 AD00           05298          BTFSS  SSR_00_FLAGS+18,    FADE_DOWN, BANKED
001BC8 D???           05299          BRA    END_FADE_18
001BCA 2F00           05300          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay
001BCC D???           05301          BRA    END_FADE_18
001BCE C??? F???      05302          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18; reset delay
001BD2 5100           05303          MOVF   SSR_00_STEP+18,    W, BANKED
001BD4 5F00           05304          SUBWF  SSR_00_VALUE+18,    F, BANKED
001BD6 E2??           05305          BC     END_FADE_18
001BD8 6B00           05306          CLRF   SSR_00_VALUE+18,    BANKED              ; reached min value
001BDA 9D00           05307          BCF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   ; stop fading
001BDC BB00           05308          BTFSC  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
001BDE 8F00           05309          BSF    SSR_00_FLAGS+18,    FADE_UP, BANKED
001BE0 B900           05310          BTFSC  SSR_00_FLAGS+18,    MAX_OFF_TIME, BANKED; maximizing off-time?
001BE2 6900           05311          SETF   SSR_00_COUNTER+18,    BANKED
                      05312 
001BE4                05313 END_FADE_18:
  00000013            05314 X        ++
001BE4 1D00           05264          COMF   SSR_00_VALUE+19,    W, BANKED   ; is this set to maximum?
                      05265          ;BZ    UPDATE_MIN_SKIP_#v(X)
001BE6 E1??           05266          BNZ    UPDATE_MIN_DIMMED_19
                      05267          IF X <= OUTPUT_CHAN_MAX
001BE8 9800           05268           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05269          ENDIF
001BEA D???           05270          BRA    UPDATE_MIN_SKIP_19
                      05271 
001BEC                05272 UPDATE_MIN_DIMMED_19:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05273          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
001BEC 948C           05274           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn off light
                      05275          ELSE
                      05276           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn off SSR
                      05277           TSTFSZ SSR_00_VALUE+19,    BANKED     ; is this SSR fully off?
                      05278           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05279          ENDIF
001BEE                05280 UPDATE_MIN_SKIP_19:
                      05281 
001BEE AF00           05282          BTFSS  SSR_00_FLAGS+19,    FADE_UP, BANKED
001BF0 D???           05283          BRA    TRY_DOWN_19
001BF2 2F00           05284          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay to next step
001BF4 D???           05285          BRA    END_FADE_19
001BF6 C??? F???      05286          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19
001BFA 5100           05287          MOVF   SSR_00_STEP+19,    W, BANKED
001BFC 2700           05288          ADDWF  SSR_00_VALUE+19,    F, BANKED
001BFE E3??           05289          BNC    END_FADE_19
001C00 6900           05290          SETF   SSR_00_VALUE+19,    BANKED              ; reached max value
001C02 9F00           05291          BCF    SSR_00_FLAGS+19,    FADE_UP, BANKED     ; stop fading
001C04 AB00           05292          BTFSS  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
001C06 D???           05293          BRA    END_FADE_19
001C08 8D00           05294          BSF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   
001C0A D???           05295          BRA    END_FADE_19
                      05296 
001C0C                05297 TRY_DOWN_19:
001C0C AD00           05298          BTFSS  SSR_00_FLAGS+19,    FADE_DOWN, BANKED
001C0E D???           05299          BRA    END_FADE_19
001C10 2F00           05300          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay
001C12 D???           05301          BRA    END_FADE_19
001C14 C??? F???      05302          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19; reset delay
001C18 5100           05303          MOVF   SSR_00_STEP+19,    W, BANKED
001C1A 5F00           05304          SUBWF  SSR_00_VALUE+19,    F, BANKED
001C1C E2??           05305          BC     END_FADE_19
001C1E 6B00           05306          CLRF   SSR_00_VALUE+19,    BANKED              ; reached min value
001C20 9D00           05307          BCF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   ; stop fading
001C22 BB00           05308          BTFSC  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
001C24 8F00           05309          BSF    SSR_00_FLAGS+19,    FADE_UP, BANKED
001C26 B900           05310          BTFSC  SSR_00_FLAGS+19,    MAX_OFF_TIME, BANKED; maximizing off-time?
001C28 6900           05311          SETF   SSR_00_COUNTER+19,    BANKED
                      05312 
001C2A                05313 END_FADE_19:
  00000014            05314 X        ++
                      05315         ENDW
001C2A 9E00           05316         BCF     SSR_STATE, INCYC, ACCESS        ; shut down slice processing until next ZC
                      05317         ;
                      05318         ; see if we should be asleep
                      05319         ;
001C2C A800           05320         BTFSS   SSR_STATE2, ALL_OFF, ACCESS
001C2E D???           05321         BRA     BE_AWAKE_NOW
001C30 2E00           05322         DECFSZ  AUTO_OFF_CTRL, F, ACCESS        
001C32 0012           05323         RETURN
001C34 6800           05324         SETF    AUTO_OFF_CTRL, ACCESS
001C36 2E00           05325         DECFSZ  AUTO_OFF_CTRH, F, ACCESS
001C38 0012           05326         RETURN
                      05327         ; 
                      05328         ; We've been idle too long.  Go to sleep now.
                      05329         ;
001C3A A600           05330         BTFSS   SSR_STATE, SLEEP_MODE, ACCESS
001C3C EC?? F???      05331         CALL    DO_CMD_SLEEP
001C40 0012           05332         RETURN
                      05333         
001C42                05334 BE_AWAKE_NOW:
                      05335         ;
                      05336         ; we should be awake.  Make sure we are and reset counters
                      05337         ;
001C42 B600           05338         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
001C44 EC?? F???      05339         CALL    DO_CMD_WAKE
001C48 6800           05340         SETF    AUTO_OFF_CTRH, ACCESS
001C4A 6800           05341         SETF    AUTO_OFF_CTRL, ACCESS
001C4C 0012           05342         RETURN
                      05343 
                      05344 
                      05345 
                      05346 ; DMX512 RECEIVER CODE
                      05347 ; Based on Microchip Application Note AN1076
                      05348 ;
                      05349 
                      05350 ;
                      05351 ; If we have DMX mode running but need to shift to Lumos protocol
                      05352 ; (like entering config mode), we need to reset the baud rate to
                      05353 ; whatever is configured for non-DMX use.
                      05354 ;
001C4E                05355 DMX_EXIT_TEMPORARILY:
001C4E 0004           05356         CLRWDT
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C50 AC00           05357         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
001C52 0012           05358         RETURN
                      05359         BEGIN_EEPROM_READ EE_BAUD
001C54 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
001C56 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_BAUD     ; NOTE interrupts need to be OFF here!
001C58 0E00               M          MOVLW  HIGH(EE_BAUD)           ; NOTE interrupts need to be OFF here!
001C5A 6EAA               M          MOVWF  EEADRH, ACCESS
001C5C 0E01               M          MOVLW  LOW(EE_BAUD)
001C5E 6EA9               M          MOVWF  EEADR, ACCESS
001C60 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
001C62 9CA6               M          BCF    EECON1, CFGS, ACCESS
001C64 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
                      05360         READ_EEPROM_DATA_W
                          M         READ_EEPROM_DATA
001C66 80A6               M         BSF     EECON1, RD, ACCESS
001C68 CFA8 FFE8          M         MOVFF   EEDATA, WREG
                      05361         END_EEPROM_READ
001C6C 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
001C6E 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
001C70 6AAA               M          CLRF   EEADRH, ACCESS
001C72 6AA9               M          CLRF   EEADR, ACCESS
                      05362         IF ROLE_MASTER
                      05363          ; Send F0 72 <baud> 26 -> slave CPU
                      05364          MOVWF  I, ACCESS
                      05365          MOVLW  0xF0
                      05366          CALL   SIO_WRITE_W
                      05367          MOVLW  0x72
                      05368          CALL   SIO_WRITE_W
                      05369          MOVF   I, W, ACCESS
                      05370          CALL   SIO_WRITE_W
                      05371          MOVLW  0x26
                      05372          CALL   SIO_WRITE_W
                      05373          CALL   DRAIN_M_S_TX_BLOCKING
                      05374          MOVF   I, W, ACCESS
                      05375         ENDIF
001C74 EC?? F???      05376         CALL    SIO_SET_BAUD_W
001C78 9C00           05377         BCF     DMX_SLOTH, DMX_SPEED, ACCESS    ; no longer running at DMX speeds
001C7A 0012           05378         RETURN
                      05379 
001C7C                05380 DMX_RESUME:
001C7C 0004           05381         CLRWDT
001C7E BE00           05382         BTFSC   DMX_SLOTH, DMX_EN, ACCESS
001C80 BC00           05383         BTFSC   DMX_SLOTH, DMX_SPEED, ACCESS
001C82 0012           05384         RETURN                                  ; either not using DMX at all or already at speed
                      05385         IF ROLE_MASTER
                      05386          ; Send F0 72 <baud> 26 -> slave CPU
                      05387          MOVLW  0xF0
                      05388          CALL   SIO_WRITE_W
                      05389          MOVLW  0x72
                      05390          CALL   SIO_WRITE_W
                      05391          MOVLW  SIO_250000
                      05392          CALL   SIO_WRITE_W
                      05393          MOVLW  0x26
                      05394          CALL   SIO_WRITE_W
                      05395          CALL   DRAIN_M_S_TX_BLOCKING
                      05396         ENDIF
001C84 0E0A           05397         MOVLW   SIO_250000
001C86 EC?? F???      05398         CALL    SIO_SET_BAUD_W
001C8A 8C00           05399         BSF     DMX_SLOTH, DMX_SPEED, ACCESS    ; now at DMX speed
001C8C 0012           05400         RETURN
                      05401         
                      05402 ;
                      05403 ; Wait for start of packet
                      05404 ;
                      05405 ;DMX_WAIT_FOR_SYNC:
                      05406 ;       BTFSC   PIR1, RCIF, ACCESS
                      05407 ;       MOVF    RCREG, W, ACCESS        ; throw away received bytes until start of frame
                      05408 ;       BTFSS   RCSTA, FERR, ACCESS     ; wait until frame error
                      05409 ;       BRA     DMX_WAIT_FOR_SYNC
                      05410 ;       MOVF    RCREG, W, ACCESS        ; clear receive buffer
                      05411 ;DMX_WAIT_FOR_START:
                      05412 ;       BTFSS   PIR1, RCIF, ACCESS
                      05413 ;       BRA     DMX_WAIT_FOR_START      ; wait for actual characters to start
                      05414 ;       BTFSC   RCSTA, FERR, ACCESS     ; and break to end
                      05415 ;       BRA     DMX_WAIT_FOR_START
                      05416 ;       MOVF    RCREG, W, ACCESS
                      05417 ;       ANDLW   0xFF                    ; test byte just read, should be 0x00
                      05418 ;       BNZ     DMX_WAIT_FOR_SYNC       ; done here, come back when ready for next packet
                      05419 
                      05420         ; XXX now loop over bytes, aborting on FERR (indicates packet was short)
                      05421         ; or when your data have been received.
                      05422 
001C8E                05423 DMX_RECEIVED_BYTE:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C8E 0004           05424         CLRWDT
                      05425         ;
                      05426         ; We just got a DMX byte.  IF DMX_FRAME is set, this is supposedly the start of
                      05427         ; a new frame, so any previous frame in progress is aborted.  The state machine
                      05428         ; in DMX mode is simply:
                      05429         ;       00 IDLE;     waiting for start of frame
                      05430         ;       17 DMX_WAIT; waiting for first slot for this device
                      05431         ;       18 DMX_UPD;  updating channels
                      05432         ;
001C90 AA00           05433         BTFSS   DMX_SLOTH, DMX_FRAME, ACCESS
001C92 D???           05434         BRA     DMX_NOT_FIRST
001C94 9A00           05435         BCF     DMX_SLOTH, DMX_FRAME, ACCESS    ; clear start-of-frame signal
                      05436         ;
                      05437         ; Start of frame
                      05438         ; The first byte received is in WREG.  If this is 0x00, we need to pay
                      05439         ; attention to this frame.  Otherwise, it's something foreign we can ignore.
                      05440         ;
001C96 66E8           05441         TSTFSZ  WREG, ACCESS
001C98 D???           05442         BRA     DMX_WEIRD_FRAME
001C9A 0E17           05443         MOVLW   0x17                            ; start of frame -> state 17
001C9C 6E00           05444         MOVWF   YY_STATE, ACCESS
001C9E C??? F???      05445         MOVFF   DMX_SLOTL, YY_YY                ; YY_COMMAND:YY_YY is the number of slots
001CA2 6A00           05446         CLRF    YY_COMMAND, ACCESS              ; to skip before we get to ours
001CA4 B000           05447         BTFSC   DMX_SLOTH, DMX_BIT8, ACCESS
001CA6 8000           05448         BSF     YY_COMMAND, 0, ACCESS
001CA8 0012           05449         RETURN
                      05450 
001CAA                05451 DMX_WEIRD_FRAME:
                      05452         IF HAS_STATUS_LEDS
                      05453          SET_SSR_BLINK_FADE SSR_RED
                      05454         ENDIF
001CAA 6A00           05455         CLRF    YY_STATE, ACCESS                ; stay at state 0, wait for next frame.
001CAC 0012           05456         RETURN
                      05457 
001CAE                05458 DMX_NOT_FIRST:
001CAE 6E00           05459         MOVWF   YY_DATA, ACCESS                 ; save input byte in YY_DATA
001CB0 0E17           05460         MOVLW   0x17                            ; are we at state 17?
001CB2 6200           05461         CPFSEQ  YY_STATE, ACCESS
001CB4 D???           05462         BRA     DMX_18
                      05463         ;
                      05464         ; State 17: waiting for our slot to come up
                      05465         ;
                      05466         IF HAS_STATUS_LEDS
                      05467          SET_SSR_BLINK_FADE SSR_YELLOW
                      05468         ENDIF
001CB6 6600           05469         TSTFSZ  YY_YY, ACCESS                   ; count off another slot...
001CB8 D???           05470         BRA     DMX_ST_LSB
001CBA A000           05471         BTFSS   YY_COMMAND, 0, ACCESS
001CBC D???           05472         BRA     DMX_SLOT_REACHED
001CBE 9000           05473         BCF     YY_COMMAND, 0, ACCESS           ; borrow 1 and roll over
001CC0                05474 DMX_ST_LSB:
001CC0 0600           05475         DECF    YY_YY, F, ACCESS
001CC2 0012           05476         RETURN
                      05477 
001CC4                05478 DMX_SLOT_REACHED:
                      05479         ;
                      05480         ; We have waited long enough, we're up now!
                      05481         ;
001CC4 2A00           05482         INCF    YY_STATE, F, ACCESS             ; move state 17->18 (note YY_YY==0 now)
                      05483 
001CC6                05484 DMX_18:
001CC6 0004           05485         CLRWDT
                      05486         IF HAS_ACTIVE
                      05487          SET_SSR_BLINK_FADE SSR_ACTIVE
                      05488         ENDIF
001CC8 0E18           05489         MOVLW   0x18
001CCA 6200           05490         CPFSEQ  YY_STATE, ACCESS
001CCC D???           05491         BRA     DMX_19
                      05492         ;
                      05493         ; State 18: updating slot value YY_DATA into channel YY_YY.
                      05494         ;
001CCE C??? F???      05495         MOVFF   YY_DATA, YY_COMMAND
001CD2 C??? F???      05496         MOVFF   YY_YY, YY_DATA
001CD6 2A00           05497         INCF    YY_YY, F, ACCESS
001CD8 EC?? F???      05498         CALL    XLATE_SSR_ID
001CDC BC00           05499         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
001CDE D???           05500         BRA     DMX_DONE
001CE0 C??? F???      05501         MOVFF   YY_COMMAND, YY_DATA
001CE4 BE00           05502         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
001CE6 D???           05503         BRA     DMX_PASS_DOWN_SET_LVL
001CE8 EF?? F???      05504         GOTO    SSR_OUTPUT_VALUE ; TARGET_SSR <- YY_DATA
                      05505 
001CEC                05506 DMX_PASS_DOWN_SET_LVL:
                      05507         IF ROLE_MASTER
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05508          MOVLW  0xA0
                      05509          CALL   SIO_WRITE_W
                      05510          BCF    TARGET_SSR, 7, ACCESS
                      05511          BCF    TARGET_SSR, 6, ACCESS
                      05512          BCF    STATUS, C, ACCESS
                      05513          RRCF   YY_DATA, F, ACCESS
                      05514          BTFSC  STATUS, C, ACCESS
                      05515          BSF    TARGET_SSR, 6, ACCESS   ; LSB of value
                      05516          MOVF   TARGET_SSR, W, ACCESS
                      05517          SEND_8_BIT_W
                      05518          MOVF   YY_DATA, W, ACCESS
                      05519          SEND_8_BIT_W
                      05520          IF HAS_STATUS_LEDS
                      05521           SET_SSR_BLINK_FADE SSR_YELLOW
                      05522          ENDIF
                      05523          RETURN
                      05524         ELSE
                      05525          ERR_BUG 0x02, ERR_CLASS_IN_VALID
001CEC 0E02               M          MOVLW  0x02
001CEE 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001CF0 6A00               M          CLRF   YY_STATE, ACCESS
001CF2 0012               M          RETURN
                      05526         ENDIF
                      05527          
001CF4                05528 DMX_DONE:
                      05529         ;
                      05530         ; reached the end of our range of slots
                      05531         ;
001CF4 6A00           05532         CLRF    YY_STATE, ACCESS
001CF6 0012           05533         RETURN
                      05534 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001CF8                05535 DMX_19:
                      05536         ;
                      05537         ; unknown state!  Force return to idle state
                      05538         ;
001CF8 6A00           05539         CLRF    YY_STATE, ACCESS
001CFA 0012           05540         RETURN
                      05541         
001CFC                05542 HALT_MODE:
                      05543         ;
                      05544         ; Shut down forever
                      05545         ;
001CFC EC?? F???      05546         CALL    S0_CMD0                 ; blackout SSR outputs
001D00 9EF2           05547         BCF     INTCON, GIEH, ACCESS            ; disable high-priority interrupts
001D02 9CF2           05548         BCF     INTCON, GIEL, ACCESS            ; disable low-priority interrupts
                      05549         IF HAS_STATUS_LEDS
                      05550          BSF    PLAT_RED, BIT_RED, ACCESS       ; set only RED light
                      05551          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      05552          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      05553          IF HAS_ACTIVE
                      05554           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      05555          ENDIF
                      05556         ENDIF
001D04 0E73           05557         MOVLW   b'01110011'                     ; Set oscillator mode for our long slumber
                      05558                 ; 0-------                      ; ~IDLEN enter SLEEP mode, not an idle mode
                      05559                 ; -111----                      ;  IRCF=7 select 8 MHz internal clock speed
                      05560                 ; ------11                      ;  SCS=3 system clock is now internal oscillator
001D06 6ED3           05561         MOVWF   OSCCON, ACCESS
001D08 80D1           05562         BSF     WDTCON, SWDTEN, ACCESS          ; make sure WDT is enabled
001D0A                05563 HALT_SLEEP:
001D0A 0004           05564         CLRWDT
001D0C 0003           05565         SLEEP
                      05566         ; when we wake up from WDT, flashes red light briefly
                      05567         IF HAS_STATUS_LEDS
                      05568          BSF    PLAT_RED, BIT_RED, ACCESS
                      05569          CALL   DELAY_1_6_SEC                   ; 1/6 sec
                      05570          BCF    PLAT_RED, BIT_RED, ACCESS
                      05571         ENDIF
001D0E D???           05572         BRA     HALT_SLEEP
                      05573 
                      05574 
001D10                05575 TR_ON_DELAY:
001D10 6800           05576         SETF    TR_I, ACCESS
001D12 0004           05577 TR_ON_L CLRWDT
001D14 2E00           05578         DECFSZ  TR_I, F, ACCESS
001D16 D???           05579         BRA     TR_ON_L
001D18 0012           05580         RETURN
                      05581 
001D1A                05582 TR_OFF_DELAY:
001D1A D???           05583         BRA     TR_ON_DELAY
                      05584         END
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 122


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABAT                              00000004
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ALL_OFF                           00000004
AN0                               00000000
AN1                               00000001
AN10                              00000000
AN2                               00000002
AN3                               00000003
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
AN8                               00000001
AN9                               00000004
AUTO_OFF_CTRH                     0000001C
AUTO_OFF_CTRL                     0000001D
B0CON                             00000E20
B0D0                              00000E26
B0D00                             00000000
B0D01                             00000001
B0D02                             00000002
B0D03                             00000003
B0D04                             00000004
B0D05                             00000005
B0D06                             00000006
B0D07                             00000007
B0D1                              00000E27
B0D10                             00000000
B0D11                             00000001
B0D12                             00000002
B0D13                             00000003
B0D14                             00000004
B0D15                             00000005
B0D16                             00000006
B0D17                             00000007
B0D2                              00000E28
B0D20                             00000000
B0D21                             00000001
B0D22                             00000002
B0D23                             00000003
B0D24                             00000004
B0D25                             00000005
B0D26                             00000006
B0D27                             00000007
B0D3                              00000E29
B0D30                             00000000
B0D31                             00000001
B0D32                             00000002
B0D33                             00000003
B0D34                             00000004
B0D35                             00000005
B0D36                             00000006
B0D37                             00000007
B0D4                              00000E2A
B0D40                             00000000
B0D41                             00000001
B0D42                             00000002
B0D43                             00000003
B0D44                             00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 123


SYMBOL TABLE
  LABEL                             VALUE 

B0D45                             00000005
B0D46                             00000006
B0D47                             00000007
B0D5                              00000E2B
B0D50                             00000000
B0D51                             00000001
B0D52                             00000002
B0D53                             00000003
B0D54                             00000004
B0D55                             00000005
B0D56                             00000006
B0D57                             00000007
B0D6                              00000E2C
B0D60                             00000000
B0D61                             00000001
B0D62                             00000002
B0D63                             00000003
B0D64                             00000004
B0D65                             00000005
B0D66                             00000006
B0D67                             00000007
B0D7                              00000E2D
B0D70                             00000000
B0D71                             00000001
B0D72                             00000002
B0D73                             00000003
B0D74                             00000004
B0D75                             00000005
B0D76                             00000006
B0D77                             00000007
B0DLC                             00000E25
B0EIDH                            00000E23
B0EIDL                            00000E24
B0IE                              00000002
B0SIDH                            00000E21
B0SIDL                            00000E22
B0TXEN                            00000002
B1CON                             00000E30
B1D0                              00000E36
B1D00                             00000000
B1D01                             00000001
B1D02                             00000002
B1D03                             00000003
B1D04                             00000004
B1D05                             00000005
B1D06                             00000006
B1D07                             00000007
B1D1                              00000E37
B1D10                             00000000
B1D11                             00000001
B1D12                             00000002
B1D13                             00000003
B1D14                             00000004
B1D15                             00000005
B1D16                             00000006
B1D17                             00000007
B1D2                              00000E38
B1D20                             00000000
B1D21                             00000001
B1D22                             00000002
B1D23                             00000003
B1D24                             00000004
B1D25                             00000005
B1D26                             00000006
B1D27                             00000007
B1D3                              00000E39
B1D30                             00000000
B1D31                             00000001
B1D32                             00000002
B1D33                             00000003
B1D34                             00000004
B1D35                             00000005
B1D36                             00000006
B1D37                             00000007
B1D4                              00000E3A
B1D40                             00000000
B1D41                             00000001
B1D42                             00000002
B1D43                             00000003
B1D44                             00000004
B1D45                             00000005
B1D46                             00000006
B1D47                             00000007
B1D5                              00000E3B
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 124


SYMBOL TABLE
  LABEL                             VALUE 

B1D50                             00000000
B1D51                             00000001
B1D52                             00000002
B1D53                             00000003
B1D54                             00000004
B1D55                             00000005
B1D56                             00000006
B1D57                             00000007
B1D6                              00000E3C
B1D60                             00000000
B1D61                             00000001
B1D62                             00000002
B1D63                             00000003
B1D64                             00000004
B1D65                             00000005
B1D66                             00000006
B1D67                             00000007
B1D7                              00000E3D
B1D70                             00000000
B1D71                             00000001
B1D72                             00000002
B1D73                             00000003
B1D74                             00000004
B1D75                             00000005
B1D76                             00000006
B1D77                             00000007
B1DLC                             00000E35
B1EIDH                            00000E33
B1EIDL                            00000E34
B1IE                              00000003
B1SIDH                            00000E31
B1SIDL                            00000E32
B1TXEN                            00000003
B2CON                             00000E40
B2D0                              00000E46
B2D00                             00000000
B2D01                             00000001
B2D02                             00000002
B2D03                             00000003
B2D04                             00000004
B2D05                             00000005
B2D06                             00000006
B2D07                             00000007
B2D1                              00000E47
B2D10                             00000000
B2D11                             00000001
B2D12                             00000002
B2D13                             00000003
B2D14                             00000004
B2D15                             00000005
B2D16                             00000006
B2D17                             00000007
B2D2                              00000E48
B2D20                             00000000
B2D21                             00000001
B2D22                             00000002
B2D23                             00000003
B2D24                             00000004
B2D25                             00000005
B2D26                             00000006
B2D27                             00000007
B2D3                              00000E49
B2D30                             00000000
B2D31                             00000001
B2D32                             00000002
B2D33                             00000003
B2D34                             00000004
B2D35                             00000005
B2D36                             00000006
B2D37                             00000007
B2D4                              00000E4A
B2D40                             00000000
B2D41                             00000001
B2D42                             00000002
B2D43                             00000003
B2D44                             00000004
B2D45                             00000005
B2D46                             00000006
B2D47                             00000007
B2D5                              00000E4B
B2D50                             00000000
B2D51                             00000001
B2D52                             00000002
B2D53                             00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 125


SYMBOL TABLE
  LABEL                             VALUE 

B2D54                             00000004
B2D55                             00000005
B2D56                             00000006
B2D57                             00000007
B2D6                              00000E4C
B2D60                             00000000
B2D61                             00000001
B2D62                             00000002
B2D63                             00000003
B2D64                             00000004
B2D65                             00000005
B2D66                             00000006
B2D67                             00000007
B2D7                              00000E4D
B2D70                             00000000
B2D71                             00000001
B2D72                             00000002
B2D73                             00000003
B2D74                             00000004
B2D75                             00000005
B2D76                             00000006
B2D77                             00000007
B2DLC                             00000E45
B2EIDH                            00000E43
B2EIDL                            00000E44
B2IE                              00000004
B2SIDH                            00000E41
B2SIDL                            00000E42
B2TXEN                            00000004
B32__BCD2ASCII                    00000000
B32__BCD_ASC                      00000000
B32__BIN                          00000000
B32__BIN2BCD                      00000000
B3CON                             00000E50
B3D0                              00000E56
B3D00                             00000000
B3D01                             00000001
B3D02                             00000002
B3D03                             00000003
B3D04                             00000004
B3D05                             00000005
B3D06                             00000006
B3D07                             00000007
B3D1                              00000E57
B3D10                             00000000
B3D11                             00000001
B3D12                             00000002
B3D13                             00000003
B3D14                             00000004
B3D15                             00000005
B3D16                             00000006
B3D17                             00000007
B3D2                              00000E58
B3D20                             00000000
B3D21                             00000001
B3D22                             00000002
B3D23                             00000003
B3D24                             00000004
B3D25                             00000005
B3D26                             00000006
B3D27                             00000007
B3D3                              00000E59
B3D30                             00000000
B3D31                             00000001
B3D32                             00000002
B3D33                             00000003
B3D34                             00000004
B3D35                             00000005
B3D36                             00000006
B3D37                             00000007
B3D4                              00000E5A
B3D40                             00000000
B3D41                             00000001
B3D42                             00000002
B3D43                             00000003
B3D44                             00000004
B3D45                             00000005
B3D46                             00000006
B3D47                             00000007
B3D5                              00000E5B
B3D50                             00000000
B3D51                             00000001
B3D52                             00000002
B3D53                             00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 126


SYMBOL TABLE
  LABEL                             VALUE 

B3D54                             00000004
B3D55                             00000005
B3D56                             00000006
B3D57                             00000007
B3D6                              00000E5C
B3D60                             00000000
B3D61                             00000001
B3D62                             00000002
B3D63                             00000003
B3D64                             00000004
B3D65                             00000005
B3D66                             00000006
B3D67                             00000007
B3D7                              00000E5D
B3D70                             00000000
B3D71                             00000001
B3D72                             00000002
B3D73                             00000003
B3D74                             00000004
B3D75                             00000005
B3D76                             00000006
B3D77                             00000007
B3DLC                             00000E55
B3EIDH                            00000E53
B3EIDL                            00000E54
B3IE                              00000005
B3SIDH                            00000E51
B3SIDL                            00000E52
B3TXEN                            00000005
B46D77                            00000007
B4CON                             00000E60
B4D0                              00000E66
B4D00                             00000000
B4D01                             00000001
B4D02                             00000002
B4D03                             00000003
B4D04                             00000004
B4D05                             00000005
B4D06                             00000006
B4D07                             00000007
B4D1                              00000E67
B4D10                             00000000
B4D11                             00000001
B4D12                             00000002
B4D13                             00000003
B4D14                             00000004
B4D15                             00000005
B4D16                             00000006
B4D17                             00000007
B4D2                              00000E68
B4D20                             00000000
B4D21                             00000001
B4D22                             00000002
B4D23                             00000003
B4D24                             00000004
B4D25                             00000005
B4D26                             00000006
B4D27                             00000007
B4D3                              00000E69
B4D30                             00000000
B4D31                             00000001
B4D32                             00000002
B4D33                             00000003
B4D34                             00000004
B4D35                             00000005
B4D36                             00000006
B4D37                             00000007
B4D4                              00000E6A
B4D40                             00000000
B4D41                             00000001
B4D42                             00000002
B4D43                             00000003
B4D44                             00000004
B4D45                             00000005
B4D46                             00000006
B4D47                             00000007
B4D5                              00000E6B
B4D50                             00000000
B4D51                             00000001
B4D52                             00000002
B4D53                             00000003
B4D54                             00000004
B4D55                             00000005
B4D56                             00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 127


SYMBOL TABLE
  LABEL                             VALUE 

B4D57                             00000007
B4D6                              00000E6C
B4D60                             00000000
B4D61                             00000001
B4D62                             00000002
B4D63                             00000003
B4D64                             00000004
B4D65                             00000005
B4D66                             00000006
B4D67                             00000007
B4D7                              00000E6D
B4D70                             00000000
B4D71                             00000001
B4D72                             00000002
B4D73                             00000003
B4D74                             00000004
B4D75                             00000005
B4D76                             00000006
B4D77                             00000007
B4DLC                             00000E65
B4EIDH                            00000E63
B4EIDL                            00000E64
B4IE                              00000006
B4SIDH                            00000E61
B4SIDL                            00000E62
B4TXEN                            00000006
B57D07                            00000007
B57D23                            00000003
B5CON                             00000E70
B5D0                              00000E76
B5D00                             00000000
B5D01                             00000001
B5D02                             00000002
B5D03                             00000003
B5D04                             00000004
B5D05                             00000005
B5D06                             00000006
B5D07                             00000007
B5D1                              00000E77
B5D10                             00000000
B5D11                             00000001
B5D12                             00000002
B5D13                             00000003
B5D14                             00000004
B5D15                             00000005
B5D16                             00000006
B5D17                             00000007
B5D2                              00000E78
B5D20                             00000000
B5D21                             00000001
B5D22                             00000002
B5D23                             00000003
B5D24                             00000004
B5D25                             00000005
B5D26                             00000006
B5D27                             00000007
B5D3                              00000E79
B5D30                             00000000
B5D31                             00000001
B5D32                             00000002
B5D33                             00000003
B5D34                             00000004
B5D35                             00000005
B5D36                             00000006
B5D37                             00000007
B5D4                              00000E7A
B5D40                             00000000
B5D41                             00000001
B5D42                             00000002
B5D43                             00000003
B5D44                             00000004
B5D45                             00000005
B5D46                             00000006
B5D47                             00000007
B5D5                              00000E7B
B5D50                             00000000
B5D51                             00000001
B5D52                             00000002
B5D53                             00000003
B5D54                             00000004
B5D55                             00000005
B5D56                             00000006
B5D57                             00000007
B5D6                              00000E7C
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 128


SYMBOL TABLE
  LABEL                             VALUE 

B5D60                             00000000
B5D61                             00000001
B5D62                             00000002
B5D63                             00000003
B5D64                             00000004
B5D65                             00000005
B5D66                             00000006
B5D67                             00000007
B5D7                              00000E7D
B5D70                             00000000
B5D71                             00000001
B5D72                             00000002
B5D73                             00000003
B5D74                             00000004
B5D75                             00000005
B5D76                             00000006
B5D77                             00000007
B5DLC                             00000E75
B5EIDH                            00000E73
B5EIDL                            00000E74
B5IE                              00000007
B5SIDH                            00000E71
B5SIDL                            00000E72
B5TXEN                            00000007
BAD_BREAK                         00000868
BANKED                            00000001
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BEGIN_EEPROM_READ                 
BEGIN_EEPROM_WRITE                
BE_AWAKE_NOW                      00001C42
BF                                00000000
BGST                              00000005
BIE0                              00000DFA
BIT_0                             00000002
BIT_1                             00000001
BIT_10                            00000001
BIT_11                            00000000
BIT_12                            00000007
BIT_13                            00000006
BIT_14                            00000005
BIT_15                            00000001
BIT_16                            00000000
BIT_17                            00000003
BIT_18                            00000001
BIT_19                            00000002
BIT_2                             00000000
BIT_3                             00000002
BIT_4                             00000007
BIT_5                             00000006
BIT_6                             00000005
BIT_7                             00000004
BIT_8                             00000003
BIT_9                             00000002
BIT_FADE_CYCLE                    00000020
BIT_FADE_DOWN                     00000040
BIT_FADE_UP                       00000080
BIT_L0                            00000002
BIT_L1                            00000000
BIT_L2                            00000005
BIT_L3                            00000000
BIT_L4                            00000005
BIT_MAX_OFF_TIME                  00000010
BIT_RX                            00000007
BIT_T_R                           00000003
BIT_X0                            00000003
BIT_X1                            00000001
BIT_X2                            00000004
BIT_X3                            00000004
BIT_X4                            00000004
BOR                               00000000
BREAK_CONFIRMED                   00000854
BRG16                             00000003
BRGCON1                           00000F70
BRGCON2                           00000F71
BRGCON3                           00000F72
BRGH                              00000002
BRK_DET                           0000082E
BRK_DET2                          00000826
BRP0                              00000000
BRP1                              00000001
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 129


SYMBOL TABLE
  LABEL                             VALUE 

BRP2                              00000002
BRP3                              00000003
BRP4                              00000004
BRP5                              00000005
BSEL0                             00000DF8
BSR                               00000FE0
BTN_IDX_L0                        00000001
BTN_IDX_L1                        00000003
BTN_IDX_L2                        00000005
BTN_IDX_L3                        00000007
BTN_IDX_L4                        00000009
BTN_IDX_X0                        00000000
BTN_IDX_X1                        00000002
BTN_IDX_X2                        00000004
BTN_IDX_X3                        00000006
BTN_IDX_X4                        00000008
C                                 00000000
C1INA                             00000001
C1INB                             00000000
C1INV                             00000004
C1OUT                             00000006
C2INA                             00000003
C2INB                             00000002
C2INV                             00000005
C2OUT                             00000007
CANCAP                            00000004
CANCON                            00000F6F
CANCON_RO0                        00000F5F
CANCON_RO1                        00000F4F
CANCON_RO2                        00000F3F
CANCON_RO3                        00000F2F
CANCON_RO4                        00000E7F
CANCON_RO5                        00000E6F
CANCON_RO6                        00000E5F
CANCON_RO7                        00000E4F
CANCON_RO8                        00000E3F
CANCON_RO9                        00000E2F
CANRX                             00000003
CANSTAT                           00000F6E
CANSTAT_RO0                       00000F5E
CANSTAT_RO1                       00000F4E
CANSTAT_RO2                       00000F3E
CANSTAT_RO3                       00000F2E
CANSTAT_RO4                       00000E7E
CANSTAT_RO5                       00000E6E
CANSTAT_RO6                       00000E5E
CANSTAT_RO7                       00000E4E
CANSTAT_RO8                       00000E3E
CANSTAT_RO9                       00000E2E
CANTX                             00000002
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CH                                00000014
CHAN_L0R                          00000003
CHAN_L1R                          00000007
CHAN_L2R                          0000000B
CHAN_L3R                          0000000F
CHAN_L4R                          00000013
CHAN_X0B                          00000002
CHAN_X0G                          00000001
CHAN_X0R                          00000000
CHAN_X1B                          00000006
CHAN_X1G                          00000005
CHAN_X1R                          00000004
CHAN_X2B                          0000000A
CHAN_X2G                          00000009
CHAN_X2R                          00000008
CHAN_X3B                          0000000E
CHAN_X3G                          0000000D
CHAN_X3R                          0000000C
CHAN_X4B                          00000012
CHAN_X4G                          00000011
CHAN_X4R                          00000010
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 130


SYMBOL TABLE
  LABEL                             VALUE 

CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIOCON                            00000F73
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CLKI                              00000007
CLKO                              00000006
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMD_BIT                           00000007
CMD_XPRIV                         000014C4
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
COMSTAT                           00000F74
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUR_PRE                           00000015
CUR_PREH                          00000014
CUR_SLICE                         00000016
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREF_CVRCON                      00000004
CVREF_PORTA                       00000000
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CYCLE_TMR_PERIOD                  00005D3D
D                                 00000005
DATA_ADDRESS                      00000005
DATA_BYTE                         00000A90
DB_CHK_7E                         00000AA4
DB_CHK_7F                         00000AAE
DB_CHK_LITERAL                    00000A9C
DB_HANDLER                        00000AB8
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEFAULT_TBL                       00014000
DELAY_1_12_SEC                    000002F6
DELAY_1_6_SEC                     000002FE
DFLC0                             00000000
DFLC1                             00000001
DFLC2                             00000002
DFLC3                             00000003
DFLC4                             00000004
DLC0                              00000000
DLC1                              00000001
DLC2                              00000002
DLC3                              00000003
DMX_18                            00001CC6
DMX_19                            00001CF8
DMX_BIT8                          00000000
DMX_DONE                          00001CF4
DMX_EN                            00000007
DMX_EXIT_TEMPORARILY              00001C4E
DMX_FRAME                         00000005
DMX_NOT_FIRST                     00001CAE
DMX_PASS_DOWN_SET_LVL             00001CEC
DMX_RECEIVED_BYTE                 00001C8E
DMX_RESUME                        00001C7C
DMX_SLOTH                         00000008
DMX_SLOTL                         00000009
DMX_SLOT_REACHED                  00001CC4
DMX_SPEED                         00000006
DMX_ST_LSB                        00001CC0
DMX_WEIRD_FRAME                   00001CAA
DONE                              00000001
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 131


SYMBOL TABLE
  LABEL                             VALUE 

DO_CMD_SLEEP                      00000DF2
DO_CMD_WAKE                       00000E1C
DO_TEST_MODE                      000008B2
DRAIN_M_S_TX_BLOCKING             000008AA
DRAIN_TR                          00000002
DRAIN_TRANSMITTER                 00000892
D_1_6_J                           00000306
D_1_6_K                           00000308
D_1_6_KK                          00000304
D_A                               00000005
D_FLASH                           00000102
D_NOT_A                           00000005
ECANCON                           00000F77
ECCP1                             00000004
ECCP1AS                           00000FB6
ECCP1CON                          00000FBA
ECCP1DEL                          00000FB7
ECCP1IE                           00000000
ECCP1IF                           00000000
ECCP1IP                           00000000
ECCP1M0                           00000000
ECCP1M1                           00000001
ECCP1M2                           00000002
ECCP1M3                           00000003
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
ECCPR1                            00000FBB
ECCPR1H                           00000FBC
ECCPR1L                           00000FBB
EDC1B0                            00000004
EDC1B1                            00000005
EEADR                             00000FA9
EEADRH                            00000FAA
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_SETTINGS_LEN               00000010
EEPROM_USER_END                   000003FF
EEPROM_USER_START                 00000010
EE_BAUD                           00000001
EE_DEV_ID                         00000002
EE_DMX_H                          00000005
EE_DMX_L                          00000006
EE_END                            0000000F
EE_LL_XX                          00000007
EE_PHASE_H                        00000003
EE_PHASE_L                        00000004
EE_RESERVED_8                     00000008
EE_RESERVED_9                     00000009
EE_RESERVED_A                     0000000A
EE_RESERVED_B                     0000000B
EE_RESERVED_C                     0000000C
EE_RESERVED_D                     0000000D
EE_RESERVED_E                     0000000E
EE_SENSOR_CFG                     00000007
EE_START                          00000000
EICODE0                           00000000
EICODE1                           00000001
EICODE1_ICODE0                    00000001
EICODE2                           00000002
EICODE2_ICODE1                    00000002
EICODE3                           00000003
EICODE3_ICODE2                    00000003
EICODE4                           00000004
EID0                              00000000
EID1                              00000001
EID10                             00000002
EID11                             00000003
EID12                             00000004
EID13                             00000005
EID14                             00000006
EID15                             00000007
EID16                             00000000
EID17                             00000001
EID2                              00000002
EID3                              00000003
EID4                              00000004
EID5                              00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 132


SYMBOL TABLE
  LABEL                             VALUE 

EID6                              00000006
EID7                              00000007
EID8                              00000000
EID9                              00000001
EIGHTBITSIOBUF                    0000001E
ENDRHI                            00000005
END_EEPROM_READ                   
END_EEPROM_WRITE                  
END_FADE_0                        000016F8
END_FADE_1                        0000173E
END_FADE_10                       000019B4
END_FADE_11                       000019FA
END_FADE_12                       00001A40
END_FADE_13                       00001A86
END_FADE_14                       00001ACC
END_FADE_15                       00001B12
END_FADE_16                       00001B58
END_FADE_17                       00001B9E
END_FADE_18                       00001BE4
END_FADE_19                       00001C2A
END_FADE_2                        00001784
END_FADE_3                        000017CA
END_FADE_4                        00001810
END_FADE_5                        00001856
END_FADE_6                        0000189C
END_FADE_7                        000018E2
END_FADE_8                        00001928
END_FADE_9                        0000196E
END_FRJC                          00000284
END_SERIAL_READ                   00000888
EPWM1M0                           00000006
EPWM1M1                           00000007
ERRIE                             00000005
ERRIF                             00000005
ERRIP                             00000005
ERR_ABORT                         00000924
ERR_BUG                           
ERR_CLASS_DEVICE                  00000004
ERR_CLASS_FATAL_RESET             00000003
ERR_CLASS_INT_COMMAND             00000005
ERR_CLASS_IN_VALID                00000002
ERR_CLASS_OVERRUN                 00000001
ERR_CMD_INCOMPLETE                00000910
ERR_COMMAND                       00000920
ERR_NOT_IMP                       00000918
ERR_SERIAL_FRAMING                000008F8
ERR_SERIAL_FULL                   00000908
ERR_SERIAL_OVERRUN                00000902
EWARN                             00000000
EWIN0                             00000000
EWIN1                             00000001
EWIN2                             00000002
EWIN3                             00000003
EWIN4                             00000004
EXID                              00000003
EXIDE                             00000003
EXIDEN                            00000003
F                                 00000005
F0BP_0                            00000000
F0BP_1                            00000001
F0BP_2                            00000002
F0BP_3                            00000003
F10BP_0                           00000000
F10BP_1                           00000001
F10BP_2                           00000002
F10BP_3                           00000003
F11BP_0                           00000004
F11BP_1                           00000005
F11BP_2                           00000006
F11BP_3                           00000007
F12BP_0                           00000000
F12BP_1                           00000001
F12BP_2                           00000002
F12BP_3                           00000003
F13BP_0                           00000004
F13BP_1                           00000005
F13BP_2                           00000006
F13BP_3                           00000007
F14BP_0                           00000000
F14BP_1                           00000001
F14BP_2                           00000002
F14BP_3                           00000003
F15BP_0                           00000004
F15BP_1                           00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 133


SYMBOL TABLE
  LABEL                             VALUE 

F15BP_2                           00000006
F15BP_3                           00000007
F1BP_0                            00000004
F1BP_1                            00000005
F1BP_2                            00000006
F1BP_3                            00000007
F2BP_0                            00000000
F2BP_1                            00000001
F2BP_2                            00000002
F2BP_3                            00000003
F3BP_0                            00000004
F3BP_1                            00000005
F3BP_2                            00000006
F3BP_3                            00000007
F4BP_0                            00000000
F4BP_1                            00000001
F4BP_2                            00000002
F4BP_3                            00000003
F5BP_0                            00000004
F5BP_1                            00000005
F5BP_2                            00000006
F5BP_3                            00000007
F6BP_0                            00000000
F6BP_1                            00000001
F6BP_2                            00000002
F6BP_3                            00000003
F7BP_0                            00000004
F7BP_1                            00000005
F7BP_2                            00000006
F7BP_3                            00000007
F8BP_0                            00000000
F8BP_1                            00000001
F8BP_2                            00000002
F8BP_3                            00000003
F9BP_0                            00000004
F9BP_1                            00000005
F9BP_2                            00000006
F9BP_3                            00000007
FACTORY_RESET                     0000029C
FACTORY_RESET_FLASH               000002F4
FACTORY_RESET_JUMPER_CHECK        00000284
FACTORY_RESET_LOOP                000002C0
FADE_CYCLE                        00000005
FADE_DOWN                         00000006
FADE_UP                           00000007
FAST                              00000001
FERR                              00000002
FIFOEMPTY                         00000007
FIFOMWIE                          00000000
FIFOWM                            00000005
FIFOWMIE                          00000000
FIFOWMIF                          00000000
FIFOWMIP                          00000000
FIL0_0                            00000000
FIL0_1                            00000001
FIL10_0                           00000004
FIL10_1                           00000005
FIL11_0                           00000006
FIL11_1                           00000007
FIL12_0                           00000000
FIL12_1                           00000001
FIL13_0                           00000002
FIL13_1                           00000003
FIL14_0                           00000004
FIL14_1                           00000005
FIL15_0                           00000006
FIL15_1                           00000007
FIL1_0                            00000002
FIL1_1                            00000003
FIL2_0                            00000004
FIL2_1                            00000005
FIL3_0                            00000006
FIL3_1                            00000007
FIL4_0                            00000000
FIL4_1                            00000001
FIL5_0                            00000002
FIL5_1                            00000003
FIL6_0                            00000004
FIL6_1                            00000005
FIL7_0                            00000006
FIL7_1                            00000007
FIL8_0                            00000000
FIL8_1                            00000001
FIL9_0                            00000002
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 134


SYMBOL TABLE
  LABEL                             VALUE 

FIL9_1                            00000003
FILHIT0                           00000000
FILHIT0_TXPRI0                    00000000
FILHIT1                           00000001
FILHIT1_TXPRI1                    00000001
FILHIT2                           00000002
FILHIT2_RTREN                     00000002
FILHIT3                           00000003
FILHIT3_TXREQ                     00000003
FILHIT4                           00000004
FILHIT4_TXERR                     00000004
FLC0                              00000000
FLC1                              00000001
FLC2                              00000002
FLC3                              00000003
FLC4                              00000004
FLT0                              00000000
FP0                               00000000
FP1                               00000001
FP2                               00000002
FP3                               00000003
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HALT_MODE                         00001CFC
HALT_SLEEP                        00001D0A
HAS_ACTIVE                        00000000
HAS_OPTION                        00000000
HAS_POWER_CTRL                    00000000
HAS_SENSORS                       00000000
HAS_STATUS_LEDS                   00000000
HAS_T_R                           00000001
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
I                                 0000001F
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ICODE0                            00000000
ICODE1                            00000001
ICODE2                            00000002
ICODE3                            00000003
ICODE4                            00000004
IDLEN                             00000007
INCYC                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INHIBIT_OUTPUT                    00000002
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 135


SYMBOL TABLE
  LABEL                             VALUE 

INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTERP_START                      00000948
INTSCR                            00000007
INTSRC                            00000007
INT_HIGH                          0000002A
INT_LOW                           00000000
INT_RX                            00000014
INT_RX_END                        0000001E
INT_TMR2                          00000044
INT_TMR2_DONE                     0000005E
INT_TMR2_END                      00000060
INT_TMR2_MSB                      00000062
INT_TMR2_NEXT                     0000005A
INT_TX                            0000000A
INT_TX_END                        00000014
INT_ZC                            0000002A
INT_ZC_END                        00000044
INVALID_SSR                       00000006
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IPR3                              00000FA5
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
IRXIE                             00000007
IRXIF                             00000007
IRXIP                             00000007
ISR_TMPL_BSR                      00000001
ISR_TMPL_STATUS                   00000000
ISR_TMPL_WREG                     00000002
IVRST                             00000005
J                                 00000020
JTOFF                             00000001
JTOFF_FILHIT1                     00000001
K                                 00000021
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
KK                                00000022
LAST_ERROR                        00000013
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 136


SYMBOL TABLE
  LABEL                             VALUE 

LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LITERAL_ESC                       00000000
LUMOS_ARCH                        LUMOS_ARCH_4685
LUMOS_ARCH_14K50                  (0x1450)
LUMOS_ARCH_4685                   (0x4685)
LUMOS_CHIP_4CHANNEL               0x44
LUMOS_CHIP_MASTER                 0x41
LUMOS_CHIP_QSCC                   0x45
LUMOS_CHIP_QSRC                   0x46
LUMOS_CHIP_SLAVE                  0x42
LUMOS_CHIP_STANDALONE             0x43
LUMOS_CHIP_TYPE                   LUMOS_CHIP_QSRC
LUMOS_CONFIG_INC                  
LUMOS_INIT                        00000000
LUMOS_INTERNAL                    0x58
LUMOS_SET_SSR_INC                 
LUMOS_SLICE_TIMER                 LUMOS_INTERNAL
LUMOS_ZC                          0x55
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAIN                              00000800
MAIN_DATA                         00000500
MAX_OFF_TIME                      00000004
MDSEL0                            00000006
MDSEL1                            00000007
MSB_ESC                           00000001
MSEL0                             00000DF0
MSEL1                             00000DF1
MSEL2                             00000DF2
MSEL3                             00000DF3
MY_ADDRESS                        00000003
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DMX                           00000864
NOT_DONE                          00000001
NOT_FIFOEMPTY                     00000007
NOT_MY_SSR                        00000007
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NUM_CHANNELS                      (.20)
N_BUTTONS                         0000000A
OBF                               00000006
OERR                              00000001
ON_OFF_ON                         00000AE0
ON_OFF_YY_DATA                    00000AC6
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 137


SYMBOL TABLE
  LABEL                             VALUE 

OPMODE0                           00000005
OPMODE1                           00000006
OPMODE2                           00000007
OPTION_DEBOUNCE                   00000018
OPTION_HOLD                       00000019
OSC1                              00000007
OSC2                              00000006
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OUTPUT_CHAN_MAX                   00000013
OV                                00000003
P                                 00000004
P1A                               00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
PASS_DOWN_ON_OFF                  00000AE6
PASS_DOWN_SET_LVL                 00000B16
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PHASE_OFFSETH                     00000004
PHASE_OFFSETL                     00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIE3                              00000FA3
PIR1                              00000F9E
PIR2                              00000FA1
PIR3                              00000FA4
PLAT_0                            00000F8B
PLAT_1                            00000F8B
PLAT_10                           00000F8A
PLAT_11                           00000F8D
PLAT_12                           00000F8C
PLAT_13                           00000F8C
PLAT_14                           00000F8C
PLAT_15                           00000F8D
PLAT_16                           00000F8A
PLAT_17                           00000F8C
PLAT_18                           00000F8C
PLAT_19                           00000F8C
PLAT_2                            00000F8B
PLAT_3                            00000F8D
PLAT_4                            00000F8A
PLAT_5                            00000F8A
PLAT_6                            00000F8A
PLAT_7                            00000F8A
PLAT_8                            00000F8A
PLAT_9                            00000F8A
PLAT_T_R                          00000F8B
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
PORT_L0                           00000F80
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 138


SYMBOL TABLE
  LABEL                             VALUE 

PORT_L1                           00000F80
PORT_L2                           00000F80
PORT_L3                           00000F83
PORT_L4                           00000F82
PORT_RX                           00000F82
PORT_T_R                          00000F82
PORT_X0                           00000F80
PORT_X1                           00000F80
PORT_X2                           00000F80
PORT_X3                           00000F82
PORT_X4                           00000F83
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PRECYC                            00000006
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRE_PRIV                          00000001
PRIV_FORBID                       00000003
PRIV_MODE                         00000004
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEG0                            00000000
PRSEG1                            00000001
PRSEG2                            00000002
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
QSCC_CMD6_START                   00000000
QSCC_G_C_1                        00000956
QSCC_G_C_2                        00000964
QSCC_INIT                         00000000
QSCC_MAIN                         00000000
QSCC_PORT                         (1)
QSCC_START                        00000000
QS_QFLG_BUTTONS                   00000002
QS_QFLG_PING                      00000001
QS_QFLG_STOP                      00000000
QS_STOP_SCANNER                   00000000
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0_B0DLC                         00000004
RB0_B1DLC                         00000004
RB0_B2DLC                         00000004
RB0_B3DLC                         00000004
RB0_B4DLC                         00000004
RB0_B5DLC                         00000004
RB0_DDRB                          00000000
RB0_PORTB                         00000000
RB0_RXB0DLC                       00000004
RB0_RXB1DLC                       00000004
RB0_TRISB                         00000000
RB1_B0DLC                         00000005
RB1_B1DLC                         00000005
RB1_B2DLC                         00000005
RB1_B3DLC                         00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 139


SYMBOL TABLE
  LABEL                             VALUE 

RB1_B4DLC                         00000005
RB1_B5DLC                         00000005
RB1_DDRB                          00000001
RB1_PORTB                         00000001
RB1_RXB0DLC                       00000005
RB1_RXB1DLC                       00000005
RB1_TRISB                         00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
READ_EEPROM_DATA                  
READ_EEPROM_DATA_REG              
READ_EEPROM_DATA_W                
READ_EEPROM_DATA_W_INC            
READ_WRITE                        00000002
REC0                              00000000
REC1                              00000001
REC2                              00000002
REC3                              00000003
REC4                              00000004
REC5                              00000005
REC6                              00000006
REC7                              00000007
RECEIVE_COMMAND                   00000928
REQOP0                            00000005
REQOP1                            00000006
REQOP2                            00000007
RESRB0                            00000004
RESRB1                            00000005
RI                                00000004
ROLE_MASTER                       (0)
ROLE_SLAVE                        (0)
ROLE_STANDALONE                   (1)
RSEN                              00000001
RTREN                             00000002
RTRRO                             00000005
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXB0CON                           00000F60
RXB0D0                            00000F66
RXB0D00                           00000000
RXB0D01                           00000001
RXB0D02                           00000002
RXB0D03                           00000003
RXB0D04                           00000004
RXB0D05                           00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 140


SYMBOL TABLE
  LABEL                             VALUE 

RXB0D06                           00000006
RXB0D07                           00000007
RXB0D1                            00000F67
RXB0D10                           00000000
RXB0D11                           00000001
RXB0D12                           00000002
RXB0D13                           00000003
RXB0D14                           00000004
RXB0D15                           00000005
RXB0D16                           00000006
RXB0D17                           00000007
RXB0D2                            00000F68
RXB0D20                           00000000
RXB0D21                           00000001
RXB0D22                           00000002
RXB0D23                           00000003
RXB0D24                           00000004
RXB0D25                           00000005
RXB0D26                           00000006
RXB0D27                           00000007
RXB0D3                            00000F69
RXB0D30                           00000000
RXB0D31                           00000001
RXB0D32                           00000002
RXB0D33                           00000003
RXB0D34                           00000004
RXB0D35                           00000005
RXB0D36                           00000006
RXB0D37                           00000007
RXB0D4                            00000F6A
RXB0D40                           00000000
RXB0D41                           00000001
RXB0D42                           00000002
RXB0D43                           00000003
RXB0D44                           00000004
RXB0D45                           00000005
RXB0D46                           00000006
RXB0D47                           00000007
RXB0D5                            00000F6B
RXB0D50                           00000000
RXB0D51                           00000001
RXB0D52                           00000002
RXB0D53                           00000003
RXB0D54                           00000004
RXB0D55                           00000005
RXB0D56                           00000006
RXB0D57                           00000007
RXB0D6                            00000F6C
RXB0D60                           00000000
RXB0D61                           00000001
RXB0D62                           00000002
RXB0D63                           00000003
RXB0D64                           00000004
RXB0D65                           00000005
RXB0D66                           00000006
RXB0D67                           00000007
RXB0D7                            00000F6D
RXB0D70                           00000000
RXB0D71                           00000001
RXB0D72                           00000002
RXB0D73                           00000003
RXB0D74                           00000004
RXB0D75                           00000005
RXB0D76                           00000006
RXB0D77                           00000007
RXB0DBEN                          00000002
RXB0DBEN_FILHIT2                  00000002
RXB0DLC                           00000F65
RXB0EIDH                          00000F63
RXB0EIDL                          00000F64
RXB0IE                            00000000
RXB0IF                            00000000
RXB0IP                            00000000
RXB0OVFL                          00000007
RXB0OVFL_NOT_FIFOEMPTY            00000007
RXB0SIDH                          00000F61
RXB0SIDL                          00000F62
RXB1CON                           00000F50
RXB1D0                            00000F56
RXB1D00                           00000000
RXB1D01                           00000001
RXB1D02                           00000002
RXB1D03                           00000003
RXB1D04                           00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 141


SYMBOL TABLE
  LABEL                             VALUE 

RXB1D05                           00000005
RXB1D06                           00000006
RXB1D07                           00000007
RXB1D1                            00000F57
RXB1D10                           00000000
RXB1D11                           00000001
RXB1D12                           00000002
RXB1D13                           00000003
RXB1D14                           00000004
RXB1D15                           00000005
RXB1D16                           00000006
RXB1D17                           00000007
RXB1D2                            00000F58
RXB1D20                           00000000
RXB1D21                           00000001
RXB1D22                           00000002
RXB1D23                           00000003
RXB1D24                           00000004
RXB1D25                           00000005
RXB1D26                           00000006
RXB1D27                           00000007
RXB1D3                            00000F59
RXB1D30                           00000000
RXB1D31                           00000001
RXB1D32                           00000002
RXB1D33                           00000003
RXB1D34                           00000004
RXB1D35                           00000005
RXB1D36                           00000006
RXB1D37                           00000007
RXB1D4                            00000F5A
RXB1D40                           00000000
RXB1D41                           00000001
RXB1D42                           00000002
RXB1D43                           00000003
RXB1D44                           00000004
RXB1D45                           00000005
RXB1D46                           00000006
RXB1D47                           00000007
RXB1D5                            00000F5B
RXB1D50                           00000000
RXB1D51                           00000001
RXB1D52                           00000002
RXB1D53                           00000003
RXB1D54                           00000004
RXB1D55                           00000005
RXB1D56                           00000006
RXB1D57                           00000007
RXB1D6                            00000F5C
RXB1D60                           00000000
RXB1D61                           00000001
RXB1D62                           00000002
RXB1D63                           00000003
RXB1D64                           00000004
RXB1D65                           00000005
RXB1D66                           00000006
RXB1D67                           00000007
RXB1D7                            00000F5D
RXB1D70                           00000000
RXB1D71                           00000001
RXB1D72                           00000002
RXB1D73                           00000003
RXB1D74                           00000004
RXB1D75                           00000005
RXB1D76                           00000006
RXB1D77                           00000007
RXB1DLC                           00000F55
RXB1EIDH                          00000F53
RXB1EIDL                          00000F54
RXB1IE                            00000001
RXB1IF                            00000001
RXB1IP                            00000001
RXB1OVFL                          00000006
RXB1SIDH                          00000F51
RXB1SIDL                          00000F52
RXBODBEN                          00000002
RXBP                              00000003
RXBnIE                            00000001
RXBnIF                            00000001
RXBnIP                            00000001
RXBnOVFL                          00000006
RXDATA_FULL                       00000003
RXDATA_QUEUE                      00000001
RXERRCNT                          00000F75
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 142


SYMBOL TABLE
  LABEL                             VALUE 

RXF0EIDH                          00000F02
RXF0EIDL                          00000F03
RXF0EN                            00000000
RXF0SIDH                          00000F00
RXF0SIDL                          00000F01
RXF10EIDH                         00000D76
RXF10EIDL                         00000D77
RXF10EN                           00000002
RXF10SIDH                         00000D74
RXF10SIDL                         00000D75
RXF11EIDH                         00000D7A
RXF11EIDL                         00000D7B
RXF11EN                           00000003
RXF11SIDH                         00000D78
RXF11SIDL                         00000D79
RXF12EIDH                         00000D82
RXF12EIDL                         00000D83
RXF12EN                           00000004
RXF12SIDH                         00000D80
RXF12SIDL                         00000D81
RXF13EIDH                         00000D86
RXF13EIDL                         00000D87
RXF13EN                           00000005
RXF13SIDH                         00000D84
RXF13SIDL                         00000D85
RXF14EIDH                         00000D8A
RXF14EIDL                         00000D8B
RXF14EN                           00000006
RXF14SIDH                         00000D88
RXF14SIDL                         00000D89
RXF15EIDH                         00000D92
RXF15EIDL                         00000D93
RXF15EN                           00000007
RXF15SIDH                         00000D90
RXF15SIDL                         00000D91
RXF1EIDH                          00000F06
RXF1EIDL                          00000F07
RXF1EN                            00000001
RXF1SIDH                          00000F04
RXF1SIDL                          00000F05
RXF2EIDH                          00000F0A
RXF2EIDL                          00000F0B
RXF2EN                            00000002
RXF2SIDH                          00000F08
RXF2SIDL                          00000F09
RXF3EIDH                          00000F0E
RXF3EIDL                          00000F0F
RXF3EN                            00000003
RXF3SIDH                          00000F0C
RXF3SIDL                          00000F0D
RXF4EIDH                          00000F12
RXF4EIDL                          00000F13
RXF4EN                            00000004
RXF4SIDH                          00000F10
RXF4SIDL                          00000F11
RXF5EIDH                          00000F16
RXF5EIDL                          00000F17
RXF5EN                            00000005
RXF5SIDH                          00000F14
RXF5SIDL                          00000F15
RXF6EIDH                          00000D62
RXF6EIDL                          00000D63
RXF6EN                            00000006
RXF6SIDH                          00000D60
RXF6SIDL                          00000D61
RXF7EIDH                          00000D66
RXF7EIDL                          00000D67
RXF7EN                            00000007
RXF7SIDH                          00000D64
RXF7SIDL                          00000D65
RXF8EIDH                          00000D6A
RXF8EIDL                          00000D6B
RXF8EN                            00000000
RXF8SIDH                          00000D68
RXF8SIDL                          00000D69
RXF9EIDH                          00000D72
RXF9EIDL                          00000D73
RXF9EN                            00000001
RXF9SIDH                          00000D70
RXF9SIDL                          00000D71
RXFBCON0                          00000DE0
RXFBCON1                          00000DE1
RXFBCON2                          00000DE2
RXFBCON3                          00000DE3
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 143


SYMBOL TABLE
  LABEL                             VALUE 

RXFBCON4                          00000DE4
RXFBCON5                          00000DE5
RXFBCON6                          00000DE6
RXFBCON7                          00000DE7
RXFCON0                           00000DD4
RXFCON1                           00000DD5
RXFUL                             00000007
RXFUL_TXBIF                       00000007
RXM0                              00000005
RXM0EIDH                          00000F1A
RXM0EIDL                          00000F1B
RXM0SIDH                          00000F18
RXM0SIDL                          00000F19
RXM0_RTRRO                        00000005
RXM1                              00000006
RXM1EIDH                          00000F1E
RXM1EIDL                          00000F1F
RXM1SIDH                          00000F1C
RXM1SIDL                          00000F1D
RXM1_TXABT                        00000006
RXRTR                             00000006
RXRTRRO_B0CON                     00000005
RXRTRRO_B1CON                     00000005
RXRTRRO_B2CON                     00000005
RXRTRRO_B3CON                     00000005
RXRTRRO_B4CON                     00000005
RXRTRRO_B5CON                     00000005
RXRTRRO_FILHIT3                   00000003
RXRTRRO_RXB0CON                   00000003
RXRTRRO_RXB1CON                   00000003
RXRTRRO_TXLARB                    00000005
RXRTR_TXRTR                       00000006
RXWARN                            00000001
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
S0_CMD0                           00000978
S0_CMD1                           00000A44
S0_CMD2                           00000A50
S0_CMD3                           00000A5A
S0_CMD4                           00000A64
S0_CMD5                           00000A6E
S0_CMD6                           00000A76
S0_CMD7                           00000A7E
S0_CMD_ERR                        00000A88
S10_DATA                          0000152E
S11_DATA                          0000153A
S12_DATA                          00001546
S13_DATA                          00001552
S14_DATA                          0000155E
S15_DATA                          0000157A
S16_DATA                          00001582
S17_DATA                          0000158A
S17_DATA_NIL                      0000158A
S18_DATA_NIL                      00001592
S19_DATA                          0000159A
S1_DATA                           00000ABE
S20_DATA                          000015B8
S21_DATA                          000015C4
S22_DATA                          000015E4
S2_DATA                           00000AEA
S3_DATA                           00000B00
S4_DATA                           00000B1E
S5_DATA                           00000B40
S6_0_DATA                         00000B76
S6_0_DATA_N_OK                    00000B8C
S6_0_UPDATE_MASTER                00000BA0
S6_0_UPDATE_NEXT                  00000BBC
S6_10_DATA                        000011E8
S6_10_DEF_SENS                    000011FC
S6_10_VALID                       000011F6
S6_11_CLR_SEQ                     00001218
S6_11_DATA                        00001204
S6_11_VALID                       00001212
S6_12_DATA                        00001228
S6_12_DEF_SEQ                     0000124C
S6_12_VALID                       00001234
S6_12_VALID2                      00001246
S6_13_DATA                        0000125C
S6_13_VALID                       0000126A
S6_14_DATA                        00001282
S6_14_DATA_QS                     00001282
S6_14_DISP_TEXT                   00001296
S6_14_VALID                       00001290
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 144


SYMBOL TABLE
  LABEL                             VALUE 

S6_15_DATA                        0000129A
S6_15_DISP_BITMAP                 000012AE
S6_15_VALID                       000012A8
S6_16_CF_SET_QS_PARAMS            000012C6
S6_16_DATA                        000012B2
S6_16_VALID                       000012C0
S6_17_DATA                        000012D2
S6_1_CONFIGURE                    00000BEE
S6_1_DATA                         00000BCC
S6_1_VALID_1                      00000BDA
S6_1_VALID_2                      00000BE0
S6_2_DATA                         00000C52
S6_2_SET_BAUD                     00000C74
S6_2_VALID1                       00000C60
S6_2_VALID2                       00000C66
S6_3_DATA                         00000CB6
S6_3_HALT                         00000CE2
S6_3_RESET                        00000CCA
S6_3_VALID                        00000CC4
S6_4_DATA                         00000CE4
S6_4_SET_PHASE                    00000CF8
S6_4_VALID                        00000CF2
S6_5_ADDR                         00000D7E
S6_5_DATA                         00000D6A
S6_5_VALID                        00000D78
S6_6_DATA                         00000DD0
S6_6_SLEEP                        00000DE4
S6_6_VALID                        00000DDE
S6_7_DATA                         00000DFA
S6_7_VALID                        00000E08
S6_7_WAKE                         00000E0E
S6_8_DATA                         00000E28
S6_8_SHUTDOWN                     00000E3C
S6_8_VALID                        00000E36
S6_8_X                            00000E20
S6_9_DATA                         00000E4C
S6_9_QUERY                        00000E60
S6_9_VALID                        00000E5A
S6_DATA                           00000B5E
S6_KEEP_LOOKING                   000012DC
S6_RESTART                        000012DA
S7_DATA                           000012F4
S8B_CHK_7E1                       00000E92
S8B_CHK_7E10                      00001178
S8B_CHK_7E11                      000011B6
S8B_CHK_7E2                       00000ECE
S8B_CHK_7E3                       00000F16
S8B_CHK_7E4                       00000F54
S8B_CHK_7E5                       00000F98
S8B_CHK_7E6                       00000FE0
S8B_CHK_7E7                       0000101E
S8B_CHK_7E8                       00001078
S8B_CHK_7E9                       0000111C
S8B_CHK_MSB1                      00000EA6
S8B_CHK_MSB10                     0000118C
S8B_CHK_MSB11                     000011CA
S8B_CHK_MSB2                      00000EE2
S8B_CHK_MSB3                      00000F2A
S8B_CHK_MSB4                      00000F68
S8B_CHK_MSB5                      00000FAC
S8B_CHK_MSB6                      00000FF4
S8B_CHK_MSB7                      00001032
S8B_CHK_MSB8                      0000108C
S8B_CHK_MSB9                      00001130
S8B_END1                          00000EB8
S8B_END10                         0000119E
S8B_END11                         000011DC
S8B_END2                          00000EF4
S8B_END3                          00000F3C
S8B_END4                          00000F7A
S8B_END5                          00000FBE
S8B_END6                          00001006
S8B_END7                          00001044
S8B_END8                          0000109E
S8B_END9                          00001142
S8B_LABEL                         0000000C
S8B_SEND_NORMAL1                  00000EB2
S8B_SEND_NORMAL10                 00001198
S8B_SEND_NORMAL11                 000011D6
S8B_SEND_NORMAL2                  00000EEE
S8B_SEND_NORMAL3                  00000F36
S8B_SEND_NORMAL4                  00000F74
S8B_SEND_NORMAL5                  00000FB8
S8B_SEND_NORMAL6                  00001000
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 145


SYMBOL TABLE
  LABEL                             VALUE 

S8B_SEND_NORMAL7                  0000103E
S8B_SEND_NORMAL8                  00001098
S8B_SEND_NORMAL9                  0000113C
S8_DATA                           00001300
S8_PASS_DOWN_RAMP_LVL             0000133A
S9_CF_ADDR                        00001516
S9_CF_PHASE                       000014FE
S9_DATA                           00001342
S9_DO_PRIV_CMD                    0000145C
S9_INTERNAL_CMD                   0000144C
S9_PRIV_0                         0000146A
S9_PRIV_0X                        00001470
S9_PRIV_1                         00001478
S9_PRIV_2                         00001490
S9_PRIV_3                         000014A8
S9_PRIV_4                         000014C0
S9_PRIV_5                         000014CA
S9_PRIV_6                         000014E2
S9_PRIV_6_QS_PARAM                000014E2
S9_PRIV_7                         000014FA
S9_PRIV_CMD                       00001450
S9_X0_SLEEP                       00001352
S9_X1_WAKE                        00001366
S9_X2_SHUTDOWN                    0000137E
S9_X3_QUERY                       00001396
S9_X4_DEF_SEQ                     000013AE
S9_X5_EXEC_SEQ                    000013B8
S9_X6_DEF_SENS                    000013C2
S9_X7_MSK_SENS                    000013DA
S9_X8_CLR_SEQ                     000013E4
S9_X9_XPRIV                       000013FC
S9_XA_ERR_COMMAND                 00001404
S9_XA_QS_QUERY                    00001404
S9_XB_BTN_MASK                    0000140E
S9_XC_DISP_TEXT                   00001418
S9_XD_DISP_BITMAP                 00001430
S9_XE_ERR_COMMAND                 00001448
SAM                               00000006
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDFLC                             00000DD8
SDI                               00000004
SDO                               00000005
SEG1PH0                           00000003
SEG1PH1                           00000004
SEG1PH2                           00000005
SEG2PH0                           00000000
SEG2PH1                           00000001
SEG2PH2                           00000002
SEG2PHT                           00000007
SEG2PHTS                          00000007
SEN                               00000000
SENDB                             00000003
SEND_8_BIT_W                      
SEQ_DATA                          00000600
SET_EEPROM_ADDRESS                
SET_SSR_BLINK_FADE                
SET_SSR_DMX_MODE                  
SET_SSR_NORMAL_MODE               
SET_SSR_OFF                       
SET_SSR_PATTERN                   
SET_SSR_RAPID_FADE                
SET_SSR_RAPID_FLASH               
SET_SSR_SLOW_FADE                 
SET_SSR_SLOW_FLASH                
SET_SSR_STEADY                    
SET_SSR_VALUE                     
SID0                              00000005
SID1                              00000006
SID10                             00000007
SID2                              00000007
SID3                              00000000
SID4                              00000001
SID5                              00000002
SID6                              00000003
SID7                              00000004
SID8                              00000005
SID9                              00000006
SIO_115200                        00000009
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 146


SYMBOL TABLE
  LABEL                             VALUE 

SIO_1200                          00000002
SIO_19200                         00000006
SIO_2400                          00000003
SIO_250000                        0000000A
SIO_300                           00000000
SIO_38400                         00000007
SIO_4800                          00000004
SIO_57600                         00000008
SIO_600                           00000001
SIO_9600                          00000005
SIO_DATA_START                    00000300
SIO_ECHO                          00000000
SIO_ECHO_W                        00000000
SIO_FERR                          00000005
SIO_FLUSH_INPUT                   00000000
SIO_FLUSH_OUTPUT                  00000000
SIO_GETCHAR                       00000000
SIO_GETCHAR_W                     00000000
SIO_INIT                          00000000
SIO_INPUT                         00000000
SIO_NEWLINE                       00000000
SIO_ORUN                          00000004
SIO_OUTPUT                        00000000
SIO_PRINT_HEX                     00000000
SIO_PRINT_HEX_W                   00000000
SIO_PUTCHAR                       00000000
SIO_PUTCHAR_W                     00000000
SIO_READ                          00000000
SIO_READ_W                        00000000
SIO_RECV                          00000000
SIO_RX_BUFFER_START               00000200
SIO_SEND                          00000000
SIO_SET_BAUD_W                    00000000
SIO_STATUS                        00000000
SIO_TABLE_START                   00015000
SIO_TX_BUFFER_START               00000100
SIO_WRITE                         00000000
SIO_WRITE_W                       00000000
SJW0                              00000006
SJW1                              00000007
SLEEP_MODE                        00000003
SLICE_TMR_PERIOD                  0000009F
SLICE_UPD                         00000005
SMP                               00000007
SND8BIT                           
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SRR                               00000004
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
SSR_00_COUNTER                    00000450
SSR_00_FLAGS                      00000414
SSR_00_SPEED                      0000043C
SSR_00_STEP                       00000428
SSR_00_VALUE                      00000400
SSR_BLOCK_LEN                     00000014
SSR_DATA_BANK                     00000400
SSR_MAX                           00000013
SSR_OUTPUT_VALUE                  000015EC
SSR_STATE                         00000006
SSR_STATE2                        00000007
START                             00000104
START_DMX_FRAME                   000008FE
STATUS                            00000FD8
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 147


SYMBOL TABLE
  LABEL                             VALUE 

STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYS_SNH                           00016FF0
SYS_SNL                           00016FF1
S_FLASH                           00000100
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1INSYNC                          00000002
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3ECCP1                           00000006
T3NSYNC                           00000002
T3SYNC                            00000002
TABLAT                            00000FF5
TARGET_SSR                        00000017
TARGET_SSR_MSK                    0000003F
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEC0                              00000000
TEC1                              00000001
TEC2                              00000002
TEC3                              00000003
TEC4                              00000004
TEC5                              00000005
TEC6                              00000006
TEC7                              00000007
TEST_BUTTON                       00000005
TEST_CYCLE                        0000001A
TEST_MODE                         00000000
TEST_MODE_1                       000008D0
TEST_MODE_BYPASS                  00000884
TEST_NOT_PRESSED                  000008BC
TEST_NP_1                         000008D0
TEST_NP_2                         000008D0
TEST_PAUSE                        00000007
TEST_SSR                          0000001B
TEST_UPD                          00000006
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 148


SYMBOL TABLE
  LABEL                             VALUE 

TMR0ON                            00000007
TMR1                              00000FCE
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRIS_T_R                          00000F94
TRMT                              00000001
TRY_DOWN_0                        000016DA
TRY_DOWN_1                        00001720
TRY_DOWN_10                       00001996
TRY_DOWN_11                       000019DC
TRY_DOWN_12                       00001A22
TRY_DOWN_13                       00001A68
TRY_DOWN_14                       00001AAE
TRY_DOWN_15                       00001AF4
TRY_DOWN_16                       00001B3A
TRY_DOWN_17                       00001B80
TRY_DOWN_18                       00001BC6
TRY_DOWN_19                       00001C0C
TRY_DOWN_2                        00001766
TRY_DOWN_3                        000017AC
TRY_DOWN_4                        000017F2
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 149


SYMBOL TABLE
  LABEL                             VALUE 

TRY_DOWN_5                        00001838
TRY_DOWN_6                        0000187E
TRY_DOWN_7                        000018C4
TRY_DOWN_8                        0000190A
TRY_DOWN_9                        00001950
TR_I                              00000023
TR_OFF_DELAY                      00001D1A
TR_ON_DELAY                       00001D10
TR_ON_L                           00001D12
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXABT                             00000006
TXB0CON                           00000F40
TXB0D0                            00000F46
TXB0D00                           00000000
TXB0D01                           00000001
TXB0D02                           00000002
TXB0D03                           00000003
TXB0D04                           00000004
TXB0D05                           00000005
TXB0D06                           00000006
TXB0D07                           00000007
TXB0D1                            00000F47
TXB0D10                           00000000
TXB0D11                           00000001
TXB0D12                           00000002
TXB0D13                           00000003
TXB0D14                           00000004
TXB0D15                           00000005
TXB0D16                           00000006
TXB0D17                           00000007
TXB0D2                            00000F48
TXB0D20                           00000000
TXB0D21                           00000001
TXB0D22                           00000002
TXB0D23                           00000003
TXB0D24                           00000004
TXB0D25                           00000005
TXB0D26                           00000006
TXB0D27                           00000007
TXB0D3                            00000F49
TXB0D30                           00000000
TXB0D31                           00000001
TXB0D32                           00000002
TXB0D33                           00000003
TXB0D34                           00000004
TXB0D35                           00000005
TXB0D36                           00000006
TXB0D37                           00000007
TXB0D4                            00000F4A
TXB0D40                           00000000
TXB0D41                           00000001
TXB0D42                           00000002
TXB0D43                           00000003
TXB0D44                           00000004
TXB0D45                           00000005
TXB0D46                           00000006
TXB0D47                           00000007
TXB0D5                            00000F4B
TXB0D50                           00000000
TXB0D51                           00000001
TXB0D52                           00000002
TXB0D53                           00000003
TXB0D54                           00000004
TXB0D55                           00000005
TXB0D56                           00000006
TXB0D57                           00000007
TXB0D6                            00000F4C
TXB0D60                           00000000
TXB0D61                           00000001
TXB0D62                           00000002
TXB0D63                           00000003
TXB0D64                           00000004
TXB0D65                           00000005
TXB0D66                           00000006
TXB0D67                           00000007
TXB0D7                            00000F4D
TXB0D70                           00000000
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 150


SYMBOL TABLE
  LABEL                             VALUE 

TXB0D71                           00000001
TXB0D72                           00000002
TXB0D73                           00000003
TXB0D74                           00000004
TXB0D75                           00000005
TXB0D76                           00000006
TXB0D77                           00000007
TXB0DLC                           00000F45
TXB0EIDH                          00000F43
TXB0EIDL                          00000F44
TXB0IE                            00000002
TXB0IF                            00000002
TXB0IP                            00000002
TXB0SIDH                          00000F41
TXB0SIDL                          00000F42
TXB1CON                           00000F30
TXB1D0                            00000F36
TXB1D00                           00000000
TXB1D01                           00000001
TXB1D02                           00000002
TXB1D03                           00000003
TXB1D04                           00000004
TXB1D05                           00000005
TXB1D06                           00000006
TXB1D07                           00000007
TXB1D1                            00000F37
TXB1D10                           00000000
TXB1D11                           00000001
TXB1D12                           00000002
TXB1D13                           00000003
TXB1D14                           00000004
TXB1D15                           00000005
TXB1D16                           00000006
TXB1D17                           00000007
TXB1D2                            00000F38
TXB1D20                           00000000
TXB1D21                           00000001
TXB1D22                           00000002
TXB1D23                           00000003
TXB1D24                           00000004
TXB1D25                           00000005
TXB1D26                           00000006
TXB1D27                           00000007
TXB1D3                            00000F39
TXB1D30                           00000000
TXB1D31                           00000001
TXB1D32                           00000002
TXB1D33                           00000003
TXB1D34                           00000004
TXB1D35                           00000005
TXB1D36                           00000006
TXB1D37                           00000007
TXB1D4                            00000F3A
TXB1D40                           00000000
TXB1D41                           00000001
TXB1D42                           00000002
TXB1D43                           00000003
TXB1D44                           00000004
TXB1D45                           00000005
TXB1D46                           00000006
TXB1D47                           00000007
TXB1D5                            00000F3B
TXB1D50                           00000000
TXB1D51                           00000001
TXB1D52                           00000002
TXB1D53                           00000003
TXB1D54                           00000004
TXB1D55                           00000005
TXB1D56                           00000006
TXB1D57                           00000007
TXB1D6                            00000F3C
TXB1D60                           00000000
TXB1D61                           00000001
TXB1D62                           00000002
TXB1D63                           00000003
TXB1D64                           00000004
TXB1D65                           00000005
TXB1D66                           00000006
TXB1D67                           00000007
TXB1D7                            00000F3D
TXB1D70                           00000000
TXB1D71                           00000001
TXB1D72                           00000002
TXB1D73                           00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 151


SYMBOL TABLE
  LABEL                             VALUE 

TXB1D74                           00000004
TXB1D75                           00000005
TXB1D76                           00000006
TXB1D77                           00000007
TXB1DLC                           00000F35
TXB1EIDH                          00000F33
TXB1EIDL                          00000F34
TXB1IE                            00000003
TXB1IF                            00000003
TXB1IP                            00000003
TXB1SIDH                          00000F31
TXB1SIDL                          00000F32
TXB2CON                           00000F20
TXB2D0                            00000F26
TXB2D00                           00000000
TXB2D01                           00000001
TXB2D02                           00000002
TXB2D03                           00000003
TXB2D04                           00000004
TXB2D05                           00000005
TXB2D06                           00000006
TXB2D07                           00000007
TXB2D1                            00000F27
TXB2D10                           00000000
TXB2D11                           00000001
TXB2D12                           00000002
TXB2D13                           00000003
TXB2D14                           00000004
TXB2D15                           00000005
TXB2D16                           00000006
TXB2D17                           00000007
TXB2D2                            00000F28
TXB2D20                           00000000
TXB2D21                           00000001
TXB2D22                           00000002
TXB2D23                           00000003
TXB2D24                           00000004
TXB2D25                           00000005
TXB2D26                           00000006
TXB2D27                           00000007
TXB2D3                            00000F29
TXB2D30                           00000000
TXB2D31                           00000001
TXB2D32                           00000002
TXB2D33                           00000003
TXB2D34                           00000004
TXB2D35                           00000005
TXB2D36                           00000006
TXB2D37                           00000007
TXB2D4                            00000F2A
TXB2D40                           00000000
TXB2D41                           00000001
TXB2D42                           00000002
TXB2D43                           00000003
TXB2D44                           00000004
TXB2D45                           00000005
TXB2D46                           00000006
TXB2D47                           00000007
TXB2D5                            00000F2B
TXB2D50                           00000000
TXB2D51                           00000001
TXB2D52                           00000002
TXB2D53                           00000003
TXB2D54                           00000004
TXB2D55                           00000005
TXB2D56                           00000006
TXB2D57                           00000007
TXB2D6                            00000F2C
TXB2D60                           00000000
TXB2D61                           00000001
TXB2D62                           00000002
TXB2D63                           00000003
TXB2D64                           00000004
TXB2D65                           00000005
TXB2D66                           00000006
TXB2D67                           00000007
TXB2D7                            00000F2D
TXB2D70                           00000000
TXB2D71                           00000001
TXB2D72                           00000002
TXB2D73                           00000003
TXB2D74                           00000004
TXB2D75                           00000005
TXB2D76                           00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 152


SYMBOL TABLE
  LABEL                             VALUE 

TXB2D77                           00000007
TXB2DLC                           00000F25
TXB2EIDH                          00000F23
TXB2EIDL                          00000F24
TXB2IE                            00000004
TXB2IF                            00000004
TXB2IP                            00000004
TXB2SIDH                          00000F21
TXB2SIDL                          00000F22
TXBIE                             00000DFC
TXBIF                             00000007
TXBIFBXB2CON                      00000007
TXBIFTXB1CON                      00000007
TXBIP                             00000004
TXBO                              00000005
TXBP                              00000004
TXBnIE                            00000004
TXBnIF                            00000004
TXBnIP                            00000004
TXCKP                             00000004
TXDATA_FULL                       00000002
TXDATA_QUEUE                      00000000
TXEN                              00000005
TXERR                             00000004
TXERRCNT                          00000F76
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXLARB                            00000005
TXPRI0                            00000000
TXPRI1                            00000001
TXREG                             00000FAD
TXREQ                             00000003
TXRTR                             00000006
TXSTA                             00000FAC
TXWARN                            00000002
UA                                00000001
UPDATE_MINIMUM_LEVEL              000016AE
UPDATE_MIN_DIMMED_0               000016BA
UPDATE_MIN_DIMMED_1               00001700
UPDATE_MIN_DIMMED_10              00001976
UPDATE_MIN_DIMMED_11              000019BC
UPDATE_MIN_DIMMED_12              00001A02
UPDATE_MIN_DIMMED_13              00001A48
UPDATE_MIN_DIMMED_14              00001A8E
UPDATE_MIN_DIMMED_15              00001AD4
UPDATE_MIN_DIMMED_16              00001B1A
UPDATE_MIN_DIMMED_17              00001B60
UPDATE_MIN_DIMMED_18              00001BA6
UPDATE_MIN_DIMMED_19              00001BEC
UPDATE_MIN_DIMMED_2               00001746
UPDATE_MIN_DIMMED_3               0000178C
UPDATE_MIN_DIMMED_4               000017D2
UPDATE_MIN_DIMMED_5               00001818
UPDATE_MIN_DIMMED_6               0000185E
UPDATE_MIN_DIMMED_7               000018A4
UPDATE_MIN_DIMMED_8               000018EA
UPDATE_MIN_DIMMED_9               00001930
UPDATE_MIN_SKIP_0                 000016BC
UPDATE_MIN_SKIP_1                 00001702
UPDATE_MIN_SKIP_10                00001978
UPDATE_MIN_SKIP_11                000019BE
UPDATE_MIN_SKIP_12                00001A04
UPDATE_MIN_SKIP_13                00001A4A
UPDATE_MIN_SKIP_14                00001A90
UPDATE_MIN_SKIP_15                00001AD6
UPDATE_MIN_SKIP_16                00001B1C
UPDATE_MIN_SKIP_17                00001B62
UPDATE_MIN_SKIP_18                00001BA8
UPDATE_MIN_SKIP_19                00001BEE
UPDATE_MIN_SKIP_2                 00001748
UPDATE_MIN_SKIP_3                 0000178E
UPDATE_MIN_SKIP_4                 000017D4
UPDATE_MIN_SKIP_5                 0000181A
UPDATE_MIN_SKIP_6                 00001860
UPDATE_MIN_SKIP_7                 000018A6
UPDATE_MIN_SKIP_8                 000018EC
UPDATE_MIN_SKIP_9                 00001932
UPDATE_SSR_OUTPUTS                00001628
UPDATE_SSR_SKIP_0                 00001638
UPDATE_SSR_SKIP_1                 0000163E
UPDATE_SSR_SKIP_10                00001674
UPDATE_SSR_SKIP_11                0000167A
UPDATE_SSR_SKIP_12                00001680
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 153


SYMBOL TABLE
  LABEL                             VALUE 

UPDATE_SSR_SKIP_13                00001686
UPDATE_SSR_SKIP_14                0000168C
UPDATE_SSR_SKIP_15                00001692
UPDATE_SSR_SKIP_16                00001698
UPDATE_SSR_SKIP_17                0000169E
UPDATE_SSR_SKIP_18                000016A4
UPDATE_SSR_SKIP_19                000016AA
UPDATE_SSR_SKIP_2                 00001644
UPDATE_SSR_SKIP_3                 0000164A
UPDATE_SSR_SKIP_4                 00001650
UPDATE_SSR_SKIP_5                 00001656
UPDATE_SSR_SKIP_6                 0000165C
UPDATE_SSR_SKIP_7                 00001662
UPDATE_SSR_SKIP_8                 00001668
UPDATE_SSR_SKIP_9                 0000166E
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VREFM                             00000002
VREFP                             00000003
W                                 00000000
WAIT_FOR_SENTINEL                 
WAKDIS                            00000007
WAKFIL                            00000006
WAKIE                             00000006
WAKIF                             00000006
WAKIP                             00000006
WATCH_BREAK                       0000083E
WCOL                              00000007
WDTCON                            00000FD1
WIN0                              00000001
WIN0_FP1                          00000001
WIN1                              00000002
WIN1_FP2                          00000002
WIN2                              00000003
WIN2_FP3                          00000003
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_EEPROM_DATA                 
WRITE_EEPROM_DATA_INC             
WRITE_EEPROM_DATA_W               
WRITE_EEPROM_DATA_W_INC           
WRITE_EEPROM_LOOP0                000002D2
WRITE_EEPROM_LOOP1                00000C22
WRITE_EEPROM_LOOP2                00000C3C
WRITE_EEPROM_LOOP3                00000C9A
WRITE_EEPROM_LOOP4                00000D34
WRITE_EEPROM_LOOP5                00000D54
WRITE_EEPROM_LOOP6                00000DBA
WUE                               00000001
X                                 00000014
XLATE_SSR_ID                      00001614
YCF_RAMP_CYCLE                    00000007
YY_BUFFER                         00000500
YY_BUF_IDX                        00000010
YY_BUF_LEN                        000000C8
YY_CMD_FLAGS                      0000000C
YY_COMMAND                        0000000B
YY_DATA                           0000000D
YY_LOOKAHEAD_MAX                  0000000E
YY_LOOK_FOR                       0000000F
YY_NEXT_STATE                     00000011
YY_STATE                          0000000A
YY_YY                             00000012
Z                                 00000002
_BBSIZ_1024_4L                    000000CF
_BBSIZ_2048_4L                    000000DF
_BBSIZ_4096_4L                    000000EF
_BOREN_BOACTIVE_2L                000000FD
_BOREN_BOHW_2L                    000000FF
_BOREN_OFF_2L                     000000F9
_BOREN_SBORENCTRL_2L              000000FB
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 154


SYMBOL TABLE
  LABEL                             VALUE 

_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CP4_OFF_5L                       000000FF
_CP4_ON_5L                        000000EF
_CP5_OFF_5L                       000000FF
_CP5_ON_5L                        000000DF
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTR4_OFF_7L                     000000FF
_EBTR4_ON_7L                      000000EF
_EBTR5_OFF_7L                     000000FF
_EBTR5_ON_7L                      000000DF
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MAIN_EEPROM_TBL                  00014000
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO_1H                      000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_IRCIO67_1H                   000000F8
_OSC_IRCIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO_1H                      000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_SYSTEM_MFG_DATA                  00016FF0
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-8-2014  23:49:39         PAGE 155


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRT4_OFF_6L                      000000FF
_WRT4_ON_6L                       000000EF
_WRT5_OFF_6L                      000000FF
_WRT5_ON_6L                       000000DF
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F4685                         00000001

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

