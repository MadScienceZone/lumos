MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; OSCCON:SCS=00;HS;
                      00002 ; vim:set syntax=pic ts=8:
                      00003 ;
                      00004                 LIST N=86
                      00005 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00006 ;@@                                                                         @@
                      00007 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00008 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.1   @@ 
                      00009 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00010 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00011 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00012 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00013 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00014 ;@@                                                                         @@
                      00015 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00016 ;
                      00017 ; ************                                                           /\
                      00018 ; * WARNING! *    EXPERIMENTAL DESIGN FOR EDUCATIONAL PURPOSES          /  \
                      00019 ; * WARNING! *                USE AT YOUR OWN RISK!                    / !  \
                      00020 ; ************                                                        /______\
                      00021 ; 
                      00022 ; PLEASE READ AND BE SURE YOU UNDERSTAND THE FOLLOWING SAFETY WARNINGS:
                      00023 ;
                      00024 ; THIS FIRMWARE AND THE ACCOMPANYING HARDWARE AND CONTROLLING SOFTWARE ARE
                      00025 ; EXPERIMENTAL "HOBBYIST" DESIGNS AND ARE NOT INTENDED FOR GENERAL CONSUMER USE
                      00026 ; OR FOR ANY APPLICATION WHERE THERE IS ANY POSSIBILITY OF RISK OF INJURY,
                      00027 ; PROPERTY DAMAGE, OR ANY OTHER SITUATION WHERE ANY FAILURE OF THE FIRMWARE,
                      00028 ; SOFTWARE AND/OR HARDWARE COULD RESULT IN HARM TO ANYONE OR ANYTHING.  
                      00029 ;
                      00030 ; THIS FIRMWARE, SOFTWARE, AND/OR HARDWARE ARE NOT INTENDED NOR RECOMMENDED 
                      00031 ; FOR APPLICATIONS INVOLVING LIFE SUPPORT OR SAFETY-CRITICAL SYSTEMS, RUNNING 
                      00032 ; FIREWORKS/PYROTECHNIC DISPLAYS, ETC.  
                      00033 ;
                      00034 ; BY OBTAINING AND USING THIS FIRMWARE, AND/OR ACCOMPANYING HARDWARE AND/OR 
                      00035 ; CONTROLLING SOFTWARE, YOU AGREE TO THESE CONDITIONS AND THAT TO THE FULLEST 
                      00036 ; EXTENT OF APPLICABLE LAW, THE ABOVE-LISTED ITEMS AND ALL ACCOMPANYING 
                      00037 ; DOCUMENTATION AND OTHER MATERIALS ARE PROVIDED TO YOU AS-IS, WITHOUT WARRANTY 
                      00038 ; OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
                      00039 ; WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE.  YOU 
                      00040 ; FURTHER AGREE TO DEFEND, INDEMNIFY, AND HOLD BLAMELESS, THE AUTHOR, STEVEN 
                      00041 ; L. Willoughby AND ANY OF HIS AGENTS AND ASSOCIATES ASSISTING WITH THIS WORK, 
                      00042 ; FROM ANY DAMAGES DIRECT OR INCIDENTAL ARISING FROM THE USE OF, OR INABILITY 
                      00043 ; TO USE, THE ABOVE-LISTED PRODUCTS.
                      00044 ; 
                      00045 ;
                      00046 ; Copyright (c) 2012, 2013, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00047 ; All Rights Reserved.  Released under the terms and conditions of the 
                      00048 ; Open Software License, version 3.0.
                      00049 ;
                      00050 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00051 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00052 ;
                      00053 ; -*- -*- -* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00054 ;
                      00055 ; Main implementation module.
                      00056 ;
                      00057 #include "lumos_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  
                      00018 ; Released under the terms and conditions of the Open Software
                      00019 ; License, version 3.0.
                      00020 ;
                      00021 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00022 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00023 ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
                      00028 ;
                      00029 ; 
                      00030 
                      00031 ;==============================================================================
                      00032 ; CONFIGURATION OPTIONS
                      00033 ;==============================================================================
                      00034 #ifndef LUMOS_CONFIG_INC
                      00035 #define LUMOS_CONFIG_INC
                      00036 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00037 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00038 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00039 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00040 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00041 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00042 ;
                      00043 ; Un-comment one of these to select board type for this ROM image:
                      00044 ;
                      00045 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00046 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00047 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00048 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00049 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00050 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00051 ;
                      00052 ;
                      00053 ;
                      00054 #define LUMOS_ZC                0x55
                      00055 #define LUMOS_INTERNAL          0x58
                      00056 
                      00057  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00058   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00059  ELSE
                      00060   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00061    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00062   ELSE
                      00063    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, QSCC, QSRC, or STANDALONE"
                      00064   ENDIF
                      00065  ENDIF
                      00066  
                      00067  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00068   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00069  ENDIF
                      00070 
                      00071 
                      00072  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00073   #define ROLE_MASTER       (1)
                      00074   #define ROLE_SLAVE        (0)
                      00075   #define ROLE_STANDALONE   (0)
                      00076   #define NUM_CHANNELS      (.48)
                      00077   #define QSCC_PORT         (0)
                      00078  ELSE
                      00079   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00080    #define ROLE_MASTER      (0)
                      00081    #define ROLE_SLAVE       (1)
                      00082    #define ROLE_STANDALONE  (0)
                      00083    #define NUM_CHANNELS     (.48)
                      00084    #define QSCC_PORT        (0)
                      00085   ELSE
                      00086    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00087     #define ROLE_MASTER     (0)
                      00088     #define ROLE_SLAVE      (0)
                      00089     #define ROLE_STANDALONE (1)
                      00090     #define NUM_CHANNELS    (.24)
                      00091     #define QSCC_PORT       (0)
                      00092    ELSE
                      00093     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00094      #define ROLE_MASTER     (0)
                      00095      #define ROLE_SLAVE      (0)
                      00096      #define ROLE_STANDALONE (1)
                      00097      #define NUM_CHANNELS    (.4)
                      00098      #define QSCC_PORT       (0)
                      00099     ELSE
                      00100      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00101       #define ROLE_MASTER     (0)
                      00102       #define ROLE_SLAVE      (0)
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00103       #define ROLE_STANDALONE (1)
                      00104       #define NUM_CHANNELS    (.14)
                      00105       #define QSCC_PORT       (1)
                      00106      ELSE
                      00107       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00108        #define ROLE_MASTER     (0)
                      00109        #define ROLE_SLAVE      (0)
                      00110        #define ROLE_STANDALONE (1)
                      00111        #define NUM_CHANNELS    (.20)
                      00112        #define QSCC_PORT       (1)
                      00113       ELSE
                      00114        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00115       ENDIF
                      00116      ENDIF
                      00117     ENDIF
                      00118    ENDIF
                      00119   ENDIF
                      00120  ENDIF
                      00121 
                      00122 #define LUMOS_ARCH_4685  (0x4685)
                      00123 #define LUMOS_ARCH_14K50 (0x1450)
                      00124 
                      00125  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00126   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00127   PROCESSOR 18F4685
                      00128   #include <p18f4685.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Feb 01 2016
                      00005 ;  MPASM PIC18F4685 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2016 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      05131         LIST
                      00129  ELSE
                      00130   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00131    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00132    PROCESSOR 18F14K50
                      00133    #include <p18f14k50.inc>
                      00134   ELSE
                      00135    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00136   ENDIF
                      00137  ENDIF
                      00138 
                      00139 ; set DMX_ENABLED to 1 to include the experimental DMX-handling code.
                      00140 #define DMX_ENABLED 0
                      00141 ;
                      00142 ; The following public symbols can be used after this file is
                      00143 ; included (and this file should be included everywhere before
                      00144 ; anything else is included, and in lieu of PROCESSOR directives
                      00145 ; or #includes which bring in processor-specific bits--this file
                      00146 ; will do that for you):
                      00147 ;
                      00148 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00149 ;                   of the target chip will be and what its particular 
                      00150 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00151 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00152 ;
                      00153 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00154 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00155 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00156 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00157 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00158 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00159 ;
                      00160 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00161 ;                   slice timer sync pulse is coming from:
                      00162 ;
                      00163 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00164 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00165 ;
                      00166 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00167 ;                   is targeted, strictly to determine chip-specific details,
                      00168 ;                   not how Lumos is using it.
                      00169 ;
                      00170 ;       "14K50"         - The PIC18F14K50
                      00171 ;       "4685"          - The PIC18F4685
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00172 ;
                      00173 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00174 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00175 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00176 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00177 #endif
                      00058         RADIX   DEC
                      00059 #include "lumos_init.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All Rights
                      00017 ; Reserved.  Released under the terms and conditions of the Open Software
                      00018 ; License, version 3.0.
                      00019 ;
                      00020 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00021 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00022 ;
                      00023 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00024 ;
                      00025 ; Device initialization code.  See lumos_main.asm for hardware implementation
                      00026 ; details.
                      00027 ;
                      00028 #include "lumos_config.inc"
                      00178 ; vim:set syntax=pic ts=8:
                      00179 ;
                      00180                 LIST N=86
                      00181 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00182 ;@@                                                                         @@
                      00183 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00184 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00185 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00186 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00187 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00188 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00189 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00190 ;@@                                                                         @@
                      00191 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00192 ;
                      00193 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00194 ; All Rights Reserved.  
                      00195 ; Released under the terms and conditions of the Open Software
                      00196 ; License, version 3.0.
                      00197 ;
                      00198 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00199 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00200 ;
                      00201 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00202 ;
                      00203 ; Configuration options.  Set these as desired and then re-assemble the
                      00204 ; code to produce the desired version of the ROM.
                      00205 ;
                      00206 ; 
                      00207 
                      00208 ;==============================================================================
                      00209 ; CONFIGURATION OPTIONS
                      00210 ;==============================================================================
                      00211 #ifndef LUMOS_CONFIG_INC
                      00212 #define LUMOS_CONFIG_INC
                      00213 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00214 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00215 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00216 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00217 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00218 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00219 ;
                      00220 ; Un-comment one of these to select board type for this ROM image:
                      00221 ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00222 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00223 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00224 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00225 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00226 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00227 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00228 ;
                      00229 ;
                      00230 ;
                      00231 #define LUMOS_ZC                0x55
                      00232 #define LUMOS_INTERNAL          0x58
                      00233 
                      00234  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00235   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00236  ELSE
                      00237   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00238    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00239   ELSE
                      00240    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, QSCC, QSRC, or STANDALONE"
                      00241   ENDIF
                      00242  ENDIF
                      00243  
                      00244  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00245   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00246  ENDIF
                      00247 
                      00248 
                      00249  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00250   #define ROLE_MASTER       (1)
                      00251   #define ROLE_SLAVE        (0)
                      00252   #define ROLE_STANDALONE   (0)
                      00253   #define NUM_CHANNELS      (.48)
                      00254   #define QSCC_PORT         (0)
                      00255  ELSE
                      00256   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00257    #define ROLE_MASTER      (0)
                      00258    #define ROLE_SLAVE       (1)
                      00259    #define ROLE_STANDALONE  (0)
                      00260    #define NUM_CHANNELS     (.48)
                      00261    #define QSCC_PORT        (0)
                      00262   ELSE
                      00263    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00264     #define ROLE_MASTER     (0)
                      00265     #define ROLE_SLAVE      (0)
                      00266     #define ROLE_STANDALONE (1)
                      00267     #define NUM_CHANNELS    (.24)
                      00268     #define QSCC_PORT       (0)
                      00269    ELSE
                      00270     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00271      #define ROLE_MASTER     (0)
                      00272      #define ROLE_SLAVE      (0)
                      00273      #define ROLE_STANDALONE (1)
                      00274      #define NUM_CHANNELS    (.4)
                      00275      #define QSCC_PORT       (0)
                      00276     ELSE
                      00277      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00278       #define ROLE_MASTER     (0)
                      00279       #define ROLE_SLAVE      (0)
                      00280       #define ROLE_STANDALONE (1)
                      00281       #define NUM_CHANNELS    (.14)
                      00282       #define QSCC_PORT       (1)
                      00283      ELSE
                      00284       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00285        #define ROLE_MASTER     (0)
                      00286        #define ROLE_SLAVE      (0)
                      00287        #define ROLE_STANDALONE (1)
                      00288        #define NUM_CHANNELS    (.20)
                      00289        #define QSCC_PORT       (1)
                      00290       ELSE
                      00291        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00292       ENDIF
                      00293      ENDIF
                      00294     ENDIF
                      00295    ENDIF
                      00296   ENDIF
                      00297  ENDIF
                      00298 
                      00299 #define LUMOS_ARCH_4685  (0x4685)
                      00300 #define LUMOS_ARCH_14K50 (0x1450)
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00301 
                      00302  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00303   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00304   PROCESSOR 18F4685
                      00305   #include <p18f4685.inc>
                      00306  ELSE
                      00307   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00308    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00309    PROCESSOR 18F14K50
                      00310    #include <p18f14k50.inc>
                      00311   ELSE
                      00312    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00313   ENDIF
                      00314  ENDIF
                      00315 
                      00316 ; set DMX_ENABLED to 1 to include the experimental DMX-handling code.
                      00317 #define DMX_ENABLED 0
                      00318 ;
                      00319 ; The following public symbols can be used after this file is
                      00320 ; included (and this file should be included everywhere before
                      00321 ; anything else is included, and in lieu of PROCESSOR directives
                      00322 ; or #includes which bring in processor-specific bits--this file
                      00323 ; will do that for you):
                      00324 ;
                      00325 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00326 ;                   of the target chip will be and what its particular 
                      00327 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00328 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00329 ;
                      00330 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00331 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00332 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00333 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00334 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00335 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00336 ;
                      00337 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00338 ;                   slice timer sync pulse is coming from:
                      00339 ;
                      00340 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00341 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00342 ;
                      00343 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00344 ;                   is targeted, strictly to determine chip-specific details,
                      00345 ;                   not how Lumos is using it.
                      00346 ;
                      00347 ;       "14K50"         - The PIC18F14K50
                      00348 ;       "4685"          - The PIC18F4685
                      00349 ;
                      00350 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00351 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00352 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00353 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00354 #endif
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; PUBLIC ENTRY POINTS
                      00032 ;==============================================================================
  0000                00033         EXTERN  LUMOS_INIT      ; Call this to set up the hardware before use.
                      00034 ;
                      00035 ;
                      00060 #include "serial-io.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST N=86
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; General serial console I/O handling
                      00022 ;
                      00023 #include "serial-io-bits.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST N=86
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; serial io (SIO) module bit definitions, included by caller and the module
                      00022 ;
                      00023 #include "serial-io-user.inc"
                      00001 ;
                      00002 ; To use the serial I/O module, you need to edit this
                      00003 ; include file to suit your application.
                      00004 ;
                      00005 #include "lumos_config.inc"
                      00355 ; vim:set syntax=pic ts=8:
                      00356 ;
                      00357                 LIST N=86
                      00358 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00359 ;@@                                                                         @@
                      00360 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00361 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00362 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00363 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00364 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00365 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00366 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00367 ;@@                                                                         @@
                      00368 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00369 ;
                      00370 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00371 ; All Rights Reserved.  
                      00372 ; Released under the terms and conditions of the Open Software
                      00373 ; License, version 3.0.
                      00374 ;
                      00375 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00376 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00377 ;
                      00378 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00379 ;
                      00380 ; Configuration options.  Set these as desired and then re-assemble the
                      00381 ; code to produce the desired version of the ROM.
                      00382 ;
                      00383 ; 
                      00384 
                      00385 ;==============================================================================
                      00386 ; CONFIGURATION OPTIONS
                      00387 ;==============================================================================
                      00388 #ifndef LUMOS_CONFIG_INC
                      00389 #define LUMOS_CONFIG_INC
                      00390 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00391 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00392 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00393 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00394 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00395 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00396 ;
                      00397 ; Un-comment one of these to select board type for this ROM image:
                      00398 ;
                      00399 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00400 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00401 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00402 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00403 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00404 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00405 ;
                      00406 ;
                      00407 ;
                      00408 #define LUMOS_ZC                0x55
                      00409 #define LUMOS_INTERNAL          0x58
                      00410 
                      00411  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00412   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00413  ELSE
                      00414   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00415    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00416   ELSE
                      00417    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, QSCC, QSRC, or STANDALONE"
                      00418   ENDIF
                      00419  ENDIF
                      00420  
                      00421  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00422   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00423  ENDIF
                      00424 
                      00425 
                      00426  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00427   #define ROLE_MASTER       (1)
                      00428   #define ROLE_SLAVE        (0)
                      00429   #define ROLE_STANDALONE   (0)
                      00430   #define NUM_CHANNELS      (.48)
                      00431   #define QSCC_PORT         (0)
                      00432  ELSE
                      00433   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00434    #define ROLE_MASTER      (0)
                      00435    #define ROLE_SLAVE       (1)
                      00436    #define ROLE_STANDALONE  (0)
                      00437    #define NUM_CHANNELS     (.48)
                      00438    #define QSCC_PORT        (0)
                      00439   ELSE
                      00440    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00441     #define ROLE_MASTER     (0)
                      00442     #define ROLE_SLAVE      (0)
                      00443     #define ROLE_STANDALONE (1)
                      00444     #define NUM_CHANNELS    (.24)
                      00445     #define QSCC_PORT       (0)
                      00446    ELSE
                      00447     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00448      #define ROLE_MASTER     (0)
                      00449      #define ROLE_SLAVE      (0)
                      00450      #define ROLE_STANDALONE (1)
                      00451      #define NUM_CHANNELS    (.4)
                      00452      #define QSCC_PORT       (0)
                      00453     ELSE
                      00454      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00455       #define ROLE_MASTER     (0)
                      00456       #define ROLE_SLAVE      (0)
                      00457       #define ROLE_STANDALONE (1)
                      00458       #define NUM_CHANNELS    (.14)
                      00459       #define QSCC_PORT       (1)
                      00460      ELSE
                      00461       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00462        #define ROLE_MASTER     (0)
                      00463        #define ROLE_SLAVE      (0)
                      00464        #define ROLE_STANDALONE (1)
                      00465        #define NUM_CHANNELS    (.20)
                      00466        #define QSCC_PORT       (1)
                      00467       ELSE
                      00468        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00469       ENDIF
                      00470      ENDIF
                      00471     ENDIF
                      00472    ENDIF
                      00473   ENDIF
                      00474  ENDIF
                      00475 
                      00476 #define LUMOS_ARCH_4685  (0x4685)
                      00477 #define LUMOS_ARCH_14K50 (0x1450)
                      00478 
                      00479  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00480   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00481   PROCESSOR 18F4685
                      00482   #include <p18f4685.inc>
                      00483  ELSE
                      00484   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00485    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00486    PROCESSOR 18F14K50
                      00487    #include <p18f14k50.inc>
                      00488   ELSE
                      00489    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00490   ENDIF
                      00491  ENDIF
                      00492 
                      00493 ; set DMX_ENABLED to 1 to include the experimental DMX-handling code.
                      00494 #define DMX_ENABLED 0
                      00495 ;
                      00496 ; The following public symbols can be used after this file is
                      00497 ; included (and this file should be included everywhere before
                      00498 ; anything else is included, and in lieu of PROCESSOR directives
                      00499 ; or #includes which bring in processor-specific bits--this file
                      00500 ; will do that for you):
                      00501 ;
                      00502 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00503 ;                   of the target chip will be and what its particular 
                      00504 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00505 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00506 ;
                      00507 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00508 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00509 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00510 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00511 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00512 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00513 ;
                      00514 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00515 ;                   slice timer sync pulse is coming from:
                      00516 ;
                      00517 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00518 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00519 ;
                      00520 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00521 ;                   is targeted, strictly to determine chip-specific details,
                      00522 ;                   not how Lumos is using it.
                      00523 ;
                      00524 ;       "14K50"         - The PIC18F14K50
                      00525 ;       "4685"          - The PIC18F4685
                      00526 ;
                      00527 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00528 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00529 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00530 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00531 #endif
                      00006 
                      00007                         IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000100            00008 SIO_TX_BUFFER_START      EQU    0x100   ; Starting address of 256-byte Tx buffer*
  00000200            00009 SIO_RX_BUFFER_START      EQU    0x200   ; Starting address of 256-byte Rx buffer*
  00000300            00010 SIO_DATA_START           EQU    0x300   ; Starting address for SIO module variable storage
  00015000            00011 SIO_TABLE_START          EQU    0x15000 ; Starting ROM address for SIO module tables*
                      00012                         ELSE
                      00013                          IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00014 SIO_TX_BUFFER_START       EQU   0x100   ; Starting address of 256-byte Tx buffer*
                      00015 SIO_RX_BUFFER_START       EQU   0x200   ; Starting address of 256-byte Rx buffer*
                      00016 SIO_DATA_START            EQU   0x0E4   ; Starting address for SIO module variable storage
                      00017 SIO_TABLE_START           EQU   0x2F00  ; Starting ROM address for SIO module tables*
                      00018                          ELSE
                      00019                           ERROR "Invalid architecture switch in serial-io-user.inc"
                      00020                          ENDIF
                      00021                         ENDIF
                      00022 ;
                      00023 ; * must be aligned to the start of a 256-byte bank.
                      00024 ;
                      00024 ;       
                      00025 ;                    bit 7      6      5      4      3      2      1      0
                      00026 ;                     _______________________________________________________
                      00027 ; +$00 SIO_STATUS    |      |      |SIO_  |SIO_  |RXDATA|TXDATA|RXDATA|TXDATA|
                      00028 ;                    |      |      | FERR | ORUN |_FULL |_FULL |_QUEUE|_QUEUE|
                      00029 ;                    |______|______|______|______|______|______|______|______|
                      00030 ;
  00000000            00031 TXDATA_QUEUE    EQU     0       ; Tx data waiting in buffer now to be sent
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            00032 RXDATA_QUEUE    EQU     1       ; Rx data waiting in buffer to be retrieved
  00000002            00033 TXDATA_FULL     EQU     2       ; Tx buffer full
  00000003            00034 RXDATA_FULL     EQU     3       ; Rx buffer full
  00000004            00035 SIO_ORUN        EQU     4       ; I/O Error: incoming data overrun  (caller clears)
  00000005            00036 SIO_FERR        EQU     5       ; I/O Error: break/framing error received  (caller clears)
                      00037 ;
                      00038 ; Baud rate settings
                      00039 ;
  00000000            00040 SIO_300         EQU     0x00
  00000001            00041 SIO_600         EQU     0x01
  00000002            00042 SIO_1200        EQU     0x02
  00000003            00043 SIO_2400        EQU     0x03
  00000004            00044 SIO_4800        EQU     0x04
  00000005            00045 SIO_9600        EQU     0x05
  00000006            00046 SIO_19200       EQU     0x06
  00000007            00047 SIO_38400       EQU     0x07
  00000008            00048 SIO_57600       EQU     0x08
  00000009            00049 SIO_115200      EQU     0x09
  0000000A            00050 SIO_250000      EQU     0x0A
  0000000B            00051 SIO_500000      EQU     0x0B
  0000000C            00052 SIO_1000000     EQU     0x0C
  0000000D            00053 SIO_2000000     EQU     0x0D
  0000000E            00054 SIO_2500000     EQU     0x0E
  0000000F            00055 SIO_5000000     EQU     0x0F
  00000010            00056 SIO_10000000    EQU     0x10
  00000010            00057 SIO_MAX_IDX     EQU     0x10
                      00024 ; 
                      00025 ;==============================================================================
                      00026 ; PUBLIC ENTRY POINTS
                      00027 ;==============================================================================
                      00028 ;
  0000                00029         EXTERN  SIO_INIT        ; Call this to set up the module before use.
  0000                00030         EXTERN  SIO_RECV        ; Call from ISR when a byte is received.
  0000                00031         EXTERN  SIO_SEND        ; Call from ISR when clear to send next byte.
  0000                00032         EXTERN  SIO_ECHO        ; Print char in SIO_OUTPUT in printable form.**
  0000                00033         EXTERN  SIO_ECHO_W      ; Print char in WREG in printable form.* **
  0000                00034         EXTERN  SIO_WRITE       ; Print char in SIO_OUTPUT in raw form.
  0000                00035         EXTERN  SIO_WRITE_W     ; Print char in WREG in raw form.*
  0000                00036         EXTERN  SIO_PUTCHAR     ; Blocking form of SIO_WRITE.**
  0000                00037         EXTERN  SIO_PUTCHAR_W   ; Blocking form of SIO_WRITE_W.* **
  0000                00038         EXTERN  SIO_READ        ; Read a character to SIO_INPUT.
  0000                00039         EXTERN  SIO_READ_W      ; Read a character to SIO_INPUT and WREG.
  0000                00040         EXTERN  SIO_GETCHAR     ; Blocking form of SIO_READ.**
  0000                00041         EXTERN  SIO_GETCHAR_W   ; Blocking form of SIO_READ_W.**
  0000                00042         EXTERN  SIO_NEWLINE     ; Print a carriage return/line feed.**
  0000                00043         EXTERN  SIO_PRINT_HEX   ; Print value in SIO_OUTPUT as hex byte.**
  0000                00044         EXTERN  SIO_PRINT_HEX_W ; Print value in SIO_OUTPUT as hex byte.* **
  0000                00045         EXTERN  B32__BIN2BCD    ; B32__BIN[4] -> B32__BCD_ASC[5]; big-endian
  0000                00046         EXTERN  B32__BCD2ASCII  ; B32__BCD_ASC[5] -> B32__BCD_ASC[10]
  0000                00047         EXTERN  SIO_SET_BAUD_W  ; Set baud rate from code in W (See serial-io-bits.inc)
  0000                00048         EXTERN  SIO_FLUSH_INPUT ; Clear input buffer; discards any unread received data
  0000                00049         EXTERN  SIO_FLUSH_OUTPUT; Clear output buffer; discards any unsent data
                      00050 ;
                      00051 ; *Also overwrites SIO_OUTPUT or SIO_INPUT.
                      00052 ; **Blocks execution until device/buffer ready.
                      00053 ;
                      00054 ; The SIO_READ functions are non-blocking, in case you need non-blocking I/O,
                      00055 ; although a better approach would be to check SIO_STATUS<RXDATA_QUEUE> to see
                      00056 ; if there's data queued up waiting to be read before calling SIO_READ.
                      00057 ; Alternatively the SIO_GETCHAR functions always block to wait for data to be
                      00058 ; available.  The SIO_PUTCHAR, SIO_NEWLINE, and SIO_ECHO functions always block 
                      00059 ; until the characters can be successfully buffered to be transmitted.  A
                      00060 ; non-blocking write is avilable from SIO_WRITE.
                      00061 ;
                      00062 ; "printable form" means that control characters print as the two-character
                      00063 ; sequence "^x" (i.e., 0x00="^@", 0x01="^A", etc.); the escape character 0x1B
                      00064 ; prints as "$"; the delete character 0x7F prints as "^?"; and meta-characters
                      00065 ; (i.e., 0x80-0xFF) print as "M-" followed by what the character would have
                      00066 ; echoed as if the high bit were not sent (e.g., 0x80="M-^@", 0xD0="M-P").
                      00067 ;
                      00068 ; "raw form" send the 8-bit byte to the serial port with no translation at all.
                      00069 ;
                      00070 ; The READ functions are non-blocking; they will return 0 if no character is
                      00071 ; available (check SIO_STATUS<RXDATA_QUEUE> to see if data is ready to read).
                      00072 ;
                      00073 ; The GETCHAR functions are blocking; they will wait until they are able to write
                      00074 ; data before completing.
                      00075 ;
                      00076 ;==============================================================================
                      00077 ; PUBLIC DATA
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00078 ;==============================================================================
                      00079 ;
  0000                00080         EXTERN  SIO_STATUS      ; status register (see serial-io-bits.inc for bit values)
  0000                00081         EXTERN  SIO_INPUT       ; last byte read from serial port (output from module)
  0000                00082         EXTERN  SIO_OUTPUT      ; byte to write to serial port (input to module)
  0000                00083         EXTERN  B32__BIN        ; 4-byte big-endian input to B32__BIN2BCD
  0000                00084         EXTERN  B32__BCD_ASC    ; 5-byte output from B32__BIN2BCD and input/output to/from
                      00085                                 ; B32__BCD2ASCII.
                      00086 ;
                      00087 ; If writing data to the port and the buffer fills up, the printed characters
                      00088 ; will be ignored past the point where the buffer fills up, and the SIO_STATUS<TXDATA_FULL>
                      00089 ; flag will be set.
                      00090 ;
                      00091 ; If too much data arrives at the serial port before you read it out with this module's
                      00092 ; functions, the extra incoming bytes will be discarded, and the SIO_STATUS<RXDATA_FULL>
                      00093 ; flag will be set.
                      00094 ;
                      00095 ; Framing errors and buffer overruns (data received faster than the SIO_RECV function
                      00096 ; could handle them, usually because the SIO_RECV function isn't being called quickly
                      00097 ; enough) cause the SIO_STATUS<SIO_FERR> and SIO_STATUS<SIO_ORUN> bits to be set,
                      00098 ; respectively.
                      00099 ;
                      00100 ; It is the caller's responsibility to clear these flags.
                      00101 ;
                      00102 ; This module will automatically turn on/off the TXIE interrupt enable
                      00103 ; bit as needed to handle shipping out buffered data to the serial port.
                      00104 ; Just ensure that your ISR calls SIO_RECV when an RXIF interrupt is
                      00105 ; detected (you should clear RXIF when that's done), and you also call
                      00106 ; SIO_SEND when TXIF is detected (and clear that bit, too).
                      00107 ;
                      00061         IF QSCC_PORT
                      00062 #include "qscc_bits.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This defines the bits for bit-encoded flags, etc.
                      00027 ; 
                      00028 #ifndef QSCC_BITS_INC
                      00029 #define QSCC_BITS_INC
                      00030 
                      00031         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00032          ERROR "qscc_bits only used for QS*C systems"
                      00033         ENDIF
                      00034                                         ; QUIZSHOW_FLAGS
  00000002            00035 QS_FLAG_DOING120 EQU    2               ; -----1--      Doing "every 1/120 sec tasks" now
  00000001            00036 QS_FLAG_ON_120_S EQU    1               ; ------1-      Need to do "every 1/120 sec tasks" now
  00000000            00037 QS_FLAG_SCANNING EQU    0               ; -------1      Scanner running
                      00038 
                      00039                                         ; BTN_??_FLAGS
  00000004            00040 BTN_FLG_LCK_ACK EQU     4               ; ---1----      Button lock acknowledged already
  00000003            00041 BTN_FLG_ACTIVE  EQU     3               ; ----1---      Button being pressed now
  00000002            00042 BTN_FLG_LOCKED  EQU     2               ; -----1--      Button locked out
  00000001            00043 BTN_FLG_MASKED  EQU     1               ; ------1-      Button ignored
  00000000            00044 BTN_FLG_PRESSED EQU     0               ; -------1      Button pressed already
                      00045 
  00000C00            00046 QUIZSHOW_DATA   EQU     0xC00
                      00047 #endif
                      00063 #include "qscc_init.inc"
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Device initialization code.  See lumos_main.asm for hardware implementation
                      00027 ; details.  Most of the initialization will be done in the Lumos firmware.
                      00028 ;
                      00029 #include "quizshow_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
                      00028 ;
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; CONFIGURATION OPTIONS
                      00032 ;==============================================================================
                      00033 ;
                      00034 ; Note: set LUMOS_CHIP_TYPE to LUMOS_CHIP_QSCC or _QSRC in lumos_config.inc
                      00035 ;
                      00030 ; 
                      00031 ;==============================================================================
                      00032 ; PUBLIC ENTRY POINTS
                      00033 ;==============================================================================
  0000                00034         EXTERN  QSCC_INIT       ; Call this to set up the hardware before use.
  0000                00035         EXTERN  QSCC_START      ; Call this before starting the main event loop.
  0000                00036         EXTERN  QSCC_MAIN       ; Call this in each main loop iteration.
  0000                00037         EXTERN  QSCC_CMD5_START
  0000                00038         EXTERN  QS_STOP_SCANNER
                      00039 
                      00040 ;
                      00041 ;
  0000                00064          GLOBAL SSR_STATE
  0000                00065          GLOBAL S0_CMD0
  0000                00066          GLOBAL SSR_00_VALUE
  0000                00067          GLOBAL SSR_00_FLAGS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                00068          GLOBAL SSR_00_STEP
  0000                00069          GLOBAL SSR_00_SPEED
  0000                00070          GLOBAL SSR_00_COUNTER
  0000                00071          EXTERN QSCC_INIT
  0000                00072          EXTERN QUIZSHOW_LCKTM
                      00073         ELSE
                      00074 #include "flash_update.inc"
                      00075         ENDIF
                      00076 
                      00077 ; Works on Lumos 48-Channel controller boards 48CTL-3-1 with retrofit
                      00078 ; and 24SSR-DC-1.0.8 boards.
                      00079 ;
                      00080 ; N.B. THE BOARD SELECT BITS IN LUMOS_CONFIG.INC MUST BE SELECTED
                      00081 ; FOR THE TARGET CONFIGURATION!  EACH ROM IS DIFFERENT!
                      00082 ;
                      00083 ; Target Microcontroller is PIC18F4685, Q=40MHz (100nS instruction cycle)
                      00084 ; (Original was designed for PIC16F777 and PIC16F877A; you must upgrade
                      00085 ; the uC to a PIC18F4685 AND retrofit some parts on the old board as
                      00086 ; follows:
                      00087 ;    Replace X0 and X1 with 10 MHz crystals.
                      00088 ;    Interface off-board reset button to ground J5 and J6 pin 3 when pressed.
                      00089 ;    Interface off-board option button to ground J5 pin 5 when pressed.
                      00090 ;    Install a 10K pull-up resistor between J5 pin 5 and +5V.
                      00091 ;    (Optional) /PWRCTL output to P/S available on J5 pin 4.
                      00092 ;    Option button should only be attached to the master microcontroller.
                      00093 ;    Both need reset signals.
                      00094 ;
                      00095 ; Serial control (RS-232 or RS-485) at 19.2kbps by default.
                      00096 ; Configurable from 300 to 250000 baud.
                      00097 ;
                      00098 ;=============================================================================
                      00099 ; DIAGNOSTICS
                      00100 ;-----------------------------------------------------------------------------
                      00101 ;
                      00102 ; The front panel LEDs provide the following indications of status.  
                      00103 ;
                      00104 ; A  G  Y  R
                      00105 ; C  R  E  E
                      00106 ; T  N  L  D PHASE MEANING
                      00107 ; ---------- ----- -------
                      00108 ; .  .  .  . BOOT  Never started into boot sequence
                      00109 ; .  .  .  * BOOT  Halted during EEPROM setup
                      00110 ; .  .  *  * BOOT  Halted during EEPROM write operation
                      00111 ; .  .  *  . BOOT  Halted during EEPROM read / system init
                      00112 ; .  *  *  . BOOT  Halted during system initialization
                      00113 ; .  *  .  . BOOT  Initialized but main loop or timing system non-functional
                      00114 ;** ** ** ** RUN   Factory defaults restored (then reboots)
                      00115 ; . (*) .  . RUN   Normal operations
                      00116 ; . **  .  . RUN   Normal operations + privileged (config) mode enabled
                      00117 ; ! (*) X  X RUN   Received command for this unit
                      00118 ; X  X  !  X RUN   Master/Slave communications
                      00119 ; X  X  X  * RUN   Command error
                      00120 ; X  X  * ** RUN   Communications error (framing error)
                      00121 ; X  X ** ** RUN   Communications error (overrun error)
                      00122 ; X  X (*)** RUN   Communications error (buffer full error)
                      00123 ;** (*)**  . RUN   Internal error (exact error displayed on 2nd set of LEDs)*
                      00124 ; . () () () SLEEP Sleep Mode
                      00125 ; .  .  .  % HALT  System Halted normally
                      00126 ; ?  ?  ? ** HALT  Fatal error (exact error displayed on other LEDs)
                      00127 ;**  . ** ** HALT  Fatal error: reset/halt failure
                      00128 ;
                      00129 ; .=off  *=steady (*)=slowly fading on/off X=don't care
                      00130 ; ()=slow flash **=rapid flash !=blink/fade once (**)=rapid fade
                      00131 ; %=extra-slow flash
                      00132 ;
                      00133 ;
                      00134 ; *Internal error codes on 2nd LEDs (48-channel models only)
                      00135 ; A  G  Y  R
                      00136 ; C  R  E  E
                      00137 ; T  N  L  D MEANING
                      00138 ; ---------- -------
                      00139 ;-- **  .  . dispatch table overrun
                      00140 ;--  X  .  * input validator failure
                      00141 ;-- ** ** ** reset failure
                      00142 ;--  X  . ** device/hardware problem
                      00143 ;--  X  .(*) internal command error
                      00144 ;--  . **  . unknown/other error class
                      00145 ;-- 
                      00146 ;
                      00147 ; Error codes retrieved from query command
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00148 ; 01  Command decode error (dispatch overrun)
                      00149 ; 02  Input validator failed to deal with bad value (channel number range for SET_LVL)
                      00150 ; 03  Input validator failed to deal with bad value (channel number range for BULK_UPD)
                      00151 ; 04  Input validator failed to deal with bad value (BULK_UPD data block scan)
                      00152 ; 05  Command decode error (dispatch overrun in S6 final command execution)
                      00153 ; 06  Input validator failed to deal with bad value (channel number range for RAMP_LVL)
                      00154 ; 07  Command decode error (dispatch overrun in S9 internal command execution)
                      00155 ; 08  Command decode error (illegal state transition in S10 for IC_TXDAT/IC_TXSTA)
                      00156 ; 09  Command impossible to carry out on this hardware (chip without T/R tried to take control of bus)
                      00157 ; 0A  Illegal internal command sent from master chip (invalid packet in S11 IC_TXDAT/IC_TXSTA)
                      00158 ; 0B  Command decode error (illegal state transition in S11 for IC_TXDAT/IC_TXSTA)
                      00159 ; 0C  Command decode error (illegal state transition in S12 for IC_LED)
                      00160 ; 0D  Command decode error (illegal state transition in S13 for IC_LED)
                      00161 ; 0E  Command decode error (extended dispatch overrun)
                      00162 ; 0F  Illegal internal command sent from master chip (received raw QUERY packet)
                      00163 ; 10  Could not determine device type                                  _
                      00164 ; 11  Command impossible to carry out on this hardware (chip without T/R tried to release control of bus
                            )
                      00165 ; 12  Internal inter-CPU command executed on wrong class hardware
                      00166 ; 
                      00167 ; 20  Unrecognized command received or command arguments incorrect
                      00168 ; 21  Attempt to invoke privileged command from normal run mode
                      00169 ; 22  Command not yet implemented
                      00170 ; 23  Command received before previous one completed (previous command aborted)
                      00171 ; 70  CPU failed to reset with new configuration (execution bounds check)
                      00172 ; 71  CPU failed to halt when requested (execution bounds check)
                      00173 ;
                      00174 ; OPTION BUTTON:
                      00175 ; 
                      00176 ; Pres and hold the option button to enter field setup mode.  The lights will
                      00177 ; flash rapidly to signal this mode change.  Release the button and wait.  
                      00178 ; The lights will remain steady.  This enables the privileged 
                      00179 ; (configuration) command mode, allowing the Lumos unit to receive device 
                      00180 ; configuration commands from the host PC.
                      00181 ;
                      00182 ; Press the button again to enter self-test mode.  The LEDs will chase
                      00183 ; once to signal this mode.  In this mode, serial communication to the
                      00184 ; unit will be ignored.  Each output channel in turn will be turned on 
                      00185 ; for one second. The dimmer is NOT used, only fully on/fully off.  The
                      00186 ; LEDs on the top board will show the least-significant 4 bits of the
                      00187 ; output channel currently on.  If present, the bottom board's LEDs will
                      00188 ; show the most significant bits.
                      00189 ; 
                      00190 ; Pressing the button in this mode causes the cycle to pause on the current
                      00191 ; output channel until the button is pressed again to resume the cycle.
                      00192 ; 
                      00193 ; Pressing and holding the button will exit option mode and return to
                      00194 ; regular (but still privileged) run mode.  The host PC can issue a command
                      00195 ; to drop privileged mode, or the RESET button may be pressed to reset the
                      00196 ; system completely which includes disabling privileged mode.
                      00197 ; 
                      00198 ; ---TOP*---  --BOT--
                      00199 ; A  G  Y  R  G  Y  R
                      00200 ; C  R  E  E  R  E  E
                      00201 ; T  N  L  D  N  L  D  PHASE  MEANING
                      00202 ; -------------------  -----  -------
                      00203 ;** ** ** ** ** ** **  OPTION Entering option mode
                      00204 ; X **  X  X  X  X  X  OPTION Entered privileged run mode
                      00205 ;b3 b2 b1 b0 b5 b4 (*) OPTION Self-test mode (cycling)
                      00206 ;b3 b2 b1 b0 b5 b4  *  OPTION Self-test mode (paused)
                      00207 ;
                      00208 ; 24-channel models only have the top LEDs.  If sensors are installed
                      00209 ; in place of LEDs, some of these may not be present.
                      00210 ;
                      00211 ;=============================================================================
                      00212 ; IMPLEMENTATION NOTES
                      00213 ;-----------------------------------------------------------------------------
                      00214 ;
                      00215 ; The SSR controller firmware consists of a number of somewhat independent 
                      00216 ; subsystems:
                      00217 ; 
                      00218 ; START
                      00219 ;       Initializes the microcontroller, starts up the required peripherals,
                      00220 ;       indicates the device ID on the front panel, and enters the main loop
                      00221 ;
                      00222 ; SIO
                      00223 ;       Handles all serial I/O operations in the background (interrupt-driven)
                      00224 ;       so the rest of the code only needs to be concerned with higher-level
                      00225 ;       reads and writes.  Buffers hold 256 characters each of input and output.
                      00226 ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00227 ; ISR
                      00228 ;       The interrupt service routine manages a set of counters and timers:
                      00229 ;       1. At each AC line zero-crossing point, we reset a two-stage waveform
                      00230 ;          slicing timing chain which governs the ability for the SSRs to dim
                      00231 ;          incandescent lamps plugged into them; 
                      00232 ;       2. For DC boards, we run a 120 Hz timer which provides approximately
                      00233 ;          the same time base since those boards have no zero-crossing detection;
                      00234 ;       3. Each front panel LED has a counter for how long their current 
                      00235 ;          status is to be held, to allow a human to have enough time to 
                      00236 ;          see the LED before it would be extinguished. (This is less explicit
                      00237 ;          now than the previous major firmware version.  The LEDs are now simply
                      00238 ;          treated just like extra SSR lines, so they use the same code to manage
                      00239 ;          them.)
                      00240 ;
                      00241 ; MAIN_LOOP
                      00242 ;       Manages the display of the front panel LEDs
                      00243 ;       Updates the status of the SSR lines if it's time to do so
                      00244 ;       Receives a character from the serial line if one's waiting
                      00245 ;
                      00246 ; INTERPRETER
                      00247 ;       When a byte is received on the serial line, it is processed by
                      00248 ;       a small state machine.  The current state is held in YY_STATE (named
                      00249 ;       in honor of the venerable yacc).
                      00250 ;
                      00251 ; FLASH_UPDATE
                      00252 ;       (flash_update.asm) Loader code to receive new firmware image over the
                      00253 ;       serial line and write it into the microcontroller's flash memory.
                      00254 ;
                      00255 ;-----------------------------------------------------------------------------
                      00256 ; Command Protocol:
                      00257 ;                     ___7______6______5______4______3______2______1______0__
                      00258 ; Command Byte:      |      |                    |                           |
                      00259 ;                    |   1  |    Command code    |   Target device address   |
                      00260 ;                    |______|______|______|______|______|______|______|______|
                      00261 ;
                      00262 ; Any byte with its MSB set is the beginning of a command.  If the target 
                      00263 ; device matches this unit's address, the state machine kicks into gear and
                      00264 ; processes the command (which may require some following data bytes, all
                      00265 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00266 ; byte.
                      00267 ;
                      00268 ;                     ___7______6______5______4______3______2______1______0__
                      00269 ; Extended Command:  |      |                    |                           |
                      00270 ;                    |   1  |          7         |   Target device address   |
                      00271 ;                    |______|______|______|______|______|______|______|______|
                      00272 ;                    |      |                                                |
                      00273 ;                    |   0  |                  Command code                  |
                      00274 ;                    |______|______|______|______|______|______|______|______|
                      00275 ;
                      00276 ; The most common commands are given ID 0-6 so that they may be sent in as few
                      00277 ; bytes as possible (as few as a single byte), but we have more than 8 commands
                      00278 ; so we have an extended code.  If the command code is 7 (all bits set), then
                      00279 ; the following byte contains the actual command code which may be any value
                      00280 ; from 0-127.
                      00281 ;
                      00282 ;                     ___7______6______5______4______3______2______1______0__
                      00283 ; Data Byte:         |      |                                                |
                      00284 ;                    |   0  |                      Data                      |
                      00285 ;                    |______|______|______|______|______|______|______|______|
                      00286 ;
                      00287 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00288 ; in the middle of interpreting a multi-byte command, in which case it's interpreted
                      00289 ; appropriately as data supporting the command being executed.  This way, other
                      00290 ; devices which share the same protocol format but not necessarily a compatible
                      00291 ; command set may safely know which bytes can be ignored without knowing the
                      00292 ; details of each other's command sets.
                      00293 ;
                      00294 ; Two special bytes are recognized:
                      00295 ;
                      00296 ;                     ___7______6______5______4______3______2______1______0__
                      00297 ; MSB Escape:        |      |                                                |
                      00298 ;                    |   0  |   1      1      1      1      1      1      0  |
                      00299 ;                    |______|______|______|______|______|______|______|______|
                      00300 ;
                      00301 ; If this ($7E) byte is received, it is ignored but the next byte received will
                      00302 ; have its MSB bit set.  This allows data bytes to have full 8-bit values without
                      00303 ; violating the communication protocol described above.  That second byte is not
                      00304 ; interpreted further.
                      00305 ;
                      00306 ;                     ___7______6______5______4______3______2______1______0__
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00307 ; Literal Escape     |      |                                                |
                      00308 ;                    |   0  |   1      1      1      1      1      1      1  |
                      00309 ;                    |______|______|______|______|______|______|______|______|
                      00310 ;
                      00311 ; If this ($7F) byte is received, it is ignored but the next byte is accepted
                      00312 ; as-is without further interpretation.
                      00313 ;
                      00314 ; Specific Example Cases of interest:
                      00315 ;       Sequence    Resulting byte
                      00316 ;       $7E $7E     $FE
                      00317 ;       $7E $7F     $FF
                      00318 ;       $7F $7E     $7E
                      00319 ;       $7F $7F     $7F
                      00320 ;
                      00321 ; A command byte (received with MSB already set) trumps all of the above.  It is
                      00322 ; taken as the start of a command and the escape sequence in progress is canceled.
                      00323 ;
                      00324 ; Commands recognized:
                      00325 ;
                      00326 ;   COMMAND  CODE  BITS
                      00327 ;   BLACKOUT 0     1000aaaa
                      00328 ;   ON_OFF   1     1001aaaa 0scccccc            Turn channel <c> on (<s>=1) or off (<s>=0)
                      00329 ;   SET_LVL  2     1010aaaa 0hcccccc 0vvvvvvv    Set dimmer level <v>:<h> on channel <c>
                      00330 ;   BULK_UPD 3     1011aaaa 0mcccccc ...                Bulk-upload multiple channel levels
                      00331 ;   RAMP_LVL 4     1100aaaa Cdcccccc ...         Ramp channel <c> smoothly up (<d>=1) or down (<C>=1 cyc
                            le)
                      00332 ;            5     1101aaaa                      Reserved for future use
                      00333 ;            6     1110aaaa                      Reserved for future use
                      00334 ;   EXTENDED 7     1111aaaa                      Extended command, decoded further in next byte
                      00335 ; @ SLEEP    7+0   1111aaaa 00000000 01011010 01011010  Put unit to sleep
                      00336 ; @ WAKE     7+1   1111aaaa 00000001 01011010 01011010  Take unit out of sleep mode
                      00337 ;   SHUTDOWN 7+2   1111aaaa 00000010 01011000 01011001  Take unit completely offline
                      00338 ; < QUERY    7+3   1111aaaa 00000011 00100100 01010100  Report device status
                      00339 ;X! DEF_SEQ  7+4   1111aaaa 00000100 0iiiiiii ...       Define sequence <i>
                      00340 ;X  EXEC_SEQ 7+5   1111aaaa 00000101 0iiiiiii           Execute sequence <i> (0=stop)
                      00341 ;X  DEF_SENS 7+6   1111aaaa 00000110 ...                Define sensor trigger
                      00342 ;X  MSK_SENS 7+7   1111aaaa 00000111 0000ABCD           Mask inputs (1=enable, 0=disable)
                      00343 ;X! CLR_SEQ  7+8   1111aaaa 00001000 01000011 01000001  Erase all stored sequences
                      00344 ;   XPRIV    7+9   1111aaaa 00001001                    Forbid priviliged mode
                      00345 ;            7+10  1111aaaa 00001010                    Reserved for future use
                      00346 ;             :        :        :                           :     :     :    : 
                      00347 ;            7+29  1111aaaa 00011101                    Reserved for future use                 
                      00348 ;   OUT_NAK  7+30  1111aaaa 00011110                    QUERY NAK                               
                      00349 ;   OUT_RPLY 7+31  1111aaaa 00011111 ...                Reply to QUERY command_________________ 
                      00350 ;   IC_TXDAT 7+32  11110000 00100000 0nnnnnnn (...)*<n>+1 00011011 data -> serial port INTERNAL
                      00351 ;   IC_LED   7+33  11110000 00100001 00GGGYYY 00000RRR             LED Control         ////////
                      00352 ;   IC_HALT  7+34  11110000 00100010                               CPU Halt            ////////
                      00353 ;   IC_TXSTA 7+35  11110000 00100011 0nnnnnnn (...)*<n>+1 00011011 TXDAT + status+sent ////////
                      00354 ;            7+36  11110000 00100100                    Reserved for new commands      ////////
                      00355 ;             :        :        :                           :     :   :      :         ////////
                      00356 ;            7+63  11110000 00111111                    Reserved for new commands______////////
                      00357 ;*! CF_PHASE 7+64  1111aaaa 010000pp 0ppppppp 01010000 01001111   Phase offset=<p>       CONFIG
                      00358 ;*! CF_ADDR  7+96  1111aaaa 0110AAAA 01001001 01000001 01000100   Change address to <A>  ||||||
                      00359 ;*  CF_NOPRV 7+112 1111aaaa 01110000                              Leave privileged mode  ||||||
                      00360 ;*  CF_CONF  7+113 1111aaaa 01110001 ...                          Configure device       ||||||
                      00361 ;*! CF_BAUD  7+114 1111aaaa 01110010 0bbbbbbb 00100110            Set baud rate to <b>   ||||||
                      00362 ;*! CF_RESET 7+115 1111aaaa 01110011 00100100 01110010            Reset factory defaults ||||||
                      00363 ;*  CF_XPRIV 7+116 1111aaaa 01110100                              Forbid priviliged mode ||||||
                      00364 ;*  CF_FLROM 7+117 1111aaaa 01110101 00110011 01001100 00011100   Begin ROM update cycle ||||||
                      00365 ;*           7+118 1111aaaa 01110110                     Reserved for future config cmd  ||||||
                      00366 ;*                     :        :                            :     :     :      :    :   ||||||
                      00367 ;*           7+127 1111aaaa 01111111                     Reserved for future config cmd__||||||
                      00368 ;
                      00369 ; Legend:
                      00370 ;   X Not yet implemented; planned for future; subject to change
                      00371 ;   @ Unit may automatically take this action
                      00372 ;   * Privileged configuration-mode command
                      00373 ;   ! Permanent effect (written to EEPROM)
                      00374 ;   < Command generates response data (back to host)
                      00375 ;   a Device address (0-15)
                      00376 ;   b Baud rate code (0-127), but units may only define a small subset of those values
                      00377 ;   c Output channel (0-63, but unit may only support a lesser number)
                      00378 ;   d Direction: up (<d>=1) or down (<d>=0).
                      00379 ;   h High-res level bit (LSB of 8-bit value when in high-res mode)
                      00380 ;   m Mode (1=high-res, 0=low-res)
                      00381 ;   n Number of items affected
                      00382 ;   s Output state: 0=off, 1=on
                      00383 ;   v Value of dimmer (0-127) (most significant 7 bits of dimmer value)
                      00384 ;
                      00385 ; Payloads for many-byte commands
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00386 ;
                      00387 ; BULK_UPD:  00cccccc 0nnnnnnn v0 v1 v2 ... vn 01010101
                      00388 ;       Updates <n>+1 channels starting at <c>, giving <v> values for each as per SET_LVL.
                      00389 ;
                      00390 ; RAMP_LVL:  0dcccccc 0sssssss 0ttttttt   Channel <c> up/down in <s>+1 steps every <t>+1/120 sec
                      00391 ;
                      00392 ; DEF_SEQ:   0iiiiiii 0nnnnnnn (...)*<n+1> 01000100 01110011  Define sequence <i> of length <n+1>
                      00393 ;                                                             0 is boot sequence, 1-63 is EEPROM
                      00394 ;                                                             64-127 is RAM.
                      00395 ;
                      00396 ; DEF_SENS:  0owE00SS 0IIIIIII 0iiiiiii 0PPPPPPP 00111100
                      00397 ;       Defines the trigger for sensor <S> (00=A, 01=B, 10=C, 11=D), where the event triggers
                      00398 ;       when sensor input goes low (<E>=0) or high (<E>=1).  When triggered, sequence <I>
                      00399 ;       initially, then continues playing sequence <i> (once if <O>=1, else while the sensor
                      00400 ;       remains active if <W>=1, else forever until forced to stop), then sequence <P> is
                      00401 ;       played at the end of the event.
                      00402 ;
                      00403 ; IC_LED:    00GGGYYY 00000RRR
                      00404 ;       each 3 bits decode as:
                      00405 ;               000 steady off  001 steady on
                      00406 ;               010 slow fade   011 fast fade
                      00407 ;               100 slow flash  101 fast flash
                      00408 ;               11x no change
                      00409 ;
                      00410 ; CF_CONF:   0ABCDdcc 0ccccccc 00111010 00111101
                      00411 ;       Configure sensor lines ABCD as 1=sensor inputs or 0=LED outputs,
                      00412 ;       DMX mode if <d>=1, with Lumos channel 0 at DMX channel <c>+1.
                      00413 ;       
                      00414 ; CF_BAUD:   Values recognized:
                      00415 ;       00000000 ($00)        300 baud
                      00416 ;       00000001 ($01)        600
                      00417 ;       00000010 ($02)      1,200
                      00418 ;       00000011 ($03)      2,400
                      00419 ;       00000100 ($04)      4,800
                      00420 ;       00000101 ($05)      9,600
                      00421 ;       00000110 ($06)     19,200
                      00422 ;       00000111 ($07)     38,400
                      00423 ;       00001000 ($08)     57,600
                      00424 ;       00001001 ($09)    115,200
                      00425 ;       00001010 ($0A)    250,000
                      00426 ;       00001011 ($0B)    500,000
                      00427 ;       00001100 ($0C)  1,000,000
                      00428 ;       00001101 ($0D)  2,000,000
                      00429 ;       00001110 ($0E)  2,500,000
                      00430 ;       00001111 ($0F)  5,000,000
                      00431 ;       00010000 ($10) 10,000,000
                      00432 ;
                      00433 ;
                      00434 ; Response packet from QUERY command (37 bytes):
                      00435 ; note the ROM version byte also serves to indicate the format of the response
                      00436 ; bytes which follow.  If the query packet format changes, the ROM version byte
                      00437 ; MUST also change.
                      00438 ;
                      00439 ;    1111aaaa 00011111 00110001 0ABCDdcc 0ccccccc 0ABCDqsf 0ABCDXpp 0ppppppp 
                      00440 ;        \__/           \_/\__/  \__/|\_________/  \__/|||  \__/|\_________/  
                      00441 ;          |             maj |     | |   |           | |||   |  |      `--phase
                      00442 ;          `--reporting    minor   | |   `--DMX      | |||   |  `--config locked?
                      00443 ;              unit addr  rom      | |      channel  | |||   `--active
                      00444 ;                         vers.    | |               | ||`--mem full?
                      00445 ;                                  | `--DMX mode?    | |`--sleeping?
                      00446 ;                                  `--configured     | `--config mode?
                      00447 ;                                                    `--masks
                      00448 ;
                      00449 ;    0eeeeeee 0eeeeeee 0MMMMMMM 0MMMMMMM 0X0iiiii 0xxxxxxx 
                      00450 ;     \______________/  \______________/  | \___/  \_____/
                      00451 ;        `--EEPROM free    `--RAM free    |   |       `--executing seq.
                      00452 ;                                         |   `--device model
                      00453 ;                                         `--seq running?
                      00454 ;
                      00455 ;    0owE0000 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for A
                      00456 ;    0owE0001 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for B
                      00457 ;    0owE0010 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for C
                      00458 ;    0owE0011 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for D
                      00459 ;
                      00460 ;    0fffffff 0fffffff 000000pp 0ppppppp ssssssss ssssssss 00110011
                      00461 ;    \______/ \______/       \_________/ \______S/N______/
                      00462 ;        |        |               `--phase (channels 24-47)
                      00463 ;        |        `--fault code (channels 24-47)
                      00464 ;        `--fault code (channels 0-23)
                      00465 ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00466 ; Also note that the controller is allowed to send OUT_NAK packets to the
                      00467 ; host in response to QUERY commands.  This does not complete the exchange,
                      00468 ; but serves to ask the host to continue waiting if the device won't be able
                      00469 ; to reply to the QUERY for long enough that it risks a timeout.  The host
                      00470 ; is under no obligation to respect the OUT_NAK packets.
                      00471 ;
                      00472 ;   1111aaaa 00011110 
                      00473 ;
                      00474 ; A controller MUST never send data except in response to an explicit
                      00475 ; request from the host.  Controllers MUST immediately cease sending
                      00476 ; data upon receiving any bytes on the network (this indicates that
                      00477 ; the host is no longer waiting for a reply but has moved on to something
                      00478 ; else or is querying another device now).  No further data may be sent
                      00479 ; until again explicitly asked for.
                      00480 ;
                      00481 ; This version of the Lumos ROM does not send OUT_NAK packets.
                      00482 ;
                      00483 ; 
                      00484 ;
                      00485 ;
                      00486 ;                     _______________________________________________________
                      00487 ; Channel ID:        |      |      |                                         |
                      00488 ;                    |  0   | ON   |               Channel ID                |
                      00489 ;                    |______|______|______|______|______|______|______|______|
                      00490 ; The ON bit <6> determines whether the channel is being turned on (1) or 
                      00491 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00492 ; setting the channel to a specific dimmer value.
                      00493 ;
                      00494 ;-----------------------------------------------------------------------------
                      00495 ; State Machine Details
                      00496 ;
                      00497 ; Normally sits at state 0 (Idle) where it pretty much spins free waiting
                      00498 ; for the start of a command to come along.
                      00499 ;
                      00500 ;  __________ my   __________
                      00501 ; |17 |      |slot|18 |      |
                      00502 ; |___|      |--->|___|      |
                      00503 ; | DMX WAIT |<---| DMX UPD  |
                      00504 ; |__________| brk|__________|
                      00505 ;    ^  |nottype0       |done
                      00506 ;    |  V_______________V_____________________________________.
                      00507 ; brk|  |                                                     |
                      00508 ;  __|__V____      __________                                 |
                      00509 ; | 0 |      |    | 1 |      |                                |
                      00510 ; |___|      |--->|___|      |                                |
                      00511 ; |   IDLE   |<---| ON_OFF   |                                | 
                      00512 ; |__________|  ch|__________|                                |
                      00513 ;    ^  |          __________      ___                        |
                      00514 ;    |  |         | 2 |      |ch  |   |v                      |
                      00515 ;    |  |-------->|___|      |--->| 3 |---------------------->|
                      00516 ;    |  |         | SET_LVL  |    |___|                       |
                      00517 ;    |  |         |__________|                                |
                      00518 ;    |  |          __________      ___      ___               |
                      00519 ;    |  |         | 5 |      |ch  |   |s   |   |t             |
                      00520 ;    |  |-------->|___|      |--->| 7 |--->| 8 |------------->|
                      00521 ;    |  |         | RAMP_LVL |    |___|    |___|              |
                      00522 ;    |  |         |__________|                                |
                      00523 ;    |  |          __________                  __________     |
                      00524 ;    |  |         | 4 |      |ch              | 6 | Wait |    |
                      00525 ;    |  |-------->|___|      |--------------->|___|  for |--->|
                      00526 ;    |  |         | BULK_UPD |                | Sentinel |    |
                      00527 ;  __|__V____     |__________|                |__________|    |
                      00528 ; | 9 |      |                                      ^         |
                      00529 ; |___|      |                                      |         |
                      00530 ; | Extended |------------------------------------->|         |
                      00531 ; |__________|                                      |         |
                      00532 ;       |          __________                       |         |
                      00533 ;       |         |14 |      |i                     |         |
                      00534 ;       |-------->|___|      |----------------------'         |
                      00535 ;       |         | DEF_SEQ  |                                |
                      00536 ;       |         |__________|                                |
                      00537 ;       |          __________      ____                       |
                      00538 ;       |         |10 |      |N   |    |(done)                |
                      00539 ;       |-------->|___|      |--->| 11 |--------------------->|
                      00540 ;       |         | IC_TXDAT |    |____|                      |
                      00541 ;       |         | IC_TXSTA |                                |
                      00542 ;       |         |__________|                                |
                      00543 ;       |          __________      ____                       |
                      00544 ;       |         |12 |      |GY  |    |R                     |
                      00545 ;       |-------->|___|      |--->| 13 |--------------------->|
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00546 ;       |         | IC_LED   |    |____|                      |
                      00547 ;       |         |__________|                                |
                      00548 ;       |          __________                                 |
                      00549 ;       |         |15 |      |i                               |
                      00550 ;       |-------->|___|      |------------------------------->|
                      00551 ;       |         | EXEC_SEQ |                                |
                      00552 ;       |         |__________|                                |
                      00553 ;       |          __________                                 |
                      00554 ;       |         |16 |      |m                               |
                      00555 ;       `-------->|___|      |--------------------------------'
                      00556 ;                 | MSK_SENS |    
                      00557 ;                 |__________|              
                      00558 ;
                      00559 ;-----------------------------------------------------------------------------
                      00560 ; System Timing Notes
                      00561 ;
                      00562 ; The system has some fairly specific real-time timing requirements in order
                      00563 ; to function properly.  The main external event we're synchronized to is the
                      00564 ; point where the AC waveform crosses the 0V line (the "zero crossing" point).
                      00565 ;
                      00566 ; An optoisolator on the controller board is connected to the AC input of the
                      00567 ; transformer and sends a positive-logic pulse to the INT pin of the micro-
                      00568 ; controller every time the AC line crosses 0V.  (Actually, the leading edge
                      00569 ; will slightly lead the zero crossing point and the trailing edge will 
                      00570 ; slightly lag behind it.)  So we enter our ISR once every 1/120 sec 
                      00571 ; (assuming US-standard 60Hz power).  For reference, this is 0.00833333 sec 
                      00572 ; or enough time for 83,333.333 instructions to be executed between each 
                      00573 ; interrupt.
                      00574 ;
                      00575 ; Slices  Time/slice (s)  Instructions/slice
                      00576 ;   1     0.00833333      83,333.333
                      00577 ;  32     0.00026042       2,604.167
                      00578 ;  64     0.00013021       1,302.083
                      00579 ; 128     0.00006510         651.042
                      00580 ; 132     0.00006313         631.313    128 levels + 2 on each end
                      00581 ; 260     0.00003205         320.513    256 levels + 2 on each end
                      00582 ;
                      00583 ; We divide the half-wave into "slices".  We need a minimum of 256 slices
                      00584 ; to get 256 levels of dimmer control, but we should add at least one on either
                      00585 ; end in case our timing's slightly off between the ZC points and the free-
                      00586 ; running timer.  For good measure, let's throw in a couple more to allow for
                      00587 ; pin settling times, minimum turn-on times for the triacs and just to be
                      00588 ; paranoid.  So let's say 260 slices per half-wave.  
                      00589 ;
                      00590 ; At 260 slices per ZC, each slice is 0.00003205128205128205 seconds.
                      00591 ; We set TMR2's period register to 159, with a 1:2 postscaler and no prescaler.
                      00592 ; That gives us a timer interrupt every 320 clock ticks, or every .000032 seconds.
                      00593 ; That's 320 instruction cycles worth of work we can pack into these cycles.
                      00594 ; Most of the work per cycle takes about 1/3 that much, so this should be ok.
                      00595 ;
  0000009F            00596 SLICE_TMR_PERIOD        EQU     0x9F
                      00597 ;
                      00598 ; For standalone DC boards, we don't have a zero-crossing input so we set up
                      00599 ; our own 120 Hz timing signal by running TMR0 with a 1:2 prescaler for 
                      00600 ; 41,666 clock ticks (i.e., running the timer from $5D3D-$FFFF).
                      00601 ;
                      00602                         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
  00005D3D            00603 CYCLE_TMR_PERIOD         EQU    0x5D3D
                      00604                         ENDIF
                      00605 ;
                      00606 ; In the previous (prototype) version of this controller, we took the ZC
                      00607 ; signal from the *secondary* side of the transformer, which meant that it
                      00608 ; was possible for that to be out of phase with the actual AC ZC event, so
                      00609 ; the "phase delay" feature of the event handling code was written to 
                      00610 ; compensate for this.  Now that we sample the AC line directly, we set 
                      00611 ; this delay to a constant value and that should be good.  We left the 
                      00612 ; capability in here, though, to account for any need for adjustment which
                      00613 ; may turn up due to component tolerances, propagation delays, or similar
                      00614 ; things.  We correct for any phase offset by adding a software delay
                      00615 ; from 0-511 (although really only 0-260 make much sense) slices between the ZC
                      00616 ; interrupt and the start of the dimmer cycle of 260 slices.  (The other 4 
                      00617 ; slices are idle (not active) slices.) 
                      00618 ;
                      00619 ; The value for PHASE_OFFSET should be chosen to start the cycle one or two
                      00620 ; slices into the actual half-wave.  So if there is no phase difference at all
                      00621 ; between sides of the transformer, PHASE_OFFSET should be 2.
                      00622 ;
                      00623 ; Here's the timeline:
                      00624 ;
                      00625 ;                    REAL                               REAL
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00626 ;                     ZC                                 ZC
                      00627 ;    |................|..|...............|....|....|.....|..|..............
                      00628 ;    |phase delay------->|               |phase delay------>|
                      00629 ;    |                   |working slices----->|    |        |working slices-->
                      00630 ;    |                                   |    |idle|
                      00631 ;   INT                                 INT
                      00632 ;   (ZC)                                (ZC)
                      00633 ;
                      00634 ; Of course, in the current design, there is no phase shift across
                      00635 ; the transformer, so we'd have the trivial case of PHASE_OFFSET=2 (2 just to
                      00636 ; allow a little fudge room with the free-running slice timer which is not
                      00637 ; *quite* an even factor of the half-wave time):
                      00638 ;
                      00639 ;    REAL                         REAL
                      00640 ;     ZC                           ZC
                      00641 ;    .|..|....................|....|..|.................|
                      00642 ;     |->|                    |    |->|                 |
                      00643 ;     |  |working slices----->|    |  |working slices-->|
                      00644 ;     |  |                    |idle|  |                 |
                      00645 ;    INT                          INT
                      00646 ;
                      00647 ; Since the free-running slice timer isn't exactly in sync with the ZC timing,
                      00648 ; we'll start our working slices some variable fraction of 1/260th of a half-cycle
                      00649 ; each time.  This will cause a "wobble" in brightness level of not more than 
                      00650 ; 1/260th brightness level (something less than one brightness increment), which
                      00651 ; ought to be difficult or impossible to notice by looking at an incandescent
                      00652 ; light load.  This is one reason why PHASE_OFFSET should be set to allow 1-2
                      00653 ; idle slices before we start turning on SSRs.
                      00654 ;
                      00655 ; On ZC interrupt, we set CUR_PRE to PHASE_OFFSET and set <PRECYC>.
                      00656 ; On TMR2 interrupt, if SSR_STATE<PRECYC>, decrement CUR_PRE.
                      00657 ;   if zero, clear SSR_STATE<PRECYC>, set CUR_SLICE to 256, set <INCYC>,<DIM_START>.
                      00658 ;   if SSR_STATE<INCYC>, decrement CUR_SLICE; if zero, set DIM_END, clr INCYC; else set SLICE_UPD
                      00659 ; 
                      00660 ; In main polling loop:
                      00661 ;   if DIM_START: turn on "on" SSRs, clear DIM_START
                      00662 ;   if SLICE_UPD: turn on SSR == CUR_SLICE for SSRs with SSRDIM set; clear SLICE_UPD
                      00663 ;   if DIM_END:   turn off all except SSR_ON, clear DIM_END
                      00664 ;
                      00665 ; PRECYC INCYC SLICE_UPD  CUR_PRE CUR_SLICE
                      00666 ;    0     x       x         x       x
                      00667 ;    1     x       x         4       x       <--zc
                      00668 ;    1     x       x         3       x
                      00669 ;    1     x       x         2       x
                      00670 ;    1     x       x         1       x
                      00671 ;    0     1     1-->0       0      255      SSR@255/on turned on
                      00672 ;    0     1     1-->0       0      254      SSR@254    turned on
                      00673 ; ...
                      00674 ;    0     1     1-->0       0       2       SSR@2     turned on
                      00675 ;    0     1     1-->0       0       1       SSR@1     turned on
                      00676 ;    0     0     1-->0       0       0       all non-on turned off
                      00677 ;    0     0       0         0       0       idle...
                      00678 ; ...
                      00679 ;    1     0       0         4       0       <--zc
                      00680 ; 
                      00681 ;
                      00682 ;=============================================================================
                      00683 ; HARDWARE DESCRIPTION
                      00684 ;-----------------------------------------------------------------------------
                      00685 ;
                      00686 ; The 48-channel and 24-channel boards use the 18F4685 microcontroller 
                      00687 ; (LUMOS_ARCH == "4685"), while the 4-channel boards use the smaller
                      00688 ; 18F14K50 chip (LUMOS_ARCH == "14K50").
                      00689 ;
                      00690 ;  PIC18F4685 Microcontroller I/O pin assignments:
                      00691 ;
                      00692 ; 24-CH   48-CH          ________   _________         48-CH   24-CH
                      00693 ; BOARD:  BOARD:        |o       \_/         |        BOARD:  BOARD:
                      00694 ; /RESET  /RESET -->  1 | /MCLR RE3  PGD RB7 | 40 --> /PWRCTL /PWRCTL
                      00695 ; /SSR23  /SSR16 <--  2 | RA0        PGC RB6 | 39 <-- /OPTION /OPTION
                      00696 ; /SSR22  /SSR14 <--  3 | RA1        PGM RB5 | 38 --> /SSR15  /SSR00
                      00697 ; /SSR21  /SSR12 <--  4 | RA2            RB4 | 37 --> /SSR13  /SSR01
                      00698 ; /SSR20  /SSR10 <--  5 | RA3            RB3 | 36 --> /SSR11  /SSR02
                      00699 ; /SSR19  /SSR08 <--  6 | RA4       INT2 RB2 | 35 --> /SSR09  /SSR03
                      00700 ; ACT    ACT*LED <--  7 | RA5       INT1 RB1 | 34 --> /SSR07  /SSR04 _
                      00701 ; GRN    GRN LED <--  8 | RE0       INT0 RB0 | 33 <-- ZC INT  -->  T/R
                      00702 ; YEL    YEL LED <--  9 | RE1            VDD | 32 --- +5V       
                      00703 ; RED    RED LED <-- 10 | RE2            VSS | 31 --- GND      
                      00704 ;            +5V --- 11 | VDD            RD7 | 30 --> /SSR17  /SSR05
                      00705 ;            GND --- 12 | VSS            RD6 | 29 --> /SSR06  /SSR06
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00706 ;           xtal --- 13 | OSC            RD5 | 28 --> /SSR05  /SSR07
                      00707 ;             +----- 14 | OSC            RD4 | 27 --> /SSR18  /SSR08
                      00708 ; /SSR18  /SSR04 <-- 15 | RC0         RX RC7 | 26 <-- Serial RxD
                      00709 ; /SSR17  /SSR19 <-- 16 | RC1         TX RC6 | 25 --> Serial TxD
                      00710 ; /SSR16  /SSR03 <-- 17 | RC2            RC5 | 24 --> /SSR02  /SSR09
                      00711 ; /SSR15  /SSR01 <-- 18 | RC3            RC4 | 23 --> /SSR00  /SSR10
                      00712 ; /SSR14  /SSR23 <-- 19 | RD0            RD3 | 22 --> /SSR22  /SSR11
                      00713 ; /SSR13  /SSR21 <-- 20 | RD1            RD2 | 21 --> /SSR20  /SSR12
                      00714 ;                       |____________________|
                      00715 ;                  _
                      00716 ; *pin 7 goes to T/R on the slave controller instead of the LED.
                      00717 ;
                      00718 ;
                      00719 ; The outputs from the controller board are on a 26-bin ribbon cable
                      00720 ; header with this pinout:
                      00721 ;
                      00722 ;                               _________
                      00723 ;                       SSR23  |  1 |  2 |  SSR00
                      00724 ;                       SSR22  |  3 |  4 |  SSR01
                      00725 ;                       SSR21  |  5 |  6 |  SSR02
                      00726 ;                       SSR20  |  7 |  8 |  SSR03
                      00727 ;                       SSR19  |  9 | 10 |  SSR04
                      00728 ;                       SSR18  | 11 | 12 |  SSR05
                      00729 ;                       SSR17  | 13 | 14 |  SSR06
                      00730 ;                         GND  | 15 | 16 |  +5V
                      00731 ;                       SSR16  | 17 | 18 |  SSR07
                      00732 ;                       SSR15  | 18 | 20 |  SSR08
                      00733 ;                       SSR14  | 21 | 22 |  SSR09
                      00734 ;                       SSR13  | 23 | 24 |  SSR10
                      00735 ;                       SSR12  |_25_|_26_|  SSR11
                      00736 ;
                      00737 ;
                      00738 ; Communications are via RS-485 serial network using an 8p8c modular
                      00739 ; connector with this pinout:
                      00740 ;
                      00741 ;  ________
                      00742 ; |12345678|    1- Return Data Y (+)    5- Data A (+)
                      00743 ; |        |    2- Return Data Z (-)    6- Cable Check OUT
                      00744 ; |___  ___|    3- Cable Check IN       7- Data GND 
                      00745 ;    |__|       4- Data B (-)           8- Return Data GND
                      00746 ;
                      00747 ; CC is a cable check indicator.  A signal is sent out by the host on pin 3, with the
                      00748 ; expectation that each controller will pass it on down the cable to the terminator
                      00749 ; which connects it to pin 6 and sends the signal back through the controllers to the
                      00750 ; host again.  Note that the controllers themselves do nothing with the CC signal other
                      00751 ; than pass those pins straight through; it is available however for something at the 
                      00752 ; host side to verify cable integrity.
                      00753 ;
                      00754 ; Data A/B is the twisted pair for the RS-485 data between the host PC and controllers.
                      00755 ;
                      00756 ; Return Data Y/Z is only implemented if a full duplex RS-485 network is implemented
                      00757 ; (an option for some boards but not the default case).  This is dedicated for controllers
                      00758 ; sending data back to the host PC.  If using half-duplex, the same data pair is used
                      00759 ; for both sending and receiving, and the host PC needs to switch to receive mode
                      00760 ; when a controller is asked to report back.
                      00761 ;
                      00762 ;
                      00763 ; Termination at the end of the loop should be provided with a plug
                      00764 ; wired as:
                      00765 ; 
                      00766 ;     3 ------------ 6
                      00767 ; 
                      00768 ;     1 ---/\/\/---- 2 <--(if full duplex)
                      00769 ;         120 ohms
                      00770 ; 
                      00771 ;     4 ---/\/\/---- 5
                      00772 ;         120 ohms
                      00773 ;------------------------------------------------------------------------ 
                      00774 ;
                      00775 ;  PIC18F14K50 Microcontroller I/O pin assignments:
                      00776 ;
                      00777 ;         4-CH           ________   _________         4-CH
                      00778 ;         BOARD:        |o       \_/         |        BOARD: 
                      00779 ;            +5V ---  1 | Vdd            Vss | 20 --- GND    
                      00780 ;           XTAL ---  2 | OSC1       PGD RA0 | 19 --> /PWRCTL
                      00781 ;           XTAL ---  3 | OSC2       PGC RA1 | 18 <-- /OPTION
                      00782 ;          /MCLR -->  4 | /MCLR         Vusb | 17 
                      00783 ;    /A  ACT LED <->  5 | RC5            RC0 | 16 --> /SSR0
                      00784 ;        GRN LED <--  6 | RC4            RC1 | 15 --> /SSR1
                      00785 ;    /C  YEL LED <->  7 | RC3            RC2 | 14 --> /SSR2
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00786 ;    /B  RED LED <->  8 | RC6            RB4 | 13 --> /SSR3
                      00787 ;    /D          -->  9 | RC7        RxD RB5 | 12 <-- RxD
                      00788 ;            TxD <-- 10 | RB7 TxD        RB6 | 11 --> T/R
                      00789 ;                       |____________________|
                      00790 ;
                      00791 ;
                      00792 ;
                      00793 ; ========================================================================
                      00794 ; PROGRAM MEMORY MAP
                      00795 ; ______________________________________________________________________________
                      00796 ; PIC18F14K50, 4-PORT BOARD
                      00797 ; 
                      00798 ;           ______________________________
                      00799 ; 00000000 | Restart vector               | V_RST
                      00800 ; 00000005 |______________________________|
                      00801 ; 00000006 |                              | .cinit
                      00802 ; 00000007 |______________________________|
                      00803 ; 00000008 | High-priority interrupt      | V_INT_H
                      00804 ;          | vector                       |
                      00805 ; 0000000D |______________________________|
                      00806 ;     :     ______________________________
                      00807 ; 00000018 | Low-priority interrupt       | V_INT_L
                      00808 ;          | vector                       |
                      00809 ; 0000001D |______________________________|
                      00810 ; 0000001E | Interrupt service routines   | _INT
                      00811 ; 000000A5 |______________________________|
                      00812 ;     :     ______________________________
                      00813 ; 00000100 | Cold-start boot loader:      | _BOOT
                      00814 ;          | initialize system            |
                      00815 ; 00000333 |______________________________|
                      00816 ; 00000334 | Serial I/O routines          | _SIO_CODE
                      00817 ; 000005C5 |______________________________|
                      00818 ;     :     ______________________________
                      00819 ; 00000800 | Mainline Lumos firmware      | _MAIN
                      00820 ;          | routines                     |
                      00821 ; 00001C4F |______________________________|
                      00822 ;     :     ______________________________
                      00823 ; 00002E00 | Factory default settings     | _EEPROM_DEFS_TBL
                      00824 ; 00002E0F |______________________________|
                      00825 ; 00002E10 | System initialization code   | LUMOS_CODE_INIT
                      00826 ;          | (called from boot code)      |
                      00827 ; 00002E97 |______________________________|
                      00828 ;     :     ______________________________
                      00829 ; 00002F00 |                              | .org_0
                      00830 ; 00002FBD |______________________________|
                      00831 ;     :     ______________________________
                      00832 ; 00002FE0 | Manufacturing information    | __SYS__
                      00833 ;          | (serial number)              |
                      00834 ; 00002FE1 |______________________________|
                      00835 ;     :     ______________________________
                      00836 ; 00003000 | Field firmware update        | _FLASH_UPD
                      00837 ;          | routine                      |
                      00838 ; 000032F5 |______________________________|
                      00839 ;
                      00840 ; 14K50 4685    _________________ ___
                      00841 ; $00000 $00000 | RESET Vector    | V_RST
                      00842 ; $00007 $00007 |_________________|___
                      00843 ; $00008 $00008 | High Int Vector | V_INT_H
                      00844 ; $00017 $00017 |_________________|___
                      00845 ; $00018 $00018 | Low Int Vector  | V_INT_L
                      00846 ; $0001F $0001F |_________________|
                      00847 ; $00020 $00020 |/////////////////|
                      00848 ; $000FF $000FF |/////////////////|___
                      00849 ; $00100 $00100 | Boot code       | _BOOT
                      00850 ;               |.................|___
                      00851 ;               | Interrupt hand- | _INT
                      00852 ;               |  lers           |      
                      00853 ;               |/////////////////|
                      00854 ; $007FF $007FF |/////////////////|___
                      00855 ; $00800 $00800 | Mainline code   | _MAIN
                      00856 ;               |.................|___
                      00857 ;           ??? | Device init     | LUMOS_CODE_INIT
                      00858 ;               |_________________|___
                      00859 ;           ??? | Serial I/O      | _SIO_CODE
                      00860 ;               | Module          |
                      00861 ;               |_________________|___
                      00862 ;               |/////////////////|
                      00863 ;               |/////////////////|
                      00864 ;               |/////////////////|
                      00865 ;               |/////////////////|
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00866 ;               |/////////////////|___
                      00867 ; $02E00 $14000 | EEPROM defaults | _MAIN_EEPROM_TBL
                      00868 ; $02EFF $14FFF |_________________|___
                      00869 ; $02F00 $15000 |Serial I/O Mod   | _SIO_LOOKUP_TABLES
                      00870 ;               |lookup tables    |
                      00871 ;        $150FF |_________________|___
                      00872 ;        $15100 |                 |
                      00873 ;               |                 |
                      00874 ; $02FEF $16FEF |_________________|___
                      00875 ; $02FF0 $16FF0 |System Mfg Data  | _SYSTEM_MFG_DATA
                      00876 ; $02FFF $16FFF |_________________|___
                      00877 ; $03000 $17000 |Flash Loader Code| _FLASH_UPDATE_LOADER
                      00878 ; $03FFF $17FFF |_________________|___
                      00879 ;               |/////////////////|
                      00880 ;               |/////////////////|
                      00881 ;$1FFFFF$1FFFFF |/////////////////|___
                      00882 ;
                      00883  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00014000            00884 _MAIN_EEPROM_TBL        EQU     0x14000
  00016FF0            00885 _SYSTEM_MFG_DATA        EQU     0x16FF0
                      00886  ELSE
                      00887   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00888 _MAIN_EEPROM_TBL        EQU     0x02E00
                      00889 _SYSTEM_MFG_DATA        EQU     0x02FE0
                      00890   ELSE
                      00891    ERROR "Invalid architecture switch"
                      00892   ENDIF
                      00893  ENDIF
                      00894 ;
                      00895 ;
                      00896 ; ========================================================================
                      00897 ;
                      00898 ; PIC18F14K50, 4-channel board:
                      00899 ;      ______________________________
                      00900 ; 000 | 000 ISR_TMPL_STATUS          | _ADATA
                      00901 ;     | 001 ISR_TMPL_BSR             |
                      00902 ;     | 002 ISR_TMPL_WREG            |
                      00903 ;     | 003 MY_ADDRESS               |
                      00904 ;     | 004 PHASE_OFFSETH            |
                      00905 ;     | 005 PHASE_OFFSETL            |
                      00906 ;     | 006 SSR_STATE                |
                      00907 ;     | 007 SSR_STATE2               |
                      00908 ;     | 008 DMX_SLOTH                |
                      00909 ;     | 009 DMX_SLOTL                |
                      00910 ;     | 00A YY_STATE                 |
                      00911 ;     | 00B YY_COMMAND               |
                      00912 ;     | 00C YY_CMD_FLAGS             |
                      00913 ;     | 00D YY_DATA                  |
                      00914 ;     | 00E YY_LOOKAHEAD_MAX         |
                      00915 ;     | 00F YY_LOOK_FOR              |
                      00916 ;     | 010 YY_BUF_IDX               |
                      00917 ;     | 011 YY_NEXT_STATE            |
                      00918 ;     | 012 YY_YY                    |
                      00919 ;     | 013 LAST_ERROR               |
                      00920 ;     | 014 CUR_PREH                 |
                      00921 ;     | 015 CUR_PRE                  |
                      00922 ;     | 016 CUR_SLICE                |
                      00923 ;     | 017 TARGET_SSR               |
                      00924 ;     | 018 OPTION_DEBOUNCE          |
                      00925 ;     | 019 OPTION_HOLD              |
                      00926 ;     | 01A TEST_CYCLE               |
                      00927 ;     | 01B TEST_SSR                 |
                      00928 ;     | 01C AUTO_OFF_CTRH            |
                      00929 ;     | 01D AUTO_OFF_CTRL            |
                      00930 ;     | 01E EIGHTBITSIOBUF           |
                      00931 ;     | 01F I                        |
                      00932 ;     | 020 J                        |
                      00933 ;     | 021 K                        |
                      00934 ;     | 022 KK                       |
                      00935 ;     | 023 TR_I                     |
                      00936 ; 023 |______________________________|
                      00937 ;  :   ______________________________
                      00938 ; 060 | 060 SSR_00_VALUE             | _SSR_DATA
                      00939 ;     | 068 SSR_00_FLAGS             |
                      00940 ;     | 070 SSR_00_STEP              |
                      00941 ;     | 078 SSR_00_SPEED             |
                      00942 ;     | 080 SSR_00_COUNTER           |
                      00943 ; 087 |______________________________|
                      00944 ; 088 | 088 YY_BUFFER                | _MAINDATA
                      00945 ; 0E1 |______________________________|
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00946 ;  :   ______________________________
                      00947 ; 0E4 | 0E4 SIO_STATUS               | _SIO_VAR_DATA
                      00948 ;     | 0E5 SIO_INPUT                |
                      00949 ;     | 0E6 SIO_OUTPUT               |
                      00950 ;     | 0E7 TX_BUF_START             |
                      00951 ;     | 0E8 TX_BUF_END               |
                      00952 ;     | 0E9 RX_BUF_START             |
                      00953 ;     | 0EA RX_BUF_END               |
                      00954 ;     | 0EB TX_CHAR                  |
                      00955 ;     | 0EC SIO_X                    |
                      00956 ;     | 0ED SIO_TMPPC                |
                      00957 ;     | 0EE FSR1H_SAVE               |
                      00958 ;     | 0EF FSR1L_SAVE               |
                      00959 ;     | 0F0 B32__BIT                 |
                      00960 ;     | 0F1 B32__OUTCTR              |
                      00961 ;     | 0F2 B32__FSR0H               |
                      00962 ;     | 0F3 B32__FSR0L               |
                      00963 ;     | 0F4 B32__FSR1H               |
                      00964 ;     | 0F5 B32__FSR1L               |
                      00965 ;     | 0F6 B32__BCD_ASC             |
                      00966 ;     | 0FB B32__BIN                 |
                      00967 ; 0FE |______________________________|
                      00968 ;  :   ______________________________
                      00969 ; 100 | 100 TX_BUFFER                | _SIO_TXBUF_DATA
                      00970 ; 1FF |______________________________|
                      00971 ; 200 | 200 RX_BUFFER                | _SIO_RXBUF_DATA
                      00972 ; 2FF |______________________________|
                      00973 ;
                      00974 
                      00975 ; DATA MEMORY MAP (4685)
                      00976 ;
                      00977 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00978 ; $000 | global state,   | _ADATA            BANK 0
                      00979 ; $05F | ISR data, etc.  |                (ACCESS AREA)
                      00980 ;      |.................|...............................
                      00981 ; $060 |                 |                   
                      00982 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00983 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00984 ;      | ring buffer     |
                      00985 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00986 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00987 ;      | ring buffer     |
                      00988 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00989 ; $300 | Serial I/O mod  | _SIO_VAR_DATA     BANK 3
                      00990 ;      | variable space  |
                      00991 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00992 ; $400 | SSR state data  | _SSR_DATA         BANK 4
                      00993 ;      |                 |
                      00994 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00995 ; $500 | Parser buffer   | _MAINDATA         BANK 5
                      00996 ;      |.................|
                      00997 ; $5?? |                 |
                      00998 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00999 ; $600 | Stored sequences| _SEQ_DATA         BANK 6
                      01000 ;      | (1792 bytes)    |
                      01001 ;              .
                      01002 ;              .                 
                      01003 ;              .                
                      01004 ;      |                 |
                      01005 ;      |                 |
                      01006 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      01007 ; $D00 |                 |                   BANK D
                      01008 ;      | CAN special     |
                      01009 ;      | function        |___ ___ ___ ___ ___ ___ ___ ___
                      01010 ; $E00 | registers       |                   BANK E
                      01011 ;      | (not used for   |
                      01012 ;      | Lumos)          |___ ___ ___ ___ ___ ___ ___ ___
                      01013 ; $F00 |                 |                   BANK F
                      01014 ;      |                 |
                      01015 ; $F5F |.................|...............................
                      01016 ; $F60 | Special Function|                (ACCESS AREA)
                      01017 ;      | (device) regis- |
                      01018 ;      | ters            |
                      01019 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      01020 ;
                      01021 ; ------------------------------------------------------------------------
                      01022 ; DATA MEMORY MAP (14K50)
                      01023 ;
                      01024 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      01025 ; $000 | global state,   | _ADATA            BANK 0
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01026 ; $022 | ISR data, etc.  |                (ACCESS AREA)
                      01027 ;      |.................|
                      01028 ; $023 |                 |                   
                      01029 ;      |                 |                   
                      01030 ; $05F |_________________|...............................
                      01031 ; $060 | SSR state data  | _SSR_DATA         BANK 0
                      01032 ;      |                 |                (BANKED AREA)
                      01033 ; $07F |_________________|
                      01034 ; $088 | Parser buffer   | _MAINDATA
                      01035 ; $0E1 |.................|
                      01036 ; $0E2 |    [unused]     |
                      01037 ; $0E3 |_________________|
                      01038 ; $0E4 | Serial I/O mod  | _SIO_VAR_DATA
                      01039 ;      | variable space  |
                      01040 ; $0FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      01041 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      01042 ;      | ring buffer     |
                      01043 ; $1FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      01044 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      01045 ;      | ring buffer     |
                      01046 ; $2FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      01047 ; $300 |/////////////////|///////////////////////////////
                      01048 ;      |/////////////////|
                      01049 ;              .
                      01050 ;              .                 
                      01051 ;              .                DOES NOT EXIST
                      01052 ;      |/////////////////|
                      01053 ;      |/////////////////|
                      01054 ; $EFF |/////////////////|///////////////////////////////
                      01055 ; $F00 |/////////////////|                   
                      01056 ; $F52 |/////////////////|
                      01057 ; $F53 | Special Function|
                      01058 ; $F5F |.................|...............................
                      01059 ; $F60 | Special Function|                (ACCESS AREA)
                      01060 ;      | (device) regis- |
                      01061 ;      | ters            |
                      01062 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      01063 ;
                      01064 ; ========================================================================
                      01065 ; EEPROM MEMORY
                      01066 ;
                      01067 ;
                      01068 ;       ______________            ______________ 
                      01069 ; $000 |_0xFF_________|     $010 | Saved        |
                      01070 ; $001 |_Baud_Rate____|     $011 | Sequence     |
                      01071 ; $002 |_Device_ID____|     $012 | Storage      |
                      01072 ; $003 | Phase     MSB|     $013 |       |      |
                      01073 ; $004 |_Offset____LSB|     $014 |       |      |
                      01074 ; $005 |_DMX_Slot__MSB|     $015 |       |      |
                      01075 ; $006 |_DMX_Slot__LSB|       .          .
                      01076 ; $007 |_Sensor_cfg___|       .          .
                      01077 ; $008 |______________|       .          .
                      01078 ; $009 |______________|     $3F9 |       |      |
                      01079 ; $00A |______________|     $3FA |       |      |
                      01080 ; $00B |______________|     $3FB | (1008 |      |
                      01081 ; $00C |______________|     $3FC | bytes)|      |
                      01082 ; $00D |______________|     $3FD |       |      |
                      01083 ; $00E |______________|     $3FE |       |      |
                      01084 ; $00F |_0x42_________|     $3FF |_______V______|
                      01085 ;
                      01086 ;
                      01087 __SYS__ CODE_PACK       _SYSTEM_MFG_DATA
016FF0 A5             01088 SYS_SNH DE      0xA5            ; Device serial number
016FF1 A0             01089 SYS_SNL DE      0xA0
                      01090 
                      01091 _EEPROM CODE_PACK       0xF00000
F00000 FF             01092         DE      0xFF            ; 000: 0xFF constant
F00001 06             01093         DE      SIO_19200       ; 001: baud rate default
F00002 00             01094         DE      0x00            ; 002: default device ID
F00003 00 02          01095         DE      0x00, 0x02      ; 003: default phase offset
F00005 00 00          01096         DE      0x00, 0x00      ; 005: default DMX=0 (disabled, ch=1)
F00007 00             01097         DE      0x00            ; 007: default sensors (disabled)
F00008 00 00          01098         DE      0x00, 0x00      ; 008: reserved
F0000A 00 00 00       01099         DE      0x00, 0x00, 0x00; 00A: reserved
F0000D 00 00          01100         DE      0x00, 0x00      ; 00D: reserved
F0000F 42             01101         DE      0x42            ; 00F: sentinel
                      01102 
  00000000            01103 EE_START        EQU     0x000
  00000001            01104 EE_BAUD         EQU     0x001
  00000002            01105 EE_DEV_ID       EQU     0x002
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000003            01106 EE_PHASE_H      EQU     0x003
  00000004            01107 EE_PHASE_L      EQU     0x004
  00000005            01108 EE_DMX_H        EQU     0x005
  00000006            01109 EE_DMX_L        EQU     0x006
  00000007            01110 EE_SENSOR_CFG   EQU     0x007
  00000008            01111 EE_RESERVED_8   EQU     0x008
  00000009            01112 EE_RESERVED_9   EQU     0x009
  0000000A            01113 EE_RESERVED_A   EQU     0x00A
  0000000B            01114 EE_RESERVED_B   EQU     0x00B
  0000000C            01115 EE_RESERVED_C   EQU     0x00C
  0000000D            01116 EE_RESERVED_D   EQU     0x00D
  0000000E            01117 EE_RESERVED_E   EQU     0x00E
  0000000F            01118 EE_END          EQU     0x00F
                      01119 
                      01120 _EEPROM_DEFS_TBL CODE_PACK _MAIN_EEPROM_TBL
014000                01121 DEFAULT_TBL:
014000 FF             01122         DB      0xFF                    ; $000: constant $FF
014001 06             01123         DB      SIO_19200               ; $001: 19200 baud
014002 00             01124         DB      0x00                    ; $002: device ID=0
014003 00 02          01125         DB      0x00, 0x02              ; $003: phase offset=2
014005 00 00          01126         DB      0x00, 0x00              ; $005: DMX slot=0 (disabled, ch=1)
014007 00             01127         DB      0x00                    ; $007: no sensors configured
014008 00 00 00       01128         DB      0x00, 0x00, 0x00        ; $008-$00A
01400B 00 00 00 00    01129         DB      0x00, 0x00, 0x00, 0x00  ; $00B-$00E
01400F 42             01130         DB      0x42                    ; $00F: constant $42
                      01131 
  00000010            01132 EEPROM_SETTINGS_LEN     EQU     .16
  00000010            01133 EEPROM_USER_START       EQU     0x010   
  000003FF            01134 EEPROM_USER_END         EQU     0x3FF
                      01135 ;
                      01136 ; ========================================================================
                      01137 ; DEVICES USED
                      01138 ;
                      01139 ; TMR0    120 Hz interrupt source (for boards without zero-crossing detector)
                      01140 ; TMR1    Button press timer (free-running 1MHz clock)
                      01141 ; TMR2    Dimmer slice timer (1/260 of a 120 Hz half-cycle)
                      01142 ; TMR3    Break detector for DMX reception
                      01143 ; UART    SIO module
                      01144 ;=============================================================================
                      01145 ;
                      01146 ;
                      01147 ;-----------------------------------------------------------------------------
                      01148 ; I/O PORT ASSIGNMENTS
                      01149 ;-----------------------------------------------------------------------------
                      01150 ;
                      01151 ;          7   6   5   4   3   2   1   0
                      01152 ; PORT RA --- --- ACT /08 /10 /12 /14 /16    48-Board AC/DC master
                      01153 ; PORT RA --- --- T/R /08 /10 /12 /14 /16    48-Board AC/DC slave
                      01154 ; PORT RA --- --- ACT /19 /20 /21 /22 /23    24-Board DC    standalone
                      01155 ;          <OSC>   O   O   O   O   O   O
                      01156 ; PORT RA /////// --- --- --- /// /OP /PS     4-Board DC
                      01157 ;         ///////  <OSC>   I  ///  I   O
                      01158 ;
                      01159 ;          7   6   5   4   3   2   1   0
                      01160 ; PORT RB /PS /OP /15 /13 /11 /09 /07 ---    48-Board AC/DC master
                      01161 ;          O   I   O   O   O   O   O  INT
                      01162 ; PORT RB /PS --- /15 /13 /11 /09 /07 ---    48-Board AC/DC slave
                      01163 ;          O   O   O   O   O   O   O  INT
                      01164 ; PORT RB /PS /OP /00 /01 /02 /03 /04 T/R    24-Board DC    standalone
                      01165 ;          O   I_  O   O   O   O   O   O 
                      01166 ; PORT RB --- T/R --- /03 ///////////////     4-Board DC
                      01167 ;         <O>  O  <I>  O  ///////////////
                      01168 ;
                      01169 ;          7   6   5   4   3   2   1   0
                      01170 ; PORT RC --- --- /02 /00 /01 /03 /19 /04    48-Board AC/DC master/slave
                      01171 ; PORT RC --- --- /09 /10 /15 /16 /17 /18    24-Board DC    standalone
                      01172 ;          <I/O>   O   O   O   O   O   O
                      01173 ; PORT RC /D  RED ACT GRN YEL /02 /01 /00     4-Board DC
                      01174 ;          I   O   O   O   O   O   O   O
                      01175 ;
                      01176 ;          7   6   5   4   3   2   1   0
                      01177 ; PORT RD /17 /06 /05 /18 /22 /20 /21 /23    48-Board AC/DC master/slave
                      01178 ; PORT RD /05 /06 /07 /08 /11 /12 /13 /14    24-Board DC    standalone
                      01179 ;         ///////////////////////////////     4-Board DC
                      01180 ;          O   O   O   O   O   O   O   O
                      01181 ;
                      01182 ;          7   6   5   4   3   2   1   0
                      01183 ; PORT RE --- --- --- --- --- RED YEL GRN    All boards
                      01184 ;         ///////////////////////////////     4-Board DC
                      01185 ;                              O   O   O
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01186 ;
                      01187 ;------------------------------------------------------------------------------
                      01188 ; Significant Registers (ACCESS BANK)
                      01189 ;------------------------------------------------------------------------------
                      01190 ;
                      01191 ;                     ___7______6______5______4______3______2______1______0__
                      01192 ; ISR_TMPL_STATUS    |                                                       |
                      01193 ;                    | Temporary storage for STATUS register in low-pri ISR  |
                      01194 ;                    |______|______|______|______|______|______|______|______|
                      01195 ; ISR_TMPL_BSR       |                                                       |
                      01196 ;                    | Temporary storage for BSR register in low-priority ISR|
                      01197 ;                    |______|______|______|______|______|______|______|______|
                      01198 ; ISR_TMPL_WREG      |                                                       |
                      01199 ;                    | Temporary storage for W register in low-priority ISR  |
                      01200 ;                    |______|______|______|______|______|______|______|______|
                      01201 ; MY_ADDRESS         |                           |                           |
                      01202 ;                    |                           |       Unit address        |
                      01203 ;                    |______|______|______|______|______|______|______|______|
                      01204 ; PHASE_OFFSETH      |                                                       |
                      01205 ;                    |               Phase offset value (MSB)                |
                      01206 ;                    |______|______|______|______|______|______|______|______|
                      01207 ; PHASE_OFFSETL      |                                                       |
                      01208 ;                    |               Phase offset value (LSB)                |
                      01209 ;                    |______|______|______|______|______|______|______|______|
                      01210 ; SSR_STATE          |      |      |SLICE |PRIV_ |SLEEP |DRAIN |PRE_  |TEST_ |
                      01211 ;                    |INCYC |PRECYC| _UPD | MODE |_MODE |_TR   |PRIV  |MODE  |
                      01212 ;                    |______|______|______|______|______|______|______|______|
                      01213 ; SSR_STATE2         |TEST_ |TEST_ |TEST_ |ALL_  |PRIV_ |INHIBI|MSB_  |LITER |
                      01214 ;                    |PAUSE |UPD   |BUTTON|OFF   |FORBID|T_OUTP|ESC   |AL_ESC|
                      01215 ;                    |______|______|______|______|______|UT____|______|______|
                      01216 ; DMX_SLOTH          |DMX_EN|DMX_  |DMX_  |                           |DMX Sl|
                      01217 ;                    |      |SPEED |FRAME |                           |ot MSB|
                      01218 ;                    |______|______|______|______|______|______|______|______|
                      01219 ; DMX_SLOTL          |                                                       |
                      01220 ;                    |       Starting DMX Slot Number - 1 (low 8 bits)       |
                      01221 ;                    |______|______|______|______|______|______|______|______|
                      01222 ; YY_STATE           |                                                       |
                      01223 ;                    |                      Parser State                     |
                      01224 ;                    |______|______|______|______|______|______|______|______|
                      01225 ; YY_COMMAND         |                                                       |
                      01226 ;                    |                      Command Code                     |
                      01227 ;                    |______|______|______|______|______|______|______|______|
                      01228 ; YY_CMD_FLAGS       |                                                       |
                      01229 ;                    |               Command-specific Flag Bits              |
                      01230 ;                    |______|______|______|______|______|______|______|______|
                      01231 ; YY_DATA            |                                                       |
                      01232 ;                    |                      Command Data                     |
                      01233 ;                    |______|______|______|______|______|______|______|______|
                      01234 ; YY_LOOKAHEAD_MAX   |                                                       |
                      01235 ;                    |               Maximum length for look-ahead           |
                      01236 ;                    |______|______|______|______|______|______|______|______|
                      01237 ; YY_LOOK_FOR        |                                                       |
                      01238 ;                    |               Sentinel value to search for            |
                      01239 ;                    |______|______|______|______|______|______|______|______|
                      01240 ; YY_BUF_IDX         |                                                       |
                      01241 ;                    |     Offset in YY_BUFFER where we will write next      |
                      01242 ;                    |______|______|______|______|______|______|______|______|
                      01243 ; YY_NEXT_STATE      |                                                       |
                      01244 ;                    |     State to transition to when YY_LOOK_FOR is found  |
                      01245 ;                    |______|______|______|______|______|______|______|______|
                      01246 ; YY_YY              |                                                       |
                      01247 ;                    |     General-purpose storage for use inside commands   |
                      01248 ;                    |______|______|______|______|______|______|______|______|
                      01249 ; LAST_ERROR         |                                                       |
                      01250 ;                    |  Last error code encountered (cleared when reported)  |
                      01251 ;                    |______|______|______|______|______|______|______|______|
                      01252 ; CUR_PREH           |                                                       |
                      01253 ;                    |         Pre-cycle count-down ticks left (MSB)         |
                      01254 ;                    |______|______|______|______|______|______|______|______|
                      01255 ; CUR_PRE            |                                                       |
                      01256 ;                    |         Pre-cycle count-down ticks left (LSB)         |
                      01257 ;                    |______|______|______|______|______|______|______|______|
                      01258 ; CUR_SLICE          |                                                       |
                      01259 ;                    |      Slice number within active portion of cycle      |
                      01260 ;                    |______|______|______|______|______|______|______|______|
                      01261 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01262 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01263 ;                    |______|______|______|______|______|______|______|______|
                      01264 ; OPTION_DEBOUNCE    |                                                       |
                      01265 ;                    |      Counter to debounce OPTION button presses        |
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01266 ;                    |______|______|______|______|______|______|______|______|
                      01267 ; OPTION_HOLD        |                                                       |
                      01268 ;                    |      Counter for how long OPTION button is held       |
                      01269 ;                    |______|______|______|______|______|______|______|______|
                      01270 ; TEST_CYCLE         |                                                       |
                      01271 ;                    |        Count-down of ZC cycles until next step        |
                      01272 ;                    |______|______|______|______|______|______|______|______|
                      01273 ; TEST_SSR           |             |                                         |
                      01274 ;                    |             |  current SSR being tested               |
                      01275 ;                    |______|______|______|______|______|______|______|______|
                      01276 ; AUTO_OFF_CTRH      |                                                       |
                      01277 ;                    |         countdown register until auto-power-off (MSB) |
                      01278 ;                    |______|______|______|______|______|______|______|______|
                      01279 ; AUTO_OFF_CTRL      |                                                       |
                      01280 ;                    |         countdown register until auto-power-off (LSB) |
                      01281 ;                    |______|______|______|______|______|______|______|______|
                      01282 ; I                  |                                                       |
                      01283 ;                    |      General-purpose local counter variable           |
                      01284 ;                    |______|______|______|______|______|______|______|______|
                      01285 ; J                  |                                                       |
                      01286 ;                    |      General-purpose local counter variable           |
                      01287 ;                    |______|______|______|______|______|______|______|______|
                      01288 ; K                  |                                                       |
                      01289 ;                    |      General-purpose local counter variable           |
                      01290 ;                    |______|______|______|______|______|______|______|______|
                      01291 ; KK                 |                                                       |
                      01292 ;                    |      General-purpose local counter variable           |
                      01293 ;                    |______|______|______|______|______|______|______|______|
                      01294 ; TR_I               |                                                       |
                      01295 ;                    |      T/R delay timer delay counter                    |
                      01296 ;                    |______|______|______|______|______|______|______|______|
                      01297 ;
                      01298 ;
                      01299 ;------------------------------------------------------------------------------
                      01300 ; (SSR_DATA_BANK)
                      01301 ;------------------------------------------------------------------------------
                      01302 ;
                      01303 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      01304 ;
                      01305 ;                     ___7______6______5______4______3______2______1______0__
                      01306 ; SSR_00_VALUE       |                                                       |
                      01307 ;                    | Brightness value of SSR #00 (00=off, ... FF=fully on) |
                      01308 ;                    |______|______|______|______|______|______|______|______|
                      01309 ;                    |                                                       |
                      01310 ;                    | Brightness value of SSR #01 (00=off, ... FF=fully on) |
                      01311 ;                    |______|______|______|______|______|______|______|______|
                      01312 ;                                                .
                      01313 ;                                                .
                      01314 ;                     ___________________________.___________________________
                      01315 ;                    |                                                       |
                      01316 ;                    | Brightness value of SSR #23 (00=off, ... FF=fully on) |
                      01317 ;                    |______|______|______|______|______|______|______|______|
                      01318 ;                    |                                                       |
                      01319 ;                    | Brightness value of Green   (00=off, ... FF=fully on) |
                      01320 ;                    |______|______|______|______|______|______|______|______|
                      01321 ;                    |                                                       |
                      01322 ;                    | Brightness value of Yellow  (00=off, ... FF=fully on) |
                      01323 ;                    |______|______|______|______|______|______|______|______|
                      01324 ;                    |                                                       |
                      01325 ;                    | Brightness value of Red     (00=off, ... FF=fully on) |
                      01326 ;                    |______|______|______|______|______|______|______|______|
                      01327 ;                    | IF MASTER/STANDALONE:                                 |
                      01328 ;                    | Brightness value of Active  (00=off, ... FF=fully on) |
                      01329 ;                    |______|______|______|______|______|______|______|______|
                      01330 ; SSR_00_FLAGS       | FADE | FADE | FADE_|MAX_OF|      |      |      |      |
                      01331 ;                    | _UP  | _DOWN| CYCLE|F_TIME|      |      |      |      |
                      01332 ;                    |______|______|______|______|______|______|______|______|
                      01333 ;                                                .
                      01334 ;                                                .
                      01335 ;                     ___________________________.___________________________
                      01336 ; SSR_00_STEP        |                                                       |
                      01337 ;                    |          Brightness increment (0..255)                |
                      01338 ;                    |______|______|______|______|______|______|______|______|
                      01339 ;                                                .
                      01340 ;                                                .
                      01341 ;                     ___________________________.___________________________
                      01342 ; SSR_00_SPEED       |                                                       |
                      01343 ;                    |          Cycles between each step (0..255)            |
                      01344 ;                    |______|______|______|______|______|______|______|______|
                      01345 ;                                                .
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01346 ;                                                .
                      01347 ;                     ___________________________.___________________________
                      01348 ; SSR_00_COUNTER     |                                                       |
                      01349 ;                    |          Cycles until next step (0..255)              |
                      01350 ;                    |______|______|______|______|______|______|______|______|
                      01351 ;                                                .
                      01352 ;                                                .
                      01353 ;                                                .                           
                      01354 #include "lumos_ssr_state.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00006 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00007 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00008 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 4-, 24-, AND 48-CH AC/DC  @@
                      00009 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00010 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 AND   @@
                      00011 ;@@ @@@@@   @@@   @   @   @@@    @@@          PIC18F14K50 CHIPS             @@
                      00012 ;@@                                                                         @@
                      00013 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00014 ;
                      00015 ; Copyright (c) 2015 by Steven L. Willoughby, Aloha, Oregon, USA.  All Rights
                      00016 ; Reserved.  Released under the terms and conditions of the Open Software
                      00017 ; License, version 3.0.
                      00018 ;
                      00019 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00020 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00021 ;
                      00022 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00023 ;
                      00024 ; SSR state register bits
                      00025 ;
                      00026 ;==============================================================================
                      00027 ; SSR STATE BITS      
                      00028 ;==============================================================================
                      00029 ;                     ___7______6______5______4______3______2______1______0__
                      00030 ; SSR_STATE          |      |      |SLICE |PRIV_ |SLEEP |DRAIN |PRE_  |TEST_ |
                      00031 ;                    |INCYC |PRECYC| _UPD | MODE |_MODE |_TR   |PRIV  |MODE  |
                      00032 ;                    |______|______|______|______|______|______|______|______|
                      00033 ; SSR_STATE2         |TEST_ |TEST_ |TEST_ |ALL_  |PRIV_ |INHIBI|MSB_  |LITER |
                      00034 ;                    |PAUSE |UPD   |BUTTON|OFF   |FORBID|T_OUTP|ESC   |AL_ESC|
                      00035 ;                    |______|______|______|______|______|UT____|______|______|
                      00036 ;
  00000007            00037 INCYC           EQU     7
  00000006            00038 PRECYC          EQU     6
  00000005            00039 SLICE_UPD       EQU     5
  00000004            00040 PRIV_MODE       EQU     4
  00000003            00041 SLEEP_MODE      EQU     3
  00000002            00042 DRAIN_TR        EQU     2
  00000001            00043 PRE_PRIV        EQU     1
  00000000            00044 TEST_MODE       EQU     0
                      00045 
  00000007            00046 TEST_PAUSE      EQU     7
  00000006            00047 TEST_UPD        EQU     6
  00000005            00048 TEST_BUTTON     EQU     5
  00000004            00049 ALL_OFF         EQU     4
  00000003            00050 PRIV_FORBID     EQU     3
  00000002            00051 INHIBIT_OUTPUT  EQU     2
  00000001            00052 MSB_ESC         EQU     1
  00000000            00053 LITERAL_ESC     EQU     0
                      01355 
                      01356 ; YY_CMD_FLAGS holds various command flag bits
                      01357 ;
  00000007            01358 YCF_RAMP_CYCLE  EQU     7       ; 1-------  Ramp should cycle now
                      01359                                 ; -XXXXXXX  Unassigned
                      01360 ;
                      01361 ; DMX_SLOTH contains these flags and the high-order bit of the DMX channel
                      01362 ;
                      01363         IF DMX_ENABLED
                      01364 DMX_EN          EQU     7       ; 1-------  DMX mode enabled
                      01365 DMX_SPEED       EQU     6       ; -1------  UART at DMX speed now
                      01366 DMX_FRAME       EQU     5       ; --1-----  Start of frame detected
                      01367 ;                               ; ---XXXX-  Reserved
                      01368 DMX_BIT8        EQU     0       ; -------1  MSB of DMX channel
                      01369         ENDIF
                      01370 
                      01371 ;
                      01372 ; TARGET_SSR has these flags:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01373 ;                     _______________________________________________________
                      01374 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01375 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01376 ;                    |______|______|______|______|______|______|______|______|
                      01377 ;
  00000007            01378 NOT_MY_SSR      EQU     7
  00000006            01379 INVALID_SSR     EQU     6               ; MUST be bit 6
  0000003F            01380 TARGET_SSR_MSK  EQU     0x3F
                      01381 
                      01382 
                      01383 ;
                      01384 ; CHIP-SPECIFIC PORT/PIN MAPPINGS
                      01385 ;
                      01386 ; 48-Channel board (master CPU)
                      01387 ;
                      01388                 IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      01389 PORT_RX          EQU    PORTC
                      01390 BIT_RX           EQU    7
                      01391 
                      01392 HAS_T_R          EQU    0
                      01393 HAS_ACTIVE       EQU    1
                      01394 HAS_SENSORS      EQU    1
                      01395 HAS_OPTION       EQU    1
                      01396 HAS_STATUS_LEDS  EQU    1
                      01397 HAS_POWER_CTRL   EQU    1
                      01398 
                      01399 TRIS_SENS_A      EQU    TRISE   ; Sensor A == RED LED
                      01400 PORT_SENS_A      EQU    PORTE   ; Sensor A == RED LED
                      01401 BIT_SENS_A       EQU    2       ; Sensor A == RED LED
                      01402 TRIS_SENS_B      EQU    TRISE   ; Sensor B == GREEN LED
                      01403 PORT_SENS_B      EQU    PORTE   ; Sensor B == GREEN LED
                      01404 PLAT_SENS_B      EQU    LATE    ; Sensor B == GREEN LED
                      01405 BIT_SENS_B       EQU    0       ; Sensor B == GREEN LED
                      01406 TRIS_SENS_C      EQU    TRISA   ; Sensor C == ACTIVE LED
                      01407 PORT_SENS_C      EQU    PORTA   ; Sensor C == ACTIVE LED
                      01408 BIT_SENS_C       EQU    5       ; Sensor C == ACTIVE LED
                      01409 TRIS_SENS_D      EQU    TRISE   ; Sensor D == YELLOW LED
                      01410 PORT_SENS_D      EQU    PORTE   ; Sensor D == YELLOW LED
                      01411 BIT_SENS_D       EQU    1       ; Sensor D == YELLOW LED
                      01412 
                      01413 PLAT_ACTIVE      EQU    LATA
                      01414 PLAT_RED         EQU    LATE
                      01415 PLAT_YELLOW      EQU    LATE
                      01416 PLAT_GREEN       EQU    LATE
                      01417 BIT_ACTIVE       EQU    5
                      01418 BIT_RED          EQU    2
                      01419 BIT_YELLOW       EQU    1
                      01420 BIT_GREEN        EQU    0
                      01421 
                      01422 PORT_OPTION      EQU    PORTB
                      01423 BIT_OPTION       EQU    6
                      01424 
                      01425 PLAT_PWR_ON      EQU    LATB
                      01426 BIT_PWR_ON       EQU    7
                      01427 
                      01428 PLAT_0           EQU    LATC
                      01429 PLAT_1           EQU    LATC
                      01430 PLAT_2           EQU    LATC
                      01431 PLAT_3           EQU    LATC
                      01432 PLAT_4           EQU    LATC
                      01433 PLAT_5           EQU    LATD
                      01434 PLAT_6           EQU    LATD
                      01435 PLAT_7           EQU    LATB
                      01436 PLAT_8           EQU    LATA
                      01437 PLAT_9           EQU    LATB
                      01438 PLAT_10          EQU    LATA
                      01439 PLAT_11          EQU    LATB
                      01440 PLAT_12          EQU    LATA
                      01441 PLAT_13          EQU    LATB
                      01442 PLAT_14          EQU    LATA
                      01443 PLAT_15          EQU    LATB
                      01444 PLAT_16          EQU    LATA
                      01445 PLAT_17          EQU    LATD
                      01446 PLAT_18          EQU    LATD
                      01447 PLAT_19          EQU    LATC
                      01448 PLAT_20          EQU    LATD
                      01449 PLAT_21          EQU    LATD
                      01450 PLAT_22          EQU    LATD
                      01451 PLAT_23          EQU    LATD
                      01452 
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01453 BIT_0            EQU    4
                      01454 BIT_1            EQU    3
                      01455 BIT_2            EQU    5
                      01456 BIT_3            EQU    2
                      01457 BIT_4            EQU    0
                      01458 BIT_5            EQU    5
                      01459 BIT_6            EQU    6
                      01460 BIT_7            EQU    1
                      01461 BIT_8            EQU    4
                      01462 BIT_9            EQU    2
                      01463 BIT_10           EQU    3
                      01464 BIT_11           EQU    3
                      01465 BIT_12           EQU    2
                      01466 BIT_13           EQU    4
                      01467 BIT_14           EQU    1
                      01468 BIT_15           EQU    5
                      01469 BIT_16           EQU    0
                      01470 BIT_17           EQU    7
                      01471 BIT_18           EQU    4
                      01472 BIT_19           EQU    1
                      01473 BIT_20           EQU    2
                      01474 BIT_21           EQU    1
                      01475 BIT_22           EQU    3
                      01476 BIT_23           EQU    0
                      01477 
                      01478 SSR_LIGHTS       EQU    24      ; first light ID (as opposed to SSR)
                      01479                 ELSE
                      01480                  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      01481 ;
                      01482 ; 48-Channel Board (slave CPU)
                      01483 ;
                      01484 PORT_RX           EQU   PORTC
                      01485 BIT_RX            EQU   7
                      01486 
                      01487 HAS_T_R           EQU   1
                      01488 HAS_ACTIVE        EQU   0
                      01489 HAS_SENSORS       EQU   0
                      01490 HAS_OPTION        EQU   0
                      01491 HAS_STATUS_LEDS   EQU   1
                      01492 HAS_POWER_CTRL    EQU   1
                      01493 
                      01494 PLAT_T_R          EQU   LATA
                      01495 PORT_T_R          EQU   PORTA
                      01496 TRIS_T_R          EQU   TRISA
                      01497 BIT_T_R           EQU   5
                      01498 
                      01499 PLAT_RED          EQU   LATE
                      01500 PLAT_YELLOW       EQU   LATE
                      01501 PLAT_GREEN        EQU   LATE
                      01502 
                      01503 BIT_RED           EQU   2
                      01504 BIT_YELLOW        EQU   1
                      01505 BIT_GREEN         EQU   0
                      01506 
                      01507 PLAT_PWR_ON       EQU   LATB
                      01508 BIT_PWR_ON        EQU   7
                      01509 
                      01510 PLAT_0            EQU   LATC
                      01511 PLAT_1            EQU   LATC
                      01512 PLAT_2            EQU   LATC
                      01513 PLAT_3            EQU   LATC
                      01514 PLAT_4            EQU   LATC
                      01515 PLAT_5            EQU   LATD
                      01516 PLAT_6            EQU   LATD
                      01517 PLAT_7            EQU   LATB
                      01518 PLAT_8            EQU   LATA
                      01519 PLAT_9            EQU   LATB
                      01520 PLAT_10           EQU   LATA
                      01521 PLAT_11           EQU   LATB
                      01522 PLAT_12           EQU   LATA
                      01523 PLAT_13           EQU   LATB
                      01524 PLAT_14           EQU   LATA
                      01525 PLAT_15           EQU   LATB
                      01526 PLAT_16           EQU   LATA
                      01527 PLAT_17           EQU   LATD
                      01528 PLAT_18           EQU   LATD
                      01529 PLAT_19           EQU   LATC
                      01530 PLAT_20           EQU   LATD
                      01531 PLAT_21           EQU   LATD
                      01532 PLAT_22           EQU   LATD
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01533 PLAT_23           EQU   LATD
                      01534 
                      01535 BIT_0             EQU   4
                      01536 BIT_1             EQU   3
                      01537 BIT_2             EQU   5
                      01538 BIT_3             EQU   2
                      01539 BIT_4             EQU   0
                      01540 BIT_5             EQU   5
                      01541 BIT_6             EQU   6
                      01542 BIT_7             EQU   1
                      01543 BIT_8             EQU   4
                      01544 BIT_9             EQU   2
                      01545 BIT_10            EQU   3
                      01546 BIT_11            EQU   3
                      01547 BIT_12            EQU   2
                      01548 BIT_13            EQU   4
                      01549 BIT_14            EQU   1
                      01550 BIT_15            EQU   5
                      01551 BIT_16            EQU   0
                      01552 BIT_17            EQU   7
                      01553 BIT_18            EQU   4
                      01554 BIT_19            EQU   1
                      01555 BIT_20            EQU   2
                      01556 BIT_21            EQU   1
                      01557 BIT_22            EQU   3
                      01558 BIT_23            EQU   0
                      01559 
                      01560 SSR_LIGHTS        EQU   24      ; first light ID (as opposed to SSR)
                      01561                  ELSE
                      01562                   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      01563 ;
                      01564 ; 24-Channel board (Standalone CPU)
                      01565 ;
                      01566 PORT_RX            EQU  PORTC
                      01567 BIT_RX             EQU  7
                      01568 
                      01569 HAS_T_R            EQU  1
                      01570 HAS_ACTIVE         EQU  1
                      01571 HAS_SENSORS        EQU  1
                      01572 HAS_OPTION         EQU  1
                      01573 HAS_STATUS_LEDS    EQU  1
                      01574 HAS_POWER_CTRL     EQU  1
                      01575 
                      01576 TRIS_SENS_A        EQU  TRISE   ; Sensor A == RED LED
                      01577 PORT_SENS_A        EQU  PORTE   ; Sensor A == RED LED
                      01578 BIT_SENS_A         EQU  2       ; Sensor A == RED LED
                      01579 TRIS_SENS_B        EQU  TRISE   ; Sensor B == GREEN LED
                      01580 PORT_SENS_B        EQU  PORTE   ; Sensor B == GREEN LED
                      01581 PLAT_SENS_B        EQU  LATE    ; Sensor B == GREEN LED
                      01582 BIT_SENS_B         EQU  0       ; Sensor B == GREEN LED
                      01583 TRIS_SENS_C        EQU  TRISA   ; Sensor C == ACTIVE LED
                      01584 PORT_SENS_C        EQU  PORTA   ; Sensor C == ACTIVE LED
                      01585 BIT_SENS_C         EQU  5       ; Sensor C == ACTIVE LED
                      01586 TRIS_SENS_D        EQU  TRISE   ; Sensor D == YELLOW LED
                      01587 PORT_SENS_D        EQU  PORTE   ; Sensor D == YELLOW LED
                      01588 BIT_SENS_D         EQU  1       ; Sensor D == YELLOW LED
                      01589 
                      01590 PLAT_T_R           EQU  LATB
                      01591 PORT_T_R           EQU  PORTB
                      01592 TRIS_T_R           EQU  TRISB
                      01593 BIT_T_R            EQU  0
                      01594 
                      01595 PLAT_ACTIVE        EQU  LATA
                      01596 PLAT_RED           EQU  LATE
                      01597 PLAT_YELLOW        EQU  LATE
                      01598 PLAT_GREEN         EQU  LATE
                      01599 BIT_ACTIVE         EQU  5
                      01600 BIT_RED            EQU  2
                      01601 BIT_YELLOW         EQU  1
                      01602 BIT_GREEN          EQU  0
                      01603 
                      01604 PORT_OPTION        EQU  PORTB
                      01605 BIT_OPTION         EQU  6
                      01606 
                      01607 PLAT_PWR_ON        EQU  LATB
                      01608 BIT_PWR_ON         EQU  7
                      01609 
                      01610 PLAT_0             EQU  LATB
                      01611 PLAT_1             EQU  LATB
                      01612 PLAT_2             EQU  LATB
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01613 PLAT_3             EQU  LATB
                      01614 PLAT_4             EQU  LATB
                      01615 PLAT_5             EQU  LATD
                      01616 PLAT_6             EQU  LATD
                      01617 PLAT_7             EQU  LATD
                      01618 PLAT_8             EQU  LATD
                      01619 PLAT_9             EQU  LATC
                      01620 PLAT_10            EQU  LATC
                      01621 PLAT_11            EQU  LATD
                      01622 PLAT_12            EQU  LATD
                      01623 PLAT_13            EQU  LATD
                      01624 PLAT_14            EQU  LATD
                      01625 PLAT_15            EQU  LATC
                      01626 PLAT_16            EQU  LATC
                      01627 PLAT_17            EQU  LATC
                      01628 PLAT_18            EQU  LATC
                      01629 PLAT_19            EQU  LATA
                      01630 PLAT_20            EQU  LATA
                      01631 PLAT_21            EQU  LATA
                      01632 PLAT_22            EQU  LATA
                      01633 PLAT_23            EQU  LATA
                      01634 
                      01635 BIT_0              EQU  5
                      01636 BIT_1              EQU  4
                      01637 BIT_2              EQU  3
                      01638 BIT_3              EQU  2
                      01639 BIT_4              EQU  1
                      01640 BIT_5              EQU  7
                      01641 BIT_6              EQU  6
                      01642 BIT_7              EQU  5
                      01643 BIT_8              EQU  4
                      01644 BIT_9              EQU  5
                      01645 BIT_10             EQU  4
                      01646 BIT_11             EQU  3
                      01647 BIT_12             EQU  2
                      01648 BIT_13             EQU  1
                      01649 BIT_14             EQU  0
                      01650 BIT_15             EQU  3
                      01651 BIT_16             EQU  2
                      01652 BIT_17             EQU  1
                      01653 BIT_18             EQU  0
                      01654 BIT_19             EQU  4
                      01655 BIT_20             EQU  3
                      01656 BIT_21             EQU  2
                      01657 BIT_22             EQU  1
                      01658 BIT_23             EQU  0
                      01659 
                      01660 SSR_LIGHTS         EQU  24      ; first light ID (as opposed to SSR)
                      01661                   ELSE
                      01662                    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      01663 ;
                      01664 ; 4-Channel Board (Mini Standalone CPU)
                      01665 ;
                      01666 PORT_RX             EQU PORTB
                      01667 BIT_RX              EQU 5
                      01668 
                      01669 HAS_T_R             EQU 1
                      01670 HAS_ACTIVE          EQU 1
                      01671 HAS_SENSORS         EQU 1
                      01672 HAS_OPTION          EQU 1
                      01673 HAS_STATUS_LEDS     EQU 1
                      01674 HAS_POWER_CTRL      EQU 0
                      01675 
                      01676 TRIS_SENS_A         EQU TRISC   ; Sensor A == ACTIVE LED
                      01677 PORT_SENS_A         EQU PORTC   ; Sensor A == ACTIVE LED
                      01678 BIT_SENS_A          EQU 5       ; Sensor A == ACTIVE LED
                      01679 TRIS_SENS_B         EQU TRISC   ; Sensor B == RED LED
                      01680 PORT_SENS_B         EQU PORTC   ; Sensor B == RED LED
                      01681 PLAT_SENS_B         EQU LATC    ; Sensor B == RED LED
                      01682 BIT_SENS_B          EQU 6       ; Sensor B == RED LED
                      01683 TRIS_SENS_C         EQU TRISC   ; Sensor C == YELLOW LED
                      01684 PORT_SENS_C         EQU PORTC   ; Sensor C == YELLOW LED
                      01685 BIT_SENS_C          EQU 3       ; Sensor C == YELLOW LED
                      01686 TRIS_SENS_D         EQU TRISC   ; Sensor D
                      01687 PORT_SENS_D         EQU PORTC   ; Sensor D
                      01688 BIT_SENS_D          EQU 7       ; Sensor D
                      01689 
                      01690 PLAT_T_R            EQU LATB
                      01691 PORT_T_R            EQU PORTB
                      01692 TRIS_T_R            EQU TRISB
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01693 BIT_T_R             EQU 6
                      01694 
                      01695 PLAT_ACTIVE         EQU LATC
                      01696 PLAT_RED            EQU LATC
                      01697 PLAT_YELLOW         EQU LATC
                      01698 PLAT_GREEN          EQU LATC
                      01699 BIT_ACTIVE          EQU 5
                      01700 BIT_RED             EQU 6
                      01701 BIT_YELLOW          EQU 3
                      01702 BIT_GREEN           EQU 4
                      01703 
                      01704 PORT_OPTION         EQU PORTA
                      01705 BIT_OPTION          EQU 1
                      01706 
                      01707 PLAT_PWR_ON         EQU LATA    ; This doesn't actually reach the hardware
                      01708 BIT_PWR_ON          EQU 0       ; but it's harmless to set the bit.
                      01709 
                      01710 PLAT_0              EQU LATC
                      01711 PLAT_1              EQU LATC
                      01712 PLAT_2              EQU LATC
                      01713 PLAT_3              EQU LATB
                      01714 
                      01715 BIT_0               EQU 0
                      01716 BIT_1               EQU 1
                      01717 BIT_2               EQU 2
                      01718 BIT_3               EQU 4
                      01719 
                      01720 SSR_LIGHTS          EQU 4       ; first light ID (as opposed to SSR)
                      01721                    ELSE
                      01722                     IF QSCC_PORT
                      01723                      #include "qscc_hook_main_pins.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos device initialization code which sets up I/O pins.
                      00027 ; We want them arranged differently than the Lumos controllers do, but we put
                      00028 ; the QuizShow code here to keep the Lumos product clean and separate.
                      00029 ; 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_main_pins only used for QS*C systems"
                      00032         ENDIF
                      00033 
                      00034 ;
                      00035 ; QSCC
                      00036 ;
                      00037                     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00038 N_BUTTONS            EQU        .6      ; X L A B C D
                      00039 BTN_IDX_X0           EQU        .0
                      00040 BTN_IDX_L0           EQU        .1
                      00041 BTN_IDX_A0           EQU        .2
                      00042 BTN_IDX_B0           EQU        .3
                      00043 BTN_IDX_C0           EQU        .4
                      00044 BTN_IDX_D0           EQU        .5
                      00045 PORT_X0              EQU        PORTA
                      00046 PORT_L0              EQU        PORTA
                      00047 PORT_A0              EQU        PORTA
                      00048 PORT_B0              EQU        PORTA
                      00049 PORT_C0              EQU        PORTA
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00050 PORT_D0              EQU        PORTA
                      00051 BIT_X0               EQU        1
                      00052 BIT_L0               EQU        0
                      00053 BIT_A0               EQU        5
                      00054 BIT_B0               EQU        4
                      00055 BIT_C0               EQU        3
                      00056 BIT_D0               EQU        2
                      00057 
                      00058 QS_SENS_PORT         EQU        PORTA           ;      76543210
                      00059 QS_SENS_MASK         EQU        B'00111111'     ; RA:  00ABCDXL
                      00060 QS_SENS_CONF         EQU        B'00101000'     ; A+C -> config mode
                      00061 
                      00062 PORT_RX              EQU        PORTC
                      00063 BIT_RX               EQU        7
                      00064 
                      00065 HAS_T_R              EQU        1
                      00066 HAS_ACTIVE           EQU        0
                      00067 HAS_SENSORS          EQU        0
                      00068 HAS_OPTION           EQU        0
                      00069 HAS_STATUS_LEDS      EQU        0
                      00070 HAS_POWER_CTRL       EQU        0
                      00071 
                      00072 PLAT_T_R             EQU        LATC
                      00073 PORT_T_R             EQU        PORTC
                      00074 TRIS_T_R             EQU        TRISC
                      00075 BIT_T_R              EQU        3
                      00076 
                      00077 CHAN_X0R             EQU        .0
                      00078 CHAN_X0G             EQU        .1
                      00079 CHAN_X0B             EQU        .2
                      00080 CHAN_L0R             EQU        .3
                      00081 CHAN_L0Y             EQU        .4
                      00082 CHAN_L0G             EQU        .5
                      00083 CHAN_A0L             EQU        .6
                      00084 CHAN_B0L             EQU        .7
                      00085 CHAN_C0L             EQU        .8
                      00086 CHAN_D0L             EQU        .9
                      00087 CHAN_F_R             EQU        .10
                      00088 CHAN_F_G             EQU        .11
                      00089 CHAN_F_B             EQU        .12
                      00090 CHAN_F_W             EQU        .13
                      00091 
                      00092 PLAT_0               EQU        LATC    ; XR
                      00093 PLAT_1               EQU        LATC    ; XG
                      00094 PLAT_2               EQU        LATC    ; XB
                      00095 PLAT_3               EQU        LATE    ; LR
                      00096 PLAT_4               EQU        LATE    ; LY
                      00097 PLAT_5               EQU        LATE    ; LG
                      00098 PLAT_6               EQU        LATB    ; AL
                      00099 PLAT_7               EQU        LATB    ; BL
                      00100 PLAT_8               EQU        LATB    ; CL
                      00101 PLAT_9               EQU        LATB    ; DL
                      00102 PLAT_10              EQU        LATB    ; FR
                      00103 PLAT_11              EQU        LATB    ; FG
                      00104 PLAT_12              EQU        LATB    ; FB
                      00105 PLAT_13              EQU        LATB    ; FW
                      00106 SSR_MAX              EQU        .13
                      00107 
                      00108 BIT_0                EQU        2       ; XR
                      00109 BIT_1                EQU        1       ; XG
                      00110 BIT_2                EQU        0       ; XB
                      00111 BIT_3                EQU        2       ; LR
                      00112 BIT_4                EQU        0       ; LY
                      00113 BIT_5                EQU        1       ; LG
                      00114 BIT_6                EQU        7       ; AL
                      00115 BIT_7                EQU        6       ; BL
                      00116 BIT_8                EQU        5       ; CL
                      00117 BIT_9                EQU        4       ; DL
                      00118 BIT_10               EQU        3       ; FR
                      00119 BIT_11               EQU        2       ; FG
                      00120 BIT_12               EQU        1       ; FB
                      00121 BIT_13               EQU        0       ; FW
                      00122 
                      00123                     ELSE
                      00124                      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
  0000000A            00125 N_BUTTONS             EQU       .10     ; X0 L0 X1 L1 ... X4 L4
  00000000            00126 BTN_IDX_X0            EQU       .0
  00000001            00127 BTN_IDX_L0            EQU       .1
  00000002            00128 BTN_IDX_X1            EQU       .2
  00000003            00129 BTN_IDX_L1            EQU       .3
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            00130 BTN_IDX_X2            EQU       .4
  00000005            00131 BTN_IDX_L2            EQU       .5
  00000006            00132 BTN_IDX_X3            EQU       .6
  00000007            00133 BTN_IDX_L3            EQU       .7
  00000008            00134 BTN_IDX_X4            EQU       .8
  00000009            00135 BTN_IDX_L4            EQU       .9
                      00136 
  00000F80            00137 QS_SENS_PORT          EQU       PORTA           ;      76543210
  0000003F            00138 QS_SENS_MASK          EQU       B'00111111'     ; RA:  00LXXLXL
  00000028            00139 QS_SENS_CONF          EQU       B'00101000'     ;        220011
  00000006            00140 QS_SENS_STAND         EQU       B'00000110'     ; L2+X0: CONF; X1+L0: stand
                      00141 
  00000F80            00142 PORT_X0               EQU       PORTA
  00000F80            00143 PORT_L0               EQU       PORTA
  00000F80            00144 PORT_X1               EQU       PORTA
  00000F80            00145 PORT_L1               EQU       PORTA
  00000F80            00146 PORT_X2               EQU       PORTA
  00000F80            00147 PORT_L2               EQU       PORTA
  00000F82            00148 PORT_X3               EQU       PORTC
  00000F83            00149 PORT_L3               EQU       PORTD
  00000F83            00150 PORT_X4               EQU       PORTD
  00000F82            00151 PORT_L4               EQU       PORTC
  00000003            00152 BIT_X0                EQU       3
  00000002            00153 BIT_L0                EQU       2
  00000001            00154 BIT_X1                EQU       1
  00000000            00155 BIT_L1                EQU       0
  00000004            00156 BIT_X2                EQU       4
  00000005            00157 BIT_L2                EQU       5
  00000004            00158 BIT_X3                EQU       4
  00000000            00159 BIT_L3                EQU       0
  00000004            00160 BIT_X4                EQU       4
  00000005            00161 BIT_L4                EQU       5
                      00162 
  00000F82            00163 PORT_RX               EQU       PORTC
  00000007            00164 BIT_RX                EQU       7
                      00165 
  00000001            00166 HAS_T_R               EQU       1
  00000000            00167 HAS_ACTIVE            EQU       0
  00000000            00168 HAS_SENSORS           EQU       0
  00000000            00169 HAS_OPTION            EQU       0
  00000000            00170 HAS_STATUS_LEDS       EQU       0
  00000000            00171 HAS_POWER_CTRL        EQU       0
                      00172 
  00000F8B            00173 PLAT_T_R              EQU       LATC
  00000F82            00174 PORT_T_R              EQU       PORTC
  00000F94            00175 TRIS_T_R              EQU       TRISC
  00000003            00176 BIT_T_R               EQU       3
                      00177 
  00000000            00178 CHAN_X0R              EQU       .0
  00000001            00179 CHAN_X0G              EQU       .1
  00000002            00180 CHAN_X0B              EQU       .2
  00000003            00181 CHAN_L0R              EQU       .3
  00000004            00182 CHAN_X1R              EQU       .4
  00000005            00183 CHAN_X1G              EQU       .5
  00000006            00184 CHAN_X1B              EQU       .6
  00000007            00185 CHAN_L1R              EQU       .7
  00000008            00186 CHAN_X2R              EQU       .8
  00000009            00187 CHAN_X2G              EQU       .9
  0000000A            00188 CHAN_X2B              EQU       .10
  0000000B            00189 CHAN_L2R              EQU       .11
  0000000C            00190 CHAN_X3R              EQU       .12
  0000000D            00191 CHAN_X3G              EQU       .13
  0000000E            00192 CHAN_X3B              EQU       .14
  0000000F            00193 CHAN_L3R              EQU       .15
  00000010            00194 CHAN_X4R              EQU       .16
  00000011            00195 CHAN_X4G              EQU       .17
  00000012            00196 CHAN_X4B              EQU       .18
  00000013            00197 CHAN_L4R              EQU       .19
  00000013            00198 CHAN_HB               EQU       CHAN_L4R
  00000F8B            00199 PLAT_0                EQU       LATC    ; X0R
  00000F8B            00200 PLAT_1                EQU       LATC    ; X0G
  00000F8B            00201 PLAT_2                EQU       LATC    ; X0B
  00000F8D            00202 PLAT_3                EQU       LATE    ; L0R
  00000F8A            00203 PLAT_4                EQU       LATB    ; X1R
  00000F8A            00204 PLAT_5                EQU       LATB    ; X1G
  00000F8A            00205 PLAT_6                EQU       LATB    ; X1B
  00000F8A            00206 PLAT_7                EQU       LATB    ; L1R
  00000F8A            00207 PLAT_8                EQU       LATB    ; X2R
  00000F8A            00208 PLAT_9                EQU       LATB    ; X2G
  00000F8A            00209 PLAT_10               EQU       LATB    ; X2B
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000F8D            00210 PLAT_11               EQU       LATE    ; L2R
  00000F8C            00211 PLAT_12               EQU       LATD    ; X3R
  00000F8C            00212 PLAT_13               EQU       LATD    ; X3G
  00000F8C            00213 PLAT_14               EQU       LATD    ; X3B
  00000F8D            00214 PLAT_15               EQU       LATE    ; L3R
  00000F8A            00215 PLAT_16               EQU       LATB    ; X4R
  00000F8C            00216 PLAT_17               EQU       LATD    ; X4G
  00000F8C            00217 PLAT_18               EQU       LATD    ; X4B
  00000F8C            00218 PLAT_19               EQU       LATD    ; L4R
  00000013            00219 SSR_MAX               EQU       .19
                      00220 
  00000002            00221 BIT_0                 EQU       2       ; X0R
  00000001            00222 BIT_1                 EQU       1       ; X0G
  00000000            00223 BIT_2                 EQU       0       ; X0B
  00000002            00224 BIT_3                 EQU       2       ; L0R
  00000007            00225 BIT_4                 EQU       7       ; X1R
  00000006            00226 BIT_5                 EQU       6       ; X1G
  00000005            00227 BIT_6                 EQU       5       ; X1B
  00000004            00228 BIT_7                 EQU       4       ; L1R
  00000003            00229 BIT_8                 EQU       3       ; X2R
  00000002            00230 BIT_9                 EQU       2       ; X2G
  00000001            00231 BIT_10                EQU       1       ; X2B
  00000000            00232 BIT_11                EQU       0       ; L2R
  00000007            00233 BIT_12                EQU       7       ; X3R
  00000006            00234 BIT_13                EQU       6       ; X3G
  00000005            00235 BIT_14                EQU       5       ; X3B
  00000001            00236 BIT_15                EQU       1       ; L3R
  00000000            00237 BIT_16                EQU       0       ; X4R
  00000003            00238 BIT_17                EQU       3       ; X4G
  00000001            00239 BIT_18                EQU       1       ; X4B
  00000002            00240 BIT_19                EQU       2       ; L4R
                      00241 
  00000001            00242 HAS_FACTORY_RESET    EQU        1       ; this unit has factory reset jumper support
                      00243                                         ; wire a special jumper plug for player #5
                      00244                                         ; to connect X input to PGD pin on ISCP port
                      00245                                         ; connect jumper, power on, then pull jumper
  00000000            00246 FRST_TRISTATE_TEST   EQU        0       ; need to change tristate bits for test pins
  00000F83            00247 FRST_RECEIVER_P      EQU        PORT_X4 ; pin to receive jumpered signal
  00000004            00248 FRST_RECEIVER_B      EQU        BIT_X4  ; bit to receive jumpered signal
  00000F8A            00249 FRST_SENDER_P        EQU        LATB    ; pin to send jumpered signal   PGD=<B7>
  00000007            00250 FRST_SENDER_B        EQU        7       ; bit to send jumpered signal
  00000F8C            00251 FRST_SIG_A_P         EQU        PLAT_19 ; lights to flash for factory reset (on)
  00000002            00252 FRST_SIG_A_B         EQU        BIT_19  ; lights to flash for factory reset
  00000F8B            00253 FRST_SIG_B_P         EQU        PLAT_0  ; lights to flash for factory reset (off)
  00000002            00254 FRST_SIG_B_B         EQU        BIT_0   ; lights to flash for factory reset
  00000F8B            00255 FRST_SIG_C_P         EQU        PLAT_2  ; lights to flash for factory reset (on)
  00000000            00256 FRST_SIG_C_B         EQU        BIT_2   ; lights to flash for factory reset
                      00257                      ENDIF
                      00258                     ENDIF
                      00259 
                      01724                     ELSE
                      01725                      ERROR "Invalid platform select"
                      01726                     ENDIF
                      01727                    ENDIF
                      01728                   ENDIF
                      01729                  ENDIF
                      01730                 ENDIF
                      01731 ;
                      01732 ; THESE SSR LINES ARE NEGATIVE-LOGIC CONTROLLED!
                      01733 ; (0=ON, 1=OFF)
                      01734 ;
                      01735 
                      01736 ; In this version, we have an array of outputs mapped with 0-255 values
                      01737 ; and another block of flags, etc. in SSR_DATA_BANK.
                      01738 ; We include the panel LEDs here, too, so we can handle them like the 
                      01739 ; others as far as timed patterns and display refreshes and the like.
                      01740 ;
                      01741 ; Offsets for panel lights
                      01742                         IF      HAS_STATUS_LEDS
                      01743 SSR_GREEN                EQU    SSR_LIGHTS+0    ; NOTE These are positive-logic, not negative like SSRs
                      01744 SSR_YELLOW               EQU    SSR_LIGHTS+1
                      01745 SSR_RED                  EQU    SSR_LIGHTS+2
                      01746 ;
                      01747 ;
                      01748 ; Aliases for macro expansion (continues SSR numbering into these too)
                      01749 ;
                      01750 PLAT_0                   EQU    PLAT_RED
                      01751 PLAT_0                   EQU    PLAT_YELLOW
                      01752 PLAT_0                   EQU    PLAT_GREEN
                      01753 BIT_0                    EQU    BIT_RED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01754 BIT_0                    EQU    BIT_YELLOW
                      01755 BIT_0                    EQU    BIT_GREEN
                      01756 ;
                      01757 ;
                      01758                          IF HAS_ACTIVE
                      01759 SSR_ACTIVE                EQU   SSR_LIGHTS+3
                      01760 PLAT_0                    EQU   PLAT_ACTIVE
                      01761 BIT_0                     EQU   BIT_ACTIVE
                      01762 SSR_MAX                   EQU   SSR_LIGHTS+3
                      01763                          ELSE
                      01764 SSR_MAX                   EQU   SSR_LIGHTS+2
                      01765                          ENDIF
                      01766                         ENDIF
                      01767 
                      01768                         IF HAS_STATUS_LEDS
                      01769 OUTPUT_CHAN_MAX          EQU    SSR_LIGHTS-1
                      01770                         ELSE
  00000013            01771 OUTPUT_CHAN_MAX          EQU    SSR_MAX
                      01772                         ENDIF
                      01773 
                      01774 WAIT_FOR_SENTINEL MACRO MAX_LEN, SENTINEL_VALUE, NEXT_STATE
                      01775          MOVLW  #v(MAX_LEN)
                      01776          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
                      01777          MOVLW  #v(SENTINEL_VALUE)
                      01778          MOVWF  YY_LOOK_FOR, ACCESS
                      01779          MOVLW  6                       ; -> state 6 (wait for end of packet)
                      01780          MOVWF  YY_STATE, ACCESS
                      01781          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
                      01782          MOVLW  #v(NEXT_STATE)
                      01783          MOVWF  YY_NEXT_STATE, ACCESS
                      01784         ENDM
                      01785 
  00000001            01786 ERR_CLASS_OVERRUN       EQU     1       ; ID dispatch overrun
  00000002            01787 ERR_CLASS_IN_VALID      EQU     2       ; Input validation failure
  00000003            01788 ERR_CLASS_FATAL_RESET   EQU     3       ; reset failure
  00000004            01789 ERR_CLASS_DEVICE        EQU     4       ; hardware issue
  00000005            01790 ERR_CLASS_INT_COMMAND   EQU     5       ; internal command invalid
                      01791 ERR_BUG MACRO   ERR_CODE, ERR_CLASS
                      01792          MOVLW  ERR_CODE
                      01793          MOVWF  LAST_ERROR, ACCESS
                      01794          IF HAS_ACTIVE
                      01795           SET_SSR_RAPID_FLASH SSR_ACTIVE
                      01796          ENDIF
                      01797          IF HAS_STATUS_LEDS
                      01798           SET_SSR_RAPID_FLASH SSR_YELLOW
                      01799           IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01800            SET_SSR_RAPID_FLASH SSR_RED
                      01801            SET_SSR_OFF SSR_GREEN
                      01802           ELSE
                      01803            SET_SSR_OFF SSR_RED
                      01804           ENDIF
                      01805          ENDIF
                      01806          IF ROLE_MASTER
                      01807           ; Send extra flags to slave
                      01808           MOVLW 0xF0
                      01809           CALL  SIO_WRITE_W
                      01810           MOVLW 0x21
                      01811           CALL  SIO_WRITE_W
                      01812           IF ERR_CLASS == ERR_CLASS_OVERRUN
                      01813            MOVLW B'00101000'
                      01814            CALL SIO_WRITE_W
                      01815            MOVLW B'00000000'
                      01816           ELSE
                      01817            IF ERR_CLASS == ERR_CLASS_IN_VALID
                      01818             MOVLW B'00111000'
                      01819             CALL SIO_WRITE_W
                      01820             MOVLW B'00000001'
                      01821            ELSE
                      01822             IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01823              MOVLW B'00101101'
                      01824              CALL SIO_WRITE_W
                      01825              MOVLW B'00000101'
                      01826             ELSE
                      01827              IF ERR_CLASS == ERR_CLASS_DEVICE
                      01828               MOVLW B'00111000'
                      01829               CALL SIO_WRITE_W
                      01830               MOVLW B'00000101'
                      01831              ELSE
                      01832               IF ERR_CLASS == ERR_CLASS_INT_COMMAND
                      01833                MOVLW B'00111000'
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01834                CALL SIO_WRITE_W
                      01835                MOVLW B'00000110'
                      01836               ELSE
                      01837                MOVLW B'00000101'
                      01838                CALL  SIO_WRITE_W
                      01839                MOVLW B'00000000'
                      01840               ENDIF
                      01841              ENDIF
                      01842             ENDIF
                      01843            ENDIF
                      01844           ENDIF
                      01845           CALL SIO_WRITE_W
                      01846          ENDIF
                      01847          CLRF   YY_STATE, ACCESS
                      01848          RETURN
                      01849         ENDM
                      01850 
                      01851 #include "lumos_set_ssr.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  
                      00018 ; Released under the terms and conditions of the Open Software
                      00019 ; License, version 3.0.
                      00020 ;
                      00021 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00022 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 #ifndef LUMOS_SET_SSR_INC
                      00027 #define LUMOS_SET_SSR_INC
                      00028 
                      00029  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000400            00030 SSR_DATA_BANK   EQU     0x400
  00000500            00031 MAIN_DATA       EQU     0x500
  000000C8            00032 YY_BUF_LEN      EQU     .200
                      00033  ELSE
                      00034   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00035 SSR_DATA_BANK   EQU     0x060
                      00036 MAIN_DATA       EQU     0x088
                      00037 YY_BUF_LEN      EQU     .90 
                      00038   ELSE
                      00039    ERROR "Invalid architecture switch for SSR_DATA_BANK"
                      00040   ENDIF
                      00041  ENDIF
                      00042 
                      00043 ;
                      00044 ; SSR_FLAGS words for each output show state information about those
                      00045 ; channels.
                      00046 ;
  00000007            00047 FADE_UP         EQU     7       ; 1-------  This channel is fading up
  00000006            00048 FADE_DOWN       EQU     6       ; -1------  This channel is fading down
  00000005            00049 FADE_CYCLE      EQU     5       ; --1-----  This channel is fading up<-->down
  00000004            00050 MAX_OFF_TIME    EQU     4       ; ---1----  Use maximum off-time in cycle
  00000080            00051 BIT_FADE_UP     EQU     0x80
  00000040            00052 BIT_FADE_DOWN   EQU     0x40
  00000020            00053 BIT_FADE_CYCLE  EQU     0x20
  00000010            00054 BIT_MAX_OFF_TIME EQU    0x10
                      00055 
                      00056 SET_SSR_VALUE MACRO IDX, LEVEL
                      00057         BANKSEL SSR_DATA_BANK
                      00058          MOVLW  LEVEL
                      00059          MOVWF  SSR_00_VALUE+IDX, BANKED
                      00060          CLRF   SSR_00_STEP+IDX, BANKED
                      00061          CLRF   SSR_00_SPEED+IDX, BANKED
                      00062          CLRF   SSR_00_COUNTER+IDX, BANKED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00063          CLRF   SSR_00_FLAGS+IDX, BANKED
                      00064         ENDM
                      00065 
                      00066 SET_SSR_PATTERN MACRO IDX, LEVEL, STEP, SPEED, FLAGS
                      00067         BANKSEL SSR_DATA_BANK
                      00068          MOVLW  LEVEL
                      00069          MOVWF  SSR_00_VALUE+IDX, BANKED
                      00070          MOVLW  STEP
                      00071          MOVWF  SSR_00_STEP+IDX, BANKED
                      00072          MOVLW  SPEED
                      00073          MOVWF  SSR_00_SPEED+IDX, BANKED
                      00074          MOVWF  SSR_00_COUNTER+IDX, BANKED
                      00075          MOVLW  FLAGS
                      00076          MOVWF  SSR_00_FLAGS+IDX, BANKED
                      00077         ENDM
                      00078 
                      00079 SET_SSR_NORMAL_MODE MACRO IDX
                      00080          SET_SSR_PATTERN IDX, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      00081         ENDM
                      00082 
                      00083 SET_SSR_DMX_MODE MACRO IDX
                      00084          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00085         ENDM
                      00086 
                      00087 SET_SSR_RAPID_FLASH MACRO IDX
                      00088          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE
                      00089         ENDM
                      00090 
                      00091 SET_SSR_BLINK_FADE MACRO IDX
                      00092          SET_SSR_PATTERN IDX, 255,   2,  1, BIT_FADE_DOWN
                      00093         ENDM
                      00094 
                      00095 SET_SSR_SLOW_FLASH MACRO IDX
                      00096          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE|BIT_MAX_OFF_TIME
                      00097         ENDM
                      00098 
                      00099 SET_SSR_RAPID_FADE MACRO IDX
                      00100          SET_SSR_PATTERN IDX, 0, 4, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00101         ENDM
                      00102 
                      00103 SET_SSR_SLOW_FADE MACRO IDX
                      00104          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00105         ENDM
                      00106 
                      00107 SET_SSR_STEADY MACRO IDX
                      00108          SET_SSR_VALUE IDX, 255
                      00109         ENDM
                      00110 
                      00111 SET_SSR_OFF MACRO IDX
                      00112          SET_SSR_VALUE IDX, 0
                      00113         ENDM
                      00114 #endif
                      01852 #include "lumos_8bit_escapes.inc"
                      00001 ;
                      00002 ; Sending 8-bit data bytes in our 7-bit protocol
                      00003 ; (in data bytes, in other words) requires this
                      00004 ; escaping mechanism:
                      00005 ;   If high bit set, send $7E + low 7 bits
                      00006 ;   Literal $7E is sent as $7F + $7E
                      00007 ;   Literal $7F is sent as $7F + $7F
                      00008 ; 
                      00009 ; Other interesting cases inferred from the above:
                      00010 ;   $FE is sent as $7E + $7E
                      00011 ;   $FF is sent as $7E + $7F
                      00012 ;
                      00013 ; This calls the SIO_WRITE_W entry point, so the bank
                      00014 ; will shift as a result.
                      00015 ;
                      00016 SND8BIT MACRO   VALUE
                      00017         MOVLW   VALUE
                      00018         SEND_8_BIT_W
                      00019         ENDM
                      00020 
  00000001            00021 S8B_LABEL SET   1
                      00022 SEND_8_BIT_W MACRO
                      00023         MOVWF   EIGHTBITSIOBUF, ACCESS
                      00024         MOVLW   0x7F                            ; sending literal $7F?
                      00025         CPFSEQ  EIGHTBITSIOBUF, ACCESS
                      00026         BRA     S8B_CHK_7E#v(S8B_LABEL)
                      00027         CALL    SIO_WRITE_W                     ; send $7F to escape first
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028         MOVLW   0x7F                            ; then the literal $7F itself.
                      00029         CALL    SIO_WRITE_W                     
                      00030         BRA     S8B_END#v(S8B_LABEL)
                      00031 S8B_CHK_7E#v(S8B_LABEL):
                      00032         MOVLW   0x7E                            ; sending literal $7E?
                      00033         CPFSEQ  EIGHTBITSIOBUF, ACCESS
                      00034         BRA     S8B_CHK_MSB#v(S8B_LABEL)
                      00035         MOVLW   0x7F                            ; send $7F to escape first
                      00036         CALL    SIO_WRITE_W
                      00037         MOVLW   0x7E                            ; then the literal $7E itself.
                      00038         CALL    SIO_WRITE_W
                      00039         BRA     S8B_END#v(S8B_LABEL)
                      00040 S8B_CHK_MSB#v(S8B_LABEL):
                      00041         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
                      00042         BRA     S8B_SEND_NORMAL#v(S8B_LABEL)
                      00043         MOVLW   0x7E                            ; send $7E to escape first
                      00044         CALL    SIO_WRITE_W
                      00045         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
                      00046 S8B_SEND_NORMAL#v(S8B_LABEL):
                      00047         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
                      00048         CALL    SIO_WRITE_W     
                      00049 S8B_END#v(S8B_LABEL):
                      00050 S8B_LABEL ++
                      00051         ENDM
                      00052 
                      01853 
                      01854 ;==============================================================================
                      01855 ; BOOT BLOCK
                      01856 ;______________________________________________________________________________
                      01857 
                      01858 ;
                      01859 ; RESET VECTOR
                      01860 ;
                      01861 V_RST   CODE    0x0000
000000 0004           01862         CLRWDT
000002 EF?? F???      01863         GOTO    START
                      01864 ;
                      01865 ; HIGH-PRIORITY INTERRUPT VECTOR
                      01866 ;
                      01867 V_INT_H CODE    0x0008
000008 0004           01868         CLRWDT
00000A EF?? F???      01869         GOTO    INT_HIGH
                      01870 ;
                      01871 ; LOW-PRIORITY INTERRUPT VECTOR
                      01872 ;
                      01873 V_INT_L CODE    0x0018
000018 0004           01874         CLRWDT
00001A EF?? F???      01875         GOTO    INT_LOW
                      01876 ;
                      01877 ; INITIALIZATION CODE
                      01878 ;
                      01879 _BOOT   CODE    0x0100
                      01880 
000100                01881 S_FLASH:
                      01882         IF HAS_STATUS_LEDS
                      01883          BSF    PLAT_RED, BIT_RED, ACCESS
                      01884          RCALL  DELAY_1_6_SEC
                      01885          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01886          RCALL  DELAY_1_6_SEC
                      01887         
                      01888          BCF    PLAT_RED, BIT_RED, ACCESS
                      01889          RCALL  DELAY_1_6_SEC
                      01890          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01891          RCALL  DELAY_1_6_SEC
                      01892         ENDIF
000100 0012           01893         RETURN
                      01894 
000102                01895 D_FLASH:
                      01896         IF HAS_STATUS_LEDS
                      01897          BSF    PLAT_RED, BIT_RED, ACCESS
                      01898          RCALL  DELAY_1_12_SEC
                      01899          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01900          RCALL  DELAY_1_12_SEC
                      01901          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01902          RCALL  DELAY_1_12_SEC
                      01903          IF HAS_ACTIVE
                      01904           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01905           RCALL DELAY_1_12_SEC
                      01906          ENDIF
                      01907         
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01908          BCF    PLAT_RED, BIT_RED, ACCESS
                      01909          RCALL  DELAY_1_12_SEC
                      01910          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01911          RCALL  DELAY_1_12_SEC
                      01912          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01913          RCALL  DELAY_1_12_SEC
                      01914          IF HAS_ACTIVE
                      01915           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01916           RCALL DELAY_1_12_SEC
                      01917          ENDIF
                      01918         ENDIF
000102 0012           01919         RETURN
                      01920 
000104                01921 START:
000104 0004           01922         CLRWDT
000106 6AFC           01923         CLRF    STKPTR, ACCESS          ; clear stack error bits, set SP=0
000108 EC?? F???      01924         CALL    LUMOS_INIT
                      01925         IF ! HAS_SENSORS && !QSCC_PORT
                      01926          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS         ; If this device can't possibly
                      01927          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS         ; support sensor inputs, enable outputs
                      01928          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS         ; on those pins early to let the LEDs
                      01929          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS         ; work ASAP.
                      01930         ENDIF
                      01931         IF 0
                      01932         ;
                      01933         ; Extra start-up delay to investigate boot bug
                      01934         ;
                      01935         MOVLW   .10
                      01936         MOVWF   I, ACCESS
                      01937 SSS_SSS:
                      01938         CLRWDT
                      01939         CALL    S_FLASH
                      01940         DECFSZ  I, F, ACCESS
                      01941         BRA     SSS_SSS
                      01942         ENDIF
                      01943         ;
00010C EC?? F???      01944         CALL    D_FLASH
000110 EC?? F???      01945         CALL    SIO_INIT                ; call after other TRIS bits set
                      01946         ;
                      01947         ; Get EEPROM settings
                      01948         ;
                      01949         IF HAS_STATUS_LEDS
                      01950          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () () () R
                      01951         ENDIF
                      01952         ;
                      01953         ; Test sentinel values $000==$FF and $00F==$42.
                      01954         ; If they are not there, do a full factory reset of those
                      01955         ; settings to restore something that we know will work.
                      01956         ;
000114 0004           01957         CLRWDT
                      01958         IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      01959          CLRF   EEADR, ACCESS           ; (note interrupts are still off now)
                      01960         ELSE
000116 6AAA           01961          CLRF   EEADRH, ACCESS          ; EEPROM location $000
000118 6AA9           01962          CLRF   EEADR, ACCESS           ; (note interrupts are still off now)
                      01963         ENDIF
00011A 9EA6           01964         BCF     EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
00011C 9CA6           01965         BCF     EECON1, CFGS, ACCESS
00011E 94A6           01966         BCF     EECON1, WREN, ACCESS    ; disable writing
000120 80A6           01967         BSF     EECON1, RD, ACCESS      ; initiate read operation
000122 0EFF           01968         MOVLW   0xFF                    ; 
000124 62A8           01969         CPFSEQ  EEDATA, ACCESS          ; byte == $FF?
000126 D???           01970         BRA     FACTORY_RESET           ; if not, overwrite everything!
000128 0E0F           01971         MOVLW   0x0F                    ; try ending sentinel
00012A 6EA9           01972         MOVWF   EEADR, ACCESS           ; at $00F
00012C 80A6           01973         BSF     EECON1, RD, ACCESS
00012E 0E42           01974         MOVLW   0x42
000130 62A8           01975         CPFSEQ  EEDATA, ACCESS          ; byte == $42?
000132 D???           01976         BRA     FACTORY_RESET           ; else, overwrite.
                      01977         ;
                      01978         ; Values checked out, so assume EEPROM is intact.
                      01979         ; Read values into RAM variables and continue booting.
                      01980         ;
000134 0004           01981         CLRWDT
000136 98A1           01982         BCF     PIR2, EEIF, ACCESS      ; clear interrupt flag
                      01983         IF HAS_STATUS_LEDS
                      01984          BCF    PLAT_RED, BIT_RED, ACCESS       
                      01985          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y ()
                      01986         ENDIF
                      01987         ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000138 94A6           01988         BCF     EECON1, WREN, ACCESS    ; Read (not write) access to memory
00013A 9EA6           01989         BCF     EECON1, EEPGD, ACCESS   ; Select access to DATA area
00013C 9CA6           01990         BCF     EECON1, CFGS, ACCESS
                      01991         ;
                      01992         IF LUMOS_ARCH != LUMOS_ARCH_14K50
00013E 6AAA           01993          CLRF   EEADRH, ACCESS
                      01994         ENDIF
000140 0E01           01995         MOVLW   1
000142 6EA9           01996         MOVWF   EEADR, ACCESS           ; EEPROM location 0x001: baud rate
000144 80A6           01997         BSF     EECON1, RD, ACCESS
000146 50A8           01998         MOVF    EEDATA, W, ACCESS
000148 EC?? F???      01999         CALL    SIO_SET_BAUD_W
                      02000         ;
00014C 2AA9           02001         INCF    EEADR, F, ACCESS        ; EEPROM location 0x002: device address
00014E 80A6           02002         BSF     EECON1, RD, ACCESS
000150 CFA8 F???      02003         MOVFF   EEDATA, MY_ADDRESS
                      02004         ;
000154 2AA9           02005         INCF    EEADR, F, ACCESS        ; EEPROM location 0x003: phase offset MSB
000156 80A6           02006         BSF     EECON1, RD, ACCESS
000158 CFA8 F???      02007         MOVFF   EEDATA, PHASE_OFFSETH
                      02008         ;
00015C 2AA9           02009         INCF    EEADR, F, ACCESS        ; EEPROM location 0x004: phase offset LSB
00015E 80A6           02010         BSF     EECON1, RD, ACCESS
000160 CFA8 F???      02011         MOVFF   EEDATA, PHASE_OFFSETL
                      02012         ;
000164 2AA9           02013         INCF    EEADR, F, ACCESS        ; EEPROM location 0x005: DMX slot MSB
000166 80A6           02014         BSF     EECON1, RD, ACCESS
000168 CFA8 F???      02015         MOVFF   EEDATA, DMX_SLOTH
                      02016         ;
00016C 2AA9           02017         INCF    EEADR, F, ACCESS        ; EEPROM location 0x006: DMX slot LSB
                      02018         IF DMX_ENABLED
                      02019          BSF    EECON1, RD, ACCESS
                      02020          MOVFF  EEDATA, DMX_SLOTL
                      02021          BCF    DMX_SLOTH, DMX_SPEED, ACCESS    ; clear flag (we're not running at DMX speed yet)
                      02022         ENDIF
                      02023         ;
00016E 2AA9           02024         INCF    EEADR, F, ACCESS        ; EEPROM location 0x007: Sensor Configuration
                      02025         IF HAS_SENSORS
                      02026          BSF    EECON1, RD, ACCESS
                      02027          BTFSS  EEDATA, 3, ACCESS
                      02028          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      02029          BTFSS  EEDATA, 2, ACCESS
                      02030          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      02031          BTFSS  EEDATA, 1, ACCESS
                      02032          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      02033          BTFSS  EEDATA, 0, ACCESS
                      02034          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      02035         ENDIF
                      02036         ;
000170 6AA9           02037         CLRF    EEADR, ACCESS   ; Leave pointer at 0x000
                      02038         ;
                      02039         IF HAS_STATUS_LEDS
                      02040          BSF    PLAT_GREEN, BIT_GREEN, ACCESS   ; Panel: () G Y ()
                      02041         ENDIF
                      02042         ;
000172 989F           02043         BCF     IPR1, TXIP, ACCESS      ; TxD interrupt = low priority
000174 9A9F           02044         BCF     IPR1, RCIP, ACCESS      ; RxD interrupt = low priority
000176 0004           02045         CLRWDT
                      02046         ;
                      02047         ; Initialize data structures
                      02048         ;
000178 6A00           02049         CLRF    SSR_STATE, ACCESS
00017A 6A00           02050         CLRF    SSR_STATE2, ACCESS
00017C 6A00           02051         CLRF    YY_STATE, ACCESS
                      02052         ;
00017E 0E80           02053         MOVLW   .128
000180 6E00           02054         MOVWF   OPTION_DEBOUNCE, ACCESS
000182 6A00           02055         CLRF    OPTION_HOLD, ACCESS
000184 6800           02056         SETF    AUTO_OFF_CTRH, ACCESS
000186 6800           02057         SETF    AUTO_OFF_CTRL, ACCESS
000188 0104           02058         BANKSEL SSR_DATA_BANK
  00000000            02059 CH      SET     0
                      02060         WHILE CH<=SSR_MAX
00018A 6B00           02061          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
00018C 6B00           02062          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
00018E 6B00           02063          CLRF   SSR_00_STEP+0,      BANKED
000190 6B00           02064          CLRF   SSR_00_SPEED+0,      BANKED
000192 6B00           02065          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            02066 CH       ++
000194 6B00           02061          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000196 6B00           02062          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
000198 6B00           02063          CLRF   SSR_00_STEP+1,      BANKED
00019A 6B00           02064          CLRF   SSR_00_SPEED+1,      BANKED
00019C 6B00           02065          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            02066 CH       ++
00019E 6B00           02061          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
0001A0 6B00           02062          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
0001A2 6B00           02063          CLRF   SSR_00_STEP+2,      BANKED
0001A4 6B00           02064          CLRF   SSR_00_SPEED+2,      BANKED
0001A6 6B00           02065          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            02066 CH       ++
0001A8 6B00           02061          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
0001AA 6B00           02062          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
0001AC 6B00           02063          CLRF   SSR_00_STEP+3,      BANKED
0001AE 6B00           02064          CLRF   SSR_00_SPEED+3,      BANKED
0001B0 6B00           02065          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            02066 CH       ++
0001B2 6B00           02061          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
0001B4 6B00           02062          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
0001B6 6B00           02063          CLRF   SSR_00_STEP+4,      BANKED
0001B8 6B00           02064          CLRF   SSR_00_SPEED+4,      BANKED
0001BA 6B00           02065          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            02066 CH       ++
0001BC 6B00           02061          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
0001BE 6B00           02062          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
0001C0 6B00           02063          CLRF   SSR_00_STEP+5,      BANKED
0001C2 6B00           02064          CLRF   SSR_00_SPEED+5,      BANKED
0001C4 6B00           02065          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            02066 CH       ++
0001C6 6B00           02061          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
0001C8 6B00           02062          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
0001CA 6B00           02063          CLRF   SSR_00_STEP+6,      BANKED
0001CC 6B00           02064          CLRF   SSR_00_SPEED+6,      BANKED
0001CE 6B00           02065          CLRF   SSR_00_COUNTER+6,      BANKED
  00000007            02066 CH       ++
0001D0 6B00           02061          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
0001D2 6B00           02062          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
0001D4 6B00           02063          CLRF   SSR_00_STEP+7,      BANKED
0001D6 6B00           02064          CLRF   SSR_00_SPEED+7,      BANKED
0001D8 6B00           02065          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            02066 CH       ++
0001DA 6B00           02061          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
0001DC 6B00           02062          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
0001DE 6B00           02063          CLRF   SSR_00_STEP+8,      BANKED
0001E0 6B00           02064          CLRF   SSR_00_SPEED+8,      BANKED
0001E2 6B00           02065          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            02066 CH       ++
0001E4 6B00           02061          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
0001E6 6B00           02062          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
0001E8 6B00           02063          CLRF   SSR_00_STEP+9,      BANKED
0001EA 6B00           02064          CLRF   SSR_00_SPEED+9,      BANKED
0001EC 6B00           02065          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            02066 CH       ++
0001EE 6B00           02061          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
0001F0 6B00           02062          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
0001F2 6B00           02063          CLRF   SSR_00_STEP+10,     BANKED
0001F4 6B00           02064          CLRF   SSR_00_SPEED+10,     BANKED
0001F6 6B00           02065          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            02066 CH       ++
0001F8 6B00           02061          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
0001FA 6B00           02062          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
0001FC 6B00           02063          CLRF   SSR_00_STEP+11,     BANKED
0001FE 6B00           02064          CLRF   SSR_00_SPEED+11,     BANKED
000200 6B00           02065          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            02066 CH       ++
000202 6B00           02061          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
000204 6B00           02062          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
000206 6B00           02063          CLRF   SSR_00_STEP+12,     BANKED
000208 6B00           02064          CLRF   SSR_00_SPEED+12,     BANKED
00020A 6B00           02065          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            02066 CH       ++
00020C 6B00           02061          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
00020E 6B00           02062          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
000210 6B00           02063          CLRF   SSR_00_STEP+13,     BANKED
000212 6B00           02064          CLRF   SSR_00_SPEED+13,     BANKED
000214 6B00           02065          CLRF   SSR_00_COUNTER+13,     BANKED
  0000000E            02066 CH       ++
000216 6B00           02061          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
000218 6B00           02062          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
00021A 6B00           02063          CLRF   SSR_00_STEP+14,     BANKED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00021C 6B00           02064          CLRF   SSR_00_SPEED+14,     BANKED
00021E 6B00           02065          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            02066 CH       ++
000220 6B00           02061          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
000222 6B00           02062          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
000224 6B00           02063          CLRF   SSR_00_STEP+15,     BANKED
000226 6B00           02064          CLRF   SSR_00_SPEED+15,     BANKED
000228 6B00           02065          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            02066 CH       ++
00022A 6B00           02061          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
00022C 6B00           02062          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
00022E 6B00           02063          CLRF   SSR_00_STEP+16,     BANKED
000230 6B00           02064          CLRF   SSR_00_SPEED+16,     BANKED
000232 6B00           02065          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            02066 CH       ++
000234 6B00           02061          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
000236 6B00           02062          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
000238 6B00           02063          CLRF   SSR_00_STEP+17,     BANKED
00023A 6B00           02064          CLRF   SSR_00_SPEED+17,     BANKED
00023C 6B00           02065          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            02066 CH       ++
00023E 6B00           02061          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
000240 6B00           02062          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
000242 6B00           02063          CLRF   SSR_00_STEP+18,     BANKED
000244 6B00           02064          CLRF   SSR_00_SPEED+18,     BANKED
000246 6B00           02065          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            02066 CH       ++
000248 6B00           02061          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
00024A 6B00           02062          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
00024C 6B00           02063          CLRF   SSR_00_STEP+19,     BANKED
00024E 6B00           02064          CLRF   SSR_00_SPEED+19,     BANKED
000250 6B00           02065          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            02066 CH       ++
                      02067         ENDW
                      02068         IF HAS_STATUS_LEDS
                      02069          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G Y R
                      02070         ENDIF
                      02071         ;
                      02072         ; Timer 0 for non-ZC boards
                      02073         ;
                      02074         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
000252 6AD7           02075          CLRF   TMR0H, ACCESS
000254 6AD6           02076          CLRF   TMR0L, ACCESS
000256 84F1           02077          BSF    INTCON2, TMR0IP, ACCESS ; set HIGH priority for timing
000258 8AF2           02078          BSF    INTCON, TMR0IE, ACCESS  ; enable timer 0 interrupts
00025A 8ED5           02079          BSF    T0CON, TMR0ON, ACCESS   ; start timer 0 running
                      02080         ELSE
                      02081          IF LUMOS_SLICE_TIMER == LUMOS_ZC
                      02082           BSF   INTCON, INT0IE, ACCESS  ; enable ZC detect pin interrupt
                      02083          ELSE
                      02084           ERROR "LUMOS_SLICE_TIMER set incorrectly"
                      02085          ENDIF
                      02086         ENDIF
                      02087         IF HAS_STATUS_LEDS
                      02088          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () G () R
                      02089         ENDIF
                      02090         ;
                      02091         ; Timer 2 for half-wave slice timing
                      02092         ;
00025C 0E9F           02093         MOVLW   SLICE_TMR_PERIOD        ; set timer period
00025E 6ECB           02094         MOVWF   PR2, ACCESS
000260 6ACC           02095         CLRF    TMR2, ACCESS            ; reset timer
000262 829F           02096         BSF     IPR1, TMR2IP, ACCESS    ; set HIGH priority for timing
000264 929E           02097         BCF     PIR1, TMR2IF, ACCESS    ; clear any pending interrupt
000266 829D           02098         BSF     PIE1, TMR2IE, ACCESS    ; enable timer 2 interrupts
000268 84CA           02099         BSF     T2CON, TMR2ON, ACCESS   ; start timer 2 running
                      02100         ;
00026A 8A9D           02101         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts
                      02102         ;
                      02103         ; Clear all interrupt flags and enable interrupts
                      02104         ;
00026C 6A9E           02105         CLRF    PIR1, ACCESS
00026E 6AA1           02106         CLRF    PIR2, ACCESS
                      02107         IF LUMOS_ARCH != LUMOS_ARCH_14K50
000270 6AA4           02108          CLRF   PIR3, ACCESS
                      02109         ENDIF
000272 94F2           02110         BCF     INTCON, TMR0IF, ACCESS
000274 92F2           02111         BCF     INTCON, INT0IF, ACCESS
000276 8EF2           02112         BSF     INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000278 8CF2           02113         BSF     INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02114         ;
                      02115         ; Check for factory reset jumper
                      02116         ;  (short J11 pins 4 and 5, then power up device [or press reset].  When 
                      02117         ;  all lights flash, pull the jumper away. device will restore factory 
                      02118         ;  settings.)
                      02119         ;                                                            ______
                      02120         ; With the jumper in place, the OPTION input will follow the PWRCTL output.
                      02121         ; If they start off unequal, we skip this check and don't disturb the power
                      02122         ; supply logic at all.  Otherwise, we will flip our output a couple of times
                      02123         ; and see that OPTION keeps pace, which indicates that the jumper is there.
                      02124         ; we'll wait for the jumper to be pulled to avoid an infinite loop of resets,
                      02125         ; and also to provide a way out (power off first and no reset will have happened).
                      02126         ;
00027A 0004           02127         CLRWDT
                      02128 ;       IF HAS_POWER_CTRL
                      02129 ;        BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; turn on power supply
                      02130 ;       ENDIF
                      02131 ;        IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      02132 ;PORT_TEST_IN   EQU     PORT_SENS_A     ; The 14K50 lacks a PWR_ON output pin, so we have to
                      02133 ;PLAT_TEST_OUT  EQU     PLAT_SENS_B     ; pick on something else for the factory reset sensor
                      02134 ;BIT_TEST_IN    EQU     BIT_SENS_A      ; (jumper the OPTION AND short A+B together when powered on)
                      02135 ;BIT_TEST_OUT   EQU     BIT_SENS_B
                      02136 ;TRIS_TEST_IN   EQU     TRIS_SENS_A
                      02137 ;TRIS_TEST_OUT  EQU     TRIS_SENS_B
                      02138 ;TRISTATE_TEST  EQU     1
                      02139 ;       ELSE
                      02140 ;PORT_TEST_IN   EQU     PORT_OPTION
                      02141 ;PLAT_TEST_OUT  EQU     PLAT_PWR_ON
                      02142 ;BIT_TEST_IN    EQU     BIT_OPTION
                      02143 ;BIT_TEST_OUT   EQU     BIT_PWR_ON
                      02144 ;TRISTATE_TEST  EQU     0
                      02145 ;       ENDIF
00027C                02146 FACTORY_RESET_JUMPER_CHECK:
                      02147         IF HAS_FACTORY_RESET
                      02148          IF FRST_TRISTATE_TEST                          ; set I/O bits for test mode
                      02149           BCF   FRST_SENDER_T, FRST_SENDER_B, ACCESS    ; sender = output
                      02150           BSF   FRST_RECEIVER_T, FRST_RECEIVER_B, ACCESS; receiver = input
                      02151          ENDIF
00027C 9E8A           02152          BCF    FRST_SENDER_P, FRST_SENDER_B, ACCESS    ; send 0
00027E D???           02153          RCALL  DELAY_1_12_SEC
000280 B883           02154          BTFSC  FRST_RECEIVER_P, FRST_RECEIVER_B, ACCESS; receive 1? (default for buttons)
000282 D???           02155          BRA    END_FRJC                                ; then we're done
                      02156          ;
                      02157          ; 0->0 !! We may have a jumpered connection.  Try flipping the bit
                      02158          ;
000284 0004           02159          CLRWDT                                 
000286 8E8A           02160          BSF    FRST_SENDER_P, FRST_SENDER_B, ACCESS    ; send 1
000288 D???           02161          RCALL  DELAY_1_12_SEC
00028A A883           02162          BTFSS  FRST_RECEIVER_P, FRST_RECEIVER_B, ACCESS
00028C D???           02163          BRA    END_FRJC                                ; received 0... someone must just be holding
                      02164          ;                                              ; down button L4 but it's not our jumper.
                      02165          ; 1->1 !! Try again just to be sure...
                      02166          ;
00028E 0004           02167          CLRWDT                                 
000290 9E8A           02168          BCF    FRST_SENDER_P, FRST_SENDER_B, ACCESS    ; send 0
000292 D???           02169          RCALL  DELAY_1_12_SEC
000294 B883           02170          BTFSC  FRST_RECEIVER_P, FRST_RECEIVER_B, ACCESS
000296 D???           02171          BRA    END_FRJC                                ; received 1... doesn't look like our jumper
                      02172          ;
                      02173          ; 0->0 again.. one more time just to be reeeeeeally sure.
                      02174          ;
000298 0004           02175          CLRWDT                                 
00029A 8E8A           02176          BSF    FRST_SENDER_P, FRST_SENDER_B, ACCESS    ; send 1
00029C D???           02177          RCALL  DELAY_1_12_SEC
00029E A883           02178          BTFSS  FRST_RECEIVER_P, FRST_RECEIVER_B, ACCESS
0002A0 D???           02179          BRA    END_FRJC                                ; received 0... never mind
                      02180          ;
                      02181          ; After perhaps a bit too much caution, we're convinced there's a jumper there.
                      02182          ; wait for it to go away now, then do the reset.
                      02183          ;                                         
0002A2 8E8A           02184          BSF    FRST_SENDER_P, FRST_SENDER_B, ACCESS    ; send 0 again and wait for jumper pull
0002A4 848C           02185          BSF    FRST_SIG_A_P, FRST_SIG_A_B, ACCESS
0002A6 948B           02186          BCF    FRST_SIG_B_P, FRST_SIG_B_B, ACCESS
0002A8 808B           02187          BSF    FRST_SIG_C_P, FRST_SIG_C_B, ACCESS
0002AA                02188 FRJC_LOOP:
                      02189          ;
                      02190          ; signal factory reset is imminent by flashing lights
                      02191          ; until we see the receiver go back to 1 (which is our pull-up
                      02192          ; resistor grabbing the line again when the jumper isn't
                      02193          ; there anymore).
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02194          ;
0002AA 0004           02195          CLRWDT
0002AC D???           02196          RCALL  DELAY_1_12_SEC
0002AE 748C           02197          BTG    FRST_SIG_A_P, FRST_SIG_A_B, ACCESS
0002B0 748B           02198          BTG    FRST_SIG_B_P, FRST_SIG_B_B, ACCESS
0002B2 708B           02199          BTG    FRST_SIG_C_P, FRST_SIG_C_B, ACCESS
0002B4 A883           02200          BTFSS  FRST_RECEIVER_P, FRST_RECEIVER_B, ACCESS ; 0->1 transition is jumper pull
0002B6 D???           02201          BRA    FRJC_LOOP
0002B8 EF?? F???      02202          GOTO   FACTORY_RESET
                      02203         ENDIF
                      02204         
0002BC                02205 END_FRJC:
                      02206         IF QSCC_PORT
0002BC EC?? F???      02207          CALL   QSCC_START
                      02208         ENDIF
                      02209         ;
                      02210         ; Launch mainline code
                      02211         ;
0002C0 0104           02212         BANKSEL SSR_DATA_BANK
                      02213         IF HAS_STATUS_LEDS
                      02214          BCF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G () ()
                      02215          CLRF   SSR_00_VALUE+SSR_GREEN, BANKED  ; Green light cycles ~ 1/4 Hz
                      02216          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      02217          SET_SSR_NORMAL_MODE SSR_GREEN
                      02218         ENDIF
                      02219         ;       
                      02220         ; If we're in DMX mode, change our baud rate to 250,000 bps
                      02221         ;
                      02222         IF DMX_ENABLED
                      02223          BTFSS  DMX_SLOTH, DMX_EN, ACCESS
                      02224          GOTO   MAIN
                      02225          MOVLW  SIO_250000
                      02226          CALL   SIO_SET_BAUD_W
                      02227          BSF    DMX_SLOTH, DMX_SPEED, ACCESS
                      02228          IF HAS_STATUS_LEDS
                      02229           ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      02230           SET_SSR_DMX_MODE SSR_GREEN
                      02231          ENDIF
                      02232         ENDIF
0002C2 EF?? F???      02233         GOTO    MAIN
                      02234 
                      02235 BEGIN_EEPROM_READ MACRO START_ADDR
                      02236          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02237          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02238          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02239          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02240          BCF    EECON1, CFGS, ACCESS
                      02241          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02242         ENDM
                      02243 
                      02244 BEGIN_EEPROM_WRITE MACRO START_ADDR
                      02245          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02246          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02247          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02248          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02249          BCF    EECON1, CFGS, ACCESS
                      02250          BSF    EECON1, WREN, ACCESS    ; enable writing
                      02251         ENDM
                      02252 
                      02253 END_EEPROM_READ MACRO                   ; THIS CANNOT CHANGE WREG
                      02254          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02255          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02256          IF LUMOS_ARCH != LUMOS_ARCH_14K50
                      02257           CLRF  EEADRH, ACCESS
                      02258          ENDIF
                      02259          CLRF   EEADR, ACCESS
                      02260         ENDM
                      02261         
                      02262 END_EEPROM_WRITE MACRO
                      02263          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02264          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02265          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02266          IF LUMOS_ARCH != LUMOS_ARCH_14K50
                      02267           CLRF  EEADRH, ACCESS
                      02268          ENDIF
                      02269          CLRF   EEADR, ACCESS
                      02270         ENDM
                      02271 
                      02272 SET_EEPROM_ADDRESS MACRO ADDR
                      02273          IF LUMOS_ARCH != LUMOS_ARCH_14K50
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02274           MOVLW HIGH(ADDR)              ; NOTE interrupts need to be OFF here!
                      02275           MOVWF EEADRH, ACCESS
                      02276          ENDIF
                      02277          MOVLW  LOW(ADDR)
                      02278          MOVWF  EEADR, ACCESS
                      02279         ENDM
                      02280 
  00000000            02281 EE_LL_XX    SET 0
                      02282 WRITE_EEPROM_DATA MACRO
                      02283          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02284          MOVLW  0x55
                      02285          MOVWF  EECON2, ACCESS
                      02286          MOVLW  0xAA
                      02287          MOVWF  EECON2, ACCESS
                      02288          BSF    EECON1, WR, ACCESS      ; start write cycle
                      02289 WRITE_EEPROM_LOOP#v(EE_LL_XX):
                      02290          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
                      02291          BRA    WRITE_EEPROM_LOOP#v(EE_LL_XX)
                      02292          CLRWDT
                      02293          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02294 EE_LL_XX    ++
                      02295         ENDM
                      02296 
                      02297 WRITE_EEPROM_DATA_INC MACRO
                      02298         WRITE_EEPROM_DATA
                      02299         INCF    EEADR, F, ACCESS
                      02300         ENDM
                      02301 
                      02302 WRITE_EEPROM_DATA_W MACRO
                      02303         MOVWF   EEDATA, ACCESS
                      02304         WRITE_EEPROM_DATA
                      02305         ENDM
                      02306 
                      02307 WRITE_EEPROM_DATA_W_INC MACRO
                      02308         WRITE_EEPROM_DATA_W
                      02309         INCF    EEADR, F, ACCESS
                      02310         ENDM
                      02311 
                      02312 READ_EEPROM_DATA MACRO
                      02313         BSF     EECON1, RD, ACCESS
                      02314         ENDM
                      02315 
                      02316 READ_EEPROM_DATA_REG MACRO REGISTER
                      02317         READ_EEPROM_DATA
                      02318         MOVFF   EEDATA, REGISTER
                      02319         ENDM
                      02320 
                      02321 READ_EEPROM_DATA_W MACRO
                      02322         READ_EEPROM_DATA
                      02323         MOVFF   EEDATA, WREG
                      02324         ENDM
                      02325 
                      02326 READ_EEPROM_DATA_W_INC MACRO
                      02327         READ_EEPROM_DATA_W
                      02328         INCF    EEADR, F, ACCESS
                      02329         ENDM
                      02330         
0002C6                02331 FACTORY_RESET:
0002C6 0004           02332         CLRWDT
                      02333         ;
                      02334         ; write default configuration to EEPROM
                      02335         ;
                      02336         BEGIN_EEPROM_WRITE EE_START
0002C8 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
0002CA 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_START    ; NOTE interrupts need to be OFF here!
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
0002CC 0E00               M           MOVLW HIGH(EE_START)          ; NOTE interrupts need to be OFF here!
0002CE 6EAA               M           MOVWF EEADRH, ACCESS
                          M          ENDIF
0002D0 0E00               M          MOVLW  LOW(EE_START)
0002D2 6EA9               M          MOVWF  EEADR, ACCESS
0002D4 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
0002D6 9CA6               M          BCF    EECON1, CFGS, ACCESS
0002D8 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
0002DA 0E??           02337         MOVLW   UPPER(DEFAULT_TBL)      ; load lookup table pointer
0002DC 6EF8           02338         MOVWF   TBLPTRU, ACCESS
0002DE 0E??           02339         MOVLW   HIGH(DEFAULT_TBL)
0002E0 6EF7           02340         MOVWF   TBLPTRH, ACCESS
0002E2 0E??           02341         MOVLW   LOW(DEFAULT_TBL)
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002E4 6EF6           02342         MOVWF   TBLPTR, ACCESS
                      02343 
0002E6 0E10           02344         MOVLW   EEPROM_SETTINGS_LEN
0002E8 6E00           02345         MOVWF   I, ACCESS
                      02346 
0002EA                02347 FACTORY_RESET_LOOP:
0002EA 0009           02348         TBLRD   *+                      ; byte -> TABLAT
0002EC CFF5 FFA8      02349         MOVFF   TABLAT, EEDATA
                      02350         IF HAS_STATUS_LEDS
                      02351          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y R
                      02352         ENDIF
                      02353         WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
0002F0 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
0002F2 0E55               M          MOVLW  0x55
0002F4 6EA7               M          MOVWF  EECON2, ACCESS
0002F6 0EAA               M          MOVLW  0xAA
0002F8 6EA7               M          MOVWF  EECON2, ACCESS
0002FA 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
0002FC                    M WRITE_EEPROM_LOOP0:
0002FC A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
0002FE D???               M          BRA    WRITE_EEPROM_LOOP0
000300 0004               M          CLRWDT
000302 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000001                M EE_LL_XX    ++
000304 2AA9               M         INCF    EEADR, F, ACCESS
                      02354         IF HAS_STATUS_LEDS
                      02355          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () () R
                      02356         ENDIF
                      02357 
000306 2E00           02358         DECFSZ  I, F, ACCESS
000308 D???           02359         BRA     FACTORY_RESET_LOOP
                      02360         END_EEPROM_WRITE
00030A 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
00030C 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
00030E 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000310 6AAA               M           CLRF  EEADRH, ACCESS
                          M          ENDIF
000312 6AA9               M          CLRF   EEADR, ACCESS
                      02361 
000314 0E10           02362         MOVLW   .16
000316 6E00           02363         MOVWF   I, ACCESS
                      02364 
000318 0004           02365         CLRWDT
00031A 9EF2           02366         BCF     INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
00031C 9CF2           02367         BCF     INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02368 
00031E                02369 FACTORY_RESET_FLASH:
                      02370         IF HAS_STATUS_LEDS
                      02371          IF HAS_ACTIVE
                      02372           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: A G Y R
                      02373          ENDIF
                      02374          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02375          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02376          BSF    PLAT_RED, BIT_RED, ACCESS
                      02377          RCALL  DELAY_1_12_SEC
                      02378          IF HAS_ACTIVE
                      02379           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: () () () ()
                      02380          ENDIF
                      02381          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02382          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02383          BCF    PLAT_RED, BIT_RED, ACCESS
                      02384          RCALL  DELAY_1_6_SEC
                      02385          DECFSZ I, F, ACCESS
                      02386          BRA    FACTORY_RESET_FLASH
                      02387         ENDIF
00031E 00FF           02388         RESET
                      02389 
000320                02390 DELAY_1_12_SEC: ; Approx 1/12 sec delay loop
000320 0004           02391         CLRWDT
000322 0E04           02392         MOVLW   .4
000324 6E00           02393         MOVWF   KK, ACCESS
000326 D???           02394         BRA     D_1_6_KK
                      02395 
000328                02396 DELAY_1_6_SEC:  ; Approx 1/6 sec delay loop
000328 0004           02397         CLRWDT
00032A 0E08           02398         MOVLW   .8
00032C 6E00           02399         MOVWF   KK, ACCESS
00032E                02400 D_1_6_KK:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00032E 6800           02401         SETF    J, ACCESS
000330                02402 D_1_6_J:
000330 6800           02403         SETF    K, ACCESS
000332                02404 D_1_6_K:
000332 2E00           02405         DECFSZ  K, F, ACCESS
000334 D???           02406         BRA     D_1_6_K
000336 2E00           02407         DECFSZ  J, F, ACCESS
000338 D???           02408         BRA     D_1_6_J
00033A 2E00           02409         DECFSZ  KK, F, ACCESS
00033C D???           02410         BRA     D_1_6_KK
00033E 0012           02411         RETURN
                      02412 
                      02413 ;==============================================================================
                      02414 ; INTERRUPT HANDLERS
                      02415 ;______________________________________________________________________________
                      02416 _INT    CODE
000000                02417 INT_LOW:
000000 6E00           02418         MOVWF   ISR_TMPL_WREG, ACCESS   ; Save W, status, and bank registers
000002 CFD8 F???      02419         MOVFF   STATUS, ISR_TMPL_STATUS
000006 CFE0 F???      02420         MOVFF   BSR, ISR_TMPL_BSR
                      02421         ;
                      02422         ; Serial I/O ready for transmit?
                      02423         ;
00000A                02424 INT_TX:
00000A A89E           02425         BTFSS   PIR1, TXIF, ACCESS
00000C D???           02426         BRA     INT_TX_END
00000E EC?? F???      02427         CALL    SIO_SEND                ; push next byte out
000012 989E           02428         BCF     PIR1, TXIF, ACCESS      ; acknowledge interrupt
000014                02429 INT_TX_END:
                      02430         ;
                      02431         ; Serial I/O received a byte?
                      02432         ;
000014                02433 INT_RX:
000014 AA9E           02434         BTFSS   PIR1, RCIF, ACCESS
000016 D???           02435         BRA     INT_RX_END
000018 EC?? F???      02436         CALL    SIO_RECV                ; grab next byte
00001C 9A9E           02437         BCF     PIR1, RCIF, ACCESS      ; acknowledge interrupt
00001E                02438 INT_RX_END:
                      02439         ;
                      02440         ; Finished with low-priority interrupts.
                      02441         ; Clean up and go home.
                      02442         ;
00001E C??? FFE0      02443         MOVFF   ISR_TMPL_BSR, BSR
000022 5000           02444         MOVF    ISR_TMPL_WREG, W, ACCESS
000024 C??? FFD8      02445         MOVFF   ISR_TMPL_STATUS, STATUS
000028 0010           02446         RETFIE
                      02447 
00002A                02448 INT_HIGH:
                      02449         ; High-priority interrupts automatically
                      02450         ; save state (fast interrupt call)
                      02451         ;
                      02452         ; Zero-crossing start-of-cycle event signal
                      02453         ;
00002A                02454 INT_ZC:
                      02455         IF LUMOS_SLICE_TIMER==LUMOS_ZC
                      02456          BTFSS  INTCON, INT0IF, ACCESS  ; ZC signal asserted?
                      02457          BRA    INT_ZC_END              ; no, move along...
                      02458          BCF    INTCON, INT0IF, ACCESS  ; acknowledge interrupt
                      02459         ELSE
                      02460          IF LUMOS_SLICE_TIMER==LUMOS_INTERNAL
00002A A4F2           02461           BTFSS INTCON, TMR0IF, ACCESS  ; 120 Hz timer expired?
00002C D???           02462           BRA   INT_ZC_END              ; no, move along...
00002E 0E5D           02463           MOVLW HIGH(CYCLE_TMR_PERIOD)  ; reset timer for another 1/120 sec.
000030 6ED7           02464           MOVWF TMR0H, ACCESS
000032 0E3D           02465           MOVLW LOW(CYCLE_TMR_PERIOD)
000034 6ED6           02466           MOVWF TMR0L, ACCESS
000036 94F2           02467           BCF   INTCON, TMR0IF, ACCESS  ; acknowledge interrupt
                      02468          ELSE
                      02469           ERROR "LUMOS_SLICE_TIMER not set correctly"
                      02470          ENDIF
                      02471         ENDIF
000038 8C00           02472         BSF     SSR_STATE, PRECYC, ACCESS       ; mark start of pre-cycle countdown
00003A 8C00           02473         BSF     SSR_STATE2, TEST_UPD, ACCESS    ; time for next test-mode countdown
00003C C??? F???      02474         MOVFF   PHASE_OFFSETH, CUR_PREH
000040 C??? F???      02475         MOVFF   PHASE_OFFSETL, CUR_PRE
                      02476         IF QSCC_PORT
                      02477          #include "qscc_hook_120hz.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos ISR block and is performed every 1/120 second.
                      00027 ; 
                      00028 #include "qscc_bits.inc"
                      00048 ; vim:set syntax=pic ts=8:
                      00049 ;
                      00050                 LIST N=86
                      00051 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00052 ;@@                                                                         @@
                      00053 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00054 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00055 ;@@ @   @  @   @    @       @                                               @@
                      00056 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00057 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00058 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00059 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00060 ;@@                                                                         @@
                      00061 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00062 ;
                      00063 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00064 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00065 ; information.
                      00066 ;
                      00067 ; Based on previous works by the same author, some of which are released
                      00068 ; under the Open Software License, version 3.0, which portions are available
                      00069 ; separately for free download.
                      00070 ;
                      00071 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00072 ;
                      00073 ; This defines the bits for bit-encoded flags, etc.
                      00074 ; 
                      00075 #ifndef QSCC_BITS_INC
                      00076 #define QSCC_BITS_INC
                      00077 
                      00078         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00079          ERROR "qscc_bits only used for QS*C systems"
                      00080         ENDIF
                      00081                                         ; QUIZSHOW_FLAGS
                      00082 QS_FLAG_DOING120 EQU    2               ; -----1--      Doing "every 1/120 sec tasks" now
                      00083 QS_FLAG_ON_120_S EQU    1               ; ------1-      Need to do "every 1/120 sec tasks" now
                      00084 QS_FLAG_SCANNING EQU    0               ; -------1      Scanner running
                      00085 
                      00086                                         ; BTN_??_FLAGS
                      00087 BTN_FLG_LCK_ACK EQU     4               ; ---1----      Button lock acknowledged already
                      00088 BTN_FLG_ACTIVE  EQU     3               ; ----1---      Button being pressed now
                      00089 BTN_FLG_LOCKED  EQU     2               ; -----1--      Button locked out
                      00090 BTN_FLG_MASKED  EQU     1               ; ------1-      Button ignored
                      00091 BTN_FLG_PRESSED EQU     0               ; -------1      Button pressed already
                      00092 
                      00093 QUIZSHOW_DATA   EQU     0xC00
                      00094 #endif
                      00029 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_120hz only used for QS*C systems"
                      00032         ENDIF
                      00033 
000044 8200           00034         BSF     QUIZSHOW_FLAGS, QS_FLAG_ON_120_S, ACCESS
                      02478         ENDIF
                      02479         ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02480         ; handle OPTION button
                      02481         ; increment hold counter if we see it pressed, decrement if not.
                      02482         ;
                      02483         IF HAS_OPTION
                      02484          COMF   OPTION_DEBOUNCE, W, ACCESS      ; button fully on?
                      02485          BZ     INT_ZC_OPTION_ON
                      02486          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; button fully off?
                      02487          BRA    INT_ZC_OPTION_UNDEFINED
                      02488 INT_ZC_OPTION_OFF:
                      02489          TSTFSZ OPTION_HOLD, ACCESS             ; unless already at zero,
                      02490          DECF   OPTION_HOLD, F, ACCESS          ; decrement counter
                      02491          BRA    INT_ZC_END_OPTION
                      02492 INT_ZC_OPTION_ON:
                      02493          INFSNZ OPTION_HOLD, F, ACCESS          ; increment counter
                      02494          SETF   OPTION_HOLD, ACCESS             ; but don't let it overflow
                      02495 INT_ZC_OPTION_UNDEFINED:
                      02496          ; If the button is still floating between on and off, don't
                      02497          ; count it yet.  It needs to stay on or off for a while before
                      02498          ; we count it toward the hold time.
                      02499 INT_ZC_END_OPTION:
                      02500         ENDIF
000046                02501 INT_ZC_END:
                      02502         ;
                      02503         ; Start of cycle slice signal
                      02504         ;
000046                02505 INT_TMR2:
000046 A29E           02506         BTFSS   PIR1, TMR2IF, ACCESS            ; has timer expired?
000048 D???           02507         BRA     INT_TMR2_END                    ; no, move along...
                      02508         ;
                      02509         ; debounce OPTION button
                      02510         ;
                      02511         IF HAS_OPTION
                      02512          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS ; is option button triggered? (active-low)
                      02513          BRA    INT_OPTION_OFF                  
                      02514 INT_OPTION_ON:
                      02515          INFSNZ OPTION_DEBOUNCE, F, ACCESS      ; increment bounce counter
                      02516          SETF   OPTION_DEBOUNCE, ACCESS         ; but not too far - don't overflow
                      02517          BRA    INT_OPTION_END
                      02518 INT_OPTION_OFF:
                      02519          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; if not already at zero,
                      02520          DECF   OPTION_DEBOUNCE, F, ACCESS      ; decrement counter
                      02521 INT_OPTION_END:
                      02522         ENDIF
                      02523         ;
                      02524         ; rest of cycle timing code
                      02525         ;
00004A AC00           02526         BTFSS   SSR_STATE, PRECYC, ACCESS       ; are we in pre-cycle countdown?
00004C D???           02527         BRA     INT_TMR2_NEXT                   ; no, signal next update run
00004E 2E00           02528         DECFSZ  CUR_PRE, F, ACCESS              ; count down
000050 D???           02529         BRA     INT_TMR2_DONE
000052 6600           02530         TSTFSZ  CUR_PREH, ACCESS                ; high-order byte
000054 D???           02531         BRA     INT_TMR2_MSB
000056 9C00           02532         BCF     SSR_STATE, PRECYC, ACCESS       ; END pre-cycle
000058 8E00           02533         BSF     SSR_STATE, INCYC, ACCESS        ; BEGIN active cycle
00005A 6800           02534         SETF    CUR_SLICE, ACCESS               ; initial slice value 0xFF (will count down to 0x00)
00005C                02535 INT_TMR2_NEXT:
00005C BE00           02536         BTFSC   SSR_STATE, INCYC, ACCESS        ; if we're in active dimmer cycle now,
00005E 8A00           02537         BSF     SSR_STATE, SLICE_UPD, ACCESS    ; then signal next update run
000060                02538 INT_TMR2_DONE:
000060 929E           02539         BCF     PIR1, TMR2IF, ACCESS            ; acknowledge interrrupt
000062                02540 INT_TMR2_END:
                      02541         
                      02542         IF QSCC_PORT
                      02543          #include "qscc_hook_isr.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos ISR block for high-priority interrupts 
                      00027 ; 
                      00028         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00029          ERROR "qscc_hook_isr only used for QS*C systems"
                      00030         ENDIF
                      00031 
000062                00032 QSCC_INT_TMR1:
000062 A09E           00033         BTFSS   PIR1, TMR1IF, ACCESS            ; TMR1 overflow
000064 D???           00034         BRA     QSCC_INT_END
000066 909E           00035         BCF     PIR1, TMR1IF, ACCESS            ; acknowledge interrupt
000068 4A00           00036         INFSNZ  QS_BTN_TMR_U, F, ACCESS         ; increment next significant byte
00006A 2A00           00037         INCF    QS_BTN_TMR_T, F, ACCESS         ; carry to most significant byte 
00006C                00038 QSCC_INT_END:
                      02544         ENDIF
                      02545 
00006C 0011           02546         RETFIE  FAST
                      02547 
00006E                02548 INT_TMR2_MSB:
00006E 0600           02549         DECF    CUR_PREH, F, ACCESS             ; tick down MSB, start another loop
000070 6800           02550         SETF    CUR_PRE, ACCESS
000072 D???           02551         BRA     INT_TMR2_DONE
                      02552 
                      02553 ;==============================================================================
                      02554 ; ACCESS DATA BANK
                      02555 ;______________________________________________________________________________
                      02556 _ADATA  UDATA_ACS       0x000
000000                02557 ISR_TMPL_STATUS RES     1
000001                02558 ISR_TMPL_BSR    RES     1
000002                02559 ISR_TMPL_WREG   RES     1
                      02560 ;ISR_TMPH_STATUS        RES     1
                      02561 ;ISR_TMPH_BSR   RES     1
                      02562 ;ISR_TMPH_WREG  RES     1
000003                02563 MY_ADDRESS      RES     1
000004                02564 PHASE_OFFSETH   RES     1
000005                02565 PHASE_OFFSETL   RES     1
000006                02566 SSR_STATE       RES     1               ; major state/timing flags
000007                02567 SSR_STATE2      RES     1               ; major state/timing flags
000008                02568 DMX_SLOTH       RES     1
000009                02569 DMX_SLOTL       RES     1
00000A                02570 YY_STATE        RES     1
00000B                02571 YY_COMMAND      RES     1
00000C                02572 YY_CMD_FLAGS    RES     1
00000D                02573 YY_DATA         RES     1
00000E                02574 YY_LOOKAHEAD_MAX RES    1
00000F                02575 YY_LOOK_FOR     RES     1
000010                02576 YY_BUF_IDX      RES     1
000011                02577 YY_NEXT_STATE   RES     1
000012                02578 YY_YY           RES     1
000013                02579 LAST_ERROR      RES     1
000014                02580 CUR_PREH        RES     1
000015                02581 CUR_PRE         RES     1
000016                02582 CUR_SLICE       RES     1
000017                02583 TARGET_SSR      RES     1
000018                02584 OPTION_DEBOUNCE RES     1
000019                02585 OPTION_HOLD     RES     1
00001A                02586 TEST_CYCLE      RES     1
00001B                02587 TEST_SSR        RES     1
00001C                02588 AUTO_OFF_CTRH   RES     1
00001D                02589 AUTO_OFF_CTRL   RES     1
00001E                02590 EIGHTBITSIOBUF  RES     1               ; buffer for 8-bit data adjustments
00001F                02591 I               RES     1
000020                02592 J               RES     1
000021                02593 K               RES     1
000022                02594 KK              RES     1
000023                02595 TR_I            RES     1
                      02596 ;                      --
                      02597 ;                      35
                      02598 ;
                      02599                 IF QSCC_PORT
                      02600                  #include "qscc_hook_access_bank.inc"
                      00001 ; vim:set syntax=pic ts=8:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos access data block
                      00027 ; 
                      00028         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00029          ERROR "qscc_hook_access_bank only used for QS*C systems"
                      00030         ENDIF
                      00031 
  0000                00032         GLOBAL QUIZSHOW_FLAGS
  0000                00033         GLOBAL QS_BTN_TMR_T
  0000                00034         GLOBAL QS_BTN_TMR_U
                      00035 
000024                00036 QS_BTN_TMR_T    RES     1       ; Timer1 bits <31:24>
000025                00037 QS_BTN_TMR_U    RES     1       ; Timer1 bits <23:16>
000026                00038 QUIZSHOW_FLAGS  RES     1
                      00039 
                      00040 #include "qscc_bits.inc"
                      00095 ; vim:set syntax=pic ts=8:
                      00096 ;
                      00097                 LIST N=86
                      00098 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00099 ;@@                                                                         @@
                      00100 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00101 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00102 ;@@ @   @  @   @    @       @                                               @@
                      00103 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00104 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00105 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00106 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00107 ;@@                                                                         @@
                      00108 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00109 ;
                      00110 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00111 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00112 ; information.
                      00113 ;
                      00114 ; Based on previous works by the same author, some of which are released
                      00115 ; under the Open Software License, version 3.0, which portions are available
                      00116 ; separately for free download.
                      00117 ;
                      00118 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00119 ;
                      00120 ; This defines the bits for bit-encoded flags, etc.
                      00121 ; 
                      00122 #ifndef QSCC_BITS_INC
                      00123 #define QSCC_BITS_INC
                      00124 
                      00125         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00126          ERROR "qscc_bits only used for QS*C systems"
                      00127         ENDIF
                      00128                                         ; QUIZSHOW_FLAGS
                      00129 QS_FLAG_DOING120 EQU    2               ; -----1--      Doing "every 1/120 sec tasks" now
                      00130 QS_FLAG_ON_120_S EQU    1               ; ------1-      Need to do "every 1/120 sec tasks" now
                      00131 QS_FLAG_SCANNING EQU    0               ; -------1      Scanner running
                      00132 
                      00133                                         ; BTN_??_FLAGS
                      00134 BTN_FLG_LCK_ACK EQU     4               ; ---1----      Button lock acknowledged already
                      00135 BTN_FLG_ACTIVE  EQU     3               ; ----1---      Button being pressed now
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00136 BTN_FLG_LOCKED  EQU     2               ; -----1--      Button locked out
                      00137 BTN_FLG_MASKED  EQU     1               ; ------1-      Button ignored
                      00138 BTN_FLG_PRESSED EQU     0               ; -------1      Button pressed already
                      00139 
                      00140 QUIZSHOW_DATA   EQU     0xC00
                      00141 #endif
                      02601                 ENDIF
                      02602 
                      02603 ;==============================================================================
                      02604 ; DATA BANK 4
                      02605 ;______________________________________________________________________________
                      02606 
                      02607 _SSR_DATA       UDATA   SSR_DATA_BANK
                      02608 ;
                      02609 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      02610 ; and in fact, that size must be SSR_BLOCK_LEN.  THEY MUST ALSO be
                      02611 ; in this order, due to some optimizations that occur in the code.
                      02612 ;
  00000014            02613 SSR_BLOCK_LEN   EQU     SSR_MAX+1
000400                02614 SSR_00_VALUE    RES     SSR_BLOCK_LEN   ; each SSR value 0x00-FF
000414                02615 SSR_00_FLAGS    RES     SSR_BLOCK_LEN
000428                02616 SSR_00_STEP     RES     SSR_BLOCK_LEN
00043C                02617 SSR_00_SPEED    RES     SSR_BLOCK_LEN
000450                02618 SSR_00_COUNTER  RES     SSR_BLOCK_LEN
                      02619 
                      02620 ;==============================================================================
                      02621 ; DATA BANK 5: MAIN CODE DATA STORAGE
                      02622 ;______________________________________________________________________________
                      02623 _MAINDATA       UDATA   MAIN_DATA
000500                02624 YY_BUFFER       RES     YY_BUF_LEN
                      02625 
                      02626 ;==============================================================================
                      02627 ; DATA BANKS 6-: SEQUENCE STORAGE
                      02628 ;______________________________________________________________________________
  00000600            02629 SEQ_DATA        EQU     0x600                   ; XXX NOT on 14K50!!!
                      02630 _SEQ_DATA       UDATA   SEQ_DATA
                      02631 
                      02632 ;==============================================================================
                      02633 ; MAINLINE CODE
                      02634 ;______________________________________________________________________________
                      02635 _MAIN   CODE    0x0800
000800                02636 MAIN:
000800 0004           02637         CLRWDT
                      02638         IF QSCC_PORT
000802 EC?? F???      02639          CALL   QSCC_MAIN
                      02640         ENDIF
                      02641 
000806 0004           02642         CLRWDT
000808 BA00           02643         BTFSC   SSR_STATE, SLICE_UPD, ACCESS
00080A EC?? F???      02644         CALL    UPDATE_SSR_OUTPUTS
                      02645 
                      02646         ; DMX mode: poll for framing error to start DMX frame reception
                      02647         IF DMX_ENABLED
                      02648          BTFSS  DMX_SLOTH, DMX_EN, ACCESS
                      02649          BRA    NOT_DMX
                      02650          BANKSEL        SIO_DATA_START
                      02651          BTFSS  SIO_STATUS, SIO_FERR, BANKED    ; Did SIO code find a framing error first?
                      02652          BRA    BRK_DET2                        ; No, check ourselves then
                      02653          IF HAS_ACTIVE
                      02654           SET_SSR_BLINK_FADE SSR_ACTIVE
                      02655          ENDIF
                      02656          CALL   SIO_GETCHAR                     ; Yes, then read the byte we received
                      02657          BANKSEL SIO_DATA_START
                      02658          TSTFSZ SIO_INPUT, BANKED               ; ...  is the received byte all zeroes?
                      02659          BRA    NOT_DMX                         ; No, must not really be a break then
                      02660          BANKSEL SIO_DATA_START
                      02661          BCF    SIO_STATUS, SIO_FERR, BANKED    ; Yes: clear the status and proceed
                      02662          BRA    BRK_DET
                      02663 BRK_DET2:
                      02664          BTFSS  RCSTA, FERR, ACCESS
                      02665          BRA    NOT_DMX
                      02666          ; found framing error -- is it a break?
                      02667          IF HAS_ACTIVE
                      02668           SET_SSR_BLINK_FADE SSR_ACTIVE
                      02669          ENDIF
                      02670          MOVF   RCREG, W, ACCESS        ; read byte, clear FERR, see if data all zeroes
                      02671          BNZ    NOT_DMX                 ; no, must be line noise, carry on...
                      02672 BRK_DET:
                      02673         ;
                      02674         ; BREAK DETECTED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02675         ;
                      02676         ; Now we start counting while we watch the RxD line for the 0->1 transition
                      02677         ; If it took <56uS, we'll interpret it as noise.  Otherwise, it's a break and
                      02678         ; the start of our DMX frame.  As a safety measure, if the break lasts longer
                      02679         ; than ~8,000uS, we abandon the frame.
                      02680         ; 
                      02681          IF HAS_STATUS_LEDS
                      02682           SET_SSR_BLINK_FADE SSR_YELLOW
                      02683          ENDIF
                      02684          BCF    PIE1, RCIE, ACCESS      ; Disable RxD interrupts for now
                      02685          MOVLW  0xE0
                      02686          MOVWF  TMR3H, ACCESS
                      02687          MOVLW  0xC7
                      02688          MOVWF  TMR3L, ACCESS           ; $E0C7 is 7,992 away from overflowing and 56 away
                      02689                                         ; from overflowing the LSB
                      02690          BCF    PIR2, TMR3IF, ACCESS    ; Clear overflow status bit
                      02691          BCF    PIE2, TMR3IE, ACCESS    ; Don't use as interrupt
                      02692          BSF    T3CON, TMR3ON, ACCESS   ; Start Timer 3 Running
                      02693         ;
                      02694         ; Watch the RxD line for a transition away from the break
                      02695         ;
                      02696 WATCH_BREAK:
                      02697          CLRWDT
                      02698          BTFSC  SSR_STATE, SLICE_UPD, ACCESS    ; keep updating SSR outputs during this
                      02699          CALL   UPDATE_SSR_OUTPUTS
                      02700          BTFSC  PORT_RX, BIT_RX, ACCESS ; Is the line 0?
                      02701          BRA    BREAK_CONFIRMED
                      02702          BTFSS  PIR2, TMR3IF, ACCESS    ; Did we exceed our limit?
                      02703          BRA    WATCH_BREAK
                      02704         ;
                      02705         ; We've been holding too long, give up on the break signal.
                      02706         ; 
                      02707          BCF    T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
                      02708          BSF    PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
                      02709          BRA    BAD_BREAK
                      02710 
                      02711 BREAK_CONFIRMED:
                      02712         ;
                      02713         ; Break over, reset UART and interpret frame
                      02714         ;
                      02715          IF HAS_STATUS_LEDS
                      02716           SET_SSR_BLINK_FADE SSR_RED
                      02717          ENDIF
                      02718          BCF    T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
                      02719          BSF    PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
                      02720          BCF    RCSTA, CREN, ACCESS
                      02721          BSF    RCSTA, CREN, ACCESS
                      02722          MOVLW  0xE0
                      02723          MOVF   TMR3L, W, ACCESS        ; Initiate 16-bit read of TMR3 register
                      02724          CPFSEQ TMR3H, ACCESS           ; If MSB of Timer3 advanced, it was >56uS
                      02725          BRA    START_DMX_FRAME         ; and therefore the start of the frame
                      02726         ;                               ; If not, it's noise and we interpret as "NOT_DMX"
                      02727         ;        | |
                      02728         ;       _| |_
                      02729         ;       \   /
                      02730         ;        \ /
                      02731         ;         V
                      02732         ENDIF
00080E                02733 NOT_DMX:
00080E 0103           02734         BANKSEL SIO_DATA_START
000810 BB00           02735         BTFSC   SIO_STATUS, SIO_FERR, BANKED
000812                02736 BAD_BREAK:
000812 D???           02737         RCALL   ERR_SERIAL_FRAMING
                      02738 
000814 0103           02739         BANKSEL SIO_DATA_START
000816 B900           02740         BTFSC   SIO_STATUS, SIO_ORUN, BANKED
000818 D???           02741         RCALL   ERR_SERIAL_OVERRUN
                      02742 
00081A 0103           02743         BANKSEL SIO_DATA_START
00081C B700           02744         BTFSC   SIO_STATUS, RXDATA_FULL, BANKED
00081E D???           02745         RCALL   ERR_SERIAL_FULL
                      02746 
000820 0103           02747         BANKSEL SIO_DATA_START
000822 A300           02748         BTFSS   SIO_STATUS, RXDATA_QUEUE, BANKED
000824 D???           02749         BRA     END_SERIAL_READ
000826 B000           02750         BTFSC   SSR_STATE, TEST_MODE, ACCESS
000828 D???           02751         BRA     TEST_MODE_BYPASS
00082A D???           02752         RCALL   RECEIVE_COMMAND
00082C D???           02753         BRA     END_SERIAL_READ
00082E                02754 TEST_MODE_BYPASS:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00082E EC?? F???      02755         CALL    SIO_READ                ; read and discard input while in test mode
000832                02756 END_SERIAL_READ:
                      02757 
000832 B400           02758         BTFSC   SSR_STATE, DRAIN_TR, ACCESS
000834 D???           02759         RCALL   DRAIN_TRANSMITTER
                      02760 
000836 B000           02761         BTFSC   SSR_STATE, TEST_MODE, ACCESS
000838 D???           02762         RCALL   DO_TEST_MODE
                      02763 
                      02764         IF HAS_OPTION
                      02765 OPTION_HANDLER:
                      02766          BTFSS  SSR_STATE, PRIV_MODE, ACCESS            ; are we in privileged mode?
                      02767          BRA    OPTION_PRE_PRIV                         ; no, check if we're in pre-priv...
                      02768                                                         ; ----------------------------------------------
                            ---PRIV_MODE
                      02769          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; PRIV_MODE+PRE_PRIV: transitioning to TEST mode
                      02770          BRA    OPTION_PRIV_MODE                        ; just PRIV_MODE: skip down a bit...
                      02771          TSTFSZ OPTION_DEBOUNCE, ACCESS                 ; has button released yet?
                      02772          BRA    END_OPTION_HANDLER                      ; no, keep waiting
                      02773          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; yes: move to test mode now
                      02774          BSF    SSR_STATE, TEST_MODE, ACCESS
                      02775          MOVLW  .120
                      02776          MOVWF  TEST_CYCLE, ACCESS
                      02777          SETF   TEST_SSR, ACCESS                        ; initialize ssr index
                      02778          CLRF   OPTION_HOLD, ACCESS
                      02779          IF HAS_STATUS_LEDS
                      02780           IF HAS_ACTIVE
                      02781            SET_SSR_OFF SSR_ACTIVE
                      02782           ENDIF
                      02783           SET_SSR_OFF SSR_GREEN
                      02784           SET_SSR_OFF SSR_YELLOW
                      02785           SET_SSR_OFF SSR_RED
                      02786          ENDIF
                      02787          IF ROLE_MASTER
                      02788           MOVLW 0xF0                                    ; send to slave chip: F0 21 00000000 00000000
                      02789           CALL  SIO_WRITE_W                             ; (all LEDs off)
                      02790           MOVLW 0x21
                      02791           CALL  SIO_WRITE_W
                      02792           MOVLW 0x00
                      02793           CALL  SIO_WRITE_W
                      02794           MOVLW 0x00
                      02795           CALL  SIO_WRITE_W
                      02796          ENDIF
                      02797          RCALL  S0_CMD0                                 ; blackout all SSR outputs
                      02798          BRA    END_OPTION_HANDLER
                      02799 
                      02800 OPTION_PRIV_MODE:
                      02801          COMF   OPTION_HOLD, W, ACCESS                  ; is option pressed ~2s?
                      02802          BNZ    END_OPTION_HANDLER                      ; no
                      02803          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; set PRE_PRIV (wait for button release)
                      02804          BRA    END_OPTION_HANDLER
                      02805 
                      02806 OPTION_PRE_PRIV:                                        
                      02807          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; are we in pre-priv state?
                      02808          BRA    OPTION_NORMAL                           ; no, must be normal operating mode.
                      02809          TSTFSZ OPTION_HOLD, ACCESS                     ; ----------------------------------------------
                            ----PRE_PRIV
                      02810          BRA    END_OPTION_HANDLER                      ; wait for button to be released ~2s
                      02811          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; move to privileged run mode
                      02812          BTFSC  SSR_STATE2, PRIV_FORBID, ACCESS         ; unless we have privileges locked out now...
                      02813          BRA    END_OPTION_HANDLER
                      02814          BSF    SSR_STATE, PRIV_MODE, ACCESS            ; turn on privileged mode
                      02815          IF HAS_STATUS_LEDS
                      02816           IF HAS_ACTIVE
                      02817            SET_SSR_BLINK_FADE SSR_ACTIVE
                      02818           ENDIF
                      02819           SET_SSR_BLINK_FADE SSR_YELLOW
                      02820           SET_SSR_BLINK_FADE SSR_RED
                      02821          ENDIF
                      02822          IF ROLE_MASTER
                      02823           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101000 00000000
                      02824           CALL  SIO_WRITE_W                             ; (rapid flash green, others off)
                      02825           MOVLW 0x21
                      02826           CALL  SIO_WRITE_W
                      02827           MOVLW 0x28
                      02828           CALL  SIO_WRITE_W
                      02829           MOVLW 0x00
                      02830           CALL  SIO_WRITE_W
                      02831          ENDIF
                      02832          IF DMX_ENABLED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02833           CALL  DMX_EXIT_TEMPORARILY
                      02834          ENDIF
                      02835          BRA END_OPTION_HANDLER
                      02836 
                      02837 OPTION_NORMAL:                                          ; ----------------------------------------------
                            ------NORMAL
                      02838          COMF   OPTION_HOLD, W, ACCESS                  ; has option been held full time?
                      02839          BNZ    END_OPTION_HANDLER                      ; nope, move along...
                      02840          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; yes, initiate pre-priv mode (wait for button r
                            elease)
                      02841          IF HAS_STATUS_LEDS
                      02842           IF HAS_ACTIVE
                      02843            SET_SSR_RAPID_FLASH SSR_ACTIVE
                      02844           ENDIF
                      02845           SET_SSR_RAPID_FLASH SSR_GREEN
                      02846           SET_SSR_RAPID_FLASH SSR_YELLOW
                      02847           SET_SSR_RAPID_FLASH SSR_RED
                      02848          ENDIF
                      02849          IF ROLE_MASTER
                      02850           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101101 00000101
                      02851           CALL  SIO_WRITE_W                             ; (rapid flash all LEDs)
                      02852           MOVLW 0x21
                      02853           CALL  SIO_WRITE_W
                      02854           MOVLW 0x2D
                      02855           CALL  SIO_WRITE_W
                      02856           MOVLW 0x05
                      02857           CALL  SIO_WRITE_W
                      02858          ENDIF
                      02859 END_OPTION_HANDLER:
                      02860         ENDIF
                      02861 
                      02862         ; OPTION button handler
                      02863         ; normal: option held ~2s, -> init option mode
                      02864         ; initopt: option released -> priv mode
                      02865         ; priv: option held ~2s and release -> test mode
                      02866         ; test: option press -> pause, wait for release
                      02867         ; pause: option press -> wait for release, test
                      02868 
00083A D???           02869         BRA     MAIN
                      02870         
00083C                02871 DRAIN_TRANSMITTER:
                      02872         IF HAS_T_R
00083C 0103           02873          BANKSEL SIO_DATA_START
00083E B100           02874          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED        ; data still waiting in our output buffer?
000840 0012           02875          RETURN
000842 A89E           02876          BTFSS  PIR1, TXIF, ACCESS                      ; data in transit into UART shift register?
000844 0012           02877          RETURN
000846 A2AC           02878          BTFSS  TXSTA, TRMT, ACCESS                     ; data being shifted out now?
000848 0012           02879          RETURN
00084A 9400           02880          BCF    SSR_STATE, DRAIN_TR, ACCESS             ; none of the above--shut down transmitter now
00084C EC?? F???      02881          CALL   TR_OFF_DELAY
000850 968B           02882          BCF    PLAT_T_R, BIT_T_R, ACCESS               
000852 0012           02883          RETURN
                      02884         ELSE
                      02885          ERR_BUG 0x11, ERR_CLASS_DEVICE
                      02886         ENDIF
                      02887 
000854                02888 DRAIN_M_S_TX_BLOCKING:
                      02889         ;
                      02890         ; version of DRAIN_TRANSMITTER which is designed to clear
                      02891         ; master->slave comms in critical situations.  Blocks until
                      02892         ; the pending output is sent to the slave.
                      02893         ;
                      02894         IF ROLE_MASTER
                      02895          CLRWDT
                      02896 DRAIN_M_S_DRAIN_SIO_QUEUE:
                      02897          BANKSEL SIO_DATA_START
                      02898          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED
                      02899          BRA    DRAIN_M_S_DRAIN_SIO_QUEUE
                      02900          CLRWDT
                      02901 DRAIN_M_S_DRAIN_UART_TX_BUF:
                      02902          BTFSS  PIR1, TXIF, ACCESS
                      02903          BRA    DRAIN_M_S_DRAIN_UART_TX_BUF
                      02904          CLRWDT
                      02905 DRAIN_M_S_DRAIN_UART_SHIFT_REG:
                      02906          BTFSS  TXSTA, TRMT, ACCESS
                      02907          BRA    DRAIN_M_S_DRAIN_UART_SHIFT_REG
                      02908          CLRWDT
                      02909          RETURN
                      02910         ELSE
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02911          ERR_BUG 0x12, ERR_CLASS_DEVICE
000854 0E12               M          MOVLW  0x12
000856 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_DEVICE == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_DEVICE == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_DEVICE == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000858 6A00               M          CLRF   YY_STATE, ACCESS
00085A 0012               M          RETURN
                      02912         ENDIF
                      02913 
00085C                02914 DO_TEST_MODE:
00085C 0004           02915         CLRWDT
                      02916 
00085E 1C00           02917         COMF    OPTION_DEBOUNCE, W, ACCESS      ; is option button pressed?
000860 E1??           02918         BNZ     TEST_NOT_PRESSED
000862 8A00           02919         BSF     SSR_STATE2, TEST_BUTTON, ACCESS ; yes, keep waiting for it to be released
000864 D???           02920         BRA     TEST_MODE_1
000866                02921 TEST_NOT_PRESSED:
000866 6600           02922         TSTFSZ  OPTION_DEBOUNCE, ACCESS         ; is option button fully off?
000868 D???           02923         BRA     TEST_MODE_1
00086A AA00           02924         BTFSS   SSR_STATE2, TEST_BUTTON, ACCESS ; were we waiting for this button cycle event?
00086C D???           02925         BRA     TEST_MODE_1                     ; 
                      02926         ;
                      02927         ; OPTION button was pressed and then released.  Toggle pause state.
                      02928         ;
00086E 9A00           02929         BCF     SSR_STATE2, TEST_BUTTON, ACCESS ; 
000870 7E00           02930         BTG     SSR_STATE2, TEST_PAUSE, ACCESS  ;
000872 6800           02931         SETF    TEST_CYCLE, ACCESS              ; reset cycle timer
                      02932         IF ROLE_MASTER                          ; MASTER  SLAVE           STANDALONE
                      02933          MOVLW  0xF0                            ; A G Y R G Y R           A G Y R
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02934          CALL   SIO_WRITE_W                     ; b3b2b1b0b5b4(*)         b2b1b0(*)  run
                      02935          MOVLW  0x21                            ;              *                 *   pause
                      02936          CALL   SIO_WRITE_W
                      02937          MOVLW  B'00111111'
                      02938          CALL   SIO_WRITE_W
                      02939          MOVLW  B'00000001'
                      02940          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
                      02941          MOVLW  B'00000010'
                      02942          CALL   SIO_WRITE_W
                      02943         ELSE
000874 AE00           02944          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
000876 D???           02945          BRA    TEST_NP_1
                      02946          IF HAS_STATUS_LEDS
                      02947           SET_SSR_STEADY SSR_RED
                      02948          ENDIF
000878 D???           02949          BRA    TEST_NP_2
00087A                02950 TEST_NP_1:
                      02951          IF HAS_STATUS_LEDS
                      02952           SET_SSR_SLOW_FADE SSR_RED
                      02953          ENDIF
00087A                02954 TEST_NP_2:
                      02955         ENDIF
                      02956         
00087A                02957 TEST_MODE_1:
00087A AE00           02958         BTFSS   SSR_STATE2, TEST_PAUSE, ACCESS  ; paused? 
00087C AC00           02959         BTFSS   SSR_STATE2, TEST_UPD, ACCESS    ; time to count down?
00087E 0012           02960         RETURN                                  ; either we're paused or not time to update; stop.
                      02961         
000880 9C00           02962         BCF     SSR_STATE2, TEST_UPD, ACCESS    ; clear flag about being time to update
000882 2E00           02963         DECFSZ  TEST_CYCLE, F, ACCESS           ; count down until time to change channels
000884 0012           02964         RETURN
000886 0E78           02965         MOVLW   .120
000888 6E00           02966         MOVWF   TEST_CYCLE, ACCESS              ; reset counter time for next channel
                      02967 
00088A D???           02968         RCALL   S0_CMD0                         ; kill all outputs
00088C 2A00           02969         INCF    TEST_SSR, F, ACCESS             ; jump to next SSR
00088E 0E14           02970         MOVLW   NUM_CHANNELS
000890 6000           02971         CPFSLT  TEST_SSR, ACCESS                ; channel > last channel?
000892 6A00           02972         CLRF    TEST_SSR, ACCESS                ; cycle to 0 if exceeded our limit
                      02973 
000894 0E3F           02974         MOVLW   0x3F
000896 1400           02975         ANDWF   TEST_SSR, W, ACCESS             ; keep to limits of channel number
000898 6E00           02976         MOVWF   YY_DATA, ACCESS                 ; set up YY_DATA for ON_OFF call
00089A 8C00           02977         BSF     YY_DATA, 6, ACCESS              ; turn on
00089C D???           02978         RCALL   ON_OFF_YY_DATA                  ; execute
                      02979 
00089E 0104           02980         BANKSEL SSR_DATA_BANK
                      02981         IF HAS_STATUS_LEDS
                      02982          CLRF   SSR_00_VALUE + SSR_RED, BANKED
                      02983          CLRF   SSR_00_VALUE + SSR_YELLOW, BANKED
                      02984          CLRF   SSR_00_VALUE + SSR_GREEN, BANKED
                      02985          IF HAS_ACTIVE
                      02986           CLRF  SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02987          ENDIF
                      02988         ENDIF
                      02989 
                      02990         IF ROLE_MASTER                                  ; MASTER----- SLAVE---      STANDALONE-
                      02991          IF HAS_STATUS_LEDS
                      02992           BTFSC TEST_SSR, 2, ACCESS                     ; A  G  Y  R  G  Y  R       A  G  Y  R
                      02993           SETF  SSR_00_VALUE + SSR_RED, BANKED          ; b5 b4 b3 b2 b1 b0 (*)     b2 b1 b0 (*)
                      02994           BTFSC TEST_SSR, 3, ACCESS
                      02995           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      02996           BTFSC TEST_SSR, 4, ACCESS
                      02997           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      02998           IF HAS_ACTIVE
                      02999            BTFSC TEST_SSR, 5, ACCESS
                      03000            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
                      03001           ENDIF
                      03002          ENDIF
                      03003 
                      03004          MOVLW  0xF0                                    ; send to slave chip: F0 21 00gggyyy 00000rrr
                      03005          CALL   SIO_WRITE_W
                      03006          MOVLW  0x21
                      03007          CALL   SIO_WRITE_W
                      03008          CLRF   WREG, ACCESS
                      03009          BTFSC  TEST_SSR, 1, ACCESS
                      03010          BSF    WREG, 3, ACCESS
                      03011          BTFSC  TEST_SSR, 0, ACCESS
                      03012          BSF    WREG, 0, ACCESS
                      03013          CALL   SIO_WRITE_W
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03014          MOVLW  0x02
                      03015          CALL   SIO_WRITE_W
                      03016         ELSE
                      03017          IF HAS_STATUS_LEDS
                      03018           BTFSC TEST_SSR, 0, ACCESS
                      03019           BANKSEL SSR_DATA_BANK
                      03020           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      03021           BTFSC TEST_SSR, 1, ACCESS
                      03022           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      03023           IF HAS_ACTIVE
                      03024            BTFSC TEST_SSR, 2, ACCESS
                      03025            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
                      03026           ENDIF
                      03027           SET_SSR_SLOW_FADE SSR_RED
                      03028          ENDIF
                      03029         ENDIF
                      03030 
0008A0 0012           03031         RETURN
                      03032 
0008A2                03033 ERR_SERIAL_FRAMING:
0008A2 0103           03034         BANKSEL SIO_DATA_START
0008A4 9B00           03035         BCF     SIO_STATUS, SIO_FERR, BANKED
                      03036 ;       BTFSC   DMX_SLOTH, DMX_EN, ACCESS
                      03037 ;       BRA     START_DMX_FRAME
                      03038         IF HAS_STATUS_LEDS
                      03039          SET_SSR_RAPID_FLASH SSR_RED
                      03040          SET_SSR_STEADY SSR_YELLOW
                      03041         ENDIF
0008A6 0012           03042         RETURN
                      03043         IF DMX_ENABLED
                      03044 START_DMX_FRAME:
                      03045         ;
                      03046         ; We're in DMX mode so a framing error (aka break) is really
                      03047         ; not an error, but the start of our data frame!
                      03048         ;
                      03049          BSF    DMX_SLOTH, DMX_FRAME, ACCESS
                      03050          IF HAS_STATUS_LEDS
                      03051           SET_SSR_RAPID_FLASH SSR_YELLOW
                      03052          ENDIF
                      03053          RETURN
                      03054         ENDIF
                      03055         
0008A8                03056 ERR_SERIAL_OVERRUN:
0008A8 0103           03057         BANKSEL SIO_DATA_START
0008AA 9900           03058         BCF     SIO_STATUS, SIO_ORUN, BANKED
                      03059         IF HAS_STATUS_LEDS
                      03060          SET_SSR_RAPID_FLASH SSR_RED
                      03061          SET_SSR_RAPID_FLASH SSR_YELLOW
                      03062         ENDIF
0008AC 0012           03063         RETURN
                      03064 
0008AE                03065 ERR_SERIAL_FULL:
                      03066         IF HAS_STATUS_LEDS
                      03067          SET_SSR_RAPID_FLASH SSR_RED
                      03068          SET_SSR_SLOW_FADE SSR_YELLOW
                      03069         ENDIF
                      03070         ; clear input buffer and reset state machine
0008AE 6A00           03071         CLRF    YY_STATE, ACCESS
0008B0 EC?? F???      03072         CALL    SIO_FLUSH_INPUT
0008B4 0012           03073         RETURN
                      03074 
0008B6                03075 ERR_CMD_INCOMPLETE:
0008B6 0E23           03076         MOVLW   0x23
0008B8 6E00           03077         MOVWF   LAST_ERROR, ACCESS
                      03078         IF HAS_STATUS_LEDS
                      03079          SET_SSR_SLOW_FLASH SSR_RED
                      03080         ENDIF
0008BA EF?? F???      03081         GOTO    ERR_ABORT
0008BE                03082 ERR_NOT_IMP:
0008BE 0E22           03083         MOVLW   0x22
0008C0 6E00           03084         MOVWF   LAST_ERROR, ACCESS
                      03085         IF HAS_STATUS_LEDS
                      03086          SET_SSR_RAPID_FLASH SSR_RED
                      03087         ENDIF
0008C2 EF?? F???      03088         GOTO    ERR_ABORT
0008C6                03089 ERR_COMMAND:
0008C6 0E20           03090         MOVLW   0x20
0008C8 6E00           03091         MOVWF   LAST_ERROR, ACCESS
                      03092         IF HAS_STATUS_LEDS
                      03093          SET_SSR_PATTERN SSR_RED, .255, .1, .32, BIT_FADE_DOWN
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03094         ENDIF
0008CA                03095 ERR_ABORT:
                      03096         ;SET_SSR_STEADY SSR_RED
0008CA 6A00           03097         CLRF    YY_STATE, ACCESS        ; reset state machine
0008CC 0012           03098         RETURN
                      03099 
0008CE                03100 RECEIVE_COMMAND:
  00000007            03101 CMD_BIT EQU     7
                      03102 
0008CE 0004           03103         CLRWDT
                      03104         ;
                      03105         ; First of all, if we received a byte at all, that means
                      03106         ; we're not the one expected to be talking anymore.
                      03107         ; we should never see this while trying to output anything,
                      03108         ; if everyone else is playing by the same rules,
                      03109         ; but this is a fail-safe just in case.  In this case, we
                      03110         ; will immediately shut up.
                      03111         ;
0008D0 8400           03112         BSF     SSR_STATE2, INHIBIT_OUTPUT, ACCESS
                      03113         ;
                      03114         ; We just received a byte.  The state machine dictates what
                      03115         ; we do with the byte we just got.
                      03116         ;
                      03117         ; State:        Byte:
                      03118         ; [0] IDLE      DATA: ignore
                      03119         ;               CMD for someone else: ignore
                      03120         ;               store command, then decode it.
                      03121         ;
0008D2 EC?? F???      03122         CALL    SIO_GETCHAR_W
                      03123         IF DMX_ENABLED
                      03124          BTFSC  DMX_SLOTH, DMX_SPEED, ACCESS    ; check if we're trying to read DMX now
                      03125          GOTO   DMX_RECEIVED_BYTE
                      03126         ENDIF
                      03127         ;
0008D6 0004           03128         CLRWDT
0008D8 0103           03129         BANKSEL SIO_DATA_START
0008DA AF00           03130         BTFSS   SIO_INPUT, CMD_BIT, BANKED
0008DC D???           03131         BRA     DATA_BYTE               ; it's a data byte
                      03132         ;
                      03133         ; ok, so it's a command. are we still waiting for another
                      03134         ; command to complete?  If so, abort it and start over.
                      03135         ; otherwise, get to work.
                      03136         ;
0008DE 9200           03137         BCF     SSR_STATE2, MSB_ESC, ACCESS     ; cancel escape sequence if any
0008E0 9000           03138         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
0008E2 5000           03139         MOVF    YY_STATE, W, ACCESS
0008E4 E0??           03140         BZ      INTERP_START     
                      03141         ;
                      03142         ; ERROR: We hadn't finished with the last command yet, and here we
                      03143         ; have another one!  (Yes, even if it's someone else's command, that
                      03144         ; still means ours is apparently abandoned.)
                      03145         ;
0008E6 D???           03146         RCALL   ERR_CMD_INCOMPLETE              ; let user know
                      03147         
0008E8                03148 INTERP_START:
                      03149         ;
                      03150         ; Start of a new command.
                      03151         ;
0008E8 0103           03152         BANKSEL SIO_DATA_START
0008EA 0004           03153         CLRWDT
                      03154         ;
                      03155         ; Is it ours?
                      03156         ;
                      03157         IF QSCC_PORT
                      03158          #include "qscc_hook_global_commands.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpretation code so that we handle
                      00027 ; globally-recognized commands, which isn't something Lumos controllers do.
                      00028 ;
                      00029 ; Force global commands to be our address
                      00030 ;
                      00031 ; Context: SIO data bank selected
                      00032 ; SIO_INPUT contains command byte on input.
                      00033 ; RETURN from here will end command interpretation, so if we branch to
                      00034 ; a command handler, its return will go back to our caller.
                      00035 ;
                      00036 ;       MOVLW   b'10001111'     ; 8F: Global Blackout
                      00037 ;       CPFSEQ  SIO_INPUT, BANKED
                      00038 ;       BRA     QSCC_G_C_1
                      00039 ;       GOTO    S0_CMD0
                      00040 
0008EC                00041 QSCC_G_C_1:
0008EC 0EDF           00042         MOVLW   b'11011111'     ; DF: Global Start
0008EE 0103           00043         BANKSEL SIO_DATA_START
0008F0 6300           00044         CPFSEQ  SIO_INPUT, BANKED
0008F2 D???           00045         BRA     QSCC_G_C_2
0008F4 EF?? F???      00046         GOTO    QSCC_CMD5_START
                      00047 
0008F8                00048 QSCC_G_C_2:
                      03159         ENDIF
                      03160         IF ! ROLE_SLAVE         ; the slave chip has no address and sees no other commands
0008F8 0103           03161          BANKSEL SIO_DATA_START
0008FA 5100           03162          MOVF   SIO_INPUT, W, BANKED
0008FC 0B0F           03163          ANDLW  0x0F
0008FE 6200           03164          CPFSEQ MY_ADDRESS, ACCESS
000900 0012           03165          RETURN ; not my problem.
                      03166         ENDIF
                      03167         ;
                      03168         ; ok, so it's OUR command.  We're at state 0,
                      03169         ; so let's decode it and go from here.
                      03170         ;
                      03171         ; === STATE 0 ===
                      03172         ; New command byte received
                      03173         ;
                      03174         ; CMD 0 (BLACKOUT): exec -> 0
                      03175         ; CMD 1 (ON_OFF): -> 1
                      03176         ; CMD 2 (SET_LVL): -> 2
                      03177         ; CMD 3 (BULK_UPD): -> 4
                      03178         ; CMD 4 (RAMP_LVL): -> 5
                      03179         ; CMD 5 ERROR -> 0
                      03180         ; CMD 6 ERROR -> 0
                      03181         ; CMD 7 (EXTENDED) -> 9
                      03182         ;
                      03183         IF HAS_ACTIVE
                      03184          SET_SSR_BLINK_FADE SSR_ACTIVE  ; activity indicator
                      03185         ENDIF
                      03186         IF ROLE_SLAVE && HAS_STATUS_LEDS
                      03187          SET_SSR_BLINK_FADE SSR_YELLOW  ; slave activity indicator
                      03188         ENDIF
000902 0103           03189         BANKSEL SIO_DATA_START
000904 3900           03190         SWAPF   SIO_INPUT, W, BANKED
000906 0B07           03191         ANDLW   0x07
000908 E0??           03192         BZ      S0_CMD0
00090A EF?? F???      03193         GOTO    S0_CMD1         ; can't do BNZ S0_CMD1 because it's too far away from here
                      03194 
00090E                03195 S0_CMD0:
                      03196         ;
                      03197         ; BLACKOUT:
                      03198         ;
                      03199         ;   ___7______6______5______4______3______2______1______0__
                      03200         ;  |      |                    |                           |
                      03201         ;  |   1  |          0         |   Target device address   | SIO_INPUT
                      03202         ;  |______|______|______|______|______|______|______|______|
                      03203         ;  |                                  |          0         |
                      03204         ;  |                 0                |   (Command code)   | W
                      03205         ;  |______|______|______|______|______|______|______|______|
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03206         ;
00090E 0104           03207         BANKSEL SSR_DATA_BANK
  00000000            03208 CH      SET     0
                      03209         WHILE CH <= OUTPUT_CHAN_MAX
000910 6B00           03210          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
000912 6B00           03211          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
000914 6B00           03212          CLRF   SSR_00_STEP+0,      BANKED
000916 6B00           03213          CLRF   SSR_00_SPEED+0,      BANKED
000918 6B00           03214          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            03215 CH       ++
00091A 6B00           03210          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
00091C 6B00           03211          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
00091E 6B00           03212          CLRF   SSR_00_STEP+1,      BANKED
000920 6B00           03213          CLRF   SSR_00_SPEED+1,      BANKED
000922 6B00           03214          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            03215 CH       ++
000924 6B00           03210          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
000926 6B00           03211          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
000928 6B00           03212          CLRF   SSR_00_STEP+2,      BANKED
00092A 6B00           03213          CLRF   SSR_00_SPEED+2,      BANKED
00092C 6B00           03214          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            03215 CH       ++
00092E 6B00           03210          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
000930 6B00           03211          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
000932 6B00           03212          CLRF   SSR_00_STEP+3,      BANKED
000934 6B00           03213          CLRF   SSR_00_SPEED+3,      BANKED
000936 6B00           03214          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            03215 CH       ++
000938 6B00           03210          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
00093A 6B00           03211          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
00093C 6B00           03212          CLRF   SSR_00_STEP+4,      BANKED
00093E 6B00           03213          CLRF   SSR_00_SPEED+4,      BANKED
000940 6B00           03214          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            03215 CH       ++
000942 6B00           03210          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
000944 6B00           03211          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
000946 6B00           03212          CLRF   SSR_00_STEP+5,      BANKED
000948 6B00           03213          CLRF   SSR_00_SPEED+5,      BANKED
00094A 6B00           03214          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            03215 CH       ++
00094C 6B00           03210          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
00094E 6B00           03211          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
000950 6B00           03212          CLRF   SSR_00_STEP+6,      BANKED
000952 6B00           03213          CLRF   SSR_00_SPEED+6,      BANKED
000954 6B00           03214          CLRF   SSR_00_COUNTER+6,      BANKED
  00000007            03215 CH       ++
000956 6B00           03210          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
000958 6B00           03211          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
00095A 6B00           03212          CLRF   SSR_00_STEP+7,      BANKED
00095C 6B00           03213          CLRF   SSR_00_SPEED+7,      BANKED
00095E 6B00           03214          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            03215 CH       ++
000960 6B00           03210          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
000962 6B00           03211          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
000964 6B00           03212          CLRF   SSR_00_STEP+8,      BANKED
000966 6B00           03213          CLRF   SSR_00_SPEED+8,      BANKED
000968 6B00           03214          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            03215 CH       ++
00096A 6B00           03210          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
00096C 6B00           03211          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
00096E 6B00           03212          CLRF   SSR_00_STEP+9,      BANKED
000970 6B00           03213          CLRF   SSR_00_SPEED+9,      BANKED
000972 6B00           03214          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            03215 CH       ++
000974 6B00           03210          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
000976 6B00           03211          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
000978 6B00           03212          CLRF   SSR_00_STEP+10,     BANKED
00097A 6B00           03213          CLRF   SSR_00_SPEED+10,     BANKED
00097C 6B00           03214          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            03215 CH       ++
00097E 6B00           03210          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
000980 6B00           03211          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
000982 6B00           03212          CLRF   SSR_00_STEP+11,     BANKED
000984 6B00           03213          CLRF   SSR_00_SPEED+11,     BANKED
000986 6B00           03214          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            03215 CH       ++
000988 6B00           03210          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
00098A 6B00           03211          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
00098C 6B00           03212          CLRF   SSR_00_STEP+12,     BANKED
00098E 6B00           03213          CLRF   SSR_00_SPEED+12,     BANKED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000990 6B00           03214          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            03215 CH       ++
000992 6B00           03210          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
000994 6B00           03211          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
000996 6B00           03212          CLRF   SSR_00_STEP+13,     BANKED
000998 6B00           03213          CLRF   SSR_00_SPEED+13,     BANKED
00099A 6B00           03214          CLRF   SSR_00_COUNTER+13,     BANKED
  0000000E            03215 CH       ++
00099C 6B00           03210          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
00099E 6B00           03211          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
0009A0 6B00           03212          CLRF   SSR_00_STEP+14,     BANKED
0009A2 6B00           03213          CLRF   SSR_00_SPEED+14,     BANKED
0009A4 6B00           03214          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            03215 CH       ++
0009A6 6B00           03210          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
0009A8 6B00           03211          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
0009AA 6B00           03212          CLRF   SSR_00_STEP+15,     BANKED
0009AC 6B00           03213          CLRF   SSR_00_SPEED+15,     BANKED
0009AE 6B00           03214          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            03215 CH       ++
0009B0 6B00           03210          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
0009B2 6B00           03211          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
0009B4 6B00           03212          CLRF   SSR_00_STEP+16,     BANKED
0009B6 6B00           03213          CLRF   SSR_00_SPEED+16,     BANKED
0009B8 6B00           03214          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            03215 CH       ++
0009BA 6B00           03210          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
0009BC 6B00           03211          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
0009BE 6B00           03212          CLRF   SSR_00_STEP+17,     BANKED
0009C0 6B00           03213          CLRF   SSR_00_SPEED+17,     BANKED
0009C2 6B00           03214          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            03215 CH       ++
0009C4 6B00           03210          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
0009C6 6B00           03211          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
0009C8 6B00           03212          CLRF   SSR_00_STEP+18,     BANKED
0009CA 6B00           03213          CLRF   SSR_00_SPEED+18,     BANKED
0009CC 6B00           03214          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            03215 CH       ++
0009CE 6B00           03210          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
0009D0 6B00           03211          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
0009D2 6B00           03212          CLRF   SSR_00_STEP+19,     BANKED
0009D4 6B00           03213          CLRF   SSR_00_SPEED+19,     BANKED
0009D6 6B00           03214          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            03215 CH       ++
                      03216         ENDW
                      03217 
                      03218         IF ROLE_MASTER
                      03219          MOVLW  0x80            ; Pass this command on to the other 
                      03220          CALL   SIO_WRITE_W     ; processor too
                      03221          IF HAS_STATUS_LEDS
                      03222           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03223          ENDIF
                      03224         ENDIF
0009D8 0012           03225         RETURN
                      03226 
0009DA                03227 S0_CMD1:
0009DA 6E00           03228         MOVWF   YY_COMMAND, ACCESS      ; save command byte in YY_COMMAND
0009DC 2CE8           03229         DECFSZ  WREG, W, ACCESS
0009DE D???           03230         BRA     S0_CMD2
                      03231         ; ON_OFF:
0009E0 0E01           03232         MOVLW   1
0009E2 6E00           03233         MOVWF   YY_STATE, ACCESS        ; -> state 1 (wait for channel)
0009E4 0012           03234         RETURN
                      03235 
0009E6                03236 S0_CMD2:
                      03237         ; SET_LEVEL
0009E6 2CE8           03238         DECFSZ  WREG, W, ACCESS
0009E8 D???           03239         BRA     S0_CMD3
0009EA 0E02           03240         MOVLW   2
0009EC 6E00           03241         MOVWF   YY_STATE, ACCESS        ; -> state 2 (wait for channel)
0009EE 0012           03242         RETURN
                      03243 
0009F0                03244 S0_CMD3:
                      03245         ; BULK_UPD
0009F0 2CE8           03246         DECFSZ  WREG, W, ACCESS
0009F2 D???           03247         BRA     S0_CMD4
0009F4 0E04           03248         MOVLW   4
0009F6 6E00           03249         MOVWF   YY_STATE, ACCESS        ; -> state 4 (wait for channel)
0009F8 0012           03250         RETURN
                      03251 
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009FA                03252 S0_CMD4:
                      03253         ; RAMP_LVL
0009FA 2CE8           03254         DECFSZ  WREG, W, ACCESS
0009FC D???           03255         BRA     S0_CMD5
0009FE 0E05           03256         MOVLW   5
000A00 6E00           03257         MOVWF   YY_STATE, ACCESS        ; -> state 5 (wait for channel)
000A02 0012           03258         RETURN
                      03259 
                      03260 ; Turns out we don't need this here. We already trap CMD5 for the broadcast
                      03261 ; address, so we don't recognize it again here.  This forces it to be a
                      03262 ; broadcast-only command.
                      03263 ;       IF QSCC_PORT
                      03264 ;        #include "qscc_hook_5_6.asm"
                      03265 ;       ELSE
000A04                03266 S0_CMD5:
                      03267          ; Unimplemented Command
000A04 2CE8           03268          DECFSZ WREG, W, ACCESS
000A06 D???           03269          BRA    S0_CMD6
000A08 EF?? F???      03270          GOTO   ERR_NOT_IMP             ; XXX RESERVED FOR FUTURE COMMAND XXX
                      03271 
000A0C                03272 S0_CMD6:
                      03273          ; Unimplemented Command
000A0C 2CE8           03274          DECFSZ WREG, W, ACCESS
000A0E D???           03275          BRA    S0_CMD7
000A10 EF?? F???      03276          GOTO   ERR_NOT_IMP             ; XXX RESERVED FOR FUTURE COMMAND XXX
                      03277 ;       ENDIF
                      03278 
000A14                03279 S0_CMD7:
                      03280         ; Extended commands
000A14 2CE8           03281         DECFSZ  WREG, W, ACCESS
000A16 D???           03282         BRA     S0_CMD_ERR
000A18 0E09           03283         MOVLW   9
000A1A 6E00           03284         MOVWF   YY_STATE, ACCESS        ; -> state 9 (decode extended command)
000A1C 0012           03285         RETURN
                      03286 
000A1E                03287 S0_CMD_ERR:
                      03288         ; BUG: We really shouldn't have arrived here!
                      03289         ERR_BUG 0x01, ERR_CLASS_OVERRUN
000A1E 0E01               M          MOVLW  0x01
000A20 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000A22 6A00               M          CLRF   YY_STATE, ACCESS
000A24 0012               M          RETURN
                      03290          
000A26                03291 DATA_BYTE:
000A26 0004           03292         CLRWDT
                      03293         ;
                      03294         ; Check for escape sequences
                      03295         ;
                      03296         ; in MSB mode? set this byte's MSB and skip down
000A28 A200           03297         BTFSS   SSR_STATE2, MSB_ESC, ACCESS
000A2A D???           03298         BRA     DB_CHK_LITERAL
000A2C 0103           03299         BANKSEL SIO_DATA_START
000A2E 8F00           03300         BSF     SIO_INPUT, 7, BANKED
000A30 9200           03301         BCF     SSR_STATE2, MSB_ESC, ACCESS
000A32 D???           03302         BRA     DB_HANDLER
000A34                03303 DB_CHK_LITERAL:
                      03304         ; no, how about in literal mode? if so, just pass through this byte
000A34 A000           03305         BTFSS   SSR_STATE2, LITERAL_ESC, ACCESS
000A36 D???           03306         BRA     DB_CHK_7E
000A38 9000           03307         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
000A3A D???           03308         BRA     DB_HANDLER
000A3C                03309 DB_CHK_7E:
                      03310         ; no, ok, then is this the start of an MSB escape?
000A3C 0E7E           03311         MOVLW   0x7E
000A3E 0103           03312         BANKSEL SIO_DATA_START
000A40 6300           03313         CPFSEQ  SIO_INPUT, BANKED
000A42 D???           03314         BRA     DB_CHK_7F
000A44 8200           03315         BSF     SSR_STATE2, MSB_ESC, ACCESS
000A46 0012           03316         RETURN
                      03317 
000A48                03318 DB_CHK_7F:
                      03319         ; no, then maybe we're starting a literal escape?
000A48 0E7F           03320         MOVLW   0x7F
000A4A 0103           03321         BANKSEL SIO_DATA_START
000A4C 6300           03322         CPFSEQ  SIO_INPUT, BANKED
000A4E D???           03323         BRA     DB_HANDLER
000A50 8000           03324         BSF     SSR_STATE2, LITERAL_ESC, ACCESS
000A52 0012           03325         RETURN
                      03326         
000A54                03327 DB_HANDLER:
                      03328         ;
                      03329         ; Data byte:  If we're at state 0, we aren't expecting
                      03330         ; this, so just ignore it. 
                      03331         ;
000A54 5000           03332         MOVF    YY_STATE, W, ACCESS
000A56 E1??           03333         BNZ     S1_DATA
000A58 0012           03334         RETURN
                      03335         ;
                      03336         ; We're collecting data, so add this to the pile, depending
                      03337         ; on where the state machine is now.
                      03338         ;
000A5A                03339 S1_DATA:
                      03340         ;
                      03341         ; STATE 1: collect channel number for ON_OFF command
                      03342         ;          and execute.
                      03343         ;
000A5A C??? F???      03344         MOVFF   SIO_INPUT, YY_DATA;             Save data byte in YY_DATA
000A5E 2CE8           03345         DECFSZ  WREG, W, ACCESS
000A60 D???           03346         BRA     S2_DATA
                      03347         ;
                      03348         ; ON_OFF:
                      03349         ;
                      03350         ;   ___7______6______5______4______3______2______1______0__
                      03351         ;  |                                  |                    |
                      03352         ;  |                0                 |          1         | YY_COMMAND
                      03353         ;  |______|______|______|______|______|______|______|______|
                      03354         ;  |      |0=off |                                         |
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03355         ;  |   0  |1=on  |           Channel ID (0-47)             | YY_DATA
                      03356         ;  |______|______|______|______|______|______|______|______|
                      03357         ;
000A62                03358 ON_OFF_YY_DATA:
000A62 EC?? F???      03359         CALL    XLATE_SSR_ID
000A66 6A00           03360         CLRF    YY_STATE, ACCESS                        ; reset command state
000A68 BC00           03361         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000A6A EF?? F???      03362         GOTO    ERR_COMMAND                             ; SSR number out of range
000A6E BE00           03363         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000A70 D???           03364         BRA     PASS_DOWN_ON_OFF
000A72 BC00           03365         BTFSC   YY_DATA, 6, ACCESS
000A74 D???           03366         BRA     ON_OFF_ON
000A76 6AE8           03367         CLRF    WREG, ACCESS
000A78 EF?? F???      03368         GOTO    SSR_OUTPUT_VALUE                        ; set value off and return
                      03369 
000A7C                03370 ON_OFF_ON:
000A7C 68E8           03371         SETF    WREG, ACCESS
000A7E EF?? F???      03372         GOTO    SSR_OUTPUT_VALUE                        ; set value on and return
                      03373         
000A82                03374 PASS_DOWN_ON_OFF:
                      03375         IF ROLE_MASTER
                      03376          MOVLW  0x90
                      03377          CALL   SIO_WRITE_W
                      03378          MOVF   TARGET_SSR, W, ACCESS
                      03379          ANDLW  0x3F
                      03380          BTFSC  YY_DATA, 6, ACCESS
                      03381          BSF    WREG, 6, ACCESS
                      03382          SEND_8_BIT_W
                      03383          ;CALL  SIO_WRITE_W
                      03384          IF HAS_STATUS_LEDS
                      03385           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03386          ENDIF
                      03387          RETURN
                      03388         ELSE
000A82 EF?? F???      03389          GOTO   ERR_COMMAND
                      03390         ENDIF
                      03391 
000A86                03392 S2_DATA:
000A86 2CE8           03393         DECFSZ  WREG, W, ACCESS
000A88 D???           03394         BRA     S3_DATA
                      03395         ; SET_LVL channel byte
000A8A EC?? F???      03396         CALL    XLATE_SSR_ID
000A8E BC00           03397         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000A90 EF?? F???      03398         GOTO    ERR_COMMAND
000A94 BC00           03399         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (LSB of value)
000A96 8C00           03400         BSF     TARGET_SSR, 6, ACCESS   ; Reuse bit 6 (INVALID_SSR) for this purpose now
000A98 2A00           03401         INCF    YY_STATE, F, ACCESS     ; -> state 3 (wait for level byte)
000A9A 0012           03402         RETURN
                      03403 
000A9C                03404 S3_DATA:
                      03405         ; SET_LVL value byte
000A9C 2CE8           03406         DECFSZ  WREG, W, ACCESS
000A9E D???           03407         BRA     S4_DATA
                      03408         ;
                      03409         ; SET_LVL:
                      03410         ;
                      03411         ;   ___7______6______5______4______3______2______1______0__
                      03412         ;  |                                  |                    |
                      03413         ;  |                0                 |          2         | YY_COMMAND
                      03414         ;  |______|______|______|______|______|______|______|______|
                      03415         ;  |NOT_MY|Value |                                         |
                      03416         ;  | _SSR |LSB   |           Channel ID (0-47)             | TARGET_SSR
                      03417         ;  |______|______|______|______|______|______|______|______|
                      03418         ;  |      |                                                |
                      03419         ;  |   0  |            Value MSBs (0-127)                  | YY_DATA
                      03420         ;  |______|______|______|______|______|______|______|______|
                      03421         ;
000AA0 BE00           03422         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000AA2 D???           03423         BRA     PASS_DOWN_SET_LVL
000AA4 90D8           03424         BCF     STATUS, C, ACCESS                       ; move LSB -> CARRY
000AA6 BC00           03425         BTFSC   TARGET_SSR, 6, ACCESS
000AA8 80D8           03426         BSF     STATUS, C, ACCESS
000AAA 3400           03427         RLCF    YY_DATA, W, ACCESS                      ; Shift LSB into value byte
000AAC 6A00           03428         CLRF    YY_STATE, ACCESS                        ; reset state (end of command)
                      03429         ;XXX removed MOVF       YY_DATA, W, ACCESS
000AAE EF?? F???      03430         GOTO    SSR_OUTPUT_VALUE                        ; set SSR to 8-bit YY_DATA value
                      03431 
000AB2                03432 PASS_DOWN_SET_LVL:
                      03433         IF ROLE_MASTER
                      03434          MOVLW  0xA0
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03435          CALL   SIO_WRITE_W
                      03436          BCF    TARGET_SSR, 7, ACCESS
                      03437          MOVF   TARGET_SSR, W, ACCESS
                      03438          SEND_8_BIT_W
                      03439          ;CALL  SIO_WRITE_W
                      03440          MOVF   YY_DATA, W, ACCESS
                      03441          SEND_8_BIT_W
                      03442          ;CALL  SIO_WRITE_W
                      03443          CLRF   YY_STATE, ACCESS
                      03444          IF HAS_STATUS_LEDS
                      03445           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03446          ENDIF
                      03447          RETURN
                      03448         ELSE
                      03449          ERR_BUG 0x02, ERR_CLASS_IN_VALID
000AB2 0E02               M          MOVLW  0x02
000AB4 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000AB6 6A00               M          CLRF   YY_STATE, ACCESS
000AB8 0012               M          RETURN
                      03450         ENDIF
                      03451 
000ABA                03452 S4_DATA:
000ABA 2CE8           03453         DECFSZ  WREG, W, ACCESS
000ABC D???           03454         BRA     S5_DATA
                      03455         ; BULK_UPD, received channel byte
000ABE EC?? F???      03456         CALL    XLATE_SSR_ID
000AC2 BC00           03457         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AC4 EF?? F???      03458         GOTO    ERR_COMMAND
                      03459         ;BTFSC  YY_DATA, 6, ACCESS      ; preserve bit 7 (resolution flag)
                      03460         ;BSF    TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
                      03461         WAIT_FOR_SENTINEL .57, B'01010101', 0   ; -> S6.0 when sentinel found
000AC8 0E39               M          MOVLW  57
000ACA 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
000ACC 0E55               M          MOVLW  85
000ACE 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
000AD0 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
000AD2 6E00               M          MOVWF  YY_STATE, ACCESS
000AD4 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
000AD6 0E00               M          MOVLW  0
000AD8 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
000ADA 0012           03462         RETURN
                      03463 
000ADC                03464 S5_DATA:
000ADC 2CE8           03465         DECFSZ  WREG, W, ACCESS
000ADE D???           03466         BRA     S6_DATA
                      03467         ; RAMP_LVL received channel number
000AE0 EC?? F???      03468         CALL    XLATE_SSR_ID
000AE4 BC00           03469         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000AE6 EF?? F???      03470         GOTO    ERR_COMMAND
000AEA BC00           03471         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (direction flag)
000AEC 8C00           03472         BSF     TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
000AEE 6A00           03473         CLRF    YY_CMD_FLAGS, ACCESS
000AF0 BE00           03474         BTFSC   YY_DATA, 7, ACCESS      ; bit 7: cycle flag -> YY_CMD_FLAGS
000AF2 8E00           03475         BSF     YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
000AF4 0E07           03476         MOVLW   7
000AF6 6E00           03477         MOVWF   YY_STATE, ACCESS        ; -> state 7 (wait for step count)
000AF8 0012           03478         RETURN
                      03479         
                      03480 
000AFA                03481 S6_DATA:
000AFA 2CE8           03482         DECFSZ  WREG, W, ACCESS
000AFC EF?? F???      03483         GOTO    S7_DATA
                      03484         ;
                      03485         ; State 6: Wait for Sentinel
                      03486         ;
                      03487         ; In this state, the machine is looking ahead in the data stream
                      03488         ; for a sentinel pattern.  The pattern is terminated by the byte
                      03489         ; YY_LOOK_FOR and must be seen in the next YY_LOOKAHEAD_MAX bytes.
                      03490         ; If the sentinel is not recognized before YY_LOOKAHEAD_MAX runs
                      03491         ; out, we abort on ERR_COMMAND.
                      03492         ;
                      03493         ; Once it's recognized, we move to YY_NEXT_STATE immediately.  This is
                      03494         ; not a state here in the state machine, but a sub-case of state 6
                      03495         ; to interpret the final packet.
                      03496         ;
                      03497         ; In order to do this, we buffer up the input received in YY_BUFFER.  This is
                      03498         ; a YY_BUF_LEN-byte memory space aligned on a data bank boundary where YY_BUF_LEN
                      03499         ; is not more than 256 (currently it's 200).  We will record the character at
                      03500         ; YY_BUFFER[YY_BUF_IDX++] and stop if YY_BUF_IDX > YY_LOOKAHEAD_MAX.
                      03501         ;
000B00 0004           03502         CLRWDT
000B02 5000           03503         MOVF    YY_DATA, W, ACCESS              ; Is this the sentinel we're looking for?
000B04 6200           03504         CPFSEQ  YY_LOOK_FOR, ACCESS
000B06 EF?? F???      03505         GOTO    S6_KEEP_LOOKING
                      03506         ;
                      03507         ; We have a packet, now switch on YY_NEXT_STATE to decode and execute
                      03508         ; the completed command.
                      03509         ;
000B0A 5000           03510         MOVF    YY_NEXT_STATE, W, ACCESS
000B0C E0??           03511         BZ      S6_0_DATA
000B0E EF?? F???      03512         GOTO    S6_1_DATA       ; too far away for relative branch
                      03513         ;
                      03514         ; S6.0: Complete BULK_UPD command (from state 5)
                      03515         ;
                      03516         ;   ___7______6______5______4______3______2______1______0__
                      03517         ;  |                                  |                    |
                      03518         ;  |                0                 |          3         | YY_COMMAND
                      03519         ;  |______|______|______|______|______|______|______|______|
                      03520         ;  |NOT_MY|      |                                         |
                      03521         ;  | _SSR |      |   c = Starting Channel ID (0-47)        | TARGET_SSR
                      03522         ;  |______|______|______|______|______|______|______|______|
                      03523         ;  |      |                                                |
                      03524         ;  |   0  |      n = (Number of channels - 1) (0-47)       | YY_BUFFER+0
                      03525         ;  |______|______|______|______|______|______|______|______|
                      03526         ;  |                                                       |
                      03527         ;  |                  Value for SSR #c                     | YY_BUFFER+1
                      03528         ;  |______|______|______|______|______|______|______|______|
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03529         ;  |                                                       |
                      03530         ;  |                  Value for SSR #c+1                   | YY_BUFFER+2
                      03531         ;  |______|______|______|______|______|______|______|______|
                      03532         ;                               .
                      03533         ;                               .
                      03534         ;                               .
                      03535         ;   _______________________________________________________
                      03536         ;  |                                                       |
                      03537         ;  |                  Value for SSR #c+n-1                 | YY_BUFFER+n
                      03538         ;  |______|______|______|______|______|______|______|______|
                      03539         ;                                                       <-- YY_BUF_IDX == n+1
                      03540         ;
                      03541         ;
                      03542         ;
000B12                03543 S6_0_DATA:
000B12 6A00           03544         CLRF    YY_STATE, ACCESS                ; go ahead and signal end of command parsing
                      03545         ;                                       ; now so we can just RETURN when done.
                      03546         ; Calculate expected data lengths
                      03547         ;
000B14 EE?? F0??      03548         LFSR    0, YY_BUFFER                    
000B18 5000           03549         MOVF    TARGET_SSR, W, ACCESS           ; start
000B1A 0B3F           03550         ANDLW   0x3F
000B1C 24EF           03551         ADDWF   INDF0, W, ACCESS                ; start + N-1      (N=#changed; N=n+1)
000B1E 28E8           03552         INCF    WREG, W, ACCESS                 ; start + N
000B20 0814           03553         SUBLW   NUM_CHANNELS                    ; start + N > NUM_CHANNELS? 
000B22 E2??           03554         BC      S6_0_DATA_N_OK                  ; NO: proceed
000B24 EF?? F???      03555         GOTO    ERR_COMMAND                     ; YES: bad command - reject it!
                      03556         ;
                      03557         ; Do we have all the bytes yet?  (Or did a data byte happen to equal our sentinel?)
                      03558         ;
000B28                03559 S6_0_DATA_N_OK:
000B28 28EF           03560         INCF    INDF0, W, ACCESS                ; W=N
000B2A 6400           03561         CPFSGT  YY_BUF_IDX, ACCESS              ; if IDX > N, we're done.
000B2C EF?? F???      03562         GOTO    S6_KEEP_LOOKING                 ; otherwise, go back and wait for more data
                      03563         ; XXX Don't do this.
                      03564         ;INCF   INDF0, F, ACCESS                ; fix it so that YY_BUFFER[0] is N, not N-1
                      03565         ;
                      03566         ; start bulk update of channels
                      03567         ;
                      03568         ; Remember that since the protocol specifies that we get N-1 in the length field,
                      03569         ; we will always have at least 1 channel to change.  (There's no way to specify a
                      03570         ; BULK_UPD command to change 0 channels.)
                      03571         ;
                      03572         ; Does the target range of channels lie entirely within the slave chip's 
                      03573         ; range?  If so, just pass the whole command down to it, with starting SSR
                      03574         ; number translated down to its range...
                      03575         ;
000B30 AE00           03576         BTFSS   TARGET_SSR, NOT_MY_SSR, ACCESS
000B32 D???           03577         BRA     S6_0_UPDATE_MASTER
                      03578         IF ROLE_MASTER
                      03579          CLRWDT
                      03580          IF HAS_STATUS_LEDS
                      03581           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03582          ENDIF
                      03583          MOVLW  0xB0                            ; command code
                      03584          CALL   SIO_WRITE_W
                      03585          MOVF   TARGET_SSR, W, ACCESS           ; starting channel
                      03586          SEND_8_BIT_W
                      03587          LFSR   0, YY_BUFFER                    ; now write YY_BUFFER[0..YY_BUF_IDX-1]
                      03588 S6_0_PD_ALL:
                      03589          MOVF   POSTINC0, W, ACCESS
                      03590          SEND_8_BIT_W
                      03591          DECFSZ YY_BUF_IDX, F, ACCESS
                      03592          BRA    S6_0_PD_ALL
                      03593          MOVLW  0x55                            ; and finally the trailing sentinel byte $55.
                      03594          CALL   SIO_WRITE_W
                      03595          RETURN
                      03596         ELSE
                      03597          ERR_BUG 0x03, ERR_CLASS_IN_VALID
000B34 0E03               M          MOVLW  0x03
000B36 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000B38 6A00               M          CLRF   YY_STATE, ACCESS
000B3A 0012               M          RETURN
                      03598         ENDIF
                      03599 
000B3C                03600 S6_0_UPDATE_MASTER:
                      03601         ;
                      03602         ; Copy the bytes directly into SSR registers
                      03603         ;
000B3C 0004           03604         CLRWDT
000B3E EE?? F0??      03605         LFSR    0, YY_BUFFER                    ; FSR0 points to each source data byte to copy
000B42 EE?? F0??      03606         LFSR    1, SSR_00_VALUE                 ; FSR1 points to each destination SSR control block
000B46 EE?? F0??      03607         LFSR    2, SSR_00_FLAGS                 ; FSR2 points to the SSR flag blocks
000B4A 5000           03608         MOVF    TARGET_SSR, W, ACCESS           ; Move in to first SSR in target range
000B4C 0B3F           03609         ANDLW   0x3F
000B4E 26E1           03610         ADDWF   FSR1L, F, ACCESS                
000B50 26D9           03611         ADDWF   FSR2L, F, ACCESS
                      03612         IF ROLE_MASTER
                      03613          SUBLW  .24
                      03614          MOVWF  KK, ACCESS                      ; KK=24-start (max # of channels on OUR chip)
                      03615         ENDIF
000B52 CFEE F???      03616         MOVFF   POSTINC0, I                     ; I=N counter           (I = *FSR0++ + 1)
000B56 2A00           03617         INCF    I, F, ACCESS                    ;                            \_____/
                      03618                                                 ;                               n
000B58                03619 S6_0_UPDATE_NEXT:
000B58 6ADE           03620         CLRF    POSTINC2, ACCESS                ; clear SSR flags       *fsr2++ = 0
000B5A CFEE FFE7      03621         MOVFF   POSTINC0, INDF1                 ; set SSR               *fsr1++ = *fsr0++
000B5E 2AE1           03622         INCF    FSR1L, F, ACCESS
                      03623         IF ROLE_MASTER                          ;
                      03624          DCFSNZ KK, F, ACCESS
                      03625          BRA    S6_0_PASS_DOWN                  ; ran out of KK, send rest to slave chip
                      03626         ENDIF
000B60 2E00           03627         DECFSZ  I, F, ACCESS
000B62 D???           03628         BRA     S6_0_UPDATE_NEXT
000B64 0012           03629         RETURN
                      03630 
                      03631         IF ROLE_MASTER
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03632 S6_0_PASS_DOWN:
                      03633          DCFSNZ I, F, ACCESS                    ; we left before I-- happened
                      03634          RETURN                                 ; already out of data to send; don't bother the slave
                      03635          IF HAS_STATUS_LEDS
                      03636           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03637          ENDIF
                      03638          MOVLW  0xB0                            ; Start command to slave with I remaining values
                      03639          CALL   SIO_WRITE_W                     
                      03640          CLRF   WREG, ACCESS                    ; target SSR always 0 in this case
                      03641          SEND_8_BIT_W
                      03642          DECF   I, W, ACCESS                    ; I channels left for slave to update, 
                      03643          SEND_8_BIT_W                           ;    protocol wants I-1
                      03644 S6_0_PD_NEXT:
                      03645          MOVF   POSTINC0, W, ACCESS
                      03646          SEND_8_BIT_W
                      03647          DECFSZ I, F, ACCESS
                      03648          BRA    S6_0_PD_NEXT
                      03649          MOVLW  0x55                            ; sentinel $55 after bytes
                      03650          CALL   SIO_WRITE_W
                      03651          RETURN
                      03652         ENDIF
000B66 0012           03653         RETURN
                      03654 
                      03655 
000B68                03656 S6_1_DATA:
000B68 2EE8           03657         DECFSZ  WREG, F, ACCESS
000B6A D???           03658         BRA     S6_2_DATA
                      03659         ;
                      03660         ; S6.1: CF_CONF Command completed:
                      03661         ;
                      03662         ;   ___7______6______5______4______3______2______1______0__
                      03663         ;  |                                  |                    |
                      03664         ;  |                0                 |          7         | YY_COMMAND
                      03665         ;  |______|______|______|______|______|______|______|______|
                      03666         ;  |      |      |      |      |                           |
                      03667         ;  |   0  |   1  |   1  |   1  |             1             | (not saved)
                      03668         ;  |______|______|______|______|______|______|______|______|
                      03669         ;  |      |    Sensors connected      |DMX   | DMX start   |  
                      03670         ;  |   0  |   A      B      C      D  |MODE  | <8:7>       | YY_BUFFER+0
                      03671         ;  |______|______|______|______|______|______|______|______|
                      03672         ;  |      |                                                |
                      03673         ;  |   0  |               DMX start <6:0>                  | YY_BUFFER+1
                      03674         ;  |______|______|______|______|______|______|______|______|
                      03675         ;  |      |                                                |
                      03676         ;  |   0  |                   $3A                          | YY_BUFFER+2
                      03677         ;  |______|______|______|______|______|______|______|______|
                      03678         ;  |      |                                                |
                      03679         ;  |   0  |                   $3B                          | YY_DATA
                      03680         ;  |______|______|______|______|______|______|______|______|
                      03681         ;
                      03682         ; Validate inputs
                      03683         ;
000B6C 0E03           03684         MOVLW   3
000B6E 5C00           03685         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000B70 E2??           03686         BC      S6_1_VALID_1    
000B72 EF?? F???      03687         GOTO    S6_KEEP_LOOKING                 ; input < 3? not done yet
                      03688 
000B76                03689 S6_1_VALID_1:
000B76 E0??           03690         BZ      S6_1_VALID_2                    ; 
000B78 EF?? F???      03691         GOTO    ERR_COMMAND                     ; input > 3? too big: reject
                      03692 
000B7C                03693 S6_1_VALID_2:
000B7C EE?? F0??      03694         LFSR    0, YY_BUFFER+2
000B80 50ED           03695         MOVF    POSTDEC0, W, ACCESS             ; check 1st sentinel
                      03696         ;ANDLW  0x3F
000B82 083A           03697         SUBLW   0x3A
000B84 E0??           03698         BZ      S6_1_CONFIGURE
000B86 EF?? F???      03699         GOTO    ERR_COMMAND
                      03700 
000B8A                03701 S6_1_CONFIGURE:
000B8A CFED F???      03702         MOVFF   POSTDEC0, DMX_SLOTL
000B8E 6A00           03703         CLRF    DMX_SLOTH, ACCESS
                      03704         IF DMX_ENABLED
                      03705          BTFSC  INDF0, 0, ACCESS
                      03706          BSF    DMX_SLOTL, 7, ACCESS
                      03707          BTFSC  INDF0, 1, ACCESS
                      03708          BSF    DMX_SLOTH, DMX_BIT8, ACCESS
                      03709          BTFSC  INDF0, 2, ACCESS
                      03710          BSF    DMX_SLOTH, DMX_EN, ACCESS
                      03711         ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03712         ; Save DMX settings to EEPROM
                      03713         ;
                      03714          BEGIN_EEPROM_WRITE EE_DMX_H
                      03715          MOVFF  DMX_SLOTH, EEDATA
                      03716          WRITE_EEPROM_DATA_INC
                      03717          MOVFF  DMX_SLOTL, EEDATA
                      03718          WRITE_EEPROM_DATA
                      03719          END_EEPROM_WRITE
                      03720         ELSE
                      03721          BEGIN_EEPROM_WRITE EE_DMX_H
000B90 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000B92 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DMX_H    ; NOTE interrupts need to be OFF here!
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000B94 0E00               M           MOVLW HIGH(EE_DMX_H)          ; NOTE interrupts need to be OFF here!
000B96 6EAA               M           MOVWF EEADRH, ACCESS
                          M          ENDIF
000B98 0E05               M          MOVLW  LOW(EE_DMX_H)
000B9A 6EA9               M          MOVWF  EEADR, ACCESS
000B9C 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000B9E 9CA6               M          BCF    EECON1, CFGS, ACCESS
000BA0 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000BA2 6AA8           03722          CLRF EEDATA, ACCESS
                      03723          WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
000BA4 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000BA6 0E55               M          MOVLW  0x55
000BA8 6EA7               M          MOVWF  EECON2, ACCESS
000BAA 0EAA               M          MOVLW  0xAA
000BAC 6EA7               M          MOVWF  EECON2, ACCESS
000BAE 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000BB0                    M WRITE_EEPROM_LOOP1:
000BB0 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000BB2 D???               M          BRA    WRITE_EEPROM_LOOP1
000BB4 0004               M          CLRWDT
000BB6 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000002                M EE_LL_XX    ++
000BB8 2AA9               M         INCF    EEADR, F, ACCESS
000BBA 6AA8           03724          CLRF EEDATA, ACCESS
                      03725          WRITE_EEPROM_DATA
000BBC 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000BBE 0E55               M          MOVLW  0x55
000BC0 6EA7               M          MOVWF  EECON2, ACCESS
000BC2 0EAA               M          MOVLW  0xAA
000BC4 6EA7               M          MOVWF  EECON2, ACCESS
000BC6 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000BC8                    M WRITE_EEPROM_LOOP2:
000BC8 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000BCA D???               M          BRA    WRITE_EEPROM_LOOP2
000BCC 0004               M          CLRWDT
000BCE 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000003                M EE_LL_XX    ++
                      03726          END_EEPROM_WRITE
000BD0 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000BD2 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000BD4 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000BD6 6AAA               M           CLRF  EEADRH, ACCESS
                          M          ENDIF
000BD8 6AA9               M          CLRF   EEADR, ACCESS
                      03727         ENDIF
                      03728         ;
                      03729         ; Configure sensors
                      03730         ;
                      03731         IF HAS_SENSORS
                      03732          BSF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      03733          BSF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03734          BSF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03735          BSF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03736          BTFSS  INDF0, 6, ACCESS                        ; A 
                      03737          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      03738          BTFSS  INDF0, 5, ACCESS                        ; B 
                      03739          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03740          BTFSS  INDF0, 4, ACCESS                        ; C 
                      03741          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03742          BTFSS  INDF0, 3, ACCESS                        ; D 
                      03743          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03744          ;
                      03745          ; Save these settings to EEPROM
                      03746          ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03747          BEGIN_EEPROM_WRITE EE_SENSOR_CFG
                      03748          RRNCF  INDF0, W, ACCESS
                      03749          RRNCF  WREG, W, ACCESS
                      03750          RRNCF  WREG, W, ACCESS
                      03751          ANDLW  0x0f
                      03752          MOVFF  WREG, EEDATA
                      03753          WRITE_EEPROM_DATA
                      03754          END_EEPROM_WRITE
                      03755         ENDIF
                      03756 
000BDA 6A00           03757         CLRF    YY_STATE, ACCESS
000BDC 0012           03758         RETURN
                      03759 
000BDE                03760 S6_2_DATA:
000BDE 2EE8           03761         DECFSZ  WREG, F, ACCESS
000BE0 D???           03762         BRA     S6_3_DATA
                      03763         ;
                      03764         ; S6.2: CF_BAUD Command completed:
                      03765         ;
                      03766         ;   ___7______6______5______4______3______2______1______0__
                      03767         ;  |                                  |                    |
                      03768         ;  |                0                 |          7         | YY_COMMAND
                      03769         ;  |______|______|______|______|______|______|______|______|
                      03770         ;  |      |      |      |      |                           |
                      03771         ;  |   0  |   1  |   1  |   1  |             2             | (not saved)
                      03772         ;  |______|______|______|______|______|______|______|______|
                      03773         ;  |      |                                                |  
                      03774         ;  |   0  |              baud rate code                    | YY_BUFFER+0
                      03775         ;  |______|______|______|______|______|______|______|______|
                      03776         ;  |      |                                                |
                      03777         ;  |   0  |                   $26                          | YY_DATA
                      03778         ;  |______|______|______|______|______|______|______|______|
                      03779         ;
                      03780         ; Validate inputs
                      03781         ;
000BE2 0E01           03782         MOVLW   1
000BE4 5C00           03783         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000BE6 E2??           03784         BC      S6_2_VALID1
000BE8 EF?? F???      03785         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03786 
000BEC                03787 S6_2_VALID1:
000BEC E0??           03788         BZ      S6_2_VALID2
000BEE EF?? F???      03789         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03790 
000BF2                03791 S6_2_VALID2:
000BF2 EE?? F0??      03792         LFSR    0, YY_BUFFER
000BF6 0E11           03793         MOVLW   0x11
000BF8 5CEF           03794         SUBWF   INDF0, W, ACCESS                ; test baud rate in range [$00,$10]
000BFA E3??           03795         BNC     S6_2_SET_BAUD
000BFC EF?? F???      03796         GOTO    ERR_COMMAND
                      03797 
000C00                03798 S6_2_SET_BAUD:
                      03799         ;
                      03800         ; Change the baud rate in the slave first, or we'll
                      03801         ; never be able to talk to it again...
                      03802         ;
                      03803         ; limit baud rate value 
                      03804         ; XXX UPDATE THIS FOR CURRENT BAUD RATE LIST!
000C00 0E0F           03805         MOVLW   0x0F
000C02 16EF           03806         ANDWF   INDF0, F, ACCESS
                      03807         IF ROLE_MASTER
                      03808          IF HAS_STATUS_LEDS
                      03809           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03810          ENDIF
                      03811          MOVLW  0xF0                            ; F0 72 <baud> 26  -> slave
                      03812          CALL   SIO_WRITE_W
                      03813          MOVLW  0x72
                      03814          CALL   SIO_WRITE_W
                      03815          MOVF   INDF0, W, ACCESS
                      03816          CALL   SIO_WRITE_W
                      03817          MOVLW  0x26
                      03818          CALL   SIO_WRITE_W
                      03819          CALL   DRAIN_M_S_TX_BLOCKING           ; wait for command to slave to be fully sent
                      03820         ENDIF                                   ; before changing the UART speed on it.
                      03821 
                      03822         BEGIN_EEPROM_WRITE EE_BAUD
000C04 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000C06 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_BAUD     ; NOTE interrupts need to be OFF here!
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C08 0E00               M           MOVLW HIGH(EE_BAUD)           ; NOTE interrupts need to be OFF here!
000C0A 6EAA               M           MOVWF EEADRH, ACCESS
                          M          ENDIF
000C0C 0E01               M          MOVLW  LOW(EE_BAUD)
000C0E 6EA9               M          MOVWF  EEADR, ACCESS
000C10 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000C12 9CA6               M          BCF    EECON1, CFGS, ACCESS
000C14 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000C16 CFEF FFA8      03823         MOVFF   INDF0, EEDATA                   ; save value permanently (address 001)
                      03824         WRITE_EEPROM_DATA
000C1A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C1C 0E55               M          MOVLW  0x55
000C1E 6EA7               M          MOVWF  EECON2, ACCESS
000C20 0EAA               M          MOVLW  0xAA
000C22 6EA7               M          MOVWF  EECON2, ACCESS
000C24 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C26                    M WRITE_EEPROM_LOOP3:
000C26 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C28 D???               M          BRA    WRITE_EEPROM_LOOP3
000C2A 0004               M          CLRWDT
000C2C 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000004                M EE_LL_XX    ++
                      03825         END_EEPROM_WRITE
000C2E 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000C30 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000C32 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000C34 6AAA               M           CLRF  EEADRH, ACCESS
                          M          ENDIF
000C36 6AA9               M          CLRF   EEADR, ACCESS
000C38 50EF           03826         MOVF    INDF0, W, ACCESS
000C3A EC?? F???      03827         CALL    SIO_SET_BAUD_W
000C3E 6A00           03828         CLRF    YY_STATE, ACCESS
000C40 0012           03829         RETURN
                      03830 
000C42                03831 S6_3_DATA:
000C42 2EE8           03832         DECFSZ  WREG, F, ACCESS
000C44 D???           03833         BRA     S6_4_DATA
                      03834         ;
                      03835         ; S6.3: CF_RESET Command completed:
                      03836         ;
                      03837         ;   ___7______6______5______4______3______2______1______0__
                      03838         ;  |                                  |                    |
                      03839         ;  |                0                 |          7         | YY_COMMAND
                      03840         ;  |______|______|______|______|______|______|______|______|
                      03841         ;  |      |      |      |      |                           |
                      03842         ;  |   0  |   1  |   1  |   1  |             3             | (not saved)
                      03843         ;  |______|______|______|______|______|______|______|______|
                      03844         ;  |      |                                                |
                      03845         ;  |   0  |                   $24                          | YY_BUFFER+0
                      03846         ;  |______|______|______|______|______|______|______|______|
                      03847         ;  |      |                                                |
                      03848         ;  |   0  |                   $72                          | YY_DATA
                      03849         ;  |______|______|______|______|______|______|______|______|
                      03850         ;
                      03851         ; Validate inputs
                      03852         ;
000C46 0E01           03853         MOVLW   1
000C48 5C00           03854         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000C4A E2??           03855         BC      S6_3_VALID      
000C4C EF?? F???      03856         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03857 
000C50                03858 S6_3_VALID:
000C50 E0??           03859         BZ      S6_3_RESET
000C52 EF?? F???      03860         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03861 
000C56                03862 S6_3_RESET:
000C56 EE?? F0??      03863         LFSR    0, YY_BUFFER
000C5A 0E24           03864         MOVLW   0x24
000C5C 62EF           03865         CPFSEQ  INDF0, ACCESS
000C5E EF?? F???      03866         GOTO    ERR_COMMAND
000C62 EF?? F???      03867         GOTO    FACTORY_RESET                   ; we never return from here
                      03868         ERR_BUG 0x70, ERR_CLASS_FATAL_RESET     
000C66 0E70               M          MOVLW  0x70
000C68 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_FATAL_RESET == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_FATAL_RESET == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_FATAL_RESET == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000C6A 6A00               M          CLRF   YY_STATE, ACCESS
000C6C 0012               M          RETURN
                      03869 
000C6E                03870 S6_3_HALT:
000C6E D???           03871         BRA     S6_3_HALT
                      03872 
000C70                03873 S6_4_DATA:
000C70 2EE8           03874         DECFSZ  WREG, F, ACCESS
000C72 D???           03875         BRA     S6_5_DATA
                      03876         ;
                      03877         ; S6.4: CF_PHASE Command completed:
                      03878         ;
                      03879         ;   ___7______6______5______4______3______2______1______0__
                      03880         ;  |                                  |                    |
                      03881         ;  |                0                 |          7         | YY_COMMAND
                      03882         ;  |______|______|______|______|______|______|______|______|
                      03883         ;  |      |      |      |      |             | phase       |
                      03884         ;  |   0  |   1  |   0  |   0  |   X      X  |  <8:7>      | YY_YY
                      03885         ;  |______|______|______|______|______|______|______|______|
                      03886         ;  |      |                                                |
                      03887         ;  |   0  |               phase <6:0>                      | YY_BUFFER+0
                      03888         ;  |______|______|______|______|______|______|______|______|
                      03889         ;  |      |                                                |
                      03890         ;  |   0  |                   $50                          | YY_BUFFER+1
                      03891         ;  |______|______|______|______|______|______|______|______|
                      03892         ;  |      |                                                |
                      03893         ;  |   0  |                   $4F                          | YY_DATA
                      03894         ;  |______|______|______|______|______|______|______|______|
                      03895         ;
                      03896         ; Validate inputs
                      03897         ;
000C74 0E02           03898         MOVLW   2
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C76 5C00           03899         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000C78 E2??           03900         BC      S6_4_VALID
000C7A EF?? F???      03901         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03902 
000C7E                03903 S6_4_VALID:
000C7E E0??           03904         BZ      S6_4_SET_PHASE
000C80 EF?? F???      03905         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03906 
000C84                03907 S6_4_SET_PHASE:
000C84 EE?? F0??      03908         LFSR    0, YY_BUFFER+1
000C88 0E50           03909         MOVLW   0x50
000C8A 62ED           03910         CPFSEQ  POSTDEC0, ACCESS
000C8C EF?? F???      03911         GOTO    ERR_COMMAND
                      03912         ;
                      03913         ; Set phase (and notify slave)
                      03914         ;
                      03915         IF ROLE_MASTER
                      03916          IF HAS_STATUS_LEDS
                      03917           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03918          ENDIF
                      03919          MOVLW  0xF0
                      03920          CALL   SIO_WRITE_W
                      03921          MOVF   YY_YY, W, ACCESS
                      03922          SEND_8_BIT_W
                      03923          ;CALL  SIO_WRITE_W
                      03924          MOVF   INDF0, W, ACCESS
                      03925          SEND_8_BIT_W
                      03926          ;CALL  SIO_WRITE_W
                      03927          MOVLW  0x50
                      03928          CALL   SIO_WRITE_W
                      03929          MOVLW  0x4F
                      03930          CALL   SIO_WRITE_W
                      03931         ENDIF
000C90 CFEF F???      03932         MOVFF   INDF0, PHASE_OFFSETL
000C94 B000           03933         BTFSC   YY_YY, 0, ACCESS
000C96 8E00           03934         BSF     PHASE_OFFSETL, 7, ACCESS
000C98 6A00           03935         CLRF    PHASE_OFFSETH, ACCESS
000C9A B200           03936         BTFSC   YY_YY, 1, ACCESS
000C9C 8000           03937         BSF     PHASE_OFFSETH, 0, ACCESS
                      03938         BEGIN_EEPROM_WRITE EE_PHASE_H
000C9E 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000CA0 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_PHASE_H  ; NOTE interrupts need to be OFF here!
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000CA2 0E00               M           MOVLW HIGH(EE_PHASE_H)        ; NOTE interrupts need to be OFF here!
000CA4 6EAA               M           MOVWF EEADRH, ACCESS
                          M          ENDIF
000CA6 0E03               M          MOVLW  LOW(EE_PHASE_H)
000CA8 6EA9               M          MOVWF  EEADR, ACCESS
000CAA 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000CAC 9CA6               M          BCF    EECON1, CFGS, ACCESS
000CAE 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000CB0 C??? FFA8      03939         MOVFF   PHASE_OFFSETH, EEDATA
                      03940         WRITE_EEPROM_DATA
000CB4 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000CB6 0E55               M          MOVLW  0x55
000CB8 6EA7               M          MOVWF  EECON2, ACCESS
000CBA 0EAA               M          MOVLW  0xAA
000CBC 6EA7               M          MOVWF  EECON2, ACCESS
000CBE 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000CC0                    M WRITE_EEPROM_LOOP4:
000CC0 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000CC2 D???               M          BRA    WRITE_EEPROM_LOOP4
000CC4 0004               M          CLRWDT
000CC6 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000005                M EE_LL_XX    ++
                      03941         SET_EEPROM_ADDRESS EE_PHASE_L
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000CC8 0E00               M           MOVLW HIGH(EE_PHASE_L)        ; NOTE interrupts need to be OFF here!
000CCA 6EAA               M           MOVWF EEADRH, ACCESS
                          M          ENDIF
000CCC 0E04               M          MOVLW  LOW(EE_PHASE_L)
000CCE 6EA9               M          MOVWF  EEADR, ACCESS
000CD0 C??? FFA8      03942         MOVFF   PHASE_OFFSETL, EEDATA
                      03943         WRITE_EEPROM_DATA
000CD4 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000CD6 0E55               M          MOVLW  0x55
000CD8 6EA7               M          MOVWF  EECON2, ACCESS
000CDA 0EAA               M          MOVLW  0xAA
000CDC 6EA7               M          MOVWF  EECON2, ACCESS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000CDE 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000CE0                    M WRITE_EEPROM_LOOP5:
000CE0 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000CE2 D???               M          BRA    WRITE_EEPROM_LOOP5
000CE4 0004               M          CLRWDT
000CE6 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000006                M EE_LL_XX    ++
                      03944         END_EEPROM_WRITE
000CE8 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000CEA 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000CEC 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000CEE 6AAA               M           CLRF  EEADRH, ACCESS
                          M          ENDIF
000CF0 6AA9               M          CLRF   EEADR, ACCESS
000CF2 6A00           03945         CLRF    YY_STATE, ACCESS
000CF4 0012           03946         RETURN
                      03947         
000CF6                03948 S6_5_DATA:
000CF6 2EE8           03949         DECFSZ  WREG, F, ACCESS
000CF8 D???           03950         BRA     S6_6_DATA
                      03951         ;
                      03952         ; S6.5: CF_ADDR Command completed:
                      03953         ;
                      03954         ;   ___7______6______5______4______3______2______1______0__
                      03955         ;  |                                  |                    |
                      03956         ;  |                0                 |          7         | YY_COMMAND
                      03957         ;  |______|______|______|______|______|______|______|______|
                      03958         ;  |      |      |      |      |                           |
                      03959         ;  |   0  |   1  |   1  |   0  |    new device address     | YY_YY      
                      03960         ;  |______|______|______|______|______|______|______|______|
                      03961         ;  |      |                                                |
                      03962         ;  |   0  |                   $49                          | YY_BUFFER+0
                      03963         ;  |______|______|______|______|______|______|______|______|
                      03964         ;  |      |                                                |
                      03965         ;  |   0  |                   $41                          | YY_BUFFER+1
                      03966         ;  |______|______|______|______|______|______|______|______|
                      03967         ;  |      |                                                |
                      03968         ;  |   0  |                   $44                          | YY_DATA
                      03969         ;  |______|______|______|______|______|______|______|______|
                      03970         ;
                      03971         ; Validate inputs
                      03972         ;
000CFA 0E02           03973         MOVLW   2
000CFC 5C00           03974         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000CFE E2??           03975         BC      S6_5_VALID
000D00 EF?? F???      03976         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03977 
000D04                03978 S6_5_VALID:
000D04 E0??           03979         BZ      S6_5_ADDR
000D06 EF?? F???      03980         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03981 
000D0A                03982 S6_5_ADDR:
000D0A EE?? F0??      03983         LFSR    0, YY_BUFFER+1
000D0E 0E41           03984         MOVLW   0x41
000D10 62ED           03985         CPFSEQ  POSTDEC0, ACCESS
000D12 EF?? F???      03986         GOTO    ERR_COMMAND
000D16 0E49           03987         MOVLW   0x49
000D18 62EF           03988         CPFSEQ  INDF0, ACCESS
000D1A EF?? F???      03989         GOTO    ERR_COMMAND
                      03990         ;
                      03991         ; set address
                      03992         ;
000D1E 5000           03993         MOVF    YY_YY, W, ACCESS
000D20 0B0F           03994         ANDLW   0x0F
000D22 6E00           03995         MOVWF   MY_ADDRESS, ACCESS
                      03996         BEGIN_EEPROM_WRITE EE_DEV_ID
000D24 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000D26 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DEV_ID   ; NOTE interrupts need to be OFF here!
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000D28 0E00               M           MOVLW HIGH(EE_DEV_ID)         ; NOTE interrupts need to be OFF here!
000D2A 6EAA               M           MOVWF EEADRH, ACCESS
                          M          ENDIF
000D2C 0E02               M          MOVLW  LOW(EE_DEV_ID)
000D2E 6EA9               M          MOVWF  EEADR, ACCESS
000D30 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000D32 9CA6               M          BCF    EECON1, CFGS, ACCESS
000D34 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000D36 C??? FFA8      03997         MOVFF   MY_ADDRESS, EEDATA
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03998         WRITE_EEPROM_DATA
000D3A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D3C 0E55               M          MOVLW  0x55
000D3E 6EA7               M          MOVWF  EECON2, ACCESS
000D40 0EAA               M          MOVLW  0xAA
000D42 6EA7               M          MOVWF  EECON2, ACCESS
000D44 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D46                    M WRITE_EEPROM_LOOP6:
000D46 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D48 D???               M          BRA    WRITE_EEPROM_LOOP6
000D4A 0004               M          CLRWDT
000D4C 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000007                M EE_LL_XX    ++
                      03999         END_EEPROM_WRITE
000D4E 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000D50 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000D52 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                          M          IF LUMOS_ARCH != LUMOS_ARCH_14K50
000D54 6AAA               M           CLRF  EEADRH, ACCESS
                          M          ENDIF
000D56 6AA9               M          CLRF   EEADR, ACCESS
000D58 6A00           04000         CLRF    YY_STATE, ACCESS
000D5A 0012           04001         RETURN
                      04002 
000D5C                04003 S6_6_DATA:
000D5C 2EE8           04004         DECFSZ  WREG, F, ACCESS
000D5E D???           04005         BRA     S6_7_DATA
                      04006         ;
                      04007         ; S6.6: SLEEP Command completed:
                      04008         ;
                      04009         ;   ___7______6______5______4______3______2______1______0__
                      04010         ;  |                                  |                    |
                      04011         ;  |                0                 |          7         | YY_COMMAND
                      04012         ;  |______|______|______|______|______|______|______|______|
                      04013         ;  |      |      |      |      |                           |
                      04014         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      04015         ;  |______|______|______|______|______|______|______|______|
                      04016         ;  |      |                                                |
                      04017         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      04018         ;  |______|______|______|______|______|______|______|______|
                      04019         ;  |      |                                                |
                      04020         ;  |   0  |                   $5A                          | YY_DATA
                      04021         ;  |______|______|______|______|______|______|______|______|
                      04022         ;
                      04023         ; Validate inputs
                      04024         ;
000D60 0E01           04025         MOVLW   1
000D62 5C00           04026         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000D64 E2??           04027         BC      S6_6_VALID
000D66 EF?? F???      04028         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04029 
000D6A                04030 S6_6_VALID:
000D6A E0??           04031         BZ      S6_6_SLEEP
000D6C EF?? F???      04032         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04033 
000D70                04034 S6_6_SLEEP:
000D70 EE?? F0??      04035         LFSR    0, YY_BUFFER
000D74 0E5A           04036         MOVLW   0x5A
000D76 62EF           04037         CPFSEQ  INDF0, ACCESS
000D78 EF?? F???      04038         GOTO    ERR_COMMAND
000D7C 6A00           04039         CLRF    YY_STATE, ACCESS
000D7E                04040 DO_CMD_SLEEP:
000D7E B800           04041         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; don't sleep in priv mode
000D80 0012           04042         RETURN
                      04043         ;
                      04044         ; Pass command to slave
                      04045         ;
                      04046         IF ROLE_MASTER
                      04047          IF HAS_STATUS_LEDS
                      04048           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04049          ENDIF
                      04050          MOVLW  0xF0
                      04051          CALL   SIO_WRITE_W
                      04052          CLRF   WREG, ACCESS
                      04053          CALL   SIO_WRITE_W
                      04054          MOVLW  0x5A
                      04055          CALL   SIO_WRITE_W
                      04056          MOVLW  0x5A
                      04057          CALL   SIO_WRITE_W
                      04058         ENDIF
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04059         ;
                      04060         ; Tell power supply to sleep
                      04061         ;
                      04062         IF HAS_POWER_CTRL
                      04063          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      04064         ENDIF
                      04065         IF HAS_STATUS_LEDS
                      04066          SET_SSR_SLOW_FLASH SSR_GREEN
                      04067          SET_SSR_SLOW_FLASH SSR_YELLOW
                      04068          SET_SSR_SLOW_FLASH SSR_RED
                      04069         ENDIF
000D82 8600           04070         BSF     SSR_STATE, SLEEP_MODE, ACCESS
000D84 0012           04071         RETURN
                      04072 
000D86                04073 S6_7_DATA:
000D86 2EE8           04074         DECFSZ  WREG, F, ACCESS
000D88 D???           04075         BRA     S6_8_DATA
                      04076         ;
                      04077         ; S6.7: WAKE Command completed:
                      04078         ;
                      04079         ;   ___7______6______5______4______3______2______1______0__
                      04080         ;  |                                  |                    |
                      04081         ;  |                0                 |          7         | YY_COMMAND
                      04082         ;  |______|______|______|______|______|______|______|______|
                      04083         ;  |      |      |      |      |                           |
                      04084         ;  |   0  |   0  |   0  |   0  |             1             | (not saved)
                      04085         ;  |______|______|______|______|______|______|______|______|
                      04086         ;  |      |                                                |
                      04087         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      04088         ;  |______|______|______|______|______|______|______|______|
                      04089         ;  |      |                                                |
                      04090         ;  |   0  |                   $5A                          | YY_DATA
                      04091         ;  |______|______|______|______|______|______|______|______|
                      04092         ;
                      04093         ; Validate inputs
                      04094         ;
000D8A 0E01           04095         MOVLW   1
000D8C 5C00           04096         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000D8E E2??           04097         BC      S6_7_VALID
000D90 EF?? F???      04098         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04099 
000D94                04100 S6_7_VALID:
000D94 E0??           04101         BZ      S6_7_WAKE
000D96 EF?? F???      04102         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04103 
000D9A                04104 S6_7_WAKE:
000D9A EE?? F0??      04105         LFSR    0, YY_BUFFER
000D9E 0E5A           04106         MOVLW   0x5A
000DA0 62EF           04107         CPFSEQ  INDF0, ACCESS
000DA2 EF?? F???      04108         GOTO    ERR_COMMAND
000DA6 6A00           04109         CLRF    YY_STATE, ACCESS
                      04110 
000DA8                04111 DO_CMD_WAKE:
                      04112         ;
                      04113         ; Pass command to slave
                      04114         ;
                      04115         IF ROLE_MASTER
                      04116          IF HAS_STATUS_LEDS
                      04117           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04118          ENDIF
                      04119          MOVLW  0xF0
                      04120          CALL   SIO_WRITE_W
                      04121          MOVLW  0x01
                      04122          CALL   SIO_WRITE_W
                      04123          MOVLW  0x5A
                      04124          CALL   SIO_WRITE_W
                      04125          MOVLW  0x5A
                      04126          CALL   SIO_WRITE_W
                      04127         ENDIF
                      04128         ;
                      04129         ; Tell power supply to wake up
                      04130         ;
                      04131         IF HAS_POWER_CTRL
                      04132          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      04133         ENDIF
                      04134         IF HAS_STATUS_LEDS
                      04135          ;SET_SSR_SLOW_FADE SSR_GREEN
                      04136          SET_SSR_NORMAL_MODE SSR_GREEN
                      04137         ENDIF
                      04138         ; If in DMX mode, use slower green LED pattern
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04139         IF DMX_ENABLED
                      04140          BTFSS  DMX_SLOTH, DMX_SPEED, ACCESS
                      04141          BRA    S6_8_X
                      04142         ENDIF
                      04143         IF HAS_STATUS_LEDS
                      04144          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      04145          SET_SSR_DMX_MODE SSR_GREEN
                      04146         ENDIF
000DA8                04147 S6_8_X:
                      04148         IF HAS_STATUS_LEDS
                      04149          SET_SSR_OFF SSR_YELLOW
                      04150          SET_SSR_OFF SSR_RED
                      04151         ENDIF
000DA8 9600           04152         BCF     SSR_STATE, SLEEP_MODE, ACCESS
000DAA 6800           04153         SETF    AUTO_OFF_CTRH, ACCESS
000DAC 6800           04154         SETF    AUTO_OFF_CTRL, ACCESS
000DAE 0012           04155         RETURN
                      04156 
000DB0                04157 S6_8_DATA:
000DB0 2EE8           04158         DECFSZ  WREG, F, ACCESS
000DB2 D???           04159         BRA     S6_9_DATA
                      04160         ;
                      04161         ; S6.8: SHUTDOWN Command completed:
                      04162         ;
                      04163         ;   ___7______6______5______4______3______2______1______0__
                      04164         ;  |                                  |                    |
                      04165         ;  |                0                 |          7         | YY_COMMAND
                      04166         ;  |______|______|______|______|______|______|______|______|
                      04167         ;  |      |      |      |      |                           |
                      04168         ;  |   0  |   0  |   0  |   0  |             2             | (not saved)
                      04169         ;  |______|______|______|______|______|______|______|______|
                      04170         ;  |      |                                                |
                      04171         ;  |   0  |                   $58                          | YY_BUFFER
                      04172         ;  |______|______|______|______|______|______|______|______|
                      04173         ;  |      |                                                |
                      04174         ;  |   0  |                   $59                          | YY_DATA
                      04175         ;  |______|______|______|______|______|______|______|______|
                      04176         ;
                      04177         ; Validate inputs
                      04178         ;
000DB4 0E01           04179         MOVLW   1
000DB6 5C00           04180         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000DB8 E2??           04181         BC      S6_8_VALID
000DBA EF?? F???      04182         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04183 
000DBE                04184 S6_8_VALID:
000DBE E0??           04185         BZ      S6_8_SHUTDOWN
000DC0 EF?? F???      04186         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04187 
000DC4                04188 S6_8_SHUTDOWN:
000DC4 EE?? F0??      04189         LFSR    0, YY_BUFFER
000DC8 0E58           04190         MOVLW   0x58
000DCA 62EF           04191         CPFSEQ  INDF0, ACCESS
000DCC EF?? F???      04192         GOTO    ERR_COMMAND
                      04193         ;       
                      04194         ; shutdown
                      04195         ;
000DD0 EF?? F???      04196         GOTO    HALT_MODE
                      04197 
000DD4                04198 S6_9_DATA:
000DD4 2EE8           04199         DECFSZ  WREG, F, ACCESS
000DD6 D???           04200         BRA     S6_10_DATA
                      04201         ;
                      04202         ; S6.9: QUERY Command completed:
                      04203         ;
                      04204         ;   ___7______6______5______4______3______2______1______0__
                      04205         ;  |                                  |                    |
                      04206         ;  |                0                 |          7         | YY_COMMAND
                      04207         ;  |______|______|______|______|______|______|______|______|
                      04208         ;  |      |      |      |      |                           |
                      04209         ;  |   0  |   0  |   0  |   0  |             3             | (not saved)
                      04210         ;  |______|______|______|______|______|______|______|______|
                      04211         ;  |      |                                                |
                      04212         ;  |   0  |                   $24                          | YY_BUFFER+0
                      04213         ;  |______|______|______|______|______|______|______|______|
                      04214         ;  |      |                                                |
                      04215         ;  |   0  |                   $54                          | YY_DATA
                      04216         ;  |______|______|______|______|______|______|______|______|
                      04217         ;
                      04218         ; Validate inputs
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04219         ;
000DD8 0E01           04220         MOVLW   1
000DDA 5C00           04221         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000DDC E2??           04222         BC      S6_9_VALID
000DDE EF?? F???      04223         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04224 
000DE2                04225 S6_9_VALID:
000DE2 E0??           04226         BZ      S6_9_QUERY
000DE4 EF?? F???      04227         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04228 
000DE8                04229 S6_9_QUERY:
000DE8 EE?? F0??      04230         LFSR    0, YY_BUFFER
000DEC 0E24           04231         MOVLW   0x24
000DEE 62EF           04232         CPFSEQ  INDF0, ACCESS
000DF0 EF?? F???      04233         GOTO    ERR_COMMAND
                      04234         ;
                      04235         ; return status of unit
                      04236         ;
                      04237         IF ROLE_MASTER
                      04238          IF HAS_STATUS_LEDS
                      04239           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04240          ENDIF
                      04241          MOVLW  0xF0                    ; initiate write-through IC_TXSTA command
                      04242          CALL   SIO_WRITE_W             ; to slave CPU
                      04243          MOVLW  0x23
                      04244          CALL   SIO_WRITE_W
                      04245          MOVLW  .30                     ; write 31-byte packet
                      04246          CALL   SIO_WRITE_W
                      04247         ELSE
                      04248          IF ROLE_STANDALONE
000DF4 EC?? F???      04249           CALL  TR_ON_DELAY
000DF8 868B           04250           BSF   PLAT_T_R, BIT_T_R, ACCESS               ; Fire up our transmitter now
000DFA 9400           04251           BCF   SSR_STATE2, INHIBIT_OUTPUT, ACCESS      ; Allow sending output
                      04252          ELSE
                      04253           ERR_BUG 0x0F, ERR_CLASS_INT_COMMAND
                      04254          ENDIF
                      04255         ENDIF
000DFC 5000           04256         MOVF    MY_ADDRESS, W, ACCESS
000DFE 09F0           04257         IORLW   0xF0
                      04258         IF ROLE_MASTER
                      04259          BCF    WREG, 7, ACCESS
                      04260         ENDIF
000E00 EC?? F???      04261         CALL    SIO_WRITE_W                     ; 00 start byte                         <1111aaaa>
000E04 0E1F           04262         MOVLW   0x1F
                      04263         SEND_8_BIT_W                            ; 01 "reply to query" packet type       <00011111>
000E06 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000E08 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000E0A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E0C D???               M         BRA     S8B_CHK_7E1
000E0E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000E12 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000E14 EC?? F???          M         CALL    SIO_WRITE_W                     
000E18 D???               M         BRA     S8B_END1
000E1A                    M S8B_CHK_7E1:
000E1A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000E1C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E1E D???               M         BRA     S8B_CHK_MSB1
000E20 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000E22 EC?? F???          M         CALL    SIO_WRITE_W
000E26 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000E28 EC?? F???          M         CALL    SIO_WRITE_W
000E2C D???               M         BRA     S8B_END1
000E2E                    M S8B_CHK_MSB1:
000E2E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000E30 D???               M         BRA     S8B_SEND_NORMAL1
000E32 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000E34 EC?? F???          M         CALL    SIO_WRITE_W
000E38 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000E3A                    M S8B_SEND_NORMAL1:
000E3A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000E3C EC?? F???          M         CALL    SIO_WRITE_W     
000E40                    M S8B_END1:
  00000002                M S8B_LABEL ++
000E40 0E31           04264         MOVLW   0x31
                      04265         SEND_8_BIT_W                            ; 02 ROM/format version 3.1             <00110001>
000E42 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000E44 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000E46 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E48 D???               M         BRA     S8B_CHK_7E2
000E4A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E4E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000E50 EC?? F???          M         CALL    SIO_WRITE_W                     
000E54 D???               M         BRA     S8B_END2
000E56                    M S8B_CHK_7E2:
000E56 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000E58 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E5A D???               M         BRA     S8B_CHK_MSB2
000E5C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000E5E EC?? F???          M         CALL    SIO_WRITE_W
000E62 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000E64 EC?? F???          M         CALL    SIO_WRITE_W
000E68 D???               M         BRA     S8B_END2
000E6A                    M S8B_CHK_MSB2:
000E6A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000E6C D???               M         BRA     S8B_SEND_NORMAL2
000E6E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000E70 EC?? F???          M         CALL    SIO_WRITE_W
000E74 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000E76                    M S8B_SEND_NORMAL2:
000E76 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000E78 EC?? F???          M         CALL    SIO_WRITE_W     
000E7C                    M S8B_END2:
  00000003                M S8B_LABEL ++
000E7C 6AE8           04266         CLRF    WREG, ACCESS
                      04267         IF HAS_SENSORS
                      04268          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If sensor A is enabled on this board,
                      04269          BSF    WREG, 6, ACCESS                 ; set the Sc bit for that sensor.
                      04270          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS ; and for sensor B
                      04271          BSF    WREG, 5, ACCESS                 ; 
                      04272          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS ; and for sensor C
                      04273          BSF    WREG, 4, ACCESS                 ; 
                      04274          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS ; and for sensor D
                      04275          BSF    WREG, 3, ACCESS                 ; 
                      04276         ENDIF                                   ; W=0ABCD---  1=sensor configured; 0=LED
                      04277         IF DMX_ENABLED
                      04278          BTFSC  DMX_SLOTH, DMX_EN, ACCESS
                      04279          BSF    WREG, 2, ACCESS                 ;   0----d--  DMX enable bit
                      04280          BTFSC  DMX_SLOTH, DMX_BIT8, ACCESS
                      04281          BSF    WREG, 1, ACCESS                 ;   0-----c-  DMX channel bit 8
                      04282          BTFSC  DMX_SLOTL, 7, ACCESS            ; 
                      04283          BSF    WREG, 0, ACCESS                 ;   0------c  DMX channel bit 7
                      04284         ENDIF
                      04285         SEND_8_BIT_W                            ; 03 sensor, DMX status                 <0ABCDdcc> 
000E7E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000E80 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000E82 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E84 D???               M         BRA     S8B_CHK_7E3
000E86 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000E8A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000E8C EC?? F???          M         CALL    SIO_WRITE_W                     
000E90 D???               M         BRA     S8B_END3
000E92                    M S8B_CHK_7E3:
000E92 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000E94 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E96 D???               M         BRA     S8B_CHK_MSB3
000E98 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000E9A EC?? F???          M         CALL    SIO_WRITE_W
000E9E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000EA0 EC?? F???          M         CALL    SIO_WRITE_W
000EA4 D???               M         BRA     S8B_END3
000EA6                    M S8B_CHK_MSB3:
000EA6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000EA8 D???               M         BRA     S8B_SEND_NORMAL3
000EAA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000EAC EC?? F???          M         CALL    SIO_WRITE_W
000EB0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000EB2                    M S8B_SEND_NORMAL3:
000EB2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000EB4 EC?? F???          M         CALL    SIO_WRITE_W     
000EB8                    M S8B_END3:
  00000004                M S8B_LABEL ++
                      04286         IF DMX_ENABLED
                      04287          MOVF   DMX_SLOTL, W, ACCESS            ;   0ccccccc  DMX channel bits 6:0
                      04288          ANDLW  0x7F
                      04289         ELSE
000EB8 6AE8           04290          CLRF   WREG, ACCESS
                      04291         ENDIF
                      04292         SEND_8_BIT_W                            ; 04 DMX status
000EBA 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000EBC 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000EBE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000EC0 D???               M         BRA     S8B_CHK_7E4
000EC2 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000EC6 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000EC8 EC?? F???          M         CALL    SIO_WRITE_W                     
000ECC D???               M         BRA     S8B_END4
000ECE                    M S8B_CHK_7E4:
000ECE 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000ED0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000ED2 D???               M         BRA     S8B_CHK_MSB4
000ED4 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000ED6 EC?? F???          M         CALL    SIO_WRITE_W
000EDA 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000EDC EC?? F???          M         CALL    SIO_WRITE_W
000EE0 D???               M         BRA     S8B_END4
000EE2                    M S8B_CHK_MSB4:
000EE2 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000EE4 D???               M         BRA     S8B_SEND_NORMAL4
000EE6 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000EE8 EC?? F???          M         CALL    SIO_WRITE_W
000EEC 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000EEE                    M S8B_SEND_NORMAL4:
000EEE 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000EF0 EC?? F???          M         CALL    SIO_WRITE_W     
000EF4                    M S8B_END4:
  00000005                M S8B_LABEL ++
000EF4 6AE8           04293         CLRF    WREG, ACCESS
000EF6 B800           04294         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; W=00000qs0
000EF8 84E8           04295         BSF     WREG, 2, ACCESS
000EFA B600           04296         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
000EFC 82E8           04297         BSF     WREG, 1, ACCESS
                      04298         SEND_8_BIT_W
000EFE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F00 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F02 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F04 D???               M         BRA     S8B_CHK_7E5
000F06 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F0A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F0C EC?? F???          M         CALL    SIO_WRITE_W                     
000F10 D???               M         BRA     S8B_END5
000F12                    M S8B_CHK_7E5:
000F12 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F14 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F16 D???               M         BRA     S8B_CHK_MSB5
000F18 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F1A EC?? F???          M         CALL    SIO_WRITE_W
000F1E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F20 EC?? F???          M         CALL    SIO_WRITE_W
000F24 D???               M         BRA     S8B_END5
000F26                    M S8B_CHK_MSB5:
000F26 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F28 D???               M         BRA     S8B_SEND_NORMAL5
000F2A 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F2C EC?? F???          M         CALL    SIO_WRITE_W
000F30 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F32                    M S8B_SEND_NORMAL5:
000F32 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F34 EC?? F???          M         CALL    SIO_WRITE_W     
000F38                    M S8B_END5:
  00000006                M S8B_LABEL ++
                      04299         ;CALL   SIO_WRITE_W                     ; 05 masks, priv, sleep, mem full       <0ABCDqsf> XXX N
                            OT ALL IMPLEMENTED
000F38 6AE8           04300         CLRF    WREG, ACCESS
                      04301         IF HAS_SENSORS
                      04302          MOVLW  0x78                            ; Initially set all sensors to 1
                      04303          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If that line is not a sensor... 
                      04304          BTFSC  PORT_SENS_A, BIT_SENS_A, ACCESS ; Or the sensor is not pulled low...
                      04305          BCF    WREG, 6, ACCESS                 ; Then clear the reported flag.
                      04306          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS 
                      04307          BTFSC  PORT_SENS_B, BIT_SENS_B, ACCESS 
                      04308          BCF    WREG, 5, ACCESS                 
                      04309          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS 
                      04310          BTFSC  PORT_SENS_C, BIT_SENS_C, ACCESS 
                      04311          BCF    WREG, 4, ACCESS                 
                      04312          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS 
                      04313          BTFSC  PORT_SENS_D, BIT_SENS_D, ACCESS 
                      04314          BCF    WREG, 3, ACCESS                 ; W=0ABCD---  1=sensor active (low) 0=inactive (high)
                      04315         ENDIF
000F3A B600           04316         BTFSC   SSR_STATE2, PRIV_FORBID, ACCESS
000F3C 84E8           04317         BSF     WREG, 2, ACCESS                 
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F3E B000           04318         BTFSC   PHASE_OFFSETH, 0, ACCESS
000F40 82E8           04319         BSF     WREG, 1, ACCESS
000F42 BE00           04320         BTFSC   PHASE_OFFSETL, 7, ACCESS
000F44 80E8           04321         BSF     WREG, 0, ACCESS
                      04322         SEND_8_BIT_W
000F46 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F48 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F4A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F4C D???               M         BRA     S8B_CHK_7E6
000F4E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F52 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F54 EC?? F???          M         CALL    SIO_WRITE_W                     
000F58 D???               M         BRA     S8B_END6
000F5A                    M S8B_CHK_7E6:
000F5A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F5C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F5E D???               M         BRA     S8B_CHK_MSB6
000F60 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F62 EC?? F???          M         CALL    SIO_WRITE_W
000F66 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F68 EC?? F???          M         CALL    SIO_WRITE_W
000F6C D???               M         BRA     S8B_END6
000F6E                    M S8B_CHK_MSB6:
000F6E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F70 D???               M         BRA     S8B_SEND_NORMAL6
000F72 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F74 EC?? F???          M         CALL    SIO_WRITE_W
000F78 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F7A                    M S8B_SEND_NORMAL6:
000F7A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F7C EC?? F???          M         CALL    SIO_WRITE_W     
000F80                    M S8B_END6:
  00000007                M S8B_LABEL ++
                      04323         ;CALL   SIO_WRITE_W                     ; 06 active sensors, xpriv, phase<8:7>  <0ABCDXpp> XXX N
                            OT ALL IMPLEMENTED
000F80 5000           04324         MOVF    PHASE_OFFSETL, W, ACCESS
000F82 9EE8           04325         BCF     WREG, 7, ACCESS
                      04326         SEND_8_BIT_W
000F84 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F86 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F88 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F8A D???               M         BRA     S8B_CHK_7E7
000F8C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F90 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F92 EC?? F???          M         CALL    SIO_WRITE_W                     
000F96 D???               M         BRA     S8B_END7
000F98                    M S8B_CHK_7E7:
000F98 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F9A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F9C D???               M         BRA     S8B_CHK_MSB7
000F9E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000FA0 EC?? F???          M         CALL    SIO_WRITE_W
000FA4 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000FA6 EC?? F???          M         CALL    SIO_WRITE_W
000FAA D???               M         BRA     S8B_END7
000FAC                    M S8B_CHK_MSB7:
000FAC AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000FAE D???               M         BRA     S8B_SEND_NORMAL7
000FB0 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000FB2 EC?? F???          M         CALL    SIO_WRITE_W
000FB6 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000FB8                    M S8B_SEND_NORMAL7:
000FB8 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000FBA EC?? F???          M         CALL    SIO_WRITE_W     
000FBE                    M S8B_END7:
  00000008                M S8B_LABEL ++
                      04327         ;CALL   SIO_WRITE_W                     ; 07 phase <6:0>                        <0ppppppp>
000FBE 6AE8           04328         CLRF    WREG, ACCESS
000FC0 EC?? F???      04329         CALL    SIO_WRITE_W                     ; 08 eeprom memory free <14:7>          <0eeeeeee> XXX N
                            OT IMPLEMENTED
000FC4 6AE8           04330         CLRF    WREG, ACCESS
000FC6 EC?? F???      04331         CALL    SIO_WRITE_W                     ; 09 eeprom memory free <6:0>           <0eeeeeee> XXX N
                            OT IMPLEMENTED
000FCA 6AE8           04332         CLRF    WREG, ACCESS
000FCC EC?? F???      04333         CALL    SIO_WRITE_W                     ; 10 RAM memory free <14:7>             <0MMMMMMM> XXX N
                            OT IMPLEMENTED
000FD0 6AE8           04334         CLRF    WREG, ACCESS
000FD2 EC?? F???      04335         CALL    SIO_WRITE_W                     ; 11 RAM memory free <6:0>              <0MMMMMMM> XXX N
                            OT IMPLEMENTED
                      04336         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04337          MOVLW  0x00
                      04338         ELSE
                      04339          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      04340           MOVLW 0x01
                      04341          ELSE
                      04342           IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      04343            MOVLW 0x02
                      04344           ELSE
                      04345            IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      04346             MOVLW 0x03
                      04347            ELSE
                      04348             IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
000FD6 0E04           04349              MOVLW 0x04
                      04350             ELSE
                      04351              ERROR "Invalid chip type selected"
                      04352              ERR_BUG 0x10, ERR_CLASS_DEVICE
                      04353             ENDIF
                      04354            ENDIF
                      04355           ENDIF
                      04356          ENDIF
                      04357         ENDIF
                      04358         SEND_8_BIT_W
000FD8 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000FDA 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000FDC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FDE D???               M         BRA     S8B_CHK_7E8
000FE0 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000FE4 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000FE6 EC?? F???          M         CALL    SIO_WRITE_W                     
000FEA D???               M         BRA     S8B_END8
000FEC                    M S8B_CHK_7E8:
000FEC 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000FEE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FF0 D???               M         BRA     S8B_CHK_MSB8
000FF2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000FF4 EC?? F???          M         CALL    SIO_WRITE_W
000FF8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000FFA EC?? F???          M         CALL    SIO_WRITE_W
000FFE D???               M         BRA     S8B_END8
001000                    M S8B_CHK_MSB8:
001000 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001002 D???               M         BRA     S8B_SEND_NORMAL8
001004 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001006 EC?? F???          M         CALL    SIO_WRITE_W
00100A 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00100C                    M S8B_SEND_NORMAL8:
00100C 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00100E EC?? F???          M         CALL    SIO_WRITE_W     
001012                    M S8B_END8:
  00000009                M S8B_LABEL ++
                      04359         ;CALL   SIO_WRITE_W                     ; 12 sequence flag, device ID           <0X0iiiii> XXX N
                            OT ALL IMPLEMENTED
001012 6AE8           04360         CLRF    WREG, ACCESS
001014 EC?? F???      04361         CALL    SIO_WRITE_W                     ; 13 executing sequence                 <0xxxxxxx> XXX N
                            OT IMPLEMENTED
                      04362 
001018 0E00           04363         MOVLW   0x00
00101A EC?? F???      04364         CALL    SIO_WRITE_W                     ; 14 sensor A settings                  <0owE0000> XXX N
                            OT IMPLEMENTED
00101E 0E00           04365         MOVLW   0x00
001020 EC?? F???      04366         CALL    SIO_WRITE_W                     ; 15 sensor A pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
001024 0E00           04367         MOVLW   0x00
001026 EC?? F???      04368         CALL    SIO_WRITE_W                     ; 16 sensor A sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
00102A 0E00           04369         MOVLW   0x00
00102C EC?? F???      04370         CALL    SIO_WRITE_W                     ; 17 sensor A post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04371 
001030 0E01           04372         MOVLW   0x01
001032 EC?? F???      04373         CALL    SIO_WRITE_W                     ; 18 sensor B settings                  <0owE0001> XXX N
                            OT IMPLEMENTED
001036 0E00           04374         MOVLW   0x00
001038 EC?? F???      04375         CALL    SIO_WRITE_W                     ; 19 sensor B pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
00103C 0E00           04376         MOVLW   0x00
00103E EC?? F???      04377         CALL    SIO_WRITE_W                     ; 20 sensor B sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
001042 0E00           04378         MOVLW   0x00
001044 EC?? F???      04379         CALL    SIO_WRITE_W                     ; 21 sensor B post-sequence             <0PPPPPPP> XXX N
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            OT IMPLEMENTED
                      04380 
001048 0E02           04381         MOVLW   0x02
00104A EC?? F???      04382         CALL    SIO_WRITE_W                     ; 22 sensor C settings                  <0owE0010> XXX N
                            OT IMPLEMENTED
00104E 0E00           04383         MOVLW   0x00
001050 EC?? F???      04384         CALL    SIO_WRITE_W                     ; 23 sensor C pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
001054 0E00           04385         MOVLW   0x00
001056 EC?? F???      04386         CALL    SIO_WRITE_W                     ; 24 sensor C sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
00105A 0E00           04387         MOVLW   0x00
00105C EC?? F???      04388         CALL    SIO_WRITE_W                     ; 25 sensor C post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04389 
001060 0E03           04390         MOVLW   0x03
001062 EC?? F???      04391         CALL    SIO_WRITE_W                     ; 26 sensor D settings                  <0owE0011> XXX N
                            OT IMPLEMENTED
001066 0E00           04392         MOVLW   0x00
001068 EC?? F???      04393         CALL    SIO_WRITE_W                     ; 27 sensor D pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
00106C 0E00           04394         MOVLW   0x00
00106E EC?? F???      04395         CALL    SIO_WRITE_W                     ; 28 sensor D sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
001072 0E00           04396         MOVLW   0x00
001074 EC?? F???      04397         CALL    SIO_WRITE_W                     ; 29 sensor D post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04398         
001078 5000           04399         MOVF    LAST_ERROR, W, ACCESS
00107A 6A00           04400         CLRF    LAST_ERROR, ACCESS
                      04401         SEND_8_BIT_W
00107C 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00107E 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001080 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001082 D???               M         BRA     S8B_CHK_7E9
001084 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001088 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00108A EC?? F???          M         CALL    SIO_WRITE_W                     
00108E D???               M         BRA     S8B_END9
001090                    M S8B_CHK_7E9:
001090 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001092 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001094 D???               M         BRA     S8B_CHK_MSB9
001096 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001098 EC?? F???          M         CALL    SIO_WRITE_W
00109C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00109E EC?? F???          M         CALL    SIO_WRITE_W
0010A2 D???               M         BRA     S8B_END9
0010A4                    M S8B_CHK_MSB9:
0010A4 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0010A6 D???               M         BRA     S8B_SEND_NORMAL9
0010A8 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0010AA EC?? F???          M         CALL    SIO_WRITE_W
0010AE 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0010B0                    M S8B_SEND_NORMAL9:
0010B0 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0010B2 EC?? F???          M         CALL    SIO_WRITE_W     
0010B6                    M S8B_END9:
  0000000A                M S8B_LABEL ++
                      04402         ;CALL   SIO_WRITE_W                     ; 30 fault code                         <0fffffff>
                      04403         IF ROLE_MASTER
                      04404          MOVLW  B'00011011'
                      04405          CALL   SIO_WRITE_W                     ; 31 end of packet to slave chip
                      04406         ELSE
0010B6 6AE8           04407          CLRF   WREG, ACCESS
0010B8 EC?? F???      04408          CALL   SIO_WRITE_W                     ; 31 (nil) slave fault code
0010BC 6AE8           04409          CLRF   WREG, ACCESS    
0010BE EC?? F???      04410          CALL   SIO_WRITE_W                     ; 32 (nil) slave phase offset <8:7>
0010C2 6AE8           04411          CLRF   WREG, ACCESS    
0010C4 EC?? F???      04412          CALL   SIO_WRITE_W                     ; 33 (nil) slave phase offset <6:0>
0010C8 0E??           04413          MOVLW  UPPER(SYS_SNH)
0010CA 6EF8           04414          MOVWF  TBLPTRU, ACCESS
0010CC 0E??           04415          MOVLW  HIGH(SYS_SNH)
0010CE 6EF7           04416          MOVWF  TBLPTRH, ACCESS
0010D0 0E??           04417          MOVLW  LOW(SYS_SNH)
0010D2 6EF6           04418          MOVWF  TBLPTRL, ACCESS
0010D4 0009           04419          TBLRD*+
0010D6 50F5           04420          MOVF   TABLAT, W, ACCESS
                      04421          SEND_8_BIT_W                           ; 34 Serial Number (MSB)
0010D8 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010DA 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0010DC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0010DE D???               M         BRA     S8B_CHK_7E10
0010E0 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0010E4 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0010E6 EC?? F???          M         CALL    SIO_WRITE_W                     
0010EA D???               M         BRA     S8B_END10
0010EC                    M S8B_CHK_7E10:
0010EC 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0010EE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0010F0 D???               M         BRA     S8B_CHK_MSB10
0010F2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0010F4 EC?? F???          M         CALL    SIO_WRITE_W
0010F8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0010FA EC?? F???          M         CALL    SIO_WRITE_W
0010FE D???               M         BRA     S8B_END10
001100                    M S8B_CHK_MSB10:
001100 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001102 D???               M         BRA     S8B_SEND_NORMAL10
001104 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001106 EC?? F???          M         CALL    SIO_WRITE_W
00110A 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00110C                    M S8B_SEND_NORMAL10:
00110C 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00110E EC?? F???          M         CALL    SIO_WRITE_W     
001112                    M S8B_END10:
  0000000B                M S8B_LABEL ++
001112 0009           04422          TBLRD*+
001114 50F5           04423          MOVF   TABLAT, W, ACCESS
                      04424          SEND_8_BIT_W                           ; 35 Serial Number (LSB)
001116 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001118 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00111A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00111C D???               M         BRA     S8B_CHK_7E11
00111E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001122 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001124 EC?? F???          M         CALL    SIO_WRITE_W                     
001128 D???               M         BRA     S8B_END11
00112A                    M S8B_CHK_7E11:
00112A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00112C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00112E D???               M         BRA     S8B_CHK_MSB11
001130 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001132 EC?? F???          M         CALL    SIO_WRITE_W
001136 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001138 EC?? F???          M         CALL    SIO_WRITE_W
00113C D???               M         BRA     S8B_END11
00113E                    M S8B_CHK_MSB11:
00113E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001140 D???               M         BRA     S8B_SEND_NORMAL11
001142 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001144 EC?? F???          M         CALL    SIO_WRITE_W
001148 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00114A                    M S8B_SEND_NORMAL11:
00114A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00114C EC?? F???          M         CALL    SIO_WRITE_W     
001150                    M S8B_END11:
  0000000C                M S8B_LABEL ++
001150 0E33           04425          MOVLW  0x33
001152 EC?? F???      04426          CALL   SIO_WRITE_W                     ; 36 sentinel at end of packet
001156 8400           04427          BSF    SSR_STATE, DRAIN_TR, ACCESS     ; schedule transmitter shut-down
                      04428         ENDIF
001158 6A00           04429         CLRF    YY_STATE, ACCESS
00115A 0012           04430         RETURN
                      04431         
00115C                04432 S6_10_DATA:
00115C 2EE8           04433         DECFSZ  WREG, F, ACCESS
00115E D???           04434         BRA     S6_11_DATA
                      04435         ;
                      04436         ; S6.10: DEF_SENS Command completed:
                      04437         ;
                      04438         ;   ___7______6______5______4______3______2______1______0__
                      04439         ;  |                                  |                    |
                      04440         ;  |                0                 |          7         | YY_COMMAND
                      04441         ;  |______|______|______|______|______|______|______|______|
                      04442         ;  |      |      |      |      |                           |
                      04443         ;  |   0  |   0  |   0  |   0  |             6             | (not saved)
                      04444         ;  |______|______|______|______|______|______|______|______|
                      04445         ;  |      |    Trigger modes   |             |             |  
                      04446         ;  |   0  | once | while|1=high|      0      |    sensor   | YY_BUFFER+0
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04447         ;  |______|______|______|______|______|______|______|______|
                      04448         ;  |      |                                                |
                      04449         ;  |   0  |           pre-trigger sequence ID              | YY_BUFFER+1
                      04450         ;  |______|______|______|______|______|______|______|______|
                      04451         ;  |      |                                                |
                      04452         ;  |   0  |               trigger sequence ID              | YY_BUFFER+2
                      04453         ;  |______|______|______|______|______|______|______|______|
                      04454         ;  |      |                                                |
                      04455         ;  |   0  |          post-trigger sequence ID              | YY_BUFFER+3
                      04456         ;  |______|______|______|______|______|______|______|______|
                      04457         ;  |      |                                                |
                      04458         ;  |   0  |                   $3C                          | YY_DATA
                      04459         ;  |______|______|______|______|______|______|______|______|
                      04460         ;
                      04461         ;
001160 0E04           04462         MOVLW   4
001162 5C00           04463         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
001164 E2??           04464         BC      S6_10_VALID
001166 EF?? F???      04465         GOTO    S6_KEEP_LOOKING                 ; input < 4? not done yet
                      04466 
00116A                04467 S6_10_VALID:
00116A E0??           04468         BZ      S6_10_DEF_SENS
00116C EF?? F???      04469         GOTO    ERR_COMMAND                     ; input > 4? too big: reject
                      04470 
001170                04471 S6_10_DEF_SENS:
001170 EE?? F0??      04472         LFSR    0, YY_BUFFER
001174 EF?? F???      04473         GOTO    ERR_NOT_IMP             ; XXX
                      04474         
001178                04475 S6_11_DATA:
001178 2EE8           04476         DECFSZ  WREG, F, ACCESS
00117A D???           04477         BRA     S6_12_DATA
                      04478         ;
                      04479         ; S6.11: CLR_SEQ Command completed:
                      04480         ;
                      04481         ;   ___7______6______5______4______3______2______1______0__
                      04482         ;  |                                  |                    |
                      04483         ;  |                0                 |          7         | YY_COMMAND
                      04484         ;  |______|______|______|______|______|______|______|______|
                      04485         ;  |      |      |      |      |                           |
                      04486         ;  |   0  |   0  |   0  |   0  |             8             | (not saved)
                      04487         ;  |______|______|______|______|______|______|______|______|
                      04488         ;  |      |                                                |
                      04489         ;  |   0  |                   $43                          | YY_BUFFER
                      04490         ;  |______|______|______|______|______|______|______|______|
                      04491         ;  |      |                                                |
                      04492         ;  |   0  |                   $41                          | YY_DATA
                      04493         ;  |______|______|______|______|______|______|______|______|
                      04494         ;
                      04495         ; Validate inputs
                      04496         ;
00117C 0E01           04497         MOVLW   1
00117E 5C00           04498         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
001180 E2??           04499         BC      S6_11_VALID
001182 EF?? F???      04500         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04501 
001186                04502 S6_11_VALID:
001186 E0??           04503         BZ      S6_11_CLR_SEQ
001188 EF?? F???      04504         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04505 
00118C                04506 S6_11_CLR_SEQ:
00118C EE?? F0??      04507         LFSR    0, YY_BUFFER
001190 0E43           04508         MOVLW   0x43
001192 62EF           04509         CPFSEQ  INDF0, ACCESS
001194 EF?? F???      04510         GOTO    ERR_COMMAND
001198 EF?? F???      04511         GOTO    ERR_NOT_IMP             ; XXX
                      04512 
00119C                04513 S6_12_DATA:
00119C 2EE8           04514         DECFSZ  WREG, F, ACCESS
00119E D???           04515         BRA     S6_13_DATA
                      04516         ;
                      04517         ; S6.12: DEF_SEQ Command completed:
                      04518         ;
                      04519         ;   ___7______6______5______4______3______2______1______0__
                      04520         ;  |                                  |                    |
                      04521         ;  |                0                 |          7         | YY_COMMAND
                      04522         ;  |______|______|______|______|______|______|______|______|
                      04523         ;  |      |      |      |      |                           |
                      04524         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      04525         ;  |______|______|______|______|______|______|______|______|
                      04526         ;  |      |                                                |
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04527         ;  |   0  |               sequence number                  | YY_YY
                      04528         ;  |______|______|______|______|______|______|______|______|
                      04529         ;  |      |                                                |
                      04530         ;  |   0  |             sequence length - 1 (N-1)          | YY_BUFFER+0
                      04531         ;  |______|______|______|______|______|______|______|______|
                      04532         ;  |      |                                                |
                      04533         ;  |   0  |              byte #0                           | YY_BUFFER+1
                      04534         ;  |______|______|______|______|______|______|______|______|
                      04535         ;                              .
                      04536         ;                              .
                      04537         ;                              .
                      04538         ;  _________________________________________________________
                      04539         ;  |      |                                                |
                      04540         ;  |   0  |              byte #N-1                         | YY_BUFFER+N
                      04541         ;  |______|______|______|______|______|______|______|______|
                      04542         ;  |      |                                                |
                      04543         ;  |   0  |                   $44                          | YY_BUFFER+N+1
                      04544         ;  |______|______|______|______|______|______|______|______|
                      04545         ;  |      |                                                |
                      04546         ;  |   0  |                   $73                          | YY_DATA
                      04547         ;  |______|______|______|______|______|______|______|______|
                      04548         ;
                      04549         ; Validate inputs
                      04550         ; first, do we even have a full packet yet?
                      04551         ;
0011A0 5000           04552         MOVF    YY_BUF_IDX, W, ACCESS
0011A2 E1??           04553         BNZ     S6_12_VALID
0011A4 EF?? F???      04554         GOTO    S6_KEEP_LOOKING                 
                      04555 
0011A8                04556 S6_12_VALID:
0011A8 EE?? F0??      04557         LFSR    0, YY_BUFFER
0011AC 28EF           04558         INCF    INDF0, W, ACCESS
0011AE 28E8           04559         INCF    WREG, W, ACCESS
0011B0 28E8           04560         INCF    WREG, W, ACCESS         ; W = (N-1)+3 = size our packet must be
0011B2 5C00           04561         SUBWF   YY_BUF_IDX, W, ACCESS   ; bytes read < W?
0011B4 E2??           04562         BC      S6_12_VALID2
0011B6 EF?? F???      04563         GOTO    S6_KEEP_LOOKING         ; yes, keep reading more
                      04564 
0011BA                04565 S6_12_VALID2:
0011BA E0??           04566         BZ      S6_12_DEF_SEQ
0011BC EF?? F???      04567         GOTO    ERR_COMMAND             ; if read too much, reject command
                      04568 
0011C0                04569 S6_12_DEF_SEQ:
                      04570         ;
                      04571         ; next, test sentinel
                      04572         ;
0011C0 0400           04573         DECF    YY_BUF_IDX, W, ACCESS
0011C2 26E9           04574         ADDWF   FSR0L, F, ACCESS
0011C4 0E44           04575         MOVLW   0x44
0011C6 62EF           04576         CPFSEQ  INDF0                   ; sentinel==$44?
0011C8 EF?? F???      04577         GOTO    ERR_COMMAND
                      04578         ;
                      04579         ; ok, define the sequence now
                      04580         ;
0011CC EF?? F???      04581         GOTO    ERR_NOT_IMP             ; XXX
                      04582         
0011D0                04583 S6_13_DATA:
0011D0 2EE8           04584         DECFSZ  WREG, F, ACCESS
0011D2 D???           04585         BRA     S6_14_DATA
                      04586         ;
                      04587         ; S6.13: CF_FLROM Command completed:
                      04588         ;
                      04589         ;   ___7______6______5______4______3______2______1______0__
                      04590         ;  |                                  |                    |
                      04591         ;  |                0                 |          7         | YY_COMMAND
                      04592         ;  |______|______|______|______|______|______|______|______|
                      04593         ;  |      |      |      |      |                           |
                      04594         ;  |   0  |   1  |   1  |   1  |             5             | (not saved)
                      04595         ;  |______|______|______|______|______|______|______|______|
                      04596         ;  |      |                                                |
                      04597         ;  |   0  |                   $33                          | YY_BUFFER+0
                      04598         ;  |______|______|______|______|______|______|______|______|
                      04599         ;  |      |                                                |
                      04600         ;  |   0  |                   $4C                          | YY_BUFFER+1
                      04601         ;  |______|______|______|______|______|______|______|______|
                      04602         ;  |      |                                                |
                      04603         ;  |   0  |                   $1C                          | YY_DATA
                      04604         ;  |______|______|______|______|______|______|______|______|
                      04605         ;
                      04606         ; Validate inputs
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04607         ;
0011D4 0E02           04608         MOVLW   2
0011D6 5C00           04609         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0011D8 E0??           04610         BZ      S6_13_VALID                     ; 2 bytes received (plus final)? good.
0011DA EF?? F???      04611         GOTO    ERR_COMMAND                     ; otherwise, it's not right.
                      04612         ;
                      04613         ; next, test sentinel
                      04614         ;
0011DE                04615 S6_13_VALID:
0011DE EE?? F0??      04616         LFSR    0, YY_BUFFER
0011E2 0E33           04617         MOVLW   0x33
0011E4 62EE           04618         CPFSEQ  POSTINC0
0011E6 EF?? F???      04619         GOTO    ERR_COMMAND
0011EA 0E4C           04620         MOVLW   0x4C
0011EC 62EF           04621         CPFSEQ  INDF0
0011EE EF?? F???      04622         GOTO    ERR_COMMAND
                      04623         ;
                      04624         ; ok, start updating the firmware!
                      04625         ;
                      04626         IF !QSCC_PORT
                      04627          GOTO   FLASH_UPDATE_START
                      04628         ELSE
0011F2 EF?? F???      04629          GOTO   ERR_COMMAND
                      04630         ENDIF
                      04631 
0011F6                04632 S6_14_DATA:
                      04633         IF QSCC_PORT
                      04634          #include "qscc_hook_s6_14.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s6_14 only used for QS*C systems"
                      00031         ENDIF
                      00032 
0011F6                00033 S6_14_DATA_QS:
                      00034 ; XXX needs to be rewritten for the new readerboards
                      00035 ; XXX needs to be rewritten for the new readerboards
                      00036 ; XXX needs to be rewritten for the new readerboards
                      00037 
0011F6 2CE8           00038         DECFSZ  WREG, W, ACCESS 
0011F8 D???           00039         BRA     S6_15_DATA
                      00040         ;
                      00041         ; S6.14: DISP_TEXT command received.
                      00042         ;
                      00043         ;   ___7______6______5______4______3______2______1______0__
                      00044         ;  |                                  |                    |
                      00045         ;  |                0                 |          7         | YY_COMMAND
                      00046         ;  |______|______|______|______|______|______|______|______|
                      00047         ;  |      |      |      |      |                           |
                      00048         ;  |   0  |   0  |   0  |   0  |            12             | (not saved)
                      00049         ;  |______|______|______|______|______|______|______|______|
                      00050         ;  |      |      |                                         |
                      00051         ;  |   0  |   0  |                N                        | YY_BUFFER+0
                      00052         ;  |______|______|______|______|______|______|______|______|
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00053         ;  |                                                       |
                      00054         ;  |                Character code 0                       | YY_BUFFER+1
                      00055         ;  |______|______|______|______|______|______|______|______|
                      00056         ;  |                                                       |
                      00057         ;  |                Character code 1                       | YY_BUFFER+2
                      00058         ;  |______|______|______|______|______|______|______|______|
                      00059         ;                              :
                      00060         ;                              :
                      00061         ;   _______________________________________________________
                      00062         ;  |                                                       |
                      00063         ;  |                Character code N-1                     | YY_BUFFER+N
                      00064         ;  |______|______|______|______|______|______|______|______|
                      00065         ;  |      |                                                |
                      00066         ;  |   0  |   1      0      1      0      1      0      1  | YY_DATA
                      00067         ;  |______|______|______|______|______|______|______|______|
                      00068         ;
                      00069         ; Validate inputs
                      00070         ;
0011FA 2800           00071         INCF    YY_BUFFER, W, ACCESS            ; expecting N+1 bytes
0011FC 5C00           00072         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0011FE E2??           00073         BC      S6_14_VALID                     ; N+1 bytes received (plus final)? good.
001200 EF?? F???      00074         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00075 
001204                00076 S6_14_VALID:
001204 E0??           00077         BZ      S6_14_DISP_TEXT                 ; exact byte length? great, execute command
001206 EF?? F???      00078         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00079 
00120A                00080 S6_14_DISP_TEXT:
                      00081         ;
                      00082         ; XXX display YYBUFFER[1]..YYBUFFER[YY_BUFFER[0]] on scoreboard
                      00083         ;
00120A 6A00           00084         CLRF    YY_STATE, ACCESS
00120C 0012           00085         RETURN
                      00086 
00120E                00087 S6_15_DATA:
                      00088 ; XXX needs to be rewritten for the new readerboards
                      00089 ; XXX needs to be rewritten for the new readerboards
                      00090 ; XXX needs to be rewritten for the new readerboards
00120E 2CE8           00091         DECFSZ  WREG, W, ACCESS 
001210 D???           00092         BRA     S6_16_DATA
                      00093         ;
                      00094         ; S6.15: DISP_BITMAP command received.
                      00095         ;
                      00096         ;   ___7______6______5______4______3______2______1______0__
                      00097         ;  |                                  |                    |
                      00098         ;  |                0                 |          7         | YY_COMMAND
                      00099         ;  |______|______|______|______|______|______|______|______|
                      00100         ;  |      |      |      |      |                           |
                      00101         ;  |   0  |   0  |   0  |   0  |            13             | (not saved)
                      00102         ;  |______|______|______|______|______|______|______|______|
                      00103         ;  |                                                       |
                      00104         ;  | (0,0)  (0,1) ...                                      | YY_BUFFER+0
                      00105         ;  |______|______|______|______|______|______|______|______|
                      00106         ;                              :
                      00107         ;                              :
                      00108         ;   _______________________________________________________
                      00109         ;  |                                                       |
                      00110         ;  |                                          (6,62) (6,63)| YY_BUFFER+55
                      00111         ;  |______|______|______|______|______|______|______|______|
                      00112         ;  |      |                                                |
                      00113         ;  |   0  |   1      1      0      0      1      1      0  | YY_DATA
                      00114         ;  |______|______|______|______|______|______|______|______|
                      00115         ;
                      00116         ; Validate inputs
                      00117         ;
001212 0E38           00118         MOVLW   .56                             ; expecting 56 bytes
001214 5C00           00119         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
001216 E2??           00120         BC      S6_15_VALID                     ; 56 bytes received (plus final)? good.
001218 EF?? F???      00121         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00122 
00121C                00123 S6_15_VALID:
00121C E0??           00124         BZ      S6_15_DISP_BITMAP               ; exact byte length? great, execute command
00121E EF?? F???      00125         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00126 
001222                00127 S6_15_DISP_BITMAP:
                      00128         ;
                      00129         ; XXX display YYBUFFER[0]..YYBUFFER[55] as raw bits
                      00130         ;
001222 6A00           00131         CLRF    YY_STATE, ACCESS
001224 0012           00132         RETURN
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00133 
001226                00134 S6_16_DATA:
001226 2CE8           00135         DECFSZ  WREG, W, ACCESS 
001228 D???           00136         BRA     S6_17_DATA
                      00137         ;
                      00138         ; S6.16: CF_SET_QS_PARAMS command received
                      00139         ;
                      00140         ;   ___7______6______5______4______3______2______1______0__
                      00141         ;  |                                  |                    |
                      00142         ;  |                0                 |          7         | YY_COMMAND
                      00143         ;  |______|______|______|______|______|______|______|______|
                      00144         ;  |      |      |      |      |                           |
                      00145         ;  |   0  |   1  |   1  |   1  |             6             | (not saved)
                      00146         ;  |______|______|______|______|______|______|______|______|
                      00147         ;  |                                                       |
                      00148         ;  |                Lockout time (x 1/120 sec)             | YY_BUFFER+0
                      00149         ;  |______|______|______|______|______|______|______|______|
                      00150         ;  |      |                                                |
                      00151         ;  |   0  |   0      1      1      0      0      1      0  | YY_BUFFER+1
                      00152         ;  |______|______|______|______|______|______|______|______|
                      00153         ;  |      |                                                |
                      00154         ;  |   0  |   1      0      1      1      0      1      0  | YY_DATA
                      00155         ;  |______|______|______|______|______|______|______|______|
                      00156         ;
                      00157         ; Validate inputs
                      00158         ;
00122A 0E02           00159         MOVLW   .2                              ; expecting 2 bytes
00122C 5C00           00160         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
00122E E2??           00161         BC      S6_16_VALID                     ; 2 bytes received (plus final)? good.
001230 EF?? F???      00162         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00163 
001234                00164 S6_16_VALID:
001234 E0??           00165         BZ      S6_16_CF_SET_QS_PARAMS          ; exact byte length? great, execute command
001236 EF?? F???      00166         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00167 
00123A                00168 S6_16_CF_SET_QS_PARAMS:
                      00169         ;
                      00170         ; Validate first sentinel byte
                      00171         ;
00123A 0E32           00172         MOVLW   0x32
00123C 6200           00173         CPFSEQ  YY_BUFFER+1, ACCESS
00123E EF?? F???      00174         GOTO    ERR_COMMAND
                      00175         ;
                      00176         ; set params
                      00177         ;
001242 C??? F???      00178         MOVFF   YY_BUFFER, QUIZSHOW_LCKTM
001246 6A00           00179         CLRF    YY_STATE, ACCESS
001248 0012           00180         RETURN
                      00181 
00124A                00182 S6_17_DATA:
                      00183         ERR_BUG 0x05, ERR_CLASS_OVERRUN
00124A 0E05               M          MOVLW  0x05
00124C 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
00124E 6A00               M          CLRF   YY_STATE, ACCESS
001250 0012               M          RETURN
                      04635         ELSE
                      04636          ERR_BUG 0x05, ERR_CLASS_OVERRUN
                      04637         ENDIF
                      04638 
001252                04639 S6_RESTART:
                      04640         ; We stopped too early -- resume now
001252 0012           04641         RETURN                                  ; 
                      04642 
001254                04643 S6_KEEP_LOOKING:
001254 5000           04644         MOVF    YY_BUF_IDX, W, ACCESS           ; Have we reached our limit (idx >= max)?
001256 6400           04645         CPFSGT  YY_LOOKAHEAD_MAX, ACCESS        ; (skip if MAX > bytes read so far)
001258 EF?? F???      04646         GOTO    ERR_COMMAND                     ; Yes:  Abort here and ignore data to next cmd
00125C EE?? F0??      04647         LFSR    0, YY_BUFFER                    ; No: Save character in buffer and keep waiting
001260 5000           04648         MOVF    YY_BUF_IDX, W, ACCESS
001262 26E9           04649         ADDWF   FSR0L, F, ACCESS
001264 C??? FFEF      04650         MOVFF   YY_DATA, INDF0
001268 2A00           04651         INCF    YY_BUF_IDX, F, ACCESS
00126A 0012           04652         RETURN
                      04653 
00126C                04654 S7_DATA:
00126C 2CE8           04655         DECFSZ  WREG, W, ACCESS
00126E D???           04656         BRA     S8_DATA
                      04657         ; RAMP_LVL recieved step count
001270 2800           04658         INCF    YY_DATA, W, ACCESS              ; step count - 1 sent in protocol
001272 6E00           04659         MOVWF   YY_YY, ACCESS                   ; actual step count saved in YY_YY (1-128)
001274 2A00           04660         INCF    YY_STATE, F, ACCESS             ; -> state 8 (wait for time interval byte)
001276 0012           04661         RETURN
                      04662         
001278                04663 S8_DATA:
001278 2CE8           04664         DECFSZ  WREG, W, ACCESS
00127A D???           04665         BRA     S9_DATA
00127C 2A00           04666         INCF    YY_DATA, F, ACCESS
                      04667         ;
                      04668         ; RAMP_LVL:
                      04669         ;
                      04670         ;   ___7______6______5______4______3______2______1______0__
                      04671         ;  |                                  |                    |
                      04672         ;  |                0                 |          4         | YY_COMMAND
                      04673         ;  |______|______|______|______|______|______|______|______|
                      04674         ;  |NOT_MY|0=down|                                         |
                      04675         ;  | _SSR |1=up  |           Channel ID (0-23)             | TARGET_SSR
                      04676         ;  |______|______|______|______|______|______|______|______|
                      04677         ;  |                                                       |
                      04678         ;  |              Steps between update (1-128)             | YY_YY
                      04679         ;  |______|______|______|______|______|______|______|______|
                      04680         ;  |                                                       |
                      04681         ;  |             update every n/120 sec (1-128)            | YY_DATA
                      04682         ;  |______|______|______|______|______|______|______|______|
                      04683         ;  |YCF_  |                                                |
                      04684         ;  |RAMP_ |                                                | YY_CMD_FLAGS
                      04685         ;  |CYCLE_|______|______|______|______|______|______|______|
                      04686         ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00127E BE00           04687         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
001280 D???           04688         BRA     S8_PASS_DOWN_RAMP_LVL
001282 EE?? F0??      04689         LFSR    0, SSR_00_FLAGS
001286 5000           04690         MOVF    TARGET_SSR, W, ACCESS
001288 0B3F           04691         ANDLW   0x3F
00128A 26E9           04692         ADDWF   FSR0L, F, ACCESS
00128C 6AEF           04693         CLRF    INDF0, ACCESS
00128E BC00           04694         BTFSC   TARGET_SSR, 6, ACCESS           ; this is cheaper than branching :)
001290 8EEF           04695         BSF     INDF0, FADE_UP, ACCESS
001292 AC00           04696         BTFSS   TARGET_SSR, 6, ACCESS
001294 8CEF           04697         BSF     INDF0, FADE_DOWN, ACCESS
001296 BE00           04698         BTFSC   YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
001298 8AEF           04699         BSF     INDF0, FADE_CYCLE, ACCESS
00129A 0E14           04700         MOVLW   SSR_BLOCK_LEN
00129C 26E9           04701         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's step byte
00129E C??? FFEF      04702         MOVFF   YY_YY, INDF0
0012A2 26E9           04703         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's speed byte
0012A4 C??? FFEF      04704         MOVFF   YY_DATA, INDF0
0012A8 26E9           04705         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's counter byte
0012AA C??? FFEF      04706         MOVFF   YY_DATA, INDF0
0012AE 6A00           04707         CLRF    YY_STATE, ACCESS
0012B0 0012           04708         RETURN
                      04709 
0012B2                04710 S8_PASS_DOWN_RAMP_LVL:
                      04711         ;
                      04712         ; Hand off RAMP_LVL command to slave chip.
                      04713         ;
                      04714         IF ROLE_MASTER
                      04715          IF HAS_STATUS_LEDS
                      04716           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04717          ENDIF
                      04718          MOVLW  0xC0                            ; command byte
                      04719          CALL   SIO_WRITE_W
                      04720          BCF    TARGET_SSR, 7, ACCESS
                      04721          BTFSC  YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
                      04722          BSF    TARGET_SSR, 7, ACCESS
                      04723          MOVF   TARGET_SSR, W, ACCESS
                      04724          SEND_8_BIT_W
                      04725          ;CALL  SIO_WRITE_W                     ; channel + direction
                      04726          DECF   YY_YY, W, ACCESS                ; steps - 1
                      04727          SEND_8_BIT_W
                      04728          ;CALL  SIO_WRITE_W
                      04729          DECF   YY_DATA, W, ACCESS              ; speed - 1
                      04730          SEND_8_BIT_W
                      04731          ;CALL  SIO_WRITE_W
                      04732          CLRF   YY_STATE, ACCESS
                      04733          RETURN
                      04734         ENDIF
                      04735         ERR_BUG 0x06, ERR_CLASS_IN_VALID
0012B2 0E06               M          MOVLW  0x06
0012B4 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0012B6 6A00               M          CLRF   YY_STATE, ACCESS
0012B8 0012               M          RETURN
                      04736         
0012BA                04737 S9_DATA:
0012BA 2CE8           04738         DECFSZ  WREG, W, ACCESS
0012BC D???           04739         BRA     S10_DATA
                      04740         ;
                      04741         ; State 9:  Extended command code received; decode further
                      04742         ;
                      04743         ;   ___7______6______5______4______3______2______1______0__
                      04744         ;  |                                  |                    |
                      04745         ;  |                0                 |          7         | YY_COMMAND
                      04746         ;  |______|______|______|______|______|______|______|______|
                      04747         ;  |                                                       |
                      04748         ;  |               Extended Command Code                   | YY_DATA   
                      04749         ;  |______|______|______|______|______|______|______|______|
                      04750         ;
                      04751         ; Extended commands decode like this:
                      04752         ;       01xxxxxx        privileged configuration commands
                      04753         ;       010-----        CF_PHASE command (remaining bits are data)
                      04754         ;       0110----        CF_ADDR command (remaining bits are data)
                      04755         ;       0111----        other CF_* commands (remaining bits are command number)
                      04756         ;       001-----        IC_* internal (mater->slave) commands
                      04757         ;       000-----        Regular extended commands
                      04758         ;        
0012BE BC00           04759         BTFSC   YY_DATA, 6, ACCESS
0012C0 D???           04760         BRA     S9_PRIV_CMD
0012C2 BA00           04761         BTFSC   YY_DATA, 5, ACCESS
0012C4 D???           04762         BRA     S9_INTERNAL_CMD
                      04763         ;
                      04764         ; Regular extended commands
                      04765         ;
0012C6 5000           04766         MOVF    YY_DATA, W, ACCESS
0012C8 E1??           04767         BNZ     S9_X1_WAKE
0012CA                04768 S9_X0_SLEEP:
                      04769         WAIT_FOR_SENTINEL 2, B'01011010', 6     ; -> S6.6 when sentinel found
0012CA 0E02               M          MOVLW  2
0012CC 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0012CE 0E5A               M          MOVLW  90
0012D0 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0012D2 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0012D4 6E00               M          MOVWF  YY_STATE, ACCESS
0012D6 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0012D8 0E06               M          MOVLW  6
0012DA 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0012DC 0012           04770         RETURN
0012DE                04771 S9_X1_WAKE:
0012DE 2CE8           04772         DECFSZ  WREG, W, ACCESS
0012E0 D???           04773         BRA     S9_X2_SHUTDOWN
                      04774         WAIT_FOR_SENTINEL 2, B'01011010', 7     ; -> S6.7 when sentinel found
0012E2 0E02               M          MOVLW  2
0012E4 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0012E6 0E5A               M          MOVLW  90
0012E8 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0012EA 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0012EC 6E00               M          MOVWF  YY_STATE, ACCESS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0012EE 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0012F0 0E07               M          MOVLW  7
0012F2 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0012F4 0012           04775         RETURN
0012F6                04776 S9_X2_SHUTDOWN:
0012F6 2CE8           04777         DECFSZ  WREG, W, ACCESS
0012F8 D???           04778         BRA     S9_X3_QUERY
                      04779         WAIT_FOR_SENTINEL 2, B'01011001', .8    ; -> S6.8 when sentinel found
0012FA 0E02               M          MOVLW  2
0012FC 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0012FE 0E59               M          MOVLW  89
001300 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001302 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001304 6E00               M          MOVWF  YY_STATE, ACCESS
001306 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001308 0E08               M          MOVLW  8
00130A 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00130C 0012           04780         RETURN
00130E                04781 S9_X3_QUERY:
00130E 2CE8           04782         DECFSZ  WREG, W, ACCESS
001310 D???           04783         BRA     S9_X4_DEF_SEQ
                      04784         WAIT_FOR_SENTINEL 2, B'01010100', .9    ; -> S6.9 when sentinel found
001312 0E02               M          MOVLW  2
001314 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001316 0E54               M          MOVLW  84
001318 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00131A 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00131C 6E00               M          MOVWF  YY_STATE, ACCESS
00131E 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001320 0E09               M          MOVLW  9
001322 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001324 0012           04785         RETURN
001326                04786 S9_X4_DEF_SEQ:
001326 2CE8           04787         DECFSZ  WREG, W, ACCESS
001328 D???           04788         BRA     S9_X5_EXEC_SEQ
00132A 0E0E           04789         MOVLW   .14
00132C 6E00           04790         MOVWF   YY_STATE, ACCESS                ; -> 14, wait to get I byte
00132E 0012           04791         RETURN
001330                04792 S9_X5_EXEC_SEQ:
001330 2CE8           04793         DECFSZ  WREG, W, ACCESS
001332 D???           04794         BRA     S9_X6_DEF_SENS
001334 0E0F           04795         MOVLW   .15
001336 6E00           04796         MOVWF   YY_STATE, ACCESS                ; -> 15, wait to get I byte
001338 0012           04797         RETURN
00133A                04798 S9_X6_DEF_SENS:
00133A 2CE8           04799         DECFSZ  WREG, W, ACCESS
00133C D???           04800         BRA     S9_X7_MSK_SENS
                      04801         WAIT_FOR_SENTINEL 5, B'00111100', .10   ; -> S6.10 when sentinel found
00133E 0E05               M          MOVLW  5
001340 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001342 0E3C               M          MOVLW  60
001344 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001346 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001348 6E00               M          MOVWF  YY_STATE, ACCESS
00134A 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00134C 0E0A               M          MOVLW  10
00134E 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001350 0012           04802         RETURN
001352                04803 S9_X7_MSK_SENS:
001352 2CE8           04804         DECFSZ  WREG, W, ACCESS
001354 D???           04805         BRA     S9_X8_CLR_SEQ
001356 0E10           04806         MOVLW   .16
001358 6E00           04807         MOVWF   YY_STATE, ACCESS                ; -> 16, wait to get sensor byte
00135A 0012           04808         RETURN
00135C                04809 S9_X8_CLR_SEQ:
00135C 2CE8           04810         DECFSZ  WREG, W, ACCESS
00135E D???           04811         BRA     S9_X9_XPRIV
                      04812         WAIT_FOR_SENTINEL 2, B'01000001', .11   ; -> S6.11 when sentinel found
001360 0E02               M          MOVLW  2
001362 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001364 0E41               M          MOVLW  65
001366 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001368 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00136A 6E00               M          MOVWF  YY_STATE, ACCESS
00136C 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00136E 0E0B               M          MOVLW  11
001370 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001372 0012           04813         RETURN
001374                04814 S9_X9_XPRIV:
001374 2CE8           04815         DECFSZ  WREG, W, ACCESS                 
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001376 D???           04816         BRA     S9_XA_ERR_COMMAND
                      04817         ;
                      04818         ; XPRIV:
                      04819         ;
                      04820         ;   ___7______6______5______4______3______2______1______0__
                      04821         ;  |                                  |                    |
                      04822         ;  |                0                 |          7         | YY_COMMAND
                      04823         ;  |______|______|______|______|______|______|______|______|
                      04824         ;  |      |      |      |                                  |
                      04825         ;  |   0  |   0  |   0  |   0  |             9             | YY_DATA
                      04826         ;  |______|______|______|______|______|______|______|______|
                      04827         ;
001378 EF?? F???      04828         GOTO    CMD_XPRIV
                      04829 
00137C                04830 S9_XA_ERR_COMMAND:
                      04831         IF QSCC_PORT
                      04832          #include "qscc_hook_s9_xa.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s9_xa only used for QS*C systems"
                      00031         ENDIF
                      00032 
00137C                00033 S9_XA_QS_QUERY:
00137C 2CE8           00034         DECFSZ  WREG, W, ACCESS
00137E D???           00035         BRA     S9_XB_BTN_MASK
001380 0E13           00036         MOVLW   .19
001382 6E00           00037         MOVWF   YY_STATE, ACCESS
001384 0012           00038         RETURN
                      00039 
001386                00040 S9_XB_BTN_MASK:
001386 2CE8           00041         DECFSZ  WREG, W, ACCESS
001388 D???           00042         BRA     S9_XC_DISP_TEXT
00138A 0E14           00043         MOVLW   .20
00138C 6E00           00044         MOVWF   YY_STATE, ACCESS
00138E 0012           00045         RETURN
                      00046 
001390                00047 S9_XC_DISP_TEXT:
001390 2CE8           00048         DECFSZ  WREG, W, ACCESS
001392 D???           00049         BRA     S9_XD_DISP_BITMAP
                      00050         WAIT_FOR_SENTINEL .67, B'01010101', .14
001394 0E43               M          MOVLW  67
001396 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001398 0E55               M          MOVLW  85
00139A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00139C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00139E 6E00               M          MOVWF  YY_STATE, ACCESS
0013A0 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013A2 0E0E               M          MOVLW  14
0013A4 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013A6 0012           00051         RETURN
                      00052 
0013A8                00053 S9_XD_DISP_BITMAP:
0013A8 2CE8           00054         DECFSZ  WREG, W, ACCESS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013AA D???           00055         BRA     S9_XE_ERR_COMMAND
                      00056         WAIT_FOR_SENTINEL .59, B'01100110', .15
0013AC 0E3B               M          MOVLW  59
0013AE 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013B0 0E66               M          MOVLW  102
0013B2 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013B4 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013B6 6E00               M          MOVWF  YY_STATE, ACCESS
0013B8 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013BA 0E0F               M          MOVLW  15
0013BC 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013BE 0012           00057         RETURN
                      00058 
0013C0                00059 S9_XE_ERR_COMMAND:
0013C0 EF?? F???      00060         GOTO    ERR_COMMAND
                      04833         ELSE
                      04834          GOTO   ERR_COMMAND
                      04835         ENDIF
                      04836 
0013C4                04837 S9_INTERNAL_CMD:
                      04838         ;
                      04839         ; received internal command from master
                      04840         ;
                      04841         IF !ROLE_SLAVE
0013C4 EF?? F???      04842          GOTO   ERR_COMMAND
                      04843         ELSE    ; BEGIN SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE--------
                      04844         MOVLW   0x1F                    ;                               ///////
                      04845         ANDWF   YY_DATA, W, ACCESS      ;                               ///////
                      04846         BNZ     S9_1_IC_LED             ;                               ///////
                      04847                                         ;                               ///////
                      04848 S9_0_IC_TXDAT:                          ;                               ///////
                      04849         ;                                                               ///////
                      04850         ; IC_TXDAT: Send byte stream to serial port                     ///////
                      04851         ;                                                               ///////
                      04852         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04853         ;                                                               ///////
                      04854         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04855         MOVLW   .10                     ;                               ///////
                      04856         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04857         RETURN                          ;                               ///////
                      04858                                         ;                               ///////
                      04859 S9_1_IC_LED:                            ;                               ///////
                      04860         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04861         BRA     S9_2_IC_HALT            ;                               ///////
                      04862         ;                               ;                               ///////
                      04863         ; IC_LED                        ;                               ///////
                      04864         ; wait for GY byte to arrive.   ;                               ///////
                      04865         ;                               ;                               ///////
                      04866         MOVLW   .12                     ;                               ///////
                      04867         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04868         RETURN                          ;                               ///////
                      04869                                         ;                               ///////
                      04870 S9_2_IC_HALT:                           ;                               ///////
                      04871         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04872         BRA     S9_3_IC_TXSTA           ;                               ///////
                      04873         ;                                                               ///////
                      04874         ; IC_HALT                                                       ///////
                      04875         ;                                                               ///////
                      04876         ; Close up shop.                                                ///////
                      04877         ;                                                               ///////
                      04878         IF HAS_ACTIVE                   ;                               ///////
                      04879          SET_SSR_OFF SSR_ACTIVE         ;                               ///////
                      04880         ENDIF                           ;                               ///////
                      04881         IF HAS_STATUS_LEDS
                      04882          SET_SSR_OFF SSR_GREEN          ; set LEDs for halt mode        ///////
                      04883          SET_SSR_OFF SSR_YELLOW         ;                               ///////
                      04884          SET_SSR_STEADY SSR_RED         ;                               ///////
                      04885         ENDIF
                      04886         IF HAS_T_R                      ;                 _             ///////
                      04887          BCF    PLAT_T_R, BIT_T_R, ACCESS       ; Clear T/R output      ///////
                      04888         ENDIF                           ;                               ///////
                      04889         GOTO    HALT_MODE               ;                               ///////
                      04890                                         ;                               ///////
                      04891 S9_3_IC_TXSTA:                          ;                               ///////
                      04892         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04893         BRA     S9_4_OVERRUN            ;                               ///////
                      04894         ;                                                               ///////
                      04895         ; IC_TXSTA                                                      ///////
                      04896         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04897         ; so we can tell if we're doing this or IC_TXDAT later.         ///////
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04898         ;                                                               ///////
                      04899         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04900         MOVLW   .10                     ;                               ///////
                      04901         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04902         RETURN                          ;                               ///////
                      04903                                         ;                               ///////
                      04904 S9_4_OVERRUN:                           ;                               ///////
                      04905         ERR_BUG 0x07, ERR_CLASS_OVERRUN ;                               ///////
                      04906         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
                      04907 
                      04908         
0013C8                04909 S9_PRIV_CMD:
                      04910         ; received privileged configuration command     ; 01xxxxxx
                      04911         ;
                      04912         ; Anything from here down requires the privilege bit to be set.
                      04913         ;
0013C8 B800           04914         BTFSC   SSR_STATE, PRIV_MODE, ACCESS
0013CA D???           04915         BRA     S9_DO_PRIV_CMD
0013CC 0E21           04916         MOVLW   0x21
0013CE 6E00           04917         MOVWF   LAST_ERROR, ACCESS
0013D0 EF?? F???      04918         GOTO    ERR_ABORT
0013D4                04919 S9_DO_PRIV_CMD:
                      04920         ;
                      04921         ; decode which command this is
                      04922         ;
0013D4 AA00           04923         BTFSS   YY_DATA, 5, ACCESS
0013D6 D???           04924         BRA     S9_CF_PHASE                             ; 010xxxxx
0013D8 A800           04925         BTFSS   YY_DATA, 4, ACCESS
0013DA D???           04926         BRA     S9_CF_ADDR                              ; 0110xxxx
                      04927         ; other priv commands                           ; 0111xxxx
0013DC 0E0F           04928         MOVLW   0x0F
0013DE 1400           04929         ANDWF   YY_DATA, W, ACCESS
0013E0 E1??           04930         BNZ     S9_PRIV_1
                      04931 
0013E2                04932 S9_PRIV_0:
                      04933         ;
                      04934         ; CF_NOPRV:
                      04935         ;
                      04936         ;   ___7______6______5______4______3______2______1______0__
                      04937         ;  |                                  |                    |
                      04938         ;  |                0                 |          7         | YY_COMMAND
                      04939         ;  |______|______|______|______|______|______|______|______|
                      04940         ;  |      |      |      |                                  |
                      04941         ;  |   0  |   1  |   1  |   1  |             0             | YY_DATA
                      04942         ;  |______|______|______|______|______|______|______|______|
                      04943         ;
                      04944         ;
0013E2 9800           04945         BCF     SSR_STATE, PRIV_MODE, ACCESS
                      04946         IF HAS_STATUS_LEDS
                      04947          ;SET_SSR_SLOW_FADE SSR_GREEN
                      04948          SET_SSR_NORMAL_MODE SSR_GREEN
                      04949         ENDIF
                      04950         IF DMX_ENABLED
                      04951          BTFSS  DMX_SLOTH, DMX_SPEED, ACCESS
                      04952          BRA    S9_PRIV_0X
                      04953         ENDIF
                      04954         IF HAS_STATUS_LEDS
                      04955          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      04956          SET_SSR_DMX_MODE SSR_GREEN
                      04957         ENDIF
                      04958 
0013E4                04959 S9_PRIV_0X:
                      04960         IF ROLE_MASTER
                      04961          IF HAS_STATUS_LEDS
                      04962           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04963          ENDIF
                      04964          MOVLW  0xF0                                    ; send to slave chip: F0 21 00010111 00000111
                      04965          CALL   SIO_WRITE_W
                      04966          MOVLW  0x21
                      04967          CALL   SIO_WRITE_W
                      04968          MOVLW  0x17
                      04969          CALL   SIO_WRITE_W
                      04970          MOVLW  0x07
                      04971          CALL   SIO_WRITE_W
                      04972         ENDIF
0013E4 6A00           04973         CLRF    YY_STATE, ACCESS
                      04974         IF DMX_ENABLED
                      04975          CALL   DMX_RESUME
                      04976         ENDIF
0013E6 0012           04977         RETURN
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04978 
0013E8                04979 S9_PRIV_1:
0013E8 2CE8           04980         DECFSZ  WREG, W, ACCESS
0013EA D???           04981         BRA     S9_PRIV_2
                      04982         ;
                      04983         ; CF_CONF command recognized.  Expect packet of 4 more bytes...
                      04984         ;
                      04985         WAIT_FOR_SENTINEL 4, B'00111101', 1     ; -> S6.1 when sentinel found
0013EC 0E04               M          MOVLW  4
0013EE 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013F0 0E3D               M          MOVLW  61
0013F2 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013F4 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013F6 6E00               M          MOVWF  YY_STATE, ACCESS
0013F8 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013FA 0E01               M          MOVLW  1
0013FC 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013FE 0012           04986         RETURN
                      04987 
001400                04988 S9_PRIV_2:
001400 2CE8           04989         DECFSZ  WREG, W, ACCESS
001402 D???           04990         BRA     S9_PRIV_3
                      04991         ;
                      04992         ; CF_BAUD command recognized.  Expect packet of 2 more bytes...
                      04993         ;
                      04994         WAIT_FOR_SENTINEL 2, B'00100110', 2     ; -> S6.2 when sentinel found
001404 0E02               M          MOVLW  2
001406 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001408 0E26               M          MOVLW  38
00140A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00140C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00140E 6E00               M          MOVWF  YY_STATE, ACCESS
001410 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001412 0E02               M          MOVLW  2
001414 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001416 0012           04995         RETURN
                      04996 
001418                04997 S9_PRIV_3:
001418 2CE8           04998         DECFSZ  WREG, W, ACCESS
00141A D???           04999         BRA     S9_PRIV_4
                      05000         ;
                      05001         ; CF_RESET command recognized.  Expect packet of 2 more bytes...
                      05002         ;
                      05003         WAIT_FOR_SENTINEL 2, B'01110010', 3     ; -> S6.3 when sentinel found
00141C 0E02               M          MOVLW  2
00141E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001420 0E72               M          MOVLW  114
001422 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001424 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001426 6E00               M          MOVWF  YY_STATE, ACCESS
001428 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00142A 0E03               M          MOVLW  3
00142C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00142E 0012           05004         RETURN
                      05005 
001430                05006 S9_PRIV_4:
001430 2CE8           05007         DECFSZ  WREG, W, ACCESS
001432 D???           05008         BRA     S9_PRIV_5
                      05009         ;
                      05010         ; CF_XPRIV:
                      05011         ;
                      05012         ;   ___7______6______5______4______3______2______1______0__
                      05013         ;  |                                  |                    |
                      05014         ;  |                0                 |          7         | YY_COMMAND
                      05015         ;  |______|______|______|______|______|______|______|______|
                      05016         ;  |      |      |      |                                  |
                      05017         ;  |   0  |   1  |   1  |   1  |             4             | YY_DATA
                      05018         ;  |______|______|______|______|______|______|______|______|
                      05019         ;
                      05020         ;
001434                05021 CMD_XPRIV:
001434 8600           05022         BSF     SSR_STATE2, PRIV_FORBID, ACCESS
001436 EF?? F???      05023         GOTO    S9_PRIV_0
                      05024 
00143A                05025 S9_PRIV_5:
00143A 2CE8           05026         DECFSZ  WREG, W, ACCESS
00143C D???           05027         BRA     S9_PRIV_6
                      05028         ;
                      05029         ; CF_FLROM command recognized.  Expect packet of 3 more bytes...
                      05030         ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05031         WAIT_FOR_SENTINEL 3, B'00011100', 13    ; -> S6.13 when sentinel found
00143E 0E03               M          MOVLW  3
001440 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001442 0E1C               M          MOVLW  28
001444 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001446 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001448 6E00               M          MOVWF  YY_STATE, ACCESS
00144A 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00144C 0E0D               M          MOVLW  13
00144E 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001450 0012           05032         RETURN
                      05033 
001452                05034 S9_PRIV_6:
                      05035         IF QSCC_PORT
                      05036          #include "qscc_hook_s9_priv_6.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s9_priv_6 only used for QS*C systems"
                      00031         ENDIF
                      00032 
001452                00033 S9_PRIV_6_QS_PARAM:
001452 2CE8           00034         DECFSZ  WREG, W, ACCESS
001454 D???           00035         BRA     S9_PRIV_7
                      00036         WAIT_FOR_SENTINEL 5, B'01011010', .16
001456 0E05               M          MOVLW  5
001458 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00145A 0E5A               M          MOVLW  90
00145C 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00145E 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001460 6E00               M          MOVWF  YY_STATE, ACCESS
001462 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001464 0E10               M          MOVLW  16
001466 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001468 0012           00037         RETURN
                      00038 
00146A                00039 S9_PRIV_7:
00146A EF?? F???      00040         GOTO    ERR_COMMAND
                      05037         ELSE
                      05038          GOTO   ERR_COMMAND
                      05039         ENDIF
                      05040 
00146E                05041 S9_CF_PHASE:
00146E C??? F???      05042         MOVFF   YY_DATA, YY_YY
                      05043         WAIT_FOR_SENTINEL 3, B'01001111', 4     ; -> S6.4 when sentinel found
001472 0E03               M          MOVLW  3
001474 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001476 0E4F               M          MOVLW  79
001478 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00147A 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00147C 6E00               M          MOVWF  YY_STATE, ACCESS
00147E 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001480 0E04               M          MOVLW  4
001482 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001484 0012           05044         RETURN
                      05045 
001486                05046 S9_CF_ADDR:
001486 C??? F???      05047         MOVFF   YY_DATA, YY_YY
                      05048         WAIT_FOR_SENTINEL 3, B'01000100', 5     ; -> S6.5 when sentinel found
00148A 0E03               M          MOVLW  3
00148C 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00148E 0E44               M          MOVLW  68
001490 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001492 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001494 6E00               M          MOVWF  YY_STATE, ACCESS
001496 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001498 0E05               M          MOVLW  5
00149A 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00149C 0012           05049         RETURN
                      05050         
00149E                05051 S10_DATA:
00149E 2CE8           05052         DECFSZ  WREG, W, ACCESS
0014A0 D???           05053         BRA     S11_DATA
                      05054         ;
                      05055         ; S10: IC_TXDAT / IC_TXSTA received N byte; time to loop
                      05056         ; transmitting N bytes. First byte will have MSB set.
                      05057         ;
                      05058         ;   ___7______6______5______4______3______2______1______0__
                      05059         ;  |      |                    |                           |
                      05060         ;  |   1  |          7         |             0             | (not saved)
                      05061         ;  |______|______|______|______|______|______|______|______|
                      05062         ;  |SET   |      |      |      |    IC_TXDAT:   0          |
                      05063         ;  |MSB?  |   0  |   1  |   0  |    IC_TXSTA:   3          | YY_COMMAND 
                      05064         ;  |______|______|______|______|______|______|______|______|
                      05065         ;  |                                                       |  
                      05066         ;  |                Bytes to transmit  (N)                 | YY_YY
                      05067         ;  |______|______|______|______|______|______|______|______|
                      05068         ;  |      |                                                |
                      05069         ;  |   0  |                 Data byte #0                   | (not yet received)
                      05070         ;  |______|______|______|______|______|______|______|______|
                      05071         ;                              .
                      05072         ;                              .                                    
                      05073         ;                              .
                      05074         ;   _______________________________________________________
                      05075         ;  |      |                                                |
                      05076         ;  |   0  |                 Data byte #N-1                 | (not yet received)
                      05077         ;  |______|______|______|______|______|______|______|______|
                      05078         ;  |      |                                                |
                      05079         ;  |   0  |                   $73                          | (not yet received)
                      05080         ;  |______|______|______|______|______|______|______|______|
                      05081         ;
                      05082         IF ROLE_SLAVE
                      05083          BSF    YY_COMMAND, 7, ACCESS   ; note need to set MSB in data stream
                      05084          INCF   YY_STATE, F, ACCESS     ; -> S11
                      05085          MOVFF  YY_DATA, YY_YY          ; Byte counter (N-1)
                      05086          INCF   YY_YY, F, ACCESS        ; Adjust to true byte count
                      05087          CALL   TR_ON_DELAY
                      05088          BSF    PLAT_T_R, BIT_T_R, ACCESS ; Assert bus master role by firing up the transmitter
                      05089          RETURN
                      05090         ELSE
                      05091          ERR_BUG 0x08, ERR_CLASS_OVERRUN
0014A2 0E08               M          MOVLW  0x08
0014A4 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0014A6 6A00               M          CLRF   YY_STATE, ACCESS
0014A8 0012               M          RETURN
                      05092         ENDIF
                      05093         
0014AA                05094 S11_DATA:
0014AA 2CE8           05095         DECFSZ  WREG, W, ACCESS
0014AC D???           05096         BRA     S12_DATA
                      05097         ;
                      05098         ; IC_TXDAT / IC_TXSTA
                      05099         ; We're transmitting bytes as they come in until YY_YY is depleated.
                      05100         ;
                      05101         IF ROLE_SLAVE           ; BEGIN SLAVE-SIDE INTERNAL CMD CODE-----------
                      05102          TSTFSZ YY_YY, ACCESS                   ;                       ///////
                      05103          BRA    S11_WRITE_NEXT_BYTE             ;                       ///////
                      05104          ;                                                              ///////
                      05105          ; YY_YY is zero, the byte just received should be the sentinel.///////
                      05106          ;                                                              ///////
                      05107          MOVLW  0x73                            ;                       /////// 
                      05108          CPFSEQ YY_DATA, ACCESS                 ;                       /////// 
                      05109          BRA    S11_BAD_SENTINEL                ;                       /////// 
                      05110          ;                                                              ///////
                      05111          ; If we are processing IC_TXSTA, add our own six status bytes  ///////
                      05112          ; to the end of the output stream:                             ///////
                      05113          ;                                                              ///////
                      05114          ;                                                              ///////
                      05115          ;   ___7______6______5______4______3______2______1______0__    ///////
                      05116          ;  |      |                 fault code                     |  
                      05117          ;  |   0  |           (to be cleared after this)           | LAST_ERROR  
                      05118          ;  |______|______|______|______|______|______|______|______|
                      05119          ;  |      |                                  | phase offset|
                      05120          ;  |   0  |     unassigned, write as 0       |    <8:7>    | PHASE_OFFSET[HL]
                      05121          ;  |______|______|______|______|______|______|______|______|
                      05122          ;  |      |                                                |
                      05123          ;  |   0  |           phase offset <6:0>                   | PHASE_OFFSETL
                      05124          ;  |______|______|______|______|______|______|______|______|
                      05125          ;  |      |                                                |
                      05126          ;  |   0  |           serial number <13:7>                 | SYS_SNH
                      05127          ;  |______|______|______|______|______|______|______|______|
                      05128          ;  |      |                                                |
                      05129          ;  |   0  |           serial number <6:0>                  | SYS_SNL      
                      05130          ;  |______|______|______|______|______|______|______|______|
                      05131          ;  |      |                                                |   ///////
                      05132          ;  |   0  |                   $33                          |   ///////
                      05133          ;  |______|______|______|______|______|______|______|______|   ///////
                      05134          ;                                                              ///////
                      05135          ;                                                              ///////
                      05136          BTFSS  YY_COMMAND, 0, ACCESS           ; doing IC_TXSTA?       ///////
                      05137          BRA    S11_END_TRANSMIT                ; no, skip to end       ///////
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05138          MOVF   LAST_ERROR, W, ACCESS           ; yes, send our private ///////
                      05139          SEND_8_BIT_W                           ;                       ///////
                      05140          ;CALL  SIO_WRITE_W                     ; at the end of the     ///////
                      05141          CLRF   LAST_ERROR, ACCESS              ; stream                ///////
                      05142          CLRF   WREG, ACCESS                    ;                       ///////
                      05143          BTFSC  PHASE_OFFSETH, 0, ACCESS        ;                       ///////
                      05144          BSF    WREG, 1, ACCESS                 ;                       ///////
                      05145          BTFSC  PHASE_OFFSETL, 7, ACCESS        ;                       ///////
                      05146          BSF    WREG, 0, ACCESS                 ;                       ///////
                      05147          SEND_8_BIT_W                           ;                       ///////
                      05148          ;CALL  SIO_WRITE_W                     ;                       ///////
                      05149          MOVF   PHASE_OFFSETL, W, ACCESS        ;                       ///////
                      05150          BCF    WREG, 7, ACCESS                 ;                       ///////
                      05151          SEND_8_BIT_W                           ;                       ///////
                      05152          ;CALL  SIO_WRITE_W                     ;                       ///////
                      05153          MOVLW  UPPER(SYS_SNH)                  ;                       ///////
                      05154          MOVWF  TBLPTRU, ACCESS                 ;                       ///////
                      05155          MOVLW  HIGH(SYS_SNH)                   ;                       ///////
                      05156          MOVWF  TBLPTRH, ACCESS                 ;                       ///////
                      05157          MOVLW  LOW(SYS_SNH)                    ;                       ///////
                      05158          MOVWF  TBLPTRL, ACCESS                 ;                       ///////
                      05159          TBLRD*+                                ;                       ///////
                      05160          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      05161          SEND_8_BIT_W                           ;                       ///////
                      05162          TBLRD*+                                ;                       ///////
                      05163          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      05164          SEND_8_BIT_W                           ;                       ///////
                      05165          MOVLW  0x33                            ;                       ///////
                      05166          CALL   SIO_WRITE_W                     ;                       ///////
                      05167 S11_END_TRANSMIT:                               ;                       ///////
                      05168          ; we're done, shut down transmitter when data's all sent       ///////
                      05169          BSF    SSR_STATE, DRAIN_TR, ACCESS     ;                       ///////
                      05170          CLRF   YY_STATE, ACCESS                ;                       ///////
                      05171          RETURN                                 ;                       ///////
                      05172                                                 ;                       ///////
                      05173 S11_BAD_SENTINEL:                               ;                       ///////
                      05174          ERR_BUG 0x0A, ERR_CLASS_INT_COMMAND    ;                       ///////
                      05175                                                 ;                       ///////
                      05176 S11_WRITE_NEXT_BYTE:                            ;                       ///////
                      05177          MOVF   YY_DATA, W, ACCESS              ;                       ///////
                      05178          BTFSS  YY_COMMAND, 7, ACCESS           ; set the MSB of the    ///////
                      05179          BRA    S11_WNB_1                       ; first byte we see     ///////
                      05180          BSF    WREG, 7, ACCESS                 ;                       ///////
                      05181          BCF    YY_COMMAND, 7, ACCESS           ;                       ///////
                      05182          CALL   SIO_WRITE_W                     ; send raw 1st byte     ///////
                      05183          BRA    S11_END_1                       ;                       ///////
                      05184 S11_WNB_1:                                      ;                       ///////
                      05185          SEND_8_BIT_W                           ; send escaped byte     ///////
                      05186          ;CALL  SIO_WRITE_W                     ;                       ///////
                      05187 S11_END_1:                                      ;                       ///////
                      05188          DECF   YY_YY, F, ACCESS                ;                       ///////
                      05189          RETURN                                 ;                       ///////
                      05190         ELSE                                    ;                       ///////
                      05191          ERR_BUG 0x0B, ERR_CLASS_OVERRUN        ;                       ///////
0014AE 0E0B               M          MOVLW  0x0B
0014B0 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0014B2 6A00               M          CLRF   YY_STATE, ACCESS
0014B4 0012               M          RETURN
                      05192         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
                      05193         
0014B6                05194 S12_DATA:
0014B6 2CE8           05195         DECFSZ  WREG, W, ACCESS
0014B8 D???           05196         BRA     S13_DATA
                      05197         ;
                      05198         ; IC_LED:  Received GY byte, store in YY_YY and wait for R byte.
                      05199         ;
                      05200         IF ROLE_SLAVE
                      05201          MOVFF  YY_DATA, YY_YY
                      05202          INCF   YY_STATE, F, ACCESS             ; -> S13
                      05203          RETURN
                      05204         ELSE
                      05205          ERR_BUG 0x0C, ERR_CLASS_OVERRUN
0014BA 0E0C               M          MOVLW  0x0C
0014BC 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0014BE 6A00               M          CLRF   YY_STATE, ACCESS
0014C0 0012               M          RETURN
                      05206         ENDIF
                      05207         
0014C2                05208 S13_DATA:
0014C2 2CE8           05209         DECFSZ  WREG, W, ACCESS
0014C4 D???           05210         BRA     S14_DATA
                      05211         ;
                      05212         ; S13: IC_LED command received
                      05213         ;
                      05214         ;   ___7______6______5______4______3______2______1______0__
                      05215         ;  |                                  |                    |
                      05216         ;  |                0                 |          7         | YY_COMMAND
                      05217         ;  |______|______|______|______|______|______|______|______|
                      05218         ;  |      |      |      |      |                           |
                      05219         ;  |   0  |   0  |   1  |   0  |             1             | (not saved)
                      05220         ;  |______|______|______|______|______|______|______|______|
                      05221         ;  |      |      |                    |                    |  
                      05222         ;  |   0  |   0  |     green LED      |     yellow LED     | YY_YY
                      05223         ;  |______|______|______|______|______|______|______|______|
                      05224         ;  |      |                           |                    |
                      05225         ;  |   0  |             0             |      red LED       | YY_DATA
                      05226         ;  |______|______|______|______|______|______|______|______|
                      05227         ;
                      05228         ;
                      05229         IF ROLE_SLAVE
                      05230          IF HAS_STATUS_LEDS
                      05231 ALTER_LED_STATE MACRO COLOR
                      05232           ;
                      05233           ; Change LED state based on W:
                      05234           ;   000  steady off    001  steady on
                      05235           ;   010  slow fade     011  rapid fade
                      05236           ;   100  slow flash    101  rapid flash
                      05237           ;   11x  no change
                      05238           ;
                      05239           BNZ   ALTER_LED_0_1
                      05240           SET_SSR_OFF COLOR
                      05241           BRA   ALTER_LED_0_EXIT
                      05242 ALTER_LED_0_1:
                      05243           DECFSZ WREG, W, ACCESS
                      05244           BRA   ALTER_LED_0_2
                      05245           SET_SSR_STEADY COLOR
                      05246           BRA   ALTER_LED_0_EXIT
                      05247 ALTER_LED_0_2:
                      05248           DECFSZ WREG, W, ACCESS
                      05249           BRA   ALTER_LED_0_3
                      05250           SET_SSR_SLOW_FADE COLOR
                      05251           BRA   ALTER_LED_0_EXIT
                      05252 ALTER_LED_0_3:
                      05253           DECFSZ WREG, W, ACCESS
                      05254           BRA   ALTER_LED_0_4
                      05255           SET_SSR_RAPID_FADE COLOR
                      05256           BRA   ALTER_LED_0_EXIT
                      05257 ALTER_LED_0_4:
                      05258           DECFSZ WREG, W, ACCESS
                      05259           BRA   ALTER_LED_0_5
                      05260           SET_SSR_SLOW_FLASH COLOR
                      05261           BRA   ALTER_LED_0_EXIT
                      05262 ALTER_LED_0_5:
                      05263           DECFSZ WREG, W, ACCESS
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05264           BRA   ALTER_LED_0_EXIT
                      05265           SET_SSR_RAPID_FLASH COLOR
                      05266           ; fall-through: other bit patterns defined as "no change"
                      05267 ALTER_LED_0_EXIT:
                      05268          ENDM
                      05269          MOVLW  0x07
                      05270          ANDWF  YY_YY, W, ACCESS
                      05271          ALTER_LED_STATE SSR_YELLOW
                      05272          MOVLW  0x38
                      05273          ANDWF  YY_YY, W, ACCESS
                      05274          RRNCF  WREG, W, ACCESS
                      05275          RRNCF  WREG, W, ACCESS
                      05276          RRNCF  WREG, W, ACCESS
                      05277          ALTER_LED_STATE SSR_GREEN
                      05278          MOVLW  0x07
                      05279          ANDWF  YY_DATA, W, ACCESS
                      05280          ALTER_LED_STATE SSR_RED
                      05281          ; and we're done.
                      05282          ENDIF
                      05283          CLRF   YY_STATE, ACCESS
                      05284          RETURN
                      05285         ELSE
                      05286          ERR_BUG 0x0D, ERR_CLASS_OVERRUN
0014C6 0E0D               M          MOVLW  0x0D
0014C8 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0014CA 6A00               M          CLRF   YY_STATE, ACCESS
0014CC 0012               M          RETURN
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05287         ENDIF
                      05288         
0014CE                05289 S14_DATA:
0014CE 2CE8           05290         DECFSZ  WREG, W, ACCESS
0014D0 D???           05291         BRA     S15_DATA
                      05292         ;
                      05293         ; DEF_SEQ: sequence number received, now we need
                      05294         ; to collect the rest of the packet
                      05295         ;
0014D2 C??? F???      05296         MOVFF   YY_DATA, YY_YY          ; sequence number in YY_YY
                      05297         WAIT_FOR_SENTINEL .131, B'01110011', .12        ; S6.12 when sentinel found
0014D6 0E83               M          MOVLW  131
0014D8 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0014DA 0E73               M          MOVLW  115
0014DC 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014DE 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014E0 6E00               M          MOVWF  YY_STATE, ACCESS
0014E2 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014E4 0E0C               M          MOVLW  12
0014E6 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014E8 0012           05298         RETURN
                      05299         
0014EA                05300 S15_DATA:
0014EA 2CE8           05301         DECFSZ  WREG, W, ACCESS
0014EC D???           05302         BRA     S16_DATA
                      05303         ;
                      05304         ; S15: EXEC_SEQ: execute sequence
                      05305         ;
                      05306         ;   ___7______6______5______4______3______2______1______0__
                      05307         ;  |                                  |                    |
                      05308         ;  |                0                 |          7         | YY_COMMAND
                      05309         ;  |______|______|______|______|______|______|______|______|
                      05310         ;  |      |      |      |      |                           |
                      05311         ;  |   0  |   0  |   0  |   0  |             5             | (not saved)
                      05312         ;  |______|______|______|______|______|______|______|______|
                      05313         ;  |      |                                                |
                      05314         ;  |   0  |         sequence number or 0 to stop           | YY_DATA
                      05315         ;  |______|______|______|______|______|______|______|______|
                      05316         ;
0014EE EF?? F???      05317         GOTO    ERR_NOT_IMP             ; XXX
                      05318         
0014F2                05319 S16_DATA:
0014F2 2CE8           05320         DECFSZ  WREG, W, ACCESS
0014F4 D???           05321         BRA     S17_DATA
                      05322         ;
                      05323         ; S16: MSK_SENS command received
                      05324         ;
                      05325         ;   ___7______6______5______4______3______2______1______0__
                      05326         ;  |                                  |                    |
                      05327         ;  |                0                 |          7         | YY_COMMAND
                      05328         ;  |______|______|______|______|______|______|______|______|
                      05329         ;  |      |      |      |      |                           |
                      05330         ;  |   0  |   0  |   0  |   0  |             7             | (not saved)
                      05331         ;  |______|______|______|______|______|______|______|______|
                      05332         ;  |      |                    |      Sensors enabled      |
                      05333         ;  |   0  |          0         |   A  |   B  |   C  |   D  | YY_DATA
                      05334         ;  |______|______|______|______|______|______|______|______|
                      05335         ;
                      05336         ;
0014F6 EF?? F???      05337         GOTO    ERR_NOT_IMP             ; XXX
                      05338 
0014FA                05339 S17_DATA:
                      05340         ; Or this WOULD be state 17, except there isn't one!
                      05341         ; Any state >16 lands here.  Handle the exception and
                      05342         ; abort the command being processed.
                      05343         ;
                      05344         IF QSCC_PORT
                      05345          #include "qscc_hook_s17.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST N=86
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s17 only used for QS*C systems"
                      00031         ENDIF
                      00032 
0014FA                00033 S17_DATA_NIL:
0014FA 2CE8           00034         DECFSZ  WREG, W, ACCESS
0014FC D???           00035         BRA     S18_DATA_NIL
0014FE EF?? F???      00036         GOTO    ERR_COMMAND
                      00037 
001502                00038 S18_DATA_NIL:
001502 2CE8           00039         DECFSZ  WREG, W, ACCESS
001504 D???           00040         BRA     S19_DATA
001506 EF?? F???      00041         GOTO    ERR_COMMAND
                      00042 
00150A                00043 S19_DATA:
00150A 2CE8           00044         DECFSZ  WREG, W, ACCESS
00150C EF?? F???      00045         GOTO    S20_DATA
                      00046         ;
                      00047         ; S19: QS_QUERY command received.
                      00048         ;
                      00049         ;   ___7______6______5______4______3______2______1______0__
                      00050         ;  |                                  |                    |
                      00051         ;  |                0                 |          7         | YY_COMMAND
                      00052         ;  |______|______|______|______|______|______|______|______|
                      00053         ;  |      |      |      |      |                           |
                      00054         ;  |   0  |   0  |   0  |   0  |             10            | (not saved)
                      00055         ;  |______|______|______|______|______|______|______|______|
                      00056         ;  |      |      |      |      |      |      |      |      |
                      00057         ;  |   0  |   1  |   1  |   0  |   0  |Button| Ping | Stop | YY_DATA
                      00058         ;  |______|______|______|______|______|______|______|______|
                      00059         ;
                      00060         ;
001510 0004           00061         CLRWDT
001512 0EF8           00062         MOVLW   B'11111000'                     ; Verify YY_DATA's constant bits
001514 1400           00063         ANDWF   YY_DATA, W, ACCESS
001516 6E00           00064         MOVWF   YY_YY, ACCESS
001518 0E60           00065         MOVLW   B'01100000'
00151A 6200           00066         CPFSEQ  YY_YY, ACCESS
00151C EF?? F???      00067         GOTO    ERR_COMMAND
                      00068         
  00000002            00069 QS_QFLG_BUTTONS EQU     2
  00000001            00070 QS_QFLG_PING    EQU     1
  00000000            00071 QS_QFLG_STOP    EQU     0
  0000                00072         EXTERN  BTN_X0_TIME_T
  0000                00073         EXTERN  BTN_X0_TIME_U
  0000                00074         EXTERN  BTN_X0_TIME_H
  0000                00075         EXTERN  BTN_X0_TIME_L
  0000                00076         EXTERN  BTN_X0_FLAGS
                      00077 
001520 B000           00078         BTFSC   YY_DATA, QS_QFLG_STOP, ACCESS
001522 EC?? F???      00079         CALL    QS_STOP_SCANNER
                      00080         ;
                      00081         ; report out status:
                      00082         ;
                      00083         ;      ___7______6______5______4______3______2______1______0__
                      00084         ;     |                           |                           |
                      00085         ; 00  |   1      1      1      1  |         address           | 
                      00086         ;     |______|______|______|______|______|______|______|______|
                      00087         ;     |      |                                                |
                      00088         ; 01  |   0  |   0      0      1      1      1      0      1  |
                      00089         ;     |______|______|______|______|______|______|______|______|
                      00090         ;  
                      00091         ;
                      00092         ;   If ping-only (p=1)
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00093         ;      ___7______6______5______4______3______2______1______0__
                      00094         ;     |      |      |             PACKET LENGTH               |
                      00095         ; 02  |   0  |   s  |   0      0      0      0      0     0   |
                      00096         ;     |______|______|______|______|______|______|______|______|
                      00097         ;
                      00098         ;
                      00099         ;   Else If button or full query (p=0)
                      00100         ;      ___7______6______5______4______3______2______1______0__      //QSCC//
                      00101         ;     |      |      |             PACKET LENGTH               |     ////////
                      00102         ; 02  |   0  |   s  |                                         |     ////////
                      00103         ;     |______|______|______|______|______|______|______|______|___  ////////
                      00104         ;     |      |      |      BUTTON PRESSED ALREADY?            | |   ////////
                      00105         ; 03  |   0  |   0  |   A      B      C      D      L     X   | |   ////////
                      00106         ;     |______|______|______|______|______|______|______|______| 2   ////////
                      00107         ;     |      |      |      BUTTON MASKED OUT (IGNORED)?       | |   ////////
                      00108         ; 04  |   0  |   0  |   A      B      C      D      L     X   | |   ////////
                      00109         ;     |______|______|______|______|______|______|______|______|_V_  ////////
                      00110         ;
                      00111         ;      ___7______6______5______4______3______2______1______0__      \\QSRC\\
                      00112         ;     |      |      |              PACKET LENGTH              |     \\\\\\\\
                      00113         ; 02  |   0  |   s  |                                         |     \\\\\\\\
                      00114         ;     |______|______|______|______|______|______|______|______|___  \\\\\\\\
                      00115         ;     |      |  L3  |     X3      |     L0      |     X0      | |   \\\\\\\\ 
                      00116         ; 03  |   0  | Press|Masked Press |Masked Press |Masked Press | |   \\\\\\\\
                      00117         ;     |______|______|______|______|______|______|______|______| |   \\\\\\\\
                      00118         ;     |      |  L4  |     X4      |     L1      |     X1      | |   \\\\\\\\
                      00119         ; 04  |   0  | Press|Masked Press |Masked Press |Masked Press | 3   \\\\\\\\
                      00120         ;     |______|______|______|______|______|______|______|______| |   \\\\\\\\
                      00121         ;     |      |      |  L4  |  L3  |     L2      |     X2      | |   \\\\\\\\
                      00122         ; 05  |   0  |   0  |Masked|Masked|Masked Press |Masked Press | |   \\\\\\\\
                      00123         ;     |______|______|______|______|______|______|______|______|_V_  \\\\\\\\
                      00124         ;
                      00125         ;   Additionally If full query (b=0)
                      00126         ;      ___7______6______5______4______3______2______1______0__ _____//QSCC//
                      00127         ;     |                                           Bits <31:24>| | | ////////
                      00128         ; +1  | Button press time (if "pressed" bit set) x 100 nS     | | | ////////
                      00129         ;     |.......................................................| | | ////////
                      00130         ;     |                                           Bits <23:16>| | | ////////
                      00131         ; +2  |                                                       | | | ////////
                      00132         ;     |.......................................................| X | ////////
                      00133         ;     |                                           Bits <15:08>| | | ////////
                      00134         ; +3  |                                                       | | | ////////
                      00135         ;     |.......................................................| | | ////////
                      00136         ;     |                                           Bits <07:00>| | | ////////
                      00137         ; +4  |                                                       | | | ////////
                      00138         ;     |______|______|______|______|______|______|______|______|_V_| ////////
                      00139         ;     |                                           Bits <31:24>| | | ////////
                      00140         ; +5  | Button press time (if "pressed" bit set) x 100 nS     | | | ////////
                      00141         ;     |.......................................................| | | ////////
                      00142         ;     |                                           Bits <23:16>| | | ////////
                      00143         ; +6  |                                                       | |+24////////
                      00144         ;     |.......................................................| L | ////////
                      00145         ;     |                                           Bits <15:08>| | | ////////
                      00146         ; +7  |                                                       | | | ////////
                      00147         ;     |.......................................................| | | ////////
                      00148         ;     |                                           Bits <07:00>| | | ////////
                      00149         ; +8  |                                                       | | | ////////
                      00150         ;     |______|______|______|______|______|______|______|______|_V_| ////////
                      00151         ;                                                                 | ////////
                      00152         ;                                 |                               | ////////
                      00153         ;                                 |  likewise A, B, C, D          | ////////
                      00154         ;                                 V                               | ////////
                      00155         ;      ___7______6______5______4______3______2______1______0__  | | ////////
                      00156         ;     |                                           Bits <07:00>| D | ////////
                      00157         ; +24 |                                                       | | | ////////
                      00158         ;     |______|______|______|______|______|______|______|______|_V_V_////////
                      00159         ;
                      00160         ;      ___7______6______5______4______3______2______1______0__ _____\\QSRC\\
                      00161         ;     |                                           Bits <31:24>| | | \\\\\\\\
                      00162         ; +1  | Button press time (if "pressed" bit set) x 100 nS     | | | \\\\\\\\
                      00163         ;     |.......................................................| | | \\\\\\\\
                      00164         ;     |                                           Bits <23:16>| | | \\\\\\\\
                      00165         ; +2  |                                                       | | | \\\\\\\\
                      00166         ;     |.......................................................|X0 | \\\\\\\\
                      00167         ;     |                                           Bits <15:08>| | | \\\\\\\\
                      00168         ; +3  |                                                       | | | \\\\\\\\
                      00169         ;     |.......................................................| | | \\\\\\\\
                      00170         ;     |                                           Bits <07:00>| | | \\\\\\\\
                      00171         ; +4  |                                                       | | | \\\\\\\\
                      00172         ;     |______|______|______|______|______|______|______|______|_V_| \\\\\\\\
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00173         ;     |                                           Bits <31:24>| | | \\\\\\\\
                      00174         ; +5  | Button press time (if "pressed" bit set) x 100 nS     | | | \\\\\\\\
                      00175         ;     |.......................................................| | | \\\\\\\\
                      00176         ;     |                                           Bits <23:16>| | | \\\\\\\\
                      00177         ; +6  |                                                       | |+40\\\\\\\\
                      00178         ;     |.......................................................|L0 | \\\\\\\\
                      00179         ;     |                                           Bits <15:08>| | | \\\\\\\\
                      00180         ; +7  |                                                       | | | \\\\\\\\
                      00181         ;     |.......................................................| | | \\\\\\\\
                      00182         ;     |                                           Bits <07:00>| | | \\\\\\\\
                      00183         ; +8  |                                                       | | | \\\\\\\\
                      00184         ;     |______|______|______|______|______|______|______|______|_V_| \\\\\\\\
                      00185         ;                                                                 | \\\\\\\\
                      00186         ;                                 |                               | \\\\\\\\
                      00187         ;                                 |  likewise X1, L1, ..., L4     | \\\\\\\\
                      00188         ;                                 V                               | \\\\\\\\
                      00189         ;      ___7______6______5______4______3______2______1______0__  | | \\\\\\\\
                      00190         ;     |                                           Bits <07:00>|L4 | \\\\\\\\
                      00191         ; +40 |                                                       | | | \\\\\\\\
                      00192         ;     |______|______|______|______|______|______|______|______|_V_V_\\\\\\\\
                      00193         ;
                      00194         ;
                      00195         ; Finally:
                      00196         ;
                      00197         ;      ___7______6______5______4______3______2______1______0__ 
                      00198         ;     |      |      |                    |                    |
                      00199         ; +x  |   0  |   s  |   1      0      1  | Packet Length & 7  |
                      00200         ;     |______|______|______|______|______|______|______|______|
                      00201         ;
                      00202         ;
                      00203 
001526 EC?? F???      00204         CALL    TR_ON_DELAY
00152A 868B           00205         BSF     PLAT_T_R, BIT_T_R, ACCESS               ; Fire up our transmitter now
00152C 9400           00206         BCF     SSR_STATE2, INHIBIT_OUTPUT, ACCESS      ; Allow sending output
00152E 0EF0           00207         MOVLW   0xf0
001530 1000           00208         IORWF   MY_ADDRESS, W, ACCESS
001532 EC?? F???      00209         CALL    SIO_WRITE_W                     ; 00 start byte                 <1111aaaa>
001536 0E1D           00210         MOVLW   0x1d                            ; 01 extended ID byte for       <00011101>
001538 EC?? F???      00211         CALL    SIO_WRITE_W                     ;    for this type of reply
                      00212         
00153C B200           00213         BTFSC   YY_DATA, QS_QFLG_PING, ACCESS   ; If ping-only, send short packet
00153E EF?? F???      00214         GOTO    QS_QUERY_PING
                      00215 
                      00216         ;
                      00217         ; Figure out ultimate packet length
                      00218         ;
                      00219         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00220          MOVLW  .2
                      00221          BTFSS  YY_DATA, QS_QFLG_BUTTONS, ACCESS
                      00222          ADDLW  .24
                      00223         ELSE
                      00224          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
001542 0E03           00225           MOVLW .3
001544 A400           00226           BTFSS YY_DATA, QS_QFLG_BUTTONS, ACCESS
001546 0F28           00227           ADDLW .40
                      00228          ENDIF
                      00229         ENDIF
001548 B000           00230         BTFSC   QUIZSHOW_FLAGS, QS_FLAG_SCANNING, ACCESS
00154A 8CE8           00231         BSF     WREG, 6, ACCESS                 ; YY_YY = 0spppppp (header byte)
00154C 6E00           00232         MOVWF   YY_YY, ACCESS
00154E EC?? F???      00233         CALL    SIO_WRITE_W                     ; 02 payload length     <0spppppp>
                      00234 
001552 010C           00235         BANKSEL QUIZSHOW_DATA
                      00236         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00237          CLRF   WREG, ACCESS
                      00238          BTFSC  BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_PRESSED, BANKED
                      00239          BSF    WREG, 0, ACCESS
                      00240          BTFSC  BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_PRESSED, BANKED
                      00241          BSF    WREG, 1, ACCESS
                      00242          BTFSC  BTN_X0_FLAGS + BTN_IDX_D0, BTN_FLG_PRESSED, BANKED
                      00243          BSF    WREG, 2, ACCESS
                      00244          BTFSC  BTN_X0_FLAGS + BTN_IDX_C0, BTN_FLG_PRESSED, BANKED
                      00245          BSF    WREG, 3, ACCESS
                      00246          BTFSC  BTN_X0_FLAGS + BTN_IDX_B0, BTN_FLG_PRESSED, BANKED
                      00247          BSF    WREG, 4, ACCESS
                      00248          BTFSC  BTN_X0_FLAGS + BTN_IDX_A0, BTN_FLG_PRESSED, BANKED
                      00249          BSF    WREG, 5, ACCESS
                      00250          CALL   SIO_WRITE_W                     ; 03 pressed flags      <00ABCDLX>
                      00251          BANKSEL QUIZSHOW_DATA
                      00252 
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00253          CLRF   WREG, ACCESS
                      00254          BTFSC  BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
                      00255          BSF    WREG, 0, ACCESS
                      00256          BTFSC  BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
                      00257          BSF    WREG, 1, ACCESS
                      00258          BTFSC  BTN_X0_FLAGS + BTN_IDX_D0, BTN_FLG_MASKED, BANKED
                      00259          BSF    WREG, 2, ACCESS
                      00260          BTFSC  BTN_X0_FLAGS + BTN_IDX_C0, BTN_FLG_MASKED, BANKED
                      00261          BSF    WREG, 3, ACCESS
                      00262          BTFSC  BTN_X0_FLAGS + BTN_IDX_B0, BTN_FLG_MASKED, BANKED
                      00263          BSF    WREG, 4, ACCESS
                      00264          BTFSC  BTN_X0_FLAGS + BTN_IDX_A0, BTN_FLG_MASKED, BANKED
                      00265          BSF    WREG, 5, ACCESS
                      00266          CALL   SIO_WRITE_W                     ; 04 masked flags       <00ABCDLX>
                      00267          BANKSEL QUIZSHOW_DATA
                      00268         ELSE
                      00269          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
001554 6AE8           00270           CLRF  WREG, ACCESS
001556 010C           00271           BANKSEL QUIZSHOW_DATA
001558 B100           00272           BTFSC BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_PRESSED, BANKED
00155A 80E8           00273           BSF   WREG, 0, ACCESS
00155C B300           00274           BTFSC BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
00155E 82E8           00275           BSF   WREG, 1, ACCESS
001560 B100           00276           BTFSC BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_PRESSED, BANKED
001562 84E8           00277           BSF   WREG, 2, ACCESS
001564 B300           00278           BTFSC BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
001566 86E8           00279           BSF   WREG, 3, ACCESS
001568 B100           00280           BTFSC BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_PRESSED, BANKED
00156A 88E8           00281           BSF   WREG, 4, ACCESS
00156C B300           00282           BTFSC BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_MASKED, BANKED
00156E 8AE8           00283           BSF   WREG, 5, ACCESS
001570 B100           00284           BTFSC BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_PRESSED, BANKED
001572 8CE8           00285           BSF   WREG, 6, ACCESS                 ;                        3330000
001574 EC?? F???      00286           CALL  SIO_WRITE_W                     ; 03 x=press X=mask    <0lXxLlXx>
001578 010C           00287           BANKSEL QUIZSHOW_DATA
                      00288 
00157A 6AE8           00289           CLRF  WREG, ACCESS
00157C B100           00290           BTFSC BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_PRESSED, BANKED
00157E 80E8           00291           BSF   WREG, 0, ACCESS
001580 B300           00292           BTFSC BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_MASKED, BANKED
001582 82E8           00293           BSF   WREG, 1, ACCESS
001584 B100           00294           BTFSC BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_PRESSED, BANKED
001586 84E8           00295           BSF   WREG, 2, ACCESS
001588 B300           00296           BTFSC BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_MASKED, BANKED
00158A 86E8           00297           BSF   WREG, 3, ACCESS
00158C B100           00298           BTFSC BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_PRESSED, BANKED
00158E 88E8           00299           BSF   WREG, 4, ACCESS
001590 B300           00300           BTFSC BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_MASKED, BANKED
001592 8AE8           00301           BSF   WREG, 5, ACCESS
001594 B100           00302           BTFSC BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_PRESSED, BANKED
001596 8CE8           00303           BSF   WREG, 6, ACCESS                 ;                        4441111
001598 EC?? F???      00304           CALL  SIO_WRITE_W                     ; 04 x=press X=mask    <0lXxLlXx>
00159C 010C           00305           BANKSEL QUIZSHOW_DATA
                      00306 
00159E 6AE8           00307           CLRF  WREG, ACCESS
0015A0 B100           00308           BTFSC BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_PRESSED, BANKED
0015A2 80E8           00309           BSF   WREG, 0, ACCESS
0015A4 B300           00310           BTFSC BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_MASKED, BANKED
0015A6 82E8           00311           BSF   WREG, 1, ACCESS
0015A8 B100           00312           BTFSC BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_PRESSED, BANKED
0015AA 84E8           00313           BSF   WREG, 2, ACCESS
0015AC B300           00314           BTFSC BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_MASKED, BANKED
0015AE 86E8           00315           BSF   WREG, 3, ACCESS
0015B0 B300           00316           BTFSC BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_MASKED, BANKED
0015B2 88E8           00317           BSF   WREG, 4, ACCESS
0015B4 B300           00318           BTFSC BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_MASKED, BANKED
0015B6 8AE8           00319           BSF   WREG, 5, ACCESS                 ;                         432222
0015B8 EC?? F???      00320           CALL  SIO_WRITE_W                     ; 05 x=press X=mask    <00LLLlXx>
0015BC 010C           00321           BANKSEL QUIZSHOW_DATA
                      00322          ELSE
                      00323           ERROR "Invalid chip selection"
                      00324          ENDIF
                      00325         ENDIF
                      00326 
0015BE B400           00327         BTFSC   YY_DATA, QS_QFLG_BUTTONS, ACCESS        
0015C0 EF?? F???      00328         GOTO    QS_QUERY_DONE
                      00329         ;
                      00330         ; Not *just* looking for button states? 
                      00331         ; send timing data as well now
                      00332         ;
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00333 QS_SEND_BUTTON_TIME MACRO BTN_IDX
                      00334          MOVFF  BTN_X0_TIME_T + BTN_IDX, WREG
                      00335          SEND_8_BIT_W
                      00336          MOVFF  BTN_X0_TIME_U + BTN_IDX, WREG
                      00337          SEND_8_BIT_W
                      00338          MOVFF  BTN_X0_TIME_H + BTN_IDX, WREG
                      00339          SEND_8_BIT_W
                      00340          MOVFF  BTN_X0_TIME_L + BTN_IDX, WREG
                      00341          SEND_8_BIT_W
                      00342         ENDM
                      00343 
                      00344         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC   
                      00345          QS_SEND_BUTTON_TIME BTN_IDX_X0
                      00346          QS_SEND_BUTTON_TIME BTN_IDX_L0
                      00347          QS_SEND_BUTTON_TIME BTN_IDX_A0
                      00348          QS_SEND_BUTTON_TIME BTN_IDX_B0
                      00349          QS_SEND_BUTTON_TIME BTN_IDX_C0
                      00350          QS_SEND_BUTTON_TIME BTN_IDX_D0
                      00351         ELSE
                      00352          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00353           QS_SEND_BUTTON_TIME BTN_IDX_X0
0015C4 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
0015C8 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0015CA 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0015CC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0015CE D???               M         BRA     S8B_CHK_7E12
0015D0 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0015D4 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0015D6 EC?? F???          M         CALL    SIO_WRITE_W                     
0015DA D???               M         BRA     S8B_END12
0015DC                    M S8B_CHK_7E12:
0015DC 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0015DE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0015E0 D???               M         BRA     S8B_CHK_MSB12
0015E2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0015E4 EC?? F???          M         CALL    SIO_WRITE_W
0015E8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0015EA EC?? F???          M         CALL    SIO_WRITE_W
0015EE D???               M         BRA     S8B_END12
0015F0                    M S8B_CHK_MSB12:
0015F0 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0015F2 D???               M         BRA     S8B_SEND_NORMAL12
0015F4 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0015F6 EC?? F???          M         CALL    SIO_WRITE_W
0015FA 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0015FC                    M S8B_SEND_NORMAL12:
0015FC 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0015FE EC?? F???          M         CALL    SIO_WRITE_W     
001602                    M S8B_END12:
  0000000D                M S8B_LABEL ++
001602 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
001606 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001608 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00160A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00160C D???               M         BRA     S8B_CHK_7E13
00160E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001612 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001614 EC?? F???          M         CALL    SIO_WRITE_W                     
001618 D???               M         BRA     S8B_END13
00161A                    M S8B_CHK_7E13:
00161A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00161C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00161E D???               M         BRA     S8B_CHK_MSB13
001620 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001622 EC?? F???          M         CALL    SIO_WRITE_W
001626 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001628 EC?? F???          M         CALL    SIO_WRITE_W
00162C D???               M         BRA     S8B_END13
00162E                    M S8B_CHK_MSB13:
00162E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001630 D???               M         BRA     S8B_SEND_NORMAL13
001632 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001634 EC?? F???          M         CALL    SIO_WRITE_W
001638 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00163A                    M S8B_SEND_NORMAL13:
00163A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00163C EC?? F???          M         CALL    SIO_WRITE_W     
001640                    M S8B_END13:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000E                M S8B_LABEL ++
001640 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
001644 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001646 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001648 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00164A D???               M         BRA     S8B_CHK_7E14
00164C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001650 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001652 EC?? F???          M         CALL    SIO_WRITE_W                     
001656 D???               M         BRA     S8B_END14
001658                    M S8B_CHK_7E14:
001658 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00165A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00165C D???               M         BRA     S8B_CHK_MSB14
00165E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001660 EC?? F???          M         CALL    SIO_WRITE_W
001664 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001666 EC?? F???          M         CALL    SIO_WRITE_W
00166A D???               M         BRA     S8B_END14
00166C                    M S8B_CHK_MSB14:
00166C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00166E D???               M         BRA     S8B_SEND_NORMAL14
001670 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001672 EC?? F???          M         CALL    SIO_WRITE_W
001676 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001678                    M S8B_SEND_NORMAL14:
001678 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00167A EC?? F???          M         CALL    SIO_WRITE_W     
00167E                    M S8B_END14:
  0000000F                M S8B_LABEL ++
00167E C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
001682 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001684 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001686 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001688 D???               M         BRA     S8B_CHK_7E15
00168A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00168E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001690 EC?? F???          M         CALL    SIO_WRITE_W                     
001694 D???               M         BRA     S8B_END15
001696                    M S8B_CHK_7E15:
001696 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001698 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00169A D???               M         BRA     S8B_CHK_MSB15
00169C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00169E EC?? F???          M         CALL    SIO_WRITE_W
0016A2 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0016A4 EC?? F???          M         CALL    SIO_WRITE_W
0016A8 D???               M         BRA     S8B_END15
0016AA                    M S8B_CHK_MSB15:
0016AA AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0016AC D???               M         BRA     S8B_SEND_NORMAL15
0016AE 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0016B0 EC?? F???          M         CALL    SIO_WRITE_W
0016B4 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0016B6                    M S8B_SEND_NORMAL15:
0016B6 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0016B8 EC?? F???          M         CALL    SIO_WRITE_W     
0016BC                    M S8B_END15:
  00000010                M S8B_LABEL ++
                      00354           QS_SEND_BUTTON_TIME BTN_IDX_L0
0016BC C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L0, WREG
                          M          SEND_8_BIT_W
0016C0 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0016C2 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0016C4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0016C6 D???               M         BRA     S8B_CHK_7E16
0016C8 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0016CC 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0016CE EC?? F???          M         CALL    SIO_WRITE_W                     
0016D2 D???               M         BRA     S8B_END16
0016D4                    M S8B_CHK_7E16:
0016D4 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0016D6 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0016D8 D???               M         BRA     S8B_CHK_MSB16
0016DA 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0016DC EC?? F???          M         CALL    SIO_WRITE_W
0016E0 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0016E2 EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0016E6 D???               M         BRA     S8B_END16
0016E8                    M S8B_CHK_MSB16:
0016E8 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0016EA D???               M         BRA     S8B_SEND_NORMAL16
0016EC 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0016EE EC?? F???          M         CALL    SIO_WRITE_W
0016F2 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0016F4                    M S8B_SEND_NORMAL16:
0016F4 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0016F6 EC?? F???          M         CALL    SIO_WRITE_W     
0016FA                    M S8B_END16:
  00000011                M S8B_LABEL ++
0016FA C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L0, WREG
                          M          SEND_8_BIT_W
0016FE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001700 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001702 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001704 D???               M         BRA     S8B_CHK_7E17
001706 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00170A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00170C EC?? F???          M         CALL    SIO_WRITE_W                     
001710 D???               M         BRA     S8B_END17
001712                    M S8B_CHK_7E17:
001712 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001714 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001716 D???               M         BRA     S8B_CHK_MSB17
001718 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00171A EC?? F???          M         CALL    SIO_WRITE_W
00171E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001720 EC?? F???          M         CALL    SIO_WRITE_W
001724 D???               M         BRA     S8B_END17
001726                    M S8B_CHK_MSB17:
001726 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001728 D???               M         BRA     S8B_SEND_NORMAL17
00172A 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00172C EC?? F???          M         CALL    SIO_WRITE_W
001730 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001732                    M S8B_SEND_NORMAL17:
001732 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001734 EC?? F???          M         CALL    SIO_WRITE_W     
001738                    M S8B_END17:
  00000012                M S8B_LABEL ++
001738 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L0, WREG
                          M          SEND_8_BIT_W
00173C 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00173E 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001740 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001742 D???               M         BRA     S8B_CHK_7E18
001744 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001748 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00174A EC?? F???          M         CALL    SIO_WRITE_W                     
00174E D???               M         BRA     S8B_END18
001750                    M S8B_CHK_7E18:
001750 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001752 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001754 D???               M         BRA     S8B_CHK_MSB18
001756 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001758 EC?? F???          M         CALL    SIO_WRITE_W
00175C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00175E EC?? F???          M         CALL    SIO_WRITE_W
001762 D???               M         BRA     S8B_END18
001764                    M S8B_CHK_MSB18:
001764 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001766 D???               M         BRA     S8B_SEND_NORMAL18
001768 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00176A EC?? F???          M         CALL    SIO_WRITE_W
00176E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001770                    M S8B_SEND_NORMAL18:
001770 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001772 EC?? F???          M         CALL    SIO_WRITE_W     
001776                    M S8B_END18:
  00000013                M S8B_LABEL ++
001776 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L0, WREG
                          M          SEND_8_BIT_W
00177A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00177C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00177E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001780 D???               M         BRA     S8B_CHK_7E19
001782 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001786 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001788 EC?? F???          M         CALL    SIO_WRITE_W                     
00178C D???               M         BRA     S8B_END19
00178E                    M S8B_CHK_7E19:
00178E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001790 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001792 D???               M         BRA     S8B_CHK_MSB19
001794 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001796 EC?? F???          M         CALL    SIO_WRITE_W
00179A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00179C EC?? F???          M         CALL    SIO_WRITE_W
0017A0 D???               M         BRA     S8B_END19
0017A2                    M S8B_CHK_MSB19:
0017A2 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0017A4 D???               M         BRA     S8B_SEND_NORMAL19
0017A6 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0017A8 EC?? F???          M         CALL    SIO_WRITE_W
0017AC 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0017AE                    M S8B_SEND_NORMAL19:
0017AE 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0017B0 EC?? F???          M         CALL    SIO_WRITE_W     
0017B4                    M S8B_END19:
  00000014                M S8B_LABEL ++
                      00355           QS_SEND_BUTTON_TIME BTN_IDX_X1
0017B4 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
0017B8 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0017BA 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0017BC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0017BE D???               M         BRA     S8B_CHK_7E20
0017C0 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0017C4 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0017C6 EC?? F???          M         CALL    SIO_WRITE_W                     
0017CA D???               M         BRA     S8B_END20
0017CC                    M S8B_CHK_7E20:
0017CC 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0017CE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0017D0 D???               M         BRA     S8B_CHK_MSB20
0017D2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0017D4 EC?? F???          M         CALL    SIO_WRITE_W
0017D8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0017DA EC?? F???          M         CALL    SIO_WRITE_W
0017DE D???               M         BRA     S8B_END20
0017E0                    M S8B_CHK_MSB20:
0017E0 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0017E2 D???               M         BRA     S8B_SEND_NORMAL20
0017E4 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0017E6 EC?? F???          M         CALL    SIO_WRITE_W
0017EA 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0017EC                    M S8B_SEND_NORMAL20:
0017EC 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0017EE EC?? F???          M         CALL    SIO_WRITE_W     
0017F2                    M S8B_END20:
  00000015                M S8B_LABEL ++
0017F2 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
0017F6 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0017F8 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0017FA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0017FC D???               M         BRA     S8B_CHK_7E21
0017FE EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001802 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001804 EC?? F???          M         CALL    SIO_WRITE_W                     
001808 D???               M         BRA     S8B_END21
00180A                    M S8B_CHK_7E21:
00180A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00180C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00180E D???               M         BRA     S8B_CHK_MSB21
001810 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001812 EC?? F???          M         CALL    SIO_WRITE_W
001816 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001818 EC?? F???          M         CALL    SIO_WRITE_W
00181C D???               M         BRA     S8B_END21
00181E                    M S8B_CHK_MSB21:
00181E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001820 D???               M         BRA     S8B_SEND_NORMAL21
001822 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001824 EC?? F???          M         CALL    SIO_WRITE_W
001828 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00182A                    M S8B_SEND_NORMAL21:
00182A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00182C EC?? F???          M         CALL    SIO_WRITE_W     
001830                    M S8B_END21:
  00000016                M S8B_LABEL ++
001830 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
001834 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001836 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001838 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00183A D???               M         BRA     S8B_CHK_7E22
00183C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001840 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001842 EC?? F???          M         CALL    SIO_WRITE_W                     
001846 D???               M         BRA     S8B_END22
001848                    M S8B_CHK_7E22:
001848 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00184A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00184C D???               M         BRA     S8B_CHK_MSB22
00184E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001850 EC?? F???          M         CALL    SIO_WRITE_W
001854 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001856 EC?? F???          M         CALL    SIO_WRITE_W
00185A D???               M         BRA     S8B_END22
00185C                    M S8B_CHK_MSB22:
00185C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00185E D???               M         BRA     S8B_SEND_NORMAL22
001860 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001862 EC?? F???          M         CALL    SIO_WRITE_W
001866 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001868                    M S8B_SEND_NORMAL22:
001868 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00186A EC?? F???          M         CALL    SIO_WRITE_W     
00186E                    M S8B_END22:
  00000017                M S8B_LABEL ++
00186E C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
001872 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001874 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001876 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001878 D???               M         BRA     S8B_CHK_7E23
00187A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00187E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001880 EC?? F???          M         CALL    SIO_WRITE_W                     
001884 D???               M         BRA     S8B_END23
001886                    M S8B_CHK_7E23:
001886 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001888 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00188A D???               M         BRA     S8B_CHK_MSB23
00188C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00188E EC?? F???          M         CALL    SIO_WRITE_W
001892 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001894 EC?? F???          M         CALL    SIO_WRITE_W
001898 D???               M         BRA     S8B_END23
00189A                    M S8B_CHK_MSB23:
00189A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00189C D???               M         BRA     S8B_SEND_NORMAL23
00189E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0018A0 EC?? F???          M         CALL    SIO_WRITE_W
0018A4 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0018A6                    M S8B_SEND_NORMAL23:
0018A6 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0018A8 EC?? F???          M         CALL    SIO_WRITE_W     
0018AC                    M S8B_END23:
  00000018                M S8B_LABEL ++
                      00356           QS_SEND_BUTTON_TIME BTN_IDX_L1
0018AC C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
0018B0 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0018B2 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0018B4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0018B6 D???               M         BRA     S8B_CHK_7E24
0018B8 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0018BC 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0018BE EC?? F???          M         CALL    SIO_WRITE_W                     
0018C2 D???               M         BRA     S8B_END24
0018C4                    M S8B_CHK_7E24:
0018C4 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0018C6 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0018C8 D???               M         BRA     S8B_CHK_MSB24
0018CA 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0018CC EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0018D0 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0018D2 EC?? F???          M         CALL    SIO_WRITE_W
0018D6 D???               M         BRA     S8B_END24
0018D8                    M S8B_CHK_MSB24:
0018D8 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0018DA D???               M         BRA     S8B_SEND_NORMAL24
0018DC 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0018DE EC?? F???          M         CALL    SIO_WRITE_W
0018E2 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0018E4                    M S8B_SEND_NORMAL24:
0018E4 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0018E6 EC?? F???          M         CALL    SIO_WRITE_W     
0018EA                    M S8B_END24:
  00000019                M S8B_LABEL ++
0018EA C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
0018EE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0018F0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0018F2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0018F4 D???               M         BRA     S8B_CHK_7E25
0018F6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0018FA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0018FC EC?? F???          M         CALL    SIO_WRITE_W                     
001900 D???               M         BRA     S8B_END25
001902                    M S8B_CHK_7E25:
001902 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001904 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001906 D???               M         BRA     S8B_CHK_MSB25
001908 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00190A EC?? F???          M         CALL    SIO_WRITE_W
00190E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001910 EC?? F???          M         CALL    SIO_WRITE_W
001914 D???               M         BRA     S8B_END25
001916                    M S8B_CHK_MSB25:
001916 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001918 D???               M         BRA     S8B_SEND_NORMAL25
00191A 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00191C EC?? F???          M         CALL    SIO_WRITE_W
001920 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001922                    M S8B_SEND_NORMAL25:
001922 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001924 EC?? F???          M         CALL    SIO_WRITE_W     
001928                    M S8B_END25:
  0000001A                M S8B_LABEL ++
001928 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
00192C 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00192E 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001930 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001932 D???               M         BRA     S8B_CHK_7E26
001934 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001938 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00193A EC?? F???          M         CALL    SIO_WRITE_W                     
00193E D???               M         BRA     S8B_END26
001940                    M S8B_CHK_7E26:
001940 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001942 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001944 D???               M         BRA     S8B_CHK_MSB26
001946 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001948 EC?? F???          M         CALL    SIO_WRITE_W
00194C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00194E EC?? F???          M         CALL    SIO_WRITE_W
001952 D???               M         BRA     S8B_END26
001954                    M S8B_CHK_MSB26:
001954 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001956 D???               M         BRA     S8B_SEND_NORMAL26
001958 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00195A EC?? F???          M         CALL    SIO_WRITE_W
00195E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001960                    M S8B_SEND_NORMAL26:
001960 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001962 EC?? F???          M         CALL    SIO_WRITE_W     
001966                    M S8B_END26:
  0000001B                M S8B_LABEL ++
001966 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
00196A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00196C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00196E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001970 D???               M         BRA     S8B_CHK_7E27
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001972 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001976 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001978 EC?? F???          M         CALL    SIO_WRITE_W                     
00197C D???               M         BRA     S8B_END27
00197E                    M S8B_CHK_7E27:
00197E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001980 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001982 D???               M         BRA     S8B_CHK_MSB27
001984 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001986 EC?? F???          M         CALL    SIO_WRITE_W
00198A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00198C EC?? F???          M         CALL    SIO_WRITE_W
001990 D???               M         BRA     S8B_END27
001992                    M S8B_CHK_MSB27:
001992 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001994 D???               M         BRA     S8B_SEND_NORMAL27
001996 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001998 EC?? F???          M         CALL    SIO_WRITE_W
00199C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00199E                    M S8B_SEND_NORMAL27:
00199E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0019A0 EC?? F???          M         CALL    SIO_WRITE_W     
0019A4                    M S8B_END27:
  0000001C                M S8B_LABEL ++
                      00357           QS_SEND_BUTTON_TIME BTN_IDX_X2
0019A4 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
0019A8 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0019AA 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0019AC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0019AE D???               M         BRA     S8B_CHK_7E28
0019B0 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0019B4 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0019B6 EC?? F???          M         CALL    SIO_WRITE_W                     
0019BA D???               M         BRA     S8B_END28
0019BC                    M S8B_CHK_7E28:
0019BC 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0019BE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0019C0 D???               M         BRA     S8B_CHK_MSB28
0019C2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0019C4 EC?? F???          M         CALL    SIO_WRITE_W
0019C8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0019CA EC?? F???          M         CALL    SIO_WRITE_W
0019CE D???               M         BRA     S8B_END28
0019D0                    M S8B_CHK_MSB28:
0019D0 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0019D2 D???               M         BRA     S8B_SEND_NORMAL28
0019D4 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0019D6 EC?? F???          M         CALL    SIO_WRITE_W
0019DA 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0019DC                    M S8B_SEND_NORMAL28:
0019DC 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0019DE EC?? F???          M         CALL    SIO_WRITE_W     
0019E2                    M S8B_END28:
  0000001D                M S8B_LABEL ++
0019E2 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
0019E6 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0019E8 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0019EA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0019EC D???               M         BRA     S8B_CHK_7E29
0019EE EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0019F2 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0019F4 EC?? F???          M         CALL    SIO_WRITE_W                     
0019F8 D???               M         BRA     S8B_END29
0019FA                    M S8B_CHK_7E29:
0019FA 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0019FC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0019FE D???               M         BRA     S8B_CHK_MSB29
001A00 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001A02 EC?? F???          M         CALL    SIO_WRITE_W
001A06 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001A08 EC?? F???          M         CALL    SIO_WRITE_W
001A0C D???               M         BRA     S8B_END29
001A0E                    M S8B_CHK_MSB29:
001A0E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001A10 D???               M         BRA     S8B_SEND_NORMAL29
001A12 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001A14 EC?? F???          M         CALL    SIO_WRITE_W
001A18 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A1A                    M S8B_SEND_NORMAL29:
001A1A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001A1C EC?? F???          M         CALL    SIO_WRITE_W     
001A20                    M S8B_END29:
  0000001E                M S8B_LABEL ++
001A20 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
001A24 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001A26 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001A28 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A2A D???               M         BRA     S8B_CHK_7E30
001A2C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001A30 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001A32 EC?? F???          M         CALL    SIO_WRITE_W                     
001A36 D???               M         BRA     S8B_END30
001A38                    M S8B_CHK_7E30:
001A38 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001A3A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A3C D???               M         BRA     S8B_CHK_MSB30
001A3E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001A40 EC?? F???          M         CALL    SIO_WRITE_W
001A44 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001A46 EC?? F???          M         CALL    SIO_WRITE_W
001A4A D???               M         BRA     S8B_END30
001A4C                    M S8B_CHK_MSB30:
001A4C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001A4E D???               M         BRA     S8B_SEND_NORMAL30
001A50 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001A52 EC?? F???          M         CALL    SIO_WRITE_W
001A56 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001A58                    M S8B_SEND_NORMAL30:
001A58 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001A5A EC?? F???          M         CALL    SIO_WRITE_W     
001A5E                    M S8B_END30:
  0000001F                M S8B_LABEL ++
001A5E C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
001A62 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001A64 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001A66 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A68 D???               M         BRA     S8B_CHK_7E31
001A6A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001A6E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001A70 EC?? F???          M         CALL    SIO_WRITE_W                     
001A74 D???               M         BRA     S8B_END31
001A76                    M S8B_CHK_7E31:
001A76 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001A78 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A7A D???               M         BRA     S8B_CHK_MSB31
001A7C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001A7E EC?? F???          M         CALL    SIO_WRITE_W
001A82 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001A84 EC?? F???          M         CALL    SIO_WRITE_W
001A88 D???               M         BRA     S8B_END31
001A8A                    M S8B_CHK_MSB31:
001A8A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001A8C D???               M         BRA     S8B_SEND_NORMAL31
001A8E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001A90 EC?? F???          M         CALL    SIO_WRITE_W
001A94 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001A96                    M S8B_SEND_NORMAL31:
001A96 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001A98 EC?? F???          M         CALL    SIO_WRITE_W     
001A9C                    M S8B_END31:
  00000020                M S8B_LABEL ++
                      00358           QS_SEND_BUTTON_TIME BTN_IDX_L2
001A9C C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001AA0 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001AA2 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001AA4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001AA6 D???               M         BRA     S8B_CHK_7E32
001AA8 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001AAC 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001AAE EC?? F???          M         CALL    SIO_WRITE_W                     
001AB2 D???               M         BRA     S8B_END32
001AB4                    M S8B_CHK_7E32:
001AB4 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001AB6 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001AB8 D???               M         BRA     S8B_CHK_MSB32
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001ABA 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001ABC EC?? F???          M         CALL    SIO_WRITE_W
001AC0 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001AC2 EC?? F???          M         CALL    SIO_WRITE_W
001AC6 D???               M         BRA     S8B_END32
001AC8                    M S8B_CHK_MSB32:
001AC8 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001ACA D???               M         BRA     S8B_SEND_NORMAL32
001ACC 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001ACE EC?? F???          M         CALL    SIO_WRITE_W
001AD2 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001AD4                    M S8B_SEND_NORMAL32:
001AD4 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001AD6 EC?? F???          M         CALL    SIO_WRITE_W     
001ADA                    M S8B_END32:
  00000021                M S8B_LABEL ++
001ADA C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001ADE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001AE0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001AE2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001AE4 D???               M         BRA     S8B_CHK_7E33
001AE6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001AEA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001AEC EC?? F???          M         CALL    SIO_WRITE_W                     
001AF0 D???               M         BRA     S8B_END33
001AF2                    M S8B_CHK_7E33:
001AF2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001AF4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001AF6 D???               M         BRA     S8B_CHK_MSB33
001AF8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001AFA EC?? F???          M         CALL    SIO_WRITE_W
001AFE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001B00 EC?? F???          M         CALL    SIO_WRITE_W
001B04 D???               M         BRA     S8B_END33
001B06                    M S8B_CHK_MSB33:
001B06 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001B08 D???               M         BRA     S8B_SEND_NORMAL33
001B0A 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001B0C EC?? F???          M         CALL    SIO_WRITE_W
001B10 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001B12                    M S8B_SEND_NORMAL33:
001B12 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001B14 EC?? F???          M         CALL    SIO_WRITE_W     
001B18                    M S8B_END33:
  00000022                M S8B_LABEL ++
001B18 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001B1C 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001B1E 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001B20 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B22 D???               M         BRA     S8B_CHK_7E34
001B24 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001B28 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001B2A EC?? F???          M         CALL    SIO_WRITE_W                     
001B2E D???               M         BRA     S8B_END34
001B30                    M S8B_CHK_7E34:
001B30 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001B32 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B34 D???               M         BRA     S8B_CHK_MSB34
001B36 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001B38 EC?? F???          M         CALL    SIO_WRITE_W
001B3C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001B3E EC?? F???          M         CALL    SIO_WRITE_W
001B42 D???               M         BRA     S8B_END34
001B44                    M S8B_CHK_MSB34:
001B44 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001B46 D???               M         BRA     S8B_SEND_NORMAL34
001B48 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001B4A EC?? F???          M         CALL    SIO_WRITE_W
001B4E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001B50                    M S8B_SEND_NORMAL34:
001B50 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001B52 EC?? F???          M         CALL    SIO_WRITE_W     
001B56                    M S8B_END34:
  00000023                M S8B_LABEL ++
001B56 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001B5A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001B5C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B5E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B60 D???               M         BRA     S8B_CHK_7E35
001B62 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001B66 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001B68 EC?? F???          M         CALL    SIO_WRITE_W                     
001B6C D???               M         BRA     S8B_END35
001B6E                    M S8B_CHK_7E35:
001B6E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001B70 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B72 D???               M         BRA     S8B_CHK_MSB35
001B74 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001B76 EC?? F???          M         CALL    SIO_WRITE_W
001B7A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001B7C EC?? F???          M         CALL    SIO_WRITE_W
001B80 D???               M         BRA     S8B_END35
001B82                    M S8B_CHK_MSB35:
001B82 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001B84 D???               M         BRA     S8B_SEND_NORMAL35
001B86 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001B88 EC?? F???          M         CALL    SIO_WRITE_W
001B8C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001B8E                    M S8B_SEND_NORMAL35:
001B8E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001B90 EC?? F???          M         CALL    SIO_WRITE_W     
001B94                    M S8B_END35:
  00000024                M S8B_LABEL ++
                      00359           QS_SEND_BUTTON_TIME BTN_IDX_X3
001B94 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001B98 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001B9A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001B9C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B9E D???               M         BRA     S8B_CHK_7E36
001BA0 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001BA4 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001BA6 EC?? F???          M         CALL    SIO_WRITE_W                     
001BAA D???               M         BRA     S8B_END36
001BAC                    M S8B_CHK_7E36:
001BAC 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001BAE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001BB0 D???               M         BRA     S8B_CHK_MSB36
001BB2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001BB4 EC?? F???          M         CALL    SIO_WRITE_W
001BB8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001BBA EC?? F???          M         CALL    SIO_WRITE_W
001BBE D???               M         BRA     S8B_END36
001BC0                    M S8B_CHK_MSB36:
001BC0 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001BC2 D???               M         BRA     S8B_SEND_NORMAL36
001BC4 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001BC6 EC?? F???          M         CALL    SIO_WRITE_W
001BCA 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001BCC                    M S8B_SEND_NORMAL36:
001BCC 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001BCE EC?? F???          M         CALL    SIO_WRITE_W     
001BD2                    M S8B_END36:
  00000025                M S8B_LABEL ++
001BD2 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001BD6 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001BD8 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001BDA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001BDC D???               M         BRA     S8B_CHK_7E37
001BDE EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001BE2 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001BE4 EC?? F???          M         CALL    SIO_WRITE_W                     
001BE8 D???               M         BRA     S8B_END37
001BEA                    M S8B_CHK_7E37:
001BEA 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001BEC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001BEE D???               M         BRA     S8B_CHK_MSB37
001BF0 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001BF2 EC?? F???          M         CALL    SIO_WRITE_W
001BF6 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001BF8 EC?? F???          M         CALL    SIO_WRITE_W
001BFC D???               M         BRA     S8B_END37
001BFE                    M S8B_CHK_MSB37:
001BFE AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001C00 D???               M         BRA     S8B_SEND_NORMAL37
001C02 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C04 EC?? F???          M         CALL    SIO_WRITE_W
001C08 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001C0A                    M S8B_SEND_NORMAL37:
001C0A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001C0C EC?? F???          M         CALL    SIO_WRITE_W     
001C10                    M S8B_END37:
  00000026                M S8B_LABEL ++
001C10 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001C14 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001C16 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001C18 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C1A D???               M         BRA     S8B_CHK_7E38
001C1C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001C20 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001C22 EC?? F???          M         CALL    SIO_WRITE_W                     
001C26 D???               M         BRA     S8B_END38
001C28                    M S8B_CHK_7E38:
001C28 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001C2A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C2C D???               M         BRA     S8B_CHK_MSB38
001C2E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001C30 EC?? F???          M         CALL    SIO_WRITE_W
001C34 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001C36 EC?? F???          M         CALL    SIO_WRITE_W
001C3A D???               M         BRA     S8B_END38
001C3C                    M S8B_CHK_MSB38:
001C3C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001C3E D???               M         BRA     S8B_SEND_NORMAL38
001C40 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001C42 EC?? F???          M         CALL    SIO_WRITE_W
001C46 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001C48                    M S8B_SEND_NORMAL38:
001C48 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001C4A EC?? F???          M         CALL    SIO_WRITE_W     
001C4E                    M S8B_END38:
  00000027                M S8B_LABEL ++
001C4E C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001C52 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001C54 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001C56 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C58 D???               M         BRA     S8B_CHK_7E39
001C5A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001C5E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001C60 EC?? F???          M         CALL    SIO_WRITE_W                     
001C64 D???               M         BRA     S8B_END39
001C66                    M S8B_CHK_7E39:
001C66 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001C68 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C6A D???               M         BRA     S8B_CHK_MSB39
001C6C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001C6E EC?? F???          M         CALL    SIO_WRITE_W
001C72 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001C74 EC?? F???          M         CALL    SIO_WRITE_W
001C78 D???               M         BRA     S8B_END39
001C7A                    M S8B_CHK_MSB39:
001C7A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001C7C D???               M         BRA     S8B_SEND_NORMAL39
001C7E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001C80 EC?? F???          M         CALL    SIO_WRITE_W
001C84 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001C86                    M S8B_SEND_NORMAL39:
001C86 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001C88 EC?? F???          M         CALL    SIO_WRITE_W     
001C8C                    M S8B_END39:
  00000028                M S8B_LABEL ++
                      00360           QS_SEND_BUTTON_TIME BTN_IDX_L3
001C8C C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L3, WREG
                          M          SEND_8_BIT_W
001C90 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001C92 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001C94 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C96 D???               M         BRA     S8B_CHK_7E40
001C98 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001C9C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001C9E EC?? F???          M         CALL    SIO_WRITE_W                     
001CA2 D???               M         BRA     S8B_END40
001CA4                    M S8B_CHK_7E40:
001CA4 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001CA6 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001CA8 D???               M         BRA     S8B_CHK_MSB40
001CAA 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001CAC EC?? F???          M         CALL    SIO_WRITE_W
001CB0 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001CB2 EC?? F???          M         CALL    SIO_WRITE_W
001CB6 D???               M         BRA     S8B_END40
001CB8                    M S8B_CHK_MSB40:
001CB8 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001CBA D???               M         BRA     S8B_SEND_NORMAL40
001CBC 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001CBE EC?? F???          M         CALL    SIO_WRITE_W
001CC2 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001CC4                    M S8B_SEND_NORMAL40:
001CC4 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001CC6 EC?? F???          M         CALL    SIO_WRITE_W     
001CCA                    M S8B_END40:
  00000029                M S8B_LABEL ++
001CCA C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L3, WREG
                          M          SEND_8_BIT_W
001CCE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001CD0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001CD2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001CD4 D???               M         BRA     S8B_CHK_7E41
001CD6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001CDA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001CDC EC?? F???          M         CALL    SIO_WRITE_W                     
001CE0 D???               M         BRA     S8B_END41
001CE2                    M S8B_CHK_7E41:
001CE2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001CE4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001CE6 D???               M         BRA     S8B_CHK_MSB41
001CE8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001CEA EC?? F???          M         CALL    SIO_WRITE_W
001CEE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001CF0 EC?? F???          M         CALL    SIO_WRITE_W
001CF4 D???               M         BRA     S8B_END41
001CF6                    M S8B_CHK_MSB41:
001CF6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001CF8 D???               M         BRA     S8B_SEND_NORMAL41
001CFA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001CFC EC?? F???          M         CALL    SIO_WRITE_W
001D00 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001D02                    M S8B_SEND_NORMAL41:
001D02 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001D04 EC?? F???          M         CALL    SIO_WRITE_W     
001D08                    M S8B_END41:
  0000002A                M S8B_LABEL ++
001D08 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L3, WREG
                          M          SEND_8_BIT_W
001D0C 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001D0E 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001D10 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D12 D???               M         BRA     S8B_CHK_7E42
001D14 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001D18 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001D1A EC?? F???          M         CALL    SIO_WRITE_W                     
001D1E D???               M         BRA     S8B_END42
001D20                    M S8B_CHK_7E42:
001D20 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001D22 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D24 D???               M         BRA     S8B_CHK_MSB42
001D26 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001D28 EC?? F???          M         CALL    SIO_WRITE_W
001D2C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001D2E EC?? F???          M         CALL    SIO_WRITE_W
001D32 D???               M         BRA     S8B_END42
001D34                    M S8B_CHK_MSB42:
001D34 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001D36 D???               M         BRA     S8B_SEND_NORMAL42
001D38 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001D3A EC?? F???          M         CALL    SIO_WRITE_W
001D3E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001D40                    M S8B_SEND_NORMAL42:
001D40 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001D42 EC?? F???          M         CALL    SIO_WRITE_W     
001D46                    M S8B_END42:
  0000002B                M S8B_LABEL ++
001D46 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L3, WREG
                          M          SEND_8_BIT_W
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001D4A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001D4C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001D4E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D50 D???               M         BRA     S8B_CHK_7E43
001D52 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001D56 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001D58 EC?? F???          M         CALL    SIO_WRITE_W                     
001D5C D???               M         BRA     S8B_END43
001D5E                    M S8B_CHK_7E43:
001D5E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001D60 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D62 D???               M         BRA     S8B_CHK_MSB43
001D64 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001D66 EC?? F???          M         CALL    SIO_WRITE_W
001D6A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001D6C EC?? F???          M         CALL    SIO_WRITE_W
001D70 D???               M         BRA     S8B_END43
001D72                    M S8B_CHK_MSB43:
001D72 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001D74 D???               M         BRA     S8B_SEND_NORMAL43
001D76 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001D78 EC?? F???          M         CALL    SIO_WRITE_W
001D7C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001D7E                    M S8B_SEND_NORMAL43:
001D7E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001D80 EC?? F???          M         CALL    SIO_WRITE_W     
001D84                    M S8B_END43:
  0000002C                M S8B_LABEL ++
                      00361           QS_SEND_BUTTON_TIME BTN_IDX_X4
001D84 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001D88 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001D8A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001D8C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D8E D???               M         BRA     S8B_CHK_7E44
001D90 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001D94 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001D96 EC?? F???          M         CALL    SIO_WRITE_W                     
001D9A D???               M         BRA     S8B_END44
001D9C                    M S8B_CHK_7E44:
001D9C 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001D9E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001DA0 D???               M         BRA     S8B_CHK_MSB44
001DA2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001DA4 EC?? F???          M         CALL    SIO_WRITE_W
001DA8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001DAA EC?? F???          M         CALL    SIO_WRITE_W
001DAE D???               M         BRA     S8B_END44
001DB0                    M S8B_CHK_MSB44:
001DB0 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001DB2 D???               M         BRA     S8B_SEND_NORMAL44
001DB4 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001DB6 EC?? F???          M         CALL    SIO_WRITE_W
001DBA 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001DBC                    M S8B_SEND_NORMAL44:
001DBC 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001DBE EC?? F???          M         CALL    SIO_WRITE_W     
001DC2                    M S8B_END44:
  0000002D                M S8B_LABEL ++
001DC2 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001DC6 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001DC8 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001DCA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001DCC D???               M         BRA     S8B_CHK_7E45
001DCE EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001DD2 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001DD4 EC?? F???          M         CALL    SIO_WRITE_W                     
001DD8 D???               M         BRA     S8B_END45
001DDA                    M S8B_CHK_7E45:
001DDA 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001DDC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001DDE D???               M         BRA     S8B_CHK_MSB45
001DE0 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001DE2 EC?? F???          M         CALL    SIO_WRITE_W
001DE6 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001DE8 EC?? F???          M         CALL    SIO_WRITE_W
001DEC D???               M         BRA     S8B_END45
001DEE                    M S8B_CHK_MSB45:
001DEE AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001DF0 D???               M         BRA     S8B_SEND_NORMAL45
001DF2 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001DF4 EC?? F???          M         CALL    SIO_WRITE_W
001DF8 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001DFA                    M S8B_SEND_NORMAL45:
001DFA 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001DFC EC?? F???          M         CALL    SIO_WRITE_W     
001E00                    M S8B_END45:
  0000002E                M S8B_LABEL ++
001E00 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001E04 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001E06 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001E08 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E0A D???               M         BRA     S8B_CHK_7E46
001E0C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001E10 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001E12 EC?? F???          M         CALL    SIO_WRITE_W                     
001E16 D???               M         BRA     S8B_END46
001E18                    M S8B_CHK_7E46:
001E18 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001E1A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E1C D???               M         BRA     S8B_CHK_MSB46
001E1E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001E20 EC?? F???          M         CALL    SIO_WRITE_W
001E24 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001E26 EC?? F???          M         CALL    SIO_WRITE_W
001E2A D???               M         BRA     S8B_END46
001E2C                    M S8B_CHK_MSB46:
001E2C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001E2E D???               M         BRA     S8B_SEND_NORMAL46
001E30 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001E32 EC?? F???          M         CALL    SIO_WRITE_W
001E36 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001E38                    M S8B_SEND_NORMAL46:
001E38 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001E3A EC?? F???          M         CALL    SIO_WRITE_W     
001E3E                    M S8B_END46:
  0000002F                M S8B_LABEL ++
001E3E C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001E42 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001E44 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001E46 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E48 D???               M         BRA     S8B_CHK_7E47
001E4A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001E4E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001E50 EC?? F???          M         CALL    SIO_WRITE_W                     
001E54 D???               M         BRA     S8B_END47
001E56                    M S8B_CHK_7E47:
001E56 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001E58 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E5A D???               M         BRA     S8B_CHK_MSB47
001E5C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001E5E EC?? F???          M         CALL    SIO_WRITE_W
001E62 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001E64 EC?? F???          M         CALL    SIO_WRITE_W
001E68 D???               M         BRA     S8B_END47
001E6A                    M S8B_CHK_MSB47:
001E6A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001E6C D???               M         BRA     S8B_SEND_NORMAL47
001E6E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001E70 EC?? F???          M         CALL    SIO_WRITE_W
001E74 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001E76                    M S8B_SEND_NORMAL47:
001E76 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001E78 EC?? F???          M         CALL    SIO_WRITE_W     
001E7C                    M S8B_END47:
  00000030                M S8B_LABEL ++
                      00362           QS_SEND_BUTTON_TIME BTN_IDX_L4
001E7C C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001E80 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001E82 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001E84 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E86 D???               M         BRA     S8B_CHK_7E48
001E88 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001E8C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001E8E EC?? F???          M         CALL    SIO_WRITE_W                     
001E92 D???               M         BRA     S8B_END48
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E94                    M S8B_CHK_7E48:
001E94 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001E96 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E98 D???               M         BRA     S8B_CHK_MSB48
001E9A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001E9C EC?? F???          M         CALL    SIO_WRITE_W
001EA0 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001EA2 EC?? F???          M         CALL    SIO_WRITE_W
001EA6 D???               M         BRA     S8B_END48
001EA8                    M S8B_CHK_MSB48:
001EA8 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001EAA D???               M         BRA     S8B_SEND_NORMAL48
001EAC 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001EAE EC?? F???          M         CALL    SIO_WRITE_W
001EB2 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001EB4                    M S8B_SEND_NORMAL48:
001EB4 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001EB6 EC?? F???          M         CALL    SIO_WRITE_W     
001EBA                    M S8B_END48:
  00000031                M S8B_LABEL ++
001EBA C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001EBE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001EC0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001EC2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001EC4 D???               M         BRA     S8B_CHK_7E49
001EC6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001ECA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001ECC EC?? F???          M         CALL    SIO_WRITE_W                     
001ED0 D???               M         BRA     S8B_END49
001ED2                    M S8B_CHK_7E49:
001ED2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001ED4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001ED6 D???               M         BRA     S8B_CHK_MSB49
001ED8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001EDA EC?? F???          M         CALL    SIO_WRITE_W
001EDE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001EE0 EC?? F???          M         CALL    SIO_WRITE_W
001EE4 D???               M         BRA     S8B_END49
001EE6                    M S8B_CHK_MSB49:
001EE6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001EE8 D???               M         BRA     S8B_SEND_NORMAL49
001EEA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001EEC EC?? F???          M         CALL    SIO_WRITE_W
001EF0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001EF2                    M S8B_SEND_NORMAL49:
001EF2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001EF4 EC?? F???          M         CALL    SIO_WRITE_W     
001EF8                    M S8B_END49:
  00000032                M S8B_LABEL ++
001EF8 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001EFC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001EFE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001F00 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F02 D???               M         BRA     S8B_CHK_7E50
001F04 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001F08 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001F0A EC?? F???          M         CALL    SIO_WRITE_W                     
001F0E D???               M         BRA     S8B_END50
001F10                    M S8B_CHK_7E50:
001F10 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001F12 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F14 D???               M         BRA     S8B_CHK_MSB50
001F16 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001F18 EC?? F???          M         CALL    SIO_WRITE_W
001F1C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001F1E EC?? F???          M         CALL    SIO_WRITE_W
001F22 D???               M         BRA     S8B_END50
001F24                    M S8B_CHK_MSB50:
001F24 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001F26 D???               M         BRA     S8B_SEND_NORMAL50
001F28 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001F2A EC?? F???          M         CALL    SIO_WRITE_W
001F2E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001F30                    M S8B_SEND_NORMAL50:
001F30 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001F32 EC?? F???          M         CALL    SIO_WRITE_W     
001F36                    M S8B_END50:
  00000033                M S8B_LABEL ++
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001F36 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001F3A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001F3C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001F3E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F40 D???               M         BRA     S8B_CHK_7E51
001F42 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001F46 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001F48 EC?? F???          M         CALL    SIO_WRITE_W                     
001F4C D???               M         BRA     S8B_END51
001F4E                    M S8B_CHK_7E51:
001F4E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001F50 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F52 D???               M         BRA     S8B_CHK_MSB51
001F54 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001F56 EC?? F???          M         CALL    SIO_WRITE_W
001F5A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001F5C EC?? F???          M         CALL    SIO_WRITE_W
001F60 D???               M         BRA     S8B_END51
001F62                    M S8B_CHK_MSB51:
001F62 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001F64 D???               M         BRA     S8B_SEND_NORMAL51
001F66 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001F68 EC?? F???          M         CALL    SIO_WRITE_W
001F6C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001F6E                    M S8B_SEND_NORMAL51:
001F6E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001F70 EC?? F???          M         CALL    SIO_WRITE_W     
001F74                    M S8B_END51:
  00000034                M S8B_LABEL ++
                      00363          ELSE
                      00364           ERROR "Invalid chip selection"
                      00365          ENDIF
                      00366         ENDIF
001F74 EF?? F???      00367         GOTO    QS_QUERY_DONE
                      00368 
001F78                00369 QS_QUERY_PING:
001F78 6A00           00370         CLRF    YY_YY, ACCESS                   ; packet length = 0
001F7A B000           00371         BTFSC   QUIZSHOW_FLAGS, QS_FLAG_SCANNING, ACCESS
001F7C 8C00           00372         BSF     YY_YY, 6, ACCESS                ; 02 packet length+s    <0spppppp>
001F7E 5000           00373         MOVF    YY_YY, W, ACCESS
001F80 EC?? F???      00374         CALL    SIO_WRITE_W
                      00375 
001F84                00376 QS_QUERY_DONE:                                  ; Final packet:
001F84 0E47           00377         MOVLW   B'01000111'                     ; 0spppppp         p=packet length
001F86 1400           00378         ANDWF   YY_YY, W, ACCESS                ; 0s000ppp         s=scanner status
001F88 8AE8           00379         BSF     WREG, 5, ACCESS                 ; 0s100ppp
001F8A 86E8           00380         BSF     WREG, 3, ACCESS                 ; 0s101ppp
001F8C EC?? F???      00381         CALL    SIO_WRITE_W
                      00382 
001F90 8400           00383         BSF     SSR_STATE, DRAIN_TR, ACCESS     ; schedule transmitter shut-down
001F92 6A00           00384         CLRF    YY_STATE, ACCESS                ; return to idle state for next command
001F94 0012           00385         RETURN
                      00386 
                      00387 
001F96                00388 S20_DATA:
001F96 2CE8           00389         DECFSZ  WREG, W, ACCESS
001F98 D???           00390         BRA     S21_DATA
                      00391         ;
                      00392         ; SET_BUTTON_MASKS first byte received
                      00393         ; Store in YY_YY, wait for second byte.
                      00394         ;
001F9A C??? F???      00395         MOVFF   YY_DATA, YY_YY
001F9E 2A00           00396         INCF    YY_STATE, F, ACCESS     ; -> state 21 (wait for final byte)
001FA0 0012           00397         RETURN
                      00398 
001FA2                00399 S21_DATA:
001FA2 2CE8           00400         DECFSZ  WREG, W, ACCESS
001FA4 D???           00401         BRA     S22_DATA
                      00402         ;
                      00403         ; S21: QS_SET_BUTTON_MASKS command received.
                      00404         ;
                      00405         ;   ___7______6______5______4______3______2______1______0__
                      00406         ;  |                                  |                    |
                      00407         ;  |                0                 |          7         | YY_COMMAND
                      00408         ;  |______|______|______|______|______|______|______|______|
                      00409         ;  |      |      |      |      |                           |
                      00410         ;  |   0  |   0  |   0  |   0  |             11            | (not saved)
                      00411         ;  |______|______|______|______|______|______|______|______|
                      00412         ;  |      |      | BUTTON MASKS (1=disabled, 0=enabled)    |
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00413         ;  |   0  |   0  |   A  |   B  |   C  |   D  |   L  |   X  | YY_YY  
                      00414         ;  |______|______|__L2__|__X2__|__L1__|__X1__|__L0__|__X0__|        <-- QSRC
                      00415         ;  |      |      |                                         |
                      00416         ;  |   0  |   1  |   1  |   0  |   0  |   0  |   0  |   0  | YY_DATA
                      00417         ;  |______|______|___0__|___0__|__L4__|__X4__|__L3__|__X3__|        <-- QSRC
                      00418         ;
                      00419         ;
001FA6 AE00           00420         BTFSS   YY_YY, 7, ACCESS        ; Check postbyte 1 constant 00xxxxxx
001FA8 BC00           00421         BTFSC   YY_YY, 6, ACCESS
001FAA EF?? F???      00422         GOTO    ERR_COMMAND
                      00423 
001FAE AE00           00424         BTFSS   YY_DATA, 7, ACCESS      ; Check postbyte 2 constant 01xxxxxx
001FB0 AC00           00425         BTFSS   YY_DATA, 6, ACCESS
001FB2 EF?? F???      00426         GOTO    ERR_COMMAND
                      00427 
                      00428 UPDATE_BTN_MASK MACRO BTN_IDX, SRC, BIT
                      00429          BANKSEL QUIZSHOW_DATA
                      00430          BCF    BTN_X0_FLAGS + BTN_IDX, BTN_FLG_MASKED, BANKED
                      00431          BTFSC  SRC, BIT, ACCESS
                      00432          BSF    BTN_X0_FLAGS + BTN_IDX, BTN_FLG_MASKED, BANKED
                      00433         ENDM
                      00434 
                      00435         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC 
                      00436          MOVLW  B'01100000'             ; Check postbyte 2 constant 01100000
                      00437          CPFSEQ YY_DATA, ACCESS
                      00438          GOTO   ERR_COMMAND
                      00439          ;
                      00440          ;  set button masks
                      00441          ;
                      00442          BANKSEL QUIZSHOW_DATA
                      00443          UPDATE_BTN_MASK BTN_IDX_X0, YY_YY, 0
                      00444          UPDATE_BTN_MASK BTN_IDX_L0, YY_YY, 1
                      00445          UPDATE_BTN_MASK BTN_IDX_A0, YY_YY, 5
                      00446          UPDATE_BTN_MASK BTN_IDX_B0, YY_YY, 4
                      00447          UPDATE_BTN_MASK BTN_IDX_C0, YY_YY, 3
                      00448          UPDATE_BTN_MASK BTN_IDX_D0, YY_YY, 2
                      00449         ELSE
                      00450          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
001FB6 AA00           00451           BTFSS YY_DATA, 5, ACCESS      ; Check postbyte 2 constant xx00xxxx
001FB8 B800           00452           BTFSC YY_DATA, 4, ACCESS
001FBA EF?? F???      00453           GOTO  ERR_COMMAND
                      00454           ;
                      00455           ; set button masks
                      00456           ;
001FBE 010C           00457           BANKSEL QUIZSHOW_DATA
                      00458           UPDATE_BTN_MASK BTN_IDX_X0, YY_YY, 0
001FC0 010C               M          BANKSEL QUIZSHOW_DATA
001FC2 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
001FC4 B000               M          BTFSC  YY_YY, 0, ACCESS
001FC6 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
                      00459           UPDATE_BTN_MASK BTN_IDX_L0, YY_YY, 1
001FC8 010C               M          BANKSEL QUIZSHOW_DATA
001FCA 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
001FCC B200               M          BTFSC  YY_YY, 1, ACCESS
001FCE 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
                      00460           UPDATE_BTN_MASK BTN_IDX_X1, YY_YY, 2
001FD0 010C               M          BANKSEL QUIZSHOW_DATA
001FD2 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_MASKED, BANKED
001FD4 B400               M          BTFSC  YY_YY, 2, ACCESS
001FD6 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_MASKED, BANKED
                      00461           UPDATE_BTN_MASK BTN_IDX_L1, YY_YY, 3
001FD8 010C               M          BANKSEL QUIZSHOW_DATA
001FDA 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_MASKED, BANKED
001FDC B600               M          BTFSC  YY_YY, 3, ACCESS
001FDE 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_MASKED, BANKED
                      00462           UPDATE_BTN_MASK BTN_IDX_X2, YY_YY, 4
001FE0 010C               M          BANKSEL QUIZSHOW_DATA
001FE2 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_MASKED, BANKED
001FE4 B800               M          BTFSC  YY_YY, 4, ACCESS
001FE6 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_MASKED, BANKED
                      00463           UPDATE_BTN_MASK BTN_IDX_L2, YY_YY, 5
001FE8 010C               M          BANKSEL QUIZSHOW_DATA
001FEA 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_MASKED, BANKED
001FEC BA00               M          BTFSC  YY_YY, 5, ACCESS
001FEE 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_MASKED, BANKED
                      00464           UPDATE_BTN_MASK BTN_IDX_X3, YY_DATA, 0
001FF0 010C               M          BANKSEL QUIZSHOW_DATA
001FF2 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_MASKED, BANKED
001FF4 B000               M          BTFSC  YY_DATA, 0, ACCESS
001FF6 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_MASKED, BANKED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00465           UPDATE_BTN_MASK BTN_IDX_L3, YY_DATA, 1
001FF8 010C               M          BANKSEL QUIZSHOW_DATA
001FFA 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_MASKED, BANKED
001FFC B200               M          BTFSC  YY_DATA, 1, ACCESS
001FFE 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_MASKED, BANKED
                      00466           UPDATE_BTN_MASK BTN_IDX_X4, YY_DATA, 2
002000 010C               M          BANKSEL QUIZSHOW_DATA
002002 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_MASKED, BANKED
002004 B400               M          BTFSC  YY_DATA, 2, ACCESS
002006 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_MASKED, BANKED
                      00467           UPDATE_BTN_MASK BTN_IDX_L4, YY_DATA, 3
002008 010C               M          BANKSEL QUIZSHOW_DATA
00200A 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_MASKED, BANKED
00200C B600               M          BTFSC  YY_DATA, 3, ACCESS
00200E 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_MASKED, BANKED
                      00468          ENDIF
                      00469         ENDIF
002010 6A00           00470         CLRF    YY_STATE, ACCESS
002012 0012           00471         RETURN
                      00472           
002014                00473 S22_DATA:
                      00474         ERR_BUG 0x05, ERR_CLASS_OVERRUN
002014 0E05               M          MOVLW  0x05
002016 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
002018 6A00               M          CLRF   YY_STATE, ACCESS
00201A 0012               M          RETURN
                      05346         ELSE
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05347          ERR_BUG 0x0E, ERR_CLASS_OVERRUN
                      05348         ENDIF
                      05349 
00201C                05350 SSR_OUTPUT_VALUE:
                      05351         ;
                      05352         ; Change an SSR's output value.  This does the same thing
                      05353         ; as SET_SSR_VALUE, except the other one is a macro we can
                      05354         ; only use at runtime with constant SSR IDs (but more efficiently)
                      05355         ; while this works at runtime.
                      05356         ;
                      05357         ; Changes the output value of TARGET_SSR to the W register.
                      05358         ; Uses FSR0 register and KK.
                      05359         ;
00201C 0004           05360         CLRWDT
00201E 9E00           05361         BCF     TARGET_SSR, 7, ACCESS
002020 9C00           05362         BCF     TARGET_SSR, 6, ACCESS
002022 6E00           05363         MOVWF   KK, ACCESS
002024 EE?? F0??      05364         LFSR    0, SSR_00_VALUE
002028 5000           05365         MOVF    TARGET_SSR, W, ACCESS           ; ssr value -> [ssr0 + target]
00202A 26E9           05366         ADDWF   FSR0L, F, ACCESS
00202C C??? FFEF      05367         MOVFF   KK, INDF0
002030 0E14           05368         MOVLW   SSR_BLOCK_LEN
002032 26E9           05369         ADDWF   FSR0L, F, ACCESS
002034 6AEF           05370         CLRF    INDF0                           ; clear flags
002036 26E9           05371         ADDWF   FSR0L, F, ACCESS
002038 6AEF           05372         CLRF    INDF0                           ; clear step
00203A 26E9           05373         ADDWF   FSR0L, F, ACCESS
00203C 6AEF           05374         CLRF    INDF0                           ; clear speed
00203E 26E9           05375         ADDWF   FSR0L, F, ACCESS
002040 6AEF           05376         CLRF    INDF0                           ; clear counter
002042 0012           05377         RETURN
                      05378         
002044                05379 XLATE_SSR_ID:
                      05380         ;
                      05381         ; Move YY_DATA -> TARGET_SSR
                      05382         ; setting flag bits as appropriate
                      05383         ;   _______________________________________________________
                      05384         ;  |             |                                         |
                      05385         ;  |             |           Channel ID (0-47)             | YY_DATA
                      05386         ;  |______|______|______|______|______|______|______|______|    |
                      05387         ;  |NOT_MY|INVALI|                                         |    V
                      05388         ;  | _SSR |D_SSR |           Channel ID (0-23)             | TARGET_SSR
                      05389         ;  |______|______|______|______|______|______|______|______|
                      05390         ;
                      05391         ; If INVALID_SSR=1, the ID cannot possibly be right for the device; disregard all other bits
                      05392         ; If NOT_MY_SSR=1, this channel exists on the slave chip; Channel ID has been adjusted to that C
                            PU.
                      05393         ; Else, Channel ID is for this chip and is in range [0,23].
                      05394         ;
002044 0004           05395         CLRWDT
002046 0E3F           05396         MOVLW   0x3F
002048 1400           05397         ANDWF   YY_DATA, W, ACCESS
00204A 6E00           05398         MOVWF   TARGET_SSR, ACCESS
00204C 0E17           05399         MOVLW   .23
00204E 6400           05400         CPFSGT  TARGET_SSR, ACCESS
002050 0012           05401         RETURN
                      05402         IF ROLE_MASTER
                      05403          MOVLW  .24
                      05404          SUBWF  TARGET_SSR, F, ACCESS
                      05405          CPFSLT TARGET_SSR, ACCESS
                      05406         ENDIF
002052 8C00           05407         BSF     TARGET_SSR, INVALID_SSR, ACCESS
002054 8E00           05408         BSF     TARGET_SSR, NOT_MY_SSR, ACCESS
002056 0012           05409         RETURN
                      05410 
002058                05411 UPDATE_SSR_OUTPUTS:
002058 0004           05412         CLRWDT
00205A 0104           05413         BANKSEL SSR_DATA_BANK
00205C 9A00           05414         BCF     SSR_STATE, SLICE_UPD, ACCESS
00205E 5000           05415         MOVF    CUR_SLICE, W, ACCESS    ; is this the last cycle?
002060 E0??           05416         BZ      UPDATE_MINIMUM_LEVEL
                      05417         ;
                      05418         ; For maximum speed in this tight loop, we save time by 
                      05419         ; unrolling all the tests and output settings into a flat
                      05420         ; instruction sequence (via assembly-time macro) instead of
                      05421         ; using a run-time loop or subroutines to calculate the bits
                      05422         ; and ports for each.  (Like we used to in the previous version.)
                      05423         ;
  00000000            05424 X       SET     0
                      05425         WHILE X <= SSR_MAX
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002062 6300           05426          CPFSEQ SSR_00_VALUE+0,     BANKED      ; is this SSR set to our slice value?
002064 D???           05427          BRA    UPDATE_SSR_SKIP_0
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002066 848B           05429           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn on SSR
                      05432          ENDIF
002068                05433 UPDATE_SSR_SKIP_0:
  00000001            05434 X        ++
002068 6300           05426          CPFSEQ SSR_00_VALUE+1,     BANKED      ; is this SSR set to our slice value?
00206A D???           05427          BRA    UPDATE_SSR_SKIP_1
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00206C 828B           05429           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn on SSR
                      05432          ENDIF
00206E                05433 UPDATE_SSR_SKIP_1:
  00000002            05434 X        ++
00206E 6300           05426          CPFSEQ SSR_00_VALUE+2,     BANKED      ; is this SSR set to our slice value?
002070 D???           05427          BRA    UPDATE_SSR_SKIP_2
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002072 808B           05429           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn on SSR
                      05432          ENDIF
002074                05433 UPDATE_SSR_SKIP_2:
  00000003            05434 X        ++
002074 6300           05426          CPFSEQ SSR_00_VALUE+3,     BANKED      ; is this SSR set to our slice value?
002076 D???           05427          BRA    UPDATE_SSR_SKIP_3
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002078 848D           05429           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn on SSR
                      05432          ENDIF
00207A                05433 UPDATE_SSR_SKIP_3:
  00000004            05434 X        ++
00207A 6300           05426          CPFSEQ SSR_00_VALUE+4,     BANKED      ; is this SSR set to our slice value?
00207C D???           05427          BRA    UPDATE_SSR_SKIP_4
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00207E 8E8A           05429           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn on SSR
                      05432          ENDIF
002080                05433 UPDATE_SSR_SKIP_4:
  00000005            05434 X        ++
002080 6300           05426          CPFSEQ SSR_00_VALUE+5,     BANKED      ; is this SSR set to our slice value?
002082 D???           05427          BRA    UPDATE_SSR_SKIP_5
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002084 8C8A           05429           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn on SSR
                      05432          ENDIF
002086                05433 UPDATE_SSR_SKIP_5:
  00000006            05434 X        ++
002086 6300           05426          CPFSEQ SSR_00_VALUE+6,     BANKED      ; is this SSR set to our slice value?
002088 D???           05427          BRA    UPDATE_SSR_SKIP_6
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00208A 8A8A           05429           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn on SSR
                      05432          ENDIF
00208C                05433 UPDATE_SSR_SKIP_6:
  00000007            05434 X        ++
00208C 6300           05426          CPFSEQ SSR_00_VALUE+7,     BANKED      ; is this SSR set to our slice value?
00208E D???           05427          BRA    UPDATE_SSR_SKIP_7
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002090 888A           05429           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn on SSR
                      05432          ENDIF
002092                05433 UPDATE_SSR_SKIP_7:
  00000008            05434 X        ++
002092 6300           05426          CPFSEQ SSR_00_VALUE+8,     BANKED      ; is this SSR set to our slice value?
002094 D???           05427          BRA    UPDATE_SSR_SKIP_8
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002096 868A           05429           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn on SSR
                      05432          ENDIF
002098                05433 UPDATE_SSR_SKIP_8:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000009            05434 X        ++
002098 6300           05426          CPFSEQ SSR_00_VALUE+9,     BANKED      ; is this SSR set to our slice value?
00209A D???           05427          BRA    UPDATE_SSR_SKIP_9
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00209C 848A           05429           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn on SSR
                      05432          ENDIF
00209E                05433 UPDATE_SSR_SKIP_9:
  0000000A            05434 X        ++
00209E 6300           05426          CPFSEQ SSR_00_VALUE+10,    BANKED      ; is this SSR set to our slice value?
0020A0 D???           05427          BRA    UPDATE_SSR_SKIP_10
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020A2 828A           05429           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020A4                05433 UPDATE_SSR_SKIP_10:
  0000000B            05434 X        ++
0020A4 6300           05426          CPFSEQ SSR_00_VALUE+11,    BANKED      ; is this SSR set to our slice value?
0020A6 D???           05427          BRA    UPDATE_SSR_SKIP_11
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020A8 808D           05429           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020AA                05433 UPDATE_SSR_SKIP_11:
  0000000C            05434 X        ++
0020AA 6300           05426          CPFSEQ SSR_00_VALUE+12,    BANKED      ; is this SSR set to our slice value?
0020AC D???           05427          BRA    UPDATE_SSR_SKIP_12
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020AE 8E8C           05429           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020B0                05433 UPDATE_SSR_SKIP_12:
  0000000D            05434 X        ++
0020B0 6300           05426          CPFSEQ SSR_00_VALUE+13,    BANKED      ; is this SSR set to our slice value?
0020B2 D???           05427          BRA    UPDATE_SSR_SKIP_13
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020B4 8C8C           05429           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020B6                05433 UPDATE_SSR_SKIP_13:
  0000000E            05434 X        ++
0020B6 6300           05426          CPFSEQ SSR_00_VALUE+14,    BANKED      ; is this SSR set to our slice value?
0020B8 D???           05427          BRA    UPDATE_SSR_SKIP_14
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020BA 8A8C           05429           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020BC                05433 UPDATE_SSR_SKIP_14:
  0000000F            05434 X        ++
0020BC 6300           05426          CPFSEQ SSR_00_VALUE+15,    BANKED      ; is this SSR set to our slice value?
0020BE D???           05427          BRA    UPDATE_SSR_SKIP_15
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020C0 828D           05429           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020C2                05433 UPDATE_SSR_SKIP_15:
  00000010            05434 X        ++
0020C2 6300           05426          CPFSEQ SSR_00_VALUE+16,    BANKED      ; is this SSR set to our slice value?
0020C4 D???           05427          BRA    UPDATE_SSR_SKIP_16
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020C6 808A           05429           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020C8                05433 UPDATE_SSR_SKIP_16:
  00000011            05434 X        ++
0020C8 6300           05426          CPFSEQ SSR_00_VALUE+17,    BANKED      ; is this SSR set to our slice value?
0020CA D???           05427          BRA    UPDATE_SSR_SKIP_17
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020CC 868C           05429           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn on SSR
                      05432          ENDIF
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0020CE                05433 UPDATE_SSR_SKIP_17:
  00000012            05434 X        ++
0020CE 6300           05426          CPFSEQ SSR_00_VALUE+18,    BANKED      ; is this SSR set to our slice value?
0020D0 D???           05427          BRA    UPDATE_SSR_SKIP_18
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020D2 828C           05429           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020D4                05433 UPDATE_SSR_SKIP_18:
  00000013            05434 X        ++
0020D4 6300           05426          CPFSEQ SSR_00_VALUE+19,    BANKED      ; is this SSR set to our slice value?
0020D6 D???           05427          BRA    UPDATE_SSR_SKIP_19
                      05428          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020D8 848C           05429           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn on light
                      05430          ELSE
                      05431           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn on SSR
                      05432          ENDIF
0020DA                05433 UPDATE_SSR_SKIP_19:
  00000014            05434 X        ++
                      05435         ENDW
0020DA 0600           05436         DECF    CUR_SLICE, F, ACCESS
0020DC 0012           05437         RETURN
                      05438 
0020DE                05439 UPDATE_MINIMUM_LEVEL:
                      05440         ;
                      05441         ; turn off every output that isn't set to be fully on
                      05442         ; and handle ramping up/down
                      05443         ;
0020DE 0104           05444         BANKSEL SSR_DATA_BANK
0020E0 8800           05445         BSF     SSR_STATE2, ALL_OFF, ACCESS     
  00000000            05446 X       SET     0
                      05447         WHILE X <= SSR_MAX
0020E2 1D00           05448          COMF   SSR_00_VALUE+0,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0020E4 E1??           05450          BNZ    UPDATE_MIN_DIMMED_0
                      05451          IF X <= OUTPUT_CHAN_MAX
0020E6 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0020E8 D???           05454          BRA    UPDATE_MIN_SKIP_0
                      05455 
0020EA                05456 UPDATE_MIN_DIMMED_0:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020EA 948B           05458           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+0,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0020EC                05465 UPDATE_MIN_SKIP_0:
                      05466 
0020EC 0104           05467          BANKSEL SSR_DATA_BANK
0020EE AF00           05468          BTFSS  SSR_00_FLAGS+0,     FADE_UP, BANKED
0020F0 D???           05469          BRA    TRY_DOWN_0
0020F2 2F00           05470          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay to next step
0020F4 D???           05471          BRA    END_FADE_0
0020F6 C??? F???      05472          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0
0020FA 5100           05473          MOVF   SSR_00_STEP+0,     W, BANKED
0020FC 2700           05474          ADDWF  SSR_00_VALUE+0,     F, BANKED
0020FE E3??           05475          BNC    END_FADE_0
002100 6900           05476          SETF   SSR_00_VALUE+0,     BANKED              ; reached max value
002102 9F00           05477          BCF    SSR_00_FLAGS+0,     FADE_UP, BANKED     ; stop fading
002104 AB00           05478          BTFSS  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
002106 D???           05479          BRA    END_FADE_0
002108 8D00           05480          BSF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   
00210A D???           05481          BRA    END_FADE_0
                      05482 
00210C                05483 TRY_DOWN_0:
00210C 0104           05484          BANKSEL SSR_DATA_BANK
00210E AD00           05485          BTFSS  SSR_00_FLAGS+0,     FADE_DOWN, BANKED
002110 D???           05486          BRA    END_FADE_0
002112 2F00           05487          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay
002114 D???           05488          BRA    END_FADE_0
002116 C??? F???      05489          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0; reset delay
00211A 5100           05490          MOVF   SSR_00_STEP+0,     W, BANKED
00211C 5F00           05491          SUBWF  SSR_00_VALUE+0,     F, BANKED
00211E E2??           05492          BC     END_FADE_0
002120 6B00           05493          CLRF   SSR_00_VALUE+0,     BANKED              ; reached min value
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002122 9D00           05494          BCF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   ; stop fading
002124 BB00           05495          BTFSC  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
002126 8F00           05496          BSF    SSR_00_FLAGS+0,     FADE_UP, BANKED
002128 B900           05497          BTFSC  SSR_00_FLAGS+0,     MAX_OFF_TIME, BANKED; maximizing off-time?
00212A 6900           05498          SETF   SSR_00_COUNTER+0,     BANKED
                      05499 
00212C                05500 END_FADE_0:
  00000001            05501 X        ++
00212C 1D00           05448          COMF   SSR_00_VALUE+1,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
00212E E1??           05450          BNZ    UPDATE_MIN_DIMMED_1
                      05451          IF X <= OUTPUT_CHAN_MAX
002130 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
002132 D???           05454          BRA    UPDATE_MIN_SKIP_1
                      05455 
002134                05456 UPDATE_MIN_DIMMED_1:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002134 928B           05458           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+1,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
002136                05465 UPDATE_MIN_SKIP_1:
                      05466 
002136 0104           05467          BANKSEL SSR_DATA_BANK
002138 AF00           05468          BTFSS  SSR_00_FLAGS+1,     FADE_UP, BANKED
00213A D???           05469          BRA    TRY_DOWN_1
00213C 2F00           05470          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay to next step
00213E D???           05471          BRA    END_FADE_1
002140 C??? F???      05472          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1
002144 5100           05473          MOVF   SSR_00_STEP+1,     W, BANKED
002146 2700           05474          ADDWF  SSR_00_VALUE+1,     F, BANKED
002148 E3??           05475          BNC    END_FADE_1
00214A 6900           05476          SETF   SSR_00_VALUE+1,     BANKED              ; reached max value
00214C 9F00           05477          BCF    SSR_00_FLAGS+1,     FADE_UP, BANKED     ; stop fading
00214E AB00           05478          BTFSS  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
002150 D???           05479          BRA    END_FADE_1
002152 8D00           05480          BSF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   
002154 D???           05481          BRA    END_FADE_1
                      05482 
002156                05483 TRY_DOWN_1:
002156 0104           05484          BANKSEL SSR_DATA_BANK
002158 AD00           05485          BTFSS  SSR_00_FLAGS+1,     FADE_DOWN, BANKED
00215A D???           05486          BRA    END_FADE_1
00215C 2F00           05487          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay
00215E D???           05488          BRA    END_FADE_1
002160 C??? F???      05489          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1; reset delay
002164 5100           05490          MOVF   SSR_00_STEP+1,     W, BANKED
002166 5F00           05491          SUBWF  SSR_00_VALUE+1,     F, BANKED
002168 E2??           05492          BC     END_FADE_1
00216A 6B00           05493          CLRF   SSR_00_VALUE+1,     BANKED              ; reached min value
00216C 9D00           05494          BCF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   ; stop fading
00216E BB00           05495          BTFSC  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
002170 8F00           05496          BSF    SSR_00_FLAGS+1,     FADE_UP, BANKED
002172 B900           05497          BTFSC  SSR_00_FLAGS+1,     MAX_OFF_TIME, BANKED; maximizing off-time?
002174 6900           05498          SETF   SSR_00_COUNTER+1,     BANKED
                      05499 
002176                05500 END_FADE_1:
  00000002            05501 X        ++
002176 1D00           05448          COMF   SSR_00_VALUE+2,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
002178 E1??           05450          BNZ    UPDATE_MIN_DIMMED_2
                      05451          IF X <= OUTPUT_CHAN_MAX
00217A 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
00217C D???           05454          BRA    UPDATE_MIN_SKIP_2
                      05455 
00217E                05456 UPDATE_MIN_DIMMED_2:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00217E 908B           05458           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+2,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05464          ENDIF
002180                05465 UPDATE_MIN_SKIP_2:
                      05466 
002180 0104           05467          BANKSEL SSR_DATA_BANK
002182 AF00           05468          BTFSS  SSR_00_FLAGS+2,     FADE_UP, BANKED
002184 D???           05469          BRA    TRY_DOWN_2
002186 2F00           05470          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay to next step
002188 D???           05471          BRA    END_FADE_2
00218A C??? F???      05472          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2
00218E 5100           05473          MOVF   SSR_00_STEP+2,     W, BANKED
002190 2700           05474          ADDWF  SSR_00_VALUE+2,     F, BANKED
002192 E3??           05475          BNC    END_FADE_2
002194 6900           05476          SETF   SSR_00_VALUE+2,     BANKED              ; reached max value
002196 9F00           05477          BCF    SSR_00_FLAGS+2,     FADE_UP, BANKED     ; stop fading
002198 AB00           05478          BTFSS  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
00219A D???           05479          BRA    END_FADE_2
00219C 8D00           05480          BSF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   
00219E D???           05481          BRA    END_FADE_2
                      05482 
0021A0                05483 TRY_DOWN_2:
0021A0 0104           05484          BANKSEL SSR_DATA_BANK
0021A2 AD00           05485          BTFSS  SSR_00_FLAGS+2,     FADE_DOWN, BANKED
0021A4 D???           05486          BRA    END_FADE_2
0021A6 2F00           05487          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay
0021A8 D???           05488          BRA    END_FADE_2
0021AA C??? F???      05489          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2; reset delay
0021AE 5100           05490          MOVF   SSR_00_STEP+2,     W, BANKED
0021B0 5F00           05491          SUBWF  SSR_00_VALUE+2,     F, BANKED
0021B2 E2??           05492          BC     END_FADE_2
0021B4 6B00           05493          CLRF   SSR_00_VALUE+2,     BANKED              ; reached min value
0021B6 9D00           05494          BCF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   ; stop fading
0021B8 BB00           05495          BTFSC  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
0021BA 8F00           05496          BSF    SSR_00_FLAGS+2,     FADE_UP, BANKED
0021BC B900           05497          BTFSC  SSR_00_FLAGS+2,     MAX_OFF_TIME, BANKED; maximizing off-time?
0021BE 6900           05498          SETF   SSR_00_COUNTER+2,     BANKED
                      05499 
0021C0                05500 END_FADE_2:
  00000003            05501 X        ++
0021C0 1D00           05448          COMF   SSR_00_VALUE+3,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0021C2 E1??           05450          BNZ    UPDATE_MIN_DIMMED_3
                      05451          IF X <= OUTPUT_CHAN_MAX
0021C4 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0021C6 D???           05454          BRA    UPDATE_MIN_SKIP_3
                      05455 
0021C8                05456 UPDATE_MIN_DIMMED_3:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0021C8 948D           05458           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+3,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0021CA                05465 UPDATE_MIN_SKIP_3:
                      05466 
0021CA 0104           05467          BANKSEL SSR_DATA_BANK
0021CC AF00           05468          BTFSS  SSR_00_FLAGS+3,     FADE_UP, BANKED
0021CE D???           05469          BRA    TRY_DOWN_3
0021D0 2F00           05470          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay to next step
0021D2 D???           05471          BRA    END_FADE_3
0021D4 C??? F???      05472          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3
0021D8 5100           05473          MOVF   SSR_00_STEP+3,     W, BANKED
0021DA 2700           05474          ADDWF  SSR_00_VALUE+3,     F, BANKED
0021DC E3??           05475          BNC    END_FADE_3
0021DE 6900           05476          SETF   SSR_00_VALUE+3,     BANKED              ; reached max value
0021E0 9F00           05477          BCF    SSR_00_FLAGS+3,     FADE_UP, BANKED     ; stop fading
0021E2 AB00           05478          BTFSS  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
0021E4 D???           05479          BRA    END_FADE_3
0021E6 8D00           05480          BSF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   
0021E8 D???           05481          BRA    END_FADE_3
                      05482 
0021EA                05483 TRY_DOWN_3:
0021EA 0104           05484          BANKSEL SSR_DATA_BANK
0021EC AD00           05485          BTFSS  SSR_00_FLAGS+3,     FADE_DOWN, BANKED
0021EE D???           05486          BRA    END_FADE_3
0021F0 2F00           05487          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay
0021F2 D???           05488          BRA    END_FADE_3
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0021F4 C??? F???      05489          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3; reset delay
0021F8 5100           05490          MOVF   SSR_00_STEP+3,     W, BANKED
0021FA 5F00           05491          SUBWF  SSR_00_VALUE+3,     F, BANKED
0021FC E2??           05492          BC     END_FADE_3
0021FE 6B00           05493          CLRF   SSR_00_VALUE+3,     BANKED              ; reached min value
002200 9D00           05494          BCF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   ; stop fading
002202 BB00           05495          BTFSC  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
002204 8F00           05496          BSF    SSR_00_FLAGS+3,     FADE_UP, BANKED
002206 B900           05497          BTFSC  SSR_00_FLAGS+3,     MAX_OFF_TIME, BANKED; maximizing off-time?
002208 6900           05498          SETF   SSR_00_COUNTER+3,     BANKED
                      05499 
00220A                05500 END_FADE_3:
  00000004            05501 X        ++
00220A 1D00           05448          COMF   SSR_00_VALUE+4,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
00220C E1??           05450          BNZ    UPDATE_MIN_DIMMED_4
                      05451          IF X <= OUTPUT_CHAN_MAX
00220E 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
002210 D???           05454          BRA    UPDATE_MIN_SKIP_4
                      05455 
002212                05456 UPDATE_MIN_DIMMED_4:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002212 9E8A           05458           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+4,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
002214                05465 UPDATE_MIN_SKIP_4:
                      05466 
002214 0104           05467          BANKSEL SSR_DATA_BANK
002216 AF00           05468          BTFSS  SSR_00_FLAGS+4,     FADE_UP, BANKED
002218 D???           05469          BRA    TRY_DOWN_4
00221A 2F00           05470          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay to next step
00221C D???           05471          BRA    END_FADE_4
00221E C??? F???      05472          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4
002222 5100           05473          MOVF   SSR_00_STEP+4,     W, BANKED
002224 2700           05474          ADDWF  SSR_00_VALUE+4,     F, BANKED
002226 E3??           05475          BNC    END_FADE_4
002228 6900           05476          SETF   SSR_00_VALUE+4,     BANKED              ; reached max value
00222A 9F00           05477          BCF    SSR_00_FLAGS+4,     FADE_UP, BANKED     ; stop fading
00222C AB00           05478          BTFSS  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
00222E D???           05479          BRA    END_FADE_4
002230 8D00           05480          BSF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   
002232 D???           05481          BRA    END_FADE_4
                      05482 
002234                05483 TRY_DOWN_4:
002234 0104           05484          BANKSEL SSR_DATA_BANK
002236 AD00           05485          BTFSS  SSR_00_FLAGS+4,     FADE_DOWN, BANKED
002238 D???           05486          BRA    END_FADE_4
00223A 2F00           05487          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay
00223C D???           05488          BRA    END_FADE_4
00223E C??? F???      05489          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4; reset delay
002242 5100           05490          MOVF   SSR_00_STEP+4,     W, BANKED
002244 5F00           05491          SUBWF  SSR_00_VALUE+4,     F, BANKED
002246 E2??           05492          BC     END_FADE_4
002248 6B00           05493          CLRF   SSR_00_VALUE+4,     BANKED              ; reached min value
00224A 9D00           05494          BCF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   ; stop fading
00224C BB00           05495          BTFSC  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
00224E 8F00           05496          BSF    SSR_00_FLAGS+4,     FADE_UP, BANKED
002250 B900           05497          BTFSC  SSR_00_FLAGS+4,     MAX_OFF_TIME, BANKED; maximizing off-time?
002252 6900           05498          SETF   SSR_00_COUNTER+4,     BANKED
                      05499 
002254                05500 END_FADE_4:
  00000005            05501 X        ++
002254 1D00           05448          COMF   SSR_00_VALUE+5,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
002256 E1??           05450          BNZ    UPDATE_MIN_DIMMED_5
                      05451          IF X <= OUTPUT_CHAN_MAX
002258 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
00225A D???           05454          BRA    UPDATE_MIN_SKIP_5
                      05455 
00225C                05456 UPDATE_MIN_DIMMED_5:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00225C 9C8A           05458           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn off light
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05459          ELSE
                      05460           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+5,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
00225E                05465 UPDATE_MIN_SKIP_5:
                      05466 
00225E 0104           05467          BANKSEL SSR_DATA_BANK
002260 AF00           05468          BTFSS  SSR_00_FLAGS+5,     FADE_UP, BANKED
002262 D???           05469          BRA    TRY_DOWN_5
002264 2F00           05470          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay to next step
002266 D???           05471          BRA    END_FADE_5
002268 C??? F???      05472          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5
00226C 5100           05473          MOVF   SSR_00_STEP+5,     W, BANKED
00226E 2700           05474          ADDWF  SSR_00_VALUE+5,     F, BANKED
002270 E3??           05475          BNC    END_FADE_5
002272 6900           05476          SETF   SSR_00_VALUE+5,     BANKED              ; reached max value
002274 9F00           05477          BCF    SSR_00_FLAGS+5,     FADE_UP, BANKED     ; stop fading
002276 AB00           05478          BTFSS  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
002278 D???           05479          BRA    END_FADE_5
00227A 8D00           05480          BSF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   
00227C D???           05481          BRA    END_FADE_5
                      05482 
00227E                05483 TRY_DOWN_5:
00227E 0104           05484          BANKSEL SSR_DATA_BANK
002280 AD00           05485          BTFSS  SSR_00_FLAGS+5,     FADE_DOWN, BANKED
002282 D???           05486          BRA    END_FADE_5
002284 2F00           05487          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay
002286 D???           05488          BRA    END_FADE_5
002288 C??? F???      05489          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5; reset delay
00228C 5100           05490          MOVF   SSR_00_STEP+5,     W, BANKED
00228E 5F00           05491          SUBWF  SSR_00_VALUE+5,     F, BANKED
002290 E2??           05492          BC     END_FADE_5
002292 6B00           05493          CLRF   SSR_00_VALUE+5,     BANKED              ; reached min value
002294 9D00           05494          BCF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   ; stop fading
002296 BB00           05495          BTFSC  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
002298 8F00           05496          BSF    SSR_00_FLAGS+5,     FADE_UP, BANKED
00229A B900           05497          BTFSC  SSR_00_FLAGS+5,     MAX_OFF_TIME, BANKED; maximizing off-time?
00229C 6900           05498          SETF   SSR_00_COUNTER+5,     BANKED
                      05499 
00229E                05500 END_FADE_5:
  00000006            05501 X        ++
00229E 1D00           05448          COMF   SSR_00_VALUE+6,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0022A0 E1??           05450          BNZ    UPDATE_MIN_DIMMED_6
                      05451          IF X <= OUTPUT_CHAN_MAX
0022A2 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0022A4 D???           05454          BRA    UPDATE_MIN_SKIP_6
                      05455 
0022A6                05456 UPDATE_MIN_DIMMED_6:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0022A6 9A8A           05458           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+6,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0022A8                05465 UPDATE_MIN_SKIP_6:
                      05466 
0022A8 0104           05467          BANKSEL SSR_DATA_BANK
0022AA AF00           05468          BTFSS  SSR_00_FLAGS+6,     FADE_UP, BANKED
0022AC D???           05469          BRA    TRY_DOWN_6
0022AE 2F00           05470          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay to next step
0022B0 D???           05471          BRA    END_FADE_6
0022B2 C??? F???      05472          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6
0022B6 5100           05473          MOVF   SSR_00_STEP+6,     W, BANKED
0022B8 2700           05474          ADDWF  SSR_00_VALUE+6,     F, BANKED
0022BA E3??           05475          BNC    END_FADE_6
0022BC 6900           05476          SETF   SSR_00_VALUE+6,     BANKED              ; reached max value
0022BE 9F00           05477          BCF    SSR_00_FLAGS+6,     FADE_UP, BANKED     ; stop fading
0022C0 AB00           05478          BTFSS  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
0022C2 D???           05479          BRA    END_FADE_6
0022C4 8D00           05480          BSF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   
0022C6 D???           05481          BRA    END_FADE_6
                      05482 
0022C8                05483 TRY_DOWN_6:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0022C8 0104           05484          BANKSEL SSR_DATA_BANK
0022CA AD00           05485          BTFSS  SSR_00_FLAGS+6,     FADE_DOWN, BANKED
0022CC D???           05486          BRA    END_FADE_6
0022CE 2F00           05487          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay
0022D0 D???           05488          BRA    END_FADE_6
0022D2 C??? F???      05489          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6; reset delay
0022D6 5100           05490          MOVF   SSR_00_STEP+6,     W, BANKED
0022D8 5F00           05491          SUBWF  SSR_00_VALUE+6,     F, BANKED
0022DA E2??           05492          BC     END_FADE_6
0022DC 6B00           05493          CLRF   SSR_00_VALUE+6,     BANKED              ; reached min value
0022DE 9D00           05494          BCF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   ; stop fading
0022E0 BB00           05495          BTFSC  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
0022E2 8F00           05496          BSF    SSR_00_FLAGS+6,     FADE_UP, BANKED
0022E4 B900           05497          BTFSC  SSR_00_FLAGS+6,     MAX_OFF_TIME, BANKED; maximizing off-time?
0022E6 6900           05498          SETF   SSR_00_COUNTER+6,     BANKED
                      05499 
0022E8                05500 END_FADE_6:
  00000007            05501 X        ++
0022E8 1D00           05448          COMF   SSR_00_VALUE+7,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0022EA E1??           05450          BNZ    UPDATE_MIN_DIMMED_7
                      05451          IF X <= OUTPUT_CHAN_MAX
0022EC 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0022EE D???           05454          BRA    UPDATE_MIN_SKIP_7
                      05455 
0022F0                05456 UPDATE_MIN_DIMMED_7:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0022F0 988A           05458           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+7,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0022F2                05465 UPDATE_MIN_SKIP_7:
                      05466 
0022F2 0104           05467          BANKSEL SSR_DATA_BANK
0022F4 AF00           05468          BTFSS  SSR_00_FLAGS+7,     FADE_UP, BANKED
0022F6 D???           05469          BRA    TRY_DOWN_7
0022F8 2F00           05470          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay to next step
0022FA D???           05471          BRA    END_FADE_7
0022FC C??? F???      05472          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7
002300 5100           05473          MOVF   SSR_00_STEP+7,     W, BANKED
002302 2700           05474          ADDWF  SSR_00_VALUE+7,     F, BANKED
002304 E3??           05475          BNC    END_FADE_7
002306 6900           05476          SETF   SSR_00_VALUE+7,     BANKED              ; reached max value
002308 9F00           05477          BCF    SSR_00_FLAGS+7,     FADE_UP, BANKED     ; stop fading
00230A AB00           05478          BTFSS  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
00230C D???           05479          BRA    END_FADE_7
00230E 8D00           05480          BSF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   
002310 D???           05481          BRA    END_FADE_7
                      05482 
002312                05483 TRY_DOWN_7:
002312 0104           05484          BANKSEL SSR_DATA_BANK
002314 AD00           05485          BTFSS  SSR_00_FLAGS+7,     FADE_DOWN, BANKED
002316 D???           05486          BRA    END_FADE_7
002318 2F00           05487          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay
00231A D???           05488          BRA    END_FADE_7
00231C C??? F???      05489          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7; reset delay
002320 5100           05490          MOVF   SSR_00_STEP+7,     W, BANKED
002322 5F00           05491          SUBWF  SSR_00_VALUE+7,     F, BANKED
002324 E2??           05492          BC     END_FADE_7
002326 6B00           05493          CLRF   SSR_00_VALUE+7,     BANKED              ; reached min value
002328 9D00           05494          BCF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   ; stop fading
00232A BB00           05495          BTFSC  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
00232C 8F00           05496          BSF    SSR_00_FLAGS+7,     FADE_UP, BANKED
00232E B900           05497          BTFSC  SSR_00_FLAGS+7,     MAX_OFF_TIME, BANKED; maximizing off-time?
002330 6900           05498          SETF   SSR_00_COUNTER+7,     BANKED
                      05499 
002332                05500 END_FADE_7:
  00000008            05501 X        ++
002332 1D00           05448          COMF   SSR_00_VALUE+8,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
002334 E1??           05450          BNZ    UPDATE_MIN_DIMMED_8
                      05451          IF X <= OUTPUT_CHAN_MAX
002336 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002338 D???           05454          BRA    UPDATE_MIN_SKIP_8
                      05455 
00233A                05456 UPDATE_MIN_DIMMED_8:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00233A 968A           05458           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+8,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
00233C                05465 UPDATE_MIN_SKIP_8:
                      05466 
00233C 0104           05467          BANKSEL SSR_DATA_BANK
00233E AF00           05468          BTFSS  SSR_00_FLAGS+8,     FADE_UP, BANKED
002340 D???           05469          BRA    TRY_DOWN_8
002342 2F00           05470          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay to next step
002344 D???           05471          BRA    END_FADE_8
002346 C??? F???      05472          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8
00234A 5100           05473          MOVF   SSR_00_STEP+8,     W, BANKED
00234C 2700           05474          ADDWF  SSR_00_VALUE+8,     F, BANKED
00234E E3??           05475          BNC    END_FADE_8
002350 6900           05476          SETF   SSR_00_VALUE+8,     BANKED              ; reached max value
002352 9F00           05477          BCF    SSR_00_FLAGS+8,     FADE_UP, BANKED     ; stop fading
002354 AB00           05478          BTFSS  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
002356 D???           05479          BRA    END_FADE_8
002358 8D00           05480          BSF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   
00235A D???           05481          BRA    END_FADE_8
                      05482 
00235C                05483 TRY_DOWN_8:
00235C 0104           05484          BANKSEL SSR_DATA_BANK
00235E AD00           05485          BTFSS  SSR_00_FLAGS+8,     FADE_DOWN, BANKED
002360 D???           05486          BRA    END_FADE_8
002362 2F00           05487          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay
002364 D???           05488          BRA    END_FADE_8
002366 C??? F???      05489          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8; reset delay
00236A 5100           05490          MOVF   SSR_00_STEP+8,     W, BANKED
00236C 5F00           05491          SUBWF  SSR_00_VALUE+8,     F, BANKED
00236E E2??           05492          BC     END_FADE_8
002370 6B00           05493          CLRF   SSR_00_VALUE+8,     BANKED              ; reached min value
002372 9D00           05494          BCF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   ; stop fading
002374 BB00           05495          BTFSC  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
002376 8F00           05496          BSF    SSR_00_FLAGS+8,     FADE_UP, BANKED
002378 B900           05497          BTFSC  SSR_00_FLAGS+8,     MAX_OFF_TIME, BANKED; maximizing off-time?
00237A 6900           05498          SETF   SSR_00_COUNTER+8,     BANKED
                      05499 
00237C                05500 END_FADE_8:
  00000009            05501 X        ++
00237C 1D00           05448          COMF   SSR_00_VALUE+9,     W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
00237E E1??           05450          BNZ    UPDATE_MIN_DIMMED_9
                      05451          IF X <= OUTPUT_CHAN_MAX
002380 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
002382 D???           05454          BRA    UPDATE_MIN_SKIP_9
                      05455 
002384                05456 UPDATE_MIN_DIMMED_9:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002384 948A           05458           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+9,     BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
002386                05465 UPDATE_MIN_SKIP_9:
                      05466 
002386 0104           05467          BANKSEL SSR_DATA_BANK
002388 AF00           05468          BTFSS  SSR_00_FLAGS+9,     FADE_UP, BANKED
00238A D???           05469          BRA    TRY_DOWN_9
00238C 2F00           05470          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay to next step
00238E D???           05471          BRA    END_FADE_9
002390 C??? F???      05472          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9
002394 5100           05473          MOVF   SSR_00_STEP+9,     W, BANKED
002396 2700           05474          ADDWF  SSR_00_VALUE+9,     F, BANKED
002398 E3??           05475          BNC    END_FADE_9
00239A 6900           05476          SETF   SSR_00_VALUE+9,     BANKED              ; reached max value
00239C 9F00           05477          BCF    SSR_00_FLAGS+9,     FADE_UP, BANKED     ; stop fading
00239E AB00           05478          BTFSS  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0023A0 D???           05479          BRA    END_FADE_9
0023A2 8D00           05480          BSF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   
0023A4 D???           05481          BRA    END_FADE_9
                      05482 
0023A6                05483 TRY_DOWN_9:
0023A6 0104           05484          BANKSEL SSR_DATA_BANK
0023A8 AD00           05485          BTFSS  SSR_00_FLAGS+9,     FADE_DOWN, BANKED
0023AA D???           05486          BRA    END_FADE_9
0023AC 2F00           05487          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay
0023AE D???           05488          BRA    END_FADE_9
0023B0 C??? F???      05489          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9; reset delay
0023B4 5100           05490          MOVF   SSR_00_STEP+9,     W, BANKED
0023B6 5F00           05491          SUBWF  SSR_00_VALUE+9,     F, BANKED
0023B8 E2??           05492          BC     END_FADE_9
0023BA 6B00           05493          CLRF   SSR_00_VALUE+9,     BANKED              ; reached min value
0023BC 9D00           05494          BCF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   ; stop fading
0023BE BB00           05495          BTFSC  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
0023C0 8F00           05496          BSF    SSR_00_FLAGS+9,     FADE_UP, BANKED
0023C2 B900           05497          BTFSC  SSR_00_FLAGS+9,     MAX_OFF_TIME, BANKED; maximizing off-time?
0023C4 6900           05498          SETF   SSR_00_COUNTER+9,     BANKED
                      05499 
0023C6                05500 END_FADE_9:
  0000000A            05501 X        ++
0023C6 1D00           05448          COMF   SSR_00_VALUE+10,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0023C8 E1??           05450          BNZ    UPDATE_MIN_DIMMED_10
                      05451          IF X <= OUTPUT_CHAN_MAX
0023CA 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0023CC D???           05454          BRA    UPDATE_MIN_SKIP_10
                      05455 
0023CE                05456 UPDATE_MIN_DIMMED_10:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0023CE 928A           05458           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+10,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0023D0                05465 UPDATE_MIN_SKIP_10:
                      05466 
0023D0 0104           05467          BANKSEL SSR_DATA_BANK
0023D2 AF00           05468          BTFSS  SSR_00_FLAGS+10,    FADE_UP, BANKED
0023D4 D???           05469          BRA    TRY_DOWN_10
0023D6 2F00           05470          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay to next step
0023D8 D???           05471          BRA    END_FADE_10
0023DA C??? F???      05472          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10
0023DE 5100           05473          MOVF   SSR_00_STEP+10,    W, BANKED
0023E0 2700           05474          ADDWF  SSR_00_VALUE+10,    F, BANKED
0023E2 E3??           05475          BNC    END_FADE_10
0023E4 6900           05476          SETF   SSR_00_VALUE+10,    BANKED              ; reached max value
0023E6 9F00           05477          BCF    SSR_00_FLAGS+10,    FADE_UP, BANKED     ; stop fading
0023E8 AB00           05478          BTFSS  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
0023EA D???           05479          BRA    END_FADE_10
0023EC 8D00           05480          BSF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   
0023EE D???           05481          BRA    END_FADE_10
                      05482 
0023F0                05483 TRY_DOWN_10:
0023F0 0104           05484          BANKSEL SSR_DATA_BANK
0023F2 AD00           05485          BTFSS  SSR_00_FLAGS+10,    FADE_DOWN, BANKED
0023F4 D???           05486          BRA    END_FADE_10
0023F6 2F00           05487          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay
0023F8 D???           05488          BRA    END_FADE_10
0023FA C??? F???      05489          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10; reset delay
0023FE 5100           05490          MOVF   SSR_00_STEP+10,    W, BANKED
002400 5F00           05491          SUBWF  SSR_00_VALUE+10,    F, BANKED
002402 E2??           05492          BC     END_FADE_10
002404 6B00           05493          CLRF   SSR_00_VALUE+10,    BANKED              ; reached min value
002406 9D00           05494          BCF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   ; stop fading
002408 BB00           05495          BTFSC  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
00240A 8F00           05496          BSF    SSR_00_FLAGS+10,    FADE_UP, BANKED
00240C B900           05497          BTFSC  SSR_00_FLAGS+10,    MAX_OFF_TIME, BANKED; maximizing off-time?
00240E 6900           05498          SETF   SSR_00_COUNTER+10,    BANKED
                      05499 
002410                05500 END_FADE_10:
  0000000B            05501 X        ++
002410 1D00           05448          COMF   SSR_00_VALUE+11,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002412 E1??           05450          BNZ    UPDATE_MIN_DIMMED_11
                      05451          IF X <= OUTPUT_CHAN_MAX
002414 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
002416 D???           05454          BRA    UPDATE_MIN_SKIP_11
                      05455 
002418                05456 UPDATE_MIN_DIMMED_11:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002418 908D           05458           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+11,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
00241A                05465 UPDATE_MIN_SKIP_11:
                      05466 
00241A 0104           05467          BANKSEL SSR_DATA_BANK
00241C AF00           05468          BTFSS  SSR_00_FLAGS+11,    FADE_UP, BANKED
00241E D???           05469          BRA    TRY_DOWN_11
002420 2F00           05470          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay to next step
002422 D???           05471          BRA    END_FADE_11
002424 C??? F???      05472          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11
002428 5100           05473          MOVF   SSR_00_STEP+11,    W, BANKED
00242A 2700           05474          ADDWF  SSR_00_VALUE+11,    F, BANKED
00242C E3??           05475          BNC    END_FADE_11
00242E 6900           05476          SETF   SSR_00_VALUE+11,    BANKED              ; reached max value
002430 9F00           05477          BCF    SSR_00_FLAGS+11,    FADE_UP, BANKED     ; stop fading
002432 AB00           05478          BTFSS  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
002434 D???           05479          BRA    END_FADE_11
002436 8D00           05480          BSF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   
002438 D???           05481          BRA    END_FADE_11
                      05482 
00243A                05483 TRY_DOWN_11:
00243A 0104           05484          BANKSEL SSR_DATA_BANK
00243C AD00           05485          BTFSS  SSR_00_FLAGS+11,    FADE_DOWN, BANKED
00243E D???           05486          BRA    END_FADE_11
002440 2F00           05487          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay
002442 D???           05488          BRA    END_FADE_11
002444 C??? F???      05489          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11; reset delay
002448 5100           05490          MOVF   SSR_00_STEP+11,    W, BANKED
00244A 5F00           05491          SUBWF  SSR_00_VALUE+11,    F, BANKED
00244C E2??           05492          BC     END_FADE_11
00244E 6B00           05493          CLRF   SSR_00_VALUE+11,    BANKED              ; reached min value
002450 9D00           05494          BCF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   ; stop fading
002452 BB00           05495          BTFSC  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
002454 8F00           05496          BSF    SSR_00_FLAGS+11,    FADE_UP, BANKED
002456 B900           05497          BTFSC  SSR_00_FLAGS+11,    MAX_OFF_TIME, BANKED; maximizing off-time?
002458 6900           05498          SETF   SSR_00_COUNTER+11,    BANKED
                      05499 
00245A                05500 END_FADE_11:
  0000000C            05501 X        ++
00245A 1D00           05448          COMF   SSR_00_VALUE+12,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
00245C E1??           05450          BNZ    UPDATE_MIN_DIMMED_12
                      05451          IF X <= OUTPUT_CHAN_MAX
00245E 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
002460 D???           05454          BRA    UPDATE_MIN_SKIP_12
                      05455 
002462                05456 UPDATE_MIN_DIMMED_12:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002462 9E8C           05458           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+12,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
002464                05465 UPDATE_MIN_SKIP_12:
                      05466 
002464 0104           05467          BANKSEL SSR_DATA_BANK
002466 AF00           05468          BTFSS  SSR_00_FLAGS+12,    FADE_UP, BANKED
002468 D???           05469          BRA    TRY_DOWN_12
00246A 2F00           05470          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay to next step
00246C D???           05471          BRA    END_FADE_12
00246E C??? F???      05472          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12
002472 5100           05473          MOVF   SSR_00_STEP+12,    W, BANKED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002474 2700           05474          ADDWF  SSR_00_VALUE+12,    F, BANKED
002476 E3??           05475          BNC    END_FADE_12
002478 6900           05476          SETF   SSR_00_VALUE+12,    BANKED              ; reached max value
00247A 9F00           05477          BCF    SSR_00_FLAGS+12,    FADE_UP, BANKED     ; stop fading
00247C AB00           05478          BTFSS  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
00247E D???           05479          BRA    END_FADE_12
002480 8D00           05480          BSF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   
002482 D???           05481          BRA    END_FADE_12
                      05482 
002484                05483 TRY_DOWN_12:
002484 0104           05484          BANKSEL SSR_DATA_BANK
002486 AD00           05485          BTFSS  SSR_00_FLAGS+12,    FADE_DOWN, BANKED
002488 D???           05486          BRA    END_FADE_12
00248A 2F00           05487          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay
00248C D???           05488          BRA    END_FADE_12
00248E C??? F???      05489          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12; reset delay
002492 5100           05490          MOVF   SSR_00_STEP+12,    W, BANKED
002494 5F00           05491          SUBWF  SSR_00_VALUE+12,    F, BANKED
002496 E2??           05492          BC     END_FADE_12
002498 6B00           05493          CLRF   SSR_00_VALUE+12,    BANKED              ; reached min value
00249A 9D00           05494          BCF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   ; stop fading
00249C BB00           05495          BTFSC  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
00249E 8F00           05496          BSF    SSR_00_FLAGS+12,    FADE_UP, BANKED
0024A0 B900           05497          BTFSC  SSR_00_FLAGS+12,    MAX_OFF_TIME, BANKED; maximizing off-time?
0024A2 6900           05498          SETF   SSR_00_COUNTER+12,    BANKED
                      05499 
0024A4                05500 END_FADE_12:
  0000000D            05501 X        ++
0024A4 1D00           05448          COMF   SSR_00_VALUE+13,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0024A6 E1??           05450          BNZ    UPDATE_MIN_DIMMED_13
                      05451          IF X <= OUTPUT_CHAN_MAX
0024A8 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0024AA D???           05454          BRA    UPDATE_MIN_SKIP_13
                      05455 
0024AC                05456 UPDATE_MIN_DIMMED_13:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0024AC 9C8C           05458           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+13,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0024AE                05465 UPDATE_MIN_SKIP_13:
                      05466 
0024AE 0104           05467          BANKSEL SSR_DATA_BANK
0024B0 AF00           05468          BTFSS  SSR_00_FLAGS+13,    FADE_UP, BANKED
0024B2 D???           05469          BRA    TRY_DOWN_13
0024B4 2F00           05470          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay to next step
0024B6 D???           05471          BRA    END_FADE_13
0024B8 C??? F???      05472          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13
0024BC 5100           05473          MOVF   SSR_00_STEP+13,    W, BANKED
0024BE 2700           05474          ADDWF  SSR_00_VALUE+13,    F, BANKED
0024C0 E3??           05475          BNC    END_FADE_13
0024C2 6900           05476          SETF   SSR_00_VALUE+13,    BANKED              ; reached max value
0024C4 9F00           05477          BCF    SSR_00_FLAGS+13,    FADE_UP, BANKED     ; stop fading
0024C6 AB00           05478          BTFSS  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
0024C8 D???           05479          BRA    END_FADE_13
0024CA 8D00           05480          BSF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   
0024CC D???           05481          BRA    END_FADE_13
                      05482 
0024CE                05483 TRY_DOWN_13:
0024CE 0104           05484          BANKSEL SSR_DATA_BANK
0024D0 AD00           05485          BTFSS  SSR_00_FLAGS+13,    FADE_DOWN, BANKED
0024D2 D???           05486          BRA    END_FADE_13
0024D4 2F00           05487          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay
0024D6 D???           05488          BRA    END_FADE_13
0024D8 C??? F???      05489          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13; reset delay
0024DC 5100           05490          MOVF   SSR_00_STEP+13,    W, BANKED
0024DE 5F00           05491          SUBWF  SSR_00_VALUE+13,    F, BANKED
0024E0 E2??           05492          BC     END_FADE_13
0024E2 6B00           05493          CLRF   SSR_00_VALUE+13,    BANKED              ; reached min value
0024E4 9D00           05494          BCF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   ; stop fading
0024E6 BB00           05495          BTFSC  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
0024E8 8F00           05496          BSF    SSR_00_FLAGS+13,    FADE_UP, BANKED
0024EA B900           05497          BTFSC  SSR_00_FLAGS+13,    MAX_OFF_TIME, BANKED; maximizing off-time?
0024EC 6900           05498          SETF   SSR_00_COUNTER+13,    BANKED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05499 
0024EE                05500 END_FADE_13:
  0000000E            05501 X        ++
0024EE 1D00           05448          COMF   SSR_00_VALUE+14,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0024F0 E1??           05450          BNZ    UPDATE_MIN_DIMMED_14
                      05451          IF X <= OUTPUT_CHAN_MAX
0024F2 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0024F4 D???           05454          BRA    UPDATE_MIN_SKIP_14
                      05455 
0024F6                05456 UPDATE_MIN_DIMMED_14:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0024F6 9A8C           05458           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+14,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0024F8                05465 UPDATE_MIN_SKIP_14:
                      05466 
0024F8 0104           05467          BANKSEL SSR_DATA_BANK
0024FA AF00           05468          BTFSS  SSR_00_FLAGS+14,    FADE_UP, BANKED
0024FC D???           05469          BRA    TRY_DOWN_14
0024FE 2F00           05470          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay to next step
002500 D???           05471          BRA    END_FADE_14
002502 C??? F???      05472          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14
002506 5100           05473          MOVF   SSR_00_STEP+14,    W, BANKED
002508 2700           05474          ADDWF  SSR_00_VALUE+14,    F, BANKED
00250A E3??           05475          BNC    END_FADE_14
00250C 6900           05476          SETF   SSR_00_VALUE+14,    BANKED              ; reached max value
00250E 9F00           05477          BCF    SSR_00_FLAGS+14,    FADE_UP, BANKED     ; stop fading
002510 AB00           05478          BTFSS  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
002512 D???           05479          BRA    END_FADE_14
002514 8D00           05480          BSF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   
002516 D???           05481          BRA    END_FADE_14
                      05482 
002518                05483 TRY_DOWN_14:
002518 0104           05484          BANKSEL SSR_DATA_BANK
00251A AD00           05485          BTFSS  SSR_00_FLAGS+14,    FADE_DOWN, BANKED
00251C D???           05486          BRA    END_FADE_14
00251E 2F00           05487          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay
002520 D???           05488          BRA    END_FADE_14
002522 C??? F???      05489          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14; reset delay
002526 5100           05490          MOVF   SSR_00_STEP+14,    W, BANKED
002528 5F00           05491          SUBWF  SSR_00_VALUE+14,    F, BANKED
00252A E2??           05492          BC     END_FADE_14
00252C 6B00           05493          CLRF   SSR_00_VALUE+14,    BANKED              ; reached min value
00252E 9D00           05494          BCF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   ; stop fading
002530 BB00           05495          BTFSC  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
002532 8F00           05496          BSF    SSR_00_FLAGS+14,    FADE_UP, BANKED
002534 B900           05497          BTFSC  SSR_00_FLAGS+14,    MAX_OFF_TIME, BANKED; maximizing off-time?
002536 6900           05498          SETF   SSR_00_COUNTER+14,    BANKED
                      05499 
002538                05500 END_FADE_14:
  0000000F            05501 X        ++
002538 1D00           05448          COMF   SSR_00_VALUE+15,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
00253A E1??           05450          BNZ    UPDATE_MIN_DIMMED_15
                      05451          IF X <= OUTPUT_CHAN_MAX
00253C 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
00253E D???           05454          BRA    UPDATE_MIN_SKIP_15
                      05455 
002540                05456 UPDATE_MIN_DIMMED_15:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002540 928D           05458           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+15,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
002542                05465 UPDATE_MIN_SKIP_15:
                      05466 
002542 0104           05467          BANKSEL SSR_DATA_BANK
002544 AF00           05468          BTFSS  SSR_00_FLAGS+15,    FADE_UP, BANKED
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002546 D???           05469          BRA    TRY_DOWN_15
002548 2F00           05470          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay to next step
00254A D???           05471          BRA    END_FADE_15
00254C C??? F???      05472          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15
002550 5100           05473          MOVF   SSR_00_STEP+15,    W, BANKED
002552 2700           05474          ADDWF  SSR_00_VALUE+15,    F, BANKED
002554 E3??           05475          BNC    END_FADE_15
002556 6900           05476          SETF   SSR_00_VALUE+15,    BANKED              ; reached max value
002558 9F00           05477          BCF    SSR_00_FLAGS+15,    FADE_UP, BANKED     ; stop fading
00255A AB00           05478          BTFSS  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
00255C D???           05479          BRA    END_FADE_15
00255E 8D00           05480          BSF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   
002560 D???           05481          BRA    END_FADE_15
                      05482 
002562                05483 TRY_DOWN_15:
002562 0104           05484          BANKSEL SSR_DATA_BANK
002564 AD00           05485          BTFSS  SSR_00_FLAGS+15,    FADE_DOWN, BANKED
002566 D???           05486          BRA    END_FADE_15
002568 2F00           05487          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay
00256A D???           05488          BRA    END_FADE_15
00256C C??? F???      05489          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15; reset delay
002570 5100           05490          MOVF   SSR_00_STEP+15,    W, BANKED
002572 5F00           05491          SUBWF  SSR_00_VALUE+15,    F, BANKED
002574 E2??           05492          BC     END_FADE_15
002576 6B00           05493          CLRF   SSR_00_VALUE+15,    BANKED              ; reached min value
002578 9D00           05494          BCF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   ; stop fading
00257A BB00           05495          BTFSC  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
00257C 8F00           05496          BSF    SSR_00_FLAGS+15,    FADE_UP, BANKED
00257E B900           05497          BTFSC  SSR_00_FLAGS+15,    MAX_OFF_TIME, BANKED; maximizing off-time?
002580 6900           05498          SETF   SSR_00_COUNTER+15,    BANKED
                      05499 
002582                05500 END_FADE_15:
  00000010            05501 X        ++
002582 1D00           05448          COMF   SSR_00_VALUE+16,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
002584 E1??           05450          BNZ    UPDATE_MIN_DIMMED_16
                      05451          IF X <= OUTPUT_CHAN_MAX
002586 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
002588 D???           05454          BRA    UPDATE_MIN_SKIP_16
                      05455 
00258A                05456 UPDATE_MIN_DIMMED_16:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00258A 908A           05458           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+16,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
00258C                05465 UPDATE_MIN_SKIP_16:
                      05466 
00258C 0104           05467          BANKSEL SSR_DATA_BANK
00258E AF00           05468          BTFSS  SSR_00_FLAGS+16,    FADE_UP, BANKED
002590 D???           05469          BRA    TRY_DOWN_16
002592 2F00           05470          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay to next step
002594 D???           05471          BRA    END_FADE_16
002596 C??? F???      05472          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16
00259A 5100           05473          MOVF   SSR_00_STEP+16,    W, BANKED
00259C 2700           05474          ADDWF  SSR_00_VALUE+16,    F, BANKED
00259E E3??           05475          BNC    END_FADE_16
0025A0 6900           05476          SETF   SSR_00_VALUE+16,    BANKED              ; reached max value
0025A2 9F00           05477          BCF    SSR_00_FLAGS+16,    FADE_UP, BANKED     ; stop fading
0025A4 AB00           05478          BTFSS  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
0025A6 D???           05479          BRA    END_FADE_16
0025A8 8D00           05480          BSF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   
0025AA D???           05481          BRA    END_FADE_16
                      05482 
0025AC                05483 TRY_DOWN_16:
0025AC 0104           05484          BANKSEL SSR_DATA_BANK
0025AE AD00           05485          BTFSS  SSR_00_FLAGS+16,    FADE_DOWN, BANKED
0025B0 D???           05486          BRA    END_FADE_16
0025B2 2F00           05487          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay
0025B4 D???           05488          BRA    END_FADE_16
0025B6 C??? F???      05489          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16; reset delay
0025BA 5100           05490          MOVF   SSR_00_STEP+16,    W, BANKED
0025BC 5F00           05491          SUBWF  SSR_00_VALUE+16,    F, BANKED
0025BE E2??           05492          BC     END_FADE_16
0025C0 6B00           05493          CLRF   SSR_00_VALUE+16,    BANKED              ; reached min value
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0025C2 9D00           05494          BCF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   ; stop fading
0025C4 BB00           05495          BTFSC  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
0025C6 8F00           05496          BSF    SSR_00_FLAGS+16,    FADE_UP, BANKED
0025C8 B900           05497          BTFSC  SSR_00_FLAGS+16,    MAX_OFF_TIME, BANKED; maximizing off-time?
0025CA 6900           05498          SETF   SSR_00_COUNTER+16,    BANKED
                      05499 
0025CC                05500 END_FADE_16:
  00000011            05501 X        ++
0025CC 1D00           05448          COMF   SSR_00_VALUE+17,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
0025CE E1??           05450          BNZ    UPDATE_MIN_DIMMED_17
                      05451          IF X <= OUTPUT_CHAN_MAX
0025D0 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
0025D2 D???           05454          BRA    UPDATE_MIN_SKIP_17
                      05455 
0025D4                05456 UPDATE_MIN_DIMMED_17:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0025D4 968C           05458           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+17,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
0025D6                05465 UPDATE_MIN_SKIP_17:
                      05466 
0025D6 0104           05467          BANKSEL SSR_DATA_BANK
0025D8 AF00           05468          BTFSS  SSR_00_FLAGS+17,    FADE_UP, BANKED
0025DA D???           05469          BRA    TRY_DOWN_17
0025DC 2F00           05470          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay to next step
0025DE D???           05471          BRA    END_FADE_17
0025E0 C??? F???      05472          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17
0025E4 5100           05473          MOVF   SSR_00_STEP+17,    W, BANKED
0025E6 2700           05474          ADDWF  SSR_00_VALUE+17,    F, BANKED
0025E8 E3??           05475          BNC    END_FADE_17
0025EA 6900           05476          SETF   SSR_00_VALUE+17,    BANKED              ; reached max value
0025EC 9F00           05477          BCF    SSR_00_FLAGS+17,    FADE_UP, BANKED     ; stop fading
0025EE AB00           05478          BTFSS  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
0025F0 D???           05479          BRA    END_FADE_17
0025F2 8D00           05480          BSF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   
0025F4 D???           05481          BRA    END_FADE_17
                      05482 
0025F6                05483 TRY_DOWN_17:
0025F6 0104           05484          BANKSEL SSR_DATA_BANK
0025F8 AD00           05485          BTFSS  SSR_00_FLAGS+17,    FADE_DOWN, BANKED
0025FA D???           05486          BRA    END_FADE_17
0025FC 2F00           05487          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay
0025FE D???           05488          BRA    END_FADE_17
002600 C??? F???      05489          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17; reset delay
002604 5100           05490          MOVF   SSR_00_STEP+17,    W, BANKED
002606 5F00           05491          SUBWF  SSR_00_VALUE+17,    F, BANKED
002608 E2??           05492          BC     END_FADE_17
00260A 6B00           05493          CLRF   SSR_00_VALUE+17,    BANKED              ; reached min value
00260C 9D00           05494          BCF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   ; stop fading
00260E BB00           05495          BTFSC  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
002610 8F00           05496          BSF    SSR_00_FLAGS+17,    FADE_UP, BANKED
002612 B900           05497          BTFSC  SSR_00_FLAGS+17,    MAX_OFF_TIME, BANKED; maximizing off-time?
002614 6900           05498          SETF   SSR_00_COUNTER+17,    BANKED
                      05499 
002616                05500 END_FADE_17:
  00000012            05501 X        ++
002616 1D00           05448          COMF   SSR_00_VALUE+18,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
002618 E1??           05450          BNZ    UPDATE_MIN_DIMMED_18
                      05451          IF X <= OUTPUT_CHAN_MAX
00261A 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
00261C D???           05454          BRA    UPDATE_MIN_SKIP_18
                      05455 
00261E                05456 UPDATE_MIN_DIMMED_18:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00261E 928C           05458           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+18,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05464          ENDIF
002620                05465 UPDATE_MIN_SKIP_18:
                      05466 
002620 0104           05467          BANKSEL SSR_DATA_BANK
002622 AF00           05468          BTFSS  SSR_00_FLAGS+18,    FADE_UP, BANKED
002624 D???           05469          BRA    TRY_DOWN_18
002626 2F00           05470          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay to next step
002628 D???           05471          BRA    END_FADE_18
00262A C??? F???      05472          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18
00262E 5100           05473          MOVF   SSR_00_STEP+18,    W, BANKED
002630 2700           05474          ADDWF  SSR_00_VALUE+18,    F, BANKED
002632 E3??           05475          BNC    END_FADE_18
002634 6900           05476          SETF   SSR_00_VALUE+18,    BANKED              ; reached max value
002636 9F00           05477          BCF    SSR_00_FLAGS+18,    FADE_UP, BANKED     ; stop fading
002638 AB00           05478          BTFSS  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
00263A D???           05479          BRA    END_FADE_18
00263C 8D00           05480          BSF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   
00263E D???           05481          BRA    END_FADE_18
                      05482 
002640                05483 TRY_DOWN_18:
002640 0104           05484          BANKSEL SSR_DATA_BANK
002642 AD00           05485          BTFSS  SSR_00_FLAGS+18,    FADE_DOWN, BANKED
002644 D???           05486          BRA    END_FADE_18
002646 2F00           05487          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay
002648 D???           05488          BRA    END_FADE_18
00264A C??? F???      05489          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18; reset delay
00264E 5100           05490          MOVF   SSR_00_STEP+18,    W, BANKED
002650 5F00           05491          SUBWF  SSR_00_VALUE+18,    F, BANKED
002652 E2??           05492          BC     END_FADE_18
002654 6B00           05493          CLRF   SSR_00_VALUE+18,    BANKED              ; reached min value
002656 9D00           05494          BCF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   ; stop fading
002658 BB00           05495          BTFSC  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
00265A 8F00           05496          BSF    SSR_00_FLAGS+18,    FADE_UP, BANKED
00265C B900           05497          BTFSC  SSR_00_FLAGS+18,    MAX_OFF_TIME, BANKED; maximizing off-time?
00265E 6900           05498          SETF   SSR_00_COUNTER+18,    BANKED
                      05499 
002660                05500 END_FADE_18:
  00000013            05501 X        ++
002660 1D00           05448          COMF   SSR_00_VALUE+19,    W, BANKED   ; is this set to maximum?
                      05449          ;BZ    UPDATE_MIN_SKIP_#v(X)
002662 E1??           05450          BNZ    UPDATE_MIN_DIMMED_19
                      05451          IF X <= OUTPUT_CHAN_MAX
002664 9800           05452           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05453          ENDIF
002666 D???           05454          BRA    UPDATE_MIN_SKIP_19
                      05455 
002668                05456 UPDATE_MIN_DIMMED_19:
                      05457          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002668 948C           05458           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn off light
                      05459          ELSE
                      05460           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn off SSR
                      05461           BANKSEL SSR_DATA_BANK
                      05462           TSTFSZ SSR_00_VALUE+19,    BANKED     ; is this SSR fully off?
                      05463           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05464          ENDIF
00266A                05465 UPDATE_MIN_SKIP_19:
                      05466 
00266A 0104           05467          BANKSEL SSR_DATA_BANK
00266C AF00           05468          BTFSS  SSR_00_FLAGS+19,    FADE_UP, BANKED
00266E D???           05469          BRA    TRY_DOWN_19
002670 2F00           05470          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay to next step
002672 D???           05471          BRA    END_FADE_19
002674 C??? F???      05472          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19
002678 5100           05473          MOVF   SSR_00_STEP+19,    W, BANKED
00267A 2700           05474          ADDWF  SSR_00_VALUE+19,    F, BANKED
00267C E3??           05475          BNC    END_FADE_19
00267E 6900           05476          SETF   SSR_00_VALUE+19,    BANKED              ; reached max value
002680 9F00           05477          BCF    SSR_00_FLAGS+19,    FADE_UP, BANKED     ; stop fading
002682 AB00           05478          BTFSS  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
002684 D???           05479          BRA    END_FADE_19
002686 8D00           05480          BSF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   
002688 D???           05481          BRA    END_FADE_19
                      05482 
00268A                05483 TRY_DOWN_19:
00268A 0104           05484          BANKSEL SSR_DATA_BANK
00268C AD00           05485          BTFSS  SSR_00_FLAGS+19,    FADE_DOWN, BANKED
00268E D???           05486          BRA    END_FADE_19
002690 2F00           05487          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay
002692 D???           05488          BRA    END_FADE_19
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002694 C??? F???      05489          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19; reset delay
002698 5100           05490          MOVF   SSR_00_STEP+19,    W, BANKED
00269A 5F00           05491          SUBWF  SSR_00_VALUE+19,    F, BANKED
00269C E2??           05492          BC     END_FADE_19
00269E 6B00           05493          CLRF   SSR_00_VALUE+19,    BANKED              ; reached min value
0026A0 9D00           05494          BCF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   ; stop fading
0026A2 BB00           05495          BTFSC  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
0026A4 8F00           05496          BSF    SSR_00_FLAGS+19,    FADE_UP, BANKED
0026A6 B900           05497          BTFSC  SSR_00_FLAGS+19,    MAX_OFF_TIME, BANKED; maximizing off-time?
0026A8 6900           05498          SETF   SSR_00_COUNTER+19,    BANKED
                      05499 
0026AA                05500 END_FADE_19:
  00000014            05501 X        ++
                      05502         ENDW
0026AA 9E00           05503         BCF     SSR_STATE, INCYC, ACCESS        ; shut down slice processing until next ZC
                      05504         ;
                      05505         ; see if we should be asleep
                      05506         ;
0026AC A800           05507         BTFSS   SSR_STATE2, ALL_OFF, ACCESS
0026AE D???           05508         BRA     BE_AWAKE_NOW
0026B0 2E00           05509         DECFSZ  AUTO_OFF_CTRL, F, ACCESS        
0026B2 0012           05510         RETURN
0026B4 6800           05511         SETF    AUTO_OFF_CTRL, ACCESS
0026B6 2E00           05512         DECFSZ  AUTO_OFF_CTRH, F, ACCESS
0026B8 0012           05513         RETURN
                      05514         ; 
                      05515         ; We've been idle too long.  Go to sleep now.
                      05516         ;
0026BA A600           05517         BTFSS   SSR_STATE, SLEEP_MODE, ACCESS
0026BC EC?? F???      05518         CALL    DO_CMD_SLEEP
0026C0 0012           05519         RETURN
                      05520         
0026C2                05521 BE_AWAKE_NOW:
                      05522         ;
                      05523         ; we should be awake.  Make sure we are and reset counters
                      05524         ;
0026C2 B600           05525         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
0026C4 EC?? F???      05526         CALL    DO_CMD_WAKE
0026C8 6800           05527         SETF    AUTO_OFF_CTRH, ACCESS
0026CA 6800           05528         SETF    AUTO_OFF_CTRL, ACCESS
0026CC 0012           05529         RETURN
                      05530 
                      05531 
                      05532 
                      05533 ; DMX512 RECEIVER CODE
                      05534 ; Based on Microchip Application Note AN1076
                      05535 ;
                      05536 
                      05537 ;
                      05538 ; If we have DMX mode running but need to shift to Lumos protocol
                      05539 ; (like entering config mode), we need to reset the baud rate to
                      05540 ; whatever is configured for non-DMX use.
                      05541 ;
                      05542         IF DMX_ENABLED
                      05543 DMX_EXIT_TEMPORARILY:
                      05544         CLRWDT
                      05545         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
                      05546         RETURN
                      05547         BEGIN_EEPROM_READ EE_BAUD
                      05548         READ_EEPROM_DATA_W
                      05549         END_EEPROM_READ
                      05550         IF ROLE_MASTER
                      05551          ; Send F0 72 <baud> 26 -> slave CPU
                      05552          MOVWF  I, ACCESS
                      05553          MOVLW  0xF0
                      05554          CALL   SIO_WRITE_W
                      05555          MOVLW  0x72
                      05556          CALL   SIO_WRITE_W
                      05557          MOVF   I, W, ACCESS
                      05558          CALL   SIO_WRITE_W
                      05559          MOVLW  0x26
                      05560          CALL   SIO_WRITE_W
                      05561          CALL   DRAIN_M_S_TX_BLOCKING
                      05562          MOVF   I, W, ACCESS
                      05563         ENDIF
                      05564         CALL    SIO_SET_BAUD_W
                      05565         BCF     DMX_SLOTH, DMX_SPEED, ACCESS    ; no longer running at DMX speeds
                      05566         RETURN
                      05567 
                      05568 DMX_RESUME:
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05569         CLRWDT
                      05570         BTFSC   DMX_SLOTH, DMX_EN, ACCESS
                      05571         BTFSC   DMX_SLOTH, DMX_SPEED, ACCESS
                      05572         RETURN                                  ; either not using DMX at all or already at speed
                      05573         IF ROLE_MASTER
                      05574          ; Send F0 72 <baud> 26 -> slave CPU
                      05575          MOVLW  0xF0
                      05576          CALL   SIO_WRITE_W
                      05577          MOVLW  0x72
                      05578          CALL   SIO_WRITE_W
                      05579          MOVLW  SIO_250000
                      05580          CALL   SIO_WRITE_W
                      05581          MOVLW  0x26
                      05582          CALL   SIO_WRITE_W
                      05583          CALL   DRAIN_M_S_TX_BLOCKING
                      05584         ENDIF
                      05585         MOVLW   SIO_250000
                      05586         CALL    SIO_SET_BAUD_W
                      05587         BSF     DMX_SLOTH, DMX_SPEED, ACCESS    ; now at DMX speed
                      05588         RETURN
                      05589         
                      05590 ;
                      05591 ; Wait for start of packet
                      05592 ;
                      05593 ;DMX_WAIT_FOR_SYNC:
                      05594 ;       BTFSC   PIR1, RCIF, ACCESS
                      05595 ;       MOVF    RCREG, W, ACCESS        ; throw away received bytes until start of frame
                      05596 ;       BTFSS   RCSTA, FERR, ACCESS     ; wait until frame error
                      05597 ;       BRA     DMX_WAIT_FOR_SYNC
                      05598 ;       MOVF    RCREG, W, ACCESS        ; clear receive buffer
                      05599 ;DMX_WAIT_FOR_START:
                      05600 ;       BTFSS   PIR1, RCIF, ACCESS
                      05601 ;       BRA     DMX_WAIT_FOR_START      ; wait for actual characters to start
                      05602 ;       BTFSC   RCSTA, FERR, ACCESS     ; and break to end
                      05603 ;       BRA     DMX_WAIT_FOR_START
                      05604 ;       MOVF    RCREG, W, ACCESS
                      05605 ;       ANDLW   0xFF                    ; test byte just read, should be 0x00
                      05606 ;       BNZ     DMX_WAIT_FOR_SYNC       ; done here, come back when ready for next packet
                      05607 
                      05608         ; XXX now loop over bytes, aborting on FERR (indicates packet was short)
                      05609         ; or when your data have been received.
                      05610 
                      05611 DMX_RECEIVED_BYTE:
                      05612         CLRWDT
                      05613         ;
                      05614         ; We just got a DMX byte.  IF DMX_FRAME is set, this is supposedly the start of
                      05615         ; a new frame, so any previous frame in progress is aborted.  The state machine
                      05616         ; in DMX mode is simply:
                      05617         ;       00 IDLE;     waiting for start of frame
                      05618         ;       17 DMX_WAIT; waiting for first slot for this device
                      05619         ;       18 DMX_UPD;  updating channels
                      05620         ;
                      05621         BTFSS   DMX_SLOTH, DMX_FRAME, ACCESS
                      05622         BRA     DMX_NOT_FIRST
                      05623         BCF     DMX_SLOTH, DMX_FRAME, ACCESS    ; clear start-of-frame signal
                      05624         ;
                      05625         ; Start of frame
                      05626         ; The first byte received is in WREG.  If this is 0x00, we need to pay
                      05627         ; attention to this frame.  Otherwise, it's something foreign we can ignore.
                      05628         ;
                      05629         TSTFSZ  WREG, ACCESS
                      05630         BRA     DMX_WEIRD_FRAME
                      05631         MOVLW   0x17                            ; start of frame -> state 17
                      05632         MOVWF   YY_STATE, ACCESS
                      05633         MOVFF   DMX_SLOTL, YY_YY                ; YY_COMMAND:YY_YY is the number of slots
                      05634         CLRF    YY_COMMAND, ACCESS              ; to skip before we get to ours
                      05635         BTFSC   DMX_SLOTH, DMX_BIT8, ACCESS
                      05636         BSF     YY_COMMAND, 0, ACCESS
                      05637         RETURN
                      05638 
                      05639 DMX_WEIRD_FRAME:
                      05640         IF HAS_STATUS_LEDS
                      05641          SET_SSR_BLINK_FADE SSR_RED
                      05642         ENDIF
                      05643         CLRF    YY_STATE, ACCESS                ; stay at state 0, wait for next frame.
                      05644         RETURN
                      05645 
                      05646 DMX_NOT_FIRST:
                      05647         MOVWF   YY_DATA, ACCESS                 ; save input byte in YY_DATA
                      05648         MOVLW   0x17                            ; are we at state 17?
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05649         CPFSEQ  YY_STATE, ACCESS
                      05650         BRA     DMX_18
                      05651         ;
                      05652         ; State 17: waiting for our slot to come up
                      05653         ;
                      05654         IF HAS_STATUS_LEDS
                      05655          SET_SSR_BLINK_FADE SSR_YELLOW
                      05656         ENDIF
                      05657         TSTFSZ  YY_YY, ACCESS                   ; count off another slot...
                      05658         BRA     DMX_ST_LSB
                      05659         BTFSS   YY_COMMAND, 0, ACCESS
                      05660         BRA     DMX_SLOT_REACHED
                      05661         BCF     YY_COMMAND, 0, ACCESS           ; borrow 1 and roll over
                      05662 DMX_ST_LSB:
                      05663         DECF    YY_YY, F, ACCESS
                      05664         RETURN
                      05665 
                      05666 DMX_SLOT_REACHED:
                      05667         ;
                      05668         ; We have waited long enough, we're up now!
                      05669         ;
                      05670         INCF    YY_STATE, F, ACCESS             ; move state 17->18 (note YY_YY==0 now)
                      05671 
                      05672 DMX_18:
                      05673         CLRWDT
                      05674         IF HAS_ACTIVE
                      05675          SET_SSR_BLINK_FADE SSR_ACTIVE
                      05676         ENDIF
                      05677         MOVLW   0x18
                      05678         CPFSEQ  YY_STATE, ACCESS
                      05679         BRA     DMX_19
                      05680         ;
                      05681         ; State 18: updating slot value YY_DATA into channel YY_YY.
                      05682         ;
                      05683         MOVFF   YY_DATA, YY_COMMAND
                      05684         MOVFF   YY_YY, YY_DATA
                      05685         INCF    YY_YY, F, ACCESS
                      05686         CALL    XLATE_SSR_ID
                      05687         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
                      05688         BRA     DMX_DONE
                      05689         MOVFF   YY_COMMAND, YY_DATA
                      05690         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
                      05691         BRA     DMX_PASS_DOWN_SET_LVL
                      05692         GOTO    SSR_OUTPUT_VALUE ; TARGET_SSR <- YY_DATA
                      05693 
                      05694 DMX_PASS_DOWN_SET_LVL:
                      05695         IF ROLE_MASTER
                      05696          MOVLW  0xA0
                      05697          CALL   SIO_WRITE_W
                      05698          BCF    TARGET_SSR, 7, ACCESS
                      05699          BCF    TARGET_SSR, 6, ACCESS
                      05700          BCF    STATUS, C, ACCESS
                      05701          RRCF   YY_DATA, F, ACCESS
                      05702          BTFSC  STATUS, C, ACCESS
                      05703          BSF    TARGET_SSR, 6, ACCESS   ; LSB of value
                      05704          MOVF   TARGET_SSR, W, ACCESS
                      05705          SEND_8_BIT_W
                      05706          MOVF   YY_DATA, W, ACCESS
                      05707          SEND_8_BIT_W
                      05708          IF HAS_STATUS_LEDS
                      05709           SET_SSR_BLINK_FADE SSR_YELLOW
                      05710          ENDIF
                      05711          RETURN
                      05712         ELSE
                      05713          ERR_BUG 0x02, ERR_CLASS_IN_VALID
                      05714         ENDIF
                      05715          
                      05716 DMX_DONE:
                      05717         ;
                      05718         ; reached the end of our range of slots
                      05719         ;
                      05720         CLRF    YY_STATE, ACCESS
                      05721         RETURN
                      05722 
                      05723 DMX_19:
                      05724         ;
                      05725         ; unknown state!  Force return to idle state
                      05726         ;
                      05727         CLRF    YY_STATE, ACCESS
                      05728         RETURN
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05729         ENDIF
                      05730         
0026CE                05731 HALT_MODE:
                      05732         ;
                      05733         ; Shut down forever
                      05734         ;
0026CE EC?? F???      05735         CALL    S0_CMD0                 ; blackout SSR outputs
0026D2 9EF2           05736         BCF     INTCON, GIEH, ACCESS            ; disable high-priority interrupts
0026D4 9CF2           05737         BCF     INTCON, GIEL, ACCESS            ; disable low-priority interrupts
                      05738         IF HAS_STATUS_LEDS
                      05739          BSF    PLAT_RED, BIT_RED, ACCESS       ; set only RED light
                      05740          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      05741          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      05742          IF HAS_ACTIVE
                      05743           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      05744          ENDIF
                      05745         ENDIF
0026D6 0E73           05746         MOVLW   b'01110011'                     ; Set oscillator mode for our long slumber
                      05747                 ; 0-------                      ; ~IDLEN enter SLEEP mode, not an idle mode
                      05748                 ; -111----                      ;  IRCF=7 select 8 MHz internal clock speed
                      05749                 ; ------11                      ;  SCS=3 system clock is now internal oscillator
0026D8 6ED3           05750         MOVWF   OSCCON, ACCESS
0026DA 80D1           05751         BSF     WDTCON, SWDTEN, ACCESS          ; make sure WDT is enabled
0026DC                05752 HALT_SLEEP:
0026DC 0004           05753         CLRWDT
0026DE 0003           05754         SLEEP
                      05755         ; when we wake up from WDT, flashes red light briefly
                      05756         IF HAS_STATUS_LEDS
                      05757          BSF    PLAT_RED, BIT_RED, ACCESS
                      05758          CALL   DELAY_1_6_SEC                   ; 1/6 sec
                      05759          BCF    PLAT_RED, BIT_RED, ACCESS
                      05760         ENDIF
0026E0 D???           05761         BRA     HALT_SLEEP
                      05762 
                      05763 
0026E2                05764 TR_ON_DELAY:
0026E2 6800           05765         SETF    TR_I, ACCESS
0026E4 0004           05766 TR_ON_L CLRWDT
0026E6 2E00           05767         DECFSZ  TR_I, F, ACCESS
0026E8 D???           05768         BRA     TR_ON_L
0026EA 0012           05769         RETURN
                      05770 
0026EC                05771 TR_OFF_DELAY:
0026EC D???           05772         BRA     TR_ON_DELAY
                      05773         END
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 154


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABAT                              00000004
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ALL_OFF                           00000004
AN0                               00000000
AN1                               00000001
AN10                              00000000
AN2                               00000002
AN3                               00000003
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
AN8                               00000001
AN9                               00000004
AUTO_OFF_CTRH                     0000001C
AUTO_OFF_CTRL                     0000001D
B0CON                             00000E20
B0D0                              00000E26
B0D00                             00000000
B0D01                             00000001
B0D02                             00000002
B0D03                             00000003
B0D04                             00000004
B0D05                             00000005
B0D06                             00000006
B0D07                             00000007
B0D1                              00000E27
B0D10                             00000000
B0D11                             00000001
B0D12                             00000002
B0D13                             00000003
B0D14                             00000004
B0D15                             00000005
B0D16                             00000006
B0D17                             00000007
B0D2                              00000E28
B0D20                             00000000
B0D21                             00000001
B0D22                             00000002
B0D23                             00000003
B0D24                             00000004
B0D25                             00000005
B0D26                             00000006
B0D27                             00000007
B0D3                              00000E29
B0D30                             00000000
B0D31                             00000001
B0D32                             00000002
B0D33                             00000003
B0D34                             00000004
B0D35                             00000005
B0D36                             00000006
B0D37                             00000007
B0D4                              00000E2A
B0D40                             00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 155


SYMBOL TABLE
  LABEL                             VALUE 

B0D41                             00000001
B0D42                             00000002
B0D43                             00000003
B0D44                             00000004
B0D45                             00000005
B0D46                             00000006
B0D47                             00000007
B0D5                              00000E2B
B0D50                             00000000
B0D51                             00000001
B0D52                             00000002
B0D53                             00000003
B0D54                             00000004
B0D55                             00000005
B0D56                             00000006
B0D57                             00000007
B0D6                              00000E2C
B0D60                             00000000
B0D61                             00000001
B0D62                             00000002
B0D63                             00000003
B0D64                             00000004
B0D65                             00000005
B0D66                             00000006
B0D67                             00000007
B0D7                              00000E2D
B0D70                             00000000
B0D71                             00000001
B0D72                             00000002
B0D73                             00000003
B0D74                             00000004
B0D75                             00000005
B0D76                             00000006
B0D77                             00000007
B0DLC                             00000E25
B0EIDH                            00000E23
B0EIDL                            00000E24
B0IE                              00000002
B0SIDH                            00000E21
B0SIDL                            00000E22
B0TXEN                            00000002
B1CON                             00000E30
B1D0                              00000E36
B1D00                             00000000
B1D01                             00000001
B1D02                             00000002
B1D03                             00000003
B1D04                             00000004
B1D05                             00000005
B1D06                             00000006
B1D07                             00000007
B1D1                              00000E37
B1D10                             00000000
B1D11                             00000001
B1D12                             00000002
B1D13                             00000003
B1D14                             00000004
B1D15                             00000005
B1D16                             00000006
B1D17                             00000007
B1D2                              00000E38
B1D20                             00000000
B1D21                             00000001
B1D22                             00000002
B1D23                             00000003
B1D24                             00000004
B1D25                             00000005
B1D26                             00000006
B1D27                             00000007
B1D3                              00000E39
B1D30                             00000000
B1D31                             00000001
B1D32                             00000002
B1D33                             00000003
B1D34                             00000004
B1D35                             00000005
B1D36                             00000006
B1D37                             00000007
B1D4                              00000E3A
B1D40                             00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 156


SYMBOL TABLE
  LABEL                             VALUE 

B1D41                             00000001
B1D42                             00000002
B1D43                             00000003
B1D44                             00000004
B1D45                             00000005
B1D46                             00000006
B1D47                             00000007
B1D5                              00000E3B
B1D50                             00000000
B1D51                             00000001
B1D52                             00000002
B1D53                             00000003
B1D54                             00000004
B1D55                             00000005
B1D56                             00000006
B1D57                             00000007
B1D6                              00000E3C
B1D60                             00000000
B1D61                             00000001
B1D62                             00000002
B1D63                             00000003
B1D64                             00000004
B1D65                             00000005
B1D66                             00000006
B1D67                             00000007
B1D7                              00000E3D
B1D70                             00000000
B1D71                             00000001
B1D72                             00000002
B1D73                             00000003
B1D74                             00000004
B1D75                             00000005
B1D76                             00000006
B1D77                             00000007
B1DLC                             00000E35
B1EIDH                            00000E33
B1EIDL                            00000E34
B1IE                              00000003
B1SIDH                            00000E31
B1SIDL                            00000E32
B1TXEN                            00000003
B2CON                             00000E40
B2D0                              00000E46
B2D00                             00000000
B2D01                             00000001
B2D02                             00000002
B2D03                             00000003
B2D04                             00000004
B2D05                             00000005
B2D06                             00000006
B2D07                             00000007
B2D1                              00000E47
B2D10                             00000000
B2D11                             00000001
B2D12                             00000002
B2D13                             00000003
B2D14                             00000004
B2D15                             00000005
B2D16                             00000006
B2D17                             00000007
B2D2                              00000E48
B2D20                             00000000
B2D21                             00000001
B2D22                             00000002
B2D23                             00000003
B2D24                             00000004
B2D25                             00000005
B2D26                             00000006
B2D27                             00000007
B2D3                              00000E49
B2D30                             00000000
B2D31                             00000001
B2D32                             00000002
B2D33                             00000003
B2D34                             00000004
B2D35                             00000005
B2D36                             00000006
B2D37                             00000007
B2D4                              00000E4A
B2D40                             00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 157


SYMBOL TABLE
  LABEL                             VALUE 

B2D41                             00000001
B2D42                             00000002
B2D43                             00000003
B2D44                             00000004
B2D45                             00000005
B2D46                             00000006
B2D47                             00000007
B2D5                              00000E4B
B2D50                             00000000
B2D51                             00000001
B2D52                             00000002
B2D53                             00000003
B2D54                             00000004
B2D55                             00000005
B2D56                             00000006
B2D57                             00000007
B2D6                              00000E4C
B2D60                             00000000
B2D61                             00000001
B2D62                             00000002
B2D63                             00000003
B2D64                             00000004
B2D65                             00000005
B2D66                             00000006
B2D67                             00000007
B2D7                              00000E4D
B2D70                             00000000
B2D71                             00000001
B2D72                             00000002
B2D73                             00000003
B2D74                             00000004
B2D75                             00000005
B2D76                             00000006
B2D77                             00000007
B2DLC                             00000E45
B2EIDH                            00000E43
B2EIDL                            00000E44
B2IE                              00000004
B2SIDH                            00000E41
B2SIDL                            00000E42
B2TXEN                            00000004
B32__BCD2ASCII                    00000000
B32__BCD_ASC                      00000000
B32__BIN                          00000000
B32__BIN2BCD                      00000000
B3CON                             00000E50
B3D0                              00000E56
B3D00                             00000000
B3D01                             00000001
B3D02                             00000002
B3D03                             00000003
B3D04                             00000004
B3D05                             00000005
B3D06                             00000006
B3D07                             00000007
B3D1                              00000E57
B3D10                             00000000
B3D11                             00000001
B3D12                             00000002
B3D13                             00000003
B3D14                             00000004
B3D15                             00000005
B3D16                             00000006
B3D17                             00000007
B3D2                              00000E58
B3D20                             00000000
B3D21                             00000001
B3D22                             00000002
B3D23                             00000003
B3D24                             00000004
B3D25                             00000005
B3D26                             00000006
B3D27                             00000007
B3D3                              00000E59
B3D30                             00000000
B3D31                             00000001
B3D32                             00000002
B3D33                             00000003
B3D34                             00000004
B3D35                             00000005
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 158


SYMBOL TABLE
  LABEL                             VALUE 

B3D36                             00000006
B3D37                             00000007
B3D4                              00000E5A
B3D40                             00000000
B3D41                             00000001
B3D42                             00000002
B3D43                             00000003
B3D44                             00000004
B3D45                             00000005
B3D46                             00000006
B3D47                             00000007
B3D5                              00000E5B
B3D50                             00000000
B3D51                             00000001
B3D52                             00000002
B3D53                             00000003
B3D54                             00000004
B3D55                             00000005
B3D56                             00000006
B3D57                             00000007
B3D6                              00000E5C
B3D60                             00000000
B3D61                             00000001
B3D62                             00000002
B3D63                             00000003
B3D64                             00000004
B3D65                             00000005
B3D66                             00000006
B3D67                             00000007
B3D7                              00000E5D
B3D70                             00000000
B3D71                             00000001
B3D72                             00000002
B3D73                             00000003
B3D74                             00000004
B3D75                             00000005
B3D76                             00000006
B3D77                             00000007
B3DLC                             00000E55
B3EIDH                            00000E53
B3EIDL                            00000E54
B3IE                              00000005
B3SIDH                            00000E51
B3SIDL                            00000E52
B3TXEN                            00000005
B46D77                            00000007
B4CON                             00000E60
B4D0                              00000E66
B4D00                             00000000
B4D01                             00000001
B4D02                             00000002
B4D03                             00000003
B4D04                             00000004
B4D05                             00000005
B4D06                             00000006
B4D07                             00000007
B4D1                              00000E67
B4D10                             00000000
B4D11                             00000001
B4D12                             00000002
B4D13                             00000003
B4D14                             00000004
B4D15                             00000005
B4D16                             00000006
B4D17                             00000007
B4D2                              00000E68
B4D20                             00000000
B4D21                             00000001
B4D22                             00000002
B4D23                             00000003
B4D24                             00000004
B4D25                             00000005
B4D26                             00000006
B4D27                             00000007
B4D3                              00000E69
B4D30                             00000000
B4D31                             00000001
B4D32                             00000002
B4D33                             00000003
B4D34                             00000004
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 159


SYMBOL TABLE
  LABEL                             VALUE 

B4D35                             00000005
B4D36                             00000006
B4D37                             00000007
B4D4                              00000E6A
B4D40                             00000000
B4D41                             00000001
B4D42                             00000002
B4D43                             00000003
B4D44                             00000004
B4D45                             00000005
B4D46                             00000006
B4D47                             00000007
B4D5                              00000E6B
B4D50                             00000000
B4D51                             00000001
B4D52                             00000002
B4D53                             00000003
B4D54                             00000004
B4D55                             00000005
B4D56                             00000006
B4D57                             00000007
B4D6                              00000E6C
B4D60                             00000000
B4D61                             00000001
B4D62                             00000002
B4D63                             00000003
B4D64                             00000004
B4D65                             00000005
B4D66                             00000006
B4D67                             00000007
B4D7                              00000E6D
B4D70                             00000000
B4D71                             00000001
B4D72                             00000002
B4D73                             00000003
B4D74                             00000004
B4D75                             00000005
B4D76                             00000006
B4D77                             00000007
B4DLC                             00000E65
B4EIDH                            00000E63
B4EIDL                            00000E64
B4IE                              00000006
B4SIDH                            00000E61
B4SIDL                            00000E62
B4TXEN                            00000006
B57D07                            00000007
B57D23                            00000003
B5CON                             00000E70
B5D0                              00000E76
B5D00                             00000000
B5D01                             00000001
B5D02                             00000002
B5D03                             00000003
B5D04                             00000004
B5D05                             00000005
B5D06                             00000006
B5D07                             00000007
B5D1                              00000E77
B5D10                             00000000
B5D11                             00000001
B5D12                             00000002
B5D13                             00000003
B5D14                             00000004
B5D15                             00000005
B5D16                             00000006
B5D17                             00000007
B5D2                              00000E78
B5D20                             00000000
B5D21                             00000001
B5D22                             00000002
B5D23                             00000003
B5D24                             00000004
B5D25                             00000005
B5D26                             00000006
B5D27                             00000007
B5D3                              00000E79
B5D30                             00000000
B5D31                             00000001
B5D32                             00000002
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 160


SYMBOL TABLE
  LABEL                             VALUE 

B5D33                             00000003
B5D34                             00000004
B5D35                             00000005
B5D36                             00000006
B5D37                             00000007
B5D4                              00000E7A
B5D40                             00000000
B5D41                             00000001
B5D42                             00000002
B5D43                             00000003
B5D44                             00000004
B5D45                             00000005
B5D46                             00000006
B5D47                             00000007
B5D5                              00000E7B
B5D50                             00000000
B5D51                             00000001
B5D52                             00000002
B5D53                             00000003
B5D54                             00000004
B5D55                             00000005
B5D56                             00000006
B5D57                             00000007
B5D6                              00000E7C
B5D60                             00000000
B5D61                             00000001
B5D62                             00000002
B5D63                             00000003
B5D64                             00000004
B5D65                             00000005
B5D66                             00000006
B5D67                             00000007
B5D7                              00000E7D
B5D70                             00000000
B5D71                             00000001
B5D72                             00000002
B5D73                             00000003
B5D74                             00000004
B5D75                             00000005
B5D76                             00000006
B5D77                             00000007
B5DLC                             00000E75
B5EIDH                            00000E73
B5EIDL                            00000E74
B5IE                              00000007
B5SIDH                            00000E71
B5SIDL                            00000E72
B5TXEN                            00000007
BAD_BREAK                         00000812
BANKED                            00000001
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BEGIN_EEPROM_READ                 
BEGIN_EEPROM_WRITE                
BE_AWAKE_NOW                      000026C2
BF                                00000000
BGST                              00000005
BIE0                              00000DFA
BIT_0                             00000002
BIT_1                             00000001
BIT_10                            00000001
BIT_11                            00000000
BIT_12                            00000007
BIT_13                            00000006
BIT_14                            00000005
BIT_15                            00000001
BIT_16                            00000000
BIT_17                            00000003
BIT_18                            00000001
BIT_19                            00000002
BIT_2                             00000000
BIT_3                             00000002
BIT_4                             00000007
BIT_5                             00000006
BIT_6                             00000005
BIT_7                             00000004
BIT_8                             00000003
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 161


SYMBOL TABLE
  LABEL                             VALUE 

BIT_9                             00000002
BIT_FADE_CYCLE                    00000020
BIT_FADE_DOWN                     00000040
BIT_FADE_UP                       00000080
BIT_L0                            00000002
BIT_L1                            00000000
BIT_L2                            00000005
BIT_L3                            00000000
BIT_L4                            00000005
BIT_MAX_OFF_TIME                  00000010
BIT_RX                            00000007
BIT_T_R                           00000003
BIT_X0                            00000003
BIT_X1                            00000001
BIT_X2                            00000004
BIT_X3                            00000004
BIT_X4                            00000004
BOR                               00000000
BRG16                             00000003
BRGCON1                           00000F70
BRGCON2                           00000F71
BRGCON3                           00000F72
BRGH                              00000002
BRP0                              00000000
BRP1                              00000001
BRP2                              00000002
BRP3                              00000003
BRP4                              00000004
BRP5                              00000005
BSEL0                             00000DF8
BSR                               00000FE0
BTN_FLG_ACTIVE                    00000003
BTN_FLG_LCK_ACK                   00000004
BTN_FLG_LOCKED                    00000002
BTN_FLG_MASKED                    00000001
BTN_FLG_PRESSED                   00000000
BTN_IDX_L0                        00000001
BTN_IDX_L1                        00000003
BTN_IDX_L2                        00000005
BTN_IDX_L3                        00000007
BTN_IDX_L4                        00000009
BTN_IDX_X0                        00000000
BTN_IDX_X1                        00000002
BTN_IDX_X2                        00000004
BTN_IDX_X3                        00000006
BTN_IDX_X4                        00000008
BTN_X0_FLAGS                      00000000
BTN_X0_TIME_H                     00000000
BTN_X0_TIME_L                     00000000
BTN_X0_TIME_T                     00000000
BTN_X0_TIME_U                     00000000
C                                 00000000
C1INA                             00000001
C1INB                             00000000
C1INV                             00000004
C1OUT                             00000006
C2INA                             00000003
C2INB                             00000002
C2INV                             00000005
C2OUT                             00000007
CANCAP                            00000004
CANCON                            00000F6F
CANCON_RO0                        00000F5F
CANCON_RO1                        00000F4F
CANCON_RO2                        00000F3F
CANCON_RO3                        00000F2F
CANCON_RO4                        00000E7F
CANCON_RO5                        00000E6F
CANCON_RO6                        00000E5F
CANCON_RO7                        00000E4F
CANCON_RO8                        00000E3F
CANCON_RO9                        00000E2F
CANRX                             00000003
CANSTAT                           00000F6E
CANSTAT_RO0                       00000F5E
CANSTAT_RO1                       00000F4E
CANSTAT_RO2                       00000F3E
CANSTAT_RO3                       00000F2E
CANSTAT_RO4                       00000E7E
CANSTAT_RO5                       00000E6E
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 162


SYMBOL TABLE
  LABEL                             VALUE 

CANSTAT_RO6                       00000E5E
CANSTAT_RO7                       00000E4E
CANSTAT_RO8                       00000E3E
CANSTAT_RO9                       00000E2E
CANTX                             00000002
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CH                                00000014
CHAN_HB                           00000013
CHAN_L0R                          00000003
CHAN_L1R                          00000007
CHAN_L2R                          0000000B
CHAN_L3R                          0000000F
CHAN_L4R                          00000013
CHAN_X0B                          00000002
CHAN_X0G                          00000001
CHAN_X0R                          00000000
CHAN_X1B                          00000006
CHAN_X1G                          00000005
CHAN_X1R                          00000004
CHAN_X2B                          0000000A
CHAN_X2G                          00000009
CHAN_X2R                          00000008
CHAN_X3B                          0000000E
CHAN_X3G                          0000000D
CHAN_X3R                          0000000C
CHAN_X4B                          00000012
CHAN_X4G                          00000011
CHAN_X4R                          00000010
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIOCON                            00000F73
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CLKI                              00000007
CLKO                              00000006
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMD_BIT                           00000007
CMD_XPRIV                         00001434
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
COMSTAT                           00000F74
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUR_PRE                           00000015
CUR_PREH                          00000014
CUR_SLICE                         00000016
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREF_CVRCON                      00000004
CVREF_PORTA                       00000000
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CYCLE_TMR_PERIOD                  00005D3D
D                                 00000005
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 163


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DATA_BYTE                         00000A26
DB_CHK_7E                         00000A3C
DB_CHK_7F                         00000A48
DB_CHK_LITERAL                    00000A34
DB_HANDLER                        00000A54
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEFAULT_TBL                       00014000
DELAY_1_12_SEC                    00000320
DELAY_1_6_SEC                     00000328
DFLC0                             00000000
DFLC1                             00000001
DFLC2                             00000002
DFLC3                             00000003
DFLC4                             00000004
DLC0                              00000000
DLC1                              00000001
DLC2                              00000002
DLC3                              00000003
DMX_ENABLED                       0
DMX_SLOTH                         00000008
DMX_SLOTL                         00000009
DONE                              00000001
DO_CMD_SLEEP                      00000D7E
DO_CMD_WAKE                       00000DA8
DO_TEST_MODE                      0000085C
DRAIN_M_S_TX_BLOCKING             00000854
DRAIN_TR                          00000002
DRAIN_TRANSMITTER                 0000083C
D_1_6_J                           00000330
D_1_6_K                           00000332
D_1_6_KK                          0000032E
D_A                               00000005
D_FLASH                           00000102
D_NOT_A                           00000005
ECANCON                           00000F77
ECCP1                             00000004
ECCP1AS                           00000FB6
ECCP1CON                          00000FBA
ECCP1DEL                          00000FB7
ECCP1IE                           00000000
ECCP1IF                           00000000
ECCP1IP                           00000000
ECCP1M0                           00000000
ECCP1M1                           00000001
ECCP1M2                           00000002
ECCP1M3                           00000003
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
ECCPR1                            00000FBB
ECCPR1H                           00000FBC
ECCPR1L                           00000FBB
EDC1B0                            00000004
EDC1B1                            00000005
EEADR                             00000FA9
EEADRH                            00000FAA
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_SETTINGS_LEN               00000010
EEPROM_USER_END                   000003FF
EEPROM_USER_START                 00000010
EE_BAUD                           00000001
EE_DEV_ID                         00000002
EE_DMX_H                          00000005
EE_DMX_L                          00000006
EE_END                            0000000F
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 164


SYMBOL TABLE
  LABEL                             VALUE 

EE_LL_XX                          00000007
EE_PHASE_H                        00000003
EE_PHASE_L                        00000004
EE_RESERVED_8                     00000008
EE_RESERVED_9                     00000009
EE_RESERVED_A                     0000000A
EE_RESERVED_B                     0000000B
EE_RESERVED_C                     0000000C
EE_RESERVED_D                     0000000D
EE_RESERVED_E                     0000000E
EE_SENSOR_CFG                     00000007
EE_START                          00000000
EICODE0                           00000000
EICODE1                           00000001
EICODE1_ICODE0                    00000001
EICODE2                           00000002
EICODE2_ICODE1                    00000002
EICODE3                           00000003
EICODE3_ICODE2                    00000003
EICODE4                           00000004
EID0                              00000000
EID1                              00000001
EID10                             00000002
EID11                             00000003
EID12                             00000004
EID13                             00000005
EID14                             00000006
EID15                             00000007
EID16                             00000000
EID17                             00000001
EID2                              00000002
EID3                              00000003
EID4                              00000004
EID5                              00000005
EID6                              00000006
EID7                              00000007
EID8                              00000000
EID9                              00000001
EIGHTBITSIOBUF                    0000001E
ENDRHI                            00000005
END_EEPROM_READ                   
END_EEPROM_WRITE                  
END_FADE_0                        0000212C
END_FADE_1                        00002176
END_FADE_10                       00002410
END_FADE_11                       0000245A
END_FADE_12                       000024A4
END_FADE_13                       000024EE
END_FADE_14                       00002538
END_FADE_15                       00002582
END_FADE_16                       000025CC
END_FADE_17                       00002616
END_FADE_18                       00002660
END_FADE_19                       000026AA
END_FADE_2                        000021C0
END_FADE_3                        0000220A
END_FADE_4                        00002254
END_FADE_5                        0000229E
END_FADE_6                        000022E8
END_FADE_7                        00002332
END_FADE_8                        0000237C
END_FADE_9                        000023C6
END_FRJC                          000002BC
END_SERIAL_READ                   00000832
EPWM1M0                           00000006
EPWM1M1                           00000007
ERRIE                             00000005
ERRIF                             00000005
ERRIP                             00000005
ERR_ABORT                         000008CA
ERR_BUG                           
ERR_CLASS_DEVICE                  00000004
ERR_CLASS_FATAL_RESET             00000003
ERR_CLASS_INT_COMMAND             00000005
ERR_CLASS_IN_VALID                00000002
ERR_CLASS_OVERRUN                 00000001
ERR_CMD_INCOMPLETE                000008B6
ERR_COMMAND                       000008C6
ERR_NOT_IMP                       000008BE
ERR_SERIAL_FRAMING                000008A2
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 165


SYMBOL TABLE
  LABEL                             VALUE 

ERR_SERIAL_FULL                   000008AE
ERR_SERIAL_OVERRUN                000008A8
EWARN                             00000000
EWIN0                             00000000
EWIN1                             00000001
EWIN2                             00000002
EWIN3                             00000003
EWIN4                             00000004
EXID                              00000003
EXIDE                             00000003
EXIDEN                            00000003
F                                 00000005
F0BP_0                            00000000
F0BP_1                            00000001
F0BP_2                            00000002
F0BP_3                            00000003
F10BP_0                           00000000
F10BP_1                           00000001
F10BP_2                           00000002
F10BP_3                           00000003
F11BP_0                           00000004
F11BP_1                           00000005
F11BP_2                           00000006
F11BP_3                           00000007
F12BP_0                           00000000
F12BP_1                           00000001
F12BP_2                           00000002
F12BP_3                           00000003
F13BP_0                           00000004
F13BP_1                           00000005
F13BP_2                           00000006
F13BP_3                           00000007
F14BP_0                           00000000
F14BP_1                           00000001
F14BP_2                           00000002
F14BP_3                           00000003
F15BP_0                           00000004
F15BP_1                           00000005
F15BP_2                           00000006
F15BP_3                           00000007
F1BP_0                            00000004
F1BP_1                            00000005
F1BP_2                            00000006
F1BP_3                            00000007
F2BP_0                            00000000
F2BP_1                            00000001
F2BP_2                            00000002
F2BP_3                            00000003
F3BP_0                            00000004
F3BP_1                            00000005
F3BP_2                            00000006
F3BP_3                            00000007
F4BP_0                            00000000
F4BP_1                            00000001
F4BP_2                            00000002
F4BP_3                            00000003
F5BP_0                            00000004
F5BP_1                            00000005
F5BP_2                            00000006
F5BP_3                            00000007
F6BP_0                            00000000
F6BP_1                            00000001
F6BP_2                            00000002
F6BP_3                            00000003
F7BP_0                            00000004
F7BP_1                            00000005
F7BP_2                            00000006
F7BP_3                            00000007
F8BP_0                            00000000
F8BP_1                            00000001
F8BP_2                            00000002
F8BP_3                            00000003
F9BP_0                            00000004
F9BP_1                            00000005
F9BP_2                            00000006
F9BP_3                            00000007
FACTORY_RESET                     000002C6
FACTORY_RESET_FLASH               0000031E
FACTORY_RESET_JUMPER_CHECK        0000027C
FACTORY_RESET_LOOP                000002EA
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 166


SYMBOL TABLE
  LABEL                             VALUE 

FADE_CYCLE                        00000005
FADE_DOWN                         00000006
FADE_UP                           00000007
FAST                              00000001
FERR                              00000002
FIFOEMPTY                         00000007
FIFOMWIE                          00000000
FIFOWM                            00000005
FIFOWMIE                          00000000
FIFOWMIF                          00000000
FIFOWMIP                          00000000
FIL0_0                            00000000
FIL0_1                            00000001
FIL10_0                           00000004
FIL10_1                           00000005
FIL11_0                           00000006
FIL11_1                           00000007
FIL12_0                           00000000
FIL12_1                           00000001
FIL13_0                           00000002
FIL13_1                           00000003
FIL14_0                           00000004
FIL14_1                           00000005
FIL15_0                           00000006
FIL15_1                           00000007
FIL1_0                            00000002
FIL1_1                            00000003
FIL2_0                            00000004
FIL2_1                            00000005
FIL3_0                            00000006
FIL3_1                            00000007
FIL4_0                            00000000
FIL4_1                            00000001
FIL5_0                            00000002
FIL5_1                            00000003
FIL6_0                            00000004
FIL6_1                            00000005
FIL7_0                            00000006
FIL7_1                            00000007
FIL8_0                            00000000
FIL8_1                            00000001
FIL9_0                            00000002
FIL9_1                            00000003
FILHIT0                           00000000
FILHIT0_TXPRI0                    00000000
FILHIT1                           00000001
FILHIT1_TXPRI1                    00000001
FILHIT2                           00000002
FILHIT2_RTREN                     00000002
FILHIT3                           00000003
FILHIT3_TXREQ                     00000003
FILHIT4                           00000004
FILHIT4_TXERR                     00000004
FLC0                              00000000
FLC1                              00000001
FLC2                              00000002
FLC3                              00000003
FLC4                              00000004
FLT0                              00000000
FP0                               00000000
FP1                               00000001
FP2                               00000002
FP3                               00000003
FREE                              00000004
FRJC_LOOP                         000002AA
FRST_RECEIVER_B                   00000004
FRST_RECEIVER_P                   00000F83
FRST_SENDER_B                     00000007
FRST_SENDER_P                     00000F8A
FRST_SIG_A_B                      00000002
FRST_SIG_A_P                      00000F8C
FRST_SIG_B_B                      00000002
FRST_SIG_B_P                      00000F8B
FRST_SIG_C_B                      00000000
FRST_SIG_C_P                      00000F8B
FRST_TRISTATE_TEST                00000000
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 167


SYMBOL TABLE
  LABEL                             VALUE 

FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HALT_MODE                         000026CE
HALT_SLEEP                        000026DC
HAS_ACTIVE                        00000000
HAS_FACTORY_RESET                 00000001
HAS_OPTION                        00000000
HAS_POWER_CTRL                    00000000
HAS_SENSORS                       00000000
HAS_STATUS_LEDS                   00000000
HAS_T_R                           00000001
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
I                                 0000001F
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ICODE0                            00000000
ICODE1                            00000001
ICODE2                            00000002
ICODE3                            00000003
ICODE4                            00000004
IDLEN                             00000007
INCYC                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INHIBIT_OUTPUT                    00000002
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTERP_START                      000008E8
INTSCR                            00000007
INTSRC                            00000007
INT_HIGH                          0000002A
INT_LOW                           00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 168


SYMBOL TABLE
  LABEL                             VALUE 

INT_RX                            00000014
INT_RX_END                        0000001E
INT_TMR2                          00000046
INT_TMR2_DONE                     00000060
INT_TMR2_END                      00000062
INT_TMR2_MSB                      0000006E
INT_TMR2_NEXT                     0000005C
INT_TX                            0000000A
INT_TX_END                        00000014
INT_ZC                            0000002A
INT_ZC_END                        00000046
INVALID_SSR                       00000006
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IPR3                              00000FA5
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
IRXIE                             00000007
IRXIF                             00000007
IRXIP                             00000007
ISR_TMPL_BSR                      00000001
ISR_TMPL_STATUS                   00000000
ISR_TMPL_WREG                     00000002
IVRST                             00000005
J                                 00000020
JTOFF                             00000001
JTOFF_FILHIT1                     00000001
K                                 00000021
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
KK                                00000022
LAST_ERROR                        00000013
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LITERAL_ESC                       00000000
LUMOS_ARCH                        LUMOS_ARCH_4685
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 169


SYMBOL TABLE
  LABEL                             VALUE 

LUMOS_ARCH_14K50                  (0x1450)
LUMOS_ARCH_4685                   (0x4685)
LUMOS_CHIP_4CHANNEL               0x44
LUMOS_CHIP_MASTER                 0x41
LUMOS_CHIP_QSCC                   0x45
LUMOS_CHIP_QSRC                   0x46
LUMOS_CHIP_SLAVE                  0x42
LUMOS_CHIP_STANDALONE             0x43
LUMOS_CHIP_TYPE                   LUMOS_CHIP_QSRC
LUMOS_CONFIG_INC                  
LUMOS_INIT                        00000000
LUMOS_INTERNAL                    0x58
LUMOS_SET_SSR_INC                 
LUMOS_SLICE_TIMER                 LUMOS_INTERNAL
LUMOS_ZC                          0x55
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAIN                              00000800
MAIN_DATA                         00000500
MAX_OFF_TIME                      00000004
MDSEL0                            00000006
MDSEL1                            00000007
MSB_ESC                           00000001
MSEL0                             00000DF0
MSEL1                             00000DF1
MSEL2                             00000DF2
MSEL3                             00000DF3
MY_ADDRESS                        00000003
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DMX                           0000080E
NOT_DONE                          00000001
NOT_FIFOEMPTY                     00000007
NOT_MY_SSR                        00000007
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NUM_CHANNELS                      (.20)
N_BUTTONS                         0000000A
OBF                               00000006
OERR                              00000001
ON_OFF_ON                         00000A7C
ON_OFF_YY_DATA                    00000A62
OPMODE0                           00000005
OPMODE1                           00000006
OPMODE2                           00000007
OPTION_DEBOUNCE                   00000018
OPTION_HOLD                       00000019
OSC1                              00000007
OSC2                              00000006
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 170


SYMBOL TABLE
  LABEL                             VALUE 

OUTPUT_CHAN_MAX                   00000013
OV                                00000003
P                                 00000004
P1A                               00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
PASS_DOWN_ON_OFF                  00000A82
PASS_DOWN_SET_LVL                 00000AB2
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PHASE_OFFSETH                     00000004
PHASE_OFFSETL                     00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIE3                              00000FA3
PIR1                              00000F9E
PIR2                              00000FA1
PIR3                              00000FA4
PLAT_0                            00000F8B
PLAT_1                            00000F8B
PLAT_10                           00000F8A
PLAT_11                           00000F8D
PLAT_12                           00000F8C
PLAT_13                           00000F8C
PLAT_14                           00000F8C
PLAT_15                           00000F8D
PLAT_16                           00000F8A
PLAT_17                           00000F8C
PLAT_18                           00000F8C
PLAT_19                           00000F8C
PLAT_2                            00000F8B
PLAT_3                            00000F8D
PLAT_4                            00000F8A
PLAT_5                            00000F8A
PLAT_6                            00000F8A
PLAT_7                            00000F8A
PLAT_8                            00000F8A
PLAT_9                            00000F8A
PLAT_T_R                          00000F8B
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
PORT_L0                           00000F80
PORT_L1                           00000F80
PORT_L2                           00000F80
PORT_L3                           00000F83
PORT_L4                           00000F82
PORT_RX                           00000F82
PORT_T_R                          00000F82
PORT_X0                           00000F80
PORT_X1                           00000F80
PORT_X2                           00000F80
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 171


SYMBOL TABLE
  LABEL                             VALUE 

PORT_X3                           00000F82
PORT_X4                           00000F83
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PRECYC                            00000006
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRE_PRIV                          00000001
PRIV_FORBID                       00000003
PRIV_MODE                         00000004
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEG0                            00000000
PRSEG1                            00000001
PRSEG2                            00000002
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
QSCC_BITS_INC                     
QSCC_CMD5_START                   00000000
QSCC_G_C_1                        000008EC
QSCC_G_C_2                        000008F8
QSCC_INIT                         00000000
QSCC_INT_END                      0000006C
QSCC_INT_TMR1                     00000062
QSCC_MAIN                         00000000
QSCC_PORT                         (1)
QSCC_START                        00000000
QS_BTN_TMR_T                      00000024
QS_BTN_TMR_U                      00000025
QS_FLAG_DOING120                  00000002
QS_FLAG_ON_120_S                  00000001
QS_FLAG_SCANNING                  00000000
QS_QFLG_BUTTONS                   00000002
QS_QFLG_PING                      00000001
QS_QFLG_STOP                      00000000
QS_QUERY_DONE                     00001F84
QS_QUERY_PING                     00001F78
QS_SEND_BUTTON_TIME               
QS_SENS_CONF                      00000028
QS_SENS_MASK                      0000003F
QS_SENS_PORT                      00000F80
QS_SENS_STAND                     00000006
QS_STOP_SCANNER                   00000000
QUIZSHOW_DATA                     00000C00
QUIZSHOW_FLAGS                    00000026
QUIZSHOW_LCKTM                    00000000
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0_B0DLC                         00000004
RB0_B1DLC                         00000004
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 172


SYMBOL TABLE
  LABEL                             VALUE 

RB0_B2DLC                         00000004
RB0_B3DLC                         00000004
RB0_B4DLC                         00000004
RB0_B5DLC                         00000004
RB0_DDRB                          00000000
RB0_PORTB                         00000000
RB0_RXB0DLC                       00000004
RB0_RXB1DLC                       00000004
RB0_TRISB                         00000000
RB1_B0DLC                         00000005
RB1_B1DLC                         00000005
RB1_B2DLC                         00000005
RB1_B3DLC                         00000005
RB1_B4DLC                         00000005
RB1_B5DLC                         00000005
RB1_DDRB                          00000001
RB1_PORTB                         00000001
RB1_RXB0DLC                       00000005
RB1_RXB1DLC                       00000005
RB1_TRISB                         00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
READ_EEPROM_DATA                  
READ_EEPROM_DATA_REG              
READ_EEPROM_DATA_W                
READ_EEPROM_DATA_W_INC            
READ_WRITE                        00000002
REC0                              00000000
REC1                              00000001
REC2                              00000002
REC3                              00000003
REC4                              00000004
REC5                              00000005
REC6                              00000006
REC7                              00000007
RECEIVE_COMMAND                   000008CE
REQOP0                            00000005
REQOP1                            00000006
REQOP2                            00000007
RESRB0                            00000004
RESRB1                            00000005
RI                                00000004
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 173


SYMBOL TABLE
  LABEL                             VALUE 

ROLE_MASTER                       (0)
ROLE_SLAVE                        (0)
ROLE_STANDALONE                   (1)
RSEN                              00000001
RTREN                             00000002
RTRRO                             00000005
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXB0CON                           00000F60
RXB0D0                            00000F66
RXB0D00                           00000000
RXB0D01                           00000001
RXB0D02                           00000002
RXB0D03                           00000003
RXB0D04                           00000004
RXB0D05                           00000005
RXB0D06                           00000006
RXB0D07                           00000007
RXB0D1                            00000F67
RXB0D10                           00000000
RXB0D11                           00000001
RXB0D12                           00000002
RXB0D13                           00000003
RXB0D14                           00000004
RXB0D15                           00000005
RXB0D16                           00000006
RXB0D17                           00000007
RXB0D2                            00000F68
RXB0D20                           00000000
RXB0D21                           00000001
RXB0D22                           00000002
RXB0D23                           00000003
RXB0D24                           00000004
RXB0D25                           00000005
RXB0D26                           00000006
RXB0D27                           00000007
RXB0D3                            00000F69
RXB0D30                           00000000
RXB0D31                           00000001
RXB0D32                           00000002
RXB0D33                           00000003
RXB0D34                           00000004
RXB0D35                           00000005
RXB0D36                           00000006
RXB0D37                           00000007
RXB0D4                            00000F6A
RXB0D40                           00000000
RXB0D41                           00000001
RXB0D42                           00000002
RXB0D43                           00000003
RXB0D44                           00000004
RXB0D45                           00000005
RXB0D46                           00000006
RXB0D47                           00000007
RXB0D5                            00000F6B
RXB0D50                           00000000
RXB0D51                           00000001
RXB0D52                           00000002
RXB0D53                           00000003
RXB0D54                           00000004
RXB0D55                           00000005
RXB0D56                           00000006
RXB0D57                           00000007
RXB0D6                            00000F6C
RXB0D60                           00000000
RXB0D61                           00000001
RXB0D62                           00000002
RXB0D63                           00000003
RXB0D64                           00000004
RXB0D65                           00000005
RXB0D66                           00000006
RXB0D67                           00000007
RXB0D7                            00000F6D
RXB0D70                           00000000
RXB0D71                           00000001
RXB0D72                           00000002
RXB0D73                           00000003
RXB0D74                           00000004
RXB0D75                           00000005
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 174


SYMBOL TABLE
  LABEL                             VALUE 

RXB0D76                           00000006
RXB0D77                           00000007
RXB0DBEN                          00000002
RXB0DBEN_FILHIT2                  00000002
RXB0DLC                           00000F65
RXB0EIDH                          00000F63
RXB0EIDL                          00000F64
RXB0IE                            00000000
RXB0IF                            00000000
RXB0IP                            00000000
RXB0OVFL                          00000007
RXB0OVFL_NOT_FIFOEMPTY            00000007
RXB0SIDH                          00000F61
RXB0SIDL                          00000F62
RXB1CON                           00000F50
RXB1D0                            00000F56
RXB1D00                           00000000
RXB1D01                           00000001
RXB1D02                           00000002
RXB1D03                           00000003
RXB1D04                           00000004
RXB1D05                           00000005
RXB1D06                           00000006
RXB1D07                           00000007
RXB1D1                            00000F57
RXB1D10                           00000000
RXB1D11                           00000001
RXB1D12                           00000002
RXB1D13                           00000003
RXB1D14                           00000004
RXB1D15                           00000005
RXB1D16                           00000006
RXB1D17                           00000007
RXB1D2                            00000F58
RXB1D20                           00000000
RXB1D21                           00000001
RXB1D22                           00000002
RXB1D23                           00000003
RXB1D24                           00000004
RXB1D25                           00000005
RXB1D26                           00000006
RXB1D27                           00000007
RXB1D3                            00000F59
RXB1D30                           00000000
RXB1D31                           00000001
RXB1D32                           00000002
RXB1D33                           00000003
RXB1D34                           00000004
RXB1D35                           00000005
RXB1D36                           00000006
RXB1D37                           00000007
RXB1D4                            00000F5A
RXB1D40                           00000000
RXB1D41                           00000001
RXB1D42                           00000002
RXB1D43                           00000003
RXB1D44                           00000004
RXB1D45                           00000005
RXB1D46                           00000006
RXB1D47                           00000007
RXB1D5                            00000F5B
RXB1D50                           00000000
RXB1D51                           00000001
RXB1D52                           00000002
RXB1D53                           00000003
RXB1D54                           00000004
RXB1D55                           00000005
RXB1D56                           00000006
RXB1D57                           00000007
RXB1D6                            00000F5C
RXB1D60                           00000000
RXB1D61                           00000001
RXB1D62                           00000002
RXB1D63                           00000003
RXB1D64                           00000004
RXB1D65                           00000005
RXB1D66                           00000006
RXB1D67                           00000007
RXB1D7                            00000F5D
RXB1D70                           00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 175


SYMBOL TABLE
  LABEL                             VALUE 

RXB1D71                           00000001
RXB1D72                           00000002
RXB1D73                           00000003
RXB1D74                           00000004
RXB1D75                           00000005
RXB1D76                           00000006
RXB1D77                           00000007
RXB1DLC                           00000F55
RXB1EIDH                          00000F53
RXB1EIDL                          00000F54
RXB1IE                            00000001
RXB1IF                            00000001
RXB1IP                            00000001
RXB1OVFL                          00000006
RXB1SIDH                          00000F51
RXB1SIDL                          00000F52
RXBODBEN                          00000002
RXBP                              00000003
RXBnIE                            00000001
RXBnIF                            00000001
RXBnIP                            00000001
RXBnOVFL                          00000006
RXDATA_FULL                       00000003
RXDATA_QUEUE                      00000001
RXERRCNT                          00000F75
RXF0EIDH                          00000F02
RXF0EIDL                          00000F03
RXF0EN                            00000000
RXF0SIDH                          00000F00
RXF0SIDL                          00000F01
RXF10EIDH                         00000D76
RXF10EIDL                         00000D77
RXF10EN                           00000002
RXF10SIDH                         00000D74
RXF10SIDL                         00000D75
RXF11EIDH                         00000D7A
RXF11EIDL                         00000D7B
RXF11EN                           00000003
RXF11SIDH                         00000D78
RXF11SIDL                         00000D79
RXF12EIDH                         00000D82
RXF12EIDL                         00000D83
RXF12EN                           00000004
RXF12SIDH                         00000D80
RXF12SIDL                         00000D81
RXF13EIDH                         00000D86
RXF13EIDL                         00000D87
RXF13EN                           00000005
RXF13SIDH                         00000D84
RXF13SIDL                         00000D85
RXF14EIDH                         00000D8A
RXF14EIDL                         00000D8B
RXF14EN                           00000006
RXF14SIDH                         00000D88
RXF14SIDL                         00000D89
RXF15EIDH                         00000D92
RXF15EIDL                         00000D93
RXF15EN                           00000007
RXF15SIDH                         00000D90
RXF15SIDL                         00000D91
RXF1EIDH                          00000F06
RXF1EIDL                          00000F07
RXF1EN                            00000001
RXF1SIDH                          00000F04
RXF1SIDL                          00000F05
RXF2EIDH                          00000F0A
RXF2EIDL                          00000F0B
RXF2EN                            00000002
RXF2SIDH                          00000F08
RXF2SIDL                          00000F09
RXF3EIDH                          00000F0E
RXF3EIDL                          00000F0F
RXF3EN                            00000003
RXF3SIDH                          00000F0C
RXF3SIDL                          00000F0D
RXF4EIDH                          00000F12
RXF4EIDL                          00000F13
RXF4EN                            00000004
RXF4SIDH                          00000F10
RXF4SIDL                          00000F11
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 176


SYMBOL TABLE
  LABEL                             VALUE 

RXF5EIDH                          00000F16
RXF5EIDL                          00000F17
RXF5EN                            00000005
RXF5SIDH                          00000F14
RXF5SIDL                          00000F15
RXF6EIDH                          00000D62
RXF6EIDL                          00000D63
RXF6EN                            00000006
RXF6SIDH                          00000D60
RXF6SIDL                          00000D61
RXF7EIDH                          00000D66
RXF7EIDL                          00000D67
RXF7EN                            00000007
RXF7SIDH                          00000D64
RXF7SIDL                          00000D65
RXF8EIDH                          00000D6A
RXF8EIDL                          00000D6B
RXF8EN                            00000000
RXF8SIDH                          00000D68
RXF8SIDL                          00000D69
RXF9EIDH                          00000D72
RXF9EIDL                          00000D73
RXF9EN                            00000001
RXF9SIDH                          00000D70
RXF9SIDL                          00000D71
RXFBCON0                          00000DE0
RXFBCON1                          00000DE1
RXFBCON2                          00000DE2
RXFBCON3                          00000DE3
RXFBCON4                          00000DE4
RXFBCON5                          00000DE5
RXFBCON6                          00000DE6
RXFBCON7                          00000DE7
RXFCON0                           00000DD4
RXFCON1                           00000DD5
RXFUL                             00000007
RXFUL_TXBIF                       00000007
RXM0                              00000005
RXM0EIDH                          00000F1A
RXM0EIDL                          00000F1B
RXM0SIDH                          00000F18
RXM0SIDL                          00000F19
RXM0_RTRRO                        00000005
RXM1                              00000006
RXM1EIDH                          00000F1E
RXM1EIDL                          00000F1F
RXM1SIDH                          00000F1C
RXM1SIDL                          00000F1D
RXM1_TXABT                        00000006
RXRTR                             00000006
RXRTRRO_B0CON                     00000005
RXRTRRO_B1CON                     00000005
RXRTRRO_B2CON                     00000005
RXRTRRO_B3CON                     00000005
RXRTRRO_B4CON                     00000005
RXRTRRO_B5CON                     00000005
RXRTRRO_FILHIT3                   00000003
RXRTRRO_RXB0CON                   00000003
RXRTRRO_RXB1CON                   00000003
RXRTRRO_TXLARB                    00000005
RXRTR_TXRTR                       00000006
RXWARN                            00000001
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
S0_CMD0                           0000090E
S0_CMD1                           000009DA
S0_CMD2                           000009E6
S0_CMD3                           000009F0
S0_CMD4                           000009FA
S0_CMD5                           00000A04
S0_CMD6                           00000A0C
S0_CMD7                           00000A14
S0_CMD_ERR                        00000A1E
S10_DATA                          0000149E
S11_DATA                          000014AA
S12_DATA                          000014B6
S13_DATA                          000014C2
S14_DATA                          000014CE
S15_DATA                          000014EA
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 177


SYMBOL TABLE
  LABEL                             VALUE 

S16_DATA                          000014F2
S17_DATA                          000014FA
S17_DATA_NIL                      000014FA
S18_DATA_NIL                      00001502
S19_DATA                          0000150A
S1_DATA                           00000A5A
S20_DATA                          00001F96
S21_DATA                          00001FA2
S22_DATA                          00002014
S2_DATA                           00000A86
S3_DATA                           00000A9C
S4_DATA                           00000ABA
S5_DATA                           00000ADC
S6_0_DATA                         00000B12
S6_0_DATA_N_OK                    00000B28
S6_0_UPDATE_MASTER                00000B3C
S6_0_UPDATE_NEXT                  00000B58
S6_10_DATA                        0000115C
S6_10_DEF_SENS                    00001170
S6_10_VALID                       0000116A
S6_11_CLR_SEQ                     0000118C
S6_11_DATA                        00001178
S6_11_VALID                       00001186
S6_12_DATA                        0000119C
S6_12_DEF_SEQ                     000011C0
S6_12_VALID                       000011A8
S6_12_VALID2                      000011BA
S6_13_DATA                        000011D0
S6_13_VALID                       000011DE
S6_14_DATA                        000011F6
S6_14_DATA_QS                     000011F6
S6_14_DISP_TEXT                   0000120A
S6_14_VALID                       00001204
S6_15_DATA                        0000120E
S6_15_DISP_BITMAP                 00001222
S6_15_VALID                       0000121C
S6_16_CF_SET_QS_PARAMS            0000123A
S6_16_DATA                        00001226
S6_16_VALID                       00001234
S6_17_DATA                        0000124A
S6_1_CONFIGURE                    00000B8A
S6_1_DATA                         00000B68
S6_1_VALID_1                      00000B76
S6_1_VALID_2                      00000B7C
S6_2_DATA                         00000BDE
S6_2_SET_BAUD                     00000C00
S6_2_VALID1                       00000BEC
S6_2_VALID2                       00000BF2
S6_3_DATA                         00000C42
S6_3_HALT                         00000C6E
S6_3_RESET                        00000C56
S6_3_VALID                        00000C50
S6_4_DATA                         00000C70
S6_4_SET_PHASE                    00000C84
S6_4_VALID                        00000C7E
S6_5_ADDR                         00000D0A
S6_5_DATA                         00000CF6
S6_5_VALID                        00000D04
S6_6_DATA                         00000D5C
S6_6_SLEEP                        00000D70
S6_6_VALID                        00000D6A
S6_7_DATA                         00000D86
S6_7_VALID                        00000D94
S6_7_WAKE                         00000D9A
S6_8_DATA                         00000DB0
S6_8_SHUTDOWN                     00000DC4
S6_8_VALID                        00000DBE
S6_8_X                            00000DA8
S6_9_DATA                         00000DD4
S6_9_QUERY                        00000DE8
S6_9_VALID                        00000DE2
S6_DATA                           00000AFA
S6_KEEP_LOOKING                   00001254
S6_RESTART                        00001252
S7_DATA                           0000126C
S8B_CHK_7E1                       00000E1A
S8B_CHK_7E10                      000010EC
S8B_CHK_7E11                      0000112A
S8B_CHK_7E12                      000015DC
S8B_CHK_7E13                      0000161A
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 178


SYMBOL TABLE
  LABEL                             VALUE 

S8B_CHK_7E14                      00001658
S8B_CHK_7E15                      00001696
S8B_CHK_7E16                      000016D4
S8B_CHK_7E17                      00001712
S8B_CHK_7E18                      00001750
S8B_CHK_7E19                      0000178E
S8B_CHK_7E2                       00000E56
S8B_CHK_7E20                      000017CC
S8B_CHK_7E21                      0000180A
S8B_CHK_7E22                      00001848
S8B_CHK_7E23                      00001886
S8B_CHK_7E24                      000018C4
S8B_CHK_7E25                      00001902
S8B_CHK_7E26                      00001940
S8B_CHK_7E27                      0000197E
S8B_CHK_7E28                      000019BC
S8B_CHK_7E29                      000019FA
S8B_CHK_7E3                       00000E92
S8B_CHK_7E30                      00001A38
S8B_CHK_7E31                      00001A76
S8B_CHK_7E32                      00001AB4
S8B_CHK_7E33                      00001AF2
S8B_CHK_7E34                      00001B30
S8B_CHK_7E35                      00001B6E
S8B_CHK_7E36                      00001BAC
S8B_CHK_7E37                      00001BEA
S8B_CHK_7E38                      00001C28
S8B_CHK_7E39                      00001C66
S8B_CHK_7E4                       00000ECE
S8B_CHK_7E40                      00001CA4
S8B_CHK_7E41                      00001CE2
S8B_CHK_7E42                      00001D20
S8B_CHK_7E43                      00001D5E
S8B_CHK_7E44                      00001D9C
S8B_CHK_7E45                      00001DDA
S8B_CHK_7E46                      00001E18
S8B_CHK_7E47                      00001E56
S8B_CHK_7E48                      00001E94
S8B_CHK_7E49                      00001ED2
S8B_CHK_7E5                       00000F12
S8B_CHK_7E50                      00001F10
S8B_CHK_7E51                      00001F4E
S8B_CHK_7E6                       00000F5A
S8B_CHK_7E7                       00000F98
S8B_CHK_7E8                       00000FEC
S8B_CHK_7E9                       00001090
S8B_CHK_MSB1                      00000E2E
S8B_CHK_MSB10                     00001100
S8B_CHK_MSB11                     0000113E
S8B_CHK_MSB12                     000015F0
S8B_CHK_MSB13                     0000162E
S8B_CHK_MSB14                     0000166C
S8B_CHK_MSB15                     000016AA
S8B_CHK_MSB16                     000016E8
S8B_CHK_MSB17                     00001726
S8B_CHK_MSB18                     00001764
S8B_CHK_MSB19                     000017A2
S8B_CHK_MSB2                      00000E6A
S8B_CHK_MSB20                     000017E0
S8B_CHK_MSB21                     0000181E
S8B_CHK_MSB22                     0000185C
S8B_CHK_MSB23                     0000189A
S8B_CHK_MSB24                     000018D8
S8B_CHK_MSB25                     00001916
S8B_CHK_MSB26                     00001954
S8B_CHK_MSB27                     00001992
S8B_CHK_MSB28                     000019D0
S8B_CHK_MSB29                     00001A0E
S8B_CHK_MSB3                      00000EA6
S8B_CHK_MSB30                     00001A4C
S8B_CHK_MSB31                     00001A8A
S8B_CHK_MSB32                     00001AC8
S8B_CHK_MSB33                     00001B06
S8B_CHK_MSB34                     00001B44
S8B_CHK_MSB35                     00001B82
S8B_CHK_MSB36                     00001BC0
S8B_CHK_MSB37                     00001BFE
S8B_CHK_MSB38                     00001C3C
S8B_CHK_MSB39                     00001C7A
S8B_CHK_MSB4                      00000EE2
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 179


SYMBOL TABLE
  LABEL                             VALUE 

S8B_CHK_MSB40                     00001CB8
S8B_CHK_MSB41                     00001CF6
S8B_CHK_MSB42                     00001D34
S8B_CHK_MSB43                     00001D72
S8B_CHK_MSB44                     00001DB0
S8B_CHK_MSB45                     00001DEE
S8B_CHK_MSB46                     00001E2C
S8B_CHK_MSB47                     00001E6A
S8B_CHK_MSB48                     00001EA8
S8B_CHK_MSB49                     00001EE6
S8B_CHK_MSB5                      00000F26
S8B_CHK_MSB50                     00001F24
S8B_CHK_MSB51                     00001F62
S8B_CHK_MSB6                      00000F6E
S8B_CHK_MSB7                      00000FAC
S8B_CHK_MSB8                      00001000
S8B_CHK_MSB9                      000010A4
S8B_END1                          00000E40
S8B_END10                         00001112
S8B_END11                         00001150
S8B_END12                         00001602
S8B_END13                         00001640
S8B_END14                         0000167E
S8B_END15                         000016BC
S8B_END16                         000016FA
S8B_END17                         00001738
S8B_END18                         00001776
S8B_END19                         000017B4
S8B_END2                          00000E7C
S8B_END20                         000017F2
S8B_END21                         00001830
S8B_END22                         0000186E
S8B_END23                         000018AC
S8B_END24                         000018EA
S8B_END25                         00001928
S8B_END26                         00001966
S8B_END27                         000019A4
S8B_END28                         000019E2
S8B_END29                         00001A20
S8B_END3                          00000EB8
S8B_END30                         00001A5E
S8B_END31                         00001A9C
S8B_END32                         00001ADA
S8B_END33                         00001B18
S8B_END34                         00001B56
S8B_END35                         00001B94
S8B_END36                         00001BD2
S8B_END37                         00001C10
S8B_END38                         00001C4E
S8B_END39                         00001C8C
S8B_END4                          00000EF4
S8B_END40                         00001CCA
S8B_END41                         00001D08
S8B_END42                         00001D46
S8B_END43                         00001D84
S8B_END44                         00001DC2
S8B_END45                         00001E00
S8B_END46                         00001E3E
S8B_END47                         00001E7C
S8B_END48                         00001EBA
S8B_END49                         00001EF8
S8B_END5                          00000F38
S8B_END50                         00001F36
S8B_END51                         00001F74
S8B_END6                          00000F80
S8B_END7                          00000FBE
S8B_END8                          00001012
S8B_END9                          000010B6
S8B_LABEL                         00000034
S8B_SEND_NORMAL1                  00000E3A
S8B_SEND_NORMAL10                 0000110C
S8B_SEND_NORMAL11                 0000114A
S8B_SEND_NORMAL12                 000015FC
S8B_SEND_NORMAL13                 0000163A
S8B_SEND_NORMAL14                 00001678
S8B_SEND_NORMAL15                 000016B6
S8B_SEND_NORMAL16                 000016F4
S8B_SEND_NORMAL17                 00001732
S8B_SEND_NORMAL18                 00001770
S8B_SEND_NORMAL19                 000017AE
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 180


SYMBOL TABLE
  LABEL                             VALUE 

S8B_SEND_NORMAL2                  00000E76
S8B_SEND_NORMAL20                 000017EC
S8B_SEND_NORMAL21                 0000182A
S8B_SEND_NORMAL22                 00001868
S8B_SEND_NORMAL23                 000018A6
S8B_SEND_NORMAL24                 000018E4
S8B_SEND_NORMAL25                 00001922
S8B_SEND_NORMAL26                 00001960
S8B_SEND_NORMAL27                 0000199E
S8B_SEND_NORMAL28                 000019DC
S8B_SEND_NORMAL29                 00001A1A
S8B_SEND_NORMAL3                  00000EB2
S8B_SEND_NORMAL30                 00001A58
S8B_SEND_NORMAL31                 00001A96
S8B_SEND_NORMAL32                 00001AD4
S8B_SEND_NORMAL33                 00001B12
S8B_SEND_NORMAL34                 00001B50
S8B_SEND_NORMAL35                 00001B8E
S8B_SEND_NORMAL36                 00001BCC
S8B_SEND_NORMAL37                 00001C0A
S8B_SEND_NORMAL38                 00001C48
S8B_SEND_NORMAL39                 00001C86
S8B_SEND_NORMAL4                  00000EEE
S8B_SEND_NORMAL40                 00001CC4
S8B_SEND_NORMAL41                 00001D02
S8B_SEND_NORMAL42                 00001D40
S8B_SEND_NORMAL43                 00001D7E
S8B_SEND_NORMAL44                 00001DBC
S8B_SEND_NORMAL45                 00001DFA
S8B_SEND_NORMAL46                 00001E38
S8B_SEND_NORMAL47                 00001E76
S8B_SEND_NORMAL48                 00001EB4
S8B_SEND_NORMAL49                 00001EF2
S8B_SEND_NORMAL5                  00000F32
S8B_SEND_NORMAL50                 00001F30
S8B_SEND_NORMAL51                 00001F6E
S8B_SEND_NORMAL6                  00000F7A
S8B_SEND_NORMAL7                  00000FB8
S8B_SEND_NORMAL8                  0000100C
S8B_SEND_NORMAL9                  000010B0
S8_DATA                           00001278
S8_PASS_DOWN_RAMP_LVL             000012B2
S9_CF_ADDR                        00001486
S9_CF_PHASE                       0000146E
S9_DATA                           000012BA
S9_DO_PRIV_CMD                    000013D4
S9_INTERNAL_CMD                   000013C4
S9_PRIV_0                         000013E2
S9_PRIV_0X                        000013E4
S9_PRIV_1                         000013E8
S9_PRIV_2                         00001400
S9_PRIV_3                         00001418
S9_PRIV_4                         00001430
S9_PRIV_5                         0000143A
S9_PRIV_6                         00001452
S9_PRIV_6_QS_PARAM                00001452
S9_PRIV_7                         0000146A
S9_PRIV_CMD                       000013C8
S9_X0_SLEEP                       000012CA
S9_X1_WAKE                        000012DE
S9_X2_SHUTDOWN                    000012F6
S9_X3_QUERY                       0000130E
S9_X4_DEF_SEQ                     00001326
S9_X5_EXEC_SEQ                    00001330
S9_X6_DEF_SENS                    0000133A
S9_X7_MSK_SENS                    00001352
S9_X8_CLR_SEQ                     0000135C
S9_X9_XPRIV                       00001374
S9_XA_ERR_COMMAND                 0000137C
S9_XA_QS_QUERY                    0000137C
S9_XB_BTN_MASK                    00001386
S9_XC_DISP_TEXT                   00001390
S9_XD_DISP_BITMAP                 000013A8
S9_XE_ERR_COMMAND                 000013C0
SAM                               00000006
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 181


SYMBOL TABLE
  LABEL                             VALUE 

SCS1                              00000001
SDA                               00000004
SDFLC                             00000DD8
SDI                               00000004
SDO                               00000005
SEG1PH0                           00000003
SEG1PH1                           00000004
SEG1PH2                           00000005
SEG2PH0                           00000000
SEG2PH1                           00000001
SEG2PH2                           00000002
SEG2PHT                           00000007
SEG2PHTS                          00000007
SEN                               00000000
SENDB                             00000003
SEND_8_BIT_W                      
SEQ_DATA                          00000600
SET_EEPROM_ADDRESS                
SET_SSR_BLINK_FADE                
SET_SSR_DMX_MODE                  
SET_SSR_NORMAL_MODE               
SET_SSR_OFF                       
SET_SSR_PATTERN                   
SET_SSR_RAPID_FADE                
SET_SSR_RAPID_FLASH               
SET_SSR_SLOW_FADE                 
SET_SSR_SLOW_FLASH                
SET_SSR_STEADY                    
SET_SSR_VALUE                     
SID0                              00000005
SID1                              00000006
SID10                             00000007
SID2                              00000007
SID3                              00000000
SID4                              00000001
SID5                              00000002
SID6                              00000003
SID7                              00000004
SID8                              00000005
SID9                              00000006
SIO_1000000                       0000000C
SIO_10000000                      00000010
SIO_115200                        00000009
SIO_1200                          00000002
SIO_19200                         00000006
SIO_2000000                       0000000D
SIO_2400                          00000003
SIO_250000                        0000000A
SIO_2500000                       0000000E
SIO_300                           00000000
SIO_38400                         00000007
SIO_4800                          00000004
SIO_500000                        0000000B
SIO_5000000                       0000000F
SIO_57600                         00000008
SIO_600                           00000001
SIO_9600                          00000005
SIO_DATA_START                    00000300
SIO_ECHO                          00000000
SIO_ECHO_W                        00000000
SIO_FERR                          00000005
SIO_FLUSH_INPUT                   00000000
SIO_FLUSH_OUTPUT                  00000000
SIO_GETCHAR                       00000000
SIO_GETCHAR_W                     00000000
SIO_INIT                          00000000
SIO_INPUT                         00000000
SIO_MAX_IDX                       00000010
SIO_NEWLINE                       00000000
SIO_ORUN                          00000004
SIO_OUTPUT                        00000000
SIO_PRINT_HEX                     00000000
SIO_PRINT_HEX_W                   00000000
SIO_PUTCHAR                       00000000
SIO_PUTCHAR_W                     00000000
SIO_READ                          00000000
SIO_READ_W                        00000000
SIO_RECV                          00000000
SIO_RX_BUFFER_START               00000200
SIO_SEND                          00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 182


SYMBOL TABLE
  LABEL                             VALUE 

SIO_SET_BAUD_W                    00000000
SIO_STATUS                        00000000
SIO_TABLE_START                   00015000
SIO_TX_BUFFER_START               00000100
SIO_WRITE                         00000000
SIO_WRITE_W                       00000000
SJW0                              00000006
SJW1                              00000007
SLEEP_MODE                        00000003
SLICE_TMR_PERIOD                  0000009F
SLICE_UPD                         00000005
SMP                               00000007
SND8BIT                           
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SRR                               00000004
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
SSR_00_COUNTER                    00000450
SSR_00_FLAGS                      00000414
SSR_00_SPEED                      0000043C
SSR_00_STEP                       00000428
SSR_00_VALUE                      00000400
SSR_BLOCK_LEN                     00000014
SSR_DATA_BANK                     00000400
SSR_MAX                           00000013
SSR_OUTPUT_VALUE                  0000201C
SSR_STATE                         00000006
SSR_STATE2                        00000007
START                             00000104
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYS_SNH                           00016FF0
SYS_SNL                           00016FF1
S_FLASH                           00000100
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 183


SYMBOL TABLE
  LABEL                             VALUE 

T1CKPS1                           00000005
T1CON                             00000FCD
T1INSYNC                          00000002
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3ECCP1                           00000006
T3NSYNC                           00000002
T3SYNC                            00000002
TABLAT                            00000FF5
TARGET_SSR                        00000017
TARGET_SSR_MSK                    0000003F
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEC0                              00000000
TEC1                              00000001
TEC2                              00000002
TEC3                              00000003
TEC4                              00000004
TEC5                              00000005
TEC6                              00000006
TEC7                              00000007
TEST_BUTTON                       00000005
TEST_CYCLE                        0000001A
TEST_MODE                         00000000
TEST_MODE_1                       0000087A
TEST_MODE_BYPASS                  0000082E
TEST_NOT_PRESSED                  00000866
TEST_NP_1                         0000087A
TEST_NP_2                         0000087A
TEST_PAUSE                        00000007
TEST_SSR                          0000001B
TEST_UPD                          00000006
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1                              00000FCE
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 184


SYMBOL TABLE
  LABEL                             VALUE 

TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRIS_T_R                          00000F94
TRMT                              00000001
TRY_DOWN_0                        0000210C
TRY_DOWN_1                        00002156
TRY_DOWN_10                       000023F0
TRY_DOWN_11                       0000243A
TRY_DOWN_12                       00002484
TRY_DOWN_13                       000024CE
TRY_DOWN_14                       00002518
TRY_DOWN_15                       00002562
TRY_DOWN_16                       000025AC
TRY_DOWN_17                       000025F6
TRY_DOWN_18                       00002640
TRY_DOWN_19                       0000268A
TRY_DOWN_2                        000021A0
TRY_DOWN_3                        000021EA
TRY_DOWN_4                        00002234
TRY_DOWN_5                        0000227E
TRY_DOWN_6                        000022C8
TRY_DOWN_7                        00002312
TRY_DOWN_8                        0000235C
TRY_DOWN_9                        000023A6
TR_I                              00000023
TR_OFF_DELAY                      000026EC
TR_ON_DELAY                       000026E2
TR_ON_L                           000026E4
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXABT                             00000006
TXB0CON                           00000F40
TXB0D0                            00000F46
TXB0D00                           00000000
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 185


SYMBOL TABLE
  LABEL                             VALUE 

TXB0D01                           00000001
TXB0D02                           00000002
TXB0D03                           00000003
TXB0D04                           00000004
TXB0D05                           00000005
TXB0D06                           00000006
TXB0D07                           00000007
TXB0D1                            00000F47
TXB0D10                           00000000
TXB0D11                           00000001
TXB0D12                           00000002
TXB0D13                           00000003
TXB0D14                           00000004
TXB0D15                           00000005
TXB0D16                           00000006
TXB0D17                           00000007
TXB0D2                            00000F48
TXB0D20                           00000000
TXB0D21                           00000001
TXB0D22                           00000002
TXB0D23                           00000003
TXB0D24                           00000004
TXB0D25                           00000005
TXB0D26                           00000006
TXB0D27                           00000007
TXB0D3                            00000F49
TXB0D30                           00000000
TXB0D31                           00000001
TXB0D32                           00000002
TXB0D33                           00000003
TXB0D34                           00000004
TXB0D35                           00000005
TXB0D36                           00000006
TXB0D37                           00000007
TXB0D4                            00000F4A
TXB0D40                           00000000
TXB0D41                           00000001
TXB0D42                           00000002
TXB0D43                           00000003
TXB0D44                           00000004
TXB0D45                           00000005
TXB0D46                           00000006
TXB0D47                           00000007
TXB0D5                            00000F4B
TXB0D50                           00000000
TXB0D51                           00000001
TXB0D52                           00000002
TXB0D53                           00000003
TXB0D54                           00000004
TXB0D55                           00000005
TXB0D56                           00000006
TXB0D57                           00000007
TXB0D6                            00000F4C
TXB0D60                           00000000
TXB0D61                           00000001
TXB0D62                           00000002
TXB0D63                           00000003
TXB0D64                           00000004
TXB0D65                           00000005
TXB0D66                           00000006
TXB0D67                           00000007
TXB0D7                            00000F4D
TXB0D70                           00000000
TXB0D71                           00000001
TXB0D72                           00000002
TXB0D73                           00000003
TXB0D74                           00000004
TXB0D75                           00000005
TXB0D76                           00000006
TXB0D77                           00000007
TXB0DLC                           00000F45
TXB0EIDH                          00000F43
TXB0EIDL                          00000F44
TXB0IE                            00000002
TXB0IF                            00000002
TXB0IP                            00000002
TXB0SIDH                          00000F41
TXB0SIDL                          00000F42
TXB1CON                           00000F30
TXB1D0                            00000F36
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 186


SYMBOL TABLE
  LABEL                             VALUE 

TXB1D00                           00000000
TXB1D01                           00000001
TXB1D02                           00000002
TXB1D03                           00000003
TXB1D04                           00000004
TXB1D05                           00000005
TXB1D06                           00000006
TXB1D07                           00000007
TXB1D1                            00000F37
TXB1D10                           00000000
TXB1D11                           00000001
TXB1D12                           00000002
TXB1D13                           00000003
TXB1D14                           00000004
TXB1D15                           00000005
TXB1D16                           00000006
TXB1D17                           00000007
TXB1D2                            00000F38
TXB1D20                           00000000
TXB1D21                           00000001
TXB1D22                           00000002
TXB1D23                           00000003
TXB1D24                           00000004
TXB1D25                           00000005
TXB1D26                           00000006
TXB1D27                           00000007
TXB1D3                            00000F39
TXB1D30                           00000000
TXB1D31                           00000001
TXB1D32                           00000002
TXB1D33                           00000003
TXB1D34                           00000004
TXB1D35                           00000005
TXB1D36                           00000006
TXB1D37                           00000007
TXB1D4                            00000F3A
TXB1D40                           00000000
TXB1D41                           00000001
TXB1D42                           00000002
TXB1D43                           00000003
TXB1D44                           00000004
TXB1D45                           00000005
TXB1D46                           00000006
TXB1D47                           00000007
TXB1D5                            00000F3B
TXB1D50                           00000000
TXB1D51                           00000001
TXB1D52                           00000002
TXB1D53                           00000003
TXB1D54                           00000004
TXB1D55                           00000005
TXB1D56                           00000006
TXB1D57                           00000007
TXB1D6                            00000F3C
TXB1D60                           00000000
TXB1D61                           00000001
TXB1D62                           00000002
TXB1D63                           00000003
TXB1D64                           00000004
TXB1D65                           00000005
TXB1D66                           00000006
TXB1D67                           00000007
TXB1D7                            00000F3D
TXB1D70                           00000000
TXB1D71                           00000001
TXB1D72                           00000002
TXB1D73                           00000003
TXB1D74                           00000004
TXB1D75                           00000005
TXB1D76                           00000006
TXB1D77                           00000007
TXB1DLC                           00000F35
TXB1EIDH                          00000F33
TXB1EIDL                          00000F34
TXB1IE                            00000003
TXB1IF                            00000003
TXB1IP                            00000003
TXB1SIDH                          00000F31
TXB1SIDL                          00000F32
TXB2CON                           00000F20
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 187


SYMBOL TABLE
  LABEL                             VALUE 

TXB2D0                            00000F26
TXB2D00                           00000000
TXB2D01                           00000001
TXB2D02                           00000002
TXB2D03                           00000003
TXB2D04                           00000004
TXB2D05                           00000005
TXB2D06                           00000006
TXB2D07                           00000007
TXB2D1                            00000F27
TXB2D10                           00000000
TXB2D11                           00000001
TXB2D12                           00000002
TXB2D13                           00000003
TXB2D14                           00000004
TXB2D15                           00000005
TXB2D16                           00000006
TXB2D17                           00000007
TXB2D2                            00000F28
TXB2D20                           00000000
TXB2D21                           00000001
TXB2D22                           00000002
TXB2D23                           00000003
TXB2D24                           00000004
TXB2D25                           00000005
TXB2D26                           00000006
TXB2D27                           00000007
TXB2D3                            00000F29
TXB2D30                           00000000
TXB2D31                           00000001
TXB2D32                           00000002
TXB2D33                           00000003
TXB2D34                           00000004
TXB2D35                           00000005
TXB2D36                           00000006
TXB2D37                           00000007
TXB2D4                            00000F2A
TXB2D40                           00000000
TXB2D41                           00000001
TXB2D42                           00000002
TXB2D43                           00000003
TXB2D44                           00000004
TXB2D45                           00000005
TXB2D46                           00000006
TXB2D47                           00000007
TXB2D5                            00000F2B
TXB2D50                           00000000
TXB2D51                           00000001
TXB2D52                           00000002
TXB2D53                           00000003
TXB2D54                           00000004
TXB2D55                           00000005
TXB2D56                           00000006
TXB2D57                           00000007
TXB2D6                            00000F2C
TXB2D60                           00000000
TXB2D61                           00000001
TXB2D62                           00000002
TXB2D63                           00000003
TXB2D64                           00000004
TXB2D65                           00000005
TXB2D66                           00000006
TXB2D67                           00000007
TXB2D7                            00000F2D
TXB2D70                           00000000
TXB2D71                           00000001
TXB2D72                           00000002
TXB2D73                           00000003
TXB2D74                           00000004
TXB2D75                           00000005
TXB2D76                           00000006
TXB2D77                           00000007
TXB2DLC                           00000F25
TXB2EIDH                          00000F23
TXB2EIDL                          00000F24
TXB2IE                            00000004
TXB2IF                            00000004
TXB2IP                            00000004
TXB2SIDH                          00000F21
TXB2SIDL                          00000F22
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 188


SYMBOL TABLE
  LABEL                             VALUE 

TXBIE                             00000DFC
TXBIF                             00000007
TXBIFBXB2CON                      00000007
TXBIFTXB1CON                      00000007
TXBIP                             00000004
TXBO                              00000005
TXBP                              00000004
TXBnIE                            00000004
TXBnIF                            00000004
TXBnIP                            00000004
TXCKP                             00000004
TXDATA_FULL                       00000002
TXDATA_QUEUE                      00000000
TXEN                              00000005
TXERR                             00000004
TXERRCNT                          00000F76
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXLARB                            00000005
TXPRI0                            00000000
TXPRI1                            00000001
TXREG                             00000FAD
TXREQ                             00000003
TXRTR                             00000006
TXSTA                             00000FAC
TXWARN                            00000002
UA                                00000001
UPDATE_BTN_MASK                   
UPDATE_MINIMUM_LEVEL              000020DE
UPDATE_MIN_DIMMED_0               000020EA
UPDATE_MIN_DIMMED_1               00002134
UPDATE_MIN_DIMMED_10              000023CE
UPDATE_MIN_DIMMED_11              00002418
UPDATE_MIN_DIMMED_12              00002462
UPDATE_MIN_DIMMED_13              000024AC
UPDATE_MIN_DIMMED_14              000024F6
UPDATE_MIN_DIMMED_15              00002540
UPDATE_MIN_DIMMED_16              0000258A
UPDATE_MIN_DIMMED_17              000025D4
UPDATE_MIN_DIMMED_18              0000261E
UPDATE_MIN_DIMMED_19              00002668
UPDATE_MIN_DIMMED_2               0000217E
UPDATE_MIN_DIMMED_3               000021C8
UPDATE_MIN_DIMMED_4               00002212
UPDATE_MIN_DIMMED_5               0000225C
UPDATE_MIN_DIMMED_6               000022A6
UPDATE_MIN_DIMMED_7               000022F0
UPDATE_MIN_DIMMED_8               0000233A
UPDATE_MIN_DIMMED_9               00002384
UPDATE_MIN_SKIP_0                 000020EC
UPDATE_MIN_SKIP_1                 00002136
UPDATE_MIN_SKIP_10                000023D0
UPDATE_MIN_SKIP_11                0000241A
UPDATE_MIN_SKIP_12                00002464
UPDATE_MIN_SKIP_13                000024AE
UPDATE_MIN_SKIP_14                000024F8
UPDATE_MIN_SKIP_15                00002542
UPDATE_MIN_SKIP_16                0000258C
UPDATE_MIN_SKIP_17                000025D6
UPDATE_MIN_SKIP_18                00002620
UPDATE_MIN_SKIP_19                0000266A
UPDATE_MIN_SKIP_2                 00002180
UPDATE_MIN_SKIP_3                 000021CA
UPDATE_MIN_SKIP_4                 00002214
UPDATE_MIN_SKIP_5                 0000225E
UPDATE_MIN_SKIP_6                 000022A8
UPDATE_MIN_SKIP_7                 000022F2
UPDATE_MIN_SKIP_8                 0000233C
UPDATE_MIN_SKIP_9                 00002386
UPDATE_SSR_OUTPUTS                00002058
UPDATE_SSR_SKIP_0                 00002068
UPDATE_SSR_SKIP_1                 0000206E
UPDATE_SSR_SKIP_10                000020A4
UPDATE_SSR_SKIP_11                000020AA
UPDATE_SSR_SKIP_12                000020B0
UPDATE_SSR_SKIP_13                000020B6
UPDATE_SSR_SKIP_14                000020BC
UPDATE_SSR_SKIP_15                000020C2
UPDATE_SSR_SKIP_16                000020C8
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 189


SYMBOL TABLE
  LABEL                             VALUE 

UPDATE_SSR_SKIP_17                000020CE
UPDATE_SSR_SKIP_18                000020D4
UPDATE_SSR_SKIP_19                000020DA
UPDATE_SSR_SKIP_2                 00002074
UPDATE_SSR_SKIP_3                 0000207A
UPDATE_SSR_SKIP_4                 00002080
UPDATE_SSR_SKIP_5                 00002086
UPDATE_SSR_SKIP_6                 0000208C
UPDATE_SSR_SKIP_7                 00002092
UPDATE_SSR_SKIP_8                 00002098
UPDATE_SSR_SKIP_9                 0000209E
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VREFM                             00000002
VREFP                             00000003
W                                 00000000
WAIT_FOR_SENTINEL                 
WAKDIS                            00000007
WAKFIL                            00000006
WAKIE                             00000006
WAKIF                             00000006
WAKIP                             00000006
WCOL                              00000007
WDTCON                            00000FD1
WIN0                              00000001
WIN0_FP1                          00000001
WIN1                              00000002
WIN1_FP2                          00000002
WIN2                              00000003
WIN2_FP3                          00000003
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_EEPROM_DATA                 
WRITE_EEPROM_DATA_INC             
WRITE_EEPROM_DATA_W               
WRITE_EEPROM_DATA_W_INC           
WRITE_EEPROM_LOOP0                000002FC
WRITE_EEPROM_LOOP1                00000BB0
WRITE_EEPROM_LOOP2                00000BC8
WRITE_EEPROM_LOOP3                00000C26
WRITE_EEPROM_LOOP4                00000CC0
WRITE_EEPROM_LOOP5                00000CE0
WRITE_EEPROM_LOOP6                00000D46
WUE                               00000001
X                                 00000014
XLATE_SSR_ID                      00002044
YCF_RAMP_CYCLE                    00000007
YY_BUFFER                         00000500
YY_BUF_IDX                        00000010
YY_BUF_LEN                        000000C8
YY_CMD_FLAGS                      0000000C
YY_COMMAND                        0000000B
YY_DATA                           0000000D
YY_LOOKAHEAD_MAX                  0000000E
YY_LOOK_FOR                       0000000F
YY_NEXT_STATE                     00000011
YY_STATE                          0000000A
YY_YY                             00000012
Z                                 00000002
_BBSIZ_1024_4L                    000000CF
_BBSIZ_2048_4L                    000000DF
_BBSIZ_4096_4L                    000000EF
_BOREN_BOACTIVE_2L                000000FD
_BOREN_BOHW_2L                    000000FF
_BOREN_OFF_2L                     000000F9
_BOREN_SBORENCTRL_2L              000000FB
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 190


SYMBOL TABLE
  LABEL                             VALUE 

_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CP4_OFF_5L                       000000FF
_CP4_ON_5L                        000000EF
_CP5_OFF_5L                       000000FF
_CP5_ON_5L                        000000DF
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTR4_OFF_7L                     000000FF
_EBTR4_ON_7L                      000000EF
_EBTR5_OFF_7L                     000000FF
_EBTR5_ON_7L                      000000DF
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MAIN_EEPROM_TBL                  00014000
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO_1H                      000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_IRCIO67_1H                   000000F8
_OSC_IRCIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO_1H                      000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_SYSTEM_MFG_DATA                  00016FF0
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
MPASM 5.66                 ../LUMOS_MAIN.ASM   3-1-2017  12:21:15         PAGE 191


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRT4_OFF_6L                      000000FF
_WRT4_ON_6L                       000000EF
_WRT5_OFF_6L                      000000FF
_WRT5_ON_6L                       000000DF
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F4685                         00000001

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

