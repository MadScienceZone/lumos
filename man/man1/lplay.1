'\"************************************************************************
'\"************************************************************************
'\"************************************************************************
'\"
'\" This file has been processed by automated scripts.  DO NOT EDIT this
'\" file directly or your edits will be lost!  
'\"
'\" Edit the corresponding <entry>.<section>.in file instead.
'\"
'\"************************************************************************
'\"************************************************************************
'\"************************************************************************
.TH LPLAY 1 "Lumos" "Software Alchemy" "User Commands"
'\"
'\" LUMOS DOCUMENTATION: LPLAY
'\"
'\" Lumos Light Orchestration System
'\" Copyright (c) 2005-2009, 2011, 2012, 2013 by Steven L. Willoughy, Aloha, OR, USA.
'\" All Rights Reserved.  Licensed under the terms and conditions of the
'\" Open Software License version 3.0.
'\"
'\" This product is provided for educational, experimental or personal
'\" interest use, in accordance with the terms and conditions of the
'\" aforementioned license agreement, ON AN "AS IS" BASIS AND WITHOUT
'\" WARRANTY, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION,
'\" THE WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
'\" PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY OF THE ORIGINAL
'\" WORK IS WITH YOU.  (See the license agreement for full details, 
'\" including disclaimer of warranty and limitation of liability.)
'\"
'\" Under no curcumstances is this product intended to be used where the
'\" safety of any person, animal, or property depends upon, or is at
'\" risk of any kind from, the correct operation of this software or
'\" the hardware devices which it controls.
'\"
'\" USE THIS PRODUCT AT YOUR OWN RISK.
'\" 
.SH NAME
lplay \- Play a Lumos sequence file
.SH SYNOPSIS
.B lplay
.RB [ \-\-config=\fIfile\fP ]
.RB [ \-\-debug=\fIfile\fP ]
.RB [ \-\-no\-audio ]
.RB [ \-\-skew=\fImS\fP ]
.RB [ \-\-test ]
.RB [ \-\-verbose ]
.IR files ...
.br
.B lplay
.RB [ \-hTvx ]
.RB [ \-c
.IR file ]
.RB [ \-D
.IR file ]
.RB [ \-s
.IR mS ]
.IR files ...
.br
.B lplay
.B \-\-help
.br
.B lplay
.B \-\-version
.SH DESCRIPTION
.LP
The
.B lplay
program executes (\*(lqplays\*(rq) one or more Lumos sequence files, 
sending the appropriate commands to the light controller hardware as
described in the 
.I config
file (see the
.B \-c
option).
.LP
Each 
.I file
specified on the command line is played entirely before the next file is 
loaded and played.  This may introduce a slight lag time between files.
The hardware controllers are only initialized before the first sequence,
so the sequence files can represent parts of a whole scene, continuing
from whatever state the previous sequence left behind.
.LP
If a real-time delay is desired between scenes (such as when you need
to hold a static scene until a scheduled time for the next show to
begin), this may be accomplished by putting special qualifiers
on the sequence file names in the argument list:
.TP
.I file
If a sequence
.I file
is named all by itself in the argument list, that sequence is 
compiled and played to completion.  This is the normal mode
of operation.
.TP
.BI @ mm
'\".BI @ \fR[\fPhh :\fR]\fP mm \fR[\fP: ss\fR]\fP
Pause until the specified time
arrives, then go on to the next sequence in the list.
The time parameter here \"may include the specific hour, minute, and second
is the number of minutes
on the clock to wait for.\"  Ordinarily,
'\" this just specifies the minutes on the clock to wait for.  
For example,
.RB \*(lq @55 \*(rq
would pause playback until 55 minutes past the hour.  (If it is currently
55 minutes past the hour, no delay is taken.)
'\"If two numbers are given, separated by a colon, that represents minutes
'\"and seconds, thus
'\".RB \*(lq @55:30 \*(rq
'\"pauses until 55 minutes and 30 seconds past the hour.  If three numbers
'\"are given, that specifies hours, minutes, and seconds.  The way to specify
'\"a pause until 4:30 P.M. would be
'\".RB \*(lq @16:30:00 \*(rq
'\"(note the use of 24-hour time).
.RS
.LP
This number
'\"Any of these numbers (hour, minute, and second) 
may be an asterisk
.RB (\*(lq * \*(rq),
which means that all possible values are permitted.  Thus, \"to pause
'\"until 45 seconds past any minute, you would specify
'\".RB \*(lq @*:45 \*(rq.
'\"until the start of the next minute on the clock, you would specify
.RB \*(lq @* \*(rq
would unconditionally succeed (but see below for more useful applications
of this mode).
.LP
Ranges and lists are allowed, as well.  To specify that you wish to wait until
5, 20, or 45 minutes past the hour (whichever comes first), use
.RB \*(lq @4,20,45 \*(rq.
To wait for any minute between 20 and 45 after, use
.RB \*(lq @20-45 \*(rq.
A range may also be followed by a slash and a number to indicate
skip levels.  For example,
.RB \*(lq @0-30/5 \*(rq
means to pause at :00, :05, :10, :15, :20, :25, or :30 past the hour (if after :30, it will
pause until the top of the hour again).
To just wait for the next multiple of 10 minutes past the hour, use
.RB \*(lq @*/10 \*(rq.
Ranges may appear in lists, such as
.RB \*(lq @0-30/10,35-55/5 \*(rq.
.RE
.TP
.BI + sec
'\".BI + \fR[[\fPhh :\fR]\fP mm \fR]\fP: ss
Delay the specified number of \"hours, minutes, and 
seconds.  This may be a real number.
'\"A single number is assumed to be seconds.
.TP
.BI [ n
Repeat the following sequence(s) (until a single 
.RB \*(lq ] \*(rq 
is encountered in the argument list,
which signals the end of the set to be repeated)
.I n
times. 
.TP
.BI [@ mm
'\".BI [@ \fR[\fPhh :\fR]\fP mm \fR[\fP: ss\fR]\fP
Repeat the following sequence(s) (up to a matching
.RB \*(lq ] \*(rq 
in the argument list)
until the specified
time arrives.  The time is specified as described for the
real-time delay above.  The time is checked at the start
of each iteration of the loop.  If the time at that moment
satisfies the exit condition 
.RI ( mm
minutes past the hour, etc.), then the loop terminates.
.TP
.B ]
Marks the end of a loop begun by
.BI [ n
or
.BI [@ mm
(note that this must be by itself as a command argument; you cannot
simply append a bracket to the end of a file name or to another
bracket).
.TP 
.B +r
Reset all the Lumos controllers configured in the show.  This turns off
all outputs on all Lumos controllers, puts the board in \*(lqsleep\*(rq
mode (which puts the load power supplies into standby if configured to do so), 
waits one second, then tells the boards to resume normal operation.
(Currently only works for Lumos controllers but may be generalized in the
future.)
.LP
Note that it is recommended to run
.BR lcheck (1)
and
.BR lpower (1)
to perform some basic sanity checks on your configuration prior to using
it to play scenes.  Pay close attention to circuit loads when planning your 
scenes to ensure that you don't overload anything.
.SH OPTIONS
.LP
The following options may be given to
.BR lplay .
They may be specified using either short format, e.g.:
.LP
.RS
.na
.B "lplay \-T \-c show.conf scene1.lseq scene2.lseq"
.ad
.RE
.LP
Or using the longer format, e.g.:
.LP
.RS
.na
.B "lplay \-\-test \-\-config=show.conf scene1.lseq scene2.lseq"
.ad
.RE
.LP
Or a combination of both.
.LP
The following options may be given to
.BR lplay :
.TP 10
.BI \-c " file"
.RB ( \-\-config=\fIfile\fP )
Get show configuration information from the specified
.IR file .
This is necessary for Lumos programs such as
.B lplay
to know what hardware is part of the show, how to communicate with it, and
therefore how to interpret what the sequence files are describing.
Note that the
.I file
parameter may consist of multiple comma-delimited filenames if the show configuration
is stored in several files.
.TP
.BI \-D " file"
.RB ( \-\-debug=\fIfile\fP )
Write debugging information to the specified
.IR file .
This is probably only interesting to Lumos developers and maintainers.
.TP
.B \-h
.RB ( \-\-help )
Print a basic help message and exit.
.TP
.BI \-s " mS"
.RB ( \-\-skew=\fImS\fP )
Delay all the events in the sequence(s) by the given number of milliseconds.
This can assist if there are timing issues between the audio track and
the events.
.TP
.B \-T
.RB ( \-\-test )
Run the sequences in \*(lqtest mode\*(rq.  This performs a dry run of the
scene, but instead of actually sending commands to any hardware, 
.B lplay
prints out what it would be doing, along with the scheduled time each event
was supposed to take place and the actual measured time when it occurred
during the test run.
.TP
.B \-v
.RB ( \-\-verbose )
Print information about the sequence, show configuration, and other 
supposedly interesting facts about the scene playback operation.
.TP
.B \-\-version
Prints the version number of the program and exits.
.TP
.B \-x
.RB ( \-\-no\-audio )
If no audio tracks will be used with any of the sequences named on the command line,
this option can be used to tell 
.B lplay
not to even bother loading up the sound support libraries or initializing the audio
subsystem interface.
.SH "SEE ALSO"
.LP
.BR lcheck (1),
.BR lumos (1),
.BR lumos-sequence (5).
.SH VERSION
.LP
This document describes version 0.6.1 of
.BR lplay .
.SH HISTORY
.LP
This utility appeared in Lumos version 0.1, but was originally called
.BR playsequence .
It was renamed
.B lplay
beginning with version 0.3.
.SH COPYRIGHT
.LP
Lumos Light Orchestration System,
Copyright \(co 2005\-2009, 2011, 2012, 2013 by Steven L. Willoughy, Aloha, OR, USA.
All Rights Reserved.  Licensed under the terms and conditions of the
Open Software License version 3.0.  See the
.B LICENSE
file accompanying the Lumos software distribution for full terms and
conditions of use, disclaimer of warranty, limitation of liability
and other information, or see:
.br
http://www.opensource.org/licenses/osl-3.0.php.
.SH AUTHOR
.LP
Steve Willoughby, support@alchemy.com
.SH BUGS
.LP
.\" Needs a way to specify repeats, loops, and similar effects.  
Real-time event
cues or external sensor triggers would \" also 
be nice to add.
.LP
.\"Test mode should warn about circuit capacity overload conditions.  This is 
.\"currently not implemented.  However, the
.\".BR lpower (1)
.\"utility provides a static check for power overloads before running the actual
.\"show at all.  This is preferred so overloads can be avoided before they happen.
