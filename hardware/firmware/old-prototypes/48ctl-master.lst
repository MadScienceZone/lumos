MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@     @   @@@    @@@   @@@@@  @          48-Channel SSR Controller Board  @@
                      00007 ;@@    @@  @   @  @   @    @    @          Firmware Version 2.0.2           @@
                      00008 ;@@   @ @  @   @  @        @    @                                           @@
                      00009 ;@@  @  @   @@@   @        @    @          For use with controller hardware @@
                      00010 ;@@ @@@@@  @   @  @        @    @          revision 3.1 (boards marked as   @@
                      00011 ;@@     @  @   @  @   @    @    @          "48CTL-3-1")                     @@
                      00012 ;@@     @   @@@    @@@     @    @@@@@                                       @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2004, 2005, 2006, 2007 Steven L. Willoughby, Aloha, Oregon,
                      00017 ; USA.  All Rights Reserved.
                      00018 ;
                      00019 ; $Header: /usr/local/cvsroot/ssr/firmware/48ctl-master.lst,v 1.3 2007/11/20 06:19:27 steve Exp $
                      00020 ;
                      00021 ; Target Microcontroller is PIC16F877A and/or PIC16F777, Q=20MHz
                      00022 ;  (200nS instruction cycle) (The master MUST be an 877A, the slave MAY
                      00023 ;  be either.)
                      00024 ; Serial control (RS-485) at 19.2kbps
                      00025 ;
                      00026 ; *** THIS IS THE MASTER MCU FIRMWARE CODE.
                      00027 ; *** IT MUST BE FLASHED INTO U2 (THE UPPER MCU CHIP ON THE BOARD).
                      00028 ; *** This chip receives all the serial commands, determines which are
                      00029 ; *** addressed to this controller unit, and either acts on the commands
                      00030 ; *** directly or passes them down to the slave MCU to be acted upon by
                      00031 ; *** it.
                      00032 ; *** ** THIS CODE MUST RUN ON A PIC16F877A MICROCONTROLLER ** @@P=877@@
                      00033 ;
                      00034 ;=============================================================================
                      00035 ; HARDWARE DESCRIPTION
                      00036 ;-----------------------------------------------------------------------------
                      00037 ;
                      00038 ;  PIC16F777/877A Microcontroller I/O pin assignments:
                      00039 ;                        ________   _________
                      00040 ;                       |o       \_/         |
                      00041 ;     Vpp /RESET -->  1 | /MCLR      PGD/RB7 | 40 <-> PGD
                      00042 ;         /SSR16 <--  2 | RA0        PGC/RB6 | 39 <-- PGC
                      00043 ;         /SSR14 <--  3 | RA1            RB5 | 38 --> /SSR15
                      00044 ;         /SSR12 <--  4 | RA2            RB4 | 37 --> /SSR13
                      00045 ;         /SSR10 <--  5 | RA3            RB3 | 36 --> /SSR11
                      00046 ;         /SSR08 <--  6 | RA4 (OD)       RB2 | 35 --> /SSR09
                      00047 ;        ACT LED <--  7 | RA5            RB1 | 34 --> /SSR07
                      00048 ;        GRN LED <--  8 | RE0        INT/RB0 | 33 <-- ZC INT
                      00049 ;        YEL LED <--  9 | RE1    PIC     VDD | 32 --- +5V
                      00050 ;        RED LED <-- 10 | RE2    16F     VSS | 31 --- GND
                      00051 ;            +5V --- 11 | VDD    877A    RD7 | 30 --> /SSR17
                      00052 ;            GND --- 12 | VSS     or     RD6 | 29 --> /SSR06
                      00053 ;           xtal --- 13 | OSC    777     RD5 | 28 --> /SSR05
                      00054 ;             +----- 14 | OSC            RD4 | 27 --> /SSR18
                      00055 ;         /SSR04 <-- 15 | RC0         RX/RC7 | 26 <-- Serial RxD
                      00056 ;         /SSR19 <-- 16 | RC1         TX/RC6 | 25 --> Serial TxD
                      00057 ;         /SSR03 <-- 17 | RC2            RC5 | 24 --> /SSR02
                      00058 ;         /SSR01 <-- 18 | RC3            RC4 | 23 --> /SSR00
                      00059 ;         /SSR23 <-- 19 | RD0            RD3 | 22 --> /SSR22
                      00060 ;         /SSR21 <-- 20 | RD1            RD2 | 21 --> /SSR20
                      00061 ;                       |____________________|
                      00062 ;
                      00063 ; Note that the '877A can be used for either master or slave, but the '777
                      00064 ; can ONLY be used for the slave processor.
                      00065 ;
                      00066 ;-----------------------------------------------------------------------------
                      00067 ; I/O PORT ASSIGNMENTS
                      00068 ;-----------------------------------------------------------------------------
                      00069 ;
                      00070 ;          7   6   5   4   3   2   1   0
                      00071 ; PORT RA --- --- ACT /08 /10 /12 /14 /16
                      00072 ;          <OSC>   O   O   O   O   O   O
                      00073 ;
                      00074 ; PORT RB --- --- /15 /13 /11 /09 /07 ---
                      00075 ;          <PGM>   O   O   O   O   O  INT
                      00076 ;
                      00077 ; PORT RC --- --- /02 /00 /01 /03 /19 /04
                      00078 ;          <I/O>   O   O   O   O   O   O
                      00079 ;
                      00080 ; PORT RD /17 /06 /05 /18 /22 /20 /21 /23
                      00081 ;          O   O   O   O   O   O   O   O
                      00082 ;
                      00083 ; PORT RE --- --- --- --- --- RED YEL GRN
                      00084 ;                              O   O   O
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00085 ;
                      00086 ;
                      00087 ; THESE SSR LINES ARE NEGATIVE-LOGIC CONTROLLED!
                      00088 ; (0=ON, 1=OFF)
                      00089 ;
                      00090 ;=============================================================================
                      00091 ; MEMORY MAP (At least the parts we directly care about)
                      00092 ;-----------------------------------------------------------------------------
                      00093 ;
                      00094 ;-----------------------------------------------------------------------------
                      00095 ; ALL BANKS
                      00096 ;-----------------------------------------------------------------------------
                      00097 ;
                      00098 ;
                      00099 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00100 ; $000 INDF          |                                                       |
                      00101 ;                    |  Access register indirect [FSR]                       |
                      00102 ;                    |______|______|______|______|______|______|______|______|
                      00103 ; $002 PCL           |                                                       |
                      00104 ;                    |                         PC<7:0>                       |
                      00105 ;                    |______|______|______|______|______|______|______|______|
                      00106 ; $003 STATUS        |      |      |      |  __  |  __  |      |      |      |
                      00107 ;                    | IRP  |  RP1 |  RP0 |  TO  |  PD  |  Z   |  DC  |  C   |
                      00108 ;                    |______|______|______|______|______|______|______|______|
                      00109 ; $004 FSR           |                                                       |
                      00110 ;                    |  Address of target of INDF pseudo-register            |
                      00111 ;                    |______|______|______|______|______|______|______|______|
                      00112 ; $00A PCLATH        |////////////////////|                                  |
                      00113 ;                    |////////////////////|      PC<12:8> latch register     |
                      00114 ;                    |////////////////////|______|______|______|______|______|
                      00115 ; $00B INTCON        |      |      |      |      |      |      |      |      |
                      00116 ;                    | GIE  | PEIE |TMR0IE| INTE | RBIE |TMR0IF| INTF | RBIF |
                      00117 ;                    |______|______|______|______|______|______|______|______|
                      00118 ; $070 W_TEMP        |                                                       |
                      00119 ;                    |  Temporary storage for W during int service routine   |
                      00120 ;                    |______|______|______|______|______|______|______|______|
                      00121 ; $071 STATUS_TEMP   |                                                       |
                      00122 ;                    |  Temporary storage for STATUS during ISR              |
                      00123 ;                    |______|______|______|______|______|______|______|______|
                      00124 ; $072 I             |                                                       |
                      00125 ;                    |  General-purpose data counter                         |
                      00126 ;                    |______|______|______|______|______|______|______|______|
                      00127 ; $073 J             |                                                       |
                      00128 ;                    |  General-purpose data counter                         |
                      00129 ;                    |______|______|______|______|______|______|______|______|
                      00130 ; $074 K             |                                                       |
                      00131 ;                    |  General-purpose data counter                         |
                      00132 ;                    |______|______|______|______|______|______|______|______|
                      00133 ; $075 X             |                                                       |
                      00134 ;                    |  General-purpose data register                        |
                      00135 ;                    |______|______|______|______|______|______|______|______|
                      00136 ; $076 Y             |                                                       |
                      00137 ;                    |  General-purpose data register                        |
                      00138 ;                    |______|______|______|______|______|______|______|______|
                      00139 ; $077 PCLATH_TEMP   |                                                       |
                      00140 ;                    |  Temporary storage for PCLATH during ISR              |
                      00141 ;                    |______|______|______|______|______|______|______|______|
                      00142 ; $078               |      |      |      |      |      |      |      |      |
                      00143 ;                    |      |      |      |      |      |      |      |      |
                      00144 ;                    |______|______|______|______|______|______|______|______|
                      00145 ;
                      00146 ;       .                                        .
                      00147 ;       .                                        .
                      00148 ;       .                                        .
                      00149 ;
                      00150 ;                     _______________________________________________________
                      00151 ; $07F               |      |      |      |      |      |      |      |      |
                      00152 ;                    |      |      |      |      |      |      |      |      |
                      00153 ;                    |______|______|______|______|______|______|______|______|
                      00154 ;
                      00155 ;
                      00156 ;-----------------------------------------------------------------------------
                      00157 ; BANK 0
                      00158 ;-----------------------------------------------------------------------------
                      00159 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00160 ; $001 TMR0          |                                                       |
                      00161 ;   (bank 2 too)     |                                                       |
                      00162 ;                    |______|______|______|______|______|______|______|______|
                      00163 ; $005 PORTA         |/////////////|      | _____| _____| _____| _____| _____|
                      00164 ;                    |/////////////| ACT  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00165 ;                    |/////////////|______|______|______|______|______|______|
                      00166 ; $006 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00167 ;   (bank 2 too)     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00168 ;                    |/////////////|______|______|______|______|______|//////|
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00169 ; $007 PORTC         |/////////////| _____| _____| _____| _____| _____| _____|
                      00170 ;                    |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00171 ;                    |/////////////|______|______|______|______|______|______|
                      00172 ; $008 PORTD         | _____| _____| _____| _____| _____| _____| _____| _____|
                      00173 ;                    | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00174 ;                    |______|______|______|______|______|______|______|______|
                      00175 ; $009 PORTE         |//////////////////////////////////|      |      |      |
                      00176 ;                    |//////////////////////////////////| RED  | YEL  | GRN  |
                      00177 ;                    |//////////////////////////////////|______|______|______|
                      00178 ; $00C PIR1          |      |      |      |      |      |      |      |      |
                      00179 ;                    |PSPIF | ADIF | RCIF | TXIF |SSPIF |CCP1IF|TMR2IF|TMR1IF|
                      00180 ;                    |______|______|______|______|______|______|______|______|
                      00181 ; $00D PIR2          |      |      |      |      |      |      |      |      |
                      00182 ;                    |      | CMIF |      | EEIF |BCLIF |      |      |CCP2IF|
                      00183 ;                    |______|______|______|______|______|______|______|______|
                      00184 ; $00E TMR1L         |                                                       |
                      00185 ;                    | Holding register for LSB of TMR1 register             |
                      00186 ;                    |______|______|______|______|______|______|______|______|
                      00187 ; $00F TMR1H         |                                                       |
                      00188 ;                    | Holding register for MSB of TMR1 register             |
                      00189 ;                    |______|______|______|______|______|______|______|______|
                      00190 ; $010 T1CON         |//////|      |             |T1    |______|      |      |
                      00191 ;                    |//////|T1RUN |  T1CKPS1,0  |OSCEN |T1SYNC|TMR1CS|TMR1ON|
                      00192 ;                    |//////|______|______|______|______|______|______|______|
                      00193 ; $011 TMR2          |                                                       |
                      00194 ;                    | Timer2 module register                                |
                      00195 ;                    |______|______|______|______|______|______|______|______|
                      00196 ; $012 T2CON         |//////|                           |      |             |
                      00197 ;                    |//////|       TOUTPS3,2,1,0       |TMR2ON|  T2CKPS1,0  |
                      00198 ;                    |//////|______|______|______|______|______|______|______|
                      00199 ; $018 RCSTA         |      |      |      |      |      |      |      |      |
                      00200 ;                    | SPEN |  RX9 | SREN | CREN |ADDEN | FERR | OERR | RX9D |
                      00201 ;                    |______|______|______|______|______|______|______|______|
                      00202 ; $019 TXREG         |                                                       |
                      00203 ;                    | AUSART transmit data register                         |
                      00204 ;                    |______|______|______|______|______|______|______|______|
                      00205 ; $01A RCREG         |                                                       |
                      00206 ;                    | AUSART receive data register                          |
                      00207 ;                    |______|______|______|______|______|______|______|______|
                      00208 ; $01F ADCON0        |      |      |      |      |      |      |//////|      |
                      00209 ;                    | ADCS1| ADCS0| CHS2 | CHS1 | CHS0 |  GO  |//////| ADON |
                      00210 ;                    |______|______|______|______|______|______|//////|______|
                      00211 ;
                      00212 ; General-purpose data files
                      00213 ;                     _______________________________________________________
                      00214 ; $020 SSR00_VAL     |      |      |      |                                  |
                      00215 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00216 ;                    |______|______|______|______|______|______|______|______|
                      00217 ; $021 SSR01_VAL     |      |      |      |                                  |
                      00218 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00219 ;                    |______|______|______|______|______|______|______|______|
                      00220 ;
                      00221 ;       .                                        .
                      00222 ;       .                                        .
                      00223 ;       .                                        .
                      00224 ;
                      00225 ;                     _______________________________________________________
                      00226 ; $037 SSR23_VAL     |      |      |      |                                  |
                      00227 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00228 ;                    |______|______|______|______|______|______|______|______|
                      00229 ; $038 PORTA_BUF     |/////////////|      | _____| _____| _____| _____| _____|
                      00230 ;                    |/////////////| ACT  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00231 ;                    |/////////////|______|______|______|______|______|______|
                      00232 ; $039 PORTB_BUF     |/////////////| _____| _____| _____| _____| _____|//////|
                      00233 ;                    |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00234 ;                    |/////////////|______|______|______|______|______|//////|
                      00235 ; $03A PORTC_BUF     |/////////////| _____| _____| _____| _____| _____| _____|
                      00236 ;                    |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00237 ;                    |/////////////|______|______|______|______|______|______|
                      00238 ; $03B PORTD_BUF     | _____| _____| _____| _____| _____| _____| _____| _____|
                      00239 ;                    | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00240 ;                    |______|______|______|______|______|______|______|______|
                      00241 ; $03C PORTE_BUF     |//////////////////////////////////|      |      |      |
                      00242 ;                    |//////////////////////////////////| RED  | YEL  | GRN  |
                      00243 ;                    |//////////////////////////////////|______|______|______|
                      00244 ; $03D PHASE_OFFSET  |                                                       |
                      00245 ;                    |  Number of slices to delay from ZC int to slice 0     |
                      00246 ;                    |______|______|______|______|______|______|______|______|
                      00247 ; $03E SSR_ID        |      |      |      |                                  |
                      00248 ;                    |MY_SSR|ILLSSR|      |  Local device offset from SSR00  |
                      00249 ;                    |______|______|______|______|______|______|______|______|
                      00250 ; $03F FLASH_CT      |                                                       |
                      00251 ;                    |  Value to be flashed on an LED                        |
                      00252 ;                    |______|______|______|______|______|______|______|______|
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00253 ; $040 DEVICE_ID     |///////////////////////////|                           |
                      00254 ;                    |///////////////////////////| This device's ID number   |
                      00255 ;                    |///////////////////////////|______|______|______|______|
                      00256 ; $041 GRN_TMR       |  If SSR_STATE<GRNEN>                                  |
                      00257 ;                    |  Number of 1/120sec until green LED flips state       |
                      00258 ;                    |______|______|______|______|______|______|______|______|
                      00259 ; $042 YEL_TMR       |  If SSR_STATE<YELEN>                                  |
                      00260 ;                    |  Number of 1/120sec until yellow LED turns off        |
                      00261 ;                    |______|______|______|______|______|______|______|______|
                      00262 ; $043 RED_TMR       |  If SSR_STATE<REDEN>                                  |
                      00263 ;                    |  Number of 1/120sec until red LED turns off           |
                      00264 ;                    |______|______|______|______|______|______|______|______|
                      00265 ; $044 SSR_STATE     |      |      |      |      |      |                    |
                      00266 ;                    |INCYC |PRECYC|REDEN |YELEN |GRNEN |       STATE        |
                      00267 ;                    |______|______|______|______|______|______|______|______|
                      00268 ; $045 CUR_SLICE     |  If SSR_STATE<INCYC>                                  |
                      00269 ;                    |  Current slice (counts down) of AC half-wave          |
                      00270 ;                    |______|______|______|______|______|______|______|______|
                      00271 ; $046 CUR_PRE       |  If SSR_STATE<PRECYC>                                 |
                      00272 ;                    |  Countdown from ZC interrupt to start of AC half-wave |
                      00273 ;                    |______|______|______|______|______|______|______|______|
                      00274 ; $047 RX_BYTE       |                                                       |
                      00275 ;                    |  Received byte from serial network                    |
                      00276 ;                    |______|______|______|______|______|______|______|______|
                      00277 ; $048 SSR_STATE2    |SLICE |DIM_  |DIM_  |      |      |      |      |      |
                      00278 ;                    |_UPD  |START |END   |REDOFF|YELOFF|GRNBLK|SSRUPD| TXQUE|
                      00279 ;                    |______|______|______|______|______|______|______|______|
                      00280 ; $049 DATA_BUF      |                                                       |
                      00281 ;                    |  Holding area for data of command being parsed        |
                      00282 ;                    |______|______|______|______|______|______|______|______|
                      00283 ; $04A ACT_TMR       |  If SSR_STATE3<ACTEN>                                 |
                      00284 ;                    |  Number of 1/120sec until ACT LED turns off           |
                      00285 ;                    |______|______|______|______|______|______|______|______|
                      00286 ; $04B SSR_STATE3    |      |      |      |      |      |      |      |      |
                      00287 ;                    |      |      |      |      |      |ACTEN |ACTOFF|PRIVEN|
                      00288 ;                    |______|______|______|______|______|______|______|______|
                      00289 ; $04C               |      |      |      |      |      |      |      |      |
                      00290 ;                    |      |      |      |      |      |      |      |      |
                      00291 ;                    |______|______|______|______|______|______|______|______|
                      00292 ; $04D               |      |      |      |      |      |      |      |      |
                      00293 ;                    |      |      |      |      |      |      |      |      |
                      00294 ;                    |______|______|______|______|______|______|______|______|
                      00295 ; $04E TXBUF_QUEUE   |                           |                           |
                      00296 ;                    |             5             | Addr of next byte to queue|
                      00297 ;                    |______|______|______|______|______|______|______|______|
                      00298 ; $04F TXBUF_SEND    |                           |                           |
                      00299 ;                    |             5             | Addr of next byte to send |
                      00300 ;                    |______|______|______|______|______|______|______|______|
                      00301 ; $050 TXBUF         |                                                       |
                      00302 ;                    |  Transmitter output buffer (byte 1 of 16)             |
                      00303 ;                    |______|______|______|______|______|______|______|______|
                      00304 ;
                      00305 ;       .                                        .
                      00306 ;       .                                        .
                      00307 ;       .                                        .
                      00308 ;
                      00309 ;                     _______________________________________________________
                      00310 ; $05F               |                                                       |
                      00311 ;                    |  Transmitter output buffer (byte 16 of 16)            |
                      00312 ;                    |______|______|______|______|______|______|______|______|
                      00313 ; $060               |      |      |      |      |      |      |      |      |
                      00314 ;                    |      |      |      |      |      |      |      |      |
                      00315 ;                    |______|______|______|______|______|______|______|______|
                      00316 ;
                      00317 ;       .                                        .
                      00318 ;       .                                        .
                      00319 ;       .                                        .
                      00320 ;
                      00321 ;                     _______________________________________________________
                      00322 ; $06F               |      |      |      |      |      |      |      |      |
                      00323 ;                    |      |      |      |      |      |      |      |      |
                      00324 ;                    |______|______|______|______|______|______|______|______|
                      00325 ;
                      00326 ;-----------------------------------------------------------------------------
                      00327 ; BANK 1
                      00328 ;-----------------------------------------------------------------------------
                      00329 ;
                      00330 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00331 ; $085 TRISA         |                                                       |
                      00332 ;                    | Port A tri-state bitmask (1=input, 0=output)          |
                      00333 ;                    |______|______|______|______|______|______|______|______|
                      00334 ; $086 TRISB         |                                                       |
                      00335 ;  (Bank 3 too)      | Port B tri-state bitmask (1=input, 0=output)          |
                      00336 ;                    |______|______|______|______|______|______|______|______|
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00337 ; $087 TRISC         |                                                       |
                      00338 ;                    | Port C tri-state bitmask (1=input, 0=output)          |
                      00339 ;                    |______|______|______|______|______|______|______|______|
                      00340 ; $088 TRISD         |                                                       |
                      00341 ;                    | Port D tri-state bitmask (1=input, 0=output)          |
                      00342 ;                    |______|______|______|______|______|______|______|______|
                      00343 ; $089 TRISE         |      |      |      | PSP  |//////|                    |
                      00344 ;                    |  IBF | OBF  | IBOV | MODE |//////| Port E tri-state   |
                      00345 ;                    |______|______|______|______|//////|______|______|______|
                      00346 ; $08C PIE1          |      |      |      |      |      |      |      |      |
                      00347 ;                    |PSPIE | ADIE | RCIE | TXIE |SSPIE |CCP1IE|TMR2IE|TMR1IE|
                      00348 ;                    |______|______|______|______|______|______|______|______|
                      00349 ; $08D PIE2          |      |      |      |      |      |      |      |      |
                      00350 ;                    |      | CMIE |      | EEIE |BCLIE |      |      |CCP2IE|
                      00351 ;                    |______|______|______|______|______|______|______|______|
                      00352 ; $092 PR2           |                                                       |
                      00353 ;                    | Timer 2 period register                               |
                      00354 ;                    |______|______|______|______|______|______|______|______|
                      00355 ; $098 TXSTA         |      |      |      |      |//////|      |      |      |
                      00356 ;                    | CSRC |  TX9 | TXEN | SYNC |//////| BRGH | TRMT | TX9D |
                      00357 ;                    |______|______|______|______|//////|______|______|______|
                      00358 ; $099 SPBRG         |                                                       |
                      00359 ;                    | Baud Rate Generator Value                             |
                      00360 ;                    |______|______|______|______|______|______|______|______|
                      00361 ; $09F ADCON1        |      |      |//////|//////|      |      |      |      |
                      00362 ;                    | ADFM | ADCS2|//////|//////| PCFG3| PCFG2| PCFG1| PCFG0|
                      00363 ;                    |______|______|//////|//////|______|______|______|______|
                      00364 ; $0AD               |      |      |      |      |      |      |      |      |
                      00365 ;                    |      |      |      |      |      |      |      |      |
                      00366 ;                    |______|______|______|______|______|______|______|______|
                      00367 ;
                      00368 ;       .                                        .
                      00369 ;       .                                        .
                      00370 ;       .                                        .
                      00371 ;
                      00372 ;                     _______________________________________________________
                      00373 ; $0EF               |      |      |      |      |      |      |      |      |
                      00374 ;                    |      |      |      |      |      |      |      |      |
                      00375 ;                    |______|______|______|______|______|______|______|______|
                      00376 ;
                      00377 ;-----------------------------------------------------------------------------
                      00378 ; BANK 2
                      00379 ;-----------------------------------------------------------------------------
                      00380 ;
                      00381 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00382 ; $101 TMR0          |                                                       |
                      00383 ;   (bank 0 too)     | Timer0 module register                                |
                      00384 ;                    |______|______|______|______|______|______|______|______|
                      00385 ; $106 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00386 ;   (bank 0 too)     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00387 ;                    |/////////////|______|______|______|______|______|//////|
                      00388 ; $10C EEDATA        |                                                       |
                      00389 ;                    | EEPROM Data register (LSB)                            |
                      00390 ;                    |______|______|______|______|______|______|______|______|
                      00391 ; $10D EEADR         |                                                       |
                      00392 ;                    | EEPROM Address register (LSB)                         |
                      00393 ;                    |______|______|______|______|______|______|______|______|
                      00394 ; $10E EEDATH        |/////////////|                                         |
                      00395 ;                    |/////////////| EEPROM Data register (MSB)              |
                      00396 ;                    |/////////////|______|______|______|______|______|______|
                      00397 ; $10F EEADRH        |////////////////////|                                  |
                      00398 ;                    |////////////////////| EEPROM Address register (MSB)    |
                      00399 ;                    |////////////////////|______|______|______|______|______|
                      00400 ; $120               |      |      |      |      |      |      |      |      |
                      00401 ;                    |      |      |      |      |      |      |      |      |
                      00402 ;                    |______|______|______|______|______|______|______|______|
                      00403 ;
                      00404 ;       .                                        .
                      00405 ;       .                                        .
                      00406 ;       .                                        .
                      00407 ;
                      00408 ;                     _______________________________________________________
                      00409 ; $16F               |      |      |      |      |      |      |      |      |
                      00410 ;                    |      |      |      |      |      |      |      |      |
                      00411 ;                    |______|______|______|______|______|______|______|______|
                      00412 ;
                      00413 ;-----------------------------------------------------------------------------
                      00414 ; BANK 3
                      00415 ;-----------------------------------------------------------------------------
                      00416 ;
                      00417 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00418 ; $181 OPTION_REG    | ____ |      |      |      |      |                    |
                      00419 ;                    | RBPU |INTEDG| T0CS | T0SE | PSA  |      PS2,1,0       |
                      00420 ;                    |______|______|______|______|______|______|______|______|
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00421 ; $186 TRISB         |                                                       |
                      00422 ;  (Bank 1 too)      | Port B tri-state bitmask (1=input, 0=output)          |
                      00423 ;                    |______|______|______|______|______|______|______|______|
                      00424 ; $18C EECON1        |      |      |      |      |      |      |      |      |
                      00425 ;                    |EEPGD |      |      |      |WRERR | WREN |  WR  |  RD  |
                      00426 ;                    |______|______|______|______|______|______|______|______|
                      00427 ; $18D EECON2        |                                                       |
                      00428 ;                    | EEPROM Control Register (magic register)              |
                      00429 ;                    |______|______|______|______|______|______|______|______|
                      00430 ; $1A0               |      |      |      |      |      |      |      |      |
                      00431 ;                    |      |      |      |      |      |      |      |      |
                      00432 ;                    |______|______|______|______|______|______|______|______|
                      00433 ;
                      00434 ;       .                                        .
                      00435 ;       .                                        .
                      00436 ;       .                                        .
                      00437 ;
                      00438 ;                     _______________________________________________________
                      00439 ; $1EF               |      |      |      |      |      |      |      |      |
                      00440 ;                    |      |      |      |      |      |      |      |      |
                      00441 ;                    |______|______|______|______|______|______|______|______|
                      00442 ;
                      00443 ;
                      00444 ;=============================================================================
                      00445 ; IMPLEMENTATION NOTES
                      00446 ;-----------------------------------------------------------------------------
                      00447 ;
                      00448 ; The SSR controller firmware consists of a number of somewhat independent
                      00449 ; subsystems:
                      00450 ;
                      00451 ; START
                      00452 ;       Initializes the microcontroller, starts up the required peripherals,
                      00453 ;       indicates the device ID on the front panel, and enters the main loop
                      00454 ;
                      00455 ; ISR
                      00456 ;       The interrupt service routine manages a set of counters and timers:
                      00457 ;       1. At each AC line zero-crossing point, we reset a two-stage waveform
                      00458 ;          slicing timing chain which governs the ability for the SSRs to dim
                      00459 ;          incandescent lamps plugged into them;
                      00460 ;       2. Each front panel LED has a counter for how long their current
                      00461 ;          status is to be held, to allow a human to have enough time to
                      00462 ;          see the LED before it would be extinguished.
                      00463 ;
                      00464 ; MAIN_LOOP
                      00465 ;       Manages the display of the front panel LEDs
                      00466 ;       Updates the status of the SSR lines if it's time to do so
                      00467 ;       Receives a character from the serial line if one's waiting
                      00468 ;
                      00469 ; INTERPRETER
                      00470 ;       When a byte is received on the serial line, it is processed by
                      00471 ;       a small state machine.  The current state is held in SSR_STATE<2:0>.
                      00472 ;
                      00473 ;-----------------------------------------------------------------------------
                      00474 ; Command Protocol:
                      00475 ;                     _______________________________________________________
                      00476 ; Command Byte:      |      |                    |                           |
                      00477 ;                    |  1   |    Command code    |   Target device address   |
                      00478 ;                    |______|______|______|______|______|______|______|______|
                      00479 ;
                      00480 ; Any byte with its MSB set is the beginning of a command.  If the target
                      00481 ; device matches this unit's address, the state machine kicks into gear and
                      00482 ; processes the command (which may require some following data bytes, all
                      00483 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00484 ; byte.
                      00485 ;
                      00486 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00487 ; in the middle of interpreting a multi-byte command.
                      00488 ;
                      00489 ; Commands recognized:
                      00490 ;       0: All channels off
                      00491 ;       1: Set/clear single channel (requires channel ID byte)
                      00492 ;       2: Set channel to value (requires channel ID and value bytes)
                      00493 ;       3: Reserved
                      00494 ;       4: Reserved
                      00495 ;       5: Reserved
                      00496 ;       6: Reserved
                      00497 ;       7: Administrative command (follow-on byte further decodes):
                      00498 ;          00pppppp Set phase offset=p and display on LEDs
                      00499 ;          010baaaa Set device address=aaaa; b=a<0>
                      00500 ;          01100000 Shutdown device
                      00501 ;          01100001 Disable administrative commands
                      00502 ;          01100010 Reserved
                      00503 ;             .         .
                      00504 ;             .         .
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00505 ;             .         .
                      00506 ;          01101111 Reserved
                      00507 ;          0111xxxx Internal commands MASTER->SLAVE:
                      00508 ;                   011100xx  Reserved
                      00509 ;                   011101yr  Display RED and/or YEL LED 2S
                      00510 ;                   01111gyr  HALT with <g><y><r> displayed on LEDs
                      00511 ;
                      00512 ;                     _______________________________________________________
                      00513 ; Channel ID:        |      |      |                                         |
                      00514 ;                    |  0   | ON   |               Channel ID                |
                      00515 ;                    |______|______|______|______|______|______|______|______|
                      00516 ; The ON bit <6> determines whether the channel is being turned on (1) or
                      00517 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00518 ; setting the channel to a specific dimmer value.
                      00519 ;
                      00520 ;                     _______________________________________________________
                      00521 ; Dimmer Value:      |      |      |      |                                  |
                      00522 ;                    |  0   |   x  |   x  | Brightness level (0=off, 31=on)  |
                      00523 ;                    |______|______|______|______|______|______|______|______|
                      00524 ;
                      00525 ;-----------------------------------------------------------------------------
                      00526 ; State Machine Details
                      00527 ;
                      00528 ; Normally sits at state 0 (Idle) where it pretty much spins free waiting
                      00529 ; for the start of a command to come along.
                      00530 ;  ___________________
                      00531 ; | 4 | ADMIN         |
                      00532 ; |___| Waiting for   |
                      00533 ; |     Sub-command   |
                      00534 ; |___________________|
                      00535 ;         ^  |
                      00536 ;         |  |
                      00537 ;         |  |
                      00538 ;         |  |
                      00539 ;  _______|__V________                   _________________
                      00540 ; | 0 | IDLE          |                 | 1 | SETCHAN     |
                      00541 ; |___|               |---------------->|___| Waiting for |
                      00542 ; |                   |<----------------|     Channel byte|
                      00543 ; |___________________|<-------+        |_________________|
                      00544 ;           |                  |
                      00545 ;           |                  |
                      00546 ;           |                  |
                      00547 ;           |                  |
                      00548 ;  _________V_________         |         _________________
                      00549 ; | 2 | DIMCHAN1      |        +--------| 3 | DIMCHAN2    |
                      00550 ; |___| Waiting for   |---------------->|___| Waiting for |
                      00551 ; |     Channel byte  |                 |     Value byte  |
                      00552 ; |___________________|                 |_________________|
                      00553 ;
                      00554 ;
                      00555 ;-----------------------------------------------------------------------------
                      00556 ; System Timing Notes
                      00557 ;
                      00558 ; The system has some fairly specific real-time timing requirements in order
                      00559 ; to function properly.  The main external event we're synchronized to is the
                      00560 ; point where the AC waveform crosses the 0V line (the "zero crossing" point).
                      00561 ;
                      00562 ; An optoisolator on the controller board is connected to the AC input of the
                      00563 ; transformer and sends a positive-logic pulse to the INT pin of the micro-
                      00564 ; controller every time the AC line crosses 0V.  (Actually, the leading edge
                      00565 ; will slightly lead the zero crossing point and the trailing edge will
                      00566 ; slightly lag behind it.)  So we enter our ISR once every 1/120 sec
                      00567 ; (assuming US-standard 60Hz power).  For reference, this is 0.00833333 sec
                      00568 ; or enough time for 41,666.666 instructions to be executed between each
                      00569 ; interrupt.
                      00570 ;
                      00571 ; (Revised; earlier versions of this firmware used 64 levels on the dimmers
                      00572 ; --which are probably too many--and this didn't allow enough time for the
                      00573 ; main loop to run, so we backed it off to 32 here.  We will only run into
                      00574 ; trouble now if all--or most--channels are set to the same level, since
                      00575 ; that one slice may run slightly over its allotted time, but the next slice
                      00576 ; will be shorter as a result and we'll catch back up within a tiny fraction
                      00577 ; of a cycle.)
                      00578 ;
                      00579 ; We divide the half-wave into "slices".  We need a minimum of 32 slices
                      00580 ; to get 32 levels of dimmer control, but we should add at least one on either
                      00581 ; end in case our timing's slightly off between the ZC points and the free-
                      00582 ; running timer.  For good measure, let's throw in a couple more to allow for
                      00583 ; pin settling times, minimum turn-on times for the triacs and just to be
                      00584 ; paranoid.  So let's say 38 slices per half-wave.  This is good, because it
                      00585 ; means that each dimmer level is 1/38th brightness, with the lowest setting
                      00586 ; (other than off) being a minimum of 7/38ths, which means we don't waste
                      00587 ; several dimmer levels below the threshold for an incandescent filament to
                      00588 ; even be visibly on at all.
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00589 ;
                      00590 ; At 38 slices per ZC, each slice is 0.000219298245614 seconds.
                      00591 ; The closest match to this is 0.0002192 sec (a timer value of 137 at 1:8 scale)
                      00592 ; so we're really getting about 38.01703 slices in a half-cycle.
                      00593 ; This works out to around 1,096 instructions per slice, which is more than
                      00594 ; adequate but can get tight if all the channels are at the same dimmer settings,
                      00595 ; but it works well enough.
                      00596 ; We have to be able to handle an incoming byte on the serial port and update all
                      00597 ; the SSRs once in that many instructions.
                      00598 ;
                      00599 ; These times will vary based on what commands are being parsed, the combination
                      00600 ; of SSRs on, off, dim, or at what brightness level, but a general idea is:
                      00601 ;
                      00602 ;    ROUTINE   IDLE  BUSY (total instruction cycles)
                      00603 ;     ISR              46
                      00604 ;     LEDs       12    16
                      00605 ;     SIO Poll    6    17
                      00606 ;     Parser     10     7, 23, 64, up to 129+
                      00607 ;     SSR Upd    22   373 up to 1,141+
                      00608 ;
                      00609 ; So when nothing at all is happening, we only need around 40 instruction
                      00610 ; cycles (0.000008 sec) per slice (3.6% of the available slice time) to run
                      00611 ; an idle main loop iteration.
                      00612 ;
                      00613 ; The overhead of some of the loops and subroutines can be eliminated by
                      00614 ; flattening them into lots of repetitive cut-and-paste inline code.  We do
                      00615 ; have the available program memory to do that, and gain some significant
                      00616 ; runtime performance.  For now, we will keep it less efficient but more
                      00617 ; maintainable until we need that performance.
                      00618 ;
                      00619 ; In the previous (prototype) version of this controller, we took the ZC
                      00620 ; signal from the *secondary* side of the transformer, which meant that it
                      00621 ; was possible for that to be out of phase with the actual AC ZC event, so
                      00622 ; the "phase delay" feature of the event handling code was written to
                      00623 ; compensate for this.  Now that we sample the AC line directly, we set
                      00624 ; this delay to a constant value and that should be good.  We left the
                      00625 ; capability in here, though, to account for any need for adjustment which
                      00626 ; may turn up due to component tolerances, propagation delays, or similar
                      00627 ; things.  We correct for any phase offset by adding a software delay
                      00628 ; from 0-255 (although really only 0-40 make much sense) slices between the ZC
                      00629 ; interrupt and the start of the dimmer cycle of 32 slices.  (The other 6
                      00630 ; slices are idle (not active) slices.)
                      00631 ;
                      00632 ; The value for PHASE_OFFSET should be chosen to start the cycle one or two
                      00633 ; slices into the actual half-wave.  So if there is no phase difference at all
                      00634 ; between sides of the transformer, PHASE_OFFSET shoud be started at 2.
                      00635 ;
                      00636 ; Here's the timeline:
                      00637 ;
                      00638 ;                    REAL                               REAL
                      00639 ;                     ZC                                 ZC
                      00640 ;    |................|..|...............|....|....|.....|..|..............
                      00641 ;    |phase delay------->|               |phase delay------>|
                      00642 ;    |                   |working slices----->|    |        |working slices-->
                      00643 ;    |                                   |    |idle|
                      00644 ;   INT                                 INT
                      00645 ;   (ZC)                                (ZC)
                      00646 ;
                      00647 ; Of course, in the current design, there is no phase shift across
                      00648 ; the transformer, so we'd have the trivial case of PHASE_OFFSET=2 (2 just to
                      00649 ; allow a little fudge room with the free-running slice timer which is not
                      00650 ; *quite* an even factor of the half-wave time):
                      00651 ;
                      00652 ;    REAL                         REAL
                      00653 ;     ZC                           ZC
                      00654 ;    .|..|....................|....|..|.................|
                      00655 ;     |->|                    |    |->|                 |
                      00656 ;     |  |working slices----->|    |  |working slices-->|
                      00657 ;     |  |                    |idle|  |                 |
                      00658 ;    INT                          INT
                      00659 ;
                      00660 ; Since the free-running slice timer isn't exactly in sync with the ZC timing,
                      00661 ; we'll start our working slices some variable fraction of 1/38th of a half-cycle
                      00662 ; each time.  This will cause a "wobble" in brightness level of not more than
                      00663 ; 1/38th brightness level (something less than one brightness increment), which
                      00664 ; ought to be difficult or impossible to notice by looking at an incandescent
                      00665 ; light load.  This is one reason why PHASE_OFFSET should be set to allow 1-2
                      00666 ; idle slices before we start turning on SSRs.
                      00667 ;
                      00668 ; On ZC interrupt, we set CUR_PRE to PHASE_DELAY and set <PRECYC>.
                      00669 ; On TMR2 interrupt, if SSR_STATE<PRECYC>, decrement CUR_PRE.
                      00670 ;   if zero, clear SSR_STATE<PRECYC>, set CUR_SLICE to 32, set <INCYC>,<DIM_START>.
                      00671 ;   if SSR_STATE<INCYC>, decrement CUR_SLICE; if zero, set DIM_END, clr INCYC; else set SLICE_UPD
                      00672 ;
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00673 ; In main polling loop:
                      00674 ;   if DIM_START: turn on "on" SSRs, clear DIM_START
                      00675 ;   if SLICE_UPD: turn on SSR == CUR_SLICE for SSRs with SSRDIM set; clear SLICE_UPD
                      00676 ;   if DIM_END:   turn off all except SSR_ON, clear DIM_END
                      00677 ;
                      00678 ; PRECYC INCYC SLICE_UPD DIM_START DIM_END CUR_PRE CUR_SLICE
                      00679 ;    0     x       x         x        x       x       x
                      00680 ;    1     x       x         x        x       4       x       <--zc
                      00681 ;    1     x       x         x        x       3       x
                      00682 ;    1     x       x         x        x       2       x
                      00683 ;    1     x       x         x        x       1       x
                      00684 ;    0     1     1-->0     1-->0      x       0      31       SSR@31/on turned on
                      00685 ;    0     1     1-->0       0        x       0      30       SSR@30    turned on
                      00686 ;    0     1     1-->0       0        x       0      29       SSR@29    turned on
                      00687 ; ...
                      00688 ;    0     1     1-->0       0        x       0       2       SSR@2     turned on
                      00689 ;    0     1     1-->0       0        x       0       1       SSR@1     turned on
                      00690 ;    0     0     1-->0       0      1-->0     0       0       all non-on turned off
                      00691 ;    0     0       0         0        0       0       0       idle...
                      00692 ; ...
                      00693 ;    1     0       0         0        0       4       0       <--zc
                      00694 ;
                      00695 ;
                      00696 ; We're apparently leaving the call stack half-empty worst-case.
                      00697 ; =============================================================================
                      00698 ;
                      00699 ; Startup LED sequence:
                      00700 ;  --- *set up I/O ports, TRIS bits
                      00701 ;  GYR flash quickly 5 times -- indicates restart of CPU
                      00702 ;  G-- [M] indicates MASTER
                      00703 ;  --R [S] indicates 877A SLAVE
                      00704 ;  -YR [S] indicates 777 SLAVE
                      00705 ;      *set up EEPROM
                      00706 ;      (2s)
                      00707 ;      *start transmitter
                      00708 ;  --- (2s)
                      00709 ;  -Y- flash YEL 1x == ROM ID v2.0
                      00710 ;  --- (2s)
                      00711 ;  G-R [M] GRN steady, flash RED for device ID
                      00712 ;  --- (2s)
                      00713 ;  --R (1s)
                      00714 ;      *set up serial port, interrupt options, etc.
                      00715 ;      (2s)
                      00716 ;      *start receiver
                      00717 ;  --- (.25s)
                      00718 ;  -Y- *slave waits for master
                      00719 ;      *master waits 1s then transmits
                      00720 ;  -YR RED steady, flash YEL MSN of PO
                      00721 ;  -YR YEL steady, flash RED LSN of PO
                      00722 ;  ---
                      00723 ;  GY- GRN blinking slowly => run state
                      00724 ;
                      00725 ;
                      00726 ;
                      00727 ;
                      00728 ; =============================================================================
                      00729 ;
                      00730                 PROCESSOR 16F877A       ; @@P=877@@
                      00731 #include <p16f877a.inc>                 ; @@P=877@@
                      00001         LIST
                      00002 ; P16F877A.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00400         LIST
2007   197E           00732                 __CONFIG        _CP_ALL & _DEBUG_OFF & _WRT_HALF & _CPD_OFF & _LVP_OFF & _BODEN_ON & _PW
                            RTE_OFF & _WDT_ON & _HS_OSC ; @@P=877@@
                      00733 ;
                      00734 ;==============================================================================
                      00735 ; CONSTANTS
                      00736 ;==============================================================================
                      00737 ;
                      00738 ; Flash rates for various LED displays
                      00739 ;
  000000FF            00740 GRN_BLINK_RATE  EQU     .255            ; x 1/120s flash rate for green led
  0000003C            00741 ACT_RX_LEN      EQU     .60             ; x 1/120s active led for Rx data
  00000078            00742 RED_ORERR_LEN   EQU     .120            ; x 1/120s red for data overrun
  000000F0            00743 RED_CMDERR_LEN  EQU     .240            ; x 1/120s red for cmd error
  000000F0            00744 YEL_CMDERR_LEN  EQU     .240            ; x 1/120s yellow for cmd error
  0000001E            00745 SLV_TX_LEN      EQU     .30             ; x 1/120s red for Tx to slave
  0000001E            00746 SLV_RX_LEN      EQU     .30             ; x 1/120s red for Rx from master
  000000F0            00747 SLV_LED_LEN     EQU     .240            ; x 1/120s LED display time
                      00748 ;
                      00749 ;==============================================================================
                      00750 ; COMMAND BYTES
                      00751 ;==============================================================================
                      00752 ;                     ___7______6______5______4______3______2______1______0__
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00753 ; Command Byte:      |      |                    |                           |
                      00754 ;                    |  1   |    Command code    |   Target device address   |
                      00755 ;                    |______|______|______|______|______|______|______|______|
                      00756 ;
  00000007            00757 CMD_BIT         EQU     7               ; X------- Type (cmd=1; data=0)
  00000007            00758 CMD_SW_MASK     EQU     b'00000111'     ; -----XXX Nybble-swapped Command code mask
  00000070            00759 CMD_MASK        EQU     b'01110000'     ; -XXX---- Command code mask
  0000000F            00760 CMD_ADDR_MASK   EQU     b'00001111'     ; ----XXXX Device address mask
                      00761 ;
                      00762 ;                     ___7______6______5______4______3______2______1______0__
                      00763 ; Channel ID:        |      |      |                                         |
                      00764 ;                    |  0   | ON   |               Channel ID                |
                      00765 ;                    |______|______|______|______|______|______|______|______|
                      00766 ;
  00000006            00767 CMD_CHAN_ON     EQU     6               ; -X------ Channel fully on?
  0000003F            00768 CMD_CHAN_MASK   EQU     b'00111111'     ; --XXXXXX Channel ID mask
                      00769 ;
                      00770 ;                     ___7______6______5______4______3______2______1______0__
                      00771 ; Dimmer Value:      |      |      |      |                                  |
                      00772 ;                    |  0   |   x  |   x  | Brightness level (0=off, 31=on)  |
                      00773 ;                    |______|______|______|______|______|______|______|______|
                      00774 ;
  0000001F            00775 CMD_DIM_MASK    EQU     b'00011111'     ; ---XXXXX Dimmer value mask
                      00776 ;
                      00777 ;                     ___7______6______5______4______3______2______1______0__
                      00778 ; Set Phase Command: |      |      |      |                                  |
                      00779 ;                    |  0   |   0  |  Phase offset level (0-63)              |
                      00780 ;                    |______|______|______|______|______|______|______|______|
                      00781 ;
  0000003F            00782 CMD_AD_PH_MASK  EQU     b'00111111'     ; --XXXXXX phase offset value mask
                      00783 ;
                      00784 ;                     ___7______6______5______4______3______2______1______0__
                      00785 ; Set ID Command:    |      |      |      |      |                           |
                      00786 ;                    |  0   |   1  |   0  | ad<0>| New device address (ad)   |
                      00787 ;                    |______|______|______|______|______|______|______|______|
                      00788 ;
  00000004            00789 CMD_AD_ID_CHK   EQU     4               ; ---X---- Must == <0> bit
  0000000F            00790 CMD_AD_ID_MASK  EQU     b'00001111'     ; ----XXXX Device ID mask
                      00791 ;
                      00792 ;                     ___7______6______5______4______3______2______1______0__
                      00793 ; Misc. Admin Cmds:  |      |      |      |      |                           |
                      00794 ;                    |  0   |   1  |   1  |   0  |        command ID         |
                      00795 ;                    |______|______|______|______|______|______|______|______|
                      00796 ;
  0000000F            00797 CMD_AD_CMD_MASK EQU     b'00001111'     ; ----XXXX sub-command mask
                      00798 ;
                      00799 ;                     ___7______6______5______4______3______2______1______0__
                      00800 ; Slave Commands:    |      |      |      |      |                           |
                      00801 ;                    |  0   |   1  |   1  |   1  |    command / data bits    |
                      00802 ;                    |______|______|______|______|______|______|______|______|
                      00803 ;
                      00804 ;      Reserved for future commands:                 0      0      x      x
                      00805 ;      Display yellow/red pattern for 2s:            0      1     YEL    RED
                      00806 ;      Display green/yellow/red pattern, HALT:       1     GRN    YEL    RED
                      00807 ;
  00000004            00808 CMD_AD_SLAVE    EQU     4               ; ---X---- slave command?
  00000003            00809 CMD_AD_S_HALT   EQU     3               ; ----X--- halt w/LED pattern
  00000002            00810 CMD_AD_S_GRN    EQU     2               ; -----X-- green LED lit?
  00000001            00811 CMD_AD_S_YEL    EQU     1               ; ------X- yellow LED lit?
  00000000            00812 CMD_AD_S_RED    EQU     0               ; -------X red LED lit?
                      00813 
                      00814 
                      00815 ;
                      00816 ;==============================================================================
                      00817 ; EEPROM
                      00818 ;==============================================================================
                      00819 ;
                      00820 ; These locations in the EEPROM data area are used for persistent storage
                      00821 ; of important data values:
                      00822 ;
                      00823 ;                     ___7______6______5______4______3______2______1______0__
                      00824 ; $00  EE_IDLE       |      |      |      |      |      |      |      |      |
                      00825 ;                    |   1  |   1  |   1  |   1  |   1  |   1  |   1  |   1  |
                      00826 ;                    |______|______|______|______|______|______|______|______|
                      00827 ; $01  EE_DEV_ID     |///////////////////////////|                           |
                      00828 ;                    |///////////////////////////| This device's ID number   |
                      00829 ;                    |///////////////////////////|______|______|______|______|
                      00830 ; $02  EE_PHASE      |                                                       |
                      00831 ;                    |  Phase offset value                                   |
                      00832 ;                    |______|______|______|______|______|______|______|______|
                      00833 ;
                      00834 ;
  00000000            00835 EE_IDLE         EQU     0x00            ; EEPROM address of 0xff byte (per '877 errata) @@P=877@@
  00000001            00836 EE_DEV_ID       EQU     0x01            ; EEPROM address of device ID                   @@P=877@@
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000002            00837 EE_PHASE        EQU     0x02            ; EEPROM address of phase offset                @@P=877@@
                      00838 ;                                                @@P=877@@
                      00839 ; Default values when chip is flashed:           @@P=877@@
                      00840 ;                                                @@P=877@@
2100                  00841 EEPROM_DEFAULTS ORG     0x2100          ;        @@P=877@@
2100   00FF           00842 EE_DEF_IDLE     DE      0xFF            ;        @@P=877@@
2101   0000           00843 EE_DEF_DEV_ID   DE      0x00            ;        @@P=877@@
2102   0002           00844 EE_DEF_PHASE    DE      0x02            ;        @@P=877@@
                      00845 ;
                      00846 ;==============================================================================
                      00847 ; REGISTERS
                      00848 ;==============================================================================
                      00849 ;
                      00850 ; Bits and registers used by the firmware
                      00851 ;
                      00852 ;------------------------------------------------------------------------------
                      00853 ; All Banks
                      00854 ;------------------------------------------------------------------------------
                      00855 ;
  00000070            00856 W_TEMP          EQU     0x070           ; Storage for W during ISR
  00000071            00857 STATUS_TEMP     EQU     0x071           ; Storage for STATUS during ISR
  00000072            00858 I               EQU     0x072           ; General-purpose data counter
  00000073            00859 J               EQU     0x073           ; General-purpose data counter
  00000074            00860 K               EQU     0x074           ; General-purpose data counter
  00000075            00861 X               EQU     0x075           ; General-purpose data register
  00000076            00862 Y               EQU     0x076           ; General-purpose data register
  00000077            00863 PCLATH_TEMP     EQU     0x077           ; Storage for PCLATH during ISR
                      00864 ;
                      00865 ;------------------------------------------------------------------------------
                      00866 ; Bank 0
                      00867 ;------------------------------------------------------------------------------
                      00868 ;
                      00869 ; Output Ports mapped to SSR outputs and LEDs.  These have a physical port
                      00870 ; register (e.g., PORTA), writing to which drives the outputs from the chip.
                      00871 ; A buffer register (e.g., PORTA_BUF) mirrors the layout of PORTA, and is
                      00872 ; where our routines update the bits before they're pushed out to the actual
                      00873 ; I/O port.
                      00874 ;
                      00875 ; We define the mappings between logical signals like /SSR08 and the
                      00876 ; registers and bit positions in memory here.
                      00877 ;
                      00878 ;                     ___7______6______5______4______3______2______1______0__
                      00879 ; $005 PORTA         |/////////////|      | _____| _____| _____| _____| _____|
                      00880 ; $038 PORTA_BUF     |/////////////| ACT  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00881 ;                    |/////////////|______|______|______|______|______|______|
                      00882 ;
  00000038            00883 PORTA_BUF       EQU     0x038
                      00884 
  00000005            00885 PORT_ACT        EQU     PORTA
  00000038            00886 PBUF_ACT        EQU     PORTA_BUF
  00000005            00887 BIT_ACT         EQU     5
  00000005            00888 PORT_08         EQU     PORTA
  00000005            00889 PORT_10         EQU     PORTA
  00000005            00890 PORT_12         EQU     PORTA
  00000005            00891 PORT_14         EQU     PORTA
  00000005            00892 PORT_16         EQU     PORTA
                      00893 
  00000038            00894 PBUF_08         EQU     PORTA_BUF
  00000038            00895 PBUF_10         EQU     PORTA_BUF
  00000038            00896 PBUF_12         EQU     PORTA_BUF
  00000038            00897 PBUF_14         EQU     PORTA_BUF
  00000038            00898 PBUF_16         EQU     PORTA_BUF
                      00899 
  00000004            00900 BIT_08          EQU     4
  00000003            00901 BIT_10          EQU     3
  00000002            00902 BIT_12          EQU     2
  00000001            00903 BIT_14          EQU     1
  00000000            00904 BIT_16          EQU     0
                      00905 ;
                      00906 ;                     ___7______6______5______4______3______2______1______0__
                      00907 ; $006 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00908 ; $039 PORTB_BUF     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00909 ;                    |/////////////|______|______|______|______|______|//////|
                      00910 ;
  00000039            00911 PORTB_BUF       EQU     0x039
                      00912 
  00000006            00913 PORT_15         EQU     PORTB
  00000006            00914 PORT_13         EQU     PORTB
  00000006            00915 PORT_11         EQU     PORTB
  00000006            00916 PORT_09         EQU     PORTB
  00000006            00917 PORT_07         EQU     PORTB
                      00918 
  00000039            00919 PBUF_15         EQU     PORTB_BUF
  00000039            00920 PBUF_13         EQU     PORTB_BUF
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000039            00921 PBUF_11         EQU     PORTB_BUF
  00000039            00922 PBUF_09         EQU     PORTB_BUF
  00000039            00923 PBUF_07         EQU     PORTB_BUF
                      00924 
  00000005            00925 BIT_15          EQU     5
  00000004            00926 BIT_13          EQU     4
  00000003            00927 BIT_11          EQU     3
  00000002            00928 BIT_09          EQU     2
  00000001            00929 BIT_07          EQU     1
                      00930 ;
                      00931 ;                     ___7______6______5______4______3______2______1______0__
                      00932 ; $007 PORTC         |/////////////| _____| _____| _____| _____| _____| _____|
                      00933 ; $03A PORTC_BUF     |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00934 ;                    |/////////////|______|______|______|______|______|______|
                      00935 ;
  0000003A            00936 PORTC_BUF       EQU     0x03A
                      00937 
  00000007            00938 PORT_02         EQU     PORTC
  00000007            00939 PORT_00         EQU     PORTC
  00000007            00940 PORT_01         EQU     PORTC
  00000007            00941 PORT_03         EQU     PORTC
  00000007            00942 PORT_19         EQU     PORTC
  00000007            00943 PORT_04         EQU     PORTC
                      00944 
  0000003A            00945 PBUF_02         EQU     PORTC_BUF
  0000003A            00946 PBUF_00         EQU     PORTC_BUF
  0000003A            00947 PBUF_01         EQU     PORTC_BUF
  0000003A            00948 PBUF_03         EQU     PORTC_BUF
  0000003A            00949 PBUF_19         EQU     PORTC_BUF
  0000003A            00950 PBUF_04         EQU     PORTC_BUF
                      00951 
  00000005            00952 BIT_02          EQU     5
  00000004            00953 BIT_00          EQU     4
  00000003            00954 BIT_01          EQU     3
  00000002            00955 BIT_03          EQU     2
  00000001            00956 BIT_19          EQU     1
  00000000            00957 BIT_04          EQU     0
                      00958 ;
                      00959 ;                     ___7______6______5______4______3______2______1______0__
                      00960 ; $008 PORTD         | _____| _____| _____| _____| _____| _____| _____| _____|
                      00961 ; $03B PORTD_BUF     | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00962 ;                    |______|______|______|______|______|______|______|______|
                      00963 ;
  0000003B            00964 PORTD_BUF       EQU     0x03B
                      00965 
  00000008            00966 PORT_17         EQU     PORTD
  00000008            00967 PORT_06         EQU     PORTD
  00000008            00968 PORT_05         EQU     PORTD
  00000008            00969 PORT_18         EQU     PORTD
  00000008            00970 PORT_22         EQU     PORTD
  00000008            00971 PORT_20         EQU     PORTD
  00000008            00972 PORT_21         EQU     PORTD
  00000008            00973 PORT_23         EQU     PORTD
                      00974 
  0000003B            00975 PBUF_17         EQU     PORTD_BUF
  0000003B            00976 PBUF_06         EQU     PORTD_BUF
  0000003B            00977 PBUF_05         EQU     PORTD_BUF
  0000003B            00978 PBUF_18         EQU     PORTD_BUF
  0000003B            00979 PBUF_22         EQU     PORTD_BUF
  0000003B            00980 PBUF_20         EQU     PORTD_BUF
  0000003B            00981 PBUF_21         EQU     PORTD_BUF
  0000003B            00982 PBUF_23         EQU     PORTD_BUF
                      00983 
  00000007            00984 BIT_17          EQU     7
  00000006            00985 BIT_06          EQU     6
  00000005            00986 BIT_05          EQU     5
  00000004            00987 BIT_18          EQU     4
  00000003            00988 BIT_22          EQU     3
  00000002            00989 BIT_20          EQU     2
  00000001            00990 BIT_21          EQU     1
  00000000            00991 BIT_23          EQU     0
                      00992 ;
                      00993 ;                     ___7______6______5______4______3______2______1______0__
                      00994 ; $009 PORTE         |//////////////////////////////////|      |      |      |
                      00995 ; $03C PORTE_BUF     |//////////////////////////////////| RED  | YEL  | GRN  |
                      00996 ;                    |//////////////////////////////////|______|______|______|
                      00997 ;
  0000003C            00998 PORTE_BUF       EQU     0x03C
                      00999 
  00000009            01000 PORT_RED        EQU     PORTE
  00000009            01001 PORT_YEL        EQU     PORTE
  00000009            01002 PORT_GRN        EQU     PORTE
                      01003 
  0000003C            01004 PBUF_RED        EQU     PORTE_BUF
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003C            01005 PBUF_YEL        EQU     PORTE_BUF
  0000003C            01006 PBUF_GRN        EQU     PORTE_BUF
                      01007 
  00000002            01008 BIT_RED         EQU     2
  00000001            01009 BIT_YEL         EQU     1
  00000000            01010 BIT_GRN         EQU     0
                      01011 
  00000009            01012 PORT_LEDS       EQU     PORTE
  00000006            01013 MASK_RED_YEL    EQU     0x06    ; RED, YEL on; GRN off
  00000007            01014 MASK_ALL_LEDS   EQU     0x07    ; RED, YEL, GRN on
  00000000            01015 MASK_NO_LEDS    EQU     0x00    ; all off
                      01016 ;
                      01017 ; SSR Value buffers.
                      01018 ; These hold the current dimmer values for the SSR circuit outputs.
                      01019 ; The bits are interpreted as:
                      01020 ;
                      01021 ;  SSR_ON SSRDIM VALUE
                      01022 ;     0      0     x     Channel completely "off"
                      01023 ;     0      1     n     Channel dimmed to level n
                      01024 ;     1      x     x     Channel completely "on" (no dimmer control)
                      01025 ;
                      01026 ;
                      01027 ;                     ___7______6______5______4______3______2______1______0__
                      01028 ; $020 SSR00_VAL     |      |      |//////|                                  |
                      01029 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01030 ;                    |______|______|//////|______|______|______|______|______|
                      01031 ; $021 SSR01_VAL     |      |      |//////|                                  |
                      01032 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01033 ;                    |______|______|//////|______|______|______|______|______|
                      01034 ;
                      01035 ;       .                                        .
                      01036 ;       .                                        .
                      01037 ;       .                                        .
                      01038 ;
                      01039 ;                     _______________________________________________________
                      01040 ; $037 SSR23_VAL     |      |      |//////|                                  |
                      01041 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01042 ;                    |______|______|//////|______|______|______|______|______|
                      01043 ;
  00000007            01044 SSR_ON          EQU     7               ; X------- SSR ON (no dim)
  00000006            01045 SSRDIM          EQU     6               ; -X------ SSR dim
  00000005            01046 SSRVAL_RESV     EQU     5               ; --X----- Reserved bit
  0000001F            01047 SSRVAL_MASK     EQU     b'00011111'     ; ---XXXXX SSR dimmer value
                      01048 
  00000020            01049 SSR00_VAL       EQU     0x020
  00000021            01050 SSR01_VAL       EQU     0x021
  00000022            01051 SSR02_VAL       EQU     0x022
  00000023            01052 SSR03_VAL       EQU     0x023
  00000024            01053 SSR04_VAL       EQU     0x024
  00000025            01054 SSR05_VAL       EQU     0x025
  00000026            01055 SSR06_VAL       EQU     0x026
  00000027            01056 SSR07_VAL       EQU     0x027
  00000028            01057 SSR08_VAL       EQU     0x028
  00000029            01058 SSR09_VAL       EQU     0x029
  0000002A            01059 SSR10_VAL       EQU     0x02A
  0000002B            01060 SSR11_VAL       EQU     0x02B
  0000002C            01061 SSR12_VAL       EQU     0x02C
  0000002D            01062 SSR13_VAL       EQU     0x02D
  0000002E            01063 SSR14_VAL       EQU     0x02E
  0000002F            01064 SSR15_VAL       EQU     0x02F
  00000030            01065 SSR16_VAL       EQU     0x030
  00000031            01066 SSR17_VAL       EQU     0x031
  00000032            01067 SSR18_VAL       EQU     0x032
  00000033            01068 SSR19_VAL       EQU     0x033
  00000034            01069 SSR20_VAL       EQU     0x034
  00000035            01070 SSR21_VAL       EQU     0x035
  00000036            01071 SSR22_VAL       EQU     0x036
  00000037            01072 SSR23_VAL       EQU     0x037
                      01073 ;
                      01074 ; The master CPU reads this value from EEPROM when booting up, and sends
                      01075 ; it to the slave CPU.  From there, they both use this RAM location to
                      01076 ; hold the value during runtime.
                      01077 ;
                      01078 ;                     ___7______6______5______4______3______2______1______0__
                      01079 ; $03D PHASE_OFFSET  |                                                       |
                      01080 ;                    |  Number of slices to delay from ZC int to slice 0     |
                      01081 ;                    |______|______|______|______|______|______|______|______|
                      01082 ;
  0000003D            01083 PHASE_OFFSET    EQU     0x03D
                      01084 ;
                      01085 ; The SSR handling routines fill in this register when receiving a command
                      01086 ; targeted to a single channel.
                      01087 ;
                      01088 ;                     ___7______6______5______4______3______2______1______0__
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01089 ; $03E SSR_ID        |      |      |//////|                                  |
                      01090 ;                    |MY_SSR|ILLSSR|//////|  Local device offset from SSR00  |
                      01091 ;                    |______|______|//////|______|______|______|______|______|
                      01092 ;
  0000003E            01093 SSR_ID          EQU     0x03E
                      01094 
  00000007            01095 MY_SSR          EQU     7               ; X------- Is this SSR for this CPU?
  00000006            01096 ILLSSR          EQU     6               ; -X------ Channel ID is illegal
  00000005            01097 SSR_ID_RESV     EQU     5               ; --X----- Reserved bit
  0000001F            01098 SSR_DEV_MASK    EQU     b'00011111'     ; ---XXXXX Mask for local SSR ID
                      01099 ;
                      01100 ; This is used primarily for the POST LED effects which flash a value
                      01101 ; on the LEDs.  This is the parameter to the function which handles that.
                      01102 ;
                      01103 ;                     ___7______6______5______4______3______2______1______0__
                      01104 ; $03F FLASH_CT      |                                                       |
                      01105 ;                    |  Value to be flashed on an LED                        |
                      01106 ;                    |______|______|______|______|______|______|______|______|
                      01107 ;
  0000003F            01108 FLASH_CT        EQU     0x03F
                      01109 ;
                      01110 ;                     ___7______6______5______4______3______2______1______0__
                      01111 ; $040 DEVICE_ID     |///////////////////////////|                           |
                      01112 ;                    |///////////////////////////| This device's ID number   |
                      01113 ;                    |///////////////////////////|______|______|______|______|
                      01114 ;
                      01115 ; We copy the device ID from EEPROM to this location, where we can compare
                      01116 ; it more easily during runtime.  Note that it's also aligned with the device
                      01117 ; ID field in command bytes.
                      01118 ;
  00000040            01119 DEVICE_ID       EQU     0x040
                      01120 
  0000000F            01121 DEVICE_ID_MASK  EQU     b'00001111'     ; ----XXXX Mask for device ID value
                      01122 ;
                      01123 ; LED Timers
                      01124 ;
                      01125 ; These hold the time remaining for a lit LED until it is scheduled to be
                      01126 ; turned off.  The units are 1/120 sec (i.e., number of ZC interrupts).
                      01127 ;
  00000041            01128 GRN_TMR         EQU     0x041           ; Green LED time until FLIPS STATE
  00000042            01129 YEL_TMR         EQU     0x042           ; Yellow LED time until turns off
  00000043            01130 RED_TMR         EQU     0x043           ; Red LED time until turns off
  0000004A            01131 ACT_TMR         EQU     0x04A           ; Active LED time until turns off
                      01132 ;
                      01133 ; State machine value and some misc. operating flags.
                      01134 ;
                      01135 ;                     ___7______6______5______4______3______2______1______0__
                      01136 ; $044 SSR_STATE     |      |      |      |      |      |                    |
                      01137 ;                    |INCYC |PRECYC|REDEN |YELEN |GRNEN |       STATE        |
                      01138 ;                    |______|______|______|______|______|______|______|______|
                      01139 ;
  00000044            01140 SSR_STATE       EQU     0x044
                      01141 
  00000007            01142 INCYC           EQU     7               ; X------- In an active ZC cycle?
  00000006            01143 PRECYC          EQU     6               ; -X------ Between int and start of cycle?
  00000005            01144 REDEN           EQU     5               ; --X----- Red LED off timer active
  00000004            01145 YELEN           EQU     4               ; ---X---- Yellow LED off timer active
  00000003            01146 GRNEN           EQU     3               ; ----X--- Green LED flip timer active
  00000002            01147 STATE2          EQU     2               ; -----X-- Bit 2 of state value
  00000001            01148 STATE1          EQU     1               ; ------X- Bit 1 of state value
  00000000            01149 STATE0          EQU     0               ; -------X Bit 0 of state value
  00000007            01150 SSR_STATE_MASK  EQU     b'00000111'     ; -----XXX Mask for state value
                      01151 ;
                      01152 ; Cycle/slice timers
                      01153 ;
  00000045            01154 CUR_SLICE       EQU     0x045           ; current slice number (counts down)
  00000046            01155 CUR_PRE         EQU     0x046           ; pre-slice number (counts down)
                      01156 ;
                      01157 ; Communications buffers
                      01158 ;
  00000047            01159 RX_BYTE         EQU     0x047           ; byte last received from serial port
  00000049            01160 DATA_BUF        EQU     0x049           ; holding area for command data
                      01161 ;
                      01162 ; More operating flags
                      01163 ;
                      01164 ;                     ___7______6______5______4______3______2______1______0__
                      01165 ; $048 SSR_STATE2    |SLICE |DIM_  |DIM_  |      |      |      |      |      |
                      01166 ;                    |_UPD  |START |END   |REDOFF|YELOFF|GRNBLK|SSRUPD| TXQUE|
                      01167 ;                    |______|______|______|______|______|______|______|______|
                      01168 ; $04B SSR_STATE3    |//////////////////////////////////|      |      |      |
                      01169 ;                    |//////////////////////////////////|ACTEN |ACTOFF|PRIVEN|
                      01170 ;                    |//////////////////////////////////|______|______|______|
                      01171 ;
  00000048            01172 SSR_STATE2      EQU     0x048
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01173 
  00000007            01174 SLICE_UPD       EQU     7               ; X------- Ready to update current slice?
  00000006            01175 DIM_START       EQU     6               ; -X------ First dimmer cycle?
  00000005            01176 DIM_END         EQU     5               ; --X----- Last dimmer cycle?
  00000004            01177 REDOFF          EQU     4               ; ---X---- Red LED timer expired, turn off
  00000003            01178 YELOFF          EQU     3               ; ----X--- Yellow LED timer expired, turn off
  00000002            01179 GRNBLK          EQU     2               ; -----X-- Green LED timer expired, blink it
  00000001            01180 SSRUPD          EQU     1               ; ------X- Queued SSR update operation
  00000000            01181 TXQUE           EQU     0               ; -------X Something in transmit queue
                      01182 
  0000004B            01183 SSR_STATE3      EQU     0x04B
                      01184 
  00000007            01185 SSR_STATE3_RES7 EQU     7               ; X------- Reserved bit
  00000006            01186 SSR_STATE3_RES6 EQU     6               ; -X------ Reserved bit
  00000005            01187 SSR_STATE3_RES5 EQU     5               ; --X----- Reserved bit
  00000004            01188 SSR_STATE3_RES4 EQU     4               ; ---X---- Reserved bit
  00000003            01189 SSR_STATE3_RES3 EQU     3               ; ----X--- Reserved bit
  00000002            01190 ACTEN           EQU     2               ; -----X-- Active LED timer active
  00000001            01191 ACTOFF          EQU     1               ; ------X- Active LED timer expired, turn off
  00000000            01192 PRIVEN          EQU     0               ; -------X Privileged commands enabled
                      01193 ;
                      01194 ; Serial Transmitter Ring Buffer
                      01195 ;
                      01196 ; We maintain a buffer of 16 output bytes waiting to be sent out of the
                      01197 ; serial port.  We empty this buffer in an interrupt-driven routine so
                      01198 ; the processing of incoming data isn't stalled while waiting for the
                      01199 ; UART to be idle.  XXX interrupt-driven??? not directly. XXX
                      01200 ;
                      01201 ; This needs to be arranged so that the table is a power of two in length
                      01202 ; and aligned in memory so that it starts on an even boundary of its
                      01203 ; length.  In other words, we can take a pointer P into the table,
                      01204 ; and ((P & TXBUF_MASK) | TXBUF) will yield a valid pointer within
                      01205 ; that space, with proper wraparound in either direction.
                      01206 ;
                      01207 ;                     ___7______6______5______4______3______2______1______0__
                      01208 ; $04E TXBUF_QUEUE   |                           |                           |
                      01209 ;                    |             5             | Addr of next byte to queue|
                      01210 ;                    |______|______|______|______|______|______|______|______|
                      01211 ; $04F TXBUF_SEND    |                           |                           |
                      01212 ;                    |             5             | Addr of next byte to send |
                      01213 ;                    |______|______|______|______|______|______|______|______|
                      01214 ; $050 TXBUF         |                                                       |
                      01215 ;                    |  Transmitter output buffer (byte 1 of 16)             |
                      01216 ;                    |______|______|______|______|______|______|______|______|
                      01217 ;
                      01218 ;       .                                        .
                      01219 ;       .                                        .
                      01220 ;       .                                        .
                      01221 ;
                      01222 ;                     _______________________________________________________
                      01223 ; $05F               |                                                       |
                      01224 ;                    |  Transmitter output buffer (byte 16 of 16)            |
                      01225 ;                    |______|______|______|______|______|______|______|______|
                      01226 ;
  0000004E            01227 TXBUF_QUEUE     EQU     0x04E
  0000004F            01228 TXBUF_SEND      EQU     0x04F
  00000050            01229 TXBUF           EQU     0x050
  0000000F            01230 TXBUF_MASK      EQU     b'00001111'     ; mask off table index
                      01231 ;
                      01232 ;-----------------------------------------------------------------------------
                      01233 ; Banks 1-3
                      01234 ;-----------------------------------------------------------------------------
                      01235 ;
                      01236 ; Nothing defined in these banks.
                      01237 ;
                      01238 
                      01239 ;=============================================================================
                      01240 ; VECTORED ENTRY POINTS
                      01241 ;=============================================================================
0000                  01242 RESTART_VECTOR  ORG     0x0000
0000   28C2           01243                 GOTO    INIT
                      01244 
0004                  01245 INT_VECTOR      ORG     0x0004
0004   2883           01246                 GOTO    ISR
                      01247 
                      01248 ;==============================================================================
                      01249 ; JUMP TABLES
                      01250 ;
                      01251 ; We collect these here so they are all within the $00xx range.  Otherwise
                      01252 ; it's a constant battle to keep the PCLATH register right as the code changes
                      01253 ; and moves these tables around across page boundaries.
                      01254 ;==============================================================================
                      01255 ;
                      01256 ; State 0 Command Dispatch Table
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01257 ;  Given command in RX_BYTE<6:4>, branch to command #0-#7.
                      01258 ;  Errors (undefined commands) branch to CMD_ERROR.
                      01259 ;
0005   0064           01260 STATE_0_CMD_TBL CLRWDT
0006   018A           01261                 CLRF    PCLATH
0007   0E47           01262                 SWAPF   RX_BYTE, W
0008   3907           01263                 ANDLW   CMD_SW_MASK
0009   0782           01264                 ADDWF   PCL, F
000A   2A22           01265                 GOTO    CMD_0
000B   2A24           01266                 GOTO    CMD_1
000C   2A26           01267                 GOTO    CMD_2
000D   2AF1           01268                 GOTO    CMD_ERROR
000E   2AF1           01269                 GOTO    CMD_ERROR
000F   2AF1           01270                 GOTO    CMD_ERROR
0010   2AF1           01271                 GOTO    CMD_ERROR
0011   2A28           01272                 GOTO    CMD_7
0012   2B38           01273                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01274 ;
                      01275 ; Received data byte dispatch function.
                      01276 ; When receiving a data byte, what happens next
                      01277 ; depends on the state of the parser's state machine.
                      01278 ; This jump table branches to the appropriate handler
                      01279 ; for each state.
                      01280 ;
                      01281 ; In the case of state 0, we just return to the
                      01282 ; original caller, ignoring the byte.
                      01283 ;
0013   0064           01284 DATA_BYTE_TBL   CLRWDT                          ; We received a data byte
0014   018A           01285                 CLRF    PCLATH                  ; We're in $00xx address range
0015   0844           01286                 MOVF    SSR_STATE, W            ; decode state bits
0016   3907           01287                 ANDLW   SSR_STATE_MASK
0017   0782           01288                 ADDWF   PCL, F
0018   0008           01289                 RETURN                          ; [0] ignore data
0019   2A2D           01290                 GOTO    DATA_STATE_1            ; [1] handler
001A   2A46           01291                 GOTO    DATA_STATE_2            ; [2] handler
001B   2A4B           01292                 GOTO    DATA_STATE_3            ; [3] handler
001C   2A62           01293                 GOTO    DATA_STATE_4            ; [4] handler
001D   2A2B           01294                 GOTO    FAULT_1                 ; [5] illegal state
001E   2A2B           01295                 GOTO    FAULT_1                 ; [6] illegal state
001F   2A2B           01296                 GOTO    FAULT_1                 ; [7] illegal state
0020   2B38           01297                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01298 ;
                      01299 ; Administrative Command Dispatch Table
                      01300 ; Dispatch the processing of admin commands, based on value
                      01301 ; of RX_BYTE.
                      01302 ;
0021   0064           01303 CMD_ADMIN_TABLE CLRWDT
0022   018A           01304                 CLRF    PCLATH                  ;
0023   0847           01305                 MOVF    RX_BYTE, W              ; Get and store command
0024   390F           01306                 ANDLW   b'00001111'             ; sub-command mask
0025   0782           01307                 ADDWF   PCL, F
0026   2ACD           01308                 GOTO    CMD_AD_SHUTDOWN         ; 0=shutdown cpu
0027   2AE2           01309                 GOTO    CMD_AD_DIS_PRIV         ; 1=disable privs
0028   2AF1           01310                 GOTO    CMD_ERROR               ; 2=reserved
0029   2AF1           01311                 GOTO    CMD_ERROR               ; 3=reserved
002A   2AF1           01312                 GOTO    CMD_ERROR               ; 4=reserved
002B   2AF1           01313                 GOTO    CMD_ERROR               ; 5=reserved
002C   2AF1           01314                 GOTO    CMD_ERROR               ; 6=reserved
002D   2AF1           01315                 GOTO    CMD_ERROR               ; 7=reserved
002E   2AF1           01316                 GOTO    CMD_ERROR               ; 8=reserved
002F   2AF1           01317                 GOTO    CMD_ERROR               ; 9=reserved
0030   2AF1           01318                 GOTO    CMD_ERROR               ; A=reserved
0031   2AF1           01319                 GOTO    CMD_ERROR               ; B=reserved
0032   2AF1           01320                 GOTO    CMD_ERROR               ; C=reserved
0033   2AF1           01321                 GOTO    CMD_ERROR               ; D=reserved
0034   2AF1           01322                 GOTO    CMD_ERROR               ; E=reserved
0035   2AF1           01323                 GOTO    CMD_ERROR               ; F=reserved
0036   2B38           01324                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01325 ;
                      01326 ;------------------------------------------------------------------------------
                      01327 ; SSR_Y_TO_PBUF
                      01328 ;   return specified SSR's port buffer's address
                      01329 ;
                      01330 ; Input:    Y=SSR channel (0-23)
                      01331 ; Output:   W=address of SSR's port buffer
                      01332 ; Context:  Any Bank
                      01333 ;------------------------------------------------------------------------------
                      01334 ;
                      01335 ; *** THIS CODE MUST BE ON ONE 256-BYTE PAGE ***
0037   0064           01336 SSR_Y_TO_PBUF   CLRWDT
0038   018A           01337                 CLRF    PCLATH          ; Our jump table's code page
0039   0876           01338                 MOVF    Y, W
003A   391F           01339                 ANDLW   b'00011111'     ; limit to 32
003B   0782           01340                 ADDWF   PCL, F          ; jump to SSR # in table
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003C   343A           01341                 RETLW   PBUF_00
003D   343A           01342                 RETLW   PBUF_01
003E   343A           01343                 RETLW   PBUF_02
003F   343A           01344                 RETLW   PBUF_03
0040   343A           01345                 RETLW   PBUF_04
0041   343B           01346                 RETLW   PBUF_05
0042   343B           01347                 RETLW   PBUF_06
0043   3439           01348                 RETLW   PBUF_07
0044   3438           01349                 RETLW   PBUF_08
0045   3439           01350                 RETLW   PBUF_09
0046   3438           01351                 RETLW   PBUF_10
0047   3439           01352                 RETLW   PBUF_11
0048   3438           01353                 RETLW   PBUF_12
0049   3439           01354                 RETLW   PBUF_13
004A   3438           01355                 RETLW   PBUF_14
004B   3439           01356                 RETLW   PBUF_15
004C   3438           01357                 RETLW   PBUF_16
004D   343B           01358                 RETLW   PBUF_17
004E   343B           01359                 RETLW   PBUF_18
004F   343A           01360                 RETLW   PBUF_19
0050   343B           01361                 RETLW   PBUF_20
0051   343B           01362                 RETLW   PBUF_21
0052   343B           01363                 RETLW   PBUF_22
0053   343B           01364                 RETLW   PBUF_23
0054   2B38           01365                 GOTO    FAULT           ; FAULT 24
0055   2B38           01366                 GOTO    FAULT           ; FAULT 25
0056   2B38           01367                 GOTO    FAULT           ; FAULT 26
0057   2B38           01368                 GOTO    FAULT           ; FAULT 27
0058   2B38           01369                 GOTO    FAULT           ; FAULT 28
0059   2B38           01370                 GOTO    FAULT           ; FAULT 29
005A   2B38           01371                 GOTO    FAULT           ; FAULT 30
005B   2B38           01372                 GOTO    FAULT           ; FAULT 31
005C   2B38           01373                 GOTO    FAULT           ; FAULT 32 just to be paranoid
                      01374 ;
                      01375 ;------------------------------------------------------------------------------
                      01376 ; SSR_Y_SET_MASK
                      01377 ;   return bitmask for SSR output in its I/O port
                      01378 ;   If you OR the bit with the port's value the channel is turned on.
                      01379 ;   If you want to get the bitmask for turning it off, see SSR_Y_CLR_MASK.
                      01380 ;
                      01381 ; Input:    Y=SSR channel (0-23)
                      01382 ; Output:   W=bitmask for SETTING the bit (IOR with current value)
                      01383 ; Context:  Any Bank
                      01384 ;------------------------------------------------------------------------------
                      01385 ;
                      01386 ; *** THIS CODE MUST BE ON ONE 256-BYTE PAGE ***
                      01387 ;
005D   0064           01388 SSR_Y_SET_MASK  CLRWDT
005E   018A           01389                 CLRF    PCLATH
005F   0876           01390                 MOVF    Y, W
0060   391F           01391                 ANDLW   b'00011111'     ; limit to 32
0061   0782           01392                 ADDWF   PCL, F          ; jump to SSR # in table
0062   3410           01393                 RETLW   1 << BIT_00
0063   3408           01394                 RETLW   1 << BIT_01
0064   3420           01395                 RETLW   1 << BIT_02
0065   3404           01396                 RETLW   1 << BIT_03
0066   3401           01397                 RETLW   1 << BIT_04
0067   3420           01398                 RETLW   1 << BIT_05
0068   3440           01399                 RETLW   1 << BIT_06
0069   3402           01400                 RETLW   1 << BIT_07
006A   3410           01401                 RETLW   1 << BIT_08
006B   3404           01402                 RETLW   1 << BIT_09
006C   3408           01403                 RETLW   1 << BIT_10
006D   3408           01404                 RETLW   1 << BIT_11
006E   3404           01405                 RETLW   1 << BIT_12
006F   3410           01406                 RETLW   1 << BIT_13
0070   3402           01407                 RETLW   1 << BIT_14
0071   3420           01408                 RETLW   1 << BIT_15
0072   3401           01409                 RETLW   1 << BIT_16
0073   3480           01410                 RETLW   1 << BIT_17
0074   3410           01411                 RETLW   1 << BIT_18
0075   3402           01412                 RETLW   1 << BIT_19
0076   3404           01413                 RETLW   1 << BIT_20
0077   3402           01414                 RETLW   1 << BIT_21
0078   3408           01415                 RETLW   1 << BIT_22
0079   3401           01416                 RETLW   1 << BIT_23
007A   2B38           01417                 GOTO    FAULT           ; fault 24
007B   2B38           01418                 GOTO    FAULT           ; fault 25
007C   2B38           01419                 GOTO    FAULT           ; fault 26
007D   2B38           01420                 GOTO    FAULT           ; fault 27
007E   2B38           01421                 GOTO    FAULT           ; fault 28
007F   2B38           01422                 GOTO    FAULT           ; fault 29
0080   2B38           01423                 GOTO    FAULT           ; fault 30
0081   2B38           01424                 GOTO    FAULT           ; fault 31
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0082   2B38           01425                 GOTO    FAULT           ; fault 32 just to be paranoid
                      01426 ;
                      01427 ;==============================================================================
                      01428 ; INTERRUPT SERVICE ROUTINE (ISR)
                      01429 ;
                      01430 ; Responsible for handling the timing and synchronization for the unit.
                      01431 ;
                      01432 ; Context: Any Bank (restores original bank when finished)
                      01433 ; Affects: Various flag bits
                      01434 ; Also:    Restores status flags, PC and W when done
                      01435 ;
                      01436 ;==============================================================================
                      01437 ;
0083   00F0           01438 ISR             MOVWF   W_TEMP          ; Save registers during interrupt
0084   0E03           01439                 SWAPF   STATUS, W       ; This moves status w/o disturbing it
0085   00F1           01440                 MOVWF   STATUS_TEMP
0086   080A           01441                 MOVF    PCLATH, W
0087   00F7           01442                 MOVWF   PCLATH_TEMP
0088   018A           01443                 CLRF    PCLATH          ; Force code page 0
0089   1283 1303      01444                 BANKSEL INTCON          ; (Bank 0)
008B   0064           01445                 CLRWDT
                      01446 ;
                      01447 ; Poll interrupts to see who's asking for attention.
                      01448 ;
                      01449 ;------------------------------------------------------------------------------
                      01450 ; INT0 -- 1/120sec timer synchronized with AC half-wave zero-crossing point.
                      01451 ;
008C   1C8B           01452 INT_INT0        BTFSS   INTCON, INTF            ; INT0 line interrupt pending?
008D   28A8           01453                 GOTO    INT_TMR2                ; no: try next vector
008E   108B           01454                 BCF     INTCON, INTF            ; yes: acknowledge interrupt
                      01455 
008F   1A44           01456 INT_YEL         BTFSC   SSR_STATE, YELEN        ; Yellow timer on?
0090   0BC2           01457                 DECFSZ  YEL_TMR, F              ; yes: count it down one step
0091   2894           01458                 GOTO    INT_RED
0092   15C8           01459                 BSF     SSR_STATE2, YELOFF      ; done? queue LED turn off event
0093   1244           01460                 BCF     SSR_STATE, YELEN        ; ...and stop the timer
                      01461 
0094   1AC4           01462 INT_RED         BTFSC   SSR_STATE, REDEN        ; Red timer on?
0095   0BC3           01463                 DECFSZ  RED_TMR, F              ; yes: count it down one step
0096   2899           01464                 GOTO    INT_GRN
0097   1648           01465                 BSF     SSR_STATE2, REDOFF      ; done? queue LED turn off event
0098   12C4           01466                 BCF     SSR_STATE, REDEN        ; ...and stop the timer
                      01467 
0099   19C4           01468 INT_GRN         BTFSC   SSR_STATE, GRNEN        ; Green timer on?
009A   0BC1           01469                 DECFSZ  GRN_TMR, F              ; yes: count it down one step
009B   289F           01470                 GOTO    INT_ACT
009C   1548           01471                 BSF     SSR_STATE2, GRNBLK      ; done? queue LED flip event
009D   30FF           01472                 MOVLW   GRN_BLINK_RATE          ; ...and reset timer for next blink
009E   00C1           01473                 MOVWF   GRN_TMR
                      01474 
009F   0064           01475 INT_ACT         CLRWDT
00A0   194B           01476                 BTFSC   SSR_STATE3, ACTEN       ; Active timer on?
00A1   0BCA           01477                 DECFSZ  ACT_TMR, F              ; yes: count it down one step
00A2   28A5           01478                 GOTO    INT_ZC
00A3   14CB           01479                 BSF     SSR_STATE3, ACTOFF      ; done? queue LED turn off event
00A4   114B           01480                 BCF     SSR_STATE3, ACTEN       ; ...and stop the timer
                      01481 ;
                      01482 ; Handle the cycle timers.
                      01483 ; We just hit a ZC interrupt, so let's start the pre-cycle now.
                      01484 ;
00A5   1744           01485 INT_ZC          BSF     SSR_STATE, PRECYC
00A6   083D           01486                 MOVF    PHASE_OFFSET, W
00A7   00C6           01487                 MOVWF   CUR_PRE
                      01488 ;
                      01489 ;------------------------------------------------------------------------------
                      01490 ; TMR2 -- Timer #2 interrupt
                      01491 ; This is a free-running slice timer (about 38 per INT0)
                      01492 ;
00A8   0064           01493 INT_TMR2        CLRWDT
00A9   1C8C           01494                 BTFSS   PIR1, TMR2IF    ; Timer 2 interrupt pending?
00AA   28BA           01495                 GOTO    INT_END         ; no: try next vector
00AB   108C           01496                 BCF     PIR1, TMR2IF    ; yes: acknowledge interrupt
                      01497 ;
                      01498 ; If in pre-cycle, count down to next real zero crossing event point
                      01499 ;
00AC   1B44           01500 INT_PRECYC      BTFSC   SSR_STATE, PRECYC
00AD   0BC6           01501                 DECFSZ  CUR_PRE, F
00AE   28B4           01502                 GOTO    INT_NEXTSLICE
                      01503 ;
                      01504 ; end of pre-cycle, start first real one
                      01505 ;
00AF   1344           01506                 BCF     SSR_STATE, PRECYC
00B0   17C4           01507                 BSF     SSR_STATE, INCYC
00B1   1748           01508                 BSF     SSR_STATE2, DIM_START
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B2   3020           01509                 MOVLW   .32
00B3   00C5           01510                 MOVWF   CUR_SLICE
                      01511 ;
                      01512 ; start of any active slice
                      01513 ;
00B4   1BC4           01514 INT_NEXTSLICE   BTFSC   SSR_STATE, INCYC
00B5   0BC5           01515                 DECFSZ  CUR_SLICE, F
00B6   28B9           01516                 GOTO    INT_ENDSLICE
                      01517 ;
                      01518 ; last slice (#0)
                      01519 ;
00B7   16C8           01520                 BSF     SSR_STATE2, DIM_END
00B8   13C4           01521                 BCF     SSR_STATE, INCYC
                      01522 ;
                      01523 ; slice timing ends
                      01524 ;
00B9   17C8           01525 INT_ENDSLICE    BSF     SSR_STATE2, SLICE_UPD
                      01526 ;
                      01527 ; end of ISR
                      01528 ;
00BA   0064           01529 INT_END         CLRWDT                  ; (Any Bank)
00BB   0877           01530                 MOVF    PCLATH_TEMP, W
00BC   008A           01531                 MOVWF   PCLATH
00BD   0E71           01532                 SWAPF   STATUS_TEMP, W
00BE   0083           01533                 MOVWF   STATUS          ; (Previous Bank Restored)
00BF   0EF0           01534                 SWAPF   W_TEMP, F
00C0   0E70           01535                 SWAPF   W_TEMP, W
                      01536 
00C1   0009           01537                 RETFIE
                      01538 
                      01539 ;=============================================================================
                      01540 ; INIT: device initialization routines
                      01541 ;=============================================================================
00C2   0064           01542 INIT            CLRWDT
00C3   138B           01543                 BCF     INTCON, GIE     ; disable all interrupts
00C4   018A           01544                 CLRF    PCLATH          ; Program page 0
00C5   1683 1703      01545                 BANKSEL EECON1          ; (Bank 3)               @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00C7   110C           01546                 BCF     EECON1, WREN    ; disable EEPROM writes  @@P=877@@
                      01547 ;
                      01548 ; Initialize I/O ports by pre-filling with initial bits, then enabling
                      01549 ; outputs on pins which are supposed to be outputs
                      01550 ;
00C8   0064           01551 SETUP_PORTS     CLRWDT
00C9   1283 1303      01552                 BANKSEL PORTA           ; (Bank 0)
00CB   0185           01553                 CLRF    PORTA           ; ACT off, RCV mode, pins off
00CC   0186           01554                 CLRF    PORTB           ; (Note that this would turn on
00CD   0187           01555                 CLRF    PORTC           ; the SSRs if the ports were
00CE   0188           01556                 CLRF    PORTD           ; enabled yet).
00CF   0189           01557                 CLRF    PORTE           ; LEDs off
00D0   238A           01558                 CALL    ALL_SSRS_OFF    ; turn OFF SSR ports.
00D1   23AE           01559                 CALL    UPDATE_PORTS    ; push out bits to I/O ports.
                      01560 
00D2   1683 1303      01561                 BANKSEL TRISA                   ; (Bank 1)
00D4   30C0           01562                 MOVLW   b'11000000'             ; XXOOOOOO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D5   0085           01563                 MOVWF   TRISA
                      01564 ;               MOVLW   b'10000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D6   0087           01565                 MOVWF   TRISC                   ; Rx/Tx tri-stated here
00D7   30C1           01566                 MOVLW   b'11000001'             ; XXOOOOOI
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D8   0086           01567                 MOVWF   TRISB
00D9   3000           01568                 MOVLW   b'00000000'             ; OOOOOOOO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DA   0088           01569                 MOVWF   TRISD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DB   0089           01570                 MOVWF   TRISE                   ; (also sets PORTD mode)
00DC   3006           01571                 MOVLW   b'00000110'             ; All I/O pins DIGITAL  @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00DD   009F           01572                 MOVWF   ADCON1
                      01573 ;
                      01574 ; Flash LEDs for reset
                      01575 ;
00DE   0064           01576                 CLRWDT
00DF   1283 1303      01577                 BANKSEL PORT_LEDS               ; (Bank 0)
00E1   3005           01578                 MOVLW   .5                      ; flash 5 times
00E2   00F5           01579                 MOVWF   X
00E3   3007           01580 RESET_LEDS_NEXT MOVLW   MASK_ALL_LEDS
00E4   0089           01581                 MOVWF   PORT_LEDS
00E5   237B           01582                 CALL    DELAY_FFLASH
00E6   3000           01583                 MOVLW   MASK_NO_LEDS
00E7   0089           01584                 MOVWF   PORT_LEDS
00E8   237B           01585                 CALL    DELAY_FFLASH
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E9   0BF5           01586                 DECFSZ  X, F
00EA   28E3           01587                 GOTO    RESET_LEDS_NEXT
                      01588 ;
                      01589 ; Light green LED on the master and red LED on the slave
                      01590 ;
00EB   1409           01591                 BSF     PORT_GRN, BIT_GRN
00EC   019F           01592                 CLRF    ADCON0                  ; A/D Converter off
                      01593 
                      01594 
                      01595 ; INIT: set up EEPROM idle value
                      01596 ; The 16F877A Rev. B2 has a defect where the power-down current exceeds the
                      01597 ; published tolerances in some (unlikely) circumstances if the CPU enters sleep
                      01598 ; mode while the EEADR register points to an EEPROM location holding a value
                      01599 ; other than 0xFF.
                      01600 ;
                      01601 ; So we make sure that the EEPROM address register is always pointing to a 0xFF value
                      01602 ; when it's not busy doing anything else.
                      01603 ;
                      01604 ; But first, we'll make sure that a reserved EEPROM location holds a 0xFF value
                      01605 ; to start with. We do this every time since we don't /know/ the device was ever
                      01606 ; initialized before, although most likely this value will already be right
                      01607 ; (It /is/ EEPROM, after all!)
                      01608 ;
                      01609 ;
00ED   0064           01610 SETUP_EEPROM    CLRWDT
00EE   1283 1703      01611                 BANKSEL EEADR           ; @@P=877@@ (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F0   018E           01612                 CLRF    EEDATH          ; @@P=877@@ Clear high bits of data...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   018F           01613                 CLRF    EEADRH          ; @@P=877@@ ...and address
00F2   3000           01614                 MOVLW   EE_IDLE         ; @@P=877@@ Set target EEPROM location
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F3   008D           01615                 MOVWF   EEADR           ; @@P=877@@
00F4   30FF           01616                 MOVLW   0xFF            ; @@P=877@@ Set value to be written
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F5   008C           01617                 MOVWF   EEDATA          ; @@P=877@@
00F6   1683 1703      01618                 BANKSEL EECON1          ; @@P=877@@ (Bank 3)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F8   138C           01619                 BCF     EECON1, EEPGD   ; @@P=877@@ Write to data memory, not flash RAM
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F9   150C           01620                 BSF     EECON1, WREN    ; @@P=877@@ Enable EEPROM writing
00FA   138B           01621                 BCF     INTCON, GIE     ; @@P=877@@ Disable interrupts
00FB   3055           01622                 MOVLW   0x55            ; @@P=877@@ --Begin magic EEPROM write sequence--
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FC   008D           01623                 MOVWF   EECON2          ; @@P=877@@
00FD   30AA           01624                 MOVLW   0xAA            ; @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FE   008D           01625                 MOVWF   EECON2          ; @@P=877@@ --End magic EEPROM write sequence--
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FF   148C           01626                 BSF     EECON1, WR      ; @@P=877@@ Initiate write operation
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0100   110C           01627                 BCF     EECON1, WREN    ; @@P=877@@ Disable EEPROM writing
0101   0064           01628                 CLRWDT                  ; @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0102   188C           01629                 BTFSC   EECON1, WR      ; @@P=877@@ Wait for write to complete
0103   2902           01630                 GOTO    $-1             ; @@P=877@@
0104   1283 1303      01631                 BANKSEL PIR2            ; @@P=877@@ (Bank 0)
0106   120D           01632                 BCF     PIR2, EEIF      ; @@P=877@@ Clear "EEPROM written" interrupt flag
                      01633 ;
                      01634 ; INIT: read our device ID from EEPROM
                      01635 ;
0107   0064           01636 SETUP_DEV_ID    CLRWDT
0108   1283 1703      01637                 BANKSEL EEADR           ; (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
010A   018E           01638                 CLRF    EEDATH          ; @@P=877@@ Clear high bits of data...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
010B   018F           01639                 CLRF    EEADRH          ; @@P=877@@ ...and address
010C   3001           01640                 MOVLW   EE_DEV_ID       ; Set target EEPROM location
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
010D   008D           01641                 MOVWF   EEADR
010E   1683 1703      01642                 BANKSEL EECON1          ; (Bank 3)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0110   138C           01643                 BCF     EECON1, EEPGD   ; Select EEPROM data memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0111   140C           01644                 BSF     EECON1, RD      ; Start read operation
0112   1283 1703      01645                 BANKSEL EEDATA          ; (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0114   080C           01646                 MOVF    EEDATA, W       ; W = device ID value
0115   1283 1303      01647                 BANKSEL DEVICE_ID       ; (Bank 0)
0117   00C0           01648                 MOVWF   DEVICE_ID
                      01649 ;
                      01650 ; INIT: read current phase offset from EEPROM
                      01651 ;
0118   0064           01652 SETUP_PHASE     CLRWDT
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0119   1283 1703      01653                 BANKSEL EEADR           ; (Bank 2)
011B   3002           01654                 MOVLW   EE_PHASE        ; Set target EEPROM location
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
011C   008D           01655                 MOVWF   EEADR
011D   1683 1703      01656                 BANKSEL EECON1          ; (Bank 3)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
011F   138C           01657                 BCF     EECON1, EEPGD   ; Select EEPROM data memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0120   140C           01658                 BSF     EECON1, RD      ; Start read operation
0121   1283 1703      01659                 BANKSEL EEDATA          ; (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0123   080C           01660                 MOVF    EEDATA, W       ; W = device ID value
0124   1283 1303      01661                 BANKSEL PHASE_OFFSET    ; (Bank 0)
0126   00BD           01662                 MOVWF   PHASE_OFFSET
                      01663 ;
                      01664 ; INIT: move EEPROM address to idle block
                      01665 ;
0127   0064           01666 SETUP_EE_FF     CLRWDT                  ; @@P=877@@
0128   1283 1703      01667                 BANKSEL EEADR           ; @@P=877@@ (Bank 2)
012A   3000           01668                 MOVLW   EE_IDLE         ; @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
012B   008D           01669                 MOVWF   EEADR           ; @@P=877@@
                      01670 
                      01671 ;----------------------------------------------------------------
                      01672 ; POST Light Displays
                      01673 ;
                      01674 ; Wait to allow master/slave light to be noticed,
                      01675 ; extinguish all lights, then flash ROM ID (yel),
                      01676 ; GRN+devID (red), then all off.
                      01677 ;----------------------------------------------------------------
012C   2372           01678 POST_START      CALL    DELAY_2S
012D   1283 1303      01679                 BANKSEL PORT_LEDS       ; (Bank 0)               _
012F   0189           01680                 CLRF    PORT_LEDS       ; XXX also clears ACT, T/R
                      01681                 ;
                      01682                 ; Set baud-rate generator
                      01683                 ;
0130   1683 1303      01684                 BANKSEL SPBRG           ; (Bank 1)
0132   3040           01685                 MOVLW   .64
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0133   0099           01686                 MOVWF   SPBRG           ; 19,236 baud
                      01687                 ;
                      01688                 ; Enable serial transmitter
                      01689                 ;
0134   1683 1303      01690                 BANKSEL TXSTA           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0136   0198           01691                 CLRF    TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0137   1518           01692                 BSF     TXSTA, BRGH     ; High Baud Rate
0138   1283 1303      01693                 BANKSEL RCSTA           ; (Bank 0)
013A   0198           01694                 CLRF    RCSTA
013B   1798           01695                 BSF     RCSTA, SPEN     ; Turn on USART
013C   1683 1303      01696                 BANKSEL TXSTA           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
013E   1698           01697                 BSF     TXSTA, TXEN     ; Turn on serial transmitter
013F   1283 1303      01698                 BANKSEL PORT_LEDS       ; (Bank 0)
0141   2372           01699                 CALL    DELAY_2S
                      01700 
0142   3001           01701 POST_ROM_ID     MOVLW   .1              ; 1=ROM 2.0
0143   231A           01702                 CALL    FLASH_YEL       ; Flash ROM ID
0144   2372           01703                 CALL    DELAY_2S
                      01704 
0145   1409           01705 POST_DEV_ID     BSF     PORT_GRN, BIT_GRN
0146   2375           01706                 CALL    DELAY_250MS
0147   1283 1303      01707                 BANKSEL DEVICE_ID       ; (Bank 0)
0149   0840           01708                 MOVF    DEVICE_ID, W
014A   2329           01709                 CALL    FLASH_RED       ; Flash Device ID
014B   1009           01710                 BCF     PORT_GRN, BIT_GRN
014C   2372           01711                 CALL    DELAY_2S
014D   1509           01712 POST_STAGE_1    BSF     PORT_RED, BIT_RED
014E   236A           01713                 CALL    DELAY_1S
                      01714                 ;
                      01715                 ; Set up USART & misc. options
                      01716                 ;
014F   1683 1303      01717                 BANKSEL OPTION_REG           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0151   1781           01718                 BSF     OPTION_REG, NOT_RBPU ; No pull-up on PORTB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0152   1301           01719                 BCF     OPTION_REG, INTEDG   ; Int on falling edge
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0153   1281           01720                 BCF     OPTION_REG, T0CS     ; TMR0 internal clock
                      01721                                              ; Prescaler on WDT, 1:128
                      01722                 ;
                      01723                 ; Initialiaze timer2 interrupt
                      01724                 ;
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0154   018C           01725                 CLRF    PIE1            ; Also disables TXIE, RXIE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0155   148C           01726                 BSF     PIE1, TMR2IE    ; Timer 2 match Interrupt enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0156   018D           01727                 CLRF    PIE2
                      01728 ;
                      01729 ; set slice timer (TMR2) to period of 137 at 1:8 scale, or 0.0002192 sec,
                      01730 ; which is just less than 1/38 half-cycle (i.e. 38x ZC interrupt rate
                      01731 ; at 60Hz)
                      01732 ;
0157   3089           01733                 MOVLW   .137
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0158   0092           01734                 MOVWF   PR2
                      01735 
                      01736                 ;
                      01737                 ; Initialize serial port receiver
                      01738                 ;
0159   2372           01739                 CALL    DELAY_2S        ; Wait to be sure Tx going
015A   1283 1303      01740                 BANKSEL RCSTA           ; (Bank 0)
015C   1618           01741                 BSF     RCSTA, CREN     ; Enable receiver
                      01742                 ;
                      01743                 ; Enable INT0 interrupt
                      01744                 ;
015D   018B           01745                 CLRF    INTCON
015E   170B           01746                 BSF     INTCON, PEIE    ; Peripheral Interrupts enabled
015F   160B           01747                 BSF     INTCON, INTE    ; INT0 enabled
                      01748 
0160   0190           01749                 CLRF    T1CON           ; Timer 1 OFF
0161   3009           01750                 MOVLW   b'00001001'     ; Timer 2 OFF, prescale 1:4 postscale 1:2
0162   0092           01751                 MOVWF   T2CON
0163   0191           01752                 CLRF    TMR2            ; Reset Timer 2 value
                      01753 
0164   1109           01754 POST_STAGE_2    BCF     PORT_RED, BIT_RED
0165   2375           01755                 CALL    DELAY_250MS
0166   1489           01756                 BSF     PORT_YEL, BIT_YEL
                      01757 
0167   0064           01758 POST_PHASE_SYNC CLRWDT
                      01759 ;
                      01760 ; Inform the slave MPU of the phase offset and start it running
                      01761 ;
0168   236A           01762                 CALL    DELAY_1S
0169   1283 1303      01763                 BANKSEL PHASE_OFFSET    ; (Bank 0)
016B   083D           01764                 MOVF    PHASE_OFFSET, W
                      01765                 ;CALL   SEND_W
                      01766                 ;CALL   FLUSH_SIO
                      01767                 ; SEND_W/FLUSH_SIO aren't ready yet.
                      01768                 ; send byte on our own
016C   0064           01769                 CLRWDT
016D   1E0C           01770                 BTFSS   PIR1, TXIF      ; clear to send?
016E   296C           01771                 GOTO    $-2             ; no, wait for it.
016F   0099           01772                 MOVWF   TXREG           ; transmit value
0170   2355           01773                 CALL    FLASH_PHASE
                      01774 ;
                      01775 ;
                      01776 ; Finally, start up the timer and enable interrupts, and enter
                      01777 ; the main program loop.
                      01778 ;
0171   0064           01779 POST_FINAL      CLRWDT
0172   1283 1303      01780                 BANKSEL TMR2            ; (Bank 0)
0174   018C           01781                 CLRF    PIR1            ; Clear interrupt flags
0175   018D           01782                 CLRF    PIR2            ; Clear interrupt flags
0176   018B           01783                 CLRF    INTCON          ; Clear interrupt flags
0177   170B           01784                 BSF     INTCON, PEIE    ; Enable peripheral interrupts
0178   160B           01785                 BSF     INTCON, INTE    ; Enable INT0 interrupt
0179   0191           01786                 CLRF    TMR2            ; Clear timer value
017A   1512           01787                 BSF     T2CON, TMR2ON   ; Start timer running
017B   14BC           01788                 BSF     PBUF_YEL, BIT_YEL
                      01789 
017C   01C2           01790                 CLRF    YEL_TMR         ; Reset LED timer values
017D   01C3           01791                 CLRF    RED_TMR
017E   01CA           01792                 CLRF    ACT_TMR
017F   30FF           01793                 MOVLW   GRN_BLINK_RATE
0180   00C1           01794                 MOVWF   GRN_TMR
                      01795 
0181   01C4           01796                 CLRF    SSR_STATE
0182   01C8           01797                 CLRF    SSR_STATE2
0183   01CB           01798                 CLRF    SSR_STATE3
0184   01C9           01799                 CLRF    DATA_BUF
0185   01C5           01800                 CLRF    CUR_SLICE
0186   01C6           01801                 CLRF    CUR_PRE
0187   01C7           01802                 CLRF    RX_BYTE
                      01803 
0188   15C4           01804                 BSF     SSR_STATE, GRNEN
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0189   14C8           01805                 BSF     SSR_STATE2, SSRUPD      ; to make lights appear
018A   144B           01806                 BSF     SSR_STATE3, PRIVEN
                      01807 
018B   3050           01808                 MOVLW   TXBUF
018C   00CE           01809                 MOVWF   TXBUF_QUEUE
018D   00CF           01810                 MOVWF   TXBUF_SEND
                      01811 
018E   238A           01812                 CALL    ALL_SSRS_OFF
018F   23AE           01813                 CALL    UPDATE_PORTS
                      01814 ;
                      01815 ; Assert that some important constants have the values they
                      01816 ; are assumed to have.  This is for critical things where
                      01817 ; the stability of the whole system is at stake.  For example,
                      01818 ; a bitmask which limits how far a jump table can go.
                      01819 ;
0190   0064           01820 POST_ASSERTIONS CLRWDT
0191   3007           01821                 MOVLW   CMD_SW_MASK
0192   3C07           01822                 SUBLW   .7
0193   1D03           01823                 BTFSS   STATUS, Z
0194   29A1           01824                 GOTO    ASSERT_FAIL
0195   3007           01825                 MOVLW   SSR_STATE_MASK
0196   3C07           01826                 SUBLW   .7
0197   1D03           01827                 BTFSS   STATUS, Z
0198   29A1           01828                 GOTO    ASSERT_FAIL
0199   303F           01829                 MOVLW   CMD_CHAN_MASK
019A   3C3F           01830                 SUBLW   .63
019B   1D03           01831                 BTFSS   STATUS, Z
019C   29A1           01832                 GOTO    ASSERT_FAIL
019D   301F           01833                 MOVLW   SSR_DEV_MASK
019E   3C1F           01834                 SUBLW   .31
019F   1903           01835                 BTFSC   STATUS, Z
01A0   29A3           01836                 GOTO    ASSERT_PASS
01A1   3003           01837 ASSERT_FAIL     MOVLW   .3
01A2   2B38           01838                 GOTO    FAULT
01A3   178B           01839 ASSERT_PASS     BSF     INTCON, GIE     ; Enable interrupts
                      01840                 ;
                      01841                 ; Fall-through
                      01842                 ;       |
                      01843                 ;       |
                      01844                 ;       V
                      01845 
                      01846 ;================================================================
                      01847 ; MAIN PROGRAM LOOP
                      01848 ;================================================================
                      01849 ;
                      01850 ; This code is run over and over as fast as we can manage.  It keeps the SSR
                      01851 ; logic updated (on cue from the interrupt-driven timing controls), polls for
                      01852 ; serial line input (which it also parses) and keeps the front panel LEDs
                      01853 ; happy.
                      01854 ;
01A4   0064           01855 MAIN_LOOP       CLRWDT
01A5   1283 1303      01856                 BANKSEL 0                       ; (bank 0)
                      01857 ;
                      01858 ; Blink green LED every GRN_BLINK_RATE zero-crossings (1/120 sec)
                      01859 ; if SSR_STATE<GRNEN> set
                      01860 ;
01A7   1D48           01861 MAIN_GREEN      BTFSS   SSR_STATE2, GRNBLK      ; Time to blink green LED?
01A8   29AD           01862                 GOTO    MAIN_YELLOW             ; No...skip the following
01A9   3001           01863                 MOVLW   1<<BIT_GRN              ; toggle green LED bit
01AA   06BC           01864                 XORWF   PBUF_GRN, F
01AB   1148           01865                 BCF     SSR_STATE2, GRNBLK      ; done, clear flag
01AC   14C8           01866                 BSF     SSR_STATE2, SSRUPD
                      01867 
01AD   1DC8           01868 MAIN_YELLOW     BTFSS   SSR_STATE2, YELOFF      ; Time to turn off yellow LED?
01AE   29B2           01869                 GOTO    MAIN_YEL_PRV
01AF   10BC           01870                 BCF     PBUF_YEL, BIT_YEL
01B0   11C8           01871                 BCF     SSR_STATE2, YELOFF
01B1   14C8           01872                 BSF     SSR_STATE2, SSRUPD
                      01873 
01B2   1C4B           01874 MAIN_YEL_PRV    BTFSS   SSR_STATE3, PRIVEN      ; Force YEL on if privs enabled
01B3   29B6           01875                 GOTO    MAIN_RED
01B4   14BC           01876                 BSF     PBUF_YEL, BIT_YEL
01B5   14C8           01877                 BSF     SSR_STATE2, SSRUPD
                      01878 
01B6   1E48           01879 MAIN_RED        BTFSS   SSR_STATE2, REDOFF      ; Time to turn off red LED?
01B7   29BB           01880                 GOTO    MAIN_ACT
01B8   113C           01881                 BCF     PBUF_RED, BIT_RED
01B9   1248           01882                 BCF     SSR_STATE2, REDOFF
01BA   14C8           01883                 BSF     SSR_STATE2, SSRUPD
                      01884 
01BB   0064           01885 MAIN_ACT        CLRWDT
01BC   1CCB           01886                 BTFSS   SSR_STATE3, ACTOFF      ; Time to turn off active LED?
01BD   29C1           01887                 GOTO    MAIN_PROCESS            ; No: skip this
01BE   12B8           01888                 BCF     PBUF_ACT, BIT_ACT
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01BF   10CB           01889                 BCF     SSR_STATE3, ACTOFF
01C0   14C8           01890                 BSF     SSR_STATE2, SSRUPD
                      01891 
01C1   2204           01892 MAIN_PROCESS    CALL    POLL_SIO                ; process pending command byte
01C2   21CC           01893                 CALL    SEND_SIO                ; send outgoing bytes
01C3   23BC           01894                 CALL    UPDATE_SSRS             ; update the SSR lines
                      01895 
01C4   29A4           01896 END_MAIN        GOTO    MAIN_LOOP
                      01897 
                      01898 ;------------------------------------------------------------------------------
                      01899 ; SEND_SIO
                      01900 ;  Serial output queue management.
                      01901 ;
                      01902 ; Context: Sets bank 0
                      01903 ; In:      Reads TXBUF
                      01904 ; Also:    Affects INDF, FSR, TXBUF*, SSR_STATE2<TXQUE>
                      01905 ;
                      01906 ; FLUSH_SIO     Drains the entire output buffer before returning (blocking)
                      01907 ; SEND_SIO      Sends at most one character (non-blocking; returns immediately
                      01908 ;               if the transmitter is still busy)
                      01909 ;
                      01910 ;------------------------------------------------------------------------------
01C5   0064           01911 FLUSH_SIO       CLRWDT
01C6   1283 1303      01912                 BANKSEL SSR_STATE2              ; (Bank 0)
01C8   1C48           01913                 BTFSS   SSR_STATE2, TXQUE
01C9   0008           01914                 RETURN
01CA   21CC           01915                 CALL    SEND_SIO
01CB   29C5           01916                 GOTO    FLUSH_SIO
                      01917 
01CC   0064           01918 SEND_SIO        CLRWDT
01CD   1283 1303      01919                 BANKSEL SSR_STATE2
01CF   1C48           01920                 BTFSS   SSR_STATE2, TXQUE
01D0   0008           01921                 RETURN
01D1   1E0C           01922                 BTFSS   PIR1, TXIF      ; is transmitter ready?
01D2   0008           01923                 RETURN                  ; no: wait for next pass
01D3   1383           01924                 BCF     STATUS, IRP     ; FSR in bank 0/1
01D4   084F           01925                 MOVF    TXBUF_SEND, W   ; yes: set pointer to data
01D5   0084           01926                 MOVWF   FSR
01D6   0800           01927                 MOVF    INDF, W         ; send [FSR] to transmitter
01D7   0099           01928                 MOVWF   TXREG
                      01929 
01D8   0A4F           01930                 INCF    TXBUF_SEND, W   ; bump pointer
01D9   390F           01931                 ANDLW   TXBUF_MASK      ; wrap within table bounds
01DA   3850           01932                 IORLW   TXBUF
01DB   00CF           01933                 MOVWF   TXBUF_SEND
01DC   024E           01934                 SUBWF   TXBUF_QUEUE, W          ; is buffer empty now?
01DD   1903           01935                 BTFSC   STATUS, Z
01DE   1048           01936                 BCF     SSR_STATE2, TXQUE       ; yes: clear tx flag
                      01937 
01DF   153C           01938                 BSF     PBUF_RED, BIT_RED       ; flash red light
01E0   301E           01939                 MOVLW   SLV_TX_LEN
01E1   00C3           01940                 MOVWF   RED_TMR
01E2   16C4           01941                 BSF     SSR_STATE, REDEN
01E3   14C8           01942                 BSF     SSR_STATE2, SSRUPD
01E4   0008           01943                 RETURN
                      01944 
                      01945 ;----------------------------------------------------------------
                      01946 ; SEND_W
                      01947 ;  Queue W to transmit on serial port.
                      01948 ;
                      01949 ; Context: Sets Bank 0
                      01950 ; In:      W=data to send
                      01951 ; Also:    Affects SSR_STATE2<TXQUE>, FSR, TXBUF*, X
                      01952 ;
                      01953 ; Traps Fault 2 if the buffer is full.  This is a fatal error!
                      01954 ; It probably doesn't need to be, but it's safer to err on
                      01955 ; the side of caution here.
                      01956 ;----------------------------------------------------------------
                      01957 
01E5   0064           01958 SEND_W          CLRWDT
01E6   1283 1303      01959                 BANKSEL SSR_STATE2              ; (Bank 0)
01E8   00F5           01960                 MOVWF   X                       ; save value
01E9   1C48           01961                 BTFSS   SSR_STATE2, TXQUE       ; Check for buffer overflow
01EA   29F1           01962                 GOTO    SEND_W_OK               ; Buffer empty; go ahead
01EB   084F           01963                 MOVF    TXBUF_SEND, W           ; Compare pointers
01EC   024E           01964                 SUBWF   TXBUF_QUEUE, W          ; If equal, buffer is full
01ED   1D03           01965                 BTFSS   STATUS, Z
01EE   29F1           01966                 GOTO    SEND_W_OK
01EF   3002           01967                 MOVLW   .2                      ; oops, buffer full
01F0   2B38           01968                 GOTO    FAULT
                      01969 
01F1   0064           01970 SEND_W_OK       CLRWDT                          ; insert W into buffer
01F2   1383           01971                 BCF     STATUS, IRP             ; FSR in bank 0/1
01F3   084E           01972                 MOVF    TXBUF_QUEUE, W
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F4   0084           01973                 MOVWF   FSR
01F5   0875           01974                 MOVF    X, W
01F6   0080           01975                 MOVWF   INDF
01F7   0A4E           01976                 INCF    TXBUF_QUEUE, W          ; bump pointer
01F8   390F           01977                 ANDLW   TXBUF_MASK              ; wrap within table bounds
01F9   3850           01978                 IORLW   TXBUF
01FA   00CE           01979                 MOVWF   TXBUF_QUEUE
01FB   1448           01980                 BSF     SSR_STATE2, TXQUE       ; flag non-empty buffer
                      01981 
01FC   0008           01982                 RETURN
                      01983 
                      01984 ;------------------------------------------------------------------------------
                      01985 ; POLL_SIO
                      01986 ;  Serial I/O handling.
                      01987 ;
                      01988 ; Reads incoming byte from the serial network and interprets it,
                      01989 ; executing the corresponding code to handle the command (assuming
                      01990 ; it's addressed to this unit).
                      01991 ;
                      01992 ; Context: Sets bank 0
                      01993 ;
                      01994 ; 1 start bit, 8 data bits, 1 stop bit, no parity, 19.2Kbaud
                      01995 ; when data received: PIR1<RCIF> set, interrupt raised if enabled
                      01996 ; (PIE1<RCIE>), byte received available in RCREG.  Reading from
                      01997 ; RCREG clears it and the RCIF bit.  (Actually, RCREG is a 2-deep
                      01998 ; FIFO; if it fills up, RCSTA<OERR> (overrun) is raised.  If this
                      01999 ; happens, the I/O locks up and you must turn off and then back
                      02000 ; on the CREN bit.)
                      02001 ;
                      02002 ; Framing errors assert the RCSTA<FERR> bit.
                      02003 ;
                      02004 ; Note that at full speed, you'll get a character every ~.5mS so
                      02005 ; the polling loop has to be at least that fast. (about 2,500
                      02006 ; instruction cycles between characters)
                      02007 ;
01FD   0064           02008 DRAIN_SIO_IN    CLRWDT                  ; drain receiver
01FE   1283 1303      02009                 BANKSEL PIR1            ; (bank 0)
0200   1E8C           02010                 BTFSS   PIR1, RCIF      ; character received?
0201   0008           02011                 RETURN                  ; no: stop
                      02012                 ;BCF    PIR1, RCIF      ; yes: acknowledge...
0202   081A           02013                 MOVF    RCREG, W        ; ...read byte...
0203   29FD           02014                 GOTO    DRAIN_SIO_IN    ; ...and repeat.
                      02015 
0204   0064           02016 POLL_SIO        CLRWDT
0205   1283 1303      02017                 BANKSEL PIR1            ; (bank 0)
0207   1E8C           02018                 BTFSS   PIR1, RCIF      ; character received?
0208   0008           02019                 RETURN                  ; no--move along...
                      02020 
                      02021                 ;BCF    PIR1, RCIF      ; acknowledge receipt
                      02022 
0209   1898           02023                 BTFSC   RCSTA, OERR     ; overrun error?
020A   2AFA           02024                 GOTO    SIO_OVERRUN
                      02025 
020B   1918           02026                 BTFSC   RCSTA, FERR     ; framing error?
020C   2B04           02027                 GOTO    SIO_FRAMERR
                      02028 
020D   0064           02029                 CLRWDT
020E   081A           02030                 MOVF    RCREG,W
020F   00C7           02031                 MOVWF   RX_BYTE                 ; store received byte
                      02032 ;
                      02033 ; Parse the command stream.
                      02034 ; At this point, we've just received a data byte into RX_BYTE.  The
                      02035 ; state of the parser state machine (SSR_STATE<STATE>) dictates what
                      02036 ; we do with the byte we just got.
                      02037 ;
                      02038 ; State:        Byte:
                      02039 ; [0] IDLE      DATA: ignore
                      02040 ;               CMD for other: ignore
                      02041 ;               CMD 0: exec all channels off
                      02042 ;               CMD 1: store cmd; -> 1
                      02043 ;               CMD 2: store cmd; -> 2
                      02044 ;               CMD 3: exec error
                      02045 ;               CMD 4: exec error
                      02046 ;               CMD 5: exec error
                      02047 ;               CMD 6: exec error
                      02048 ;               CMD 7: -> 4
                      02049 ;
                      02050 ; [1] SETCHAN   CMD: error -> 0; rescan
                      02051 ;               DATA: exec set channel on/off -> 0
                      02052 ;
                      02053 ; [2] DIMCHAN1  CMD: error -> 0; rescan
                      02054 ;               DATA: store byte; -> 3
                      02055 ;
                      02056 ; [3] DIMCHAN2  CMD: error -> 0; rescan
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02057 ;               DATA: exec set channel dim level -> 0
                      02058 ;
                      02059 ; [4] ADMIN     CMD: error -> 0; rescan
                      02060 ;               DATA: exec sub-command -> 0
                      02061 ;
                      02062 ; [5-7] UNDEF   HALT ON INTERNAL FAULT
                      02063 ;
0210   0064           02064 CMD_PARSER      CLRWDT
0211   1FC7           02065                 BTFSS   RX_BYTE, CMD_BIT        ; is this a command byte?
0212   2A2A           02066                 GOTO    DATA_BYTE               ; no, go process data byte
                      02067 ;--------------------------------------------------------------------------
                      02068 ; RECEIVED COMMAND BYTE
                      02069 ;
                      02070 ; If we were still waiting for bytes to complete a command (state != 0),
                      02071 ; we abort the command with an error.  Otherwise, we act on the command
                      02072 ; if it's addressed to us.
                      02073 ;
0213   0844           02074                 MOVF    SSR_STATE, W            ; COMMAND BYTE:
0214   3907           02075                 ANDLW   SSR_STATE_MASK          ; --Error if state != 0
0215   1D03           02076                 BTFSS   STATUS, Z               ;
0216   2AF2           02077                 GOTO    CMD_ABORT               ;
                      02078 ;
                      02079 ; Received command in state 0 (idle).  If we're the master, we make sure
                      02080 ; the command is addressed to us, and ignore it if it's not.  If we are
                      02081 ; the slave, our commands all come from the master, so we just do them
                      02082 ; unconditionally.
                      02083 ;
0217   300F           02084                 MOVLW   CMD_ADDR_MASK           ; Mask off cmd address
0218   0547           02085                 ANDWF   RX_BYTE, W
0219   0240           02086                 SUBWF   DEVICE_ID, W
021A   1D03           02087                 BTFSS   STATUS, Z               ; Is the command mine?
021B   0008           02088                 RETURN                          ; nope
                      02089 
021C   303C           02090                 MOVLW   ACT_RX_LEN              ; Turn on active LED
021D   00CA           02091                 MOVWF   ACT_TMR
021E   154B           02092                 BSF     SSR_STATE3, ACTEN
021F   16B8           02093                 BSF     PBUF_ACT, BIT_ACT
0220   14C8           02094                 BSF     SSR_STATE2, SSRUPD
0221   2805           02095                 GOTO    STATE_0_CMD_TBL         ; dispatch command from RX_BYTE
                      02096 ;
                      02097 ; COMMAND 0:    ALL CHANNELS OFF
                      02098 ;               1000aaaa
                      02099 ;                       Set all device channels to OFF state
                      02100 ;
0222   238A           02101 CMD_0           CALL    ALL_SSRS_OFF
0223   2B14           02102                 GOTO    PASS_DOWN
                      02103 ;
                      02104 ; COMMAND 1:    SET CHANNEL ON/OFF
                      02105 ;               1001aaaa ...
                      02106 ;               Wait for next byte
                      02107 ;
0224   1444           02108 CMD_1           BSF     SSR_STATE, STATE0       ; -> 1
0225   0008           02109                 RETURN
                      02110 ;
                      02111 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02112 ;               1010aaaa ...
                      02113 ;               Wait for next byte
                      02114 ;
0226   14C4           02115 CMD_2           BSF     SSR_STATE, STATE1       ; -> 2
0227   0008           02116                 RETURN
                      02117 ;
                      02118 ; COMMAND 7:    ADMINISTRATIVE COMMANDS
                      02119 ;               1011aaaa ...
                      02120 ;               Wait for next byte
                      02121 ;
0228   1544           02122 CMD_7           BSF     SSR_STATE, STATE2       ; -> 4
0229   0008           02123                 RETURN
                      02124 ;
                      02125 ;--------------------------------------------------------------------------
                      02126 ; RECEIVED DATA BYTE
                      02127 ;
                      02128 ; If we were not waiting for one (state zero), just ignore it.  It's some-
                      02129 ; one else's.  Otherwise, do what we were waiting for.
                      02130 ;
                      02131 ; Data byte handler dispatch based on state machine value.
                      02132 ;
022A   2813           02133 DATA_BYTE       GOTO    DATA_BYTE_TBL           ; Dispatch command from state
                      02134                                                 ; machine value.
                      02135 
022B   3001           02136 FAULT_1         MOVLW   .1                      ; Fault code
022C   2B38           02137                 GOTO    FAULT                   ; Halt on error
                      02138 ;
                      02139 ; COMMAND 1:    SET CHANNEL ON/OFF
                      02140 ;               1001aaaa 0fvvvvvv
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02141 ;               Set channel vvvvvv to on if f=1 or off if f=0
                      02142 ;
022D   0064           02143 DATA_STATE_1    CLRWDT
022E   1283 1303      02144                 BANKSEL SSR_ID                  ; (bank 0)
0230   0847           02145                 MOVF    RX_BYTE, W              ; get channel id byte
0231   393F           02146                 ANDLW   CMD_CHAN_MASK
0232   00BE           02147                 MOVWF   SSR_ID
0233   2305           02148                 CALL    XLATE_SSR_ID            ; get local SSR ID
0234   1B3E           02149                 BTFSC   SSR_ID, ILLSSR          ; is it a bad SSR?
0235   2AF1           02150                 GOTO    CMD_ERROR
0236   1FBE           02151                 BTFSS   SSR_ID, MY_SSR          ; is it even my SSR?
0237   2A3C           02152                 GOTO    PASS_CMD_1              ; nope
                      02153 
0238   0180           02154                 CLRF    INDF                    ; clear dim, on, value
0239   1B47           02155                 BTFSC   RX_BYTE, CMD_CHAN_ON    ; set ON if on bit set in cmd
023A   1780           02156                 BSF     INDF, SSR_ON
023B   2A42           02157                 GOTO    CMD_RESET_STATE
                      02158 
023C   0064           02159 PASS_CMD_1      CLRWDT                          ; not my SSR, send to slave CPU
023D   3090           02160                 MOVLW   b'10010000'
023E   21E5           02161                 CALL    SEND_W
023F   0847           02162                 MOVF    RX_BYTE, W
0240   21E5           02163                 CALL    SEND_W
0241   2A42           02164                 GOTO    CMD_RESET_STATE
                      02165 
                      02166 ;
                      02167 ; Reset state machine (-> 0)
                      02168 ; This is usually the last step in any command execution.
                      02169 ;
0242   0064           02170 CMD_RESET_STATE CLRWDT
0243   30F8           02171                 MOVLW   ~SSR_STATE_MASK
0244   05C4           02172                 ANDWF   SSR_STATE, F            ; -> 0
0245   0008           02173                 RETURN
                      02174 ;
                      02175 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02176 ;               1010aaaa 0xvvvvvv ...
                      02177 ;               Wait for last byte
                      02178 ;
0246   0064           02179 DATA_STATE_2    CLRWDT
0247   0847           02180                 MOVF    RX_BYTE, W
0248   00C9           02181                 MOVWF   DATA_BUF                ; store received byte
0249   1444           02182                 BSF     SSR_STATE, STATE0       ; -> 3
024A   0008           02183                 RETURN
                      02184 ;
                      02185 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02186 ;               1010aaaa 0xvvvvvv 0xxddddd
                      02187 ;               Set channel vvvvvv to dimmer level ddddd.
                      02188 ;
                      02189 ; note that setting value=0 or value=31 here is subtly different
                      02190 ; than just using the "set on/off" command.  This always engages
                      02191 ; the dimmer controls, although in theory a value of 0 should never
                      02192 ; get turned on, and a value of 31 should be pretty darn near fully
                      02193 ; on.
                      02194 ;
024B   0064           02195 DATA_STATE_3    CLRWDT
024C   0849           02196                 MOVF    DATA_BUF, W             ; get requested channel
024D   393F           02197                 ANDLW   CMD_CHAN_MASK
024E   00BE           02198                 MOVWF   SSR_ID
024F   2305           02199                 CALL    XLATE_SSR_ID            ; normalize channel ID
0250   1B3E           02200                 BTFSC   SSR_ID, ILLSSR          ; is it even valid?
0251   2AF1           02201                 GOTO    CMD_ERROR
0252   1FBE           02202                 BTFSS   SSR_ID, MY_SSR          ; is it for me?
0253   2A5A           02203                 GOTO    PASS_CMD_2              ; no: pass to slave
                      02204 
0254   0847           02205                 MOVF    RX_BYTE, W              ; get dimmer value
0255   391F           02206                 ANDLW   CMD_DIM_MASK
0256   0080           02207                 MOVWF   INDF                    ; write to SSR value buffer
0257   1700           02208                 BSF     INDF, SSRDIM            ; set SSR channel flags
0258   1380           02209                 BCF     INDF, SSR_ON
0259   2A42           02210                 GOTO    CMD_RESET_STATE
                      02211 ;
                      02212 ; If the channel is actually for the slave CPU, we need to send it
                      02213 ; over there.
                      02214 ;
025A   0064           02215 PASS_CMD_2      CLRWDT
025B   30A0           02216                 MOVLW   b'10100000'
025C   21E5           02217                 CALL    SEND_W
025D   0849           02218                 MOVF    DATA_BUF, W
025E   21E5           02219                 CALL    SEND_W
025F   0847           02220                 MOVF    RX_BYTE, W
0260   21E5           02221                 CALL    SEND_W
0261   2A42           02222                 GOTO    CMD_RESET_STATE
                      02223 ;
                      02224 ; COMMAND 7:    ADMINISTRATIVE FUNCTIONS
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02225 ;               1111aaaa 0xxxxxxx
                      02226 ;                        00pppppp set phase offset=p(*)
                      02227 ;                        010baaaa set device ID(*)
                      02228 ;                        01100000 shutdown(*)
                      02229 ;                        01100001 disable privileged commands
                      02230 ;                        011101yr (slave) red/yel 2s
                      02231 ;                        01111gyr (slave) halt with LED pattern
                      02232 ;
0262   0064           02233 DATA_STATE_4    CLRWDT
0263   1F47           02234                 BTFSS   RX_BYTE, 6              ; -0------ set phase offset
0264   2A6B           02235                 GOTO    CMD_SET_PHASE
0265   1EC7           02236                 BTFSS   RX_BYTE, 5              ; -10----- set device id
0266   2A92           02237                 GOTO    CMD_SET_DEV_ID
0267   1E47           02238                 BTFSS   RX_BYTE, 4              ; -110---- admin commands
0268   2ACC           02239                 GOTO    CMD_ADMIN
0269   0064           02240 CMD_SLAVE_CTL   CLRWDT                          ; -111---- slave control commands
026A   2AF1           02241                 GOTO    CMD_ERROR               ; These can't come from outside
                      02242 ;
                      02243 ; ADMIN: SET PHASE       1111aaaa 00pppppp
                      02244 ; Set phase offset to p, reboot device
                      02245 ;
026B   0064           02246 CMD_SET_PHASE   CLRWDT
026C   1C4B           02247                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
026D   2AEB           02248                 GOTO    CMD_PRIV_ERROR
026E   30F0           02249                 MOVLW   b'11110000'             ; pass down to slave, too
026F   21E5           02250                 CALL    SEND_W                  ;
0270   2314           02251                 CALL    PASS_DOWN               ;
0271   21C5           02252                 CALL    FLUSH_SIO
                      02253 
0272   0064           02254                 CLRWDT                          ; burn into EEPROM
0273   1283 1703      02255                 BANKSEL EEADR                   ; (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0275   018E           02256                 CLRF    EEDATH
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0276   018F           02257                 CLRF    EEADRH
0277   3002           02258                 MOVLW   EE_PHASE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0278   008D           02259                 MOVWF   EEADR
0279   1283 1303      02260                 BANKSEL RX_BYTE                 ; (Bank 0)
027B   0847           02261                 MOVF    RX_BYTE, W
027C   393F           02262                 ANDLW   CMD_AD_PH_MASK
027D   1283 1703      02263                 BANKSEL EEDATA                  ; (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
027F   008C           02264                 MOVWF   EEDATA
0280   1683 1703      02265                 BANKSEL EECON1                  ; (Bank 3)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0282   138C           02266                 BCF     EECON1, EEPGD           ; Write to data memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0283   150C           02267                 BSF     EECON1, WREN            ; Enable EEPROM writing
0284   138B           02268                 BCF     INTCON, GIE
0285   3055           02269                 MOVLW   0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0286   008D           02270                 MOVWF   EECON2
0287   30AA           02271                 MOVLW   0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0288   008D           02272                 MOVWF   EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0289   148C           02273                 BSF     EECON1, WR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
028A   110C           02274                 BCF     EECON1, WREN
028B   0064           02275                 CLRWDT
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
028C   188C           02276                 BTFSC   EECON1, WR
028D   2A8C           02277                 GOTO    $-1
028E   1283 1303      02278                 BANKSEL PIR2                    ; (Bank 0)
0290   120D           02279                 BCF     PIR2, EEIF
0291   2800           02280                 GOTO    RESTART_VECTOR          ; Restart device from scratch
                      02281 ;
                      02282 ; ADMIN: SET DEVICE ID   1111aaaa 010baaaa
                      02283 ; Change this device's ID on the serial network
                      02284 ;
                      02285 ; as a check bit, b==a<0>.  So, to set the device
                      02286 ; to ID=2, send 1111aaaa 01000010; to set it
                      02287 ; to ID=5, send 1111aaaa 01010101.
                      02288 ;
0292   0064           02289 CMD_SET_DEV_ID  CLRWDT
0293   1C4B           02290                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
0294   2AEB           02291                 GOTO    CMD_PRIV_ERROR
                      02292 ;
                      02293 ;
                      02294 ; Verify check bit
                      02295 ;
0295   1C47           02296                 BTFSS   RX_BYTE, 0
0296   2A9A           02297                 GOTO    CMD_SDI_0
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0297   1E47           02298                 BTFSS   RX_BYTE, 4              ; a<0>=1
0298   2AF1           02299                 GOTO    CMD_ERROR               ; but b=0: REJECT!
0299   2A9C           02300                 GOTO    CMD_SDI_OK
029A   1A47           02301 CMD_SDI_0       BTFSC   RX_BYTE, 4              ; a<0>=0
029B   2AF1           02302                 GOTO    CMD_ERROR               ; but b=1: REJECT!
                      02303 ;
                      02304 ; Write to DEVICE_ID and burn to EEPROM
                      02305 ;
029C   0847           02306 CMD_SDI_OK      MOVF    RX_BYTE, W
029D   390F           02307                 ANDLW   CMD_ADDR_MASK
029E   00C0           02308                 MOVWF   DEVICE_ID
                      02309 
029F   138B           02310                 BCF     INTCON, GIE             ; Clear interrupts
02A0   238A           02311                 CALL    ALL_SSRS_OFF            ; Shut everything off
02A1   01BC           02312                 CLRF    PORTE_BUF
02A2   23AE           02313                 CALL    UPDATE_PORTS
                      02314 
02A3   0064           02315                 CLRWDT                          ; burn into EEPROM
02A4   1283 1703      02316                 BANKSEL EEADR                   ; (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02A6   018E           02317                 CLRF    EEDATH
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02A7   018F           02318                 CLRF    EEADRH
02A8   3001           02319                 MOVLW   EE_DEV_ID
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02A9   008D           02320                 MOVWF   EEADR
02AA   1283 1303      02321                 BANKSEL DEVICE_ID               ; (Bank 0)
02AC   0840           02322                 MOVF    DEVICE_ID, W
02AD   1283 1703      02323                 BANKSEL EEDATA                  ; (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02AF   008C           02324                 MOVWF   EEDATA
02B0   1683 1703      02325                 BANKSEL EECON1                  ; (Bank 3)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B2   138C           02326                 BCF     EECON1, EEPGD           ; Write to data memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B3   150C           02327                 BSF     EECON1, WREN            ; Enable EEPROM writing
02B4   3055           02328                 MOVLW   0x55
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B5   008D           02329                 MOVWF   EECON2
02B6   30AA           02330                 MOVLW   0xAA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B7   008D           02331                 MOVWF   EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B8   148C           02332                 BSF     EECON1, WR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02B9   110C           02333                 BCF     EECON1, WREN
02BA   0064           02334                 CLRWDT
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02BB   188C           02335                 BTFSC   EECON1, WR
02BC   2ABB           02336                 GOTO    $-1
02BD   1283 1303      02337                 BANKSEL PIR2                    ; (Bank 0)
02BF   120D           02338                 BCF     PIR2, EEIF
                      02339 ;
                      02340 ; Display new ID on LEDs
                      02341 ;
02C0   0064           02342                 CLRWDT
02C1   2372           02343                 CALL    DELAY_2S
02C2   1409           02344                 BSF     PORT_GRN, BIT_GRN
02C3   2375           02345                 CALL    DELAY_250MS
02C4   1283 1303      02346                 BANKSEL DEVICE_ID       ; (Bank 0)
02C6   0840           02347                 MOVF    DEVICE_ID, W
02C7   2329           02348                 CALL    FLASH_RED       ; Flash Device ID
02C8   1009           02349                 BCF     PORT_GRN, BIT_GRN
02C9   2372           02350                 CALL    DELAY_2S
                      02351 ;
                      02352 ; Resume operations
                      02353 ;
02CA   178B           02354                 BSF     INTCON, GIE
02CB   2A42           02355                 GOTO    CMD_RESET_STATE
                      02356 ;
                      02357 ; ADMIN: MISC. ADMINISTRATIVE FUNCTIONS
                      02358 ;               1111aaaa 0110xxxx (function x (0-15))
                      02359 ;                        01100000 shutdown(*)
                      02360 ;                        01100001 disable privileged commands
                      02361 ;
02CC   2821           02362 CMD_ADMIN       GOTO    CMD_ADMIN_TABLE
                      02363 
                      02364 ;
                      02365 ; ADMIN: SHUTDOWN
                      02366 ;
02CD   0064           02367 CMD_AD_SHUTDOWN CLRWDT
02CE   1C4B           02368                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
02CF   2AEB           02369                 GOTO    CMD_PRIV_ERROR
02D0   30F0           02370                 MOVLW   b'11110000'
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D1   21E5           02371                 CALL    SEND_W
02D2   2314           02372                 CALL    PASS_DOWN
02D3   21C5           02373                 CALL    FLUSH_SIO
02D4   138B           02374                 BCF     INTCON, GIE             ; turn off interrupts
02D5   238A           02375                 CALL    ALL_SSRS_OFF
02D6   01BC           02376                 CLRF    PORTE_BUF
02D7   23AE           02377                 CALL    UPDATE_PORTS
02D8   2375           02378                 CALL    DELAY_250MS
02D9   1489           02379                 BSF     PORT_YEL, BIT_YEL
02DA   236A           02380                 CALL    DELAY_1S
02DB   1089           02381                 BCF     PORT_YEL, BIT_YEL
02DC   2375           02382                 CALL    DELAY_250MS
02DD   1509           02383                 BSF     PORT_RED, BIT_RED
02DE   2372           02384                 CALL    DELAY_2S
02DF   0063           02385                 SLEEP
02E0   0064           02386                 CLRWDT                          ; extra paranoia
02E1   2AE0           02387                 GOTO    $-1
                      02388 ;
                      02389 ; ADMIN: DISABLE PRIVILEGED FUNCTIONS
                      02390 ;
02E2   0064           02391 CMD_AD_DIS_PRIV CLRWDT
02E3   30F0           02392                 MOVLW   b'11110000'
02E4   21E5           02393                 CALL    SEND_W
02E5   2314           02394                 CALL    PASS_DOWN
02E6   104B           02395                 BCF     SSR_STATE3, PRIVEN
02E7   1E44           02396                 BTFSS   SSR_STATE, YELEN
02E8   10BC           02397                 BCF     PBUF_YEL, BIT_YEL
02E9   14C8           02398                 BSF     SSR_STATE2, SSRUPD
02EA   2A42           02399                 GOTO    CMD_RESET_STATE
                      02400 ;------------------------------------------------------------------------------
                      02401 ; ERROR HANDLING
                      02402 ;------------------------------------------------------------------------------
                      02403 ;
                      02404 ; CMD_PRIV_ERROR Received privileged command when not enabled
                      02405 ;
                      02406 ; CMD_ERROR      Received invalid command; flash LED and ignore it
                      02407 ;
                      02408 ; CMD_ABORT      Received invalid byte in command sequence; flash
                      02409 ;                LED and re-parse received byte in case it might be
                      02410 ;                a new command addressed to us
                      02411 ;
02EB   0064           02412 CMD_PRIV_ERROR  CLRWDT
                      02413 ; The diagnostic LEDs are on the slave side, so the
                      02414 ; master just commands the slave to display Y+R 2S
                      02415 ;
02EC   30F0           02416                 MOVLW   b'11110000'
02ED   21E5           02417                 CALL    SEND_W
02EE   3077           02418                 MOVLW   b'01110111'
02EF   21E5           02419                 CALL    SEND_W
02F0   2A42           02420                 GOTO    CMD_RESET_STATE
                      02421 
02F1   01C7           02422 CMD_ERROR       CLRF    RX_BYTE                 ; clear byte so rescan==ignore
02F2   0064           02423 CMD_ABORT       CLRWDT
02F3   14BC           02424                 BSF     PBUF_YEL, BIT_YEL
02F4   30F0           02425                 MOVLW   YEL_CMDERR_LEN
02F5   00C2           02426                 MOVWF   YEL_TMR
02F6   1644           02427                 BSF     SSR_STATE, YELEN
02F7   14C8           02428                 BSF     SSR_STATE2, SSRUPD
02F8   2242           02429                 CALL    CMD_RESET_STATE         ; -> 0
02F9   2A10           02430                 GOTO    CMD_PARSER              ; rescan byte
                      02431 ;
                      02432 ; Data overrun!  Panic!
                      02433 ;
02FA   0064           02434 SIO_OVERRUN     CLRWDT
02FB   1218           02435                 BCF     RCSTA, CREN             ; shut down receiver
02FC   2375           02436                 CALL    DELAY_250MS             ; for 250mS (maybe longer
02FD   1618           02437                 BSF     RCSTA, CREN             ; than strictly necessary)
02FE   3078           02438                 MOVLW   RED_ORERR_LEN
02FF   00C3           02439                 MOVWF   RED_TMR
0300   16C4           02440                 BSF     SSR_STATE, REDEN
0301   153C           02441                 BSF     PBUF_RED, BIT_RED
0302   14C8           02442                 BSF     SSR_STATE2, SSRUPD
0303   2A42           02443                 GOTO    CMD_RESET_STATE
                      02444 ;
                      02445 ; Framing Error!  Don't Panic!  But flag as a command error, reset state
                      02446 ; machine, etc.
                      02447 ;
0304   2AF1           02448 SIO_FRAMERR     GOTO    CMD_ERROR
                      02449 ;
                      02450 ;==============================================================================
                      02451 ; XLATE_SSR_ID
                      02452 ;  Translate the channel number to a local SSR number 0-23.
                      02453 ;
                      02454 ; Context: Sets Bank 0
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02455 ; In:      SSR_ID=raw command
                      02456 ; Out:     SSR_ID=adjusted value, MY_SSR,ILLSSR flags
                      02457 ;          FSR=pointer to SSR value register
                      02458 ;
                      02459 ;==============================================================================
                      02460 ;
                      02461 ; Given a raw channel number in SSR_ID, convert it to the local
                      02462 ; SSR ID 0-23 and set the MY_SSR bit if this board has that SSR.
                      02463 ; Load FSR to point to that SSR's buffer
                      02464 ;
                      02465 ; Otherwise, clear MY_SSR and the other bits are undefined (in
                      02466 ; which case we should ignore the command and let the other board
                      02467 ; handle it).
                      02468 ;
                      02469 ; For this model, SSR ID 00-23 is for the master board,
                      02470 ; and SSR ID 24-47 is 00-23 on the slave board.
                      02471 ;
                      02472 ; If an illegal SSR ID is specified, ILLSSR is set.  In
                      02473 ; this case, disregard ALL OTHER BITS including MY_SSR.
                      02474 ;
0305   0064           02475 XLATE_SSR_ID    CLRWDT
0306   1283 1303      02476                 BANKSEL SSR_ID          ; (bank 0)
0308   303F           02477                 MOVLW   CMD_CHAN_MASK   ; mask off just the channel
0309   05BE           02478                 ANDWF   SSR_ID, F       ; (also clears MY_SSR and ILLSSR)
030A   3018           02479                 MOVLW   .24             ; subtract ch-24
030B   023E           02480                 SUBWF   SSR_ID, W       ; if ch<24, it is
030C   1803           02481                 BTFSC   STATUS, C       ;
030D   0008           02482                 RETURN                  ; return (not mine) if >= 24
030E   17BE           02483                 BSF     SSR_ID, MY_SSR  ; it's mine!
030F   083E           02484                 MOVF    SSR_ID, W
0310   393F           02485                 ANDLW   CMD_CHAN_MASK   ; calculate offset to SSR value register
0311   3E20           02486                 ADDLW   SSR00_VAL
0312   0084           02487                 MOVWF   FSR             ; make FSR point to that register
0313   0008           02488                 RETURN
                      02489 
                      02490 
                      02491 ;----------------------------------------------------------------
                      02492 ; PASS_DOWN
                      02493 ;  Pass received byte (in RX_BYTE) down to slave CPU.
                      02494 ;
                      02495 ; Context: Sets Bank 0
                      02496 ;
                      02497 ;----------------------------------------------------------------
0314   0064           02498 PASS_DOWN       CLRWDT
0315   1283 1303      02499                 BANKSEL RX_BYTE
0317   0847           02500                 MOVF    RX_BYTE, W
0318   21E5           02501                 CALL    SEND_W
0319   0008           02502                 RETURN
                      02503 
                      02504 
                      02505 ;----------------------------------------------------------------
                      02506 ; FLASH_YEL
                      02507 ; FLASH_RED
                      02508 ;  Flash yellow or red LED a number of times
                      02509 ;
                      02510 ;  These write directly to the LED I/O port, so can only be
                      02511 ;  used outside normal running mode (POST, etc).
                      02512 ;
                      02513 ;  Context: Bank 0
                      02514 ;  In:      W=flasher count
                      02515 ;  Also:    FLASH_CT I, J, K affected
                      02516 ;----------------------------------------------------------------
031A   0064           02517 FLASH_YEL       CLRWDT
031B   1283 1303      02518                 BANKSEL FLASH_CT        ; (Bank 0)
031D   00BF           02519                 MOVWF   FLASH_CT
031E   236B           02520                 CALL    FLASH_OFF_DELAY
031F   08BF           02521                 MOVF    FLASH_CT, F     ; If already zero, stop
0320   1903           02522                 BTFSC   STATUS, Z
0321   0008           02523                 RETURN
                      02524 
0322   1489           02525 NEXT_FLASH_YEL  BSF     PORT_YEL, BIT_YEL
0323   236F           02526                 CALL    FLASH_ON_DELAY
0324   1089           02527                 BCF     PORT_YEL, BIT_YEL
0325   236B           02528                 CALL    FLASH_OFF_DELAY
0326   0BBF           02529                 DECFSZ  FLASH_CT, F
0327   2B22           02530                 GOTO    NEXT_FLASH_YEL
0328   0008           02531                 RETURN
                      02532 
0329   0064           02533 FLASH_RED       CLRWDT
032A   1283 1303      02534                 BANKSEL FLASH_CT        ; (Bank 0)
032C   00BF           02535                 MOVWF   FLASH_CT
032D   236B           02536                 CALL    FLASH_OFF_DELAY
032E   08BF           02537                 MOVF    FLASH_CT, F     ; If already zero, stop
032F   1903           02538                 BTFSC   STATUS, Z
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0330   0008           02539                 RETURN
                      02540 
0331   1509           02541 NEXT_FLASH_RED  BSF     PORT_RED, BIT_RED
0332   236F           02542                 CALL    FLASH_ON_DELAY
0333   1109           02543                 BCF     PORT_RED, BIT_RED
0334   236B           02544                 CALL    FLASH_OFF_DELAY
0335   0BBF           02545                 DECFSZ  FLASH_CT, F
0336   2B31           02546                 GOTO    NEXT_FLASH_RED
0337   0008           02547                 RETURN
                      02548 
                      02549 ;----------------------------------------------------------------
                      02550 ; FAULT
                      02551 ;  Register a fault condition and halt operations.
                      02552 ;
                      02553 ; Codes:
                      02554 ;  Value  A GY GYR  Meaning
                      02555 ;  000001 - -- --O  Illegal state machine value
                      02556 ;  000010 - -- -O-  TX buffer overflow
                      02557 ;  000011 - -- -OO  Assertion error in POST
                      02558 ;  (none) x xx OOO  Slave tried to pass cmd downstream
                      02559 ;  (none) x xx OOO  Any fault detected only in slave CPU
                      02560 ;  011000 - OO ---  Internal SSR index out of range (==24)
                      02561 ;     :      :
                      02562 ;  011111 - OO OOO  Internal SSR index out of range (==31)
                      02563 ;
                      02564 ; Context: Sets Bank 0
                      02565 ; In:      W=fault code (0-63)
                      02566 ; Returns: never
                      02567 ;
                      02568 ;----------------------------------------------------------------
0338   0064           02569 FAULT           CLRWDT
0339   1283 1303      02570                 BANKSEL INTCON
033B   138B           02571                 BCF     INTCON, GIE     ; disable interrupts
033C   238A           02572                 CALL    ALL_SSRS_OFF    ; kill outputs
033D   01BC           02573                 CLRF    PORTE_BUF       ; reset T/R, LED outputs
033E   23AE           02574                 CALL    UPDATE_PORTS    ; flush to output
                      02575 ;
                      02576 ;
                      02577 ; Send FAULT condition to slave CPU first.
                      02578 ; Bits <2:0> of the fault code are sent there to be displayed
                      02579 ; on its LEDs.
                      02580 ;   11111111 01111vvv -> slave
                      02581 
033F   00F5           02582                 MOVWF   X
0340   30FF           02583                 MOVLW   b'11111111'
0341   21E5           02584                 CALL    SEND_W
0342   0875           02585                 MOVF    X, W
0343   3907           02586                 ANDLW   b'00000111'     ; mask off bits to send
0344   3878           02587                 IORLW   b'01111000'     ; add command code bits
0345   21E5           02588                 CALL    SEND_W
0346   21C5           02589                 CALL    FLUSH_SIO
                      02590 ;
                      02591 ; Display remaining 3 bits on ACT, GRN, YEL LEDs
                      02592 ;
0347   1AF5           02593                 BTFSC   X, 5
0348   16B8           02594                 BSF     PBUF_ACT, BIT_ACT
0349   1A75           02595                 BTFSC   X, 4
034A   143C           02596                 BSF     PBUF_GRN, BIT_GRN
034B   19F5           02597                 BTFSC   X, 3
034C   14BC           02598                 BSF     PBUF_YEL, BIT_YEL
                      02599 ;
                      02600 ; Flash red LED, effectively halting all other operations
                      02601 ;
034D   0064           02602 FAULT_HALT      CLRWDT
034E   153C           02603                 BSF     PBUF_RED, BIT_RED
034F   23AE           02604                 CALL    UPDATE_PORTS
0350   236E           02605                 CALL    DELAY_500MS
0351   113C           02606                 BCF     PBUF_RED, BIT_RED
0352   23AE           02607                 CALL    UPDATE_PORTS
0353   236E           02608                 CALL    DELAY_500MS
0354   2B4D           02609                 GOTO    FAULT_HALT
                      02610 ;
                      02611 ;
                      02612 
                      02613 
                      02614 ;----------------------------------------------------------------
                      02615 ; FLASH_PHASE
                      02616 ;  Flash the phase offset value on the diagnostic LEDs.
                      02617 ;  Normal interrupt processing should be suspended during this
                      02618 ;  operation.
                      02619 ;
                      02620 ;  Properly turns off LEDs via port buffers, but then takes over
                      02621 ;  direct control of the LEDs like the POST-level commands do.
                      02622 ;  (this is called during POST as well)
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02623 ;
                      02624 ; Context: Sets Bank 0
                      02625 ; In:      PHASE_OFFSET=phase
                      02626 ; Also:    I, J, K affected
                      02627 ;----------------------------------------------------------------
0355   0064           02628 FLASH_PHASE     CLRWDT
0356   1283 1303      02629                 BANKSEL PHASE_OFFSET    ; (Bank 0)
0358   103C           02630                 BCF     PBUF_GRN, BIT_GRN
0359   10BC           02631                 BCF     PBUF_YEL, BIT_YEL
035A   113C           02632                 BCF     PBUF_RED, BIT_RED
035B   23AE           02633                 CALL    UPDATE_PORTS
035C   2372           02634                 CALL    DELAY_2S
035D   1509           02635                 BSF     PORT_RED, BIT_RED
035E   0E3D           02636                 SWAPF   PHASE_OFFSET, W
035F   390F           02637                 ANDLW   0x0F
0360   231A           02638                 CALL    FLASH_YEL
0361   1109           02639                 BCF     PORT_RED, BIT_RED
0362   2372           02640                 CALL    DELAY_2S
0363   1489           02641                 BSF     PORT_YEL, BIT_YEL
0364   083D           02642                 MOVF    PHASE_OFFSET, W
0365   390F           02643                 ANDLW   0x0F
0366   2329           02644                 CALL    FLASH_RED
0367   1089           02645                 BCF     PORT_YEL, BIT_YEL
0368   2372           02646                 CALL    DELAY_2S
0369   0008           02647                 RETURN
                      02648 
                      02649 
                      02650 
                      02651 
                      02652 
036A   0064           02653 DELAY_1S        CLRWDT
036B   304C           02654 FLASH_OFF_DELAY MOVLW   .76
036C   00F2           02655                 MOVWF   I
036D   2B7E           02656                 GOTO    ISPINNER
                      02657 
036E   0064           02658 DELAY_500MS     CLRWDT
036F   3026           02659 FLASH_ON_DELAY  MOVLW   .38
0370   00F2           02660                 MOVWF   I
0371   2B7E           02661                 GOTO    ISPINNER
                      02662 
0372   3098           02663 DELAY_2S        MOVLW   .152
0373   00F2           02664                 MOVWF   I
0374   2B7E           02665                 GOTO    ISPINNER
                      02666 
0375   3013           02667 DELAY_250MS     MOVLW   .19
0376   00F2           02668                 MOVWF   I
0377   2B7E           02669                 GOTO    ISPINNER
                      02670 
0378   300A           02671 DELAY_125MS     MOVLW   .10
0379   00F2           02672                 MOVWF   I
037A   2B7E           02673                 GOTO    ISPINNER
                      02674 
                      02675 ; fash flasher value
037B   3005           02676 DELAY_FFLASH    MOVLW   .5
037C   00F2           02677                 MOVWF   I
037D   2B7E           02678                 GOTO    ISPINNER
                      02679 
                      02680 ;----------------------------------------------------------------
                      02681 ; ISPINNER
                      02682 ;  Delay for approximately I * 255 * 255 instructions.
                      02683 ;  I=19 is about 250mS
                      02684 ;  I=38 is about 500mS
                      02685 ;
                      02686 ; Context: ANY bank
                      02687 ; In:      I=delay
                      02688 ;
                      02689 ; Also:    J, K, W affected
                      02690 ;----------------------------------------------------------------
037E   0064           02691 ISPINNER        CLRWDT
037F   30FF           02692                 MOVLW   .255
0380   00F3           02693                 MOVWF   J
0381   30FF           02694 ISP_NEXTJ       MOVLW   .255
0382   00F4           02695                 MOVWF   K
0383   0BF4           02696                 DECFSZ  K,F
0384   2B83           02697                 GOTO    $-1
0385   0BF3           02698                 DECFSZ  J,F
0386   2B81           02699                 GOTO    ISP_NEXTJ
0387   0BF2           02700                 DECFSZ  I,F
0388   2B7E           02701                 GOTO    ISPINNER
0389   0008           02702                 RETURN
                      02703 
                      02704 ;------------------------------------------------------------------------------
                      02705 ; ALL_SSRS_OFF
                      02706 ;
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02707 ; The fastest route to clearing all SSR channels
                      02708 ; call UPDATE_PORTS after this.
                      02709 ;
                      02710 ; Context: Sets Bank 0
                      02711 ; Also:    Affects W
                      02712 ;
                      02713 ;------------------------------------------------------------------------------
038A   0064           02714 ALL_SSRS_OFF    CLRWDT
038B   1283 1303      02715                 BANKSEL SSR00_VAL       ; (Bank 0)
038D   01A0           02716                 CLRF    SSR00_VAL
038E   01A1           02717                 CLRF    SSR01_VAL
038F   01A2           02718                 CLRF    SSR02_VAL
0390   01A3           02719                 CLRF    SSR03_VAL
0391   01A4           02720                 CLRF    SSR04_VAL
0392   01A5           02721                 CLRF    SSR05_VAL
0393   01A6           02722                 CLRF    SSR06_VAL
0394   01A7           02723                 CLRF    SSR07_VAL
0395   01A8           02724                 CLRF    SSR08_VAL
0396   01A9           02725                 CLRF    SSR09_VAL
0397   01AA           02726                 CLRF    SSR10_VAL
0398   01AB           02727                 CLRF    SSR11_VAL
0399   01AC           02728                 CLRF    SSR12_VAL
039A   01AD           02729                 CLRF    SSR13_VAL
039B   01AE           02730                 CLRF    SSR14_VAL
039C   01AF           02731                 CLRF    SSR15_VAL
039D   01B0           02732                 CLRF    SSR16_VAL
039E   01B1           02733                 CLRF    SSR17_VAL
039F   01B2           02734                 CLRF    SSR18_VAL
03A0   01B3           02735                 CLRF    SSR19_VAL
03A1   01B4           02736                 CLRF    SSR20_VAL
03A2   01B5           02737                 CLRF    SSR21_VAL
03A3   01B6           02738                 CLRF    SSR22_VAL
03A4   01B7           02739                 CLRF    SSR23_VAL
03A5   301F           02740                 MOVLW   b'00011111'
03A6   04B8           02741                 IORWF   PORTA_BUF, F
03A7   303E           02742                 MOVLW   b'00111110'
03A8   04B9           02743                 IORWF   PORTB_BUF, F
03A9   303F           02744                 MOVLW   b'00111111'
03AA   04BA           02745                 IORWF   PORTC_BUF, F
03AB   30FF           02746                 MOVLW   b'11111111'
03AC   04BB           02747                 IORWF   PORTD_BUF, F
03AD   0008           02748                 RETURN
                      02749 
                      02750 ;----------------------------------------------------------------
                      02751 ; Port Control
                      02752 ;
                      02753 ; Registers PORTx_BUF hold the values we want to write to the
                      02754 ; output pins.  Calling UPDATE_PORTS does the actual writing.
                      02755 ;
                      02756 ; We do it this way to avoid the READ/MODIFY/WRITE effect
                      02757 ; problems we'd have by fiddling with the I/O pins separately.
                      02758 ; Plus, this is more efficient if many pins are changing at
                      02759 ; once.
                      02760 ;
                      02761 ; UPDATE_PORTS
                      02762 ;  Context: Sets Bank 0
                      02763 ;  In:      PORTx_BUF
                      02764 ;  Also:    W affected
                      02765 ;----------------------------------------------------------------
03AE   0064           02766 UPDATE_PORTS    CLRWDT
03AF   1283 1303      02767                 BANKSEL PORTA           ; (Bank 0)
03B1   0838           02768                 MOVF    PORTA_BUF, W
03B2   0085           02769                 MOVWF   PORTA
03B3   0839           02770                 MOVF    PORTB_BUF, W
03B4   0086           02771                 MOVWF   PORTB
03B5   083A           02772                 MOVF    PORTC_BUF, W
03B6   0087           02773                 MOVWF   PORTC
03B7   083B           02774                 MOVF    PORTD_BUF, W
03B8   0088           02775                 MOVWF   PORTD
03B9   083C           02776                 MOVF    PORTE_BUF, W
03BA   0089           02777                 MOVWF   PORTE
03BB   0008           02778                 RETURN
                      02779 ;
                      02780 ;=============================================================================
                      02781 ; SSR UPDATE LOOP
                      02782 ;
                      02783 ; Each slice we need to turn on some SSRs and off others.
                      02784 ; We use the SSR_STATE2<SLICE_UPD> flag to indicate that we
                      02785 ; haven't updated the SSR arrays yet in this slice.
                      02786 ;
                      02787 ; *****************************************************************************
                      02788 ; Main SSR update cycle.
                      02789 ;
                      02790 ; This is called repeatedly in the main loop.
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02791 ; What we do here depends on the flag bits set by the background timing logic.
                      02792 ;
                      02793 ; DIM_START:  All SSRs marked as ON get turned on now
                      02794 ; DIM_END:    All SSRs *not* marked as ON get turned off now; ignore SLICE_UPD
                      02795 ; SLICE_UPD:  All SSRs under dimmer control whose value == CUR_SLICE get turned
                      02796 ;             on now
                      02797 ;
                      02798 ;
03BC   0064           02799 UPDATE_SSRS     CLRWDT
03BD   1F48           02800                 BTFSS   SSR_STATE2, DIM_START   ; at start of dimmer cycle?
03BE   2BD0           02801                 GOTO    UPDATE_END
                      02802 ;
                      02803 ; Start of a dimmer cycle (first active slice): turn on everything that is
                      02804 ; supposed to be on all the time (they won't be turned off again at all until
                      02805 ; they are marked as dimmed or off).
                      02806 ;
03BF   1348           02807 UPDATE_START    BCF     SSR_STATE2, DIM_START   ; got the flag, thanks...
03C0   3018           02808                 MOVLW   .24                     ; Loop over our 24 SSRs...
03C1   00F5           02809                 MOVWF   X                       ; X=loop counter 24->0
03C2   01F6           02810                 CLRF    Y                       ; Y=SSR index 0->23
03C3   0876           02811 UPDATE_ST_LOOP  MOVF    Y, W
03C4   2403           02812                 CALL    SSR_SELECT_REG          ; FSR=ssr control register
03C5   1F80           02813                 BTFSS   INDF, SSR_ON            ; is this SSR on? (not dimmed)
03C6   2BCD           02814                 GOTO    UPDATE_ST_NXT           ; else, check next SSR...
03C7   2037           02815                 CALL    SSR_Y_TO_PBUF           ; W=buffer for SSR bit
03C8   1383           02816                 BCF     STATUS, IRP             ; FSR in bank 0/1
03C9   0084           02817                 MOVWF   FSR
03CA   2409           02818                 CALL    SSR_Y_CLR_MASK          ; W=bitmask to clear SSR bit
03CB   0580           02819                 ANDWF   INDF, F                 ; clear the bit
03CC   14C8           02820                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
03CD   0AF6           02821 UPDATE_ST_NXT   INCF    Y, F                    ; bump counter and index
03CE   0BF5           02822                 DECFSZ  X, F
03CF   2BC3           02823                 GOTO    UPDATE_ST_LOOP
                      02824 ;
                      02825 ; End of a dimmer cycle (last active slice): don't bother turning on any
                      02826 ; SSRs with dimmer value zero (duh).  Instead, now is the time to actually
                      02827 ; turn off EVERYTHING which isn't supposed to be on steadily.
                      02828 ;
03D0   0064           02829 UPDATE_END      CLRWDT
03D1   1EC8           02830                 BTFSS   SSR_STATE2, DIM_END     ; at end of dimmer cycle?
03D2   2BE5           02831                 GOTO    UPDATE_SLICE
                      02832 
03D3   12C8           02833                 BCF     SSR_STATE2, DIM_END     ; clear flag to do this
03D4   13C8           02834                 BCF     SSR_STATE2, SLICE_UPD   ; don't update for slice 0
03D5   3018           02835                 MOVLW   .24
03D6   00F5           02836                 MOVWF   X
03D7   01F6           02837                 CLRF    Y
03D8   0876           02838 UPDATE_EN_LOOP  MOVF    Y, W
03D9   2403           02839                 CALL    SSR_SELECT_REG          ; FSR=ssr control register
03DA   1B80           02840                 BTFSC   INDF, SSR_ON            ; is this SSR not always on?
03DB   2BE2           02841                 GOTO    UPDATE_EN_NXT           ; else, check next one...
03DC   2037           02842                 CALL    SSR_Y_TO_PBUF           ; W=buffer for SSR bit
03DD   1383           02843                 BCF     STATUS, IRP             ; FSR in bank 0/1
03DE   0084           02844                 MOVWF   FSR
03DF   205D           02845                 CALL    SSR_Y_SET_MASK
03E0   0480           02846                 IORWF   INDF, F                 ; set the bit
03E1   14C8           02847                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
03E2   0AF6           02848 UPDATE_EN_NXT   INCF    Y, F
03E3   0BF5           02849                 DECFSZ  X, F
03E4   2BD8           02850                 GOTO    UPDATE_EN_LOOP
                      02851 ;
                      02852 ; Any active dimmer cycle except the last one: CUR_SLICE holds the slice
                      02853 ; number we're processing, which starts at 63 and counts down to 0.  So
                      02854 ; we turn on any dimmer-controlled SSRs which have dimmer value equal to
                      02855 ; this slice number now.
                      02856 ;
03E5   0064           02857 UPDATE_SLICE    CLRWDT
03E6   1FC8           02858                 BTFSS   SSR_STATE2, SLICE_UPD   ; are we supposed to update?
03E7   2BFE           02859                 GOTO    UPDATE_COMMIT           ; no, move along...
                      02860 
03E8   13C8           02861                 BCF     SSR_STATE2, SLICE_UPD   ; got it, thanks...
03E9   3018           02862                 MOVLW   .24
03EA   00F5           02863                 MOVWF   X
03EB   01F6           02864                 CLRF    Y
03EC   0876           02865 UPDATE_SL_LOOP  MOVF    Y, W
03ED   2403           02866                 CALL    SSR_SELECT_REG
03EE   1F00           02867                 BTFSS   INDF, SSRDIM            ; under dimmer control?
03EF   2BFB           02868                 GOTO    UPDATE_SL_NXT           ; nope, try the next one...
03F0   301F           02869                 MOVLW   SSRVAL_MASK
03F1   0500           02870                 ANDWF   INDF, W
03F2   0245           02871                 SUBWF   CUR_SLICE, W
03F3   1D03           02872                 BTFSS   STATUS, Z               ; dimmer level == this slice?
03F4   2BFB           02873                 GOTO    UPDATE_SL_NXT           ; nope, try the next one...
03F5   2037           02874                 CALL    SSR_Y_TO_PBUF
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03F6   1383           02875                 BCF     STATUS, IRP             ; FSR in bank 0/1
03F7   0084           02876                 MOVWF   FSR
03F8   2409           02877                 CALL    SSR_Y_CLR_MASK
03F9   0580           02878                 ANDWF   INDF, F
03FA   14C8           02879                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
03FB   0AF6           02880 UPDATE_SL_NXT   INCF    Y, F
03FC   0BF5           02881                 DECFSZ  X, F
03FD   2BEC           02882                 GOTO    UPDATE_SL_LOOP
                      02883 ;
                      02884 ; If any of the above routines were selected to actually do anyting with the
                      02885 ; I/O ports, commit any changes they made at this time.
                      02886 ;
03FE   0064           02887 UPDATE_COMMIT   CLRWDT
03FF   18C8           02888                 BTFSC   SSR_STATE2, SSRUPD
0400   23AE           02889                 CALL    UPDATE_PORTS
0401   10C8           02890                 BCF     SSR_STATE2, SSRUPD
0402   0008           02891                 RETURN
                      02892 ;
                      02893 ;------------------------------------------------------------------------------
                      02894 ; SSR_SELECT_REG
                      02895 ;   Get SSR buffer address from SSR number in W
                      02896 ;
                      02897 ; Input:  W=SSR (0-23)
                      02898 ; Output: FSR=value register for SSR
                      02899 ;
                      02900 ; Context: Bank 0
                      02901 ;------------------------------------------------------------------------------
0403   0064           02902 SSR_SELECT_REG  CLRWDT
0404   391F           02903                 ANDLW   SSR_DEV_MASK            ; limit to 32
0405   3E20           02904                 ADDLW   SSR00_VAL               ; add offset
0406   0084           02905                 MOVWF   FSR                     ; set as indirect reg
0407   1383           02906                 BCF     STATUS, IRP             ; FSR->Bank{0,1}
0408   0008           02907                 RETURN
                      02908 ;
                      02909 ;------------------------------------------------------------------------------
                      02910 ; SSR_Y_CLR_MASK
                      02911 ;   return inverse bitmask for SSR output in its I/O port
                      02912 ;   If you AND the bitmask with the port's value the channel is turned off.
                      02913 ;   If you want to get the bitmask for turning it on, see SSR_Y_SET_MASK.
                      02914 ;
                      02915 ; Input:    Y=SSR channel (0-23)
                      02916 ; Output:   W=bitmask for CLEARING the bit (AND with current value)
                      02917 ; Context:  Any Bank
                      02918 ;------------------------------------------------------------------------------
                      02919 ;;
0409   205D           02920 SSR_Y_CLR_MASK  CALL    SSR_Y_SET_MASK
040A   3AFF           02921                 XORLW   0xff
040B   0008           02922                 RETURN
                      02923 
                      02924 ;==============================================================================
                      02925 ; Fine.
                      02926 ;==============================================================================
                      02927 
                      02928                 END
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACTEN                             00000002
ACTOFF                            00000001
ACT_RX_LEN                        0000003C
ACT_TMR                           0000004A
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALL_SSRS_OFF                      0000038A
ASSERT_FAIL                       000001A1
ASSERT_PASS                       000001A3
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BIT_00                            00000004
BIT_01                            00000003
BIT_02                            00000005
BIT_03                            00000002
BIT_04                            00000000
BIT_05                            00000005
BIT_06                            00000006
BIT_07                            00000001
BIT_08                            00000004
BIT_09                            00000002
BIT_10                            00000003
BIT_11                            00000003
BIT_12                            00000002
BIT_13                            00000004
BIT_14                            00000001
BIT_15                            00000005
BIT_16                            00000000
BIT_17                            00000007
BIT_18                            00000004
BIT_19                            00000001
BIT_20                            00000002
BIT_21                            00000001
BIT_22                            00000003
BIT_23                            00000000
BIT_ACT                           00000005
BIT_GRN                           00000000
BIT_RED                           00000002
BIT_YEL                           00000001
BRGH                              00000002
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

CIS                               00000003
CKE                               00000006
CKP                               00000004
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             0000009C
CMD_0                             00000222
CMD_1                             00000224
CMD_2                             00000226
CMD_7                             00000228
CMD_ABORT                         000002F2
CMD_ADDR_MASK                     0000000F
CMD_ADMIN                         000002CC
CMD_ADMIN_TABLE                   00000021
CMD_AD_CMD_MASK                   0000000F
CMD_AD_DIS_PRIV                   000002E2
CMD_AD_ID_CHK                     00000004
CMD_AD_ID_MASK                    0000000F
CMD_AD_PH_MASK                    0000003F
CMD_AD_SHUTDOWN                   000002CD
CMD_AD_SLAVE                      00000004
CMD_AD_S_GRN                      00000002
CMD_AD_S_HALT                     00000003
CMD_AD_S_RED                      00000000
CMD_AD_S_YEL                      00000001
CMD_BIT                           00000007
CMD_CHAN_MASK                     0000003F
CMD_CHAN_ON                       00000006
CMD_DIM_MASK                      0000001F
CMD_ERROR                         000002F1
CMD_MASK                          00000070
CMD_PARSER                        00000210
CMD_PRIV_ERROR                    000002EB
CMD_RESET_STATE                   00000242
CMD_SDI_0                         0000029A
CMD_SDI_OK                        0000029C
CMD_SET_DEV_ID                    00000292
CMD_SET_PHASE                     0000026B
CMD_SLAVE_CTL                     00000269
CMD_SW_MASK                       00000007
CMIE                              00000006
CMIF                              00000006
CREN                              00000004
CSRC                              00000007
CUR_PRE                           00000046
CUR_SLICE                         00000045
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            0000009D
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
D                                 00000005
DATA_ADDRESS                      00000005
DATA_BUF                          00000049
DATA_BYTE                         0000022A
DATA_BYTE_TBL                     00000013
DATA_STATE_1                      0000022D
DATA_STATE_2                      00000246
DATA_STATE_3                      0000024B
DATA_STATE_4                      00000262
DC                                00000001
DELAY_125MS                       00000378
DELAY_1S                          0000036A
DELAY_250MS                       00000375
DELAY_2S                          00000372
DELAY_500MS                       0000036E
DELAY_FFLASH                      0000037B
DEVICE_ID                         00000040
DEVICE_ID_MASK                    0000000F
DIM_END                           00000005
DIM_START                         00000006
DRAIN_SIO_IN                      000001FD
D_A                               00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

EEIF                              00000004
EEPGD                             00000007
EEPROM_DEFAULTS                   00002100
EE_DEF_DEV_ID                     00002101
EE_DEF_IDLE                       00002100
EE_DEF_PHASE                      00002102
EE_DEV_ID                         00000001
EE_IDLE                           00000000
EE_PHASE                          00000002
END_MAIN                          000001C4
F                                 00000001
FAULT                             00000338
FAULT_1                           0000022B
FAULT_HALT                        0000034D
FERR                              00000002
FLASH_CT                          0000003F
FLASH_OFF_DELAY                   0000036B
FLASH_ON_DELAY                    0000036F
FLASH_PHASE                       00000355
FLASH_RED                         00000329
FLASH_YEL                         0000031A
FLUSH_SIO                         000001C5
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GRNBLK                            00000002
GRNEN                             00000003
GRN_BLINK_RATE                    000000FF
GRN_TMR                           00000041
I                                 00000072
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ILLSSR                            00000006
INCYC                             00000007
INDF                              00000000
INIT                              000000C2
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
INT_ACT                           0000009F
INT_END                           000000BA
INT_ENDSLICE                      000000B9
INT_GRN                           00000099
INT_INT0                          0000008C
INT_NEXTSLICE                     000000B4
INT_PRECYC                        000000AC
INT_RED                           00000094
INT_TMR2                          000000A8
INT_VECTOR                        00000004
INT_YEL                           0000008F
INT_ZC                            000000A5
IRP                               00000007
ISPINNER                          0000037E
ISP_NEXTJ                         00000381
ISR                               00000083
J                                 00000073
K                                 00000074
MAIN_ACT                          000001BB
MAIN_GREEN                        000001A7
MAIN_LOOP                         000001A4
MAIN_PROCESS                      000001C1
MAIN_RED                          000001B6
MAIN_YELLOW                       000001AD
MAIN_YEL_PRV                      000001B2
MASK_ALL_LEDS                     00000007
MASK_NO_LEDS                      00000000
MASK_RED_YEL                      00000006
MY_SSR                            00000007
NEXT_FLASH_RED                    00000331
NEXT_FLASH_YEL                    00000322
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
P                                 00000004
PASS_CMD_1                        0000023C
PASS_CMD_2                        0000025A
PASS_DOWN                         00000314
PBUF_00                           0000003A
PBUF_01                           0000003A
PBUF_02                           0000003A
PBUF_03                           0000003A
PBUF_04                           0000003A
PBUF_05                           0000003B
PBUF_06                           0000003B
PBUF_07                           00000039
PBUF_08                           00000038
PBUF_09                           00000039
PBUF_10                           00000038
PBUF_11                           00000039
PBUF_12                           00000038
PBUF_13                           00000039
PBUF_14                           00000038
PBUF_15                           00000039
PBUF_16                           00000038
PBUF_17                           0000003B
PBUF_18                           0000003B
PBUF_19                           0000003A
PBUF_20                           0000003B
PBUF_21                           0000003B
PBUF_22                           0000003B
PBUF_23                           0000003B
PBUF_ACT                          00000038
PBUF_GRN                          0000003C
PBUF_RED                          0000003C
PBUF_YEL                          0000003C
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCLATH_TEMP                       00000077
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHASE_OFFSET                      0000003D
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
POLL_SIO                          00000204
PORTA                             00000005
PORTA_BUF                         00000038
PORTB                             00000006
PORTB_BUF                         00000039
PORTC                             00000007
PORTC_BUF                         0000003A
PORTD                             00000008
PORTD_BUF                         0000003B
PORTE                             00000009
PORTE_BUF                         0000003C
PORT_00                           00000007
PORT_01                           00000007
PORT_02                           00000007
PORT_03                           00000007
PORT_04                           00000007
PORT_05                           00000008
PORT_06                           00000008
PORT_07                           00000006
PORT_08                           00000005
PORT_09                           00000006
PORT_10                           00000005
PORT_11                           00000006
PORT_12                           00000005
PORT_13                           00000006
PORT_14                           00000005
PORT_15                           00000006
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

PORT_16                           00000005
PORT_17                           00000008
PORT_18                           00000008
PORT_19                           00000007
PORT_20                           00000008
PORT_21                           00000008
PORT_22                           00000008
PORT_23                           00000008
PORT_ACT                          00000005
PORT_GRN                          00000009
PORT_LEDS                         00000009
PORT_RED                          00000009
PORT_YEL                          00000009
POST_ASSERTIONS                   00000190
POST_DEV_ID                       00000145
POST_FINAL                        00000171
POST_PHASE_SYNC                   00000167
POST_ROM_ID                       00000142
POST_STAGE_1                      0000014D
POST_STAGE_2                      00000164
POST_START                        0000012C
PR2                               00000092
PRECYC                            00000006
PRIVEN                            00000000
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
REDEN                             00000005
REDOFF                            00000004
RED_CMDERR_LEN                    000000F0
RED_ORERR_LEN                     00000078
RED_TMR                           00000043
RESET_LEDS_NEXT                   000000E3
RESTART_VECTOR                    00000000
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
RX_BYTE                           00000047
R_W                               00000002
S                                 00000003
SEN                               00000000
SEND_SIO                          000001CC
SEND_W                            000001E5
SEND_W_OK                         000001F1
SETUP_DEV_ID                      00000107
SETUP_EEPROM                      000000ED
SETUP_EE_FF                       00000127
SETUP_PHASE                       00000118
SETUP_PORTS                       000000C8
SIO_FRAMERR                       00000304
SIO_OVERRUN                       000002FA
SLICE_UPD                         00000007
SLV_LED_LEN                       000000F0
SLV_RX_LEN                        0000001E
SLV_TX_LEN                        0000001E
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
SSR00_VAL                         00000020
SSR01_VAL                         00000021
SSR02_VAL                         00000022
SSR03_VAL                         00000023
SSR04_VAL                         00000024
SSR05_VAL                         00000025
SSR06_VAL                         00000026
SSR07_VAL                         00000027
SSR08_VAL                         00000028
SSR09_VAL                         00000029
SSR10_VAL                         0000002A
SSR11_VAL                         0000002B
SSR12_VAL                         0000002C
SSR13_VAL                         0000002D
SSR14_VAL                         0000002E
SSR15_VAL                         0000002F
SSR16_VAL                         00000030
SSR17_VAL                         00000031
SSR18_VAL                         00000032
SSR19_VAL                         00000033
SSR20_VAL                         00000034
SSR21_VAL                         00000035
SSR22_VAL                         00000036
SSR23_VAL                         00000037
SSRDIM                            00000006
SSRUPD                            00000001
SSRVAL_MASK                       0000001F
SSRVAL_RESV                       00000005
SSR_DEV_MASK                      0000001F
SSR_ID                            0000003E
SSR_ID_RESV                       00000005
SSR_ON                            00000007
SSR_SELECT_REG                    00000403
SSR_STATE                         00000044
SSR_STATE2                        00000048
SSR_STATE3                        0000004B
SSR_STATE3_RES3                   00000003
SSR_STATE3_RES4                   00000004
SSR_STATE3_RES5                   00000005
SSR_STATE3_RES6                   00000006
SSR_STATE3_RES7                   00000007
SSR_STATE_MASK                    00000007
SSR_Y_CLR_MASK                    00000409
SSR_Y_SET_MASK                    0000005D
SSR_Y_TO_PBUF                     00000037
STATE0                            00000000
STATE1                            00000001
STATE2                            00000002
STATE_0_CMD_TBL                   00000005
STATUS                            00000003
STATUS_TEMP                       00000071
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRISD                             00000088
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXBUF                             00000050
TXBUF_MASK                        0000000F
TXBUF_QUEUE                       0000004E
TXBUF_SEND                        0000004F
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXQUE                             00000000
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
UPDATE_COMMIT                     000003FE
UPDATE_END                        000003D0
UPDATE_EN_LOOP                    000003D8
UPDATE_EN_NXT                     000003E2
UPDATE_PORTS                      000003AE
UPDATE_SLICE                      000003E5
UPDATE_SL_LOOP                    000003EC
UPDATE_SL_NXT                     000003FB
UPDATE_SSRS                       000003BC
UPDATE_START                      000003BF
UPDATE_ST_LOOP                    000003C3
UPDATE_ST_NXT                     000003CD
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
W_TEMP                            00000070
X                                 00000075
XLATE_SSR_ID                      00000305
Y                                 00000076
YELEN                             00000004
YELOFF                            00000003
YEL_CMDERR_LEN                    000000F0
YEL_TMR                           00000042
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00001FFF
_CP_OFF                           00003FFF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
_XT_OSC                           00003FFD
__16F877A                         00000001
MPASM  5.06.4                  48CTL-MASTER.ASM   11-19-2007  19:25:05         PAGE 44


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXX---- ---------------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------
2100 : XXX------------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  1033
Program Memory Words Free:  7159


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    62 reported,     0 suppressed

