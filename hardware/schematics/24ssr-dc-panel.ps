%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sun Sep 16 01:03:17 2012
%%Title: /Users/steve/proj/ssr/schematics/keep/24ssr-dc-panel.sch
%%Author: steve
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
42000 48100 42300 48100 10 line
gsave
false false false false 208.000000 [(2) ] 0 40850 48050 144.444443 text
grestore
42000 47500 42300 47500 10 line
gsave
false false false false 208.000000 [(4) ] 0 40850 47450 144.444443 text
grestore
42000 48400 42300 48400 10 line
gsave
false false false false 208.000000 [(1) ] 0 40850 48350 144.444443 text
grestore
42000 47800 42300 47800 10 line
gsave
false false false false 208.000000 [(3) ] 0 40850 47750 144.444443 text
grestore
42000 47200 42300 47200 10 line
gsave
false false false false 208.000000 [(5) ] 0 40850 47150 144.444443 text
grestore
42000 48400 41100 48400 10 line
42000 48100 41100 48100 10 line
42000 47800 41100 47800 10 line
42000 47500 41100 47500 10 line
42000 47200 41100 47200 10 line
40600 47000 41100 47000 10 line
41100 47000 41100 48600 10 line
41100 48600 40600 48600 10 line
40600 48600 40600 47000 10 line
grestore
gsave
false false false false 260.000000 [(ICSP #0) ] 0 40700 48700 180.555557 text
grestore
gsave
43600 47200 43750 47200 10 line
gsave
false false false false 208.000000 [(1) ] 0 43650 47250 144.444443 text
grestore
44450 47200 44600 47200 10 line
gsave
false false false false 208.000000 [(2) ] 0 44500 47250 144.444443 text
grestore
43750 47200 43925 47200 10 line
44450 47200 44275 47200 10 line
43900 47285 44300 47285 10 line
43939 47200 14 0 360 10 darc
44262 47200 14 0 360 10 darc
44070 47455 44120 47455 10 line
44070 47405 44120 47405 10 line
44070 47405 44095 47355 10 line
44120 47405 44095 47355 10 line
44095 47405 44095 47455 10 line
44095 47355 44095 47286 10 line
grestore
gsave
false false false false 260.000000 [(OPTION) ] 0 45000 47200 180.555557 text
grestore
gsave
43600 47800 43750 47800 10 line
gsave
false false false false 208.000000 [(1) ] 0 43650 47850 144.444443 text
grestore
44450 47800 44600 47800 10 line
gsave
false false false false 208.000000 [(2) ] 0 44500 47850 144.444443 text
grestore
43750 47800 43925 47800 10 line
44450 47800 44275 47800 10 line
43900 47885 44300 47885 10 line
43939 47800 14 0 360 10 darc
44262 47800 14 0 360 10 darc
44070 48055 44120 48055 10 line
44070 48005 44120 48005 10 line
44070 48005 44095 47955 10 line
44120 48005 44095 47955 10 line
44095 48005 44095 48055 10 line
44095 47955 44095 47886 10 line
grestore
gsave
false false false false 260.000000 [(RESET) ] 0 45000 47800 180.555557 text
grestore
gsave
51100 48900 51000 48700 10 line
51000 48700 50900 48900 10 line
50900 48900 50800 48700 10 line
50800 48700 50700 48900 10 line
51100 48900 51200 48700 10 line
51200 48700 51250 48800 10 line
51400 48800 51250 48800 10 line
50500 48800 50652 48800 10 line
50701 48900 50650 48800 10 line
grestore
gsave
false false false false 260.000000 [(220) ] 0 51400 48900 180.555557 text
grestore
gsave
49000 49000 49000 48600 10 line
49000 49000 49300 48800 10 line
49300 48800 49000 48600 10 line
49300 49000 49300 48600 10 line
49600 48800 49400 48800 10 line
48700 48800 48900 48800 10 line
49400 48800 49300 48800 10 line
49000 48800 48900 48800 10 line
49100 48600 49200 48500 10 line
49200 48600 49300 48500 10 line
49300 48500 49275 48550 10 line
49300 48500 49250 48525 10 line
49200 48500 49175 48550 10 line
49200 48500 49150 48525 10 line
grestore
gsave
51950 47400 52050 47400 10 line
51900 47450 52100 47450 10 line
51850 47500 52150 47500 10 line
52000 47700 52000 47500 10 line
grestore
gsave
false false false false 260.000000 [(RETRO-FIT OF FRONT PANEL CONTROLS) (ON OLDER 48-CHANNEL CONTROLLER BOARDS) ] 0 40300 49200 180.555557 text
grestore
gsave
42900 48500 42800 48300 10 line
42800 48300 42700 48500 10 line
42700 48500 42600 48300 10 line
42600 48300 42500 48500 10 line
42900 48500 43000 48300 10 line
43000 48300 43050 48400 10 line
43200 48400 43050 48400 10 line
42300 48400 42452 48400 10 line
42501 48500 42450 48400 10 line
grestore
gsave
false false false false 260.000000 [(10K) ] 0 42600 48600 180.555557 text
grestore
42300 48100 44900 48100 10 line
42300 47800 43600 47800 10 line
42300 47200 43600 47200 10 line
44600 47200 44900 47200 10 line
44900 47200 44900 48100 10 line
44600 47800 44900 47800 10 line
43200 48400 43300 48400 10 line
43300 48400 43300 47200 10 line
42300 47500 43000 47500 10 line
43000 47500 43000 46500 10 line
gsave
false false false false 260.000000 [(\\_PWR\\_ OUTPUT \(00-23\)) ] 0 43000 46200 180.555557 text
grestore
gsave
48400 48200 48700 48200 10 line
gsave
false false false false 208.000000 [(3) ] 0 47250 48150 144.444443 text
grestore
48400 48500 48700 48500 10 line
gsave
false false false false 208.000000 [(2) ] 0 47250 48450 144.444443 text
grestore
48400 47900 48700 47900 10 line
gsave
false false false false 208.000000 [(4) ] 0 47250 47850 144.444443 text
grestore
48400 48500 47500 48500 10 line
48400 48200 47500 48200 10 line
48400 47900 47500 47900 10 line
48400 48800 48700 48800 10 line
gsave
false false false false 208.000000 [(1) ] 0 47250 48750 144.444443 text
grestore
48400 48800 47500 48800 10 line
47000 47700 47500 47700 10 line
47500 47700 47500 49000 10 line
47500 49000 47000 49000 10 line
47000 49000 47000 47700 10 line
grestore
gsave
false false false false 260.000000 [(J16) ] 0 47000 49100 180.555557 text
grestore
gsave
49000 48400 49000 48000 10 line
49000 48400 49300 48200 10 line
49300 48200 49000 48000 10 line
49300 48400 49300 48000 10 line
49600 48200 49400 48200 10 line
48700 48200 48900 48200 10 line
49400 48200 49300 48200 10 line
49000 48200 48900 48200 10 line
49100 48000 49200 47900 10 line
49200 48000 49300 47900 10 line
49300 47900 49275 47950 10 line
49300 47900 49250 47925 10 line
49200 47900 49175 47950 10 line
49200 47900 49150 47925 10 line
grestore
gsave
49900 48700 49900 48300 10 line
49900 48700 50200 48500 10 line
50200 48500 49900 48300 10 line
50200 48700 50200 48300 10 line
50500 48500 50300 48500 10 line
49600 48500 49800 48500 10 line
50300 48500 50200 48500 10 line
49900 48500 49800 48500 10 line
50000 48300 50100 48200 10 line
50100 48300 50200 48200 10 line
50200 48200 50175 48250 10 line
50200 48200 50150 48225 10 line
50100 48200 50075 48250 10 line
50100 48200 50050 48225 10 line
grestore
gsave
49900 48100 49900 47700 10 line
49900 48100 50200 47900 10 line
50200 47900 49900 47700 10 line
50200 48100 50200 47700 10 line
50500 47900 50300 47900 10 line
49600 47900 49800 47900 10 line
50300 47900 50200 47900 10 line
49900 47900 49800 47900 10 line
50000 47700 50100 47600 10 line
50100 47700 50200 47600 10 line
50200 47600 50175 47650 10 line
50200 47600 50150 47625 10 line
50100 47600 50075 47650 10 line
50100 47600 50050 47625 10 line
grestore
48700 47900 49600 47900 10 line
49600 48500 48700 48500 10 line
gsave
51100 48600 51000 48400 10 line
51000 48400 50900 48600 10 line
50900 48600 50800 48400 10 line
50800 48400 50700 48600 10 line
51100 48600 51200 48400 10 line
51200 48400 51250 48500 10 line
51400 48500 51250 48500 10 line
50500 48500 50652 48500 10 line
50701 48600 50650 48500 10 line
grestore
gsave
false false false false 260.000000 [(220) ] 0 51400 48600 180.555557 text
grestore
gsave
51100 48300 51000 48100 10 line
51000 48100 50900 48300 10 line
50900 48300 50800 48100 10 line
50800 48100 50700 48300 10 line
51100 48300 51200 48100 10 line
51200 48100 51250 48200 10 line
51400 48200 51250 48200 10 line
50500 48200 50652 48200 10 line
50701 48300 50650 48200 10 line
grestore
gsave
false false false false 260.000000 [(220) ] 0 51400 48300 180.555557 text
grestore
gsave
51100 48000 51000 47800 10 line
51000 47800 50900 48000 10 line
50900 48000 50800 47800 10 line
50800 47800 50700 48000 10 line
51100 48000 51200 47800 10 line
51200 47800 51250 47900 10 line
51400 47900 51250 47900 10 line
50500 47900 50652 47900 10 line
50701 48000 50650 47900 10 line
grestore
gsave
false false false false 260.000000 [(220) ] 0 51400 48000 180.555557 text
grestore
49600 48800 50500 48800 10 line
50500 48200 49600 48200 10 line
51400 48800 52000 48800 10 line
52000 48800 52000 47700 10 line
51400 48500 52000 48500 10 line
51400 48200 52000 48200 10 line
51400 47900 52000 47900 10 line
gsave
false false false false 260.000000 [(\\_D\\_) ] 0 46800 48700 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_C\\_) ] 0 46800 48400 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_B\\_) ] 0 46800 48100 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_A\\_) ] 0 46800 47800 180.555557 text
grestore
gsave
false false false false 260.000000 [(STATUS \(YELLOW\)) ] 0 52100 48700 180.555557 text
grestore
gsave
false false false false 260.000000 [(STATUS \(GREEN\)) ] 0 52100 48100 180.555557 text
grestore
gsave
false false false false 260.000000 [(STATUS \(RED\)) ] 0 52100 47800 180.555557 text
grestore
gsave
false false false false 260.000000 [(ACTIVITY) ] 0 52100 48400 180.555557 text
grestore
gsave
false false false false 260.000000 [(EXTERNAL \(FRONT PANEL\) STATUS LED CONNECTIONS VIA J16) ] 0 46900 49500 180.555557 text
grestore
gsave
48400 45500 48700 45500 10 line
gsave
false false false false 208.000000 [(2) ] 0 47250 45450 144.444443 text
grestore
48400 44900 48700 44900 10 line
gsave
false false false false 208.000000 [(4) ] 0 47250 44850 144.444443 text
grestore
48400 45800 48700 45800 10 line
gsave
false false false false 208.000000 [(1) ] 0 47250 45750 144.444443 text
grestore
48400 45200 48700 45200 10 line
gsave
false false false false 208.000000 [(3) ] 0 47250 45150 144.444443 text
grestore
48400 44600 48700 44600 10 line
gsave
false false false false 208.000000 [(5) ] 0 47250 44550 144.444443 text
grestore
48400 45800 47500 45800 10 line
48400 45500 47500 45500 10 line
48400 45200 47500 45200 10 line
48400 44900 47500 44900 10 line
48400 44600 47500 44600 10 line
47000 44400 47500 44400 10 line
47500 44400 47500 46000 10 line
47500 46000 47000 46000 10 line
47000 46000 47000 44400 10 line
grestore
gsave
false false false false 260.000000 [(ICSP) ] 0 47100 46100 180.555557 text
grestore
gsave
50000 44600 50150 44600 10 line
gsave
false false false false 208.000000 [(1) ] 0 50050 44650 144.444443 text
grestore
50850 44600 51000 44600 10 line
gsave
false false false false 208.000000 [(2) ] 0 50900 44650 144.444443 text
grestore
50150 44600 50325 44600 10 line
50850 44600 50675 44600 10 line
50300 44685 50700 44685 10 line
50339 44600 14 0 360 10 darc
50662 44600 14 0 360 10 darc
50470 44855 50520 44855 10 line
50470 44805 50520 44805 10 line
50470 44805 50495 44755 10 line
50520 44805 50495 44755 10 line
50495 44805 50495 44855 10 line
50495 44755 50495 44686 10 line
grestore
gsave
false false false false 260.000000 [(OPTION) ] 0 51400 44600 180.555557 text
grestore
gsave
50000 45200 50150 45200 10 line
gsave
false false false false 208.000000 [(1) ] 0 50050 45250 144.444443 text
grestore
50850 45200 51000 45200 10 line
gsave
false false false false 208.000000 [(2) ] 0 50900 45250 144.444443 text
grestore
50150 45200 50325 45200 10 line
50850 45200 50675 45200 10 line
50300 45285 50700 45285 10 line
50339 45200 14 0 360 10 darc
50662 45200 14 0 360 10 darc
50470 45455 50520 45455 10 line
50470 45405 50520 45405 10 line
50470 45405 50495 45355 10 line
50520 45405 50495 45355 10 line
50495 45405 50495 45455 10 line
50495 45355 50495 45286 10 line
grestore
gsave
false false false false 260.000000 [(RESET) ] 0 51400 45200 180.555557 text
grestore
48700 45500 51300 45500 10 line
48700 45200 50000 45200 10 line
48700 44600 50000 44600 10 line
51000 44600 51300 44600 10 line
51300 44600 51300 45500 10 line
51000 45200 51300 45200 10 line
gsave
false false false false 260.000000 [(EXTERNAL \(FRONT PANEL\) BUTTON CONNECTIONS VIA ICSP HEADER) ] 0 46900 46400 180.555557 text
grestore
gsave
false false false false 260.000000 [(LUMOS 24-CHANNEL DC SSR CONTROLLER EXTERNAL CONNECTIONS) (AND OLDER BOARD RETRO-FIT) ] 0 50000 40900 180.555557 text
grestore
gsave
false false false false 260.000000 [(24ssr-dc-panel.sch) ] 0 50000 40400 180.555557 text
grestore
gsave
false false false false 260.000000 [(4) ] 0 50000 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(4) ] 0 51600 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(STEVE WILLOUGHBY) ] 0 54000 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1.0.7 16-SEP-2012) ] 0 54000 40400 180.555557 text
grestore
gsave
42000 45300 42300 45300 10 line
gsave
false false false false 208.000000 [(2) ] 0 40850 45250 144.444443 text
grestore
42000 44700 42300 44700 10 line
gsave
false false false false 208.000000 [(4) ] 0 40850 44650 144.444443 text
grestore
42000 45600 42300 45600 10 line
gsave
false false false false 208.000000 [(1) ] 0 40850 45550 144.444443 text
grestore
42000 45000 42300 45000 10 line
gsave
false false false false 208.000000 [(3) ] 0 40850 44950 144.444443 text
grestore
42000 44400 42300 44400 10 line
gsave
false false false false 208.000000 [(5) ] 0 40850 44350 144.444443 text
grestore
42000 45600 41100 45600 10 line
42000 45300 41100 45300 10 line
42000 45000 41100 45000 10 line
42000 44700 41100 44700 10 line
42000 44400 41100 44400 10 line
40600 44200 41100 44200 10 line
41100 44200 41100 45800 10 line
41100 45800 40600 45800 10 line
40600 45800 40600 44200 10 line
grestore
gsave
false false false false 260.000000 [(ICSP #1) ] 0 40700 45900 180.555557 text
grestore
42300 44700 43000 44700 10 line
43000 44000 43000 44700 10 line
gsave
false false false false 260.000000 [(\\_PWR\\_ OUTPUT \(24-47\)) ] 0 43000 43700 180.555557 text
grestore
42500 47800 42500 45000 10 line
42500 45000 42300 45000 10 line
gsave
42800 42000 43100 42000 10 line
43100 42000 43300 41800 10 line
43300 41800 43900 41800 10 line
43900 41800 43900 42200 10 line
43900 42200 43300 42200 10 line
43300 42200 43100 42000 10 line
grestore
gsave
false false false false 260.000000 [(\\_SSR0) ] 0 43300 41950 180.555557 text
grestore
gsave
42800 41600 43100 41600 10 line
43100 41600 43300 41400 10 line
43300 41400 43900 41400 10 line
43900 41400 43900 41800 10 line
43900 41800 43300 41800 10 line
43300 41800 43100 41600 10 line
grestore
gsave
false false false false 260.000000 [(\\_SSR1) ] 0 43300 41550 180.555557 text
grestore
gsave
42800 41200 43100 41200 10 line
43100 41200 43300 41000 10 line
43300 41000 43900 41000 10 line
43900 41000 43900 41400 10 line
43900 41400 43300 41400 10 line
43300 41400 43100 41200 10 line
grestore
gsave
false false false false 260.000000 [(\\_SSR2) ] 0 43300 41150 180.555557 text
grestore
gsave
42800 40800 43100 40800 10 line
43100 40800 43300 40600 10 line
43300 40600 43900 40600 10 line
43900 40600 43900 41000 10 line
43900 41000 43300 41000 10 line
43300 41000 43100 40800 10 line
grestore
gsave
false false false false 260.000000 [(\\_SSR3) ] 0 43300 40750 180.555557 text
grestore
gsave
42100 41600 42400 41600 10 line
gsave
false false false false 208.000000 [(2) ] 0 40950 41550 144.444443 text
grestore
42100 41000 42400 41000 10 line
gsave
false false false false 208.000000 [(4) ] 0 40950 40950 144.444443 text
grestore
42100 41900 42400 41900 10 line
gsave
false false false false 208.000000 [(1) ] 0 40950 41850 144.444443 text
grestore
42100 41300 42400 41300 10 line
gsave
false false false false 208.000000 [(3) ] 0 40950 41250 144.444443 text
grestore
42100 40700 42400 40700 10 line
gsave
false false false false 208.000000 [(5) ] 0 40950 40650 144.444443 text
grestore
42100 41900 41200 41900 10 line
42100 41600 41200 41600 10 line
42100 41300 41200 41300 10 line
42100 41000 41200 41000 10 line
42100 40700 41200 40700 10 line
40700 40500 41200 40500 10 line
41200 40500 41200 42100 10 line
41200 42100 40700 42100 10 line
40700 42100 40700 40500 10 line
grestore
gsave
false false false false 260.000000 [(J18 LOGIC OUTPUTS) ] 0 40800 42200 180.555557 text
grestore
42800 42000 42400 42000 10 line
42400 42000 42400 41900 10 line
42800 41600 42400 41600 10 line
42800 41200 42400 41200 10 line
42400 41200 42400 41300 10 line
42800 41000 42400 41000 10 line
42800 40800 42800 41000 10 line
gsave
42350 40400 42450 40400 10 line
42300 40450 42500 40450 10 line
42250 40500 42550 40500 10 line
42400 40700 42400 40500 10 line
grestore
gsave
false false false false 260.000000 [(OPTIONAL LOGIC-LEVEL OUTPUT BLOCK) ] 0 40800 42500 180.555557 text
grestore
newpath
42500 47800
25
0 360 arc
fill
newpath
43300 47200
25
0 360 arc
fill
newpath
44900 47800
25
0 360 arc
fill
newpath
44900 47800
25
0 360 arc
fill
newpath
44900 47800
25
0 360 arc
fill
newpath
43300 47200
25
0 360 arc
fill
newpath
43300 47200
25
0 360 arc
fill
60 60 42970 46470 fbox
newpath
52000 48500
25
0 360 arc
fill
newpath
52000 48200
25
0 360 arc
fill
newpath
52000 47900
25
0 360 arc
fill
newpath
52000 48500
25
0 360 arc
fill
newpath
52000 48500
25
0 360 arc
fill
newpath
52000 48200
25
0 360 arc
fill
newpath
52000 48200
25
0 360 arc
fill
newpath
52000 47900
25
0 360 arc
fill
newpath
52000 47900
25
0 360 arc
fill
newpath
51300 45200
25
0 360 arc
fill
newpath
51300 45200
25
0 360 arc
fill
newpath
51300 45200
25
0 360 arc
fill
60 60 42970 43970 fbox
newpath
42500 47800
25
0 360 arc
fill
newpath
42500 47800
25
0 360 arc
fill
showpage
%%End
