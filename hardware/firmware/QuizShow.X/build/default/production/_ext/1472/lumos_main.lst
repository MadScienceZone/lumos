MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; OSCCON:SCS=00;HS;
                      00002 ; vim:set syntax=pic ts=8:
                      00003 ;
                      00004                 LIST n=90
                      00005 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00006 ;@@                                                                         @@
                      00007 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00008 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.1   @@ 
                      00009 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00010 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00011 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00012 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00013 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00014 ;@@                                                                         @@
                      00015 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00016 ;
                      00017 ; ************                                                           /\
                      00018 ; * WARNING! *    EXPERIMENTAL DESIGN FOR EDUCATIONAL PURPOSES          /  \
                      00019 ; * WARNING! *                USE AT YOUR OWN RISK!                    / !  \
                      00020 ; ************                                                        /______\
                      00021 ; 
                      00022 ; PLEASE READ AND BE SURE YOU UNDERSTAND THE FOLLOWING SAFETY WARNINGS:
                      00023 ;
                      00024 ; THIS FIRMWARE AND THE ACCOMPANYING HARDWARE AND CONTROLLING SOFTWARE ARE
                      00025 ; EXPERIMENTAL "HOBBYIST" DESIGNS AND ARE NOT INTENDED FOR GENERAL CONSUMER USE
                      00026 ; OR FOR ANY APPLICATION WHERE THERE IS ANY POSSIBILITY OF RISK OF INJURY,
                      00027 ; PROPERTY DAMAGE, OR ANY OTHER SITUATION WHERE ANY FAILURE OF THE FIRMWARE,
                      00028 ; SOFTWARE AND/OR HARDWARE COULD RESULT IN HARM TO ANYONE OR ANYTHING.  
                      00029 ;
                      00030 ; THIS FIRMWARE, SOFTWARE, AND/OR HARDWARE ARE NOT INTENDED NOR RECOMMENDED 
                      00031 ; FOR APPLICATIONS INVOLVING LIFE SUPPORT OR SAFETY-CRITICAL SYSTEMS, RUNNING 
                      00032 ; FIREWORKS/PYROTECHNIC DISPLAYS, ETC.  
                      00033 ;
                      00034 ; BY OBTAINING AND USING THIS FIRMWARE, AND/OR ACCOMPANYING HARDWARE AND/OR 
                      00035 ; CONTROLLING SOFTWARE, YOU AGREE TO THESE CONDITIONS AND THAT TO THE FULLEST 
                      00036 ; EXTENT OF APPLICABLE LAW, THE ABOVE-LISTED ITEMS AND ALL ACCOMPANYING 
                      00037 ; DOCUMENTATION AND OTHER MATERIALS ARE PROVIDED TO YOU AS-IS, WITHOUT WARRANTY 
                      00038 ; OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
                      00039 ; WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE.  YOU 
                      00040 ; FURTHER AGREE TO DEFEND, INDEMNIFY, AND HOLD BLAMELESS, THE AUTHOR, STEVEN 
                      00041 ; L. Willoughby AND ANY OF HIS AGENTS AND ASSOCIATES ASSISTING WITH THIS WORK, 
                      00042 ; FROM ANY DAMAGES DIRECT OR INCIDENTAL ARISING FROM THE USE OF, OR INABILITY 
                      00043 ; TO USE, THE ABOVE-LISTED PRODUCTS.
                      00044 ; 
                      00045 ;
                      00046 ; Copyright (c) 2012, 2013, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00047 ; All Rights Reserved.  Released under the terms and conditions of the 
                      00048 ; Open Software License, version 3.0.
                      00049 ;
                      00050 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00051 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00052 ;
                      00053 ; -*- -*- -* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00054 ;
                      00055 ; Main implementation module.
                      00056 ;
                      00057 #include "lumos_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  
                      00018 ; Released under the terms and conditions of the Open Software
                      00019 ; License, version 3.0.
                      00020 ;
                      00021 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00022 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028 ;
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; CONFIGURATION OPTIONS
                      00032 ;==============================================================================
                      00033 #ifndef LUMOS_CONFIG_INC
                      00034 #define LUMOS_CONFIG_INC
                      00035 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00036 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00037 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00038 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00039 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00040 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00041 ;
                      00042 ; Un-comment one of these to select board type for this ROM image:
                      00043 ;
                      00044 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00045 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00046 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00047 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00048 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00049 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00050 ;
                      00051 ;
                      00052 ;
                      00053 #define LUMOS_ZC                0x55
                      00054 #define LUMOS_INTERNAL          0x58
                      00055 
                      00056  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00057   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00058  ELSE
                      00059   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00060    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00061   ELSE
                      00062    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00063   ENDIF
                      00064  ENDIF
                      00065  
                      00066  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00067   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00068  ENDIF
                      00069 
                      00070 
                      00071  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00072   #define ROLE_MASTER       (1)
                      00073   #define ROLE_SLAVE        (0)
                      00074   #define ROLE_STANDALONE   (0)
                      00075   #define NUM_CHANNELS      (.48)
                      00076   #define QSCC_PORT         (0)
                      00077  ELSE
                      00078   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00079    #define ROLE_MASTER      (0)
                      00080    #define ROLE_SLAVE       (1)
                      00081    #define ROLE_STANDALONE  (0)
                      00082    #define NUM_CHANNELS     (.48)
                      00083    #define QSCC_PORT        (0)
                      00084   ELSE
                      00085    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00086     #define ROLE_MASTER     (0)
                      00087     #define ROLE_SLAVE      (0)
                      00088     #define ROLE_STANDALONE (1)
                      00089     #define NUM_CHANNELS    (.24)
                      00090     #define QSCC_PORT       (0)
                      00091    ELSE
                      00092     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00093      #define ROLE_MASTER     (0)
                      00094      #define ROLE_SLAVE      (0)
                      00095      #define ROLE_STANDALONE (1)
                      00096      #define NUM_CHANNELS    (.4)
                      00097      #define QSCC_PORT       (0)
                      00098     ELSE
                      00099      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00100       #define ROLE_MASTER     (0)
                      00101       #define ROLE_SLAVE      (0)
                      00102       #define ROLE_STANDALONE (1)
                      00103       #define NUM_CHANNELS    (.14)
                      00104       #define QSCC_PORT       (1)
                      00105      ELSE
                      00106       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00107        #define ROLE_MASTER     (0)
                      00108        #define ROLE_SLAVE      (0)
                      00109        #define ROLE_STANDALONE (1)
                      00110        #define NUM_CHANNELS    (.20)
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00111        #define QSCC_PORT       (1)
                      00112       ELSE
                      00113        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00114       ENDIF
                      00115      ENDIF
                      00116     ENDIF
                      00117    ENDIF
                      00118   ENDIF
                      00119  ENDIF
                      00120 
                      00121 #define LUMOS_ARCH_4685  (0x4685)
                      00122 #define LUMOS_ARCH_14K50 (0x1450)
                      00123 
                      00124  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00125   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00126   PROCESSOR 18F4685
                      00127   #include <p18f4685.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4685 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      05130         LIST
                      00128  ELSE
                      00129   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00130    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00131    PROCESSOR 18F14K50
                      00132    #include <p18f14k50.inc>
                      00133   ELSE
                      00134    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00135   ENDIF
                      00136  ENDIF
                      00137 
                      00138 ;
                      00139 ; The following public symbols can be used after this file is
                      00140 ; included (and this file should be included everywhere before
                      00141 ; anything else is included, and in lieu of PROCESSOR directives
                      00142 ; or #includes which bring in processor-specific bits--this file
                      00143 ; will do that for you):
                      00144 ;
                      00145 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00146 ;                   of the target chip will be and what its particular 
                      00147 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00148 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00149 ;
                      00150 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00151 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00152 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00153 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00154 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00155 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00156 ;
                      00157 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00158 ;                   slice timer sync pulse is coming from:
                      00159 ;
                      00160 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00161 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00162 ;
                      00163 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00164 ;                   is targeted, strictly to determine chip-specific details,
                      00165 ;                   not how Lumos is using it.
                      00166 ;
                      00167 ;       "14K50"         - The PIC18F14K50
                      00168 ;       "4685"          - The PIC18F4685
                      00169 ;
                      00170 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00171 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00172 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00173 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00174 #endif
                      00058         RADIX           DEC
                      00059 #include "lumos_init.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All Rights
                      00017 ; Reserved.  Released under the terms and conditions of the Open Software
                      00018 ; License, version 3.0.
                      00019 ;
                      00020 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00021 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00022 ;
                      00023 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00024 ;
                      00025 ; Device initialization code.  See lumos_main.asm for hardware implementation
                      00026 ; details.
                      00027 ;
                      00028 #include "lumos_config.inc"
                      00175 ; vim:set syntax=pic ts=8:
                      00176 ;
                      00177                 LIST n=90
                      00178 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00179 ;@@                                                                         @@
                      00180 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00181 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00182 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00183 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00184 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00185 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00186 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00187 ;@@                                                                         @@
                      00188 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00189 ;
                      00190 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00191 ; All Rights Reserved.  
                      00192 ; Released under the terms and conditions of the Open Software
                      00193 ; License, version 3.0.
                      00194 ;
                      00195 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00196 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00197 ;
                      00198 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00199 ;
                      00200 ; Configuration options.  Set these as desired and then re-assemble the
                      00201 ; code to produce the desired version of the ROM.
                      00202 ;
                      00203 ; 
                      00204 ;==============================================================================
                      00205 ; CONFIGURATION OPTIONS
                      00206 ;==============================================================================
                      00207 #ifndef LUMOS_CONFIG_INC
                      00208 #define LUMOS_CONFIG_INC
                      00209 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00210 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00211 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00212 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00213 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00214 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00215 ;
                      00216 ; Un-comment one of these to select board type for this ROM image:
                      00217 ;
                      00218 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00219 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00220 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00221 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00222 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00223 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00224 ;
                      00225 ;
                      00226 ;
                      00227 #define LUMOS_ZC                0x55
                      00228 #define LUMOS_INTERNAL          0x58
                      00229 
                      00230  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00231   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00232  ELSE
                      00233   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00234    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00235   ELSE
                      00236    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00237   ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238  ENDIF
                      00239  
                      00240  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00241   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00242  ENDIF
                      00243 
                      00244 
                      00245  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00246   #define ROLE_MASTER       (1)
                      00247   #define ROLE_SLAVE        (0)
                      00248   #define ROLE_STANDALONE   (0)
                      00249   #define NUM_CHANNELS      (.48)
                      00250   #define QSCC_PORT         (0)
                      00251  ELSE
                      00252   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00253    #define ROLE_MASTER      (0)
                      00254    #define ROLE_SLAVE       (1)
                      00255    #define ROLE_STANDALONE  (0)
                      00256    #define NUM_CHANNELS     (.48)
                      00257    #define QSCC_PORT        (0)
                      00258   ELSE
                      00259    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00260     #define ROLE_MASTER     (0)
                      00261     #define ROLE_SLAVE      (0)
                      00262     #define ROLE_STANDALONE (1)
                      00263     #define NUM_CHANNELS    (.24)
                      00264     #define QSCC_PORT       (0)
                      00265    ELSE
                      00266     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00267      #define ROLE_MASTER     (0)
                      00268      #define ROLE_SLAVE      (0)
                      00269      #define ROLE_STANDALONE (1)
                      00270      #define NUM_CHANNELS    (.4)
                      00271      #define QSCC_PORT       (0)
                      00272     ELSE
                      00273      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00274       #define ROLE_MASTER     (0)
                      00275       #define ROLE_SLAVE      (0)
                      00276       #define ROLE_STANDALONE (1)
                      00277       #define NUM_CHANNELS    (.14)
                      00278       #define QSCC_PORT       (1)
                      00279      ELSE
                      00280       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00281        #define ROLE_MASTER     (0)
                      00282        #define ROLE_SLAVE      (0)
                      00283        #define ROLE_STANDALONE (1)
                      00284        #define NUM_CHANNELS    (.20)
                      00285        #define QSCC_PORT       (1)
                      00286       ELSE
                      00287        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00288       ENDIF
                      00289      ENDIF
                      00290     ENDIF
                      00291    ENDIF
                      00292   ENDIF
                      00293  ENDIF
                      00294 
                      00295 #define LUMOS_ARCH_4685  (0x4685)
                      00296 #define LUMOS_ARCH_14K50 (0x1450)
                      00297 
                      00298  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00299   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00300   PROCESSOR 18F4685
                      00301   #include <p18f4685.inc>
                      00302  ELSE
                      00303   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00304    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00305    PROCESSOR 18F14K50
                      00306    #include <p18f14k50.inc>
                      00307   ELSE
                      00308    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00309   ENDIF
                      00310  ENDIF
                      00311 
                      00312 ;
                      00313 ; The following public symbols can be used after this file is
                      00314 ; included (and this file should be included everywhere before
                      00315 ; anything else is included, and in lieu of PROCESSOR directives
                      00316 ; or #includes which bring in processor-specific bits--this file
                      00317 ; will do that for you):
                      00318 ;
                      00319 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00320 ;                   of the target chip will be and what its particular 
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00321 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00322 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00323 ;
                      00324 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00325 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00326 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00327 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00328 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00329 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00330 ;
                      00331 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00332 ;                   slice timer sync pulse is coming from:
                      00333 ;
                      00334 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00335 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00336 ;
                      00337 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00338 ;                   is targeted, strictly to determine chip-specific details,
                      00339 ;                   not how Lumos is using it.
                      00340 ;
                      00341 ;       "14K50"         - The PIC18F14K50
                      00342 ;       "4685"          - The PIC18F4685
                      00343 ;
                      00344 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00345 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00346 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00347 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00348 #endif
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; PUBLIC ENTRY POINTS
                      00032 ;==============================================================================
  0000                00033         EXTERN  LUMOS_INIT      ; Call this to set up the hardware before use.
                      00034 ;
                      00035 ;
                      00060 #include "serial-io.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST n=90
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; General serial console I/O handling
                      00022 ;
                      00023 #include "serial-io-bits.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST n=90
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; serial io (SIO) module bit definitions, included by caller and the module
                      00022 ;
                      00023 #include "serial-io-user.inc"
                      00001 ;
                      00002 ; To use the serial I/O module, you need to edit this
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ; include file to suit your application.
                      00004 ;
                      00005 #include "lumos_config.inc"
                      00349 ; vim:set syntax=pic ts=8:
                      00350 ;
                      00351                 LIST n=90
                      00352 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00353 ;@@                                                                         @@
                      00354 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00355 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00356 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00357 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00358 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00359 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00360 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00361 ;@@                                                                         @@
                      00362 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00363 ;
                      00364 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00365 ; All Rights Reserved.  
                      00366 ; Released under the terms and conditions of the Open Software
                      00367 ; License, version 3.0.
                      00368 ;
                      00369 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00370 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00371 ;
                      00372 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00373 ;
                      00374 ; Configuration options.  Set these as desired and then re-assemble the
                      00375 ; code to produce the desired version of the ROM.
                      00376 ;
                      00377 ; 
                      00378 ;==============================================================================
                      00379 ; CONFIGURATION OPTIONS
                      00380 ;==============================================================================
                      00381 #ifndef LUMOS_CONFIG_INC
                      00382 #define LUMOS_CONFIG_INC
                      00383 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00384 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00385 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00386 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00387 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00388 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00389 ;
                      00390 ; Un-comment one of these to select board type for this ROM image:
                      00391 ;
                      00392 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00393 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00394 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00395 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00396 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00397 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00398 ;
                      00399 ;
                      00400 ;
                      00401 #define LUMOS_ZC                0x55
                      00402 #define LUMOS_INTERNAL          0x58
                      00403 
                      00404  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00405   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00406  ELSE
                      00407   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00408    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00409   ELSE
                      00410    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00411   ENDIF
                      00412  ENDIF
                      00413  
                      00414  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00415   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00416  ENDIF
                      00417 
                      00418 
                      00419  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00420   #define ROLE_MASTER       (1)
                      00421   #define ROLE_SLAVE        (0)
                      00422   #define ROLE_STANDALONE   (0)
                      00423   #define NUM_CHANNELS      (.48)
                      00424   #define QSCC_PORT         (0)
                      00425  ELSE
                      00426   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00427    #define ROLE_MASTER      (0)
                      00428    #define ROLE_SLAVE       (1)
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00429    #define ROLE_STANDALONE  (0)
                      00430    #define NUM_CHANNELS     (.48)
                      00431    #define QSCC_PORT        (0)
                      00432   ELSE
                      00433    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00434     #define ROLE_MASTER     (0)
                      00435     #define ROLE_SLAVE      (0)
                      00436     #define ROLE_STANDALONE (1)
                      00437     #define NUM_CHANNELS    (.24)
                      00438     #define QSCC_PORT       (0)
                      00439    ELSE
                      00440     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00441      #define ROLE_MASTER     (0)
                      00442      #define ROLE_SLAVE      (0)
                      00443      #define ROLE_STANDALONE (1)
                      00444      #define NUM_CHANNELS    (.4)
                      00445      #define QSCC_PORT       (0)
                      00446     ELSE
                      00447      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00448       #define ROLE_MASTER     (0)
                      00449       #define ROLE_SLAVE      (0)
                      00450       #define ROLE_STANDALONE (1)
                      00451       #define NUM_CHANNELS    (.14)
                      00452       #define QSCC_PORT       (1)
                      00453      ELSE
                      00454       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00455        #define ROLE_MASTER     (0)
                      00456        #define ROLE_SLAVE      (0)
                      00457        #define ROLE_STANDALONE (1)
                      00458        #define NUM_CHANNELS    (.20)
                      00459        #define QSCC_PORT       (1)
                      00460       ELSE
                      00461        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00462       ENDIF
                      00463      ENDIF
                      00464     ENDIF
                      00465    ENDIF
                      00466   ENDIF
                      00467  ENDIF
                      00468 
                      00469 #define LUMOS_ARCH_4685  (0x4685)
                      00470 #define LUMOS_ARCH_14K50 (0x1450)
                      00471 
                      00472  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00473   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00474   PROCESSOR 18F4685
                      00475   #include <p18f4685.inc>
                      00476  ELSE
                      00477   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00478    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00479    PROCESSOR 18F14K50
                      00480    #include <p18f14k50.inc>
                      00481   ELSE
                      00482    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00483   ENDIF
                      00484  ENDIF
                      00485 
                      00486 ;
                      00487 ; The following public symbols can be used after this file is
                      00488 ; included (and this file should be included everywhere before
                      00489 ; anything else is included, and in lieu of PROCESSOR directives
                      00490 ; or #includes which bring in processor-specific bits--this file
                      00491 ; will do that for you):
                      00492 ;
                      00493 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00494 ;                   of the target chip will be and what its particular 
                      00495 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00496 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00497 ;
                      00498 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00499 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00500 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00501 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00502 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00503 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00504 ;
                      00505 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00506 ;                   slice timer sync pulse is coming from:
                      00507 ;
                      00508 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00509 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00510 ;
                      00511 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00512 ;                   is targeted, strictly to determine chip-specific details,
                      00513 ;                   not how Lumos is using it.
                      00514 ;
                      00515 ;       "14K50"         - The PIC18F14K50
                      00516 ;       "4685"          - The PIC18F4685
                      00517 ;
                      00518 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00519 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00520 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00521 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00522 #endif
                      00006 
                      00007                         IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000100            00008 SIO_TX_BUFFER_START      EQU    0x100   ; Starting address of 256-byte Tx buffer*
  00000200            00009 SIO_RX_BUFFER_START      EQU    0x200   ; Starting address of 256-byte Rx buffer*
  00000300            00010 SIO_DATA_START           EQU    0x300   ; Starting address for SIO module variable storage
  00015000            00011 SIO_TABLE_START          EQU    0x15000 ; Starting ROM address for SIO module tables*
                      00012                         ELSE
                      00013                          IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00014 SIO_TX_BUFFER_START       EQU   0x100   ; Starting address of 256-byte Tx buffer*
                      00015 SIO_RX_BUFFER_START       EQU   0x200   ; Starting address of 256-byte Rx buffer*
                      00016 SIO_DATA_START            EQU   0x0E4   ; Starting address for SIO module variable storage
                      00017 SIO_TABLE_START           EQU   0x2F00  ; Starting ROM address for SIO module tables*
                      00018                          ELSE
                      00019                           ERROR "Invalid architecture switch in serial-io-user.inc"
                      00020                          ENDIF
                      00021                         ENDIF
                      00022 ;
                      00023 ; * must be aligned to the start of a 256-byte bank.
                      00024 ;
                      00024 ;       
                      00025 ;                    bit 7      6      5      4      3      2      1      0
                      00026 ;                     _______________________________________________________
                      00027 ; +$00 SIO_STATUS    |      |      |SIO_  |SIO_  |RXDATA|TXDATA|RXDATA|TXDATA|
                      00028 ;                    |      |      | FERR | ORUN |_FULL |_FULL |_QUEUE|_QUEUE|
                      00029 ;                    |______|______|______|______|______|______|______|______|
                      00030 ;
  00000000            00031 TXDATA_QUEUE    EQU     0       ; Tx data waiting in buffer now to be sent
  00000001            00032 RXDATA_QUEUE    EQU     1       ; Rx data waiting in buffer to be retrieved
  00000002            00033 TXDATA_FULL     EQU     2       ; Tx buffer full
  00000003            00034 RXDATA_FULL     EQU     3       ; Rx buffer full
  00000004            00035 SIO_ORUN        EQU     4       ; I/O Error: incoming data overrun  (caller clears)
  00000005            00036 SIO_FERR        EQU     5       ; I/O Error: break/framing error received  (caller clears)
                      00037 ;
                      00038 ; Baud rate settings
                      00039 ;
  00000000            00040 SIO_300         EQU     0x00
  00000001            00041 SIO_600         EQU     0x01
  00000002            00042 SIO_1200        EQU     0x02
  00000003            00043 SIO_2400        EQU     0x03
  00000004            00044 SIO_4800        EQU     0x04
  00000005            00045 SIO_9600        EQU     0x05
  00000006            00046 SIO_19200       EQU     0x06
  00000007            00047 SIO_38400       EQU     0x07
  00000008            00048 SIO_57600       EQU     0x08
  00000009            00049 SIO_115200      EQU     0x09
  0000000A            00050 SIO_250000      EQU     0x0A
                      00024 ; 
                      00025 ;==============================================================================
                      00026 ; PUBLIC ENTRY POINTS
                      00027 ;==============================================================================
                      00028 ;
  0000                00029         EXTERN  SIO_INIT        ; Call this to set up the module before use.
  0000                00030         EXTERN  SIO_RECV        ; Call from ISR when a byte is received.
  0000                00031         EXTERN  SIO_SEND        ; Call from ISR when clear to send next byte.
  0000                00032         EXTERN  SIO_ECHO        ; Print char in SIO_OUTPUT in printable form.**
  0000                00033         EXTERN  SIO_ECHO_W      ; Print char in WREG in printable form.* **
  0000                00034         EXTERN  SIO_WRITE       ; Print char in SIO_OUTPUT in raw form.
  0000                00035         EXTERN  SIO_WRITE_W     ; Print char in WREG in raw form.*
  0000                00036         EXTERN  SIO_PUTCHAR     ; Blocking form of SIO_WRITE.**
  0000                00037         EXTERN  SIO_PUTCHAR_W   ; Blocking form of SIO_WRITE_W.* **
  0000                00038         EXTERN  SIO_READ        ; Read a character to SIO_INPUT.
  0000                00039         EXTERN  SIO_READ_W      ; Read a character to SIO_INPUT and WREG.
  0000                00040         EXTERN  SIO_GETCHAR     ; Blocking form of SIO_READ.**
  0000                00041         EXTERN  SIO_GETCHAR_W   ; Blocking form of SIO_READ_W.**
  0000                00042         EXTERN  SIO_NEWLINE     ; Print a carriage return/line feed.**
  0000                00043         EXTERN  SIO_PRINT_HEX   ; Print value in SIO_OUTPUT as hex byte.**
  0000                00044         EXTERN  SIO_PRINT_HEX_W ; Print value in SIO_OUTPUT as hex byte.* **
  0000                00045         EXTERN  B32__BIN2BCD    ; B32__BIN[4] -> B32__BCD_ASC[5]; big-endian
  0000                00046         EXTERN  B32__BCD2ASCII  ; B32__BCD_ASC[5] -> B32__BCD_ASC[10]
  0000                00047         EXTERN  SIO_SET_BAUD_W  ; Set baud rate from code in W (See serial-io-bits.inc)
  0000                00048         EXTERN  SIO_FLUSH_INPUT ; Clear input buffer; discards any unread received data
  0000                00049         EXTERN  SIO_FLUSH_OUTPUT; Clear output buffer; discards any unsent data
                      00050 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051 ; *Also overwrites SIO_OUTPUT or SIO_INPUT.
                      00052 ; **Blocks execution until device/buffer ready.
                      00053 ;
                      00054 ; The SIO_READ functions are non-blocking, in case you need non-blocking I/O,
                      00055 ; although a better approach would be to check SIO_STATUS<RXDATA_QUEUE> to see
                      00056 ; if there's data queued up waiting to be read before calling SIO_READ.
                      00057 ; Alternatively the SIO_GETCHAR functions always block to wait for data to be
                      00058 ; available.  The SIO_PUTCHAR, SIO_NEWLINE, and SIO_ECHO functions always block 
                      00059 ; until the characters can be successfully buffered to be transmitted.  A
                      00060 ; non-blocking write is avilable from SIO_WRITE.
                      00061 ;
                      00062 ; "printable form" means that control characters print as the two-character
                      00063 ; sequence "^x" (i.e., 0x00="^@", 0x01="^A", etc.); the escape character 0x1B
                      00064 ; prints as "$"; the delete character 0x7F prints as "^?"; and meta-characters
                      00065 ; (i.e., 0x80-0xFF) print as "M-" followed by what the character would have
                      00066 ; echoed as if the high bit were not sent (e.g., 0x80="M-^@", 0xD0="M-P").
                      00067 ;
                      00068 ; "raw form" send the 8-bit byte to the serial port with no translation at all.
                      00069 ;
                      00070 ; The READ functions are non-blocking; they will return 0 if no character is
                      00071 ; available (check SIO_STATUS<RXDATA_QUEUE> to see if data is ready to read).
                      00072 ;
                      00073 ; The GETCHAR functions are blocking; they will wait until they are able to write
                      00074 ; data before completing.
                      00075 ;
                      00076 ;==============================================================================
                      00077 ; PUBLIC DATA
                      00078 ;==============================================================================
                      00079 ;
  0000                00080         EXTERN  SIO_STATUS      ; status register (see serial-io-bits.inc for bit values)
  0000                00081         EXTERN  SIO_INPUT       ; last byte read from serial port (output from module)
  0000                00082         EXTERN  SIO_OUTPUT      ; byte to write to serial port (input to module)
  0000                00083         EXTERN  B32__BIN        ; 4-byte big-endian input to B32__BIN2BCD
  0000                00084         EXTERN  B32__BCD_ASC    ; 5-byte output from B32__BIN2BCD and input/output to/from
                      00085                                 ; B32__BCD2ASCII.
                      00086 ;
                      00087 ; If writing data to the port and the buffer fills up, the printed characters
                      00088 ; will be ignored past the point where the buffer fills up, and the SIO_STATUS<TXDATA_FULL>
                      00089 ; flag will be set.
                      00090 ;
                      00091 ; If too much data arrives at the serial port before you read it out with this module's
                      00092 ; functions, the extra incoming bytes will be discarded, and the SIO_STATUS<RXDATA_FULL>
                      00093 ; flag will be set.
                      00094 ;
                      00095 ; Framing errors and buffer overruns (data received faster than the SIO_RECV function
                      00096 ; could handle them, usually because the SIO_RECV function isn't being called quickly
                      00097 ; enough) cause the SIO_STATUS<SIO_FERR> and SIO_STATUS<SIO_ORUN> bits to be set,
                      00098 ; respectively.
                      00099 ;
                      00100 ; It is the caller's responsibility to clear these flags.
                      00101 ;
                      00102 ; This module will automatically turn on/off the TXIE interrupt enable
                      00103 ; bit as needed to handle shipping out buffered data to the serial port.
                      00104 ; Just ensure that your ISR calls SIO_RECV when an RXIF interrupt is
                      00105 ; detected (you should clear RXIF when that's done), and you also call
                      00106 ; SIO_SEND when TXIF is detected (and clear that bit, too).
                      00107 ;
                      00061         IF !QSCC_PORT
                      00062 #include "flash_update.inc"
                      00063         ENDIF
                      00064 
                      00065 ; Works on Lumos 48-Channel controller boards 48CTL-3-1 with retrofit
                      00066 ; and 24SSR-DC-1.0.8 boards.
                      00067 ;
                      00068 ; N.B. THE BOARD SELECT BITS IN LUMOS_CONFIG.INC MUST BE SELECTED
                      00069 ; FOR THE TARGET CONFIGURATION!  EACH ROM IS DIFFERENT!
                      00070 ;
                      00071 ; Target Microcontroller is PIC18F4685, Q=40MHz (100nS instruction cycle)
                      00072 ; (Original was designed for PIC16F777 and PIC16F877A; you must upgrade
                      00073 ; the uC to a PIC18F4685 AND retrofit some parts on the old board as
                      00074 ; follows:
                      00075 ;    Replace X0 and X1 with 10 MHz crystals.
                      00076 ;    Interface off-board reset button to ground J5 and J6 pin 3 when pressed.
                      00077 ;    Interface off-board option button to ground J5 pin 5 when pressed.
                      00078 ;    Install a 10K pull-up resistor between J5 pin 5 and +5V.
                      00079 ;    (Optional) /PWRCTL output to P/S available on J5 pin 4.
                      00080 ;    Option button should only be attached to the master microcontroller.
                      00081 ;    Both need reset signals.
                      00082 ;
                      00083 ; Serial control (RS-232 or RS-485) at 19.2kbps by default.
                      00084 ; Configurable from 300 to 250000 baud.
                      00085 ;
                      00086 ;=============================================================================
                      00087 ; DIAGNOSTICS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00088 ;-----------------------------------------------------------------------------
                      00089 ;
                      00090 ; The front panel LEDs provide the following indications of status.  
                      00091 ;
                      00092 ; A  G  Y  R
                      00093 ; C  R  E  E
                      00094 ; T  N  L  D PHASE MEANING
                      00095 ; ---------- ----- -------
                      00096 ; .  .  .  . BOOT  Never started into boot sequence
                      00097 ; .  .  .  * BOOT  Halted during EEPROM setup
                      00098 ; .  .  *  * BOOT  Halted during EEPROM write operation
                      00099 ; .  .  *  . BOOT  Halted during EEPROM read / system init
                      00100 ; .  *  *  . BOOT  Halted during system initialization
                      00101 ; .  *  .  . BOOT  Initialized but main loop or timing system non-functional
                      00102 ;** ** ** ** RUN   Factory defaults restored (then reboots)
                      00103 ; . (*) .  . RUN   Normal operations
                      00104 ; . **  .  . RUN   Normal operations + privileged (config) mode enabled
                      00105 ; ! (*) X  X RUN   Received command for this unit
                      00106 ; X  X  !  X RUN   Master/Slave communications
                      00107 ; X  X  X  * RUN   Command error
                      00108 ; X  X  * ** RUN   Communications error (framing error)
                      00109 ; X  X ** ** RUN   Communications error (overrun error)
                      00110 ; X  X (*)** RUN   Communications error (buffer full error)
                      00111 ;** (*)**  . RUN   Internal error (exact error displayed on 2nd set of LEDs)*
                      00112 ; . () () () SLEEP Sleep Mode
                      00113 ; .  .  .  % HALT  System Halted normally
                      00114 ; ?  ?  ? ** HALT  Fatal error (exact error displayed on other LEDs)
                      00115 ;**  . ** ** HALT  Fatal error: reset/halt failure
                      00116 ;
                      00117 ; .=off  *=steady (*)=slowly fading on/off X=don't care
                      00118 ; ()=slow flash **=rapid flash !=blink/fade once (**)=rapid fade
                      00119 ; %=extra-slow flash
                      00120 ;
                      00121 ;
                      00122 ; *Internal error codes on 2nd LEDs (48-channel models only)
                      00123 ; A  G  Y  R
                      00124 ; C  R  E  E
                      00125 ; T  N  L  D MEANING
                      00126 ; ---------- -------
                      00127 ;-- **  .  . dispatch table overrun
                      00128 ;--  X  .  * input validator failure
                      00129 ;-- ** ** ** reset failure
                      00130 ;--  X  . ** device/hardware problem
                      00131 ;--  X  .(*) internal command error
                      00132 ;--  . **  . unknown/other error class
                      00133 ;-- 
                      00134 ;
                      00135 ; Error codes retrieved from query command
                      00136 ; 01  Command decode error (dispatch overrun)
                      00137 ; 02  Input validator failed to deal with bad value (channel number range for SET_LVL)
                      00138 ; 03  Input validator failed to deal with bad value (channel number range for BULK_UPD)
                      00139 ; 04  Input validator failed to deal with bad value (BULK_UPD data block scan)
                      00140 ; 05  Command decode error (dispatch overrun in S6 final command execution)
                      00141 ; 06  Input validator failed to deal with bad value (channel number range for RAMP_LVL)
                      00142 ; 07  Command decode error (dispatch overrun in S9 internal command execution)
                      00143 ; 08  Command decode error (illegal state transition in S10 for IC_TXDAT/IC_TXSTA)
                      00144 ; 09  Command impossible to carry out on this hardware (chip without T/R tried to take control of bus)
                      00145 ; 0A  Illegal internal command sent from master chip (invalid packet in S11 IC_TXDAT/IC_TXSTA)
                      00146 ; 0B  Command decode error (illegal state transition in S11 for IC_TXDAT/IC_TXSTA)
                      00147 ; 0C  Command decode error (illegal state transition in S12 for IC_LED)
                      00148 ; 0D  Command decode error (illegal state transition in S13 for IC_LED)
                      00149 ; 0E  Command decode error (extended dispatch overrun)
                      00150 ; 0F  Illegal internal command sent from master chip (received raw QUERY packet)
                      00151 ; 10  Could not determine device type                                  _
                      00152 ; 11  Command impossible to carry out on this hardware (chip without T/R tried to release control of bus
                            )
                      00153 ; 12  Internal inter-CPU command executed on wrong class hardware
                      00154 ; 
                      00155 ; 20  Unrecognized command received or command arguments incorrect
                      00156 ; 21  Attempt to invoke privileged command from normal run mode
                      00157 ; 22  Command not yet implemented
                      00158 ; 23  Command received before previous one completed (previous command aborted)
                      00159 ; 70  CPU failed to reset with new configuration (execution bounds check)
                      00160 ; 71  CPU failed to halt when requested (execution bounds check)
                      00161 ;
                      00162 ; OPTION BUTTON:
                      00163 ; 
                      00164 ; Pres and hold the option button to enter field setup mode.  The lights will
                      00165 ; flash rapidly to signal this mode change.  Release the button and wait.  
                      00166 ; The lights will remain steady.  This enables the privileged 
                      00167 ; (configuration) command mode, allowing the Lumos unit to receive device 
                      00168 ; configuration commands from the host PC.
                      00169 ;
                      00170 ; Press the button again to enter self-test mode.  The LEDs will chase
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00171 ; once to signal this mode.  In this mode, serial communication to the
                      00172 ; unit will be ignored.  Each output channel in turn will be turned on 
                      00173 ; for one second. The dimmer is NOT used, only fully on/fully off.  The
                      00174 ; LEDs on the top board will show the least-significant 4 bits of the
                      00175 ; output channel currently on.  If present, the bottom board's LEDs will
                      00176 ; show the most significant bits.
                      00177 ; 
                      00178 ; Pressing the button in this mode causes the cycle to pause on the current
                      00179 ; output channel until the button is pressed again to resume the cycle.
                      00180 ; 
                      00181 ; Pressing and holding the button will exit option mode and return to
                      00182 ; regular (but still privileged) run mode.  The host PC can issue a command
                      00183 ; to drop privileged mode, or the RESET button may be pressed to reset the
                      00184 ; system completely which includes disabling privileged mode.
                      00185 ; 
                      00186 ; ---TOP*---  --BOT--
                      00187 ; A  G  Y  R  G  Y  R
                      00188 ; C  R  E  E  R  E  E
                      00189 ; T  N  L  D  N  L  D  PHASE  MEANING
                      00190 ; -------------------  -----  -------
                      00191 ;** ** ** ** ** ** **  OPTION Entering option mode
                      00192 ; X **  X  X  X  X  X  OPTION Entered privileged run mode
                      00193 ;b3 b2 b1 b0 b5 b4 (*) OPTION Self-test mode (cycling)
                      00194 ;b3 b2 b1 b0 b5 b4  *  OPTION Self-test mode (paused)
                      00195 ;
                      00196 ; 24-channel models only have the top LEDs.  If sensors are installed
                      00197 ; in place of LEDs, some of these may not be present.
                      00198 ;
                      00199 ;=============================================================================
                      00200 ; IMPLEMENTATION NOTES
                      00201 ;-----------------------------------------------------------------------------
                      00202 ;
                      00203 ; The SSR controller firmware consists of a number of somewhat independent 
                      00204 ; subsystems:
                      00205 ; 
                      00206 ; START
                      00207 ;       Initializes the microcontroller, starts up the required peripherals,
                      00208 ;       indicates the device ID on the front panel, and enters the main loop
                      00209 ;
                      00210 ; SIO
                      00211 ;       Handles all serial I/O operations in the background (interrupt-driven)
                      00212 ;       so the rest of the code only needs to be concerned with higher-level
                      00213 ;       reads and writes.  Buffers hold 256 characters each of input and output.
                      00214 ;
                      00215 ; ISR
                      00216 ;       The interrupt service routine manages a set of counters and timers:
                      00217 ;       1. At each AC line zero-crossing point, we reset a two-stage waveform
                      00218 ;          slicing timing chain which governs the ability for the SSRs to dim
                      00219 ;          incandescent lamps plugged into them; 
                      00220 ;       2. For DC boards, we run a 120 Hz timer which provides approximately
                      00221 ;          the same time base since those boards have no zero-crossing detection;
                      00222 ;       3. Each front panel LED has a counter for how long their current 
                      00223 ;          status is to be held, to allow a human to have enough time to 
                      00224 ;          see the LED before it would be extinguished. (This is less explicit
                      00225 ;          now than the previous major firmware version.  The LEDs are now simply
                      00226 ;          treated just like extra SSR lines, so they use the same code to manage
                      00227 ;          them.)
                      00228 ;
                      00229 ; MAIN_LOOP
                      00230 ;       Manages the display of the front panel LEDs
                      00231 ;       Updates the status of the SSR lines if it's time to do so
                      00232 ;       Receives a character from the serial line if one's waiting
                      00233 ;
                      00234 ; INTERPRETER
                      00235 ;       When a byte is received on the serial line, it is processed by
                      00236 ;       a small state machine.  The current state is held in YY_STATE (named
                      00237 ;       in honor of the venerable yacc).
                      00238 ;
                      00239 ; FLASH_UPDATE
                      00240 ;       (flash_update.asm) Loader code to receive new firmware image over the
                      00241 ;       serial line and write it into the microcontroller's flash memory.
                      00242 ;
                      00243 ;-----------------------------------------------------------------------------
                      00244 ; Command Protocol:
                      00245 ;                     ___7______6______5______4______3______2______1______0__
                      00246 ; Command Byte:      |      |                    |                           |
                      00247 ;                    |   1  |    Command code    |   Target device address   |
                      00248 ;                    |______|______|______|______|______|______|______|______|
                      00249 ;
                      00250 ; Any byte with its MSB set is the beginning of a command.  If the target 
                      00251 ; device matches this unit's address, the state machine kicks into gear and
                      00252 ; processes the command (which may require some following data bytes, all
                      00253 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00254 ; byte.
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00255 ;
                      00256 ;                     ___7______6______5______4______3______2______1______0__
                      00257 ; Extended Command:  |      |                    |                           |
                      00258 ;                    |   1  |          7         |   Target device address   |
                      00259 ;                    |______|______|______|______|______|______|______|______|
                      00260 ;                    |      |                                                |
                      00261 ;                    |   0  |                  Command code                  |
                      00262 ;                    |______|______|______|______|______|______|______|______|
                      00263 ;
                      00264 ; The most common commands are given ID 0-6 so that they may be sent in as few
                      00265 ; bytes as possible (as few as a single byte), but we have more than 8 commands
                      00266 ; so we have an extended code.  If the command code is 7 (all bits set), then
                      00267 ; the following byte contains the actual command code which may be any value
                      00268 ; from 0-127.
                      00269 ;
                      00270 ;                     ___7______6______5______4______3______2______1______0__
                      00271 ; Data Byte:         |      |                                                |
                      00272 ;                    |   0  |                      Data                      |
                      00273 ;                    |______|______|______|______|______|______|______|______|
                      00274 ;
                      00275 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00276 ; in the middle of interpreting a multi-byte command, in which case it's interpreted
                      00277 ; appropriately as data supporting the command being executed.  This way, other
                      00278 ; devices which share the same protocol format but not necessarily a compatible
                      00279 ; command set may safely know which bytes can be ignored without knowing the
                      00280 ; details of each other's command sets.
                      00281 ;
                      00282 ; Two special bytes are recognized:
                      00283 ;
                      00284 ;                     ___7______6______5______4______3______2______1______0__
                      00285 ; MSB Escape:        |      |                                                |
                      00286 ;                    |   0  |   1      1      1      1      1      1      0  |
                      00287 ;                    |______|______|______|______|______|______|______|______|
                      00288 ;
                      00289 ; If this ($7E) byte is received, it is ignored but the next byte received will
                      00290 ; have its MSB bit set.  This allows data bytes to have full 8-bit values without
                      00291 ; violating the communication protocol described above.  That second byte is not
                      00292 ; interpreted further.
                      00293 ;
                      00294 ;                     ___7______6______5______4______3______2______1______0__
                      00295 ; Literal Escape     |      |                                                |
                      00296 ;                    |   0  |   1      1      1      1      1      1      1  |
                      00297 ;                    |______|______|______|______|______|______|______|______|
                      00298 ;
                      00299 ; If this ($7F) byte is received, it is ignored but the next byte is accepted
                      00300 ; as-is without further interpretation.
                      00301 ;
                      00302 ; Specific Example Cases of interest:
                      00303 ;       Sequence    Resulting byte
                      00304 ;       $7E $7E     $FE
                      00305 ;       $7E $7F     $FF
                      00306 ;       $7F $7E     $7E
                      00307 ;       $7F $7F     $7F
                      00308 ;
                      00309 ; A command byte (received with MSB already set) trumps all of the above.  It is
                      00310 ; taken as the start of a command and the escape sequence in progress is canceled.
                      00311 ;
                      00312 ; Commands recognized:
                      00313 ;
                      00314 ;   COMMAND  CODE  BITS
                      00315 ;   BLACKOUT 0     1000aaaa
                      00316 ;   ON_OFF   1     1001aaaa 0scccccc            Turn channel <c> on (<s>=1) or off (<s>=0)
                      00317 ;   SET_LVL  2     1010aaaa 0hcccccc 0vvvvvvv    Set dimmer level <v>:<h> on channel <c>
                      00318 ;   BULK_UPD 3     1011aaaa 0mcccccc ...                Bulk-upload multiple channel levels
                      00319 ;   RAMP_LVL 4     1100aaaa Cdcccccc ...         Ramp channel <c> smoothly up (<d>=1) or down (<C>=1 cyc
                            le)
                      00320 ;            5     1101aaaa                      Reserved for future use
                      00321 ;            6     1110aaaa                      Reserved for future use
                      00322 ;   EXTENDED 7     1111aaaa                      Extended command, decoded further in next byte
                      00323 ; @ SLEEP    7+0   1111aaaa 00000000 01011010 01011010  Put unit to sleep
                      00324 ; @ WAKE     7+1   1111aaaa 00000001 01011010 01011010  Take unit out of sleep mode
                      00325 ;   SHUTDOWN 7+2   1111aaaa 00000010 01011000 01011001  Take unit completely offline
                      00326 ; < QUERY    7+3   1111aaaa 00000011 00100100 01010100  Report device status
                      00327 ;X! DEF_SEQ  7+4   1111aaaa 00000100 0iiiiiii ...       Define sequence <i>
                      00328 ;X  EXEC_SEQ 7+5   1111aaaa 00000101 0iiiiiii           Execute sequence <i> (0=stop)
                      00329 ;X  DEF_SENS 7+6   1111aaaa 00000110 ...                Define sensor trigger
                      00330 ;X  MSK_SENS 7+7   1111aaaa 00000111 0000ABCD           Mask inputs (1=enable, 0=disable)
                      00331 ;X! CLR_SEQ  7+8   1111aaaa 00001000 01000011 01000001  Erase all stored sequences
                      00332 ;   XPRIV    7+9   1111aaaa 00001001                    Forbid priviliged mode
                      00333 ;            7+10  1111aaaa 00001010                    Reserved for future use
                      00334 ;             :        :        :                           :     :     :    : 
                      00335 ;            7+29  1111aaaa 00011101                    Reserved for future use                 
                      00336 ;   OUT_NAK  7+30  1111aaaa 00011110                    QUERY NAK                               
                      00337 ;   OUT_RPLY 7+31  1111aaaa 00011111 ...                Reply to QUERY command_________________ 
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00338 ;   IC_TXDAT 7+32  11110000 00100000 0nnnnnnn (...)*<n>+1 00011011 data -> serial port INTERNAL
                      00339 ;   IC_LED   7+33  11110000 00100001 00GGGYYY 00000RRR             LED Control         ////////
                      00340 ;   IC_HALT  7+34  11110000 00100010                               CPU Halt            ////////
                      00341 ;   IC_TXSTA 7+35  11110000 00100011 0nnnnnnn (...)*<n>+1 00011011 TXDAT + status+sent ////////
                      00342 ;            7+36  11110000 00100100                    Reserved for new commands      ////////
                      00343 ;             :        :        :                           :     :   :      :         ////////
                      00344 ;            7+63  11110000 00111111                    Reserved for new commands______////////
                      00345 ;*! CF_PHASE 7+64  1111aaaa 010000pp 0ppppppp 01010000 01001111   Phase offset=<p>       CONFIG
                      00346 ;*! CF_ADDR  7+96  1111aaaa 0110AAAA 01001001 01000001 01000100   Change address to <A>  ||||||
                      00347 ;*  CF_NOPRV 7+112 1111aaaa 01110000                              Leave privileged mode  ||||||
                      00348 ;*  CF_CONF  7+113 1111aaaa 01110001 ...                          Configure device       ||||||
                      00349 ;*! CF_BAUD  7+114 1111aaaa 01110010 0bbbbbbb 00100110            Set baud rate to <b>   ||||||
                      00350 ;*! CF_RESET 7+115 1111aaaa 01110011 00100100 01110010            Reset factory defaults ||||||
                      00351 ;*  CF_XPRIV 7+116 1111aaaa 01110100                              Forbid priviliged mode ||||||
                      00352 ;*  CF_FLROM 7+117 1111aaaa 01110101 00110011 01001100 00011100   Begin ROM update cycle ||||||
                      00353 ;*           7+118 1111aaaa 01110110                     Reserved for future config cmd  ||||||
                      00354 ;*                     :        :                            :     :     :      :    :   ||||||
                      00355 ;*           7+127 1111aaaa 01111111                     Reserved for future config cmd__||||||
                      00356 ;
                      00357 ; Legend:
                      00358 ;   X Not yet implemented; planned for future; subject to change
                      00359 ;   @ Unit may automatically take this action
                      00360 ;   * Privileged configuration-mode command
                      00361 ;   ! Permanent effect (written to EEPROM)
                      00362 ;   < Command generates response data (back to host)
                      00363 ;   a Device address (0-15)
                      00364 ;   b Baud rate code (0-127), but units may only define a small subset of those values
                      00365 ;   c Output channel (0-63, but unit may only support a lesser number)
                      00366 ;   d Direction: up (<d>=1) or down (<d>=0).
                      00367 ;   h High-res level bit (LSB of 8-bit value when in high-res mode)
                      00368 ;   m Mode (1=high-res, 0=low-res)
                      00369 ;   n Number of items affected
                      00370 ;   s Output state: 0=off, 1=on
                      00371 ;   v Value of dimmer (0-127) (most significant 7 bits of dimmer value)
                      00372 ;
                      00373 ; Payloads for many-byte commands
                      00374 ;
                      00375 ; BULK_UPD:  00cccccc 0nnnnnnn v0 v1 v2 ... vn 01010101
                      00376 ;       Updates <n>+1 channels starting at <c>, giving <v> values for each as per SET_LVL.
                      00377 ;
                      00378 ; RAMP_LVL:  0dcccccc 0sssssss 0ttttttt   Channel <c> up/down in <s>+1 steps every <t>+1/120 sec
                      00379 ;
                      00380 ; DEF_SEQ:   0iiiiiii 0nnnnnnn (...)*<n+1> 01000100 01110011  Define sequence <i> of length <n+1>
                      00381 ;                                                             0 is boot sequence, 1-63 is EEPROM
                      00382 ;                                                             64-127 is RAM.
                      00383 ;
                      00384 ; DEF_SENS:  0owE00SS 0IIIIIII 0iiiiiii 0PPPPPPP 00111100
                      00385 ;       Defines the trigger for sensor <S> (00=A, 01=B, 10=C, 11=D), where the event triggers
                      00386 ;       when sensor input goes low (<E>=0) or high (<E>=1).  When triggered, sequence <I>
                      00387 ;       initially, then continues playing sequence <i> (once if <O>=1, else while the sensor
                      00388 ;       remains active if <W>=1, else forever until forced to stop), then sequence <P> is
                      00389 ;       played at the end of the event.
                      00390 ;
                      00391 ; IC_LED:    00GGGYYY 00000RRR
                      00392 ;       each 3 bits decode as:
                      00393 ;               000 steady off  001 steady on
                      00394 ;               010 slow fade   011 fast fade
                      00395 ;               100 slow flash  101 fast flash
                      00396 ;               11x no change
                      00397 ;
                      00398 ; CF_CONF:   0ABCDdcc 0ccccccc 00111010 00111101
                      00399 ;       Configure sensor lines ABCD as 1=sensor inputs or 0=LED outputs,
                      00400 ;       DMX mode if <d>=1, with Lumos channel 0 at DMX channel <c>+1.
                      00401 ;       
                      00402 ; CF_BAUD:   Values recognized:
                      00403 ;       00000000 ($00)      300 baud
                      00404 ;       00000001 ($01)      600
                      00405 ;       00000010 ($02)    1,200
                      00406 ;       00000011 ($03)    2,400
                      00407 ;       00000100 ($04)    4,800
                      00408 ;       00000101 ($05)    9,600
                      00409 ;       00000110 ($06)   19,200
                      00410 ;       00000111 ($07)   38,400
                      00411 ;       00001000 ($08)   57,600
                      00412 ;       00001001 ($09)  115,200
                      00413 ;       00001010 ($0A)  250,000
                      00414 ;
                      00415 ;
                      00416 ; Response packet from QUERY command (37 bytes):
                      00417 ; note the ROM version byte also serves to indicate the format of the response
                      00418 ; bytes which follow.  If the query packet format changes, the ROM version byte
                      00419 ; MUST also change.
                      00420 ;
                      00421 ;    1111aaaa 00011111 00110001 0ABCDdcc 0ccccccc 0ABCDqsf 0ABCDXpp 0ppppppp 
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00422 ;        \__/           \_/\__/  \__/|\_________/  \__/|||  \__/|\_________/  
                      00423 ;          |             maj |     | |   |           | |||   |  |      `--phase
                      00424 ;          `--reporting    minor   | |   `--DMX      | |||   |  `--config locked?
                      00425 ;              unit addr  rom      | |      channel  | |||   `--active
                      00426 ;                         vers.    | |               | ||`--mem full?
                      00427 ;                                  | `--DMX mode?    | |`--sleeping?
                      00428 ;                                  `--configured     | `--config mode?
                      00429 ;                                                    `--masks
                      00430 ;
                      00431 ;    0eeeeeee 0eeeeeee 0MMMMMMM 0MMMMMMM 0X0iiiii 0xxxxxxx 
                      00432 ;     \______________/  \______________/  | \___/  \_____/
                      00433 ;        `--EEPROM free    `--RAM free    |   |       `--executing seq.
                      00434 ;                                         |   `--device model
                      00435 ;                                         `--seq running?
                      00436 ;
                      00437 ;    0owE0000 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for A
                      00438 ;    0owE0001 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for B
                      00439 ;    0owE0010 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for C
                      00440 ;    0owE0011 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for D
                      00441 ;
                      00442 ;    0fffffff 0fffffff 000000pp 0ppppppp ssssssss ssssssss 00110011
                      00443 ;    \______/ \______/       \_________/ \______S/N______/
                      00444 ;        |        |               `--phase (channels 24-47)
                      00445 ;        |        `--fault code (channels 24-47)
                      00446 ;        `--fault code (channels 0-23)
                      00447 ;
                      00448 ; Also note that the controller is allowed to send OUT_NAK packets to the
                      00449 ; host in response to QUERY commands.  This does not complete the exchange,
                      00450 ; but serves to ask the host to continue waiting if the device won't be able
                      00451 ; to reply to the QUERY for long enough that it risks a timeout.  The host
                      00452 ; is under no obligation to respect the OUT_NAK packets.
                      00453 ;
                      00454 ;   1111aaaa 00011110 
                      00455 ;
                      00456 ; A controller MUST never send data except in response to an explicit
                      00457 ; request from the host.  Controllers MUST immediately cease sending
                      00458 ; data upon receiving any bytes on the network (this indicates that
                      00459 ; the host is no longer waiting for a reply but has moved on to something
                      00460 ; else or is querying another device now).  No further data may be sent
                      00461 ; until again explicitly asked for.
                      00462 ;
                      00463 ; This version of the Lumos ROM does not send OUT_NAK packets.
                      00464 ;
                      00465 ; 
                      00466 ;
                      00467 ;
                      00468 ;                     _______________________________________________________
                      00469 ; Channel ID:        |      |      |                                         |
                      00470 ;                    |  0   | ON   |               Channel ID                |
                      00471 ;                    |______|______|______|______|______|______|______|______|
                      00472 ; The ON bit <6> determines whether the channel is being turned on (1) or 
                      00473 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00474 ; setting the channel to a specific dimmer value.
                      00475 ;
                      00476 ;-----------------------------------------------------------------------------
                      00477 ; State Machine Details
                      00478 ;
                      00479 ; Normally sits at state 0 (Idle) where it pretty much spins free waiting
                      00480 ; for the start of a command to come along.
                      00481 ;
                      00482 ;  __________ my   __________
                      00483 ; |17 |      |slot|18 |      |
                      00484 ; |___|      |--->|___|      |
                      00485 ; | DMX WAIT |<---| DMX UPD  |
                      00486 ; |__________| brk|__________|
                      00487 ;    ^  |nottype0       |done
                      00488 ;    |  V_______________V_____________________________________.
                      00489 ; brk|  |                                                     |
                      00490 ;  __|__V____      __________                                 |
                      00491 ; | 0 |      |    | 1 |      |                                |
                      00492 ; |___|      |--->|___|      |                                |
                      00493 ; |   IDLE   |<---| ON_OFF   |                                | 
                      00494 ; |__________|  ch|__________|                                |
                      00495 ;    ^  |          __________      ___                        |
                      00496 ;    |  |         | 2 |      |ch  |   |v                      |
                      00497 ;    |  |-------->|___|      |--->| 3 |---------------------->|
                      00498 ;    |  |         | SET_LVL  |    |___|                       |
                      00499 ;    |  |         |__________|                                |
                      00500 ;    |  |          __________      ___      ___               |
                      00501 ;    |  |         | 5 |      |ch  |   |s   |   |t             |
                      00502 ;    |  |-------->|___|      |--->| 7 |--->| 8 |------------->|
                      00503 ;    |  |         | RAMP_LVL |    |___|    |___|              |
                      00504 ;    |  |         |__________|                                |
                      00505 ;    |  |          __________                  __________     |
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00506 ;    |  |         | 4 |      |ch              | 6 | Wait |    |
                      00507 ;    |  |-------->|___|      |--------------->|___|  for |--->|
                      00508 ;    |  |         | BULK_UPD |                | Sentinel |    |
                      00509 ;  __|__V____     |__________|                |__________|    |
                      00510 ; | 9 |      |                                      ^         |
                      00511 ; |___|      |                                      |         |
                      00512 ; | Extended |------------------------------------->|         |
                      00513 ; |__________|                                      |         |
                      00514 ;       |          __________                       |         |
                      00515 ;       |         |14 |      |i                     |         |
                      00516 ;       |-------->|___|      |----------------------'         |
                      00517 ;       |         | DEF_SEQ  |                                |
                      00518 ;       |         |__________|                                |
                      00519 ;       |          __________      ____                       |
                      00520 ;       |         |10 |      |N   |    |(done)                |
                      00521 ;       |-------->|___|      |--->| 11 |--------------------->|
                      00522 ;       |         | IC_TXDAT |    |____|                      |
                      00523 ;       |         | IC_TXSTA |                                |
                      00524 ;       |         |__________|                                |
                      00525 ;       |          __________      ____                       |
                      00526 ;       |         |12 |      |GY  |    |R                     |
                      00527 ;       |-------->|___|      |--->| 13 |--------------------->|
                      00528 ;       |         | IC_LED   |    |____|                      |
                      00529 ;       |         |__________|                                |
                      00530 ;       |          __________                                 |
                      00531 ;       |         |15 |      |i                               |
                      00532 ;       |-------->|___|      |------------------------------->|
                      00533 ;       |         | EXEC_SEQ |                                |
                      00534 ;       |         |__________|                                |
                      00535 ;       |          __________                                 |
                      00536 ;       |         |16 |      |m                               |
                      00537 ;       `-------->|___|      |--------------------------------'
                      00538 ;                 | MSK_SENS |    
                      00539 ;                 |__________|              
                      00540 ;
                      00541 ;-----------------------------------------------------------------------------
                      00542 ; System Timing Notes
                      00543 ;
                      00544 ; The system has some fairly specific real-time timing requirements in order
                      00545 ; to function properly.  The main external event we're synchronized to is the
                      00546 ; point where the AC waveform crosses the 0V line (the "zero crossing" point).
                      00547 ;
                      00548 ; An optoisolator on the controller board is connected to the AC input of the
                      00549 ; transformer and sends a positive-logic pulse to the INT pin of the micro-
                      00550 ; controller every time the AC line crosses 0V.  (Actually, the leading edge
                      00551 ; will slightly lead the zero crossing point and the trailing edge will 
                      00552 ; slightly lag behind it.)  So we enter our ISR once every 1/120 sec 
                      00553 ; (assuming US-standard 60Hz power).  For reference, this is 0.00833333 sec 
                      00554 ; or enough time for 83,333.333 instructions to be executed between each 
                      00555 ; interrupt.
                      00556 ;
                      00557 ; Slices  Time/slice (s)  Instructions/slice
                      00558 ;   1     0.00833333      83,333.333
                      00559 ;  32     0.00026042       2,604.167
                      00560 ;  64     0.00013021       1,302.083
                      00561 ; 128     0.00006510         651.042
                      00562 ; 132     0.00006313         631.313    128 levels + 2 on each end
                      00563 ; 260     0.00003205         320.513    256 levels + 2 on each end
                      00564 ;
                      00565 ; We divide the half-wave into "slices".  We need a minimum of 256 slices
                      00566 ; to get 256 levels of dimmer control, but we should add at least one on either
                      00567 ; end in case our timing's slightly off between the ZC points and the free-
                      00568 ; running timer.  For good measure, let's throw in a couple more to allow for
                      00569 ; pin settling times, minimum turn-on times for the triacs and just to be
                      00570 ; paranoid.  So let's say 260 slices per half-wave.  
                      00571 ;
                      00572 ; At 260 slices per ZC, each slice is 0.00003205128205128205 seconds.
                      00573 ; We set TMR2's period register to 159, with a 1:2 postscaler and no prescaler.
                      00574 ; That gives us a timer interrupt every 320 clock ticks, or every .000032 seconds.
                      00575 ; That's 320 instruction cycles worth of work we can pack into these cycles.
                      00576 ; Most of the work per cycle takes about 1/3 that much, so this should be ok.
                      00577 ;
  0000009F            00578 SLICE_TMR_PERIOD        EQU     0x9F
                      00579 ;
                      00580 ; For standalone DC boards, we don't have a zero-crossing input so we set up
                      00581 ; our own 120 Hz timing signal by running TMR0 with a 1:2 prescaler for 
                      00582 ; 41,666 clock ticks (i.e., running the timer from $5D3D-$FFFF).
                      00583 ;
                      00584                         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
  00005D3D            00585 CYCLE_TMR_PERIOD         EQU    0x5D3D
                      00586                         ENDIF
                      00587 ;
                      00588 ; In the previous (prototype) version of this controller, we took the ZC
                      00589 ; signal from the *secondary* side of the transformer, which meant that it
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00590 ; was possible for that to be out of phase with the actual AC ZC event, so
                      00591 ; the "phase delay" feature of the event handling code was written to 
                      00592 ; compensate for this.  Now that we sample the AC line directly, we set 
                      00593 ; this delay to a constant value and that should be good.  We left the 
                      00594 ; capability in here, though, to account for any need for adjustment which
                      00595 ; may turn up due to component tolerances, propagation delays, or similar
                      00596 ; things.  We correct for any phase offset by adding a software delay
                      00597 ; from 0-511 (although really only 0-260 make much sense) slices between the ZC
                      00598 ; interrupt and the start of the dimmer cycle of 260 slices.  (The other 4 
                      00599 ; slices are idle (not active) slices.) 
                      00600 ;
                      00601 ; The value for PHASE_OFFSET should be chosen to start the cycle one or two
                      00602 ; slices into the actual half-wave.  So if there is no phase difference at all
                      00603 ; between sides of the transformer, PHASE_OFFSET should be 2.
                      00604 ;
                      00605 ; Here's the timeline:
                      00606 ;
                      00607 ;                    REAL                               REAL
                      00608 ;                     ZC                                 ZC
                      00609 ;    |................|..|...............|....|....|.....|..|..............
                      00610 ;    |phase delay------->|               |phase delay------>|
                      00611 ;    |                   |working slices----->|    |        |working slices-->
                      00612 ;    |                                   |    |idle|
                      00613 ;   INT                                 INT
                      00614 ;   (ZC)                                (ZC)
                      00615 ;
                      00616 ; Of course, in the current design, there is no phase shift across
                      00617 ; the transformer, so we'd have the trivial case of PHASE_OFFSET=2 (2 just to
                      00618 ; allow a little fudge room with the free-running slice timer which is not
                      00619 ; *quite* an even factor of the half-wave time):
                      00620 ;
                      00621 ;    REAL                         REAL
                      00622 ;     ZC                           ZC
                      00623 ;    .|..|....................|....|..|.................|
                      00624 ;     |->|                    |    |->|                 |
                      00625 ;     |  |working slices----->|    |  |working slices-->|
                      00626 ;     |  |                    |idle|  |                 |
                      00627 ;    INT                          INT
                      00628 ;
                      00629 ; Since the free-running slice timer isn't exactly in sync with the ZC timing,
                      00630 ; we'll start our working slices some variable fraction of 1/260th of a half-cycle
                      00631 ; each time.  This will cause a "wobble" in brightness level of not more than 
                      00632 ; 1/260th brightness level (something less than one brightness increment), which
                      00633 ; ought to be difficult or impossible to notice by looking at an incandescent
                      00634 ; light load.  This is one reason why PHASE_OFFSET should be set to allow 1-2
                      00635 ; idle slices before we start turning on SSRs.
                      00636 ;
                      00637 ; On ZC interrupt, we set CUR_PRE to PHASE_OFFSET and set <PRECYC>.
                      00638 ; On TMR2 interrupt, if SSR_STATE<PRECYC>, decrement CUR_PRE.
                      00639 ;   if zero, clear SSR_STATE<PRECYC>, set CUR_SLICE to 256, set <INCYC>,<DIM_START>.
                      00640 ;   if SSR_STATE<INCYC>, decrement CUR_SLICE; if zero, set DIM_END, clr INCYC; else set SLICE_UPD
                      00641 ; 
                      00642 ; In main polling loop:
                      00643 ;   if DIM_START: turn on "on" SSRs, clear DIM_START
                      00644 ;   if SLICE_UPD: turn on SSR == CUR_SLICE for SSRs with SSRDIM set; clear SLICE_UPD
                      00645 ;   if DIM_END:   turn off all except SSR_ON, clear DIM_END
                      00646 ;
                      00647 ; PRECYC INCYC SLICE_UPD  CUR_PRE CUR_SLICE
                      00648 ;    0     x       x         x       x
                      00649 ;    1     x       x         4       x       <--zc
                      00650 ;    1     x       x         3       x
                      00651 ;    1     x       x         2       x
                      00652 ;    1     x       x         1       x
                      00653 ;    0     1     1-->0       0      255      SSR@255/on turned on
                      00654 ;    0     1     1-->0       0      254      SSR@254    turned on
                      00655 ; ...
                      00656 ;    0     1     1-->0       0       2       SSR@2     turned on
                      00657 ;    0     1     1-->0       0       1       SSR@1     turned on
                      00658 ;    0     0     1-->0       0       0       all non-on turned off
                      00659 ;    0     0       0         0       0       idle...
                      00660 ; ...
                      00661 ;    1     0       0         4       0       <--zc
                      00662 ; 
                      00663 ;
                      00664 ;=============================================================================
                      00665 ; HARDWARE DESCRIPTION
                      00666 ;-----------------------------------------------------------------------------
                      00667 ;
                      00668 ; The 48-channel and 24-channel boards use the 18F4685 microcontroller 
                      00669 ; (LUMOS_ARCH == "4685"), while the 4-channel boards use the smaller
                      00670 ; 18F14K50 chip (LUMOS_ARCH == "14K50").
                      00671 ;
                      00672 ;  PIC18F4685 Microcontroller I/O pin assignments:
                      00673 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00674 ; 24-CH   48-CH          ________   _________         48-CH   24-CH
                      00675 ; BOARD:  BOARD:        |o       \_/         |        BOARD:  BOARD:
                      00676 ; /RESET  /RESET -->  1 | /MCLR RE3  PGD RB7 | 40 --> /PWRCTL /PWRCTL
                      00677 ; /SSR23  /SSR16 <--  2 | RA0        PGC RB6 | 39 <-- /OPTION /OPTION
                      00678 ; /SSR22  /SSR14 <--  3 | RA1        PGM RB5 | 38 --> /SSR15  /SSR00
                      00679 ; /SSR21  /SSR12 <--  4 | RA2            RB4 | 37 --> /SSR13  /SSR01
                      00680 ; /SSR20  /SSR10 <--  5 | RA3            RB3 | 36 --> /SSR11  /SSR02
                      00681 ; /SSR19  /SSR08 <--  6 | RA4       INT2 RB2 | 35 --> /SSR09  /SSR03
                      00682 ; ACT    ACT*LED <--  7 | RA5       INT1 RB1 | 34 --> /SSR07  /SSR04 _
                      00683 ; GRN    GRN LED <--  8 | RE0       INT0 RB0 | 33 <-- ZC INT  -->  T/R
                      00684 ; YEL    YEL LED <--  9 | RE1            VDD | 32 --- +5V       
                      00685 ; RED    RED LED <-- 10 | RE2            VSS | 31 --- GND      
                      00686 ;            +5V --- 11 | VDD            RD7 | 30 --> /SSR17  /SSR05
                      00687 ;            GND --- 12 | VSS            RD6 | 29 --> /SSR06  /SSR06
                      00688 ;           xtal --- 13 | OSC            RD5 | 28 --> /SSR05  /SSR07
                      00689 ;             +----- 14 | OSC            RD4 | 27 --> /SSR18  /SSR08
                      00690 ; /SSR18  /SSR04 <-- 15 | RC0         RX RC7 | 26 <-- Serial RxD
                      00691 ; /SSR17  /SSR19 <-- 16 | RC1         TX RC6 | 25 --> Serial TxD
                      00692 ; /SSR16  /SSR03 <-- 17 | RC2            RC5 | 24 --> /SSR02  /SSR09
                      00693 ; /SSR15  /SSR01 <-- 18 | RC3            RC4 | 23 --> /SSR00  /SSR10
                      00694 ; /SSR14  /SSR23 <-- 19 | RD0            RD3 | 22 --> /SSR22  /SSR11
                      00695 ; /SSR13  /SSR21 <-- 20 | RD1            RD2 | 21 --> /SSR20  /SSR12
                      00696 ;                       |____________________|
                      00697 ;                  _
                      00698 ; *pin 7 goes to T/R on the slave controller instead of the LED.
                      00699 ;
                      00700 ;
                      00701 ; The outputs from the controller board are on a 26-bin ribbon cable
                      00702 ; header with this pinout:
                      00703 ;
                      00704 ;                               _________
                      00705 ;                       SSR23  |  1 |  2 |  SSR00
                      00706 ;                       SSR22  |  3 |  4 |  SSR01
                      00707 ;                       SSR21  |  5 |  6 |  SSR02
                      00708 ;                       SSR20  |  7 |  8 |  SSR03
                      00709 ;                       SSR19  |  9 | 10 |  SSR04
                      00710 ;                       SSR18  | 11 | 12 |  SSR05
                      00711 ;                       SSR17  | 13 | 14 |  SSR06
                      00712 ;                         GND  | 15 | 16 |  +5V
                      00713 ;                       SSR16  | 17 | 18 |  SSR07
                      00714 ;                       SSR15  | 18 | 20 |  SSR08
                      00715 ;                       SSR14  | 21 | 22 |  SSR09
                      00716 ;                       SSR13  | 23 | 24 |  SSR10
                      00717 ;                       SSR12  |_25_|_26_|  SSR11
                      00718 ;
                      00719 ;
                      00720 ; Communications are via RS-485 serial network using an 8p8c modular
                      00721 ; connector with this pinout:
                      00722 ;
                      00723 ;  ________
                      00724 ; |12345678|    1- Return Data Y (+)    5- Data A (+)
                      00725 ; |        |    2- Return Data Z (-)    6- Cable Check OUT
                      00726 ; |___  ___|    3- Cable Check IN       7- Data GND 
                      00727 ;    |__|       4- Data B (-)           8- Return Data GND
                      00728 ;
                      00729 ; CC is a cable check indicator.  A signal is sent out by the host on pin 3, with the
                      00730 ; expectation that each controller will pass it on down the cable to the terminator
                      00731 ; which connects it to pin 6 and sends the signal back through the controllers to the
                      00732 ; host again.  Note that the controllers themselves do nothing with the CC signal other
                      00733 ; than pass those pins straight through; it is available however for something at the 
                      00734 ; host side to verify cable integrity.
                      00735 ;
                      00736 ; Data A/B is the twisted pair for the RS-485 data between the host PC and controllers.
                      00737 ;
                      00738 ; Return Data Y/Z is only implemented if a full duplex RS-485 network is implemented
                      00739 ; (an option for some boards but not the default case).  This is dedicated for controllers
                      00740 ; sending data back to the host PC.  If using half-duplex, the same data pair is used
                      00741 ; for both sending and receiving, and the host PC needs to switch to receive mode
                      00742 ; when a controller is asked to report back.
                      00743 ;
                      00744 ;
                      00745 ; Termination at the end of the loop should be provided with a plug
                      00746 ; wired as:
                      00747 ; 
                      00748 ;     3 ------------ 6
                      00749 ; 
                      00750 ;     1 ---/\/\/---- 2 <--(if full duplex)
                      00751 ;         120 ohms
                      00752 ; 
                      00753 ;     4 ---/\/\/---- 5
                      00754 ;         120 ohms
                      00755 ;------------------------------------------------------------------------ 
                      00756 ;
                      00757 ;  PIC18F14K50 Microcontroller I/O pin assignments:
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00758 ;
                      00759 ;         4-CH           ________   _________         4-CH
                      00760 ;         BOARD:        |o       \_/         |        BOARD: 
                      00761 ;            +5V ---  1 | Vdd            Vss | 20 --- GND    
                      00762 ;           XTAL ---  2 | OSC1       PGD RA0 | 19 --> /PWRCTL
                      00763 ;           XTAL ---  3 | OSC2       PGC RA1 | 18 <-- /OPTION
                      00764 ;          /MCLR -->  4 | /MCLR         Vusb | 17 
                      00765 ;    /A  ACT LED <->  5 | RC5            RC0 | 16 --> /SSR3
                      00766 ;        GRN LED <--  6 | RC4            RC1 | 15 --> /SSR2
                      00767 ;    /C  YEL LED <->  7 | RC3            RC2 | 14 --> /SSR1
                      00768 ;    /B  RED LED <->  8 | RC6            RB4 | 13 --> /SSR0
                      00769 ;    /D          -->  9 | RC7        RxD RB5 | 12 <-- RxD
                      00770 ;            TxD <-- 10 | RB7 TxD        RB6 | 11 --> T/R
                      00771 ;                       |____________________|
                      00772 ;
                      00773 ;
                      00774 ;
                      00775 ; ========================================================================
                      00776 ; PROGRAM MEMORY MAP
                      00777 ; ______________________________________________________________________________
                      00778 ;
                      00779 ; 14K50 4685    _________________ ___
                      00780 ; $00000 $00000 | RESET Vector    | V_RST
                      00781 ; $00007 $00007 |_________________|___
                      00782 ; $00008 $00008 | High Int Vector | V_INT_H
                      00783 ; $00017 $00017 |_________________|___
                      00784 ; $00018 $00018 | Low Int Vector  | V_INT_L
                      00785 ; $0001F $0001F |_________________|
                      00786 ; $00020 $00020 |/////////////////|
                      00787 ; $000FF $000FF |/////////////////|___
                      00788 ; $00100 $00100 | Boot code       | _BOOT
                      00789 ;               |.................|___
                      00790 ;               | Interrupt hand- | _INT
                      00791 ;               |  lers           |      
                      00792 ;               |/////////////////|
                      00793 ; $007FF $007FF |/////////////////|___
                      00794 ; $00800 $00800 | Mainline code   | _MAIN
                      00795 ;               |.................|___
                      00796 ;           ??? | Device init     | LUMOS_CODE_INIT
                      00797 ;               |_________________|___
                      00798 ;           ??? | Serial I/O      | _SIO_CODE
                      00799 ;               | Module          |
                      00800 ;               |_________________|___
                      00801 ;               |/////////////////|
                      00802 ;               |/////////////////|
                      00803 ;               |/////////////////|
                      00804 ;               |/////////////////|
                      00805 ;               |/////////////////|___
                      00806 ; $02E00 $14000 | EEPROM defaults | _MAIN_EEPROM_TBL
                      00807 ; $02EFF $14FFF |_________________|___
                      00808 ; $02F00 $15000 |Serial I/O Mod   | _SIO_LOOKUP_TABLES
                      00809 ;               |lookup tables    |
                      00810 ;        $150FF |_________________|___
                      00811 ;        $15100 |                 |
                      00812 ;               |                 |
                      00813 ; $02FEF $16FEF |_________________|___
                      00814 ; $02FF0 $16FF0 |System Mfg Data  | _SYSTEM_MFG_DATA
                      00815 ; $02FFF $16FFF |_________________|___
                      00816 ; $03000 $17000 |Flash Loader Code| _FLASH_UPDATE_LOADER
                      00817 ; $03FFF $17FFF |_________________|___
                      00818 ;               |/////////////////|
                      00819 ;               |/////////////////|
                      00820 ;$1FFFFF$1FFFFF |/////////////////|___
                      00821 ;
                      00822  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00014000            00823 _MAIN_EEPROM_TBL        EQU     0x14000
  00016FF0            00824 _SYSTEM_MFG_DATA        EQU     0x16FF0
                      00825  ELSE
                      00826   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00827 _MAIN_EEPROM_TBL        EQU     0x02E00
                      00828 _SYSTEM_MFG_DATA        EQU     0x02FE0
                      00829   ELSE
                      00830    ERROR "Invalid architecture switch"
                      00831   ENDIF
                      00832  ENDIF
                      00833 ;
                      00834 ;
                      00835 ; ========================================================================
                      00836 ; DATA MEMORY MAP (4685)
                      00837 ;
                      00838 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00839 ; $000 | global state,   | _ADATA            BANK 0
                      00840 ; $05F | ISR data, etc.  |                (ACCESS AREA)
                      00841 ;      |.................|...............................
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00842 ; $060 |                 |                   
                      00843 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00844 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00845 ;      | ring buffer     |
                      00846 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00847 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00848 ;      | ring buffer     |
                      00849 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00850 ; $300 | Serial I/O mod  | _SIO_VAR_DATA     BANK 3
                      00851 ;      | variable space  |
                      00852 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00853 ; $400 | SSR state data  | _SSR_DATA         BANK 4
                      00854 ;      |                 |
                      00855 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00856 ; $500 | Parser buffer   | _MAINDATA         BANK 5
                      00857 ;      |.................|
                      00858 ; $5?? |                 |
                      00859 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00860 ; $600 | Stored sequences| _SEQ_DATA         BANK 6
                      00861 ;      | (1792 bytes)    |
                      00862 ;              .
                      00863 ;              .                 
                      00864 ;              .                
                      00865 ;      |                 |
                      00866 ;      |                 |
                      00867 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00868 ; $D00 |                 |                   BANK D
                      00869 ;      | CAN special     |
                      00870 ;      | function        |___ ___ ___ ___ ___ ___ ___ ___
                      00871 ; $E00 | registers       |                   BANK E
                      00872 ;      | (not used for   |
                      00873 ;      | Lumos)          |___ ___ ___ ___ ___ ___ ___ ___
                      00874 ; $F00 |                 |                   BANK F
                      00875 ;      |                 |
                      00876 ; $F5F |.................|...............................
                      00877 ; $F60 | Special Function|                (ACCESS AREA)
                      00878 ;      | (device) regis- |
                      00879 ;      | ters            |
                      00880 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00881 ;
                      00882 ; ------------------------------------------------------------------------
                      00883 ; DATA MEMORY MAP (14K50)
                      00884 ;
                      00885 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00886 ; $000 | global state,   | _ADATA            BANK 0
                      00887 ; $022 | ISR data, etc.  |                (ACCESS AREA)
                      00888 ;      |.................|
                      00889 ; $023 |                 |                   
                      00890 ;      |                 |                   
                      00891 ; $05F |_________________|...............................
                      00892 ; $060 | SSR state data  | _SSR_DATA         BANK 0
                      00893 ;      |                 |                (BANKED AREA)
                      00894 ; $07F |_________________|
                      00895 ; $088 | Parser buffer   | _MAINDATA
                      00896 ; $0E1 |.................|
                      00897 ; $0E2 |    [unused]     |
                      00898 ; $0E3 |_________________|
                      00899 ; $0E4 | Serial I/O mod  | _SIO_VAR_DATA
                      00900 ;      | variable space  |
                      00901 ; $0FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00902 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00903 ;      | ring buffer     |
                      00904 ; $1FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00905 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00906 ;      | ring buffer     |
                      00907 ; $2FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00908 ; $300 |/////////////////|///////////////////////////////
                      00909 ;      |/////////////////|
                      00910 ;              .
                      00911 ;              .                 
                      00912 ;              .                DOES NOT EXIST
                      00913 ;      |/////////////////|
                      00914 ;      |/////////////////|
                      00915 ; $EFF |/////////////////|///////////////////////////////
                      00916 ; $F00 |/////////////////|                   
                      00917 ; $F52 |/////////////////|
                      00918 ; $F53 | Special Function|
                      00919 ; $F5F |.................|...............................
                      00920 ; $F60 | Special Function|                (ACCESS AREA)
                      00921 ;      | (device) regis- |
                      00922 ;      | ters            |
                      00923 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00924 ;
                      00925 ; ========================================================================
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00926 ; EEPROM MEMORY
                      00927 ;
                      00928 ;
                      00929 ;       ______________            ______________ 
                      00930 ; $000 |_0xFF_________|     $010 | Saved        |
                      00931 ; $001 |_Baud_Rate____|     $011 | Sequence     |
                      00932 ; $002 |_Device_ID____|     $012 | Storage      |
                      00933 ; $003 | Phase     MSB|     $013 |       |      |
                      00934 ; $004 |_Offset____LSB|     $014 |       |      |
                      00935 ; $005 |_DMX_Slot__MSB|     $015 |       |      |
                      00936 ; $006 |_DMX_Slot__LSB|       .          .
                      00937 ; $007 |_Sensor_cfg___|       .          .
                      00938 ; $008 |______________|       .          .
                      00939 ; $009 |______________|     $3F9 |       |      |
                      00940 ; $00A |______________|     $3FA |       |      |
                      00941 ; $00B |______________|     $3FB | (1008 |      |
                      00942 ; $00C |______________|     $3FC | bytes)|      |
                      00943 ; $00D |______________|     $3FD |       |      |
                      00944 ; $00E |______________|     $3FE |       |      |
                      00945 ; $00F |_0x42_________|     $3FF |_______V______|
                      00946 ;
                      00947 ;
                      00948 __SYS__ CODE_PACK       _SYSTEM_MFG_DATA
016FF0 A4             00949 SYS_SNH DE      0xA4            ; Device serial number
016FF1 45             00950 SYS_SNL DE      0x45
                      00951 
                      00952 _EEPROM CODE_PACK       0xF00000
F00000 FF             00953         DE      0xFF            ; 000: 0xFF constant
F00001 06             00954         DE      SIO_19200       ; 001: baud rate default
F00002 00             00955         DE      0x00            ; 002: default device ID
F00003 00 02          00956         DE      0x00, 0x02      ; 003: default phase offset
F00005 00 00          00957         DE      0x00, 0x00      ; 005: default DMX=0 (disabled, ch=1)
F00007 00             00958         DE      0x00            ; 007: default sensors (disabled)
F00008 00 00          00959         DE      0x00, 0x00      ; 008: reserved
F0000A 00 00 00       00960         DE      0x00, 0x00, 0x00; 00A: reserved
F0000D 00 00          00961         DE      0x00, 0x00      ; 00D: reserved
F0000F 42             00962         DE      0x42            ; 00F: sentinel
                      00963 
  00000000            00964 EE_START        EQU     0x000
  00000001            00965 EE_BAUD         EQU     0x001
  00000002            00966 EE_DEV_ID       EQU     0x002
  00000003            00967 EE_PHASE_H      EQU     0x003
  00000004            00968 EE_PHASE_L      EQU     0x004
  00000005            00969 EE_DMX_H        EQU     0x005
  00000006            00970 EE_DMX_L        EQU     0x006
  00000007            00971 EE_SENSOR_CFG   EQU     0x007
  00000008            00972 EE_RESERVED_8   EQU     0x008
  00000009            00973 EE_RESERVED_9   EQU     0x009
  0000000A            00974 EE_RESERVED_A   EQU     0x00A
  0000000B            00975 EE_RESERVED_B   EQU     0x00B
  0000000C            00976 EE_RESERVED_C   EQU     0x00C
  0000000D            00977 EE_RESERVED_D   EQU     0x00D
  0000000E            00978 EE_RESERVED_E   EQU     0x00E
  0000000F            00979 EE_END          EQU     0x00F
                      00980 
                      00981 _EEPROM_DEFS_TBL CODE_PACK _MAIN_EEPROM_TBL
014000                00982 DEFAULT_TBL:
014000 FF             00983         DB      0xFF                    ; $000: constant $FF
014001 06             00984         DB      SIO_19200               ; $001: 19200 baud
014002 00             00985         DB      0x00                    ; $002: device ID=0
014003 00 02          00986         DB      0x00, 0x02              ; $003: phase offset=2
014005 00 00          00987         DB      0x00, 0x00              ; $005: DMX slot=0 (disabled, ch=1)
014007 00             00988         DB      0x00                    ; $007: no sensors configured
014008 00 00 00       00989         DB      0x00, 0x00, 0x00        ; $008-$00A
01400B 00 00 00 00    00990         DB      0x00, 0x00, 0x00, 0x00  ; $00B-$00E
01400F 42             00991         DB      0x42                    ; $00F: constant $42
                      00992 
  00000010            00993 EEPROM_SETTINGS_LEN     EQU     .16
  00000010            00994 EEPROM_USER_START       EQU     0x010   
  000003FF            00995 EEPROM_USER_END         EQU     0x3FF
                      00996 ;
                      00997 ; ========================================================================
                      00998 ; DEVICES USED
                      00999 ;
                      01000 ; TMR0    120 Hz interrupt source (for boards without zero-crossing detector)
                      01001 ; TMR1
                      01002 ; TMR2    Dimmer slice timer (1/260 of a 120 Hz half-cycle)
                      01003 ; TMR3    Break detector for DMX reception
                      01004 ; UART    SIO module
                      01005 ;=============================================================================
                      01006 ;
                      01007 ;
                      01008 ;-----------------------------------------------------------------------------
                      01009 ; I/O PORT ASSIGNMENTS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01010 ;-----------------------------------------------------------------------------
                      01011 ;
                      01012 ;          7   6   5   4   3   2   1   0
                      01013 ; PORT RA --- --- ACT /08 /10 /12 /14 /16    48-Board AC/DC master
                      01014 ; PORT RA --- --- T/R /08 /10 /12 /14 /16    48-Board AC/DC slave
                      01015 ; PORT RA --- --- ACT /19 /20 /21 /22 /23    24-Board DC    standalone
                      01016 ;          <OSC>   O   O   O   O   O   O
                      01017 ; PORT RA /////// --- --- --- /// /OP /PS     4-Board DC
                      01018 ;         ///////  <OSC>   I  ///  I   O
                      01019 ;
                      01020 ;          7   6   5   4   3   2   1   0
                      01021 ; PORT RB /PS /OP /15 /13 /11 /09 /07 ---    48-Board AC/DC master
                      01022 ;          O   I   O   O   O   O   O  INT
                      01023 ; PORT RB /PS --- /15 /13 /11 /09 /07 ---    48-Board AC/DC slave
                      01024 ;          O   O   O   O   O   O   O  INT
                      01025 ; PORT RB /PS /OP /00 /01 /02 /03 /04 T/R    24-Board DC    standalone
                      01026 ;          O   I_  O   O   O   O   O   O 
                      01027 ; PORT RB --- T/R --- /00 ///////////////     4-Board DC
                      01028 ;         <O>  O  <I>  O  ///////////////
                      01029 ;
                      01030 ;          7   6   5   4   3   2   1   0
                      01031 ; PORT RC --- --- /02 /00 /01 /03 /19 /04    48-Board AC/DC master/slave
                      01032 ; PORT RC --- --- /09 /10 /15 /16 /17 /18    24-Board DC    standalone
                      01033 ;          <I/O>   O   O   O   O   O   O
                      01034 ; PORT RC /D  RED ACT GRN YEL /01 /02 /03     4-Board DC
                      01035 ;          I   O   O   O   O   O   O   O
                      01036 ;
                      01037 ;          7   6   5   4   3   2   1   0
                      01038 ; PORT RD /17 /06 /05 /18 /22 /20 /21 /23    48-Board AC/DC master/slave
                      01039 ; PORT RD /05 /06 /07 /08 /11 /12 /13 /14    24-Board DC    standalone
                      01040 ;         ///////////////////////////////     4-Board DC
                      01041 ;          O   O   O   O   O   O   O   O
                      01042 ;
                      01043 ;          7   6   5   4   3   2   1   0
                      01044 ; PORT RE --- --- --- --- --- RED YEL GRN    All boards
                      01045 ;         ///////////////////////////////     4-Board DC
                      01046 ;                              O   O   O
                      01047 ;
                      01048 ;------------------------------------------------------------------------------
                      01049 ; Significant Registers (ACCESS BANK)
                      01050 ;------------------------------------------------------------------------------
                      01051 ;
                      01052 ;                     ___7______6______5______4______3______2______1______0__
                      01053 ; ISR_TMPL_STATUS    |                                                       |
                      01054 ;                    | Temporary storage for STATUS register in low-pri ISR  |
                      01055 ;                    |______|______|______|______|______|______|______|______|
                      01056 ; ISR_TMPL_BSR       |                                                       |
                      01057 ;                    | Temporary storage for BSR register in low-priority ISR|
                      01058 ;                    |______|______|______|______|______|______|______|______|
                      01059 ; ISR_TMPL_WREG      |                                                       |
                      01060 ;                    | Temporary storage for W register in low-priority ISR  |
                      01061 ;                    |______|______|______|______|______|______|______|______|
                      01062 ; MY_ADDRESS         |                           |                           |
                      01063 ;                    |                           |       Unit address        |
                      01064 ;                    |______|______|______|______|______|______|______|______|
                      01065 ; PHASE_OFFSETH      |                                                       |
                      01066 ;                    |               Phase offset value (MSB)                |
                      01067 ;                    |______|______|______|______|______|______|______|______|
                      01068 ; PHASE_OFFSETL      |                                                       |
                      01069 ;                    |               Phase offset value (LSB)                |
                      01070 ;                    |______|______|______|______|______|______|______|______|
                      01071 ; SSR_STATE          |      |      |SLICE |PRIV_ |SLEEP |DRAIN |PRE_  |TEST_ |
                      01072 ;                    |INCYC |PRECYC| _UPD | MODE |_MODE |_TR   |PRIV  |MODE  |
                      01073 ;                    |______|______|______|______|______|______|______|______|
                      01074 ; SSR_STATE2         |TEST_ |TEST_ |TEST_ |ALL_  |PRIV_ |INHIBI|MSB_  |LITER |
                      01075 ;                    |PAUSE |UPD   |BUTTON|OFF   |FORBID|T_OUTP|ESC   |AL_ESC|
                      01076 ;                    |______|______|______|______|______|UT____|______|______|
                      01077 ; DMX_SLOTH          |DMX_EN|DMX_  |DMX_  |                           |DMX Sl|
                      01078 ;                    |      |SPEED |FRAME |                           |ot MSB|
                      01079 ;                    |______|______|______|______|______|______|______|______|
                      01080 ; DMX_SLOTL          |                                                       |
                      01081 ;                    |       Starting DMX Slot Number - 1 (low 8 bits)       |
                      01082 ;                    |______|______|______|______|______|______|______|______|
                      01083 ; YY_STATE           |                                                       |
                      01084 ;                    |                      Parser State                     |
                      01085 ;                    |______|______|______|______|______|______|______|______|
                      01086 ; YY_COMMAND         |                                                       |
                      01087 ;                    |                      Command Code                     |
                      01088 ;                    |______|______|______|______|______|______|______|______|
                      01089 ; YY_CMD_FLAGS       |                                                       |
                      01090 ;                    |               Command-specific Flag Bits              |
                      01091 ;                    |______|______|______|______|______|______|______|______|
                      01092 ; YY_DATA            |                                                       |
                      01093 ;                    |                      Command Data                     |
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01094 ;                    |______|______|______|______|______|______|______|______|
                      01095 ; YY_LOOKAHEAD_MAX   |                                                       |
                      01096 ;                    |               Maximum length for look-ahead           |
                      01097 ;                    |______|______|______|______|______|______|______|______|
                      01098 ; YY_LOOK_FOR        |                                                       |
                      01099 ;                    |               Sentinel value to search for            |
                      01100 ;                    |______|______|______|______|______|______|______|______|
                      01101 ; YY_BUF_IDX         |                                                       |
                      01102 ;                    |     Offset in YY_BUFFER where we will write next      |
                      01103 ;                    |______|______|______|______|______|______|______|______|
                      01104 ; YY_NEXT_STATE      |                                                       |
                      01105 ;                    |     State to transition to when YY_LOOK_FOR is found  |
                      01106 ;                    |______|______|______|______|______|______|______|______|
                      01107 ; YY_YY              |                                                       |
                      01108 ;                    |     General-purpose storage for use inside commands   |
                      01109 ;                    |______|______|______|______|______|______|______|______|
                      01110 ; LAST_ERROR         |                                                       |
                      01111 ;                    |  Last error code encountered (cleared when reported)  |
                      01112 ;                    |______|______|______|______|______|______|______|______|
                      01113 ; CUR_PREH           |                                                       |
                      01114 ;                    |         Pre-cycle count-down ticks left (MSB)         |
                      01115 ;                    |______|______|______|______|______|______|______|______|
                      01116 ; CUR_PRE            |                                                       |
                      01117 ;                    |         Pre-cycle count-down ticks left (LSB)         |
                      01118 ;                    |______|______|______|______|______|______|______|______|
                      01119 ; CUR_SLICE          |                                                       |
                      01120 ;                    |      Slice number within active portion of cycle      |
                      01121 ;                    |______|______|______|______|______|______|______|______|
                      01122 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01123 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01124 ;                    |______|______|______|______|______|______|______|______|
                      01125 ; OPTION_DEBOUNCE    |                                                       |
                      01126 ;                    |      Counter to debounce OPTION button presses        |
                      01127 ;                    |______|______|______|______|______|______|______|______|
                      01128 ; OPTION_HOLD        |                                                       |
                      01129 ;                    |      Counter for how long OPTION button is held       |
                      01130 ;                    |______|______|______|______|______|______|______|______|
                      01131 ; TEST_CYCLE         |                                                       |
                      01132 ;                    |        Count-down of ZC cycles until next step        |
                      01133 ;                    |______|______|______|______|______|______|______|______|
                      01134 ; TEST_SSR           |             |                                         |
                      01135 ;                    |             |  current SSR being tested               |
                      01136 ;                    |______|______|______|______|______|______|______|______|
                      01137 ; AUTO_OFF_CTRH      |                                                       |
                      01138 ;                    |         countdown register until auto-power-off (MSB) |
                      01139 ;                    |______|______|______|______|______|______|______|______|
                      01140 ; AUTO_OFF_CTRL      |                                                       |
                      01141 ;                    |         countdown register until auto-power-off (LSB) |
                      01142 ;                    |______|______|______|______|______|______|______|______|
                      01143 ; I                  |                                                       |
                      01144 ;                    |      General-purpose local counter variable           |
                      01145 ;                    |______|______|______|______|______|______|______|______|
                      01146 ; J                  |                                                       |
                      01147 ;                    |      General-purpose local counter variable           |
                      01148 ;                    |______|______|______|______|______|______|______|______|
                      01149 ; K                  |                                                       |
                      01150 ;                    |      General-purpose local counter variable           |
                      01151 ;                    |______|______|______|______|______|______|______|______|
                      01152 ; KK                 |                                                       |
                      01153 ;                    |      General-purpose local counter variable           |
                      01154 ;                    |______|______|______|______|______|______|______|______|
                      01155 ; TR_I               |                                                       |
                      01156 ;                    |      T/R delay timer delay counter                    |
                      01157 ;                    |______|______|______|______|______|______|______|______|
                      01158 ;
                      01159 ;
                      01160 ;------------------------------------------------------------------------------
                      01161 ; (SSR_DATA_BANK)
                      01162 ;------------------------------------------------------------------------------
                      01163 ;
                      01164 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      01165 ;
                      01166 ;                     ___7______6______5______4______3______2______1______0__
                      01167 ; SSR_00_VALUE       |                                                       |
                      01168 ;                    | Brightness value of SSR #00 (00=off, ... FF=fully on) |
                      01169 ;                    |______|______|______|______|______|______|______|______|
                      01170 ;                    |                                                       |
                      01171 ;                    | Brightness value of SSR #01 (00=off, ... FF=fully on) |
                      01172 ;                    |______|______|______|______|______|______|______|______|
                      01173 ;                                                .
                      01174 ;                                                .
                      01175 ;                     ___________________________.___________________________
                      01176 ;                    |                                                       |
                      01177 ;                    | Brightness value of SSR #23 (00=off, ... FF=fully on) |
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01178 ;                    |______|______|______|______|______|______|______|______|
                      01179 ;                    |                                                       |
                      01180 ;                    | Brightness value of Green   (00=off, ... FF=fully on) |
                      01181 ;                    |______|______|______|______|______|______|______|______|
                      01182 ;                    |                                                       |
                      01183 ;                    | Brightness value of Yellow  (00=off, ... FF=fully on) |
                      01184 ;                    |______|______|______|______|______|______|______|______|
                      01185 ;                    |                                                       |
                      01186 ;                    | Brightness value of Red     (00=off, ... FF=fully on) |
                      01187 ;                    |______|______|______|______|______|______|______|______|
                      01188 ;                    | IF MASTER/STANDALONE:                                 |
                      01189 ;                    | Brightness value of Active  (00=off, ... FF=fully on) |
                      01190 ;                    |______|______|______|______|______|______|______|______|
                      01191 ; SSR_00_FLAGS       | FADE | FADE | FADE_|MAX_OF|      |      |      |      |
                      01192 ;                    | _UP  | _DOWN| CYCLE|F_TIME|      |      |      |      |
                      01193 ;                    |______|______|______|______|______|______|______|______|
                      01194 ;                                                .
                      01195 ;                                                .
                      01196 ;                     ___________________________.___________________________
                      01197 ; SSR_00_STEP        |                                                       |
                      01198 ;                    |          Brightness increment (0..255)                |
                      01199 ;                    |______|______|______|______|______|______|______|______|
                      01200 ;                                                .
                      01201 ;                                                .
                      01202 ;                     ___________________________.___________________________
                      01203 ; SSR_00_SPEED       |                                                       |
                      01204 ;                    |          Cycles between each step (0..255)            |
                      01205 ;                    |______|______|______|______|______|______|______|______|
                      01206 ;                                                .
                      01207 ;                                                .
                      01208 ;                     ___________________________.___________________________
                      01209 ; SSR_00_COUNTER     |                                                       |
                      01210 ;                    |          Cycles until next step (0..255)              |
                      01211 ;                    |______|______|______|______|______|______|______|______|
                      01212 ;                                                .
                      01213 ;                                                .
                      01214 ;                                                .                           
                      01215 ;
                      01216 ; SSR_STATE holds the execution state of the controller, including our
                      01217 ; main timing chain flags.
                      01218 ;
  00000007            01219 INCYC           EQU     7       ; 1-------  We are in a dimmer cycle now
  00000006            01220 PRECYC          EQU     6       ; -1------  We are in the pre-cycle countdown
  00000005            01221 SLICE_UPD       EQU     5       ; --1-----  Slice update needs to be done
  00000004            01222 PRIV_MODE       EQU     4       ; ---1----  We are in privileged (config) mode
  00000003            01223 SLEEP_MODE      EQU     3       ; ----1---  We are in sleep mode
  00000002            01224 DRAIN_TR        EQU     2       ; -----1--  Need to drain output queue then turn off transmitter
  00000001            01225 PRE_PRIV        EQU     1       ; ------1-  Entering privileged mode
  00000000            01226 TEST_MODE       EQU     0       ; -------1  In self-test mode
                      01227 ;
                      01228 ; SSR_STATE2 flags:
                      01229 ;
  00000007            01230 TEST_PAUSE      EQU     7       ; 1-------  We're pausing the test mode
  00000006            01231 TEST_UPD        EQU     6       ; -1------  Time to update the test count-down timer
  00000005            01232 TEST_BUTTON     EQU     5       ; --1-----  Waiting for button release in test mode
  00000004            01233 ALL_OFF         EQU     4       ; ---1----  All SSRs are currently completely off
  00000003            01234 PRIV_FORBID     EQU     3       ; ----1---  Forbidden to enter privileged mode again
  00000002            01235 INHIBIT_OUTPUT  EQU     2       ; -----1--  Forbid any further output
  00000001            01236 MSB_ESC         EQU     1       ; ------1-  MSB Escape pending
  00000000            01237 LITERAL_ESC     EQU     0       ; -------1  Literal Escape pending
                      01238 
                      01239 ; YY_CMD_FLAGS holds various command flag bits
                      01240 ;
  00000007            01241 YCF_RAMP_CYCLE  EQU     7       ; 1-------  Ramp should cycle now
                      01242                                 ; -XXXXXXX  Unassigned
                      01243 ;
                      01244 ; DMX_SLOTH contains these flags and the high-order bit of the DMX channel
                      01245 ;
  00000007            01246 DMX_EN          EQU     7       ; 1-------  DMX mode enabled
  00000006            01247 DMX_SPEED       EQU     6       ; -1------  UART at DMX speed now
  00000005            01248 DMX_FRAME       EQU     5       ; --1-----  Start of frame detected
                      01249 ;                               ; ---XXXX-  Reserved
  00000000            01250 DMX_BIT8        EQU     0       ; -------1  MSB of DMX channel
                      01251 
                      01252 ;
                      01253 ; SSR_FLAGS words for each output show state information about those
                      01254 ; channels.
                      01255 ;
  00000007            01256 FADE_UP         EQU     7       ; 1-------  This channel is fading up
  00000006            01257 FADE_DOWN       EQU     6       ; -1------  This channel is fading down
  00000005            01258 FADE_CYCLE      EQU     5       ; --1-----  This channel is fading up<-->down
  00000004            01259 MAX_OFF_TIME    EQU     4       ; ---1----  Use maximum off-time in cycle
  00000080            01260 BIT_FADE_UP     EQU     0x80
  00000040            01261 BIT_FADE_DOWN   EQU     0x40
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000020            01262 BIT_FADE_CYCLE  EQU     0x20
  00000010            01263 BIT_MAX_OFF_TIME EQU    0x10
                      01264 ;
                      01265 ; TARGET_SSR has these flags:
                      01266 ;                     _______________________________________________________
                      01267 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01268 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01269 ;                    |______|______|______|______|______|______|______|______|
                      01270 ;
  00000007            01271 NOT_MY_SSR      EQU     7
  00000006            01272 INVALID_SSR     EQU     6               ; MUST be bit 6
  0000003F            01273 TARGET_SSR_MSK  EQU     0x3F
                      01274 
                      01275 
                      01276 ;
                      01277 ; CHIP-SPECIFIC PORT/PIN MAPPINGS
                      01278 ;
                      01279 ; 48-Channel board (master CPU)
                      01280 ;
                      01281                 IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      01282 PORT_RX          EQU    PORTC
                      01283 BIT_RX           EQU    7
                      01284 
                      01285 HAS_T_R          EQU    0
                      01286 HAS_ACTIVE       EQU    1
                      01287 HAS_SENSORS      EQU    1
                      01288 HAS_OPTION       EQU    1
                      01289 
                      01290 TRIS_SENS_A      EQU    TRISE   ; Sensor A == RED LED
                      01291 PORT_SENS_A      EQU    PORTE   ; Sensor A == RED LED
                      01292 BIT_SENS_A       EQU    2       ; Sensor A == RED LED
                      01293 TRIS_SENS_B      EQU    TRISE   ; Sensor B == GREEN LED
                      01294 PORT_SENS_B      EQU    PORTE   ; Sensor B == GREEN LED
                      01295 BIT_SENS_B       EQU    0       ; Sensor B == GREEN LED
                      01296 TRIS_SENS_C      EQU    TRISA   ; Sensor C == ACTIVE LED
                      01297 PORT_SENS_C      EQU    PORTA   ; Sensor C == ACTIVE LED
                      01298 BIT_SENS_C       EQU    5       ; Sensor C == ACTIVE LED
                      01299 TRIS_SENS_D      EQU    TRISE   ; Sensor D == YELLOW LED
                      01300 PORT_SENS_D      EQU    PORTE   ; Sensor D == YELLOW LED
                      01301 BIT_SENS_D       EQU    1       ; Sensor D == YELLOW LED
                      01302 
                      01303 PLAT_ACTIVE      EQU    LATA
                      01304 PLAT_RED         EQU    LATE
                      01305 PLAT_YELLOW      EQU    LATE
                      01306 PLAT_GREEN       EQU    LATE
                      01307 BIT_ACTIVE       EQU    5
                      01308 BIT_RED          EQU    2
                      01309 BIT_YELLOW       EQU    1
                      01310 BIT_GREEN        EQU    0
                      01311 
                      01312 PORT_OPTION      EQU    PORTB
                      01313 BIT_OPTION       EQU    6
                      01314 
                      01315 PLAT_PWR_ON      EQU    LATB
                      01316 BIT_PWR_ON       EQU    7
                      01317 
                      01318 PLAT_0           EQU    LATC
                      01319 PLAT_1           EQU    LATC
                      01320 PLAT_2           EQU    LATC
                      01321 PLAT_3           EQU    LATC
                      01322 PLAT_4           EQU    LATC
                      01323 PLAT_5           EQU    LATD
                      01324 PLAT_6           EQU    LATD
                      01325 PLAT_7           EQU    LATB
                      01326 PLAT_8           EQU    LATA
                      01327 PLAT_9           EQU    LATB
                      01328 PLAT_10          EQU    LATA
                      01329 PLAT_11          EQU    LATB
                      01330 PLAT_12          EQU    LATA
                      01331 PLAT_13          EQU    LATB
                      01332 PLAT_14          EQU    LATA
                      01333 PLAT_15          EQU    LATB
                      01334 PLAT_16          EQU    LATA
                      01335 PLAT_17          EQU    LATD
                      01336 PLAT_18          EQU    LATD
                      01337 PLAT_19          EQU    LATC
                      01338 PLAT_20          EQU    LATD
                      01339 PLAT_21          EQU    LATD
                      01340 PLAT_22          EQU    LATD
                      01341 PLAT_23          EQU    LATD
                      01342 
                      01343 BIT_0            EQU    4
                      01344 BIT_1            EQU    3
                      01345 BIT_2            EQU    5
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01346 BIT_3            EQU    2
                      01347 BIT_4            EQU    0
                      01348 BIT_5            EQU    5
                      01349 BIT_6            EQU    6
                      01350 BIT_7            EQU    1
                      01351 BIT_8            EQU    4
                      01352 BIT_9            EQU    2
                      01353 BIT_10           EQU    3
                      01354 BIT_11           EQU    3
                      01355 BIT_12           EQU    2
                      01356 BIT_13           EQU    4
                      01357 BIT_14           EQU    1
                      01358 BIT_15           EQU    5
                      01359 BIT_16           EQU    0
                      01360 BIT_17           EQU    7
                      01361 BIT_18           EQU    4
                      01362 BIT_19           EQU    1
                      01363 BIT_20           EQU    2
                      01364 BIT_21           EQU    1
                      01365 BIT_22           EQU    3
                      01366 BIT_23           EQU    0
                      01367 
                      01368 SSR_LIGHTS       EQU    24      ; first light ID (as opposed to SSR)
                      01369                 ELSE
                      01370                  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      01371 ;
                      01372 ; 48-Channel Board (slave CPU)
                      01373 ;
                      01374 PORT_RX           EQU   PORTC
                      01375 BIT_RX            EQU   7
                      01376 
                      01377 HAS_T_R           EQU   1
                      01378 HAS_ACTIVE        EQU   0
                      01379 HAS_SENSORS       EQU   0
                      01380 HAS_OPTION        EQU   0
                      01381 
                      01382 PLAT_T_R          EQU   LATA
                      01383 PORT_T_R          EQU   PORTA
                      01384 TRIS_T_R          EQU   TRISA
                      01385 BIT_T_R           EQU   5
                      01386 
                      01387 PLAT_RED          EQU   LATE
                      01388 PLAT_YELLOW       EQU   LATE
                      01389 PLAT_GREEN        EQU   LATE
                      01390 
                      01391 BIT_RED           EQU   2
                      01392 BIT_YELLOW        EQU   1
                      01393 BIT_GREEN         EQU   0
                      01394 
                      01395 PLAT_PWR_ON       EQU   LATB
                      01396 BIT_PWR_ON        EQU   7
                      01397 
                      01398 PLAT_0            EQU   LATC
                      01399 PLAT_1            EQU   LATC
                      01400 PLAT_2            EQU   LATC
                      01401 PLAT_3            EQU   LATC
                      01402 PLAT_4            EQU   LATC
                      01403 PLAT_5            EQU   LATD
                      01404 PLAT_6            EQU   LATD
                      01405 PLAT_7            EQU   LATB
                      01406 PLAT_8            EQU   LATA
                      01407 PLAT_9            EQU   LATB
                      01408 PLAT_10           EQU   LATA
                      01409 PLAT_11           EQU   LATB
                      01410 PLAT_12           EQU   LATA
                      01411 PLAT_13           EQU   LATB
                      01412 PLAT_14           EQU   LATA
                      01413 PLAT_15           EQU   LATB
                      01414 PLAT_16           EQU   LATA
                      01415 PLAT_17           EQU   LATD
                      01416 PLAT_18           EQU   LATD
                      01417 PLAT_19           EQU   LATC
                      01418 PLAT_20           EQU   LATD
                      01419 PLAT_21           EQU   LATD
                      01420 PLAT_22           EQU   LATD
                      01421 PLAT_23           EQU   LATD
                      01422 
                      01423 BIT_0             EQU   4
                      01424 BIT_1             EQU   3
                      01425 BIT_2             EQU   5
                      01426 BIT_3             EQU   2
                      01427 BIT_4             EQU   0
                      01428 BIT_5             EQU   5
                      01429 BIT_6             EQU   6
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01430 BIT_7             EQU   1
                      01431 BIT_8             EQU   4
                      01432 BIT_9             EQU   2
                      01433 BIT_10            EQU   3
                      01434 BIT_11            EQU   3
                      01435 BIT_12            EQU   2
                      01436 BIT_13            EQU   4
                      01437 BIT_14            EQU   1
                      01438 BIT_15            EQU   5
                      01439 BIT_16            EQU   0
                      01440 BIT_17            EQU   7
                      01441 BIT_18            EQU   4
                      01442 BIT_19            EQU   1
                      01443 BIT_20            EQU   2
                      01444 BIT_21            EQU   1
                      01445 BIT_22            EQU   3
                      01446 BIT_23            EQU   0
                      01447 
                      01448 SSR_LIGHTS        EQU   24      ; first light ID (as opposed to SSR)
                      01449                  ELSE
                      01450                   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      01451 ;
                      01452 ; 24-Channel board (Standalone CPU)
                      01453 ;
                      01454 PORT_RX            EQU  PORTC
                      01455 BIT_RX             EQU  7
                      01456 
                      01457 HAS_T_R            EQU  1
                      01458 HAS_ACTIVE         EQU  1
                      01459 HAS_SENSORS        EQU  1
                      01460 HAS_OPTION         EQU  1
                      01461 
                      01462 TRIS_SENS_A        EQU  TRISE   ; Sensor A == RED LED
                      01463 PORT_SENS_A        EQU  PORTE   ; Sensor A == RED LED
                      01464 BIT_SENS_A         EQU  2       ; Sensor A == RED LED
                      01465 TRIS_SENS_B        EQU  TRISE   ; Sensor B == GREEN LED
                      01466 PORT_SENS_B        EQU  PORTE   ; Sensor B == GREEN LED
                      01467 BIT_SENS_B         EQU  0       ; Sensor B == GREEN LED
                      01468 TRIS_SENS_C        EQU  TRISA   ; Sensor C == ACTIVE LED
                      01469 PORT_SENS_C        EQU  PORTA   ; Sensor C == ACTIVE LED
                      01470 BIT_SENS_C         EQU  5       ; Sensor C == ACTIVE LED
                      01471 TRIS_SENS_D        EQU  TRISE   ; Sensor D == YELLOW LED
                      01472 PORT_SENS_D        EQU  PORTE   ; Sensor D == YELLOW LED
                      01473 BIT_SENS_D         EQU  1       ; Sensor D == YELLOW LED
                      01474 
                      01475 PLAT_T_R           EQU  LATB
                      01476 PORT_T_R           EQU  PORTB
                      01477 TRIS_T_R           EQU  TRISB
                      01478 BIT_T_R            EQU  0
                      01479 
                      01480 PLAT_ACTIVE        EQU  LATA
                      01481 PLAT_RED           EQU  LATE
                      01482 PLAT_YELLOW        EQU  LATE
                      01483 PLAT_GREEN         EQU  LATE
                      01484 BIT_ACTIVE         EQU  5
                      01485 BIT_RED            EQU  2
                      01486 BIT_YELLOW         EQU  1
                      01487 BIT_GREEN          EQU  0
                      01488 
                      01489 PORT_OPTION        EQU  PORTB
                      01490 BIT_OPTION         EQU  6
                      01491 
                      01492 PLAT_PWR_ON        EQU  LATB
                      01493 BIT_PWR_ON         EQU  7
                      01494 
                      01495 PLAT_0             EQU  LATB
                      01496 PLAT_1             EQU  LATB
                      01497 PLAT_2             EQU  LATB
                      01498 PLAT_3             EQU  LATB
                      01499 PLAT_4             EQU  LATB
                      01500 PLAT_5             EQU  LATD
                      01501 PLAT_6             EQU  LATD
                      01502 PLAT_7             EQU  LATD
                      01503 PLAT_8             EQU  LATD
                      01504 PLAT_9             EQU  LATC
                      01505 PLAT_10            EQU  LATC
                      01506 PLAT_11            EQU  LATD
                      01507 PLAT_12            EQU  LATD
                      01508 PLAT_13            EQU  LATD
                      01509 PLAT_14            EQU  LATD
                      01510 PLAT_15            EQU  LATC
                      01511 PLAT_16            EQU  LATC
                      01512 PLAT_17            EQU  LATC
                      01513 PLAT_18            EQU  LATC
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01514 PLAT_19            EQU  LATA
                      01515 PLAT_20            EQU  LATA
                      01516 PLAT_21            EQU  LATA
                      01517 PLAT_22            EQU  LATA
                      01518 PLAT_23            EQU  LATA
                      01519 
                      01520 BIT_0              EQU  5
                      01521 BIT_1              EQU  4
                      01522 BIT_2              EQU  3
                      01523 BIT_3              EQU  2
                      01524 BIT_4              EQU  1
                      01525 BIT_5              EQU  7
                      01526 BIT_6              EQU  6
                      01527 BIT_7              EQU  5
                      01528 BIT_8              EQU  4
                      01529 BIT_9              EQU  5
                      01530 BIT_10             EQU  4
                      01531 BIT_11             EQU  3
                      01532 BIT_12             EQU  2
                      01533 BIT_13             EQU  1
                      01534 BIT_14             EQU  0
                      01535 BIT_15             EQU  3
                      01536 BIT_16             EQU  2
                      01537 BIT_17             EQU  1
                      01538 BIT_18             EQU  0
                      01539 BIT_19             EQU  4
                      01540 BIT_20             EQU  3
                      01541 BIT_21             EQU  2
                      01542 BIT_22             EQU  1
                      01543 BIT_23             EQU  0
                      01544 
                      01545 SSR_LIGHTS         EQU  24      ; first light ID (as opposed to SSR)
                      01546                   ELSE
                      01547                    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      01548 ;
                      01549 ; 4-Channel Board (Mini Standalone CPU)
                      01550 ;
                      01551 PORT_RX             EQU PORTB
                      01552 BIT_RX              EQU 5
                      01553 
                      01554 HAS_T_R             EQU 1
                      01555 HAS_ACTIVE          EQU 1
                      01556 HAS_SENSORS         EQU 1
                      01557 HAS_OPTION          EQU 1
                      01558 
                      01559 TRIS_SENS_A         EQU TRISC   ; Sensor A == ACTIVE LED
                      01560 PORT_SENS_A         EQU PORTC   ; Sensor A == ACTIVE LED
                      01561 BIT_SENS_A          EQU 5       ; Sensor A == ACTIVE LED
                      01562 TRIS_SENS_B         EQU TRISC   ; Sensor B == RED LED
                      01563 PORT_SENS_B         EQU PORTC   ; Sensor B == RED LED
                      01564 BIT_SENS_B          EQU 6       ; Sensor B == RED LED
                      01565 TRIS_SENS_C         EQU TRISC   ; Sensor C == YELLOW LED
                      01566 PORT_SENS_C         EQU PORTC   ; Sensor C == YELLOW LED
                      01567 BIT_SENS_C          EQU 3       ; Sensor C == YELLOW LED
                      01568 TRIS_SENS_D         EQU TRISC   ; Sensor D
                      01569 PORT_SENS_D         EQU PORTC   ; Sensor D
                      01570 BIT_SENS_D          EQU 7       ; Sensor D
                      01571 
                      01572 PLAT_T_R            EQU LATB
                      01573 PORT_T_R            EQU PORTB
                      01574 TRIS_T_R            EQU TRISB
                      01575 BIT_T_R             EQU 6
                      01576 
                      01577 PLAT_ACTIVE         EQU LATC
                      01578 PLAT_RED            EQU LATC
                      01579 PLAT_YELLOW         EQU LATC
                      01580 PLAT_GREEN          EQU LATC
                      01581 BIT_ACTIVE          EQU 5
                      01582 BIT_RED             EQU 6
                      01583 BIT_YELLOW          EQU 3
                      01584 BIT_GREEN           EQU 4
                      01585 
                      01586 PORT_OPTION         EQU PORTA
                      01587 BIT_OPTION          EQU 1
                      01588 
                      01589 PLAT_PWR_ON         EQU LATA
                      01590 BIT_PWR_ON          EQU 0
                      01591 
                      01592 PLAT_0              EQU LATB
                      01593 PLAT_1              EQU LATC
                      01594 PLAT_2              EQU LATC
                      01595 PLAT_3              EQU LATC
                      01596 
                      01597 BIT_0               EQU 4
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01598 BIT_1               EQU 2
                      01599 BIT_2               EQU 1
                      01600 BIT_3               EQU 0
                      01601 
                      01602 SSR_LIGHTS          EQU 4       ; first light ID (as opposed to SSR)
                      01603                    ELSE
                      01604                     IF QSCC_PORT
                      01605                      #include "qscc_hook_main_pins.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos device initialization code which sets up I/O pins.
                      00027 ; We want them arranged differently than the Lumos controllers do, but we put
                      00028 ; the QuizShow code here to keep the Lumos product clean and separate.
                      00029 ; 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_main_pins only used for QS*C systems"
                      00032         ENDIF
                      00033 
                      00034 ;
                      00035 ; QSCC
                      00036 ;
                      00037                     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00038 PORT_RX              EQU        PORTC
                      00039 BIT_RX               EQU        7
                      00040 
                      00041 HAS_T_R              EQU        1
                      00042 HAS_ACTIVE           EQU        0
                      00043 HAS_SENSORS          EQU        0
                      00044 HAS_OPTION           EQU        0
                      00045 HAS_STATUS_LEDS      EQU        0
                      00046 HAS_POWER_CTRL       EQU        0
                      00047 
                      00048 PLAT_T_R             EQU        LATC
                      00049 PORT_T_R             EQU        PORTC
                      00050 TRIS_T_R             EQU        TRISC
                      00051 BIT_T_R              EQU        3
                      00052 
                      00053 PLAT_0               EQU        LATC    ; XR
                      00054 PLAT_1               EQU        LATC    ; XG
                      00055 PLAT_2               EQU        LATC    ; XB
                      00056 PLAT_3               EQU        LATE    ; LR
                      00057 PLAT_4               EQU        LATE    ; LY
                      00058 PLAT_5               EQU        LATE    ; LG
                      00059 PLAT_6               EQU        LATB    ; AL
                      00060 PLAT_7               EQU        LATB    ; BL
                      00061 PLAT_8               EQU        LATB    ; CL
                      00062 PLAT_9               EQU        LATB    ; DL
                      00063 PLAT_10              EQU        LATB    ; FR
                      00064 PLAT_11              EQU        LATB    ; FG
                      00065 PLAT_12              EQU        LATB    ; FB
                      00066 PLAT_13              EQU        LATB    ; FW
                      00067 SSR_MAX              EQU        13
                      00068 
                      00069 BIT_0                EQU        2       ; XR
                      00070 BIT_1                EQU        1       ; XG
                      00071 BIT_2                EQU        0       ; XB
                      00072 BIT_3                EQU        2       ; LR
                      00073 BIT_4                EQU        0       ; LY
                      00074 BIT_5                EQU        1       ; LG
                      00075 BIT_6                EQU        7       ; AL
                      00076 BIT_7                EQU        6       ; BL
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00077 BIT_8                EQU        5       ; CL
                      00078 BIT_9                EQU        4       ; DL
                      00079 BIT_10               EQU        3       ; FR
                      00080 BIT_11               EQU        2       ; FG
                      00081 BIT_12               EQU        1       ; FB
                      00082 BIT_13               EQU        0       ; FW
                      00083                     ELSE
                      00084                      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
  00000F82            00085 PORT_RX               EQU       PORTC
  00000007            00086 BIT_RX                EQU       7
                      00087 
  00000001            00088 HAS_T_R               EQU       1
  00000000            00089 HAS_ACTIVE            EQU       0
  00000000            00090 HAS_SENSORS           EQU       0
  00000000            00091 HAS_OPTION            EQU       0
  00000000            00092 HAS_STATUS_LEDS       EQU       0
  00000000            00093 HAS_POWER_CTRL        EQU       0
                      00094 
  00000F8B            00095 PLAT_T_R              EQU       LATC
  00000F82            00096 PORT_T_R              EQU       PORTC
  00000F94            00097 TRIS_T_R              EQU       TRISC
  00000003            00098 BIT_T_R               EQU       3
                      00099 
  00000F8B            00100 PLAT_0                EQU       LATC    ; X0R
  00000F8B            00101 PLAT_1                EQU       LATC    ; X0G
  00000F8B            00102 PLAT_2                EQU       LATC    ; X0B
  00000F8D            00103 PLAT_3                EQU       LATE    ; L0R
  00000F8A            00104 PLAT_4                EQU       LATB    ; X1R
  00000F8A            00105 PLAT_5                EQU       LATB    ; X1G
  00000F8A            00106 PLAT_6                EQU       LATB    ; X1B
  00000F8A            00107 PLAT_7                EQU       LATB    ; L1R
  00000F8A            00108 PLAT_8                EQU       LATB    ; X2R
  00000F8A            00109 PLAT_9                EQU       LATB    ; X2G
  00000F8A            00110 PLAT_10               EQU       LATB    ; X2B
  00000F8D            00111 PLAT_11               EQU       LATE    ; L2R
  00000F8C            00112 PLAT_12               EQU       LATD    ; X3R
  00000F8C            00113 PLAT_13               EQU       LATD    ; X3G
  00000F8C            00114 PLAT_14               EQU       LATD    ; X3B
  00000F8D            00115 PLAT_15               EQU       LATE    ; L3R
  00000F8A            00116 PLAT_16               EQU       LATB    ; X4R
  00000F8C            00117 PLAT_17               EQU       LATD    ; X4G
  00000F8C            00118 PLAT_18               EQU       LATD    ; X4B
  00000F8C            00119 PLAT_19               EQU       LATD    ; L4R
  00000013            00120 SSR_MAX               EQU       19
                      00121 
  00000002            00122 BIT_0                 EQU       2       ; X0R
  00000001            00123 BIT_1                 EQU       1       ; X0G
  00000000            00124 BIT_2                 EQU       0       ; X0B
  00000002            00125 BIT_3                 EQU       2       ; L0R
  00000007            00126 BIT_4                 EQU       7       ; X1R
  00000006            00127 BIT_5                 EQU       6       ; X1G
  00000005            00128 BIT_6                 EQU       5       ; X1B
  00000004            00129 BIT_7                 EQU       4       ; L1R
  00000003            00130 BIT_8                 EQU       3       ; X2R
  00000002            00131 BIT_9                 EQU       2       ; X2G
  00000001            00132 BIT_10                EQU       1       ; X2B
  00000000            00133 BIT_11                EQU       0       ; L2R
  00000007            00134 BIT_12                EQU       7       ; X3R
  00000006            00135 BIT_13                EQU       6       ; X3G
  00000005            00136 BIT_14                EQU       5       ; X3B
  00000001            00137 BIT_15                EQU       1       ; L3R
  00000000            00138 BIT_16                EQU       0       ; X4R
  00000003            00139 BIT_17                EQU       3       ; X4G
  00000001            00140 BIT_18                EQU       1       ; X4B
  00000002            00141 BIT_19                EQU       2       ; L4R
                      00142                      ENDIF
                      00143                     ENDIF
                      00144 
                      01606                     ELSE
                      01607                      ERROR "Invalid platform select"
                      01608                     ENDIF
                      01609                    ENDIF
                      01610                   ENDIF
                      01611                  ENDIF
                      01612                 ENDIF
                      01613 ;
                      01614 ; THESE SSR LINES ARE NEGATIVE-LOGIC CONTROLLED!
                      01615 ; (0=ON, 1=OFF)
                      01616 ;
                      01617 
                      01618 ; In this version, we have an array of outputs mapped with 0-255 values
                      01619 ; and another block of flags, etc. in SSR_DATA_BANK.
                      01620 ; We include the panel LEDs here, too, so we can handle them like the 
                      01621 ; others as far as timed patterns and display refreshes and the like.
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01622 ;
                      01623 ; Offsets for panel lights
                      01624                         IF      HAS_STATUS_LEDS
                      01625 SSR_GREEN                EQU    SSR_LIGHTS+0    ; NOTE These are positive-logic, not negative like SSRs
                      01626 SSR_YELLOW               EQU    SSR_LIGHTS+1
                      01627 SSR_RED                  EQU    SSR_LIGHTS+2
                      01628 ;
                      01629 ;
                      01630 ; Aliases for macro expansion (continues SSR numbering into these too)
                      01631 ;
                      01632 PLAT_0                   EQU    PLAT_RED
                      01633 PLAT_0                   EQU    PLAT_YELLOW
                      01634 PLAT_0                   EQU    PLAT_GREEN
                      01635 BIT_0                    EQU    BIT_RED
                      01636 BIT_0                    EQU    BIT_YELLOW
                      01637 BIT_0                    EQU    BIT_GREEN
                      01638 ;
                      01639 ;
                      01640                          IF HAS_ACTIVE
                      01641 SSR_ACTIVE                EQU   SSR_LIGHTS+3
                      01642 PLAT_0                    EQU   PLAT_ACTIVE
                      01643 BIT_0                     EQU   BIT_ACTIVE
                      01644 SSR_MAX                   EQU   SSR_LIGHTS+3
                      01645                          ELSE
                      01646 SSR_MAX                   EQU   SSR_LIGHTS+2
                      01647                          ENDIF
                      01648                         ENDIF
                      01649 
                      01650                         IF HAS_STATUS_LEDS
                      01651 OUTPUT_CHAN_MAX          EQU    SSR_LIGHTS-1
                      01652                         ELSE
  00000013            01653 OUTPUT_CHAN_MAX          EQU    SSR_MAX
                      01654                         ENDIF
                      01655 
                      01656 WAIT_FOR_SENTINEL MACRO MAX_LEN, SENTINEL_VALUE, NEXT_STATE
                      01657          MOVLW  MAX_LEN
                      01658          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
                      01659          MOVLW  SENTINEL_VALUE
                      01660          MOVWF  YY_LOOK_FOR, ACCESS
                      01661          MOVLW  6                       ; -> state 6 (wait for end of packet)
                      01662          MOVWF  YY_STATE, ACCESS
                      01663          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
                      01664          MOVLW  NEXT_STATE
                      01665          MOVWF  YY_NEXT_STATE, ACCESS
                      01666         ENDM
                      01667 
  00000001            01668 ERR_CLASS_OVERRUN       EQU     1       ; ID dispatch overrun
  00000002            01669 ERR_CLASS_IN_VALID      EQU     2       ; Input validation failure
  00000003            01670 ERR_CLASS_FATAL_RESET   EQU     3       ; reset failure
  00000004            01671 ERR_CLASS_DEVICE        EQU     4       ; hardware issue
  00000005            01672 ERR_CLASS_INT_COMMAND   EQU     5       ; internal command invalid
                      01673 ERR_BUG MACRO   ERR_CODE, ERR_CLASS
                      01674          MOVLW  ERR_CODE
                      01675          MOVWF  LAST_ERROR, ACCESS
                      01676          IF HAS_ACTIVE
                      01677           SET_SSR_RAPID_FLASH SSR_ACTIVE
                      01678          ENDIF
                      01679          IF HAS_STATUS_LEDS
                      01680           SET_SSR_RAPID_FLASH SSR_YELLOW
                      01681           IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01682            SET_SSR_RAPID_FLASH SSR_RED
                      01683            SET_SSR_OFF SSR_GREEN
                      01684           ELSE
                      01685            SET_SSR_OFF SSR_RED
                      01686           ENDIF
                      01687          ENDIF
                      01688          IF ROLE_MASTER
                      01689           ; Send extra flags to slave
                      01690           MOVLW 0xF0
                      01691           CALL  SIO_WRITE_W
                      01692           MOVLW 0x21
                      01693           CALL  SIO_WRITE_W
                      01694           IF ERR_CLASS == ERR_CLASS_OVERRUN
                      01695            MOVLW B'00101000'
                      01696            CALL SIO_WRITE_W
                      01697            MOVLW B'00000000'
                      01698           ELSE
                      01699            IF ERR_CLASS == ERR_CLASS_IN_VALID
                      01700             MOVLW B'00111000'
                      01701             CALL SIO_WRITE_W
                      01702             MOVLW B'00000001'
                      01703            ELSE
                      01704             IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01705              MOVLW B'00101101'
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01706              CALL SIO_WRITE_W
                      01707              MOVLW B'00000101'
                      01708             ELSE
                      01709              IF ERR_CLASS == ERR_CLASS_DEVICE
                      01710               MOVLW B'00111000'
                      01711               CALL SIO_WRITE_W
                      01712               MOVLW B'00000101'
                      01713              ELSE
                      01714               IF ERR_CLASS == ERR_CLASS_INT_COMMAND
                      01715                MOVLW B'00111000'
                      01716                CALL SIO_WRITE_W
                      01717                MOVLW B'00000110'
                      01718               ELSE
                      01719                MOVLW B'00000101'
                      01720                CALL  SIO_WRITE_W
                      01721                MOVLW B'00000000'
                      01722               ENDIF
                      01723              ENDIF
                      01724             ENDIF
                      01725            ENDIF
                      01726           ENDIF
                      01727           CALL SIO_WRITE_W
                      01728          ENDIF
                      01729          CLRF   YY_STATE, ACCESS
                      01730          RETURN
                      01731         ENDM
                      01732 
                      01733 SET_SSR_VALUE MACRO IDX, LEVEL
                      01734         BANKSEL SSR_DATA_BANK
                      01735          MOVLW  LEVEL
                      01736          MOVWF  SSR_00_VALUE+IDX, BANKED
                      01737          CLRF   SSR_00_STEP+IDX, BANKED
                      01738          CLRF   SSR_00_SPEED+IDX, BANKED
                      01739          CLRF   SSR_00_COUNTER+IDX, BANKED
                      01740          CLRF   SSR_00_FLAGS+IDX, BANKED
                      01741         ENDM
                      01742 
                      01743 SET_SSR_PATTERN MACRO IDX, LEVEL, STEP, SPEED, FLAGS
                      01744         BANKSEL SSR_DATA_BANK
                      01745          MOVLW  LEVEL
                      01746          MOVWF  SSR_00_VALUE+IDX, BANKED
                      01747          MOVLW  STEP
                      01748          MOVWF  SSR_00_STEP+IDX, BANKED
                      01749          MOVLW  SPEED
                      01750          MOVWF  SSR_00_SPEED+IDX, BANKED
                      01751          MOVWF  SSR_00_COUNTER+IDX, BANKED
                      01752          MOVLW  FLAGS
                      01753          MOVWF  SSR_00_FLAGS+IDX, BANKED
                      01754         ENDM
                      01755 
                      01756 SET_SSR_NORMAL_MODE MACRO IDX
                      01757          SET_SSR_PATTERN IDX, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      01758         ENDM
                      01759 
                      01760 SET_SSR_DMX_MODE MACRO IDX
                      01761          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      01762         ENDM
                      01763 
                      01764 SET_SSR_RAPID_FLASH MACRO IDX
                      01765          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE
                      01766         ENDM
                      01767 
                      01768 SET_SSR_BLINK_FADE MACRO IDX
                      01769          SET_SSR_PATTERN IDX, 255,   2,  1, BIT_FADE_DOWN
                      01770         ENDM
                      01771 
                      01772 SET_SSR_SLOW_FLASH MACRO IDX
                      01773          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE|BIT_MAX_OFF_TIME
                      01774         ENDM
                      01775 
                      01776 SET_SSR_RAPID_FADE MACRO IDX
                      01777          SET_SSR_PATTERN IDX, 0, 4, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      01778         ENDM
                      01779 
                      01780 SET_SSR_SLOW_FADE MACRO IDX
                      01781          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      01782         ENDM
                      01783 
                      01784 SET_SSR_STEADY MACRO IDX
                      01785          SET_SSR_VALUE IDX, 255
                      01786         ENDM
                      01787 
                      01788 SET_SSR_OFF MACRO IDX
                      01789          SET_SSR_VALUE IDX, 0
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01790         ENDM
                      01791 
                      01792 ;
                      01793 ; Sending 8-bit data bytes in our 7-bit protocol
                      01794 ; (in data bytes, in other words) requires this
                      01795 ; escaping mechanism:
                      01796 ;   If high bit set, send $7E + low 7 bits
                      01797 ;   Literal $7E is sent as $7F + $7E
                      01798 ;   Literal $7F is sent as $7F + $7F
                      01799 ; 
                      01800 ; Other interesting cases inferred from the above:
                      01801 ;   $FE is sent as $7E + $7E
                      01802 ;   $FF is sent as $7E + $7F
                      01803 ;
                      01804 ; This calls the SIO_WRITE_W entry point, so the bank
                      01805 ; will shift as a result.
                      01806 ;
                      01807 SND8BIT MACRO   VALUE
                      01808         MOVLW   VALUE
                      01809         SEND_8_BIT_W
                      01810         ENDM
                      01811 
  00000001            01812 S8B_LABEL SET   1
                      01813 SEND_8_BIT_W MACRO
                      01814         MOVWF   EIGHTBITSIOBUF, ACCESS
                      01815         MOVLW   0x7F                            ; sending literal $7F?
                      01816         CPFSEQ  EIGHTBITSIOBUF, ACCESS
                      01817         BRA     S8B_CHK_7E#v(S8B_LABEL)
                      01818         CALL    SIO_WRITE_W                     ; send $7F to escape first
                      01819         MOVLW   0x7F                            ; then the literal $7F itself.
                      01820         CALL    SIO_WRITE_W                     
                      01821         BRA     S8B_END#v(S8B_LABEL)
                      01822 S8B_CHK_7E#v(S8B_LABEL):
                      01823         MOVLW   0x7E                            ; sending literal $7E?
                      01824         CPFSEQ  EIGHTBITSIOBUF, ACCESS
                      01825         BRA     S8B_CHK_MSB#v(S8B_LABEL)
                      01826         MOVLW   0x7F                            ; send $7F to escape first
                      01827         CALL    SIO_WRITE_W
                      01828         MOVLW   0x7E                            ; then the literal $7E itself.
                      01829         CALL    SIO_WRITE_W
                      01830         BRA     S8B_END#v(S8B_LABEL)
                      01831 S8B_CHK_MSB#v(S8B_LABEL):
                      01832         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
                      01833         BRA     S8B_SEND_NORMAL#v(S8B_LABEL)
                      01834         MOVLW   0x7E                            ; send $7E to escape first
                      01835         CALL    SIO_WRITE_W
                      01836         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
                      01837 S8B_SEND_NORMAL#v(S8B_LABEL):
                      01838         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
                      01839         CALL    SIO_WRITE_W     
                      01840 S8B_END#v(S8B_LABEL):
                      01841 S8B_LABEL ++
                      01842         ENDM
                      01843 
                      01844 ;==============================================================================
                      01845 ; BOOT BLOCK
                      01846 ;______________________________________________________________________________
                      01847 
                      01848 ;
                      01849 ; RESET VECTOR
                      01850 ;
                      01851 V_RST   CODE    0x0000
000000 0004           01852         CLRWDT
000002 EF?? F???      01853         GOTO    START
                      01854 ;
                      01855 ; HIGH-PRIORITY INTERRUPT VECTOR
                      01856 ;
                      01857 V_INT_H CODE    0x0008
000008 0004           01858         CLRWDT
00000A EF?? F???      01859         GOTO    INT_HIGH
                      01860 ;
                      01861 ; LOW-PRIORITY INTERRUPT VECTOR
                      01862 ;
                      01863 V_INT_L CODE    0x0018
000018 0004           01864         CLRWDT
00001A EF?? F???      01865         GOTO    INT_LOW
                      01866 ;
                      01867 ; INITIALIZATION CODE
                      01868 ;
                      01869 _BOOT   CODE    0x0100
                      01870 
000100                01871 S_FLASH:
                      01872         IF HAS_STATUS_LEDS
                      01873          BSF    PLAT_RED, BIT_RED, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01874          RCALL  DELAY_1_6_SEC
                      01875          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01876          RCALL  DELAY_1_6_SEC
                      01877         
                      01878          BCF    PLAT_RED, BIT_RED, ACCESS
                      01879          RCALL  DELAY_1_6_SEC
                      01880          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01881          RCALL  DELAY_1_6_SEC
                      01882         ENDIF
000100 0012           01883         RETURN
                      01884 
000102                01885 D_FLASH:
                      01886         IF HAS_STATUS_LEDS
                      01887          BSF    PLAT_RED, BIT_RED, ACCESS
                      01888          RCALL  DELAY_1_12_SEC
                      01889          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01890          RCALL  DELAY_1_12_SEC
                      01891          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01892          RCALL  DELAY_1_12_SEC
                      01893          IF HAS_ACTIVE
                      01894           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01895           RCALL DELAY_1_12_SEC
                      01896          ENDIF
                      01897         
                      01898          BCF    PLAT_RED, BIT_RED, ACCESS
                      01899          RCALL  DELAY_1_12_SEC
                      01900          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01901          RCALL  DELAY_1_12_SEC
                      01902          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01903          RCALL  DELAY_1_12_SEC
                      01904          IF HAS_ACTIVE
                      01905           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01906           RCALL DELAY_1_12_SEC
                      01907          ENDIF
                      01908         ENDIF
000102 0012           01909         RETURN
                      01910 
000104                01911 START:
000104 0004           01912         CLRWDT
000106 6AFC           01913         CLRF    STKPTR, ACCESS          ; clear stack error bits, set SP=0
000108 EC?? F???      01914         CALL    LUMOS_INIT
                      01915         IF ! HAS_SENSORS && !QSCC_PORT
                      01916          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS         ; If this device can't possibly
                      01917          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS         ; support sensor inputs, enable outputs
                      01918          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS         ; on those pins early to let the LEDs
                      01919          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS         ; work ASAP.
                      01920         ENDIF
                      01921         IF 0
                      01922         ;
                      01923         ; Extra start-up delay to investigate boot bug
                      01924         ;
                      01925         MOVLW   .10
                      01926         MOVWF   I, ACCESS
                      01927 SSS_SSS:
                      01928         CLRWDT
                      01929         CALL    S_FLASH
                      01930         DECFSZ  I, F, ACCESS
                      01931         BRA     SSS_SSS
                      01932         ENDIF
                      01933         ;
00010C EC?? F???      01934         CALL    D_FLASH
000110 EC?? F???      01935         CALL    SIO_INIT                ; call after other TRIS bits set
                      01936         ;
                      01937         ; Get EEPROM settings
                      01938         ;
                      01939         IF HAS_STATUS_LEDS
                      01940          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () () () R
                      01941         ENDIF
                      01942         ;
                      01943         ; Test sentinel values $000==$FF and $00F==$42.
                      01944         ; If they are not there, do a full factory reset of those
                      01945         ; settings to restore something that we know will work.
                      01946         ;
000114 0004           01947         CLRWDT
000116 6AAA           01948         CLRF    EEADRH, ACCESS          ; EEPROM location $000
000118 6AA9           01949         CLRF    EEADR, ACCESS           ; (note interrupts are still off now)
00011A 9EA6           01950         BCF     EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
00011C 9CA6           01951         BCF     EECON1, CFGS, ACCESS
00011E 94A6           01952         BCF     EECON1, WREN, ACCESS    ; disable writing
000120 80A6           01953         BSF     EECON1, RD, ACCESS      ; initiate read operation
000122 0EFF           01954         MOVLW   0xFF                    ; 
000124 62A8           01955         CPFSEQ  EEDATA, ACCESS          ; byte == $FF?
000126 D???           01956         BRA     FACTORY_RESET           ; if not, overwrite everything!
000128 0E0F           01957         MOVLW   0x0F                    ; try ending sentinel
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00012A 6EA9           01958         MOVWF   EEADR, ACCESS           ; at $00F
00012C 80A6           01959         BSF     EECON1, RD, ACCESS
00012E 0E42           01960         MOVLW   0x42
000130 62A8           01961         CPFSEQ  EEDATA, ACCESS          ; byte == $42?
000132 D???           01962         BRA     FACTORY_RESET           ; else, overwrite.
                      01963         ;
                      01964         ; Values checked out, so assume EEPROM is intact.
                      01965         ; Read values into RAM variables and continue booting.
                      01966         ;
000134 0004           01967         CLRWDT
000136 98A1           01968         BCF     PIR2, EEIF, ACCESS      ; clear interrupt flag
                      01969         IF HAS_STATUS_LEDS
                      01970          BCF    PLAT_RED, BIT_RED, ACCESS       
                      01971          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y ()
                      01972         ENDIF
                      01973         ;
000138 94A6           01974         BCF     EECON1, WREN, ACCESS    ; Read (not write) access to memory
00013A 9EA6           01975         BCF     EECON1, EEPGD, ACCESS   ; Select access to DATA area
00013C 9CA6           01976         BCF     EECON1, CFGS, ACCESS
                      01977         ;
00013E 6AAA           01978         CLRF    EEADRH, ACCESS
000140 0E01           01979         MOVLW   1
000142 6EA9           01980         MOVWF   EEADR, ACCESS           ; EEPROM location 0x001: baud rate
000144 80A6           01981         BSF     EECON1, RD, ACCESS
000146 50A8           01982         MOVF    EEDATA, W, ACCESS
000148 EC?? F???      01983         CALL    SIO_SET_BAUD_W
                      01984         ;
00014C 2AA9           01985         INCF    EEADR, F, ACCESS        ; EEPROM location 0x002: device address
00014E 80A6           01986         BSF     EECON1, RD, ACCESS
000150 CFA8 F???      01987         MOVFF   EEDATA, MY_ADDRESS
                      01988         ;
000154 2AA9           01989         INCF    EEADR, F, ACCESS        ; EEPROM location 0x003: phase offset MSB
000156 80A6           01990         BSF     EECON1, RD, ACCESS
000158 CFA8 F???      01991         MOVFF   EEDATA, PHASE_OFFSETH
                      01992         ;
00015C 2AA9           01993         INCF    EEADR, F, ACCESS        ; EEPROM location 0x004: phase offset LSB
00015E 80A6           01994         BSF     EECON1, RD, ACCESS
000160 CFA8 F???      01995         MOVFF   EEDATA, PHASE_OFFSETL
                      01996         ;
000164 2AA9           01997         INCF    EEADR, F, ACCESS        ; EEPROM location 0x005: DMX slot MSB
000166 80A6           01998         BSF     EECON1, RD, ACCESS
000168 CFA8 F???      01999         MOVFF   EEDATA, DMX_SLOTH
                      02000         ;
00016C 2AA9           02001         INCF    EEADR, F, ACCESS        ; EEPROM location 0x006: DMX slot LSB
00016E 80A6           02002         BSF     EECON1, RD, ACCESS
000170 CFA8 F???      02003         MOVFF   EEDATA, DMX_SLOTL
000174 9C00           02004         BCF     DMX_SLOTH, DMX_SPEED, ACCESS    ; clear flag (we're not running at DMX speed yet)
                      02005         ;
000176 2AA9           02006         INCF    EEADR, F, ACCESS        ; EEPROM location 0x007: Sensor Configuration
                      02007         IF HAS_SENSORS
                      02008          BSF    EECON1, RD, ACCESS
                      02009          BTFSS  EEDATA, 3, ACCESS
                      02010          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      02011          BTFSS  EEDATA, 2, ACCESS
                      02012          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      02013          BTFSS  EEDATA, 1, ACCESS
                      02014          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      02015          BTFSS  EEDATA, 0, ACCESS
                      02016          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      02017         ENDIF
                      02018         ;
000178 6AA9           02019         CLRF    EEADR, ACCESS   ; Leave pointer at 0x000
                      02020         ;
                      02021         IF HAS_STATUS_LEDS
                      02022          BSF    PLAT_GREEN, BIT_GREEN, ACCESS   ; Panel: () G Y ()
                      02023         ENDIF
                      02024         ;
00017A 989F           02025         BCF     IPR1, TXIP, ACCESS      ; TxD interrupt = low priority
00017C 9A9F           02026         BCF     IPR1, RCIP, ACCESS      ; RxD interrupt = low priority
00017E 0004           02027         CLRWDT
                      02028         ;
                      02029         ; Initialize data structures
                      02030         ;
000180 6A00           02031         CLRF    SSR_STATE, ACCESS
000182 6A00           02032         CLRF    SSR_STATE2, ACCESS
000184 6A00           02033         CLRF    YY_STATE, ACCESS
                      02034         ;
000186 0E80           02035         MOVLW   .128
000188 6E00           02036         MOVWF   OPTION_DEBOUNCE, ACCESS
00018A 6A00           02037         CLRF    OPTION_HOLD, ACCESS
00018C 6800           02038         SETF    AUTO_OFF_CTRH, ACCESS
00018E 6800           02039         SETF    AUTO_OFF_CTRL, ACCESS
000190 0104           02040         BANKSEL SSR_DATA_BANK
  00000000            02041 CH      SET     0
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02042         WHILE CH<=SSR_MAX
000192 6B00           02043          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
000194 6B00           02044          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
000196 6B00           02045          CLRF   SSR_00_STEP+0,      BANKED
000198 6B00           02046          CLRF   SSR_00_SPEED+0,      BANKED
00019A 6B00           02047          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            02048 CH       ++
00019C 6B00           02043          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
00019E 6B00           02044          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
0001A0 6B00           02045          CLRF   SSR_00_STEP+1,      BANKED
0001A2 6B00           02046          CLRF   SSR_00_SPEED+1,      BANKED
0001A4 6B00           02047          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            02048 CH       ++
0001A6 6B00           02043          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
0001A8 6B00           02044          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
0001AA 6B00           02045          CLRF   SSR_00_STEP+2,      BANKED
0001AC 6B00           02046          CLRF   SSR_00_SPEED+2,      BANKED
0001AE 6B00           02047          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            02048 CH       ++
0001B0 6B00           02043          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
0001B2 6B00           02044          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
0001B4 6B00           02045          CLRF   SSR_00_STEP+3,      BANKED
0001B6 6B00           02046          CLRF   SSR_00_SPEED+3,      BANKED
0001B8 6B00           02047          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            02048 CH       ++
0001BA 6B00           02043          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
0001BC 6B00           02044          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
0001BE 6B00           02045          CLRF   SSR_00_STEP+4,      BANKED
0001C0 6B00           02046          CLRF   SSR_00_SPEED+4,      BANKED
0001C2 6B00           02047          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            02048 CH       ++
0001C4 6B00           02043          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
0001C6 6B00           02044          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
0001C8 6B00           02045          CLRF   SSR_00_STEP+5,      BANKED
0001CA 6B00           02046          CLRF   SSR_00_SPEED+5,      BANKED
0001CC 6B00           02047          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            02048 CH       ++
0001CE 6B00           02043          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
0001D0 6B00           02044          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
0001D2 6B00           02045          CLRF   SSR_00_STEP+6,      BANKED
0001D4 6B00           02046          CLRF   SSR_00_SPEED+6,      BANKED
0001D6 6B00           02047          CLRF   SSR_00_COUNTER+6,      BANKED
  00000007            02048 CH       ++
0001D8 6B00           02043          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
0001DA 6B00           02044          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
0001DC 6B00           02045          CLRF   SSR_00_STEP+7,      BANKED
0001DE 6B00           02046          CLRF   SSR_00_SPEED+7,      BANKED
0001E0 6B00           02047          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            02048 CH       ++
0001E2 6B00           02043          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
0001E4 6B00           02044          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
0001E6 6B00           02045          CLRF   SSR_00_STEP+8,      BANKED
0001E8 6B00           02046          CLRF   SSR_00_SPEED+8,      BANKED
0001EA 6B00           02047          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            02048 CH       ++
0001EC 6B00           02043          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
0001EE 6B00           02044          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
0001F0 6B00           02045          CLRF   SSR_00_STEP+9,      BANKED
0001F2 6B00           02046          CLRF   SSR_00_SPEED+9,      BANKED
0001F4 6B00           02047          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            02048 CH       ++
0001F6 6B00           02043          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
0001F8 6B00           02044          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
0001FA 6B00           02045          CLRF   SSR_00_STEP+10,     BANKED
0001FC 6B00           02046          CLRF   SSR_00_SPEED+10,     BANKED
0001FE 6B00           02047          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            02048 CH       ++
000200 6B00           02043          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
000202 6B00           02044          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
000204 6B00           02045          CLRF   SSR_00_STEP+11,     BANKED
000206 6B00           02046          CLRF   SSR_00_SPEED+11,     BANKED
000208 6B00           02047          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            02048 CH       ++
00020A 6B00           02043          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
00020C 6B00           02044          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
00020E 6B00           02045          CLRF   SSR_00_STEP+12,     BANKED
000210 6B00           02046          CLRF   SSR_00_SPEED+12,     BANKED
000212 6B00           02047          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            02048 CH       ++
000214 6B00           02043          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
000216 6B00           02044          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
000218 6B00           02045          CLRF   SSR_00_STEP+13,     BANKED
00021A 6B00           02046          CLRF   SSR_00_SPEED+13,     BANKED
00021C 6B00           02047          CLRF   SSR_00_COUNTER+13,     BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000E            02048 CH       ++
00021E 6B00           02043          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
000220 6B00           02044          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
000222 6B00           02045          CLRF   SSR_00_STEP+14,     BANKED
000224 6B00           02046          CLRF   SSR_00_SPEED+14,     BANKED
000226 6B00           02047          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            02048 CH       ++
000228 6B00           02043          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
00022A 6B00           02044          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
00022C 6B00           02045          CLRF   SSR_00_STEP+15,     BANKED
00022E 6B00           02046          CLRF   SSR_00_SPEED+15,     BANKED
000230 6B00           02047          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            02048 CH       ++
000232 6B00           02043          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
000234 6B00           02044          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
000236 6B00           02045          CLRF   SSR_00_STEP+16,     BANKED
000238 6B00           02046          CLRF   SSR_00_SPEED+16,     BANKED
00023A 6B00           02047          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            02048 CH       ++
00023C 6B00           02043          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
00023E 6B00           02044          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
000240 6B00           02045          CLRF   SSR_00_STEP+17,     BANKED
000242 6B00           02046          CLRF   SSR_00_SPEED+17,     BANKED
000244 6B00           02047          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            02048 CH       ++
000246 6B00           02043          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
000248 6B00           02044          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
00024A 6B00           02045          CLRF   SSR_00_STEP+18,     BANKED
00024C 6B00           02046          CLRF   SSR_00_SPEED+18,     BANKED
00024E 6B00           02047          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            02048 CH       ++
000250 6B00           02043          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
000252 6B00           02044          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
000254 6B00           02045          CLRF   SSR_00_STEP+19,     BANKED
000256 6B00           02046          CLRF   SSR_00_SPEED+19,     BANKED
000258 6B00           02047          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            02048 CH       ++
                      02049         ENDW
                      02050         IF HAS_STATUS_LEDS
                      02051          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G Y R
                      02052         ENDIF
                      02053         ;
                      02054         ; Timer 0 for non-ZC boards
                      02055         ;
                      02056         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
00025A 6AD7           02057          CLRF   TMR0H, ACCESS
00025C 6AD6           02058          CLRF   TMR0L, ACCESS
00025E 84F1           02059          BSF    INTCON2, TMR0IP, ACCESS ; set HIGH priority for timing
000260 8AF2           02060          BSF    INTCON, TMR0IE, ACCESS  ; enable timer 0 interrupts
000262 8ED5           02061          BSF    T0CON, TMR0ON, ACCESS   ; start timer 0 running
                      02062         ELSE
                      02063          IF LUMOS_SLICE_TIMER == LUMOS_ZC
                      02064           BSF   INTCON, INT0IE, ACCESS  ; enable ZC detect pin interrupt
                      02065          ELSE
                      02066           ERROR "LUMOS_SLICE_TIMER set incorrectly"
                      02067          ENDIF
                      02068         ENDIF
                      02069         IF HAS_STATUS_LEDS
                      02070          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () G () R
                      02071         ENDIF
                      02072         ;
                      02073         ; Timer 2 for half-wave slice timing
                      02074         ;
000264 0E9F           02075         MOVLW   SLICE_TMR_PERIOD        ; set timer period
000266 6ECB           02076         MOVWF   PR2, ACCESS
000268 6ACC           02077         CLRF    TMR2, ACCESS            ; reset timer
00026A 829F           02078         BSF     IPR1, TMR2IP, ACCESS    ; set HIGH priority for timing
00026C 929E           02079         BCF     PIR1, TMR2IF, ACCESS    ; clear any pending interrupt
00026E 829D           02080         BSF     PIE1, TMR2IE, ACCESS    ; enable timer 2 interrupts
000270 84CA           02081         BSF     T2CON, TMR2ON, ACCESS   ; start timer 2 running
                      02082         ;
000272 8A9D           02083         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts
                      02084         ;
                      02085         ; Clear all interrupt flags and enable interrupts
                      02086         ;
000274 6A9E           02087         CLRF    PIR1, ACCESS
000276 6AA1           02088         CLRF    PIR2, ACCESS
000278 6AA4           02089         CLRF    PIR3, ACCESS
00027A 94F2           02090         BCF     INTCON, TMR0IF, ACCESS
00027C 92F2           02091         BCF     INTCON, INT0IF, ACCESS
00027E 8EF2           02092         BSF     INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000280 8CF2           02093         BSF     INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02094         ;
                      02095         ; Check for factory reset jumper
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02096         ;  (short J11 pins 4 and 5, then power up device [or press reset].  When 
                      02097         ;  all lights flash, pull the jumper away. device will restore factory 
                      02098         ;  settings.)
                      02099         ;                                                            ______
                      02100         ; With the jumper in place, the OPTION input will follow the PWRCTL output.
                      02101         ; If they start off unequal, we skip this check and don't disturb the power
                      02102         ; supply logic at all.  Otherwise, we will flip our output a couple of times
                      02103         ; and see that OPTION keeps pace, which indicates that the jumper is there.
                      02104         ; we'll wait for the jumper to be pulled to avoid an infinite loop of resets,
                      02105         ; and also to provide a way out (power off first and no reset will have happened).
                      02106         ;
000282 0004           02107         CLRWDT
                      02108         IF HAS_POWER_CTRL
                      02109          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; turn on power supply
                      02110         ENDIF
000284                02111 FACTORY_RESET_JUMPER_CHECK:
                      02112         IF HAS_OPTION
                      02113          RCALL  DELAY_1_12_SEC
                      02114          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS
                      02115          BRA    END_FRJC                        ; OPTION button not jumpered, boot normally
                      02116 
                      02117          CLRWDT                                 
                      02118          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping the output bit
                      02119          RCALL  DELAY_1_12_SEC
                      02120          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS ; OPTION was down, but not because of the 
                      02121          BRA    END_FRJC                        ; jumper--boot normally
                      02122 
                      02123          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping back
                      02124          RCALL  DELAY_1_12_SEC
                      02125          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS 
                      02126          BRA    END_FRJC                        
                      02127 
                      02128          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping back last time
                      02129          RCALL  DELAY_1_12_SEC
                      02130          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS 
                      02131          BRA    END_FRJC                        
                      02132 
                      02133         ;
                      02134         ; After perhaps a bit too much caution, we're convinced there's a jumper there.
                      02135         ; wait for it to go away now, then do the reset.
                      02136         ;                                         ______                ______
                      02137          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; PWRCTL low, watch for PWR_ON->1
                      02138 FRJC_LOOP:
                      02139          CLRWDT
                      02140          BTG    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02141          BTG    PLAT_GREEN, BIT_GREEN, ACCESS
                      02142          BTG    PLAT_RED, BIT_RED, ACCESS       
                      02143          IF HAS_ACTIVE
                      02144           BTG   PLAT_ACTIVE, BIT_ACTIVE, ACCESS 
                      02145          ENDIF
                      02146          RCALL  DELAY_1_12_SEC
                      02147          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS
                      02148          BRA    FRJC_LOOP
                      02149          GOTO   FACTORY_RESET
                      02150         ENDIF
                      02151         
000284                02152 END_FRJC:
                      02153         ;
                      02154         ; Launch mainline code
                      02155         ;
000284 0104           02156         BANKSEL SSR_DATA_BANK
                      02157         IF HAS_STATUS_LEDS
                      02158          BCF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G () ()
                      02159          CLRF   SSR_00_VALUE+SSR_GREEN, BANKED  ; Green light cycles ~ 1/4 Hz
                      02160          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      02161          SET_SSR_NORMAL_MODE SSR_GREEN
                      02162         ENDIF
                      02163         ;       
                      02164         ; If we're in DMX mode, change our baud rate to 250,000 bps
                      02165         ;
000286 AE00           02166         BTFSS   DMX_SLOTH, DMX_EN, ACCESS
000288 EF?? F???      02167         GOTO    MAIN
00028C 0E0A           02168         MOVLW   SIO_250000
00028E EC?? F???      02169         CALL    SIO_SET_BAUD_W
000292 8C00           02170         BSF     DMX_SLOTH, DMX_SPEED, ACCESS
                      02171         IF HAS_STATUS_LEDS
                      02172          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      02173          SET_SSR_DMX_MODE SSR_GREEN
                      02174         ENDIF
000294 EF?? F???      02175         GOTO    MAIN
                      02176 
                      02177 BEGIN_EEPROM_READ MACRO START_ADDR
                      02178          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02179          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02180          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02181          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02182          BCF    EECON1, CFGS, ACCESS
                      02183          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02184         ENDM
                      02185 
                      02186 BEGIN_EEPROM_WRITE MACRO START_ADDR
                      02187          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02188          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02189          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02190          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02191          BCF    EECON1, CFGS, ACCESS
                      02192          BSF    EECON1, WREN, ACCESS    ; enable writing
                      02193         ENDM
                      02194 
                      02195 END_EEPROM_READ MACRO                   ; THIS CANNOT CHANGE WREG
                      02196          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02197          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02198          CLRF   EEADRH, ACCESS
                      02199          CLRF   EEADR, ACCESS
                      02200         ENDM
                      02201         
                      02202 END_EEPROM_WRITE MACRO
                      02203          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02204          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02205          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02206          CLRF   EEADRH, ACCESS
                      02207          CLRF   EEADR, ACCESS
                      02208         ENDM
                      02209 
                      02210 SET_EEPROM_ADDRESS MACRO ADDR
                      02211          MOVLW  HIGH(ADDR)              ; NOTE interrupts need to be OFF here!
                      02212          MOVWF  EEADRH, ACCESS
                      02213          MOVLW  LOW(ADDR)
                      02214          MOVWF  EEADR, ACCESS
                      02215         ENDM
                      02216 
  00000000            02217 EE_LL_XX    SET 0
                      02218 WRITE_EEPROM_DATA MACRO
                      02219          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02220          MOVLW  0x55
                      02221          MOVWF  EECON2, ACCESS
                      02222          MOVLW  0xAA
                      02223          MOVWF  EECON2, ACCESS
                      02224          BSF    EECON1, WR, ACCESS      ; start write cycle
                      02225 WRITE_EEPROM_LOOP#v(EE_LL_XX):
                      02226          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
                      02227          BRA    WRITE_EEPROM_LOOP#v(EE_LL_XX)
                      02228          CLRWDT
                      02229          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02230 EE_LL_XX    ++
                      02231         ENDM
                      02232 
                      02233 WRITE_EEPROM_DATA_INC MACRO
                      02234         WRITE_EEPROM_DATA
                      02235         INCF    EEADR, F, ACCESS
                      02236         ENDM
                      02237 
                      02238 WRITE_EEPROM_DATA_W MACRO
                      02239         MOVWF   EEDATA, ACCESS
                      02240         WRITE_EEPROM_DATA
                      02241         ENDM
                      02242 
                      02243 WRITE_EEPROM_DATA_W_INC MACRO
                      02244         WRITE_EEPROM_DATA_W
                      02245         INCF    EEADR, F, ACCESS
                      02246         ENDM
                      02247 
                      02248 READ_EEPROM_DATA MACRO
                      02249         BSF     EECON1, RD, ACCESS
                      02250         ENDM
                      02251 
                      02252 READ_EEPROM_DATA_REG MACRO REGISTER
                      02253         READ_EEPROM_DATA
                      02254         MOVFF   EEDATA, REGISTER
                      02255         ENDM
                      02256 
                      02257 READ_EEPROM_DATA_W MACRO
                      02258         READ_EEPROM_DATA
                      02259         MOVFF   EEDATA, WREG
                      02260         ENDM
                      02261 
                      02262 READ_EEPROM_DATA_W_INC MACRO
                      02263         READ_EEPROM_DATA_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02264         INCF    EEADR, F, ACCESS
                      02265         ENDM
                      02266         
000298                02267 FACTORY_RESET:
000298 0004           02268         CLRWDT
                      02269         ;
                      02270         ; write default configuration to EEPROM
                      02271         ;
                      02272         BEGIN_EEPROM_WRITE EE_START
00029A 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
00029C 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_START    ; NOTE interrupts need to be OFF here!
00029E 0E00               M          MOVLW  HIGH(EE_START)          ; NOTE interrupts need to be OFF here!
0002A0 6EAA               M          MOVWF  EEADRH, ACCESS
0002A2 0E00               M          MOVLW  LOW(EE_START)
0002A4 6EA9               M          MOVWF  EEADR, ACCESS
0002A6 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
0002A8 9CA6               M          BCF    EECON1, CFGS, ACCESS
0002AA 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
0002AC 0E??           02273         MOVLW   UPPER(DEFAULT_TBL)      ; load lookup table pointer
0002AE 6EF8           02274         MOVWF   TBLPTRU, ACCESS
0002B0 0E??           02275         MOVLW   HIGH(DEFAULT_TBL)
0002B2 6EF7           02276         MOVWF   TBLPTRH, ACCESS
0002B4 0E??           02277         MOVLW   LOW(DEFAULT_TBL)
0002B6 6EF6           02278         MOVWF   TBLPTR, ACCESS
                      02279 
0002B8 0E10           02280         MOVLW   EEPROM_SETTINGS_LEN
0002BA 6E00           02281         MOVWF   I, ACCESS
                      02282 
0002BC                02283 FACTORY_RESET_LOOP:
0002BC 0009           02284         TBLRD   *+                      ; byte -> TABLAT
0002BE CFF5 FFA8      02285         MOVFF   TABLAT, EEDATA
                      02286         IF HAS_STATUS_LEDS
                      02287          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y R
                      02288         ENDIF
                      02289         WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
0002C2 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
0002C4 0E55               M          MOVLW  0x55
0002C6 6EA7               M          MOVWF  EECON2, ACCESS
0002C8 0EAA               M          MOVLW  0xAA
0002CA 6EA7               M          MOVWF  EECON2, ACCESS
0002CC 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
0002CE                    M WRITE_EEPROM_LOOP0:
0002CE A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
0002D0 D???               M          BRA    WRITE_EEPROM_LOOP0
0002D2 0004               M          CLRWDT
0002D4 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000001                M EE_LL_XX    ++
0002D6 2AA9               M         INCF    EEADR, F, ACCESS
                      02290         IF HAS_STATUS_LEDS
                      02291          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () () R
                      02292         ENDIF
                      02293 
0002D8 2E00           02294         DECFSZ  I, F, ACCESS
0002DA D???           02295         BRA     FACTORY_RESET_LOOP
                      02296         END_EEPROM_WRITE
0002DC 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
0002DE 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
0002E0 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
0002E2 6AAA               M          CLRF   EEADRH, ACCESS
0002E4 6AA9               M          CLRF   EEADR, ACCESS
                      02297 
0002E6 0E10           02298         MOVLW   .16
0002E8 6E00           02299         MOVWF   I, ACCESS
                      02300 
0002EA 0004           02301         CLRWDT
0002EC 9EF2           02302         BCF     INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
0002EE 9CF2           02303         BCF     INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02304 
0002F0                02305 FACTORY_RESET_FLASH:
                      02306         IF HAS_STATUS_LEDS
                      02307          IF HAS_ACTIVE
                      02308           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: A G Y R
                      02309          ENDIF
                      02310          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02311          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02312          BSF    PLAT_RED, BIT_RED, ACCESS
                      02313          RCALL  DELAY_1_12_SEC
                      02314          IF HAS_ACTIVE
                      02315           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: () () () ()
                      02316          ENDIF
                      02317          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02318          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02319          BCF    PLAT_RED, BIT_RED, ACCESS
                      02320          RCALL  DELAY_1_6_SEC
                      02321          DECFSZ I, F, ACCESS
                      02322          BRA    FACTORY_RESET_FLASH
                      02323         ENDIF
0002F0 00FF           02324         RESET
                      02325 
0002F2                02326 DELAY_1_12_SEC: ; Approx 1/12 sec delay loop
0002F2 0004           02327         CLRWDT
0002F4 0E04           02328         MOVLW   .4
0002F6 6E00           02329         MOVWF   KK, ACCESS
0002F8 D???           02330         BRA     D_1_6_KK
                      02331 
0002FA                02332 DELAY_1_6_SEC:  ; Approx 1/6 sec delay loop
0002FA 0004           02333         CLRWDT
0002FC 0E08           02334         MOVLW   .8
0002FE 6E00           02335         MOVWF   KK, ACCESS
000300                02336 D_1_6_KK:
000300 6800           02337         SETF    J, ACCESS
000302                02338 D_1_6_J:
000302 6800           02339         SETF    K, ACCESS
000304                02340 D_1_6_K:
000304 2E00           02341         DECFSZ  K, F, ACCESS
000306 D???           02342         BRA     D_1_6_K
000308 2E00           02343         DECFSZ  J, F, ACCESS
00030A D???           02344         BRA     D_1_6_J
00030C 2E00           02345         DECFSZ  KK, F, ACCESS
00030E D???           02346         BRA     D_1_6_KK
000310 0012           02347         RETURN
                      02348 
                      02349 ;==============================================================================
                      02350 ; INTERRUPT HANDLERS
                      02351 ;______________________________________________________________________________
                      02352 _INT    CODE
000000                02353 INT_LOW:
000000 6E00           02354         MOVWF   ISR_TMPL_WREG, ACCESS   ; Save W, status, and bank registers
000002 CFD8 F???      02355         MOVFF   STATUS, ISR_TMPL_STATUS
000006 CFE0 F???      02356         MOVFF   BSR, ISR_TMPL_BSR
                      02357         ;
                      02358         ; Serial I/O ready for transmit?
                      02359         ;
00000A                02360 INT_TX:
00000A A89E           02361         BTFSS   PIR1, TXIF, ACCESS
00000C D???           02362         BRA     INT_TX_END
00000E EC?? F???      02363         CALL    SIO_SEND                ; push next byte out
000012 989E           02364         BCF     PIR1, TXIF, ACCESS      ; acknowledge interrupt
000014                02365 INT_TX_END:
                      02366         ;
                      02367         ; Serial I/O received a byte?
                      02368         ;
000014                02369 INT_RX:
000014 AA9E           02370         BTFSS   PIR1, RCIF, ACCESS
000016 D???           02371         BRA     INT_RX_END
000018 EC?? F???      02372         CALL    SIO_RECV                ; grab next byte
00001C 9A9E           02373         BCF     PIR1, RCIF, ACCESS      ; acknowledge interrupt
00001E                02374 INT_RX_END:
                      02375         ;
                      02376         ; Finished with low-priority interrupts.
                      02377         ; Clean up and go home.
                      02378         ;
00001E C??? FFE0      02379         MOVFF   ISR_TMPL_BSR, BSR
000022 5000           02380         MOVF    ISR_TMPL_WREG, W, ACCESS
000024 C??? FFD8      02381         MOVFF   ISR_TMPL_STATUS, STATUS
000028 0010           02382         RETFIE
                      02383 
00002A                02384 INT_HIGH:
                      02385         ; High-priority interrupts automatically
                      02386         ; save state (fast interrupt call)
                      02387         ;
                      02388         ; Zero-crossing start-of-cycle event signal
                      02389         ;
00002A                02390 INT_ZC:
                      02391         IF LUMOS_SLICE_TIMER==LUMOS_ZC
                      02392          BTFSS  INTCON, INT0IF, ACCESS  ; ZC signal asserted?
                      02393          BRA    INT_ZC_END              ; no, move along...
                      02394          BCF    INTCON, INT0IF, ACCESS  ; acknowledge interrupt
                      02395         ELSE
                      02396          IF LUMOS_SLICE_TIMER==LUMOS_INTERNAL
00002A A4F2           02397           BTFSS INTCON, TMR0IF, ACCESS  ; 120 Hz timer expired?
00002C D???           02398           BRA   INT_ZC_END              ; no, move along...
00002E 0E5D           02399           MOVLW HIGH(CYCLE_TMR_PERIOD)  ; reset timer for another 1/120 sec.
000030 6ED7           02400           MOVWF TMR0H, ACCESS
000032 0E3D           02401           MOVLW LOW(CYCLE_TMR_PERIOD)
000034 6ED6           02402           MOVWF TMR0L, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000036 94F2           02403           BCF   INTCON, TMR0IF, ACCESS  ; acknowledge interrupt
                      02404          ELSE
                      02405           ERROR "LUMOS_SLICE_TIMER not set correctly"
                      02406          ENDIF
                      02407         ENDIF
000038 8C00           02408         BSF     SSR_STATE, PRECYC, ACCESS       ; mark start of pre-cycle countdown
00003A 8C00           02409         BSF     SSR_STATE2, TEST_UPD, ACCESS    ; time for next test-mode countdown
00003C C??? F???      02410         MOVFF   PHASE_OFFSETH, CUR_PREH
000040 C??? F???      02411         MOVFF   PHASE_OFFSETL, CUR_PRE
                      02412         ;
                      02413         ; handle OPTION button
                      02414         ; increment hold counter if we see it pressed, decrement if not.
                      02415         ;
                      02416         IF HAS_OPTION
                      02417          COMF   OPTION_DEBOUNCE, W, ACCESS      ; button fully on?
                      02418          BZ     INT_ZC_OPTION_ON
                      02419          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; button fully off?
                      02420          BRA    INT_ZC_OPTION_UNDEFINED
                      02421 INT_ZC_OPTION_OFF:
                      02422          TSTFSZ OPTION_HOLD, ACCESS             ; unless already at zero,
                      02423          DECF   OPTION_HOLD, F, ACCESS          ; decrement counter
                      02424          BRA    INT_ZC_END_OPTION
                      02425 INT_ZC_OPTION_ON:
                      02426          INFSNZ OPTION_HOLD, F, ACCESS          ; increment counter
                      02427          SETF   OPTION_HOLD, ACCESS             ; but don't let it overflow
                      02428 INT_ZC_OPTION_UNDEFINED:
                      02429          ; If the button is still floating between on and off, don't
                      02430          ; count it yet.  It needs to stay on or off for a while before
                      02431          ; we count it toward the hold time.
                      02432 INT_ZC_END_OPTION:
                      02433         ENDIF
000044                02434 INT_ZC_END:
                      02435         ;
                      02436         ; Start of cycle slice signal
                      02437         ;
000044                02438 INT_TMR2:
000044 A29E           02439         BTFSS   PIR1, TMR2IF, ACCESS            ; has timer expired?
000046 D???           02440         BRA     INT_TMR2_END                    ; no, move along...
                      02441         ;
                      02442         ; debounce OPTION button
                      02443         ;
                      02444         IF HAS_OPTION
                      02445          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS ; is option button triggered? (active-low)
                      02446          BRA    INT_OPTION_OFF                  
                      02447 INT_OPTION_ON:
                      02448          INFSNZ OPTION_DEBOUNCE, F, ACCESS      ; increment bounce counter
                      02449          SETF   OPTION_DEBOUNCE, ACCESS         ; but not too far - don't overflow
                      02450          BRA    INT_OPTION_END
                      02451 INT_OPTION_OFF:
                      02452          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; if not already at zero,
                      02453          DECF   OPTION_DEBOUNCE, F, ACCESS      ; decrement counter
                      02454 INT_OPTION_END:
                      02455         ENDIF
                      02456         ;
                      02457         ; rest of cycle timing code
                      02458         ;
000048 AC00           02459         BTFSS   SSR_STATE, PRECYC, ACCESS       ; are we in pre-cycle countdown?
00004A D???           02460         BRA     INT_TMR2_NEXT                   ; no, signal next update run
00004C 2E00           02461         DECFSZ  CUR_PRE, F, ACCESS              ; count down
00004E D???           02462         BRA     INT_TMR2_DONE
000050 6600           02463         TSTFSZ  CUR_PREH, ACCESS                ; high-order byte
000052 D???           02464         BRA     INT_TMR2_MSB
000054 9C00           02465         BCF     SSR_STATE, PRECYC, ACCESS       ; END pre-cycle
000056 8E00           02466         BSF     SSR_STATE, INCYC, ACCESS        ; BEGIN active cycle
000058 6800           02467         SETF    CUR_SLICE, ACCESS               ; initial slice value 0xFF (will count down to 0x00)
00005A                02468 INT_TMR2_NEXT:
00005A BE00           02469         BTFSC   SSR_STATE, INCYC, ACCESS        ; if we're in active dimmer cycle now,
00005C 8A00           02470         BSF     SSR_STATE, SLICE_UPD, ACCESS    ; then signal next update run
00005E                02471 INT_TMR2_DONE:
00005E 929E           02472         BCF     PIR1, TMR2IF, ACCESS            ; acknowledge interrrupt
000060                02473 INT_TMR2_END:
                      02474 
000060 0011           02475         RETFIE  FAST
                      02476 
000062                02477 INT_TMR2_MSB:
000062 0600           02478         DECF    CUR_PREH, F, ACCESS             ; tick down MSB, start another loop
000064 6800           02479         SETF    CUR_PRE, ACCESS
000066 D???           02480         BRA     INT_TMR2_DONE
                      02481 
                      02482 ;==============================================================================
                      02483 ; ACCESS DATA BANK
                      02484 ;______________________________________________________________________________
                      02485 _ADATA  UDATA_ACS       0x000
000000                02486 ISR_TMPL_STATUS RES     1
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000001                02487 ISR_TMPL_BSR    RES     1
000002                02488 ISR_TMPL_WREG   RES     1
                      02489 ;ISR_TMPH_STATUS        RES     1
                      02490 ;ISR_TMPH_BSR   RES     1
                      02491 ;ISR_TMPH_WREG  RES     1
000003                02492 MY_ADDRESS      RES     1
000004                02493 PHASE_OFFSETH   RES     1
000005                02494 PHASE_OFFSETL   RES     1
000006                02495 SSR_STATE       RES     1               ; major state/timing flags
000007                02496 SSR_STATE2      RES     1               ; major state/timing flags
000008                02497 DMX_SLOTH       RES     1
000009                02498 DMX_SLOTL       RES     1
00000A                02499 YY_STATE        RES     1
00000B                02500 YY_COMMAND      RES     1
00000C                02501 YY_CMD_FLAGS    RES     1
00000D                02502 YY_DATA         RES     1
00000E                02503 YY_LOOKAHEAD_MAX RES    1
00000F                02504 YY_LOOK_FOR     RES     1
000010                02505 YY_BUF_IDX      RES     1
000011                02506 YY_NEXT_STATE   RES     1
000012                02507 YY_YY           RES     1
000013                02508 LAST_ERROR      RES     1
000014                02509 CUR_PREH        RES     1
000015                02510 CUR_PRE         RES     1
000016                02511 CUR_SLICE       RES     1
000017                02512 TARGET_SSR      RES     1
000018                02513 OPTION_DEBOUNCE RES     1
000019                02514 OPTION_HOLD     RES     1
00001A                02515 TEST_CYCLE      RES     1
00001B                02516 TEST_SSR        RES     1
00001C                02517 AUTO_OFF_CTRH   RES     1
00001D                02518 AUTO_OFF_CTRL   RES     1
00001E                02519 EIGHTBITSIOBUF  RES     1               ; buffer for 8-bit data adjustments
00001F                02520 I               RES     1
000020                02521 J               RES     1
000021                02522 K               RES     1
000022                02523 KK              RES     1
000023                02524 TR_I            RES     1
                      02525 ;                      --
                      02526 ;                      35
                      02527 
                      02528 ;==============================================================================
                      02529 ; DATA BANK 4
                      02530 ;______________________________________________________________________________
                      02531  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000400            02532 SSR_DATA_BANK   EQU     0x400
  00000500            02533 MAIN_DATA       EQU     0x500
  000000C8            02534 YY_BUF_LEN      EQU     .200
                      02535  ELSE
                      02536   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      02537 SSR_DATA_BANK   EQU     0x060
                      02538 MAIN_DATA       EQU     0x088
                      02539 YY_BUF_LEN      EQU     .90 
                      02540   ELSE
                      02541    ERROR "Invalid architecture switch for SSR_DATA_BANK"
                      02542   ENDIF
                      02543  ENDIF
                      02544 
                      02545 _SSR_DATA       UDATA   SSR_DATA_BANK
                      02546 ;
                      02547 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      02548 ; and in fact, that size must be SSR_BLOCK_LEN.  THEY MUST ALSO be
                      02549 ; in this order, due to some optimizations that occur in the code.
                      02550 ;
  00000014            02551 SSR_BLOCK_LEN   EQU     SSR_MAX+1
000400                02552 SSR_00_VALUE    RES     SSR_BLOCK_LEN   ; each SSR value 0x00-FF
000414                02553 SSR_00_FLAGS    RES     SSR_BLOCK_LEN
000428                02554 SSR_00_STEP     RES     SSR_BLOCK_LEN
00043C                02555 SSR_00_SPEED    RES     SSR_BLOCK_LEN
000450                02556 SSR_00_COUNTER  RES     SSR_BLOCK_LEN
                      02557 
                      02558 ;==============================================================================
                      02559 ; DATA BANK 5: MAIN CODE DATA STORAGE
                      02560 ;______________________________________________________________________________
                      02561 _MAINDATA       UDATA   MAIN_DATA
000500                02562 YY_BUFFER       RES     YY_BUF_LEN
                      02563 
                      02564 ;==============================================================================
                      02565 ; DATA BANKS 6-: SEQUENCE STORAGE
                      02566 ;______________________________________________________________________________
  00000600            02567 SEQ_DATA        EQU     0x600                   ; XXX NOT on 14K50!!!
                      02568 _SEQ_DATA       UDATA   SEQ_DATA
                      02569 
                      02570 ;==============================================================================
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02571 ; MAINLINE CODE
                      02572 ;______________________________________________________________________________
                      02573 _MAIN   CODE    0x0800
000800                02574 MAIN:
000800 0004           02575         CLRWDT
000802 BA00           02576         BTFSC   SSR_STATE, SLICE_UPD, ACCESS
000804 EC?? F???      02577         CALL    UPDATE_SSR_OUTPUTS
                      02578 
                      02579         ; DMX mode: poll for framing error to start DMX frame reception
000808 AE00           02580         BTFSS   DMX_SLOTH, DMX_EN, ACCESS
00080A D???           02581         BRA     NOT_DMX
00080C 0103           02582         BANKSEL SIO_DATA_START
00080E AB00           02583         BTFSS   SIO_STATUS, SIO_FERR, BANKED    ; Did SIO code find a framing error first?
000810 D???           02584         BRA     BRK_DET2                        ; No, check ourselves then
                      02585         IF HAS_ACTIVE
                      02586          SET_SSR_BLINK_FADE SSR_ACTIVE
                      02587         ENDIF
000812 EC?? F???      02588         CALL    SIO_GETCHAR                     ; Yes, then read the byte we received
000816 6700           02589         TSTFSZ  SIO_INPUT, BANKED               ; ...  is the received byte all zeroes?
000818 D???           02590         BRA     NOT_DMX                         ; No, must not really be a break then
00081A 0103           02591         BANKSEL SIO_DATA_START
00081C 9B00           02592         BCF     SIO_STATUS, SIO_FERR, BANKED    ; Yes: clear the status and proceed
00081E D???           02593         BRA     BRK_DET
000820                02594 BRK_DET2:
000820 A4AB           02595         BTFSS   RCSTA, FERR, ACCESS
000822 D???           02596         BRA     NOT_DMX
                      02597         ; found framing error -- is it a break?
                      02598         IF HAS_ACTIVE
                      02599          SET_SSR_BLINK_FADE SSR_ACTIVE
                      02600         ENDIF
000824 50AE           02601         MOVF    RCREG, W, ACCESS        ; read byte, clear FERR, see if data all zeroes
000826 E1??           02602         BNZ     NOT_DMX                 ; no, must be line noise, carry on...
000828                02603 BRK_DET:
                      02604         ;
                      02605         ; BREAK DETECTED
                      02606         ;
                      02607         ; Now we start counting while we watch the RxD line for the 0->1 transition
                      02608         ; If it took <56uS, we'll interpret it as noise.  Otherwise, it's a break and
                      02609         ; the start of our DMX frame.  As a safety measure, if the break lasts longer
                      02610         ; than ~8,000uS, we abandon the frame.
                      02611         ; 
                      02612         IF HAS_STATUS_LEDS
                      02613          SET_SSR_BLINK_FADE SSR_YELLOW
                      02614         ENDIF
000828 9A9D           02615         BCF     PIE1, RCIE, ACCESS      ; Disable RxD interrupts for now
00082A 0EE0           02616         MOVLW   0xE0
00082C 6EB3           02617         MOVWF   TMR3H, ACCESS
00082E 0EC7           02618         MOVLW   0xC7
000830 6EB2           02619         MOVWF   TMR3L, ACCESS           ; $E0C7 is 7,992 away from overflowing and 56 away
                      02620                                         ; from overflowing the LSB
000832 92A1           02621         BCF     PIR2, TMR3IF, ACCESS    ; Clear overflow status bit
000834 92A0           02622         BCF     PIE2, TMR3IE, ACCESS    ; Don't use as interrupt
000836 80B1           02623         BSF     T3CON, TMR3ON, ACCESS   ; Start Timer 3 Running
                      02624         ;
                      02625         ; Watch the RxD line for a transition away from the break
                      02626         ;
000838                02627 WATCH_BREAK:
000838 0004           02628         CLRWDT
00083A BA00           02629         BTFSC   SSR_STATE, SLICE_UPD, ACCESS    ; keep updating SSR outputs during this
00083C EC?? F???      02630         CALL    UPDATE_SSR_OUTPUTS
000840 BE82           02631         BTFSC   PORT_RX, BIT_RX, ACCESS ; Is the line 0?
000842 D???           02632         BRA     BREAK_CONFIRMED
000844 A2A1           02633         BTFSS   PIR2, TMR3IF, ACCESS    ; Did we exceed our limit?
000846 D???           02634         BRA     WATCH_BREAK
                      02635         ;
                      02636         ; We've been holding too long, give up on the break signal.
                      02637         ; 
000848 90B1           02638         BCF     T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
00084A 8A9D           02639         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
00084C D???           02640         BRA     BAD_BREAK
                      02641 
00084E                02642 BREAK_CONFIRMED:
                      02643         ;
                      02644         ; Break over, reset UART and interpret frame
                      02645         ;
                      02646         IF HAS_STATUS_LEDS
                      02647          SET_SSR_BLINK_FADE SSR_RED
                      02648         ENDIF
00084E 90B1           02649         BCF     T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
000850 8A9D           02650         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
000852 98AB           02651         BCF     RCSTA, CREN, ACCESS
000854 88AB           02652         BSF     RCSTA, CREN, ACCESS
000856 0EE0           02653         MOVLW   0xE0
000858 50B2           02654         MOVF    TMR3L, W, ACCESS        ; Initiate 16-bit read of TMR3 register
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00085A 62B3           02655         CPFSEQ  TMR3H, ACCESS           ; If MSB of Timer3 advanced, it was >56uS
00085C D???           02656         BRA     START_DMX_FRAME         ; and therefore the start of the frame
                      02657         ;                               ; If not, it's noise and we interpret as "NOT_DMX"
                      02658         ;        | |
                      02659         ;       _| |_
                      02660         ;       \   /
                      02661         ;        \ /
                      02662         ;         V
00085E                02663 NOT_DMX:
00085E 0103           02664         BANKSEL SIO_DATA_START
000860 BB00           02665         BTFSC   SIO_STATUS, SIO_FERR, BANKED
000862                02666 BAD_BREAK:
000862 D???           02667         RCALL   ERR_SERIAL_FRAMING
                      02668 
000864 0103           02669         BANKSEL SIO_DATA_START
000866 B900           02670         BTFSC   SIO_STATUS, SIO_ORUN, BANKED
000868 D???           02671         RCALL   ERR_SERIAL_OVERRUN
                      02672 
00086A 0103           02673         BANKSEL SIO_DATA_START
00086C B700           02674         BTFSC   SIO_STATUS, RXDATA_FULL, BANKED
00086E D???           02675         RCALL   ERR_SERIAL_FULL
                      02676 
000870 0103           02677         BANKSEL SIO_DATA_START
000872 A300           02678         BTFSS   SIO_STATUS, RXDATA_QUEUE, BANKED
000874 D???           02679         BRA     END_SERIAL_READ
000876 B000           02680         BTFSC   SSR_STATE, TEST_MODE, ACCESS
000878 D???           02681         BRA     TEST_MODE_BYPASS
00087A D???           02682         RCALL   RECEIVE_COMMAND
00087C D???           02683         BRA     END_SERIAL_READ
00087E                02684 TEST_MODE_BYPASS:
00087E EC?? F???      02685         CALL    SIO_READ                ; read and discard input while in test mode
000882                02686 END_SERIAL_READ:
                      02687 
000882 B400           02688         BTFSC   SSR_STATE, DRAIN_TR, ACCESS
000884 D???           02689         RCALL   DRAIN_TRANSMITTER
                      02690 
000886 B000           02691         BTFSC   SSR_STATE, TEST_MODE, ACCESS
000888 D???           02692         RCALL   DO_TEST_MODE
                      02693 
                      02694         IF HAS_OPTION
                      02695 OPTION_HANDLER:
                      02696          BTFSS  SSR_STATE, PRIV_MODE, ACCESS            ; are we in privileged mode?
                      02697          BRA    OPTION_PRE_PRIV                         ; no, check if we're in pre-priv...
                      02698                                                         ; ----------------------------------------------
                            ---PRIV_MODE
                      02699          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; PRIV_MODE+PRE_PRIV: transitioning to TEST mode
                      02700          BRA    OPTION_PRIV_MODE                        ; just PRIV_MODE: skip down a bit...
                      02701          TSTFSZ OPTION_DEBOUNCE, ACCESS                 ; has button released yet?
                      02702          BRA    END_OPTION_HANDLER                      ; no, keep waiting
                      02703          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; yes: move to test mode now
                      02704          BSF    SSR_STATE, TEST_MODE, ACCESS
                      02705          MOVLW  .120
                      02706          MOVWF  TEST_CYCLE, ACCESS
                      02707          SETF   TEST_SSR, ACCESS                        ; initialize ssr index
                      02708          CLRF   OPTION_HOLD, ACCESS
                      02709          IF HAS_STATUS_LEDS
                      02710           IF HAS_ACTIVE
                      02711            SET_SSR_OFF SSR_ACTIVE
                      02712           ENDIF
                      02713           SET_SSR_OFF SSR_GREEN
                      02714           SET_SSR_OFF SSR_YELLOW
                      02715           SET_SSR_OFF SSR_RED
                      02716          ENDIF
                      02717          IF ROLE_MASTER
                      02718           MOVLW 0xF0                                    ; send to slave chip: F0 21 00000000 00000000
                      02719           CALL  SIO_WRITE_W                             ; (all LEDs off)
                      02720           MOVLW 0x21
                      02721           CALL  SIO_WRITE_W
                      02722           MOVLW 0x00
                      02723           CALL  SIO_WRITE_W
                      02724           MOVLW 0x00
                      02725           CALL  SIO_WRITE_W
                      02726          ENDIF
                      02727          RCALL  S0_CMD0                                 ; blackout all SSR outputs
                      02728          BRA    END_OPTION_HANDLER
                      02729 
                      02730 OPTION_PRIV_MODE:
                      02731          COMF   OPTION_HOLD, W, ACCESS                  ; is option pressed ~2s?
                      02732          BNZ    END_OPTION_HANDLER                      ; no
                      02733          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; set PRE_PRIV (wait for button release)
                      02734          BRA    END_OPTION_HANDLER
                      02735 
                      02736 OPTION_PRE_PRIV:                                        
                      02737          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; are we in pre-priv state?
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02738          BRA    OPTION_NORMAL                           ; no, must be normal operating mode.
                      02739          TSTFSZ OPTION_HOLD, ACCESS                     ; ----------------------------------------------
                            ----PRE_PRIV
                      02740          BRA    END_OPTION_HANDLER                      ; wait for button to be released ~2s
                      02741          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; move to privileged run mode
                      02742          BTFSC  SSR_STATE2, PRIV_FORBID, ACCESS         ; unless we have privileges locked out now...
                      02743          BRA    END_OPTION_HANDLER
                      02744          BSF    SSR_STATE, PRIV_MODE, ACCESS            ; turn on privileged mode
                      02745          IF HAS_STATUS_LEDS
                      02746           IF HAS_ACTIVE
                      02747            SET_SSR_BLINK_FADE SSR_ACTIVE
                      02748           ENDIF
                      02749           SET_SSR_BLINK_FADE SSR_YELLOW
                      02750           SET_SSR_BLINK_FADE SSR_RED
                      02751          ENDIF
                      02752          IF ROLE_MASTER
                      02753           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101000 00000000
                      02754           CALL  SIO_WRITE_W                             ; (rapid flash green, others off)
                      02755           MOVLW 0x21
                      02756           CALL  SIO_WRITE_W
                      02757           MOVLW 0x28
                      02758           CALL  SIO_WRITE_W
                      02759           MOVLW 0x00
                      02760           CALL  SIO_WRITE_W
                      02761          ENDIF
                      02762          CALL   DMX_EXIT_TEMPORARILY
                      02763          BRA END_OPTION_HANDLER
                      02764 
                      02765 OPTION_NORMAL:                                          ; ----------------------------------------------
                            ------NORMAL
                      02766          COMF   OPTION_HOLD, W, ACCESS                  ; has option been held full time?
                      02767          BNZ    END_OPTION_HANDLER                      ; nope, move along...
                      02768          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; yes, initiate pre-priv mode (wait for button r
                            elease)
                      02769          IF HAS_STATUS_LEDS
                      02770           IF HAS_ACTIVE
                      02771            SET_SSR_RAPID_FLASH SSR_ACTIVE
                      02772           ENDIF
                      02773           SET_SSR_RAPID_FLASH SSR_GREEN
                      02774           SET_SSR_RAPID_FLASH SSR_YELLOW
                      02775           SET_SSR_RAPID_FLASH SSR_RED
                      02776          ENDIF
                      02777          IF ROLE_MASTER
                      02778           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101101 00000101
                      02779           CALL  SIO_WRITE_W                             ; (rapid flash all LEDs)
                      02780           MOVLW 0x21
                      02781           CALL  SIO_WRITE_W
                      02782           MOVLW 0x2D
                      02783           CALL  SIO_WRITE_W
                      02784           MOVLW 0x05
                      02785           CALL  SIO_WRITE_W
                      02786          ENDIF
                      02787 END_OPTION_HANDLER:
                      02788         ENDIF
                      02789 
                      02790         ; OPTION button handler
                      02791         ; normal: option held ~2s, -> init option mode
                      02792         ; initopt: option released -> priv mode
                      02793         ; priv: option held ~2s and release -> test mode
                      02794         ; test: option press -> pause, wait for release
                      02795         ; pause: option press -> wait for release, test
                      02796         ; XXX test/pause: option held ~2s -> priv
                      02797 
00088A D???           02798         BRA     MAIN
                      02799         
00088C                02800 DRAIN_TRANSMITTER:
                      02801         IF HAS_T_R
00088C 0103           02802          BANKSEL SIO_DATA_START
00088E B100           02803          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED        ; data still waiting in our output buffer?
000890 0012           02804          RETURN
000892 A89E           02805          BTFSS  PIR1, TXIF, ACCESS                      ; data in transit into UART shift register?
000894 0012           02806          RETURN
000896 A2AC           02807          BTFSS  TXSTA, TRMT, ACCESS                     ; data being shifted out now?
000898 0012           02808          RETURN
00089A 9400           02809          BCF    SSR_STATE, DRAIN_TR, ACCESS             ; none of the above--shut down transmitter now
00089C EC?? F???      02810          CALL   TR_OFF_DELAY
0008A0 968B           02811          BCF    PLAT_T_R, BIT_T_R, ACCESS               
0008A2 0012           02812          RETURN
                      02813         ELSE
                      02814          ERR_BUG 0x11, ERR_CLASS_DEVICE
                      02815         ENDIF
                      02816 
0008A4                02817 DRAIN_M_S_TX_BLOCKING:
                      02818         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02819         ; version of DRAIN_TRANSMITTER which is designed to clear
                      02820         ; master->slave comms in critical situations.  Blocks until
                      02821         ; the pending output is sent to the slave.
                      02822         ;
                      02823         IF ROLE_MASTER
                      02824          BANKSEL SIO_DATA_START
                      02825          CLRWDT
                      02826 DRAIN_M_S_DRAIN_SIO_QUEUE:
                      02827          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED
                      02828          BRA    DRAIN_M_S_DRAIN_SIO_QUEUE
                      02829          CLRWDT
                      02830 DRAIN_M_S_DRAIN_UART_TX_BUF:
                      02831          BTFSS  PIR1, TXIF, ACCESS
                      02832          BRA    DRAIN_M_S_DRAIN_UART_TX_BUF
                      02833          CLRWDT
                      02834 DRAIN_M_S_DRAIN_UART_SHIFT_REG:
                      02835          BTFSS  TXSTA, TRMT, ACCESS
                      02836          BRA    DRAIN_M_S_DRAIN_UART_SHIFT_REG
                      02837          CLRWDT
                      02838          RETURN
                      02839         ELSE
                      02840          ERR_BUG 0x12, ERR_CLASS_DEVICE
0008A4 0E12               M          MOVLW  0x12
0008A6 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_DEVICE == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_DEVICE == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_DEVICE == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0008A8 6A00               M          CLRF   YY_STATE, ACCESS
0008AA 0012               M          RETURN
                      02841         ENDIF
                      02842 
0008AC                02843 DO_TEST_MODE:
0008AC 0004           02844         CLRWDT
                      02845 
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008AE 1C00           02846         COMF    OPTION_DEBOUNCE, W, ACCESS      ; is option button pressed?
0008B0 E1??           02847         BNZ     TEST_NOT_PRESSED
0008B2 8A00           02848         BSF     SSR_STATE2, TEST_BUTTON, ACCESS ; yes, keep waiting for it to be released
0008B4 D???           02849         BRA     TEST_MODE_1
0008B6                02850 TEST_NOT_PRESSED:
0008B6 6600           02851         TSTFSZ  OPTION_DEBOUNCE, ACCESS         ; is option button fully off?
0008B8 D???           02852         BRA     TEST_MODE_1
0008BA AA00           02853         BTFSS   SSR_STATE2, TEST_BUTTON, ACCESS ; were we waiting for this button cycle event?
0008BC D???           02854         BRA     TEST_MODE_1                     ; 
                      02855         ;
                      02856         ; OPTION button was pressed and then released.  Toggle pause state.
                      02857         ;
0008BE 9A00           02858         BCF     SSR_STATE2, TEST_BUTTON, ACCESS ; 
0008C0 7E00           02859         BTG     SSR_STATE2, TEST_PAUSE, ACCESS  ;
0008C2 6800           02860         SETF    TEST_CYCLE, ACCESS              ; reset cycle timer
                      02861         IF ROLE_MASTER                          ; MASTER  SLAVE           STANDALONE
                      02862          MOVLW  0xF0                            ; A G Y R G Y R           A G Y R
                      02863          CALL   SIO_WRITE_W                     ; b3b2b1b0b5b4(*)         b2b1b0(*)  run
                      02864          MOVLW  0x21                            ;              *                 *   pause
                      02865          CALL   SIO_WRITE_W
                      02866          MOVLW  B'00111111'
                      02867          CALL   SIO_WRITE_W
                      02868          MOVLW  B'00000001'
                      02869          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
                      02870          MOVLW  B'00000010'
                      02871          CALL   SIO_WRITE_W
                      02872         ELSE
0008C4 AE00           02873          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
0008C6 D???           02874          BRA    TEST_NP_1
                      02875          IF HAS_STATUS_LEDS
                      02876           SET_SSR_STEADY SSR_RED
                      02877          ENDIF
0008C8 D???           02878          BRA    TEST_NP_2
0008CA                02879 TEST_NP_1:
                      02880          IF HAS_STATUS_LEDS
                      02881           SET_SSR_SLOW_FADE SSR_RED
                      02882          ENDIF
0008CA                02883 TEST_NP_2:
                      02884         ENDIF
                      02885         
0008CA                02886 TEST_MODE_1:
0008CA AE00           02887         BTFSS   SSR_STATE2, TEST_PAUSE, ACCESS  ; paused? 
0008CC AC00           02888         BTFSS   SSR_STATE2, TEST_UPD, ACCESS    ; time to count down?
0008CE 0012           02889         RETURN                                  ; either we're paused or not time to update; stop.
                      02890         
0008D0 9C00           02891         BCF     SSR_STATE2, TEST_UPD, ACCESS    ; clear flag about being time to update
0008D2 2E00           02892         DECFSZ  TEST_CYCLE, F, ACCESS           ; count down until time to change channels
0008D4 0012           02893         RETURN
0008D6 0E78           02894         MOVLW   .120
0008D8 6E00           02895         MOVWF   TEST_CYCLE, ACCESS              ; reset counter time for next channel
                      02896 
0008DA D???           02897         RCALL   S0_CMD0                         ; kill all outputs
0008DC 2A00           02898         INCF    TEST_SSR, F, ACCESS             ; jump to next SSR
0008DE 0E14           02899         MOVLW   NUM_CHANNELS
0008E0 6000           02900         CPFSLT  TEST_SSR, ACCESS                ; channel > last channel?
0008E2 6A00           02901         CLRF    TEST_SSR, ACCESS                ; cycle to 0 if exceeded our limit
                      02902 
0008E4 0E3F           02903         MOVLW   0x3F
0008E6 1400           02904         ANDWF   TEST_SSR, W, ACCESS             ; keep to limits of channel number
0008E8 6E00           02905         MOVWF   YY_DATA, ACCESS                 ; set up YY_DATA for ON_OFF call
0008EA 8C00           02906         BSF     YY_DATA, 6, ACCESS              ; turn on
0008EC D???           02907         RCALL   ON_OFF_YY_DATA                  ; execute
                      02908 
0008EE 0104           02909         BANKSEL SSR_DATA_BANK
                      02910         IF HAS_STATUS_LEDS
                      02911          CLRF   SSR_00_VALUE + SSR_RED, BANKED
                      02912          CLRF   SSR_00_VALUE + SSR_YELLOW, BANKED
                      02913          CLRF   SSR_00_VALUE + SSR_GREEN, BANKED
                      02914          IF HAS_ACTIVE
                      02915           CLRF  SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02916          ENDIF
                      02917         ENDIF
                      02918 
                      02919         IF ROLE_MASTER                                  ; MASTER----- SLAVE---      STANDALONE-
                      02920          IF HAS_STATUS_LEDS
                      02921           BTFSC TEST_SSR, 2, ACCESS                     ; A  G  Y  R  G  Y  R       A  G  Y  R
                      02922           SETF  SSR_00_VALUE + SSR_RED, BANKED          ; b5 b4 b3 b2 b1 b0 (*)     b2 b1 b0 (*)
                      02923           BTFSC TEST_SSR, 3, ACCESS
                      02924           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      02925           BTFSC TEST_SSR, 4, ACCESS
                      02926           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      02927           IF HAS_ACTIVE
                      02928            BTFSC TEST_SSR, 5, ACCESS
                      02929            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02930           ENDIF
                      02931          ENDIF
                      02932 
                      02933          MOVLW  0xF0                                    ; send to slave chip: F0 21 00gggyyy 00000rrr
                      02934          CALL   SIO_WRITE_W
                      02935          MOVLW  0x21
                      02936          CALL   SIO_WRITE_W
                      02937          CLRF   WREG, ACCESS
                      02938          BTFSC  TEST_SSR, 1, ACCESS
                      02939          BSF    WREG, 3, ACCESS
                      02940          BTFSC  TEST_SSR, 0, ACCESS
                      02941          BSF    WREG, 0, ACCESS
                      02942          CALL   SIO_WRITE_W
                      02943          MOVLW  0x02
                      02944          CALL   SIO_WRITE_W
                      02945         ELSE
                      02946          IF HAS_STATUS_LEDS
                      02947           BTFSC TEST_SSR, 0, ACCESS
                      02948           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      02949           BTFSC TEST_SSR, 1, ACCESS
                      02950           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      02951           IF HAS_ACTIVE
                      02952            BTFSC TEST_SSR, 2, ACCESS
                      02953            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02954           ENDIF
                      02955           SET_SSR_SLOW_FADE SSR_RED
                      02956          ENDIF
                      02957         ENDIF
                      02958 
0008F0 0012           02959         RETURN
                      02960 
0008F2                02961 ERR_SERIAL_FRAMING:
0008F2 0103           02962         BANKSEL SIO_DATA_START
0008F4 9B00           02963         BCF     SIO_STATUS, SIO_FERR, BANKED
                      02964 ;       BTFSC   DMX_SLOTH, DMX_EN, ACCESS
                      02965 ;       BRA     START_DMX_FRAME
                      02966         IF HAS_STATUS_LEDS
                      02967          SET_SSR_RAPID_FLASH SSR_RED
                      02968          SET_SSR_STEADY SSR_YELLOW
                      02969         ENDIF
0008F6 0012           02970         RETURN
0008F8                02971 START_DMX_FRAME:
                      02972         ;
                      02973         ; We're in DMX mode so a framing error (aka break) is really
                      02974         ; not an error, but the start of our data frame!
                      02975         ;
0008F8 8A00           02976         BSF     DMX_SLOTH, DMX_FRAME, ACCESS
                      02977         IF HAS_STATUS_LEDS
                      02978          SET_SSR_RAPID_FLASH SSR_YELLOW
                      02979         ENDIF
0008FA 0012           02980         RETURN
                      02981         
0008FC                02982 ERR_SERIAL_OVERRUN:
0008FC 0103           02983         BANKSEL SIO_DATA_START
0008FE 9900           02984         BCF     SIO_STATUS, SIO_ORUN, BANKED
                      02985         IF HAS_STATUS_LEDS
                      02986          SET_SSR_RAPID_FLASH SSR_RED
                      02987          SET_SSR_RAPID_FLASH SSR_YELLOW
                      02988         ENDIF
000900 0012           02989         RETURN
                      02990 
000902                02991 ERR_SERIAL_FULL:
                      02992         IF HAS_STATUS_LEDS
                      02993          SET_SSR_RAPID_FLASH SSR_RED
                      02994          SET_SSR_SLOW_FADE SSR_YELLOW
                      02995         ENDIF
                      02996         ; clear input buffer and reset state machine
000902 6A00           02997         CLRF    YY_STATE, ACCESS
000904 EC?? F???      02998         CALL    SIO_FLUSH_INPUT
000908 0012           02999         RETURN
                      03000 
00090A                03001 ERR_CMD_INCOMPLETE:
00090A 0E23           03002         MOVLW   0x23
00090C 6E00           03003         MOVWF   LAST_ERROR, ACCESS
                      03004         IF HAS_STATUS_LEDS
                      03005          SET_SSR_SLOW_FLASH SSR_RED
                      03006         ENDIF
00090E EF?? F???      03007         GOTO    ERR_ABORT
000912                03008 ERR_NOT_IMP:
000912 0E22           03009         MOVLW   0x22
000914 6E00           03010         MOVWF   LAST_ERROR, ACCESS
                      03011         IF HAS_STATUS_LEDS
                      03012          SET_SSR_RAPID_FLASH SSR_RED
                      03013         ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000916 EF?? F???      03014         GOTO    ERR_ABORT
00091A                03015 ERR_COMMAND:
00091A 0E20           03016         MOVLW   0x20
00091C 6E00           03017         MOVWF   LAST_ERROR, ACCESS
                      03018         IF HAS_STATUS_LEDS
                      03019          SET_SSR_PATTERN SSR_RED, .255, .1, .32, BIT_FADE_DOWN
                      03020         ENDIF
00091E                03021 ERR_ABORT:
                      03022         ;SET_SSR_STEADY SSR_RED
00091E 6A00           03023         CLRF    YY_STATE, ACCESS        ; reset state machine
000920 0012           03024         RETURN
                      03025 
000922                03026 RECEIVE_COMMAND:
  00000007            03027 CMD_BIT EQU     7
                      03028 
000922 0004           03029         CLRWDT
                      03030         ;
                      03031         ; First of all, if we received a byte at all, that means
                      03032         ; we're not the one expected to be talking anymore.
                      03033         ; we should never see this while trying to output anything,
                      03034         ; if everyone else is playing by the same rules,
                      03035         ; but this is a fail-safe just in case.  In this case, we
                      03036         ; will immediately shut up.
                      03037         ;
000924 8400           03038         BSF     SSR_STATE2, INHIBIT_OUTPUT, ACCESS
                      03039         ;
                      03040         ; We just received a byte.  The state machine dictates what
                      03041         ; we do with the byte we just got.
                      03042         ;
                      03043         ; State:        Byte:
                      03044         ; [0] IDLE      DATA: ignore
                      03045         ;               CMD for someone else: ignore
                      03046         ;               store command, then decode it.
                      03047         ;
000926 EC?? F???      03048         CALL    SIO_GETCHAR_W
00092A BC00           03049         BTFSC   DMX_SLOTH, DMX_SPEED, ACCESS    ; check if we're trying to read DMX now
00092C EF?? F???      03050         GOTO    DMX_RECEIVED_BYTE
                      03051         ;
000930 0004           03052         CLRWDT
000932 0103           03053         BANKSEL SIO_DATA_START
000934 AF00           03054         BTFSS   SIO_INPUT, CMD_BIT, BANKED
000936 D???           03055         BRA     DATA_BYTE               ; it's a data byte
                      03056         ;
                      03057         ; ok, so it's a command. are we still waiting for another
                      03058         ; command to complete?  If so, abort it and start over.
                      03059         ; otherwise, get to work.
                      03060         ;
000938 9200           03061         BCF     SSR_STATE2, MSB_ESC, ACCESS     ; cancel escape sequence if any
00093A 9000           03062         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
00093C 5000           03063         MOVF    YY_STATE, W, ACCESS
00093E E0??           03064         BZ      INTERP_START     
                      03065         ;
                      03066         ; ERROR: We hadn't finished with the last command yet, and here we
                      03067         ; have another one!  (Yes, even if it's someone else's command, that
                      03068         ; still means ours is apparently abandoned.)
                      03069         ;
000940 D???           03070         RCALL   ERR_CMD_INCOMPLETE              ; let user know
                      03071         
000942                03072 INTERP_START:
                      03073         ;
                      03074         ; Start of a new command.
                      03075         ;
000942 0103           03076         BANKSEL SIO_DATA_START
000944 0004           03077         CLRWDT
                      03078         ;
                      03079         ; Is it ours?
                      03080         ;
                      03081         IF ! ROLE_SLAVE         ; the slave chip has no address and sees no other commands
000946 5100           03082          MOVF   SIO_INPUT, W, BANKED
000948 0B0F           03083          ANDLW  0x0F
00094A 6200           03084          CPFSEQ MY_ADDRESS, ACCESS
00094C 0012           03085          RETURN ; not my problem.
                      03086         ENDIF
                      03087         ;
                      03088         ; ok, so it's OUR command.  We're at state 0,
                      03089         ; so let's decode it and go from here.
                      03090         ;
                      03091         ; === STATE 0 ===
                      03092         ; New command byte received
                      03093         ;
                      03094         ; CMD 0 (BLACKOUT): exec -> 0
                      03095         ; CMD 1 (ON_OFF): -> 1
                      03096         ; CMD 2 (SET_LVL): -> 2
                      03097         ; CMD 3 (BULK_UPD): -> 4
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03098         ; CMD 4 (RAMP_LVL): -> 5
                      03099         ; CMD 5 ERROR -> 0
                      03100         ; CMD 6 ERROR -> 0
                      03101         ; CMD 7 (EXTENDED) -> 9
                      03102         ;
                      03103         IF HAS_ACTIVE
                      03104          SET_SSR_BLINK_FADE SSR_ACTIVE  ; activity indicator
                      03105         ENDIF
                      03106         IF ROLE_SLAVE && HAS_STATUS_LEDS
                      03107          SET_SSR_BLINK_FADE SSR_YELLOW  ; slave activity indicator
                      03108         ENDIF
00094E 0103           03109         BANKSEL SIO_DATA_START
000950 3900           03110         SWAPF   SIO_INPUT, W, BANKED
000952 0B07           03111         ANDLW   0x07
000954 E0??           03112         BZ      S0_CMD0
000956 EF?? F???      03113         GOTO    S0_CMD1         ; can't do BNZ S0_CMD1 because it's too far away from here
                      03114 
00095A                03115 S0_CMD0:
                      03116         ;
                      03117         ; BLACKOUT:
                      03118         ;
                      03119         ;   ___7______6______5______4______3______2______1______0__
                      03120         ;  |      |                    |                           |
                      03121         ;  |   1  |          0         |   Target device address   | SIO_INPUT
                      03122         ;  |______|______|______|______|______|______|______|______|
                      03123         ;  |                                  |          0         |
                      03124         ;  |                 0                |   (Command code)   | W
                      03125         ;  |______|______|______|______|______|______|______|______|
                      03126         ;
00095A 0104           03127         BANKSEL SSR_DATA_BANK
  00000000            03128 CH      SET     0
                      03129         WHILE CH <= OUTPUT_CHAN_MAX
00095C 6B00           03130          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
00095E 6B00           03131          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
000960 6B00           03132          CLRF   SSR_00_STEP+0,      BANKED
000962 6B00           03133          CLRF   SSR_00_SPEED+0,      BANKED
000964 6B00           03134          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            03135 CH       ++
000966 6B00           03130          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
000968 6B00           03131          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
00096A 6B00           03132          CLRF   SSR_00_STEP+1,      BANKED
00096C 6B00           03133          CLRF   SSR_00_SPEED+1,      BANKED
00096E 6B00           03134          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            03135 CH       ++
000970 6B00           03130          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
000972 6B00           03131          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
000974 6B00           03132          CLRF   SSR_00_STEP+2,      BANKED
000976 6B00           03133          CLRF   SSR_00_SPEED+2,      BANKED
000978 6B00           03134          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            03135 CH       ++
00097A 6B00           03130          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
00097C 6B00           03131          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
00097E 6B00           03132          CLRF   SSR_00_STEP+3,      BANKED
000980 6B00           03133          CLRF   SSR_00_SPEED+3,      BANKED
000982 6B00           03134          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            03135 CH       ++
000984 6B00           03130          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
000986 6B00           03131          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
000988 6B00           03132          CLRF   SSR_00_STEP+4,      BANKED
00098A 6B00           03133          CLRF   SSR_00_SPEED+4,      BANKED
00098C 6B00           03134          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            03135 CH       ++
00098E 6B00           03130          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
000990 6B00           03131          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
000992 6B00           03132          CLRF   SSR_00_STEP+5,      BANKED
000994 6B00           03133          CLRF   SSR_00_SPEED+5,      BANKED
000996 6B00           03134          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            03135 CH       ++
000998 6B00           03130          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
00099A 6B00           03131          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
00099C 6B00           03132          CLRF   SSR_00_STEP+6,      BANKED
00099E 6B00           03133          CLRF   SSR_00_SPEED+6,      BANKED
0009A0 6B00           03134          CLRF   SSR_00_COUNTER+6,      BANKED
  00000007            03135 CH       ++
0009A2 6B00           03130          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
0009A4 6B00           03131          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
0009A6 6B00           03132          CLRF   SSR_00_STEP+7,      BANKED
0009A8 6B00           03133          CLRF   SSR_00_SPEED+7,      BANKED
0009AA 6B00           03134          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            03135 CH       ++
0009AC 6B00           03130          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
0009AE 6B00           03131          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
0009B0 6B00           03132          CLRF   SSR_00_STEP+8,      BANKED
0009B2 6B00           03133          CLRF   SSR_00_SPEED+8,      BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009B4 6B00           03134          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            03135 CH       ++
0009B6 6B00           03130          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
0009B8 6B00           03131          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
0009BA 6B00           03132          CLRF   SSR_00_STEP+9,      BANKED
0009BC 6B00           03133          CLRF   SSR_00_SPEED+9,      BANKED
0009BE 6B00           03134          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            03135 CH       ++
0009C0 6B00           03130          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
0009C2 6B00           03131          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
0009C4 6B00           03132          CLRF   SSR_00_STEP+10,     BANKED
0009C6 6B00           03133          CLRF   SSR_00_SPEED+10,     BANKED
0009C8 6B00           03134          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            03135 CH       ++
0009CA 6B00           03130          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
0009CC 6B00           03131          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
0009CE 6B00           03132          CLRF   SSR_00_STEP+11,     BANKED
0009D0 6B00           03133          CLRF   SSR_00_SPEED+11,     BANKED
0009D2 6B00           03134          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            03135 CH       ++
0009D4 6B00           03130          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
0009D6 6B00           03131          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
0009D8 6B00           03132          CLRF   SSR_00_STEP+12,     BANKED
0009DA 6B00           03133          CLRF   SSR_00_SPEED+12,     BANKED
0009DC 6B00           03134          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            03135 CH       ++
0009DE 6B00           03130          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
0009E0 6B00           03131          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
0009E2 6B00           03132          CLRF   SSR_00_STEP+13,     BANKED
0009E4 6B00           03133          CLRF   SSR_00_SPEED+13,     BANKED
0009E6 6B00           03134          CLRF   SSR_00_COUNTER+13,     BANKED
  0000000E            03135 CH       ++
0009E8 6B00           03130          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
0009EA 6B00           03131          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
0009EC 6B00           03132          CLRF   SSR_00_STEP+14,     BANKED
0009EE 6B00           03133          CLRF   SSR_00_SPEED+14,     BANKED
0009F0 6B00           03134          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            03135 CH       ++
0009F2 6B00           03130          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
0009F4 6B00           03131          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
0009F6 6B00           03132          CLRF   SSR_00_STEP+15,     BANKED
0009F8 6B00           03133          CLRF   SSR_00_SPEED+15,     BANKED
0009FA 6B00           03134          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            03135 CH       ++
0009FC 6B00           03130          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
0009FE 6B00           03131          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
000A00 6B00           03132          CLRF   SSR_00_STEP+16,     BANKED
000A02 6B00           03133          CLRF   SSR_00_SPEED+16,     BANKED
000A04 6B00           03134          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            03135 CH       ++
000A06 6B00           03130          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
000A08 6B00           03131          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
000A0A 6B00           03132          CLRF   SSR_00_STEP+17,     BANKED
000A0C 6B00           03133          CLRF   SSR_00_SPEED+17,     BANKED
000A0E 6B00           03134          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            03135 CH       ++
000A10 6B00           03130          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
000A12 6B00           03131          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
000A14 6B00           03132          CLRF   SSR_00_STEP+18,     BANKED
000A16 6B00           03133          CLRF   SSR_00_SPEED+18,     BANKED
000A18 6B00           03134          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            03135 CH       ++
000A1A 6B00           03130          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
000A1C 6B00           03131          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
000A1E 6B00           03132          CLRF   SSR_00_STEP+19,     BANKED
000A20 6B00           03133          CLRF   SSR_00_SPEED+19,     BANKED
000A22 6B00           03134          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            03135 CH       ++
                      03136         ENDW
                      03137 
                      03138         IF ROLE_MASTER
                      03139          MOVLW  0x80            ; Pass this command on to the other 
                      03140          CALL   SIO_WRITE_W     ; processor too
                      03141          IF HAS_STATUS_LEDS
                      03142           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03143          ENDIF
                      03144         ENDIF
000A24 0012           03145         RETURN
                      03146 
000A26                03147 S0_CMD1:
000A26 6E00           03148         MOVWF   YY_COMMAND, ACCESS      ; save command byte in YY_COMMAND
000A28 2CE8           03149         DECFSZ  WREG, W, ACCESS
000A2A D???           03150         BRA     S0_CMD2
                      03151         ; ON_OFF:
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A2C 0E01           03152         MOVLW   1
000A2E 6E00           03153         MOVWF   YY_STATE, ACCESS        ; -> state 1 (wait for channel)
000A30 0012           03154         RETURN
                      03155 
000A32                03156 S0_CMD2:
                      03157         ; SET_LEVEL
000A32 2CE8           03158         DECFSZ  WREG, W, ACCESS
000A34 D???           03159         BRA     S0_CMD3
000A36 0E02           03160         MOVLW   2
000A38 6E00           03161         MOVWF   YY_STATE, ACCESS        ; -> state 2 (wait for channel)
000A3A 0012           03162         RETURN
                      03163 
000A3C                03164 S0_CMD3:
                      03165         ; BULK_UPD
000A3C 2CE8           03166         DECFSZ  WREG, W, ACCESS
000A3E D???           03167         BRA     S0_CMD4
000A40 0E04           03168         MOVLW   4
000A42 6E00           03169         MOVWF   YY_STATE, ACCESS        ; -> state 4 (wait for channel)
000A44 0012           03170         RETURN
                      03171 
000A46                03172 S0_CMD4:
                      03173         ; RAMP_LVL
000A46 2CE8           03174         DECFSZ  WREG, W, ACCESS
000A48 D???           03175         BRA     S0_CMD5
000A4A 0E05           03176         MOVLW   5
000A4C 6E00           03177         MOVWF   YY_STATE, ACCESS        ; -> state 5 (wait for channel)
000A4E 0012           03178         RETURN
                      03179 
                      03180         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      03181          #include "qscc_hook_5_6.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos device initialization code which sets up I/O pins.
                      00027 ; We want them arranged differently than the Lumos controllers do, but we put
                      00028 ; the QuizShow code here to keep the Lumos product clean and separate.
                      00029 ; 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_5_5 only used for QS*C systems"
                      00032         ENDIF
                      00033 
000A50                00034 S0_CMD5:
                      00035          ; Unimplemented Command
000A50 2CE8           00036          DECFSZ WREG, W, ACCESS
000A52 D???           00037          BRA    S0_CMD6
000A54 EF?? F???      00038          GOTO   ERR_NOT_IMP             ; XXX
                      00039 
000A58                00040 S0_CMD6:
                      00041          ; Unimplemented Command
000A58 2CE8           00042          DECFSZ WREG, W, ACCESS
000A5A D???           00043          BRA    S0_CMD7
000A5C EF?? F???      00044          GOTO   ERR_NOT_IMP             ; XXX
                      03182         ELSE
                      03183 S0_CMD5:
                      03184          ; Unimplemented Command
                      03185          DECFSZ WREG, W, ACCESS
                      03186          BRA    S0_CMD6
                      03187          GOTO   ERR_NOT_IMP             ; XXX
                      03188 
                      03189 S0_CMD6:
                      03190          ; Unimplemented Command
                      03191          DECFSZ WREG, W, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03192          BRA    S0_CMD7
                      03193          GOTO   ERR_NOT_IMP             ; XXX
                      03194         ENDIF
                      03195 
000A60                03196 S0_CMD7:
                      03197         ; Extended commands
000A60 2CE8           03198         DECFSZ  WREG, W, ACCESS
000A62 D???           03199         BRA     S0_CMD_ERR
000A64 0E09           03200         MOVLW   9
000A66 6E00           03201         MOVWF   YY_STATE, ACCESS        ; -> state 9 (decode extended command)
000A68 0012           03202         RETURN
                      03203 
000A6A                03204 S0_CMD_ERR:
                      03205         ; BUG: We really shouldn't have arrived here!
                      03206         ERR_BUG 0x01, ERR_CLASS_OVERRUN
000A6A 0E01               M          MOVLW  0x01
000A6C 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000A6E 6A00               M          CLRF   YY_STATE, ACCESS
000A70 0012               M          RETURN
                      03207          
000A72                03208 DATA_BYTE:
000A72 0004           03209         CLRWDT
                      03210         ;
                      03211         ; Check for escape sequences
                      03212         ;
                      03213         ; in MSB mode? set this byte's MSB and skip down
000A74 A200           03214         BTFSS   SSR_STATE2, MSB_ESC, ACCESS
000A76 D???           03215         BRA     DB_CHK_LITERAL
000A78 8F00           03216         BSF     SIO_INPUT, 7, BANKED
000A7A 9200           03217         BCF     SSR_STATE2, MSB_ESC, ACCESS
000A7C D???           03218         BRA     DB_HANDLER
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A7E                03219 DB_CHK_LITERAL:
                      03220         ; no, how about in literal mode? if so, just pass through this byte
000A7E A000           03221         BTFSS   SSR_STATE2, LITERAL_ESC, ACCESS
000A80 D???           03222         BRA     DB_CHK_7E
000A82 9000           03223         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
000A84 D???           03224         BRA     DB_HANDLER
000A86                03225 DB_CHK_7E:
                      03226         ; no, ok, then is this the start of an MSB escape?
000A86 0E7E           03227         MOVLW   0x7E
000A88 6300           03228         CPFSEQ  SIO_INPUT, BANKED
000A8A D???           03229         BRA     DB_CHK_7F
000A8C 8200           03230         BSF     SSR_STATE2, MSB_ESC, ACCESS
000A8E 0012           03231         RETURN
                      03232 
000A90                03233 DB_CHK_7F:
                      03234         ; no, then maybe we're starting a literal escape?
000A90 0E7F           03235         MOVLW   0x7F
000A92 6300           03236         CPFSEQ  SIO_INPUT, BANKED
000A94 D???           03237         BRA     DB_HANDLER
000A96 8000           03238         BSF     SSR_STATE2, LITERAL_ESC, ACCESS
000A98 0012           03239         RETURN
                      03240         
000A9A                03241 DB_HANDLER:
                      03242         ;
                      03243         ; Data byte:  If we're at state 0, we aren't expecting
                      03244         ; this, so just ignore it. 
                      03245         ;
000A9A 5000           03246         MOVF    YY_STATE, W, ACCESS
000A9C E1??           03247         BNZ     S1_DATA
000A9E 0012           03248         RETURN
                      03249         ;
                      03250         ; We're collecting data, so add this to the pile, depending
                      03251         ; on where the state machine is now.
                      03252         ;
000AA0                03253 S1_DATA:
                      03254         ;
                      03255         ; STATE 1: collect channel number for ON_OFF command
                      03256         ;          and execute.
                      03257         ;
000AA0 C??? F???      03258         MOVFF   SIO_INPUT, YY_DATA;             Save data byte in YY_DATA
000AA4 2CE8           03259         DECFSZ  WREG, W, ACCESS
000AA6 D???           03260         BRA     S2_DATA
                      03261         ;
                      03262         ; ON_OFF:
                      03263         ;
                      03264         ;   ___7______6______5______4______3______2______1______0__
                      03265         ;  |                                  |                    |
                      03266         ;  |                0                 |          1         | YY_COMMAND
                      03267         ;  |______|______|______|______|______|______|______|______|
                      03268         ;  |      |0=off |                                         |
                      03269         ;  |   0  |1=on  |           Channel ID (0-47)             | YY_DATA
                      03270         ;  |______|______|______|______|______|______|______|______|
                      03271         ;
000AA8                03272 ON_OFF_YY_DATA:
000AA8 EC?? F???      03273         CALL    XLATE_SSR_ID
000AAC 6A00           03274         CLRF    YY_STATE, ACCESS                        ; reset command state
000AAE BC00           03275         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000AB0 EF?? F???      03276         GOTO    ERR_COMMAND                             ; SSR number out of range
000AB4 BE00           03277         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000AB6 D???           03278         BRA     PASS_DOWN_ON_OFF
000AB8 BC00           03279         BTFSC   YY_DATA, 6, ACCESS
000ABA D???           03280         BRA     ON_OFF_ON
000ABC 6AE8           03281         CLRF    WREG, ACCESS
000ABE EF?? F???      03282         GOTO    SSR_OUTPUT_VALUE                        ; set value off and return
                      03283 
000AC2                03284 ON_OFF_ON:
000AC2 68E8           03285         SETF    WREG, ACCESS
000AC4 EF?? F???      03286         GOTO    SSR_OUTPUT_VALUE                        ; set value on and return
                      03287         
000AC8                03288 PASS_DOWN_ON_OFF:
                      03289         IF ROLE_MASTER
                      03290          MOVLW  0x90
                      03291          CALL   SIO_WRITE_W
                      03292          MOVF   TARGET_SSR, W, ACCESS
                      03293          ANDLW  0x3F
                      03294          BTFSC  YY_DATA, 6, ACCESS
                      03295          BSF    WREG, 6, ACCESS
                      03296          SEND_8_BIT_W
                      03297          ;CALL  SIO_WRITE_W
                      03298          IF HAS_STATUS_LEDS
                      03299           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03300          ENDIF
                      03301          RETURN
                      03302         ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AC8 EF?? F???      03303          GOTO   ERR_COMMAND
                      03304         ENDIF
                      03305 
000ACC                03306 S2_DATA:
000ACC 2CE8           03307         DECFSZ  WREG, W, ACCESS
000ACE D???           03308         BRA     S3_DATA
                      03309         ; SET_LVL channel byte
000AD0 EC?? F???      03310         CALL    XLATE_SSR_ID
000AD4 BC00           03311         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000AD6 EF?? F???      03312         GOTO    ERR_COMMAND
000ADA BC00           03313         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (LSB of value)
000ADC 8C00           03314         BSF     TARGET_SSR, 6, ACCESS   ; Reuse bit 6 (INVALID_SSR) for this purpose now
000ADE 2A00           03315         INCF    YY_STATE, F, ACCESS     ; -> state 3 (wait for level byte)
000AE0 0012           03316         RETURN
                      03317 
000AE2                03318 S3_DATA:
                      03319         ; SET_LVL value byte
000AE2 2CE8           03320         DECFSZ  WREG, W, ACCESS
000AE4 D???           03321         BRA     S4_DATA
                      03322         ;
                      03323         ; SET_LVL:
                      03324         ;
                      03325         ;   ___7______6______5______4______3______2______1______0__
                      03326         ;  |                                  |                    |
                      03327         ;  |                0                 |          2         | YY_COMMAND
                      03328         ;  |______|______|______|______|______|______|______|______|
                      03329         ;  |NOT_MY|Value |                                         |
                      03330         ;  | _SSR |LSB   |           Channel ID (0-47)             | TARGET_SSR
                      03331         ;  |______|______|______|______|______|______|______|______|
                      03332         ;  |      |                                                |
                      03333         ;  |   0  |            Value MSBs (0-127)                  | YY_DATA
                      03334         ;  |______|______|______|______|______|______|______|______|
                      03335         ;
000AE6 BE00           03336         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000AE8 D???           03337         BRA     PASS_DOWN_SET_LVL
000AEA 90D8           03338         BCF     STATUS, C, ACCESS                       ; move LSB -> CARRY
000AEC BC00           03339         BTFSC   TARGET_SSR, 6, ACCESS
000AEE 80D8           03340         BSF     STATUS, C, ACCESS
000AF0 3400           03341         RLCF    YY_DATA, W, ACCESS                      ; Shift LSB into value byte
000AF2 6A00           03342         CLRF    YY_STATE, ACCESS                        ; reset state (end of command)
                      03343         ;XXX removed MOVF       YY_DATA, W, ACCESS
000AF4 EF?? F???      03344         GOTO    SSR_OUTPUT_VALUE                        ; set SSR to 8-bit YY_DATA value
                      03345 
000AF8                03346 PASS_DOWN_SET_LVL:
                      03347         IF ROLE_MASTER
                      03348          MOVLW  0xA0
                      03349          CALL   SIO_WRITE_W
                      03350          BCF    TARGET_SSR, 7, ACCESS
                      03351          MOVF   TARGET_SSR, W, ACCESS
                      03352          SEND_8_BIT_W
                      03353          ;CALL  SIO_WRITE_W
                      03354          MOVF   YY_DATA, W, ACCESS
                      03355          SEND_8_BIT_W
                      03356          ;CALL  SIO_WRITE_W
                      03357          CLRF   YY_STATE, ACCESS
                      03358          IF HAS_STATUS_LEDS
                      03359           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03360          ENDIF
                      03361          RETURN
                      03362         ELSE
                      03363          ERR_BUG 0x02, ERR_CLASS_IN_VALID
000AF8 0E02               M          MOVLW  0x02
000AFA 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000AFC 6A00               M          CLRF   YY_STATE, ACCESS
000AFE 0012               M          RETURN
                      03364         ENDIF
                      03365 
000B00                03366 S4_DATA:
000B00 2CE8           03367         DECFSZ  WREG, W, ACCESS
000B02 D???           03368         BRA     S5_DATA
                      03369         ; BULK_UPD, received channel byte
000B04 EC?? F???      03370         CALL    XLATE_SSR_ID
000B08 BC00           03371         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000B0A EF?? F???      03372         GOTO    ERR_COMMAND
                      03373         ;BTFSC  YY_DATA, 6, ACCESS      ; preserve bit 7 (resolution flag)
                      03374         ;BSF    TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
                      03375         WAIT_FOR_SENTINEL .57, B'01010101', 0   ; -> S6.0 when sentinel found
000B0E 0E39               M          MOVLW  .57
000B10 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
000B12 0E55               M          MOVLW  B'01010101'
000B14 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
000B16 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
000B18 6E00               M          MOVWF  YY_STATE, ACCESS
000B1A 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
000B1C 0E00               M          MOVLW  0
000B1E 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
000B20 0012           03376         RETURN
                      03377 
000B22                03378 S5_DATA:
000B22 2CE8           03379         DECFSZ  WREG, W, ACCESS
000B24 D???           03380         BRA     S6_DATA
                      03381         ; RAMP_LVL received channel number
000B26 EC?? F???      03382         CALL    XLATE_SSR_ID
000B2A BC00           03383         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000B2C EF?? F???      03384         GOTO    ERR_COMMAND
000B30 BC00           03385         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (direction flag)
000B32 8C00           03386         BSF     TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
000B34 6A00           03387         CLRF    YY_CMD_FLAGS, ACCESS
000B36 BE00           03388         BTFSC   YY_DATA, 7, ACCESS      ; bit 7: cycle flag -> YY_CMD_FLAGS
000B38 8E00           03389         BSF     YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
000B3A 0E07           03390         MOVLW   7
000B3C 6E00           03391         MOVWF   YY_STATE, ACCESS        ; -> state 7 (wait for step count)
000B3E 0012           03392         RETURN
                      03393         
                      03394 
000B40                03395 S6_DATA:
000B40 2CE8           03396         DECFSZ  WREG, W, ACCESS
000B42 EF?? F???      03397         GOTO    S7_DATA
                      03398         ;
                      03399         ; State 6: Wait for Sentinel
                      03400         ;
                      03401         ; In this state, the machine is looking ahead in the data stream
                      03402         ; for a sentinel pattern.  The pattern is terminated by the byte
                      03403         ; YY_LOOK_FOR and must be seen in the next YY_LOOKAHEAD_MAX bytes.
                      03404         ; If the sentinel is not recognized before YY_LOOKAHEAD_MAX runs
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03405         ; out, we abort on ERR_COMMAND.
                      03406         ;
                      03407         ; Once it's recognized, we move to YY_NEXT_STATE immediately.  This is
                      03408         ; not a state here in the state machine, but a sub-case of state 6
                      03409         ; to interpret the final packet.
                      03410         ;
                      03411         ; In order to do this, we buffer up the input received in YY_BUFFER.  This is
                      03412         ; a YY_BUF_LEN-byte memory space aligned on a data bank boundary where YY_BUF_LEN
                      03413         ; is not more than 256 (currently it's 200).  We will record the character at
                      03414         ; YY_BUFFER[YY_BUF_IDX++] and stop if YY_BUF_IDX > YY_LOOKAHEAD_MAX.
                      03415         ;
000B46 0004           03416         CLRWDT
000B48 5000           03417         MOVF    YY_DATA, W, ACCESS              ; Is this the sentinel we're looking for?
000B4A 6200           03418         CPFSEQ  YY_LOOK_FOR, ACCESS
000B4C EF?? F???      03419         GOTO    S6_KEEP_LOOKING
                      03420         ;
                      03421         ; We have a packet, now switch on YY_NEXT_STATE to decode and execute
                      03422         ; the completed command.
                      03423         ;
000B50 5000           03424         MOVF    YY_NEXT_STATE, W, ACCESS
000B52 E0??           03425         BZ      S6_0_DATA
000B54 EF?? F???      03426         GOTO    S6_1_DATA       ; too far away for relative branch
                      03427         ;
                      03428         ; S6.0: Complete BULK_UPD command (from state 5)
                      03429         ;
                      03430         ;   ___7______6______5______4______3______2______1______0__
                      03431         ;  |                                  |                    |
                      03432         ;  |                0                 |          3         | YY_COMMAND
                      03433         ;  |______|______|______|______|______|______|______|______|
                      03434         ;  |NOT_MY|      |                                         |
                      03435         ;  | _SSR |      |   c = Starting Channel ID (0-47)        | TARGET_SSR
                      03436         ;  |______|______|______|______|______|______|______|______|
                      03437         ;  |      |                                                |
                      03438         ;  |   0  |      n = (Number of channels - 1) (0-47)       | YY_BUFFER+0
                      03439         ;  |______|______|______|______|______|______|______|______|
                      03440         ;  |                                                       |
                      03441         ;  |                  Value for SSR #c                     | YY_BUFFER+1
                      03442         ;  |______|______|______|______|______|______|______|______|
                      03443         ;  |                                                       |
                      03444         ;  |                  Value for SSR #c+1                   | YY_BUFFER+2
                      03445         ;  |______|______|______|______|______|______|______|______|
                      03446         ;                               .
                      03447         ;                               .
                      03448         ;                               .
                      03449         ;   _______________________________________________________
                      03450         ;  |                                                       |
                      03451         ;  |                  Value for SSR #c+n-1                 | YY_BUFFER+n
                      03452         ;  |______|______|______|______|______|______|______|______|
                      03453         ;                                                       <-- YY_BUF_IDX == n+1
                      03454         ;
                      03455         ;
                      03456         ;
000B58                03457 S6_0_DATA:
000B58 6A00           03458         CLRF    YY_STATE, ACCESS                ; go ahead and signal end of command parsing
                      03459         ;                                       ; now so we can just RETURN when done.
                      03460         ; Calculate expected data lengths
                      03461         ;
000B5A EE?? F0??      03462         LFSR    0, YY_BUFFER                    
000B5E 5000           03463         MOVF    TARGET_SSR, W, ACCESS           ; start
000B60 0B3F           03464         ANDLW   0x3F
000B62 24EF           03465         ADDWF   INDF0, W, ACCESS                ; start + N-1      (N=#changed; N=n+1)
000B64 28E8           03466         INCF    WREG, W, ACCESS                 ; start + N
000B66 0814           03467         SUBLW   NUM_CHANNELS                    ; start + N > NUM_CHANNELS? 
000B68 E2??           03468         BC      S6_0_DATA_N_OK                  ; NO: proceed
000B6A EF?? F???      03469         GOTO    ERR_COMMAND                     ; YES: bad command - reject it!
                      03470         ;
                      03471         ; Do we have all the bytes yet?  (Or did a data byte happen to equal our sentinel?)
                      03472         ;
000B6E                03473 S6_0_DATA_N_OK:
000B6E 28EF           03474         INCF    INDF0, W, ACCESS                ; W=N
000B70 6400           03475         CPFSGT  YY_BUF_IDX, ACCESS              ; if IDX > N, we're done.
000B72 EF?? F???      03476         GOTO    S6_KEEP_LOOKING                 ; otherwise, go back and wait for more data
                      03477         ; XXX Don't do this.
                      03478         ;INCF   INDF0, F, ACCESS                ; fix it so that YY_BUFFER[0] is N, not N-1
                      03479         ;
                      03480         ; start bulk update of channels
                      03481         ;
                      03482         ; Remember that since the protocol specifies that we get N-1 in the length field,
                      03483         ; we will always have at least 1 channel to change.  (There's no way to specify a
                      03484         ; BULK_UPD command to change 0 channels.)
                      03485         ;
                      03486         ; Does the target range of channels lie entirely within the slave chip's 
                      03487         ; range?  If so, just pass the whole command down to it, with starting SSR
                      03488         ; number translated down to its range...
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03489         ;
000B76 AE00           03490         BTFSS   TARGET_SSR, NOT_MY_SSR, ACCESS
000B78 D???           03491         BRA     S6_0_UPDATE_MASTER
                      03492         IF ROLE_MASTER
                      03493          CLRWDT
                      03494          IF HAS_STATUS_LEDS
                      03495           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03496          ENDIF
                      03497          MOVLW  0xB0                            ; command code
                      03498          CALL   SIO_WRITE_W
                      03499          MOVF   TARGET_SSR, W, ACCESS           ; starting channel
                      03500          SEND_8_BIT_W
                      03501          LFSR   0, YY_BUFFER                    ; now write YY_BUFFER[0..YY_BUF_IDX-1]
                      03502 S6_0_PD_ALL:
                      03503          MOVF   POSTINC0, W, ACCESS
                      03504          SEND_8_BIT_W
                      03505          DECFSZ YY_BUF_IDX, F, ACCESS
                      03506          BRA    S6_0_PD_ALL
                      03507          MOVLW  0x55                            ; and finally the trailing sentinel byte $55.
                      03508          CALL   SIO_WRITE_W
                      03509          RETURN
                      03510         ELSE
                      03511          ERR_BUG 0x03, ERR_CLASS_IN_VALID
000B7A 0E03               M          MOVLW  0x03
000B7C 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000B7E 6A00               M          CLRF   YY_STATE, ACCESS
000B80 0012               M          RETURN
                      03512         ENDIF
                      03513 
000B82                03514 S6_0_UPDATE_MASTER:
                      03515         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03516         ; Copy the bytes directly into SSR registers
                      03517         ;
000B82 0004           03518         CLRWDT
000B84 EE?? F0??      03519         LFSR    0, YY_BUFFER                    ; FSR0 points to each source data byte to copy
000B88 EE?? F0??      03520         LFSR    1, SSR_00_VALUE                 ; FSR1 points to each destination SSR control block
000B8C EE?? F0??      03521         LFSR    2, SSR_00_FLAGS                 ; FSR2 points to the SSR flag blocks
000B90 5000           03522         MOVF    TARGET_SSR, W, ACCESS           ; Move in to first SSR in target range
000B92 0B3F           03523         ANDLW   0x3F
000B94 26E1           03524         ADDWF   FSR1L, F, ACCESS                
000B96 26D9           03525         ADDWF   FSR2L, F, ACCESS
                      03526         IF ROLE_MASTER
                      03527          SUBLW  .24
                      03528          MOVWF  KK, ACCESS                      ; KK=24-start (max # of channels on OUR chip)
                      03529         ENDIF
000B98 CFEE F???      03530         MOVFF   POSTINC0, I                     ; I=N counter           (I = *FSR0++ + 1)
000B9C 2A00           03531         INCF    I, F, ACCESS                    ;                            \_____/
                      03532                                                 ;                               n
000B9E                03533 S6_0_UPDATE_NEXT:
000B9E 6ADE           03534         CLRF    POSTINC2, ACCESS                ; clear SSR flags       *fsr2++ = 0
000BA0 CFEE FFE7      03535         MOVFF   POSTINC0, INDF1                 ; set SSR               *fsr1++ = *fsr0++
000BA4 2AE1           03536         INCF    FSR1L, F, ACCESS
                      03537         IF ROLE_MASTER                          ;
                      03538          DCFSNZ KK, F, ACCESS
                      03539          BRA    S6_0_PASS_DOWN                  ; ran out of KK, send rest to slave chip
                      03540         ENDIF
000BA6 2E00           03541         DECFSZ  I, F, ACCESS
000BA8 D???           03542         BRA     S6_0_UPDATE_NEXT
000BAA 0012           03543         RETURN
                      03544 
                      03545         IF ROLE_MASTER
                      03546 S6_0_PASS_DOWN:
                      03547          DCFSNZ I, F, ACCESS                    ; we left before I-- happened
                      03548          RETURN                                 ; already out of data to send; don't bother the slave
                      03549          IF HAS_STATUS_LEDS
                      03550           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03551          ENDIF
                      03552          MOVLW  0xB0                            ; Start command to slave with I remaining values
                      03553          CALL   SIO_WRITE_W                     
                      03554          CLRF   WREG, ACCESS                    ; target SSR always 0 in this case
                      03555          SEND_8_BIT_W
                      03556          DECF   I, W, ACCESS                    ; I channels left for slave to update, 
                      03557          SEND_8_BIT_W                           ;    protocol wants I-1
                      03558 S6_0_PD_NEXT:
                      03559          MOVF   POSTINC0, W, ACCESS
                      03560          SEND_8_BIT_W
                      03561          DECFSZ I, F, ACCESS
                      03562          BRA    S6_0_PD_NEXT
                      03563          MOVLW  0x55                            ; sentinel $55 after bytes
                      03564          CALL   SIO_WRITE_W
                      03565          RETURN
                      03566         ENDIF
000BAC 0012           03567         RETURN
                      03568 
                      03569 
000BAE                03570 S6_1_DATA:
000BAE 2EE8           03571         DECFSZ  WREG, F, ACCESS
000BB0 D???           03572         BRA     S6_2_DATA
                      03573         ;
                      03574         ; S6.1: CF_CONF Command completed:
                      03575         ;
                      03576         ;   ___7______6______5______4______3______2______1______0__
                      03577         ;  |                                  |                    |
                      03578         ;  |                0                 |          7         | YY_COMMAND
                      03579         ;  |______|______|______|______|______|______|______|______|
                      03580         ;  |      |      |      |      |                           |
                      03581         ;  |   0  |   1  |   1  |   1  |             1             | (not saved)
                      03582         ;  |______|______|______|______|______|______|______|______|
                      03583         ;  |      |    Sensors connected      |DMX   | DMX start   |  
                      03584         ;  |   0  |   A      B      C      D  |MODE  | <8:7>       | YY_BUFFER+0
                      03585         ;  |______|______|______|______|______|______|______|______|
                      03586         ;  |      |                                                |
                      03587         ;  |   0  |               DMX start <6:0>                  | YY_BUFFER+1
                      03588         ;  |______|______|______|______|______|______|______|______|
                      03589         ;  |      |                                                |
                      03590         ;  |   0  |                   $3A                          | YY_BUFFER+2
                      03591         ;  |______|______|______|______|______|______|______|______|
                      03592         ;  |      |                                                |
                      03593         ;  |   0  |                   $3B                          | YY_DATA
                      03594         ;  |______|______|______|______|______|______|______|______|
                      03595         ;
                      03596         ; Validate inputs
                      03597         ;
000BB2 0E03           03598         MOVLW   3
000BB4 5C00           03599         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BB6 E2??           03600         BC      S6_1_VALID_1    
000BB8 EF?? F???      03601         GOTO    S6_KEEP_LOOKING                 ; input < 3? not done yet
                      03602 
000BBC                03603 S6_1_VALID_1:
000BBC E0??           03604         BZ      S6_1_VALID_2                    ; 
000BBE EF?? F???      03605         GOTO    ERR_COMMAND                     ; input > 3? too big: reject
                      03606 
000BC2                03607 S6_1_VALID_2:
000BC2 EE?? F0??      03608         LFSR    0, YY_BUFFER+2
000BC6 50ED           03609         MOVF    POSTDEC0, W, ACCESS             ; check 1st sentinel
                      03610         ;ANDLW  0x3F
000BC8 083A           03611         SUBLW   0x3A
000BCA E0??           03612         BZ      S6_1_CONFIGURE
000BCC EF?? F???      03613         GOTO    ERR_COMMAND
                      03614 
000BD0                03615 S6_1_CONFIGURE:
000BD0 CFED F???      03616         MOVFF   POSTDEC0, DMX_SLOTL
000BD4 6A00           03617         CLRF    DMX_SLOTH, ACCESS
000BD6 B0EF           03618         BTFSC   INDF0, 0, ACCESS
000BD8 8E00           03619         BSF     DMX_SLOTL, 7, ACCESS
000BDA B2EF           03620         BTFSC   INDF0, 1, ACCESS
000BDC 8000           03621         BSF     DMX_SLOTH, DMX_BIT8, ACCESS
000BDE B4EF           03622         BTFSC   INDF0, 2, ACCESS
000BE0 8E00           03623         BSF     DMX_SLOTH, DMX_EN, ACCESS
                      03624         ;
                      03625         ; Save DMX settings to EEPROM
                      03626         ;
                      03627         BEGIN_EEPROM_WRITE EE_DMX_H
000BE2 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000BE4 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DMX_H    ; NOTE interrupts need to be OFF here!
000BE6 0E00               M          MOVLW  HIGH(EE_DMX_H)          ; NOTE interrupts need to be OFF here!
000BE8 6EAA               M          MOVWF  EEADRH, ACCESS
000BEA 0E05               M          MOVLW  LOW(EE_DMX_H)
000BEC 6EA9               M          MOVWF  EEADR, ACCESS
000BEE 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000BF0 9CA6               M          BCF    EECON1, CFGS, ACCESS
000BF2 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000BF4 C??? FFA8      03628         MOVFF   DMX_SLOTH, EEDATA
                      03629         WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
000BF8 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000BFA 0E55               M          MOVLW  0x55
000BFC 6EA7               M          MOVWF  EECON2, ACCESS
000BFE 0EAA               M          MOVLW  0xAA
000C00 6EA7               M          MOVWF  EECON2, ACCESS
000C02 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C04                    M WRITE_EEPROM_LOOP1:
000C04 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C06 D???               M          BRA    WRITE_EEPROM_LOOP1
000C08 0004               M          CLRWDT
000C0A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000002                M EE_LL_XX    ++
000C0C 2AA9               M         INCF    EEADR, F, ACCESS
000C0E C??? FFA8      03630         MOVFF   DMX_SLOTL, EEDATA
                      03631         WRITE_EEPROM_DATA
000C12 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C14 0E55               M          MOVLW  0x55
000C16 6EA7               M          MOVWF  EECON2, ACCESS
000C18 0EAA               M          MOVLW  0xAA
000C1A 6EA7               M          MOVWF  EECON2, ACCESS
000C1C 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C1E                    M WRITE_EEPROM_LOOP2:
000C1E A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C20 D???               M          BRA    WRITE_EEPROM_LOOP2
000C22 0004               M          CLRWDT
000C24 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000003                M EE_LL_XX    ++
                      03632         END_EEPROM_WRITE
000C26 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000C28 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000C2A 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000C2C 6AAA               M          CLRF   EEADRH, ACCESS
000C2E 6AA9               M          CLRF   EEADR, ACCESS
                      03633         ;
                      03634         ; Configure sensors
                      03635         ;
                      03636         IF HAS_SENSORS
                      03637          BSF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      03638          BSF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03639          BSF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03640          BSF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03641          BTFSS  INDF0, 6, ACCESS                        ; A 
                      03642          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03643          BTFSS  INDF0, 5, ACCESS                        ; B 
                      03644          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03645          BTFSS  INDF0, 4, ACCESS                        ; C 
                      03646          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03647          BTFSS  INDF0, 3, ACCESS                        ; D 
                      03648          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03649          ;
                      03650          ; Save these settings to EEPROM
                      03651          ;
                      03652          BEGIN_EEPROM_WRITE EE_SENSOR_CFG
                      03653          RRNCF  INDF0, W, ACCESS
                      03654          RRNCF  WREG, W, ACCESS
                      03655          RRNCF  WREG, W, ACCESS
                      03656          ANDLW  0x0f
                      03657          MOVFF  WREG, EEDATA
                      03658          WRITE_EEPROM_DATA
                      03659          END_EEPROM_WRITE
                      03660         ENDIF
                      03661 
000C30 6A00           03662         CLRF    YY_STATE, ACCESS
000C32 0012           03663         RETURN
                      03664 
000C34                03665 S6_2_DATA:
000C34 2EE8           03666         DECFSZ  WREG, F, ACCESS
000C36 D???           03667         BRA     S6_3_DATA
                      03668         ;
                      03669         ; S6.2: CF_BAUD Command completed:
                      03670         ;
                      03671         ;   ___7______6______5______4______3______2______1______0__
                      03672         ;  |                                  |                    |
                      03673         ;  |                0                 |          7         | YY_COMMAND
                      03674         ;  |______|______|______|______|______|______|______|______|
                      03675         ;  |      |      |      |      |                           |
                      03676         ;  |   0  |   1  |   1  |   1  |             2             | (not saved)
                      03677         ;  |______|______|______|______|______|______|______|______|
                      03678         ;  |      |                                                |  
                      03679         ;  |   0  |              baud rate code                    | YY_BUFFER+0
                      03680         ;  |______|______|______|______|______|______|______|______|
                      03681         ;  |      |                                                |
                      03682         ;  |   0  |                   $26                          | YY_DATA
                      03683         ;  |______|______|______|______|______|______|______|______|
                      03684         ;
                      03685         ; Validate inputs
                      03686         ;
000C38 0E01           03687         MOVLW   1
000C3A 5C00           03688         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000C3C E2??           03689         BC      S6_2_VALID1
000C3E EF?? F???      03690         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03691 
000C42                03692 S6_2_VALID1:
000C42 E0??           03693         BZ      S6_2_VALID2
000C44 EF?? F???      03694         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03695 
000C48                03696 S6_2_VALID2:
000C48 EE?? F0??      03697         LFSR    0, YY_BUFFER
000C4C 0E0B           03698         MOVLW   0x0B
000C4E 5CEF           03699         SUBWF   INDF0, W, ACCESS                ; test baud rate in range [$00,$0A]
000C50 E3??           03700         BNC     S6_2_SET_BAUD
000C52 EF?? F???      03701         GOTO    ERR_COMMAND
                      03702 
000C56                03703 S6_2_SET_BAUD:
                      03704         ;
                      03705         ; Change the baud rate in the slave first, or we'll
                      03706         ; never be able to talk to it again...
                      03707         ;
                      03708         ; limit baud rate value 
000C56 0E0F           03709         MOVLW   0x0F
000C58 16EF           03710         ANDWF   INDF0, F, ACCESS
                      03711         IF ROLE_MASTER
                      03712          IF HAS_STATUS_LEDS
                      03713           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03714          ENDIF
                      03715          MOVLW  0xF0                            ; F0 72 <baud> 26  -> slave
                      03716          CALL   SIO_WRITE_W
                      03717          MOVLW  0x72
                      03718          CALL   SIO_WRITE_W
                      03719          MOVF   INDF0, W, ACCESS
                      03720          CALL   SIO_WRITE_W
                      03721          MOVLW  0x26
                      03722          CALL   SIO_WRITE_W
                      03723          CALL   DRAIN_M_S_TX_BLOCKING           ; wait for command to slave to be fully sent
                      03724         ENDIF                                   ; before changing the UART speed on it.
                      03725 
                      03726         BEGIN_EEPROM_WRITE EE_BAUD
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C5A 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000C5C 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_BAUD     ; NOTE interrupts need to be OFF here!
000C5E 0E00               M          MOVLW  HIGH(EE_BAUD)           ; NOTE interrupts need to be OFF here!
000C60 6EAA               M          MOVWF  EEADRH, ACCESS
000C62 0E01               M          MOVLW  LOW(EE_BAUD)
000C64 6EA9               M          MOVWF  EEADR, ACCESS
000C66 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000C68 9CA6               M          BCF    EECON1, CFGS, ACCESS
000C6A 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000C6C CFEF FFA8      03727         MOVFF   INDF0, EEDATA                   ; save value permanently (address 001)
                      03728         WRITE_EEPROM_DATA
000C70 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C72 0E55               M          MOVLW  0x55
000C74 6EA7               M          MOVWF  EECON2, ACCESS
000C76 0EAA               M          MOVLW  0xAA
000C78 6EA7               M          MOVWF  EECON2, ACCESS
000C7A 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C7C                    M WRITE_EEPROM_LOOP3:
000C7C A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C7E D???               M          BRA    WRITE_EEPROM_LOOP3
000C80 0004               M          CLRWDT
000C82 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000004                M EE_LL_XX    ++
                      03729         END_EEPROM_WRITE
000C84 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000C86 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000C88 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000C8A 6AAA               M          CLRF   EEADRH, ACCESS
000C8C 6AA9               M          CLRF   EEADR, ACCESS
000C8E 50EF           03730         MOVF    INDF0, W, ACCESS
000C90 EC?? F???      03731         CALL    SIO_SET_BAUD_W
000C94 6A00           03732         CLRF    YY_STATE, ACCESS
000C96 0012           03733         RETURN
                      03734 
000C98                03735 S6_3_DATA:
000C98 2EE8           03736         DECFSZ  WREG, F, ACCESS
000C9A D???           03737         BRA     S6_4_DATA
                      03738         ;
                      03739         ; S6.3: CF_RESET Command completed:
                      03740         ;
                      03741         ;   ___7______6______5______4______3______2______1______0__
                      03742         ;  |                                  |                    |
                      03743         ;  |                0                 |          7         | YY_COMMAND
                      03744         ;  |______|______|______|______|______|______|______|______|
                      03745         ;  |      |      |      |      |                           |
                      03746         ;  |   0  |   1  |   1  |   1  |             3             | (not saved)
                      03747         ;  |______|______|______|______|______|______|______|______|
                      03748         ;  |      |                                                |
                      03749         ;  |   0  |                   $24                          | YY_BUFFER+0
                      03750         ;  |______|______|______|______|______|______|______|______|
                      03751         ;  |      |                                                |
                      03752         ;  |   0  |                   $72                          | YY_DATA
                      03753         ;  |______|______|______|______|______|______|______|______|
                      03754         ;
                      03755         ; Validate inputs
                      03756         ;
000C9C 0E01           03757         MOVLW   1
000C9E 5C00           03758         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000CA0 E2??           03759         BC      S6_3_VALID      
000CA2 EF?? F???      03760         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03761 
000CA6                03762 S6_3_VALID:
000CA6 E0??           03763         BZ      S6_3_RESET
000CA8 EF?? F???      03764         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03765 
000CAC                03766 S6_3_RESET:
000CAC EE?? F0??      03767         LFSR    0, YY_BUFFER
000CB0 0E24           03768         MOVLW   0x24
000CB2 62EF           03769         CPFSEQ  INDF0, ACCESS
000CB4 EF?? F???      03770         GOTO    ERR_COMMAND
000CB8 EF?? F???      03771         GOTO    FACTORY_RESET                   ; we never return from here
                      03772         ERR_BUG 0x70, ERR_CLASS_FATAL_RESET     
000CBC 0E70               M          MOVLW  0x70
000CBE 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_FATAL_RESET == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_FATAL_RESET == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_FATAL_RESET == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000CC0 6A00               M          CLRF   YY_STATE, ACCESS
000CC2 0012               M          RETURN
                      03773 
000CC4                03774 S6_3_HALT:
000CC4 D???           03775         BRA     S6_3_HALT
                      03776 
000CC6                03777 S6_4_DATA:
000CC6 2EE8           03778         DECFSZ  WREG, F, ACCESS
000CC8 D???           03779         BRA     S6_5_DATA
                      03780         ;
                      03781         ; S6.4: CF_PHASE Command completed:
                      03782         ;
                      03783         ;   ___7______6______5______4______3______2______1______0__
                      03784         ;  |                                  |                    |
                      03785         ;  |                0                 |          7         | YY_COMMAND
                      03786         ;  |______|______|______|______|______|______|______|______|
                      03787         ;  |      |      |      |      |             | phase       |
                      03788         ;  |   0  |   1  |   0  |   0  |   X      X  |  <8:7>      | YY_YY
                      03789         ;  |______|______|______|______|______|______|______|______|
                      03790         ;  |      |                                                |
                      03791         ;  |   0  |               phase <6:0>                      | YY_BUFFER+0
                      03792         ;  |______|______|______|______|______|______|______|______|
                      03793         ;  |      |                                                |
                      03794         ;  |   0  |                   $50                          | YY_BUFFER+1
                      03795         ;  |______|______|______|______|______|______|______|______|
                      03796         ;  |      |                                                |
                      03797         ;  |   0  |                   $4F                          | YY_DATA
                      03798         ;  |______|______|______|______|______|______|______|______|
                      03799         ;
                      03800         ; Validate inputs
                      03801         ;
000CCA 0E02           03802         MOVLW   2
000CCC 5C00           03803         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000CCE E2??           03804         BC      S6_4_VALID
000CD0 EF?? F???      03805         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03806 
000CD4                03807 S6_4_VALID:
000CD4 E0??           03808         BZ      S6_4_SET_PHASE
000CD6 EF?? F???      03809         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03810 
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000CDA                03811 S6_4_SET_PHASE:
000CDA EE?? F0??      03812         LFSR    0, YY_BUFFER+1
000CDE 0E50           03813         MOVLW   0x50
000CE0 62ED           03814         CPFSEQ  POSTDEC0, ACCESS
000CE2 EF?? F???      03815         GOTO    ERR_COMMAND
                      03816         ;
                      03817         ; Set phase (and notify slave)
                      03818         ;
                      03819         IF ROLE_MASTER
                      03820          IF HAS_STATUS_LEDS
                      03821           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03822          ENDIF
                      03823          MOVLW  0xF0
                      03824          CALL   SIO_WRITE_W
                      03825          MOVF   YY_YY, W, ACCESS
                      03826          SEND_8_BIT_W
                      03827          ;CALL  SIO_WRITE_W
                      03828          MOVF   INDF0, W, ACCESS
                      03829          SEND_8_BIT_W
                      03830          ;CALL  SIO_WRITE_W
                      03831          MOVLW  0x50
                      03832          CALL   SIO_WRITE_W
                      03833          MOVLW  0x4F
                      03834          CALL   SIO_WRITE_W
                      03835         ENDIF
000CE6 CFEF F???      03836         MOVFF   INDF0, PHASE_OFFSETL
000CEA B000           03837         BTFSC   YY_YY, 0, ACCESS
000CEC 8E00           03838         BSF     PHASE_OFFSETL, 7, ACCESS
000CEE 6A00           03839         CLRF    PHASE_OFFSETH, ACCESS
000CF0 B200           03840         BTFSC   YY_YY, 1, ACCESS
000CF2 8000           03841         BSF     PHASE_OFFSETH, 0, ACCESS
                      03842         BEGIN_EEPROM_WRITE EE_PHASE_H
000CF4 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000CF6 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_PHASE_H  ; NOTE interrupts need to be OFF here!
000CF8 0E00               M          MOVLW  HIGH(EE_PHASE_H)        ; NOTE interrupts need to be OFF here!
000CFA 6EAA               M          MOVWF  EEADRH, ACCESS
000CFC 0E03               M          MOVLW  LOW(EE_PHASE_H)
000CFE 6EA9               M          MOVWF  EEADR, ACCESS
000D00 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000D02 9CA6               M          BCF    EECON1, CFGS, ACCESS
000D04 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000D06 C??? FFA8      03843         MOVFF   PHASE_OFFSETH, EEDATA
                      03844         WRITE_EEPROM_DATA
000D0A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D0C 0E55               M          MOVLW  0x55
000D0E 6EA7               M          MOVWF  EECON2, ACCESS
000D10 0EAA               M          MOVLW  0xAA
000D12 6EA7               M          MOVWF  EECON2, ACCESS
000D14 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D16                    M WRITE_EEPROM_LOOP4:
000D16 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D18 D???               M          BRA    WRITE_EEPROM_LOOP4
000D1A 0004               M          CLRWDT
000D1C 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000005                M EE_LL_XX    ++
                      03845         SET_EEPROM_ADDRESS EE_PHASE_L
000D1E 0E00               M          MOVLW  HIGH(EE_PHASE_L)        ; NOTE interrupts need to be OFF here!
000D20 6EAA               M          MOVWF  EEADRH, ACCESS
000D22 0E04               M          MOVLW  LOW(EE_PHASE_L)
000D24 6EA9               M          MOVWF  EEADR, ACCESS
000D26 C??? FFA8      03846         MOVFF   PHASE_OFFSETL, EEDATA
                      03847         WRITE_EEPROM_DATA
000D2A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D2C 0E55               M          MOVLW  0x55
000D2E 6EA7               M          MOVWF  EECON2, ACCESS
000D30 0EAA               M          MOVLW  0xAA
000D32 6EA7               M          MOVWF  EECON2, ACCESS
000D34 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D36                    M WRITE_EEPROM_LOOP5:
000D36 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D38 D???               M          BRA    WRITE_EEPROM_LOOP5
000D3A 0004               M          CLRWDT
000D3C 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000006                M EE_LL_XX    ++
                      03848         END_EEPROM_WRITE
000D3E 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000D40 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000D42 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000D44 6AAA               M          CLRF   EEADRH, ACCESS
000D46 6AA9               M          CLRF   EEADR, ACCESS
000D48 6A00           03849         CLRF    YY_STATE, ACCESS
000D4A 0012           03850         RETURN
                      03851         
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D4C                03852 S6_5_DATA:
000D4C 2EE8           03853         DECFSZ  WREG, F, ACCESS
000D4E D???           03854         BRA     S6_6_DATA
                      03855         ;
                      03856         ; S6.5: CF_ADDR Command completed:
                      03857         ;
                      03858         ;   ___7______6______5______4______3______2______1______0__
                      03859         ;  |                                  |                    |
                      03860         ;  |                0                 |          7         | YY_COMMAND
                      03861         ;  |______|______|______|______|______|______|______|______|
                      03862         ;  |      |      |      |      |                           |
                      03863         ;  |   0  |   1  |   1  |   0  |    new device address     | YY_YY      
                      03864         ;  |______|______|______|______|______|______|______|______|
                      03865         ;  |      |                                                |
                      03866         ;  |   0  |                   $49                          | YY_BUFFER+0
                      03867         ;  |______|______|______|______|______|______|______|______|
                      03868         ;  |      |                                                |
                      03869         ;  |   0  |                   $41                          | YY_BUFFER+1
                      03870         ;  |______|______|______|______|______|______|______|______|
                      03871         ;  |      |                                                |
                      03872         ;  |   0  |                   $44                          | YY_DATA
                      03873         ;  |______|______|______|______|______|______|______|______|
                      03874         ;
                      03875         ; Validate inputs
                      03876         ;
000D50 0E02           03877         MOVLW   2
000D52 5C00           03878         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000D54 E2??           03879         BC      S6_5_VALID
000D56 EF?? F???      03880         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03881 
000D5A                03882 S6_5_VALID:
000D5A E0??           03883         BZ      S6_5_ADDR
000D5C EF?? F???      03884         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03885 
000D60                03886 S6_5_ADDR:
000D60 EE?? F0??      03887         LFSR    0, YY_BUFFER+1
000D64 0E41           03888         MOVLW   0x41
000D66 62ED           03889         CPFSEQ  POSTDEC0, ACCESS
000D68 EF?? F???      03890         GOTO    ERR_COMMAND
000D6C 0E49           03891         MOVLW   0x49
000D6E 62EF           03892         CPFSEQ  INDF0, ACCESS
000D70 EF?? F???      03893         GOTO    ERR_COMMAND
                      03894         ;
                      03895         ; set address
                      03896         ;
000D74 5000           03897         MOVF    YY_YY, W, ACCESS
000D76 0B0F           03898         ANDLW   0x0F
000D78 6E00           03899         MOVWF   MY_ADDRESS, ACCESS
                      03900         BEGIN_EEPROM_WRITE EE_DEV_ID
000D7A 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000D7C 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DEV_ID   ; NOTE interrupts need to be OFF here!
000D7E 0E00               M          MOVLW  HIGH(EE_DEV_ID)         ; NOTE interrupts need to be OFF here!
000D80 6EAA               M          MOVWF  EEADRH, ACCESS
000D82 0E02               M          MOVLW  LOW(EE_DEV_ID)
000D84 6EA9               M          MOVWF  EEADR, ACCESS
000D86 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000D88 9CA6               M          BCF    EECON1, CFGS, ACCESS
000D8A 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000D8C C??? FFA8      03901         MOVFF   MY_ADDRESS, EEDATA
                      03902         WRITE_EEPROM_DATA
000D90 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D92 0E55               M          MOVLW  0x55
000D94 6EA7               M          MOVWF  EECON2, ACCESS
000D96 0EAA               M          MOVLW  0xAA
000D98 6EA7               M          MOVWF  EECON2, ACCESS
000D9A 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D9C                    M WRITE_EEPROM_LOOP6:
000D9C A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D9E D???               M          BRA    WRITE_EEPROM_LOOP6
000DA0 0004               M          CLRWDT
000DA2 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000007                M EE_LL_XX    ++
                      03903         END_EEPROM_WRITE
000DA4 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000DA6 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000DA8 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000DAA 6AAA               M          CLRF   EEADRH, ACCESS
000DAC 6AA9               M          CLRF   EEADR, ACCESS
000DAE 6A00           03904         CLRF    YY_STATE, ACCESS
000DB0 0012           03905         RETURN
                      03906 
000DB2                03907 S6_6_DATA:
000DB2 2EE8           03908         DECFSZ  WREG, F, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000DB4 D???           03909         BRA     S6_7_DATA
                      03910         ;
                      03911         ; S6.6: SLEEP Command completed:
                      03912         ;
                      03913         ;   ___7______6______5______4______3______2______1______0__
                      03914         ;  |                                  |                    |
                      03915         ;  |                0                 |          7         | YY_COMMAND
                      03916         ;  |______|______|______|______|______|______|______|______|
                      03917         ;  |      |      |      |      |                           |
                      03918         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      03919         ;  |______|______|______|______|______|______|______|______|
                      03920         ;  |      |                                                |
                      03921         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      03922         ;  |______|______|______|______|______|______|______|______|
                      03923         ;  |      |                                                |
                      03924         ;  |   0  |                   $5A                          | YY_DATA
                      03925         ;  |______|______|______|______|______|______|______|______|
                      03926         ;
                      03927         ; Validate inputs
                      03928         ;
000DB6 0E01           03929         MOVLW   1
000DB8 5C00           03930         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000DBA E2??           03931         BC      S6_6_VALID
000DBC EF?? F???      03932         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03933 
000DC0                03934 S6_6_VALID:
000DC0 E0??           03935         BZ      S6_6_SLEEP
000DC2 EF?? F???      03936         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03937 
000DC6                03938 S6_6_SLEEP:
000DC6 EE?? F0??      03939         LFSR    0, YY_BUFFER
000DCA 0E5A           03940         MOVLW   0x5A
000DCC 62EF           03941         CPFSEQ  INDF0, ACCESS
000DCE EF?? F???      03942         GOTO    ERR_COMMAND
000DD2 6A00           03943         CLRF    YY_STATE, ACCESS
000DD4                03944 DO_CMD_SLEEP:
000DD4 B800           03945         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; don't sleep in priv mode
000DD6 0012           03946         RETURN
                      03947         ;
                      03948         ; Pass command to slave
                      03949         ;
                      03950         IF ROLE_MASTER
                      03951          IF HAS_STATUS_LEDS
                      03952           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03953          ENDIF
                      03954          MOVLW  0xF0
                      03955          CALL   SIO_WRITE_W
                      03956          CLRF   WREG, ACCESS
                      03957          CALL   SIO_WRITE_W
                      03958          MOVLW  0x5A
                      03959          CALL   SIO_WRITE_W
                      03960          MOVLW  0x5A
                      03961          CALL   SIO_WRITE_W
                      03962         ENDIF
                      03963         ;
                      03964         ; Tell power supply to sleep
                      03965         ;
                      03966         IF HAS_POWER_CTRL
                      03967          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      03968         ENDIF
                      03969         IF HAS_STATUS_LEDS
                      03970          SET_SSR_SLOW_FLASH SSR_GREEN
                      03971          SET_SSR_SLOW_FLASH SSR_YELLOW
                      03972          SET_SSR_SLOW_FLASH SSR_RED
                      03973         ENDIF
000DD8 8600           03974         BSF     SSR_STATE, SLEEP_MODE, ACCESS
000DDA 0012           03975         RETURN
                      03976 
000DDC                03977 S6_7_DATA:
000DDC 2EE8           03978         DECFSZ  WREG, F, ACCESS
000DDE D???           03979         BRA     S6_8_DATA
                      03980         ;
                      03981         ; S6.7: WAKE Command completed:
                      03982         ;
                      03983         ;   ___7______6______5______4______3______2______1______0__
                      03984         ;  |                                  |                    |
                      03985         ;  |                0                 |          7         | YY_COMMAND
                      03986         ;  |______|______|______|______|______|______|______|______|
                      03987         ;  |      |      |      |      |                           |
                      03988         ;  |   0  |   0  |   0  |   0  |             1             | (not saved)
                      03989         ;  |______|______|______|______|______|______|______|______|
                      03990         ;  |      |                                                |
                      03991         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      03992         ;  |______|______|______|______|______|______|______|______|
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03993         ;  |      |                                                |
                      03994         ;  |   0  |                   $5A                          | YY_DATA
                      03995         ;  |______|______|______|______|______|______|______|______|
                      03996         ;
                      03997         ; Validate inputs
                      03998         ;
000DE0 0E01           03999         MOVLW   1
000DE2 5C00           04000         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000DE4 E2??           04001         BC      S6_7_VALID
000DE6 EF?? F???      04002         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04003 
000DEA                04004 S6_7_VALID:
000DEA E0??           04005         BZ      S6_7_WAKE
000DEC EF?? F???      04006         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04007 
000DF0                04008 S6_7_WAKE:
000DF0 EE?? F0??      04009         LFSR    0, YY_BUFFER
000DF4 0E5A           04010         MOVLW   0x5A
000DF6 62EF           04011         CPFSEQ  INDF0, ACCESS
000DF8 EF?? F???      04012         GOTO    ERR_COMMAND
000DFC 6A00           04013         CLRF    YY_STATE, ACCESS
                      04014 
000DFE                04015 DO_CMD_WAKE:
                      04016         ;
                      04017         ; Pass command to slave
                      04018         ;
                      04019         IF ROLE_MASTER
                      04020          IF HAS_STATUS_LEDS
                      04021           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04022          ENDIF
                      04023          MOVLW  0xF0
                      04024          CALL   SIO_WRITE_W
                      04025          MOVLW  0x01
                      04026          CALL   SIO_WRITE_W
                      04027          MOVLW  0x5A
                      04028          CALL   SIO_WRITE_W
                      04029          MOVLW  0x5A
                      04030          CALL   SIO_WRITE_W
                      04031         ENDIF
                      04032         ;
                      04033         ; Tell power supply to wake up
                      04034         ;
                      04035         IF HAS_POWER_CTRL
                      04036          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      04037         ENDIF
                      04038         IF HAS_STATUS_LEDS
                      04039          ;SET_SSR_SLOW_FADE SSR_GREEN
                      04040          SET_SSR_NORMAL_MODE SSR_GREEN
                      04041         ENDIF
                      04042         ; If in DMX mode, use slower green LED pattern
000DFE AC00           04043         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
000E00 D???           04044         BRA     S6_8_X
                      04045         IF HAS_STATUS_LEDS
                      04046          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      04047          SET_SSR_DMX_MODE SSR_GREEN
                      04048         ENDIF
000E02                04049 S6_8_X:
                      04050         IF HAS_STATUS_LEDS
                      04051          SET_SSR_OFF SSR_YELLOW
                      04052          SET_SSR_OFF SSR_RED
                      04053         ENDIF
000E02 9600           04054         BCF     SSR_STATE, SLEEP_MODE, ACCESS
000E04 6800           04055         SETF    AUTO_OFF_CTRH, ACCESS
000E06 6800           04056         SETF    AUTO_OFF_CTRL, ACCESS
000E08 0012           04057         RETURN
                      04058 
000E0A                04059 S6_8_DATA:
000E0A 2EE8           04060         DECFSZ  WREG, F, ACCESS
000E0C D???           04061         BRA     S6_9_DATA
                      04062         ;
                      04063         ; S6.8: SHUTDOWN Command completed:
                      04064         ;
                      04065         ;   ___7______6______5______4______3______2______1______0__
                      04066         ;  |                                  |                    |
                      04067         ;  |                0                 |          7         | YY_COMMAND
                      04068         ;  |______|______|______|______|______|______|______|______|
                      04069         ;  |      |      |      |      |                           |
                      04070         ;  |   0  |   0  |   0  |   0  |             2             | (not saved)
                      04071         ;  |______|______|______|______|______|______|______|______|
                      04072         ;  |      |                                                |
                      04073         ;  |   0  |                   $58                          | YY_BUFFER
                      04074         ;  |______|______|______|______|______|______|______|______|
                      04075         ;  |      |                                                |
                      04076         ;  |   0  |                   $59                          | YY_DATA
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04077         ;  |______|______|______|______|______|______|______|______|
                      04078         ;
                      04079         ; Validate inputs
                      04080         ;
000E0E 0E01           04081         MOVLW   1
000E10 5C00           04082         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E12 E2??           04083         BC      S6_8_VALID
000E14 EF?? F???      04084         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04085 
000E18                04086 S6_8_VALID:
000E18 E0??           04087         BZ      S6_8_SHUTDOWN
000E1A EF?? F???      04088         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04089 
000E1E                04090 S6_8_SHUTDOWN:
000E1E EE?? F0??      04091         LFSR    0, YY_BUFFER
000E22 0E58           04092         MOVLW   0x58
000E24 62EF           04093         CPFSEQ  INDF0, ACCESS
000E26 EF?? F???      04094         GOTO    ERR_COMMAND
                      04095         ;       
                      04096         ; shutdown
                      04097         ;
000E2A EF?? F???      04098         GOTO    HALT_MODE
                      04099 
000E2E                04100 S6_9_DATA:
000E2E 2EE8           04101         DECFSZ  WREG, F, ACCESS
000E30 D???           04102         BRA     S6_10_DATA
                      04103         ;
                      04104         ; S6.9: QUERY Command completed:
                      04105         ;
                      04106         ;   ___7______6______5______4______3______2______1______0__
                      04107         ;  |                                  |                    |
                      04108         ;  |                0                 |          7         | YY_COMMAND
                      04109         ;  |______|______|______|______|______|______|______|______|
                      04110         ;  |      |      |      |      |                           |
                      04111         ;  |   0  |   0  |   0  |   0  |             3             | (not saved)
                      04112         ;  |______|______|______|______|______|______|______|______|
                      04113         ;  |      |                                                |
                      04114         ;  |   0  |                   $24                          | YY_BUFFER+0
                      04115         ;  |______|______|______|______|______|______|______|______|
                      04116         ;  |      |                                                |
                      04117         ;  |   0  |                   $54                          | YY_DATA
                      04118         ;  |______|______|______|______|______|______|______|______|
                      04119         ;
                      04120         ; Validate inputs
                      04121         ;
000E32 0E01           04122         MOVLW   1
000E34 5C00           04123         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E36 E2??           04124         BC      S6_9_VALID
000E38 EF?? F???      04125         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04126 
000E3C                04127 S6_9_VALID:
000E3C E0??           04128         BZ      S6_9_QUERY
000E3E EF?? F???      04129         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04130 
000E42                04131 S6_9_QUERY:
000E42 EE?? F0??      04132         LFSR    0, YY_BUFFER
000E46 0E24           04133         MOVLW   0x24
000E48 62EF           04134         CPFSEQ  INDF0, ACCESS
000E4A EF?? F???      04135         GOTO    ERR_COMMAND
                      04136         ;
                      04137         ; return status of unit
                      04138         ;
                      04139         IF ROLE_MASTER
                      04140          IF HAS_STATUS_LEDS
                      04141           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04142          ENDIF
                      04143          MOVLW  0xF0                    ; initiate write-through IC_TXSTA command
                      04144          CALL   SIO_WRITE_W             ; to slave CPU
                      04145          MOVLW  0x23
                      04146          CALL   SIO_WRITE_W
                      04147          MOVLW  .30                     ; write 31-byte packet
                      04148          CALL   SIO_WRITE_W
                      04149         ELSE
                      04150          IF ROLE_STANDALONE
000E4E EC?? F???      04151           CALL  TR_ON_DELAY
000E52 8682           04152           BSF   PORT_T_R, BIT_T_R, ACCESS               ; Fire up our transmitter now
000E54 9400           04153           BCF   SSR_STATE2, INHIBIT_OUTPUT, ACCESS      ; Allow sending output
                      04154          ELSE
                      04155           ERR_BUG 0x0F, ERR_CLASS_INT_COMMAND
                      04156          ENDIF
                      04157         ENDIF
000E56 5000           04158         MOVF    MY_ADDRESS, W, ACCESS
000E58 09F0           04159         IORLW   0xF0
                      04160         IF ROLE_MASTER
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04161          BCF    WREG, 7, ACCESS
                      04162         ENDIF
000E5A EC?? F???      04163         CALL    SIO_WRITE_W                     ; 00 start byte                         <1111aaaa>
000E5E 0E1F           04164         MOVLW   0x1F
                      04165         SEND_8_BIT_W                            ; 01 "reply to query" packet type       <00011111>
000E60 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000E62 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000E64 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E66 D???               M         BRA     S8B_CHK_7E1
000E68 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000E6C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000E6E EC?? F???          M         CALL    SIO_WRITE_W                     
000E72 D???               M         BRA     S8B_END1
000E74                    M S8B_CHK_7E1:
000E74 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000E76 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E78 D???               M         BRA     S8B_CHK_MSB1
000E7A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000E7C EC?? F???          M         CALL    SIO_WRITE_W
000E80 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000E82 EC?? F???          M         CALL    SIO_WRITE_W
000E86 D???               M         BRA     S8B_END1
000E88                    M S8B_CHK_MSB1:
000E88 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000E8A D???               M         BRA     S8B_SEND_NORMAL1
000E8C 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000E8E EC?? F???          M         CALL    SIO_WRITE_W
000E92 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000E94                    M S8B_SEND_NORMAL1:
000E94 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000E96 EC?? F???          M         CALL    SIO_WRITE_W     
000E9A                    M S8B_END1:
  00000002                M S8B_LABEL ++
000E9A 0E31           04166         MOVLW   0x31
                      04167         SEND_8_BIT_W                            ; 02 ROM/format version 3.1             <00110001>
000E9C 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000E9E 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000EA0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000EA2 D???               M         BRA     S8B_CHK_7E2
000EA4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000EA8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000EAA EC?? F???          M         CALL    SIO_WRITE_W                     
000EAE D???               M         BRA     S8B_END2
000EB0                    M S8B_CHK_7E2:
000EB0 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000EB2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000EB4 D???               M         BRA     S8B_CHK_MSB2
000EB6 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000EB8 EC?? F???          M         CALL    SIO_WRITE_W
000EBC 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000EBE EC?? F???          M         CALL    SIO_WRITE_W
000EC2 D???               M         BRA     S8B_END2
000EC4                    M S8B_CHK_MSB2:
000EC4 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000EC6 D???               M         BRA     S8B_SEND_NORMAL2
000EC8 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000ECA EC?? F???          M         CALL    SIO_WRITE_W
000ECE 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000ED0                    M S8B_SEND_NORMAL2:
000ED0 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000ED2 EC?? F???          M         CALL    SIO_WRITE_W     
000ED6                    M S8B_END2:
  00000003                M S8B_LABEL ++
000ED6 6AE8           04168         CLRF    WREG, ACCESS
                      04169         IF HAS_SENSORS
                      04170          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If sensor A is enabled on this board,
                      04171          BSF    WREG, 6, ACCESS                 ; set the Sc bit for that sensor.
                      04172          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS ; and for sensor B
                      04173          BSF    WREG, 5, ACCESS                 ; 
                      04174          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS ; and for sensor C
                      04175          BSF    WREG, 4, ACCESS                 ; 
                      04176          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS ; and for sensor D
                      04177          BSF    WREG, 3, ACCESS                 ; 
                      04178         ENDIF                                   ; W=0ABCD---  1=sensor configured; 0=LED
000ED8 BE00           04179         BTFSC   DMX_SLOTH, DMX_EN, ACCESS
000EDA 84E8           04180         BSF     WREG, 2, ACCESS                 ;   0----d--  DMX enable bit
000EDC B000           04181         BTFSC   DMX_SLOTH, DMX_BIT8, ACCESS
000EDE 82E8           04182         BSF     WREG, 1, ACCESS                 ;   0-----c-  DMX channel bit 8
000EE0 BE00           04183         BTFSC   DMX_SLOTL, 7, ACCESS            ; 
000EE2 80E8           04184         BSF     WREG, 0, ACCESS                 ;   0------c  DMX channel bit 7
                      04185         SEND_8_BIT_W                            ; 03 sensor, DMX status                 <0ABCDdcc> 
000EE4 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000EE6 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000EE8 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000EEA D???               M         BRA     S8B_CHK_7E3
000EEC EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000EF0 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000EF2 EC?? F???          M         CALL    SIO_WRITE_W                     
000EF6 D???               M         BRA     S8B_END3
000EF8                    M S8B_CHK_7E3:
000EF8 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000EFA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000EFC D???               M         BRA     S8B_CHK_MSB3
000EFE 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F00 EC?? F???          M         CALL    SIO_WRITE_W
000F04 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F06 EC?? F???          M         CALL    SIO_WRITE_W
000F0A D???               M         BRA     S8B_END3
000F0C                    M S8B_CHK_MSB3:
000F0C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F0E D???               M         BRA     S8B_SEND_NORMAL3
000F10 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F12 EC?? F???          M         CALL    SIO_WRITE_W
000F16 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F18                    M S8B_SEND_NORMAL3:
000F18 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F1A EC?? F???          M         CALL    SIO_WRITE_W     
000F1E                    M S8B_END3:
  00000004                M S8B_LABEL ++
000F1E 5000           04186         MOVF    DMX_SLOTL, W, ACCESS            ;   0ccccccc  DMX channel bits 6:0
000F20 0B7F           04187         ANDLW   0x7F
                      04188         SEND_8_BIT_W                            ; 04 DMX status
000F22 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F24 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F26 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F28 D???               M         BRA     S8B_CHK_7E4
000F2A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F2E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F30 EC?? F???          M         CALL    SIO_WRITE_W                     
000F34 D???               M         BRA     S8B_END4
000F36                    M S8B_CHK_7E4:
000F36 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F38 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F3A D???               M         BRA     S8B_CHK_MSB4
000F3C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F3E EC?? F???          M         CALL    SIO_WRITE_W
000F42 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F44 EC?? F???          M         CALL    SIO_WRITE_W
000F48 D???               M         BRA     S8B_END4
000F4A                    M S8B_CHK_MSB4:
000F4A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F4C D???               M         BRA     S8B_SEND_NORMAL4
000F4E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F50 EC?? F???          M         CALL    SIO_WRITE_W
000F54 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F56                    M S8B_SEND_NORMAL4:
000F56 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F58 EC?? F???          M         CALL    SIO_WRITE_W     
000F5C                    M S8B_END4:
  00000005                M S8B_LABEL ++
000F5C 6AE8           04189         CLRF    WREG, ACCESS
000F5E B800           04190         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; W=00000qs0
000F60 84E8           04191         BSF     WREG, 2, ACCESS
000F62 B600           04192         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
000F64 82E8           04193         BSF     WREG, 1, ACCESS
                      04194         SEND_8_BIT_W
000F66 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F68 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F6A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F6C D???               M         BRA     S8B_CHK_7E5
000F6E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F72 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F74 EC?? F???          M         CALL    SIO_WRITE_W                     
000F78 D???               M         BRA     S8B_END5
000F7A                    M S8B_CHK_7E5:
000F7A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F7C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F7E D???               M         BRA     S8B_CHK_MSB5
000F80 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F82 EC?? F???          M         CALL    SIO_WRITE_W
000F86 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F88 EC?? F???          M         CALL    SIO_WRITE_W
000F8C D???               M         BRA     S8B_END5
000F8E                    M S8B_CHK_MSB5:
000F8E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F90 D???               M         BRA     S8B_SEND_NORMAL5
000F92 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F94 EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F98 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F9A                    M S8B_SEND_NORMAL5:
000F9A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F9C EC?? F???          M         CALL    SIO_WRITE_W     
000FA0                    M S8B_END5:
  00000006                M S8B_LABEL ++
                      04195         ;CALL   SIO_WRITE_W                     ; 05 masks, priv, sleep, mem full       <0ABCDqsf> XXX N
                            OT ALL IMPLEMENTED
000FA0 6AE8           04196         CLRF    WREG, ACCESS
                      04197         IF HAS_SENSORS
                      04198          MOVLW  0x78                            ; Initially set all sensors to 1
                      04199          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If that line is not a sensor... 
                      04200          BTFSC  PORT_SENS_A, BIT_SENS_A, ACCESS ; Or the sensor is not pulled low...
                      04201          BCF    WREG, 6, ACCESS                 ; Then clear the reported flag.
                      04202          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS 
                      04203          BTFSC  PORT_SENS_B, BIT_SENS_B, ACCESS 
                      04204          BCF    WREG, 5, ACCESS                 
                      04205          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS 
                      04206          BTFSC  PORT_SENS_C, BIT_SENS_C, ACCESS 
                      04207          BCF    WREG, 4, ACCESS                 
                      04208          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS 
                      04209          BTFSC  PORT_SENS_D, BIT_SENS_D, ACCESS 
                      04210          BCF    WREG, 3, ACCESS                 ; W=0ABCD---  1=sensor active (low) 0=inactive (high)
                      04211         ENDIF
000FA2 B600           04212         BTFSC   SSR_STATE2, PRIV_FORBID, ACCESS
000FA4 84E8           04213         BSF     WREG, 2, ACCESS                 
000FA6 B000           04214         BTFSC   PHASE_OFFSETH, 0, ACCESS
000FA8 82E8           04215         BSF     WREG, 1, ACCESS
000FAA BE00           04216         BTFSC   PHASE_OFFSETL, 7, ACCESS
000FAC 80E8           04217         BSF     WREG, 0, ACCESS
                      04218         SEND_8_BIT_W
000FAE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000FB0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000FB2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FB4 D???               M         BRA     S8B_CHK_7E6
000FB6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000FBA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000FBC EC?? F???          M         CALL    SIO_WRITE_W                     
000FC0 D???               M         BRA     S8B_END6
000FC2                    M S8B_CHK_7E6:
000FC2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000FC4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FC6 D???               M         BRA     S8B_CHK_MSB6
000FC8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000FCA EC?? F???          M         CALL    SIO_WRITE_W
000FCE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000FD0 EC?? F???          M         CALL    SIO_WRITE_W
000FD4 D???               M         BRA     S8B_END6
000FD6                    M S8B_CHK_MSB6:
000FD6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000FD8 D???               M         BRA     S8B_SEND_NORMAL6
000FDA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000FDC EC?? F???          M         CALL    SIO_WRITE_W
000FE0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000FE2                    M S8B_SEND_NORMAL6:
000FE2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000FE4 EC?? F???          M         CALL    SIO_WRITE_W     
000FE8                    M S8B_END6:
  00000007                M S8B_LABEL ++
                      04219         ;CALL   SIO_WRITE_W                     ; 06 active sensors, xpriv, phase<8:7>  <0ABCDXpp> XXX N
                            OT ALL IMPLEMENTED
000FE8 5000           04220         MOVF    PHASE_OFFSETL, W, ACCESS
000FEA 9EE8           04221         BCF     WREG, 7, ACCESS
                      04222         SEND_8_BIT_W
000FEC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000FEE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000FF0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FF2 D???               M         BRA     S8B_CHK_7E7
000FF4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000FF8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000FFA EC?? F???          M         CALL    SIO_WRITE_W                     
000FFE D???               M         BRA     S8B_END7
001000                    M S8B_CHK_7E7:
001000 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001002 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001004 D???               M         BRA     S8B_CHK_MSB7
001006 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001008 EC?? F???          M         CALL    SIO_WRITE_W
00100C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00100E EC?? F???          M         CALL    SIO_WRITE_W
001012 D???               M         BRA     S8B_END7
001014                    M S8B_CHK_MSB7:
001014 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001016 D???               M         BRA     S8B_SEND_NORMAL7
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001018 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00101A EC?? F???          M         CALL    SIO_WRITE_W
00101E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001020                    M S8B_SEND_NORMAL7:
001020 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001022 EC?? F???          M         CALL    SIO_WRITE_W     
001026                    M S8B_END7:
  00000008                M S8B_LABEL ++
                      04223         ;CALL   SIO_WRITE_W                     ; 07 phase <6:0>                        <0ppppppp>
001026 6AE8           04224         CLRF    WREG, ACCESS
001028 EC?? F???      04225         CALL    SIO_WRITE_W                     ; 08 eeprom memory free <14:7>          <0eeeeeee> XXX N
                            OT IMPLEMENTED
00102C 6AE8           04226         CLRF    WREG, ACCESS
00102E EC?? F???      04227         CALL    SIO_WRITE_W                     ; 09 eeprom memory free <6:0>           <0eeeeeee> XXX N
                            OT IMPLEMENTED
001032 6AE8           04228         CLRF    WREG, ACCESS
001034 EC?? F???      04229         CALL    SIO_WRITE_W                     ; 10 RAM memory free <14:7>             <0MMMMMMM> XXX N
                            OT IMPLEMENTED
001038 6AE8           04230         CLRF    WREG, ACCESS
00103A EC?? F???      04231         CALL    SIO_WRITE_W                     ; 11 RAM memory free <6:0>              <0MMMMMMM> XXX N
                            OT IMPLEMENTED
                      04232         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      04233          MOVLW  0x00
                      04234         ELSE
                      04235          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      04236           MOVLW 0x01
                      04237          ELSE
                      04238           ERR_BUG 0x10, ERR_CLASS_DEVICE
00103E 0E10               M          MOVLW  0x10
001040 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_DEVICE == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_DEVICE == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_DEVICE == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001042 6A00               M          CLRF   YY_STATE, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001044 0012               M          RETURN
                      04239          ENDIF
                      04240         ENDIF
                      04241         SEND_8_BIT_W
001046 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001048 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00104A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00104C D???               M         BRA     S8B_CHK_7E8
00104E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001052 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001054 EC?? F???          M         CALL    SIO_WRITE_W                     
001058 D???               M         BRA     S8B_END8
00105A                    M S8B_CHK_7E8:
00105A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00105C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00105E D???               M         BRA     S8B_CHK_MSB8
001060 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001062 EC?? F???          M         CALL    SIO_WRITE_W
001066 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001068 EC?? F???          M         CALL    SIO_WRITE_W
00106C D???               M         BRA     S8B_END8
00106E                    M S8B_CHK_MSB8:
00106E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001070 D???               M         BRA     S8B_SEND_NORMAL8
001072 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001074 EC?? F???          M         CALL    SIO_WRITE_W
001078 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00107A                    M S8B_SEND_NORMAL8:
00107A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00107C EC?? F???          M         CALL    SIO_WRITE_W     
001080                    M S8B_END8:
  00000009                M S8B_LABEL ++
                      04242         ;CALL   SIO_WRITE_W                     ; 12 sequence flag, device ID           <0X0iiiii> XXX N
                            OT ALL IMPLEMENTED
001080 6AE8           04243         CLRF    WREG, ACCESS
001082 EC?? F???      04244         CALL    SIO_WRITE_W                     ; 13 executing sequence                 <0xxxxxxx> XXX N
                            OT IMPLEMENTED
                      04245 
001086 0E00           04246         MOVLW   0x00
001088 EC?? F???      04247         CALL    SIO_WRITE_W                     ; 14 sensor A settings                  <0owE0000> XXX N
                            OT IMPLEMENTED
00108C 0E00           04248         MOVLW   0x00
00108E EC?? F???      04249         CALL    SIO_WRITE_W                     ; 15 sensor A pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
001092 0E00           04250         MOVLW   0x00
001094 EC?? F???      04251         CALL    SIO_WRITE_W                     ; 16 sensor A sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
001098 0E00           04252         MOVLW   0x00
00109A EC?? F???      04253         CALL    SIO_WRITE_W                     ; 17 sensor A post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04254 
00109E 0E01           04255         MOVLW   0x01
0010A0 EC?? F???      04256         CALL    SIO_WRITE_W                     ; 18 sensor B settings                  <0owE0001> XXX N
                            OT IMPLEMENTED
0010A4 0E00           04257         MOVLW   0x00
0010A6 EC?? F???      04258         CALL    SIO_WRITE_W                     ; 19 sensor B pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010AA 0E00           04259         MOVLW   0x00
0010AC EC?? F???      04260         CALL    SIO_WRITE_W                     ; 20 sensor B sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010B0 0E00           04261         MOVLW   0x00
0010B2 EC?? F???      04262         CALL    SIO_WRITE_W                     ; 21 sensor B post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04263 
0010B6 0E02           04264         MOVLW   0x02
0010B8 EC?? F???      04265         CALL    SIO_WRITE_W                     ; 22 sensor C settings                  <0owE0010> XXX N
                            OT IMPLEMENTED
0010BC 0E00           04266         MOVLW   0x00
0010BE EC?? F???      04267         CALL    SIO_WRITE_W                     ; 23 sensor C pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010C2 0E00           04268         MOVLW   0x00
0010C4 EC?? F???      04269         CALL    SIO_WRITE_W                     ; 24 sensor C sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010C8 0E00           04270         MOVLW   0x00
0010CA EC?? F???      04271         CALL    SIO_WRITE_W                     ; 25 sensor C post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04272 
0010CE 0E03           04273         MOVLW   0x03
0010D0 EC?? F???      04274         CALL    SIO_WRITE_W                     ; 26 sensor D settings                  <0owE0011> XXX N
                            OT IMPLEMENTED
0010D4 0E00           04275         MOVLW   0x00
0010D6 EC?? F???      04276         CALL    SIO_WRITE_W                     ; 27 sensor D pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010DA 0E00           04277         MOVLW   0x00
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010DC EC?? F???      04278         CALL    SIO_WRITE_W                     ; 28 sensor D sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010E0 0E00           04279         MOVLW   0x00
0010E2 EC?? F???      04280         CALL    SIO_WRITE_W                     ; 29 sensor D post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04281         
0010E6 5000           04282         MOVF    LAST_ERROR, W, ACCESS
0010E8 6A00           04283         CLRF    LAST_ERROR, ACCESS
                      04284         SEND_8_BIT_W
0010EA 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0010EC 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0010EE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0010F0 D???               M         BRA     S8B_CHK_7E9
0010F2 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0010F6 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0010F8 EC?? F???          M         CALL    SIO_WRITE_W                     
0010FC D???               M         BRA     S8B_END9
0010FE                    M S8B_CHK_7E9:
0010FE 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001100 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001102 D???               M         BRA     S8B_CHK_MSB9
001104 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001106 EC?? F???          M         CALL    SIO_WRITE_W
00110A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00110C EC?? F???          M         CALL    SIO_WRITE_W
001110 D???               M         BRA     S8B_END9
001112                    M S8B_CHK_MSB9:
001112 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001114 D???               M         BRA     S8B_SEND_NORMAL9
001116 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001118 EC?? F???          M         CALL    SIO_WRITE_W
00111C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00111E                    M S8B_SEND_NORMAL9:
00111E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001120 EC?? F???          M         CALL    SIO_WRITE_W     
001124                    M S8B_END9:
  0000000A                M S8B_LABEL ++
                      04285         ;CALL   SIO_WRITE_W                     ; 30 fault code                         <0fffffff>
                      04286         IF ROLE_MASTER
                      04287          MOVLW  B'00011011'
                      04288          CALL   SIO_WRITE_W                     ; 31 end of packet to slave chip
                      04289         ELSE
001124 6AE8           04290          CLRF   WREG, ACCESS
001126 EC?? F???      04291          CALL   SIO_WRITE_W                     ; 31 (nil) slave fault code
00112A 6AE8           04292          CLRF   WREG, ACCESS    
00112C EC?? F???      04293          CALL   SIO_WRITE_W                     ; 32 (nil) slave phase offset <8:7>
001130 6AE8           04294          CLRF   WREG, ACCESS    
001132 EC?? F???      04295          CALL   SIO_WRITE_W                     ; 33 (nil) slave phase offset <6:0>
001136 0E??           04296          MOVLW  UPPER(SYS_SNH)
001138 6EF8           04297          MOVWF  TBLPTRU, ACCESS
00113A 0E??           04298          MOVLW  HIGH(SYS_SNH)
00113C 6EF7           04299          MOVWF  TBLPTRH, ACCESS
00113E 0E??           04300          MOVLW  LOW(SYS_SNH)
001140 6EF6           04301          MOVWF  TBLPTRL, ACCESS
001142 0009           04302          TBLRD*+
001144 50F5           04303          MOVF   TABLAT, W, ACCESS
                      04304          SEND_8_BIT_W                           ; 34 Serial Number (MSB)
001146 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001148 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00114A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00114C D???               M         BRA     S8B_CHK_7E10
00114E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001152 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001154 EC?? F???          M         CALL    SIO_WRITE_W                     
001158 D???               M         BRA     S8B_END10
00115A                    M S8B_CHK_7E10:
00115A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00115C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00115E D???               M         BRA     S8B_CHK_MSB10
001160 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001162 EC?? F???          M         CALL    SIO_WRITE_W
001166 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001168 EC?? F???          M         CALL    SIO_WRITE_W
00116C D???               M         BRA     S8B_END10
00116E                    M S8B_CHK_MSB10:
00116E AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001170 D???               M         BRA     S8B_SEND_NORMAL10
001172 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001174 EC?? F???          M         CALL    SIO_WRITE_W
001178 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00117A                    M S8B_SEND_NORMAL10:
00117A 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00117C EC?? F???          M         CALL    SIO_WRITE_W     
001180                    M S8B_END10:
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000B                M S8B_LABEL ++
001180 0009           04305          TBLRD*+
001182 50F5           04306          MOVF   TABLAT, W, ACCESS
                      04307          SEND_8_BIT_W                           ; 35 Serial Number (LSB)
001184 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001186 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001188 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00118A D???               M         BRA     S8B_CHK_7E11
00118C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001190 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001192 EC?? F???          M         CALL    SIO_WRITE_W                     
001196 D???               M         BRA     S8B_END11
001198                    M S8B_CHK_7E11:
001198 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00119A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00119C D???               M         BRA     S8B_CHK_MSB11
00119E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0011A0 EC?? F???          M         CALL    SIO_WRITE_W
0011A4 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0011A6 EC?? F???          M         CALL    SIO_WRITE_W
0011AA D???               M         BRA     S8B_END11
0011AC                    M S8B_CHK_MSB11:
0011AC AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0011AE D???               M         BRA     S8B_SEND_NORMAL11
0011B0 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0011B2 EC?? F???          M         CALL    SIO_WRITE_W
0011B6 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0011B8                    M S8B_SEND_NORMAL11:
0011B8 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0011BA EC?? F???          M         CALL    SIO_WRITE_W     
0011BE                    M S8B_END11:
  0000000C                M S8B_LABEL ++
0011BE 0E33           04308          MOVLW  0x33
0011C0 EC?? F???      04309          CALL   SIO_WRITE_W                     ; 36 sentinel at end of packet
0011C4 8400           04310          BSF    SSR_STATE, DRAIN_TR, ACCESS     ; schedule transmitter shut-down
                      04311         ENDIF
0011C6 6A00           04312         CLRF    YY_STATE, ACCESS
0011C8 0012           04313         RETURN
                      04314         
0011CA                04315 S6_10_DATA:
0011CA 2EE8           04316         DECFSZ  WREG, F, ACCESS
0011CC D???           04317         BRA     S6_11_DATA
                      04318         ;
                      04319         ; S6.10: DEF_SENS Command completed:
                      04320         ;
                      04321         ;   ___7______6______5______4______3______2______1______0__
                      04322         ;  |                                  |                    |
                      04323         ;  |                0                 |          7         | YY_COMMAND
                      04324         ;  |______|______|______|______|______|______|______|______|
                      04325         ;  |      |      |      |      |                           |
                      04326         ;  |   0  |   0  |   0  |   0  |             6             | (not saved)
                      04327         ;  |______|______|______|______|______|______|______|______|
                      04328         ;  |      |    Trigger modes   |             |             |  
                      04329         ;  |   0  | once | while|1=high|      0      |    sensor   | YY_BUFFER+0
                      04330         ;  |______|______|______|______|______|______|______|______|
                      04331         ;  |      |                                                |
                      04332         ;  |   0  |           pre-trigger sequence ID              | YY_BUFFER+1
                      04333         ;  |______|______|______|______|______|______|______|______|
                      04334         ;  |      |                                                |
                      04335         ;  |   0  |               trigger sequence ID              | YY_BUFFER+2
                      04336         ;  |______|______|______|______|______|______|______|______|
                      04337         ;  |      |                                                |
                      04338         ;  |   0  |          post-trigger sequence ID              | YY_BUFFER+3
                      04339         ;  |______|______|______|______|______|______|______|______|
                      04340         ;  |      |                                                |
                      04341         ;  |   0  |                   $3C                          | YY_DATA
                      04342         ;  |______|______|______|______|______|______|______|______|
                      04343         ;
                      04344         ;
0011CE 0E04           04345         MOVLW   4
0011D0 5C00           04346         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0011D2 E2??           04347         BC      S6_10_VALID
0011D4 EF?? F???      04348         GOTO    S6_KEEP_LOOKING                 ; input < 4? not done yet
                      04349 
0011D8                04350 S6_10_VALID:
0011D8 E0??           04351         BZ      S6_10_DEF_SENS
0011DA EF?? F???      04352         GOTO    ERR_COMMAND                     ; input > 4? too big: reject
                      04353 
0011DE                04354 S6_10_DEF_SENS:
0011DE EE?? F0??      04355         LFSR    0, YY_BUFFER
0011E2 EF?? F???      04356         GOTO    ERR_NOT_IMP             ; XXX
                      04357         
0011E6                04358 S6_11_DATA:
0011E6 2EE8           04359         DECFSZ  WREG, F, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0011E8 D???           04360         BRA     S6_12_DATA
                      04361         ;
                      04362         ; S6.11: CLR_SEQ Command completed:
                      04363         ;
                      04364         ;   ___7______6______5______4______3______2______1______0__
                      04365         ;  |                                  |                    |
                      04366         ;  |                0                 |          7         | YY_COMMAND
                      04367         ;  |______|______|______|______|______|______|______|______|
                      04368         ;  |      |      |      |      |                           |
                      04369         ;  |   0  |   0  |   0  |   0  |             8             | (not saved)
                      04370         ;  |______|______|______|______|______|______|______|______|
                      04371         ;  |      |                                                |
                      04372         ;  |   0  |                   $43                          | YY_BUFFER
                      04373         ;  |______|______|______|______|______|______|______|______|
                      04374         ;  |      |                                                |
                      04375         ;  |   0  |                   $41                          | YY_DATA
                      04376         ;  |______|______|______|______|______|______|______|______|
                      04377         ;
                      04378         ; Validate inputs
                      04379         ;
0011EA 0E01           04380         MOVLW   1
0011EC 5C00           04381         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0011EE E2??           04382         BC      S6_11_VALID
0011F0 EF?? F???      04383         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04384 
0011F4                04385 S6_11_VALID:
0011F4 E0??           04386         BZ      S6_11_CLR_SEQ
0011F6 EF?? F???      04387         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04388 
0011FA                04389 S6_11_CLR_SEQ:
0011FA EE?? F0??      04390         LFSR    0, YY_BUFFER
0011FE 0E43           04391         MOVLW   0x43
001200 62EF           04392         CPFSEQ  INDF0, ACCESS
001202 EF?? F???      04393         GOTO    ERR_COMMAND
001206 EF?? F???      04394         GOTO    ERR_NOT_IMP             ; XXX
                      04395 
00120A                04396 S6_12_DATA:
00120A 2EE8           04397         DECFSZ  WREG, F, ACCESS
00120C D???           04398         BRA     S6_13_DATA
                      04399         ;
                      04400         ; S6.12: DEF_SEQ Command completed:
                      04401         ;
                      04402         ;   ___7______6______5______4______3______2______1______0__
                      04403         ;  |                                  |                    |
                      04404         ;  |                0                 |          7         | YY_COMMAND
                      04405         ;  |______|______|______|______|______|______|______|______|
                      04406         ;  |      |      |      |      |                           |
                      04407         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      04408         ;  |______|______|______|______|______|______|______|______|
                      04409         ;  |      |                                                |
                      04410         ;  |   0  |               sequence number                  | YY_YY
                      04411         ;  |______|______|______|______|______|______|______|______|
                      04412         ;  |      |                                                |
                      04413         ;  |   0  |             sequence length - 1 (N-1)          | YY_BUFFER+0
                      04414         ;  |______|______|______|______|______|______|______|______|
                      04415         ;  |      |                                                |
                      04416         ;  |   0  |              byte #0                           | YY_BUFFER+1
                      04417         ;  |______|______|______|______|______|______|______|______|
                      04418         ;                              .
                      04419         ;                              .
                      04420         ;                              .
                      04421         ;  _________________________________________________________
                      04422         ;  |      |                                                |
                      04423         ;  |   0  |              byte #N-1                         | YY_BUFFER+N
                      04424         ;  |______|______|______|______|______|______|______|______|
                      04425         ;  |      |                                                |
                      04426         ;  |   0  |                   $44                          | YY_BUFFER+N+1
                      04427         ;  |______|______|______|______|______|______|______|______|
                      04428         ;  |      |                                                |
                      04429         ;  |   0  |                   $73                          | YY_DATA
                      04430         ;  |______|______|______|______|______|______|______|______|
                      04431         ;
                      04432         ; Validate inputs
                      04433         ; first, do we even have a full packet yet?
                      04434         ;
00120E 5000           04435         MOVF    YY_BUF_IDX, W, ACCESS
001210 E1??           04436         BNZ     S6_12_VALID
001212 EF?? F???      04437         GOTO    S6_KEEP_LOOKING                 
                      04438 
001216                04439 S6_12_VALID:
001216 EE?? F0??      04440         LFSR    0, YY_BUFFER
00121A 28EF           04441         INCF    INDF0, W, ACCESS
00121C 28E8           04442         INCF    WREG, W, ACCESS
00121E 28E8           04443         INCF    WREG, W, ACCESS         ; W = (N-1)+3 = size our packet must be
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001220 5C00           04444         SUBWF   YY_BUF_IDX, W, ACCESS   ; bytes read < W?
001222 E2??           04445         BC      S6_12_VALID2
001224 EF?? F???      04446         GOTO    S6_KEEP_LOOKING         ; yes, keep reading more
                      04447 
001228                04448 S6_12_VALID2:
001228 E0??           04449         BZ      S6_12_DEF_SEQ
00122A EF?? F???      04450         GOTO    ERR_COMMAND             ; if read too much, reject command
                      04451 
00122E                04452 S6_12_DEF_SEQ:
                      04453         ;
                      04454         ; next, test sentinel
                      04455         ;
00122E 0400           04456         DECF    YY_BUF_IDX, W, ACCESS
001230 26E9           04457         ADDWF   FSR0L, F, ACCESS
001232 0E44           04458         MOVLW   0x44
001234 62EF           04459         CPFSEQ  INDF0                   ; sentinel==$44?
001236 EF?? F???      04460         GOTO    ERR_COMMAND
                      04461         ;
                      04462         ; ok, define the sequence now
                      04463         ;
00123A EF?? F???      04464         GOTO    ERR_NOT_IMP             ; XXX
                      04465         
00123E                04466 S6_13_DATA:
00123E 2EE8           04467         DECFSZ  WREG, F, ACCESS
001240 D???           04468         BRA     S6_14_DATA
                      04469         ;
                      04470         ; S6.13: CF_FLROM Command completed:
                      04471         ;
                      04472         ;   ___7______6______5______4______3______2______1______0__
                      04473         ;  |                                  |                    |
                      04474         ;  |                0                 |          7         | YY_COMMAND
                      04475         ;  |______|______|______|______|______|______|______|______|
                      04476         ;  |      |      |      |      |                           |
                      04477         ;  |   0  |   1  |   1  |   1  |             5             | (not saved)
                      04478         ;  |______|______|______|______|______|______|______|______|
                      04479         ;  |      |                                                |
                      04480         ;  |   0  |                   $33                          | YY_BUFFER+0
                      04481         ;  |______|______|______|______|______|______|______|______|
                      04482         ;  |      |                                                |
                      04483         ;  |   0  |                   $4C                          | YY_BUFFER+1
                      04484         ;  |______|______|______|______|______|______|______|______|
                      04485         ;  |      |                                                |
                      04486         ;  |   0  |                   $1C                          | YY_DATA
                      04487         ;  |______|______|______|______|______|______|______|______|
                      04488         ;
                      04489         ; Validate inputs
                      04490         ;
001242 0E02           04491         MOVLW   2
001244 5C00           04492         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
001246 E0??           04493         BZ      S6_13_VALID                     ; 2 bytes received (plus final)? good.
001248 EF?? F???      04494         GOTO    ERR_COMMAND                     ; otherwise, it's not right.
                      04495         ;
                      04496         ; next, test sentinel
                      04497         ;
00124C                04498 S6_13_VALID:
00124C EE?? F0??      04499         LFSR    0, YY_BUFFER
001250 0E33           04500         MOVLW   0x33
001252 62EE           04501         CPFSEQ  POSTINC0
001254 EF?? F???      04502         GOTO    ERR_COMMAND
001258 0E4C           04503         MOVLW   0x4C
00125A 62EF           04504         CPFSEQ  INDF0
00125C EF?? F???      04505         GOTO    ERR_COMMAND
                      04506         ;
                      04507         ; ok, start updating the firmware!
                      04508         ;
                      04509         IF !QSCC_PORT
                      04510          GOTO   FLASH_UPDATE_START
                      04511         ELSE
001260 EF?? F???      04512          GOTO   ERR_COMMAND
                      04513         ENDIF
                      04514 
001264                04515 S6_14_DATA:
                      04516         ERR_BUG 0x05, ERR_CLASS_OVERRUN
001264 0E05               M          MOVLW  0x05
001266 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001268 6A00               M          CLRF   YY_STATE, ACCESS
00126A 0012               M          RETURN
                      04517 
                      04518 
00126C                04519 S6_RESTART:
                      04520         ; We stopped too early -- resume now
00126C 0012           04521         RETURN                                  ; 
                      04522 
00126E                04523 S6_KEEP_LOOKING:
00126E 5000           04524         MOVF    YY_BUF_IDX, W, ACCESS           ; Have we reached our limit (idx >= max)?
001270 6400           04525         CPFSGT  YY_LOOKAHEAD_MAX, ACCESS        ; (skip if MAX > bytes read so far)
001272 EF?? F???      04526         GOTO    ERR_COMMAND                     ; Yes:  Abort here and ignore data to next cmd
001276 EE?? F0??      04527         LFSR    0, YY_BUFFER                    ; No: Save character in buffer and keep waiting
00127A 5000           04528         MOVF    YY_BUF_IDX, W, ACCESS
00127C 26E9           04529         ADDWF   FSR0L, F, ACCESS
00127E C??? FFEF      04530         MOVFF   YY_DATA, INDF0
001282 2A00           04531         INCF    YY_BUF_IDX, F, ACCESS
001284 0012           04532         RETURN
                      04533 
001286                04534 S7_DATA:
001286 2CE8           04535         DECFSZ  WREG, W, ACCESS
001288 D???           04536         BRA     S8_DATA
                      04537         ; RAMP_LVL recieved step count
00128A 2800           04538         INCF    YY_DATA, W, ACCESS              ; step count - 1 sent in protocol
00128C 6E00           04539         MOVWF   YY_YY, ACCESS                   ; actual step count saved in YY_YY (1-128)
00128E 2A00           04540         INCF    YY_STATE, F, ACCESS             ; -> state 8 (wait for time interval byte)
001290 0012           04541         RETURN
                      04542         
001292                04543 S8_DATA:
001292 2CE8           04544         DECFSZ  WREG, W, ACCESS
001294 D???           04545         BRA     S9_DATA
001296 2A00           04546         INCF    YY_DATA, F, ACCESS
                      04547         ;
                      04548         ; RAMP_LVL:
                      04549         ;
                      04550         ;   ___7______6______5______4______3______2______1______0__
                      04551         ;  |                                  |                    |
                      04552         ;  |                0                 |          4         | YY_COMMAND
                      04553         ;  |______|______|______|______|______|______|______|______|
                      04554         ;  |NOT_MY|0=down|                                         |
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04555         ;  | _SSR |1=up  |           Channel ID (0-23)             | TARGET_SSR
                      04556         ;  |______|______|______|______|______|______|______|______|
                      04557         ;  |                                                       |
                      04558         ;  |              Steps between update (1-128)             | YY_YY
                      04559         ;  |______|______|______|______|______|______|______|______|
                      04560         ;  |                                                       |
                      04561         ;  |             update every n/120 sec (1-128)            | YY_DATA
                      04562         ;  |______|______|______|______|______|______|______|______|
                      04563         ;  |YCF_  |                                                |
                      04564         ;  |RAMP_ |                                                | YY_CMD_FLAGS
                      04565         ;  |CYCLE_|______|______|______|______|______|______|______|
                      04566         ;
001298 BE00           04567         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
00129A D???           04568         BRA     S8_PASS_DOWN_RAMP_LVL
00129C EE?? F0??      04569         LFSR    0, SSR_00_FLAGS
0012A0 5000           04570         MOVF    TARGET_SSR, W, ACCESS
0012A2 0B3F           04571         ANDLW   0x3F
0012A4 26E9           04572         ADDWF   FSR0L, F, ACCESS
0012A6 6AEF           04573         CLRF    INDF0, ACCESS
0012A8 BC00           04574         BTFSC   TARGET_SSR, 6, ACCESS           ; this is cheaper than branching :)
0012AA 8EEF           04575         BSF     INDF0, FADE_UP, ACCESS
0012AC AC00           04576         BTFSS   TARGET_SSR, 6, ACCESS
0012AE 8CEF           04577         BSF     INDF0, FADE_DOWN, ACCESS
0012B0 BE00           04578         BTFSC   YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
0012B2 8AEF           04579         BSF     INDF0, FADE_CYCLE, ACCESS
0012B4 0E14           04580         MOVLW   SSR_BLOCK_LEN
0012B6 26E9           04581         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's step byte
0012B8 C??? FFEF      04582         MOVFF   YY_YY, INDF0
0012BC 26E9           04583         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's speed byte
0012BE C??? FFEF      04584         MOVFF   YY_DATA, INDF0
0012C2 26E9           04585         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's counter byte
0012C4 C??? FFEF      04586         MOVFF   YY_DATA, INDF0
0012C8 6A00           04587         CLRF    YY_STATE, ACCESS
0012CA 0012           04588         RETURN
                      04589 
0012CC                04590 S8_PASS_DOWN_RAMP_LVL:
                      04591         ;
                      04592         ; Hand off RAMP_LVL command to slave chip.
                      04593         ;
                      04594         IF ROLE_MASTER
                      04595          IF HAS_STATUS_LEDS
                      04596           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04597          ENDIF
                      04598          MOVLW  0xC0                            ; command byte
                      04599          CALL   SIO_WRITE_W
                      04600          BCF    TARGET_SSR, 7, ACCESS
                      04601          BTFSC  YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
                      04602          BSF    TARGET_SSR, 7, ACCESS
                      04603          MOVF   TARGET_SSR, W, ACCESS
                      04604          SEND_8_BIT_W
                      04605          ;CALL  SIO_WRITE_W                     ; channel + direction
                      04606          DECF   YY_YY, W, ACCESS                ; steps - 1
                      04607          SEND_8_BIT_W
                      04608          ;CALL  SIO_WRITE_W
                      04609          DECF   YY_DATA, W, ACCESS              ; speed - 1
                      04610          SEND_8_BIT_W
                      04611          ;CALL  SIO_WRITE_W
                      04612          CLRF   YY_STATE, ACCESS
                      04613          RETURN
                      04614         ENDIF
                      04615         ERR_BUG 0x06, ERR_CLASS_IN_VALID
0012CC 0E06               M          MOVLW  0x06
0012CE 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0012D0 6A00               M          CLRF   YY_STATE, ACCESS
0012D2 0012               M          RETURN
                      04616         
0012D4                04617 S9_DATA:
0012D4 2CE8           04618         DECFSZ  WREG, W, ACCESS
0012D6 D???           04619         BRA     S10_DATA
                      04620         ;
                      04621         ; State 9:  Extended command code received; decode further
                      04622         ;
                      04623         ;   ___7______6______5______4______3______2______1______0__
                      04624         ;  |                                  |                    |
                      04625         ;  |                0                 |          7         | YY_COMMAND
                      04626         ;  |______|______|______|______|______|______|______|______|
                      04627         ;  |                                                       |
                      04628         ;  |               Extended Command Code                   | YY_DATA   
                      04629         ;  |______|______|______|______|______|______|______|______|
                      04630         ;
                      04631         ; Extended commands decode like this:
                      04632         ;       01xxxxxx        privileged configuration commands
                      04633         ;       010-----        CF_PHASE command (remaining bits are data)
                      04634         ;       0110----        CF_ADDR command (remaining bits are data)
                      04635         ;       0111----        other CF_* commands (remaining bits are command number)
                      04636         ;       001-----        IC_* internal (mater->slave) commands
                      04637         ;       000-----        Regular extended commands
                      04638         ;        
0012D8 BC00           04639         BTFSC   YY_DATA, 6, ACCESS
0012DA D???           04640         BRA     S9_PRIV_CMD
0012DC BA00           04641         BTFSC   YY_DATA, 5, ACCESS
0012DE D???           04642         BRA     S9_INTERNAL_CMD
                      04643         ;
                      04644         ; Regular extended commands
                      04645         ;
0012E0 5000           04646         MOVF    YY_DATA, W, ACCESS
0012E2 E1??           04647         BNZ     S9_X1_WAKE
0012E4                04648 S9_X0_SLEEP:
                      04649         WAIT_FOR_SENTINEL 2, B'01011010', 6     ; -> S6.6 when sentinel found
0012E4 0E02               M          MOVLW  2
0012E6 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0012E8 0E5A               M          MOVLW  B'01011010'
0012EA 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0012EC 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0012EE 6E00               M          MOVWF  YY_STATE, ACCESS
0012F0 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0012F2 0E06               M          MOVLW  6
0012F4 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0012F6 0012           04650         RETURN
0012F8                04651 S9_X1_WAKE:
0012F8 2CE8           04652         DECFSZ  WREG, W, ACCESS
0012FA D???           04653         BRA     S9_X2_SHUTDOWN
                      04654         WAIT_FOR_SENTINEL 2, B'01011010', 7     ; -> S6.7 when sentinel found
0012FC 0E02               M          MOVLW  2
0012FE 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001300 0E5A               M          MOVLW  B'01011010'
001302 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001304 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001306 6E00               M          MOVWF  YY_STATE, ACCESS
001308 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00130A 0E07               M          MOVLW  7
00130C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00130E 0012           04655         RETURN
001310                04656 S9_X2_SHUTDOWN:
001310 2CE8           04657         DECFSZ  WREG, W, ACCESS
001312 D???           04658         BRA     S9_X3_QUERY
                      04659         WAIT_FOR_SENTINEL 2, B'01011001', .8    ; -> S6.8 when sentinel found
001314 0E02               M          MOVLW  2
001316 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001318 0E59               M          MOVLW  B'01011001'
00131A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00131C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00131E 6E00               M          MOVWF  YY_STATE, ACCESS
001320 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001322 0E08               M          MOVLW  .8
001324 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001326 0012           04660         RETURN
001328                04661 S9_X3_QUERY:
001328 2CE8           04662         DECFSZ  WREG, W, ACCESS
00132A D???           04663         BRA     S9_X4_DEF_SEQ
                      04664         WAIT_FOR_SENTINEL 2, B'01010100', .9    ; -> S6.9 when sentinel found
00132C 0E02               M          MOVLW  2
00132E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001330 0E54               M          MOVLW  B'01010100'
001332 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001334 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001336 6E00               M          MOVWF  YY_STATE, ACCESS
001338 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00133A 0E09               M          MOVLW  .9
00133C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00133E 0012           04665         RETURN
001340                04666 S9_X4_DEF_SEQ:
001340 2CE8           04667         DECFSZ  WREG, W, ACCESS
001342 D???           04668         BRA     S9_X5_EXEC_SEQ
001344 0E0E           04669         MOVLW   .14
001346 6E00           04670         MOVWF   YY_STATE, ACCESS                ; -> 14, wait to get I byte
001348 0012           04671         RETURN
00134A                04672 S9_X5_EXEC_SEQ:
00134A 2CE8           04673         DECFSZ  WREG, W, ACCESS
00134C D???           04674         BRA     S9_X6_DEF_SENS
00134E 0E0F           04675         MOVLW   .15
001350 6E00           04676         MOVWF   YY_STATE, ACCESS                ; -> 15, wait to get I byte
001352 0012           04677         RETURN
001354                04678 S9_X6_DEF_SENS:
001354 2CE8           04679         DECFSZ  WREG, W, ACCESS
001356 D???           04680         BRA     S9_X7_MSK_SENS
                      04681         WAIT_FOR_SENTINEL 5, B'00111100', .10   ; -> S6.10 when sentinel found
001358 0E05               M          MOVLW  5
00135A 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00135C 0E3C               M          MOVLW  B'00111100'
00135E 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001360 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001362 6E00               M          MOVWF  YY_STATE, ACCESS
001364 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001366 0E0A               M          MOVLW  .10
001368 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00136A 0012           04682         RETURN
00136C                04683 S9_X7_MSK_SENS:
00136C 2CE8           04684         DECFSZ  WREG, W, ACCESS
00136E D???           04685         BRA     S9_X8_CLR_SEQ
001370 0E10           04686         MOVLW   .16
001372 6E00           04687         MOVWF   YY_STATE, ACCESS                ; -> 16, wait to get sensor byte
001374 0012           04688         RETURN
001376                04689 S9_X8_CLR_SEQ:
001376 2CE8           04690         DECFSZ  WREG, W, ACCESS
001378 D???           04691         BRA     S9_X9_XPRIV
                      04692         WAIT_FOR_SENTINEL 2, B'01000001', .11   ; -> S6.11 when sentinel found
00137A 0E02               M          MOVLW  2
00137C 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00137E 0E41               M          MOVLW  B'01000001'
001380 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001382 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001384 6E00               M          MOVWF  YY_STATE, ACCESS
001386 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001388 0E0B               M          MOVLW  .11
00138A 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00138C 0012           04693         RETURN
00138E                04694 S9_X9_XPRIV:
00138E 2CE8           04695         DECFSZ  WREG, W, ACCESS                 
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001390 EF?? F???      04696         GOTO    ERR_COMMAND
                      04697         ;
                      04698         ; XPRIV:
                      04699         ;
                      04700         ;   ___7______6______5______4______3______2______1______0__
                      04701         ;  |                                  |                    |
                      04702         ;  |                0                 |          7         | YY_COMMAND
                      04703         ;  |______|______|______|______|______|______|______|______|
                      04704         ;  |      |      |      |                                  |
                      04705         ;  |   0  |   0  |   0  |   0  |             9             | YY_DATA
                      04706         ;  |______|______|______|______|______|______|______|______|
                      04707         ;
001394 EF?? F???      04708         GOTO    CMD_XPRIV
                      04709 
001398                04710 S9_INTERNAL_CMD:
                      04711         ;
                      04712         ; received internal command from master
                      04713         ;
                      04714         IF !ROLE_SLAVE
001398 EF?? F???      04715          GOTO   ERR_COMMAND
                      04716         ELSE    ; BEGIN SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE--------
                      04717         MOVLW   0x1F                    ;                               ///////
                      04718         ANDWF   YY_DATA, W, ACCESS      ;                               ///////
                      04719         BNZ     S9_1_IC_LED             ;                               ///////
                      04720                                         ;                               ///////
                      04721 S9_0_IC_TXDAT:                          ;                               ///////
                      04722         ;                                                               ///////
                      04723         ; IC_TXDAT: Send byte stream to serial port                     ///////
                      04724         ;                                                               ///////
                      04725         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04726         ;                                                               ///////
                      04727         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04728         MOVLW   .10                     ;                               ///////
                      04729         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04730         RETURN                          ;                               ///////
                      04731                                         ;                               ///////
                      04732 S9_1_IC_LED:                            ;                               ///////
                      04733         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04734         BRA     S9_2_IC_HALT            ;                               ///////
                      04735         ;                               ;                               ///////
                      04736         ; IC_LED                        ;                               ///////
                      04737         ; wait for GY byte to arrive.   ;                               ///////
                      04738         ;                               ;                               ///////
                      04739         MOVLW   .12                     ;                               ///////
                      04740         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04741         RETURN                          ;                               ///////
                      04742                                         ;                               ///////
                      04743 S9_2_IC_HALT:                           ;                               ///////
                      04744         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04745         BRA     S9_3_IC_TXSTA           ;                               ///////
                      04746         ;                                                               ///////
                      04747         ; IC_HALT                                                       ///////
                      04748         ;                                                               ///////
                      04749         ; Close up shop.                                                ///////
                      04750         ;                                                               ///////
                      04751         IF HAS_ACTIVE                   ;                               ///////
                      04752          SET_SSR_OFF SSR_ACTIVE         ;                               ///////
                      04753         ENDIF                           ;                               ///////
                      04754         IF HAS_STATUS_LEDS
                      04755          SET_SSR_OFF SSR_GREEN          ; set LEDs for halt mode        ///////
                      04756          SET_SSR_OFF SSR_YELLOW         ;                               ///////
                      04757          SET_SSR_STEADY SSR_RED         ;                               ///////
                      04758         ENDIF
                      04759         IF HAS_T_R                      ;                 _             ///////
                      04760          BCF    PLAT_T_R, BIT_T_R, ACCESS       ; Clear T/R output      ///////
                      04761         ENDIF                           ;                               ///////
                      04762         GOTO    HALT_MODE               ;                               ///////
                      04763                                         ;                               ///////
                      04764 S9_3_IC_TXSTA:                          ;                               ///////
                      04765         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04766         BRA     S9_4_OVERRUN            ;                               ///////
                      04767         ;                                                               ///////
                      04768         ; IC_TXSTA                                                      ///////
                      04769         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04770         ; so we can tell if we're doing this or IC_TXDAT later.         ///////
                      04771         ;                                                               ///////
                      04772         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04773         MOVLW   .10                     ;                               ///////
                      04774         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04775         RETURN                          ;                               ///////
                      04776                                         ;                               ///////
                      04777 S9_4_OVERRUN:                           ;                               ///////
                      04778         ERR_BUG 0x07, ERR_CLASS_OVERRUN ;                               ///////
                      04779         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04780 
                      04781         
00139C                04782 S9_PRIV_CMD:
                      04783         ; received privileged configuration command     ; 01xxxxxx
                      04784         ;
                      04785         ; Anything from here down requires the privilege bit to be set.
                      04786         ;
00139C B800           04787         BTFSC   SSR_STATE, PRIV_MODE, ACCESS
00139E D???           04788         BRA     S9_DO_PRIV_CMD
0013A0 0E21           04789         MOVLW   0x21
0013A2 6E00           04790         MOVWF   LAST_ERROR, ACCESS
0013A4 EF?? F???      04791         GOTO    ERR_ABORT
0013A8                04792 S9_DO_PRIV_CMD:
                      04793         ;
                      04794         ; decode which command this is
                      04795         ;
0013A8 AA00           04796         BTFSS   YY_DATA, 5, ACCESS
0013AA D???           04797         BRA     S9_CF_PHASE                             ; 010xxxxx
0013AC A800           04798         BTFSS   YY_DATA, 4, ACCESS
0013AE D???           04799         BRA     S9_CF_ADDR                              ; 0110xxxx
                      04800         ; other priv commands                           ; 0111xxxx
0013B0 0E0F           04801         MOVLW   0x0F
0013B2 1400           04802         ANDWF   YY_DATA, W, ACCESS
0013B4 E1??           04803         BNZ     S9_PRIV_1
                      04804 
0013B6                04805 S9_PRIV_0:
                      04806         ;
                      04807         ; CF_NOPRV:
                      04808         ;
                      04809         ;   ___7______6______5______4______3______2______1______0__
                      04810         ;  |                                  |                    |
                      04811         ;  |                0                 |          7         | YY_COMMAND
                      04812         ;  |______|______|______|______|______|______|______|______|
                      04813         ;  |      |      |      |                                  |
                      04814         ;  |   0  |   1  |   1  |   1  |             0             | YY_DATA
                      04815         ;  |______|______|______|______|______|______|______|______|
                      04816         ;
                      04817         ;
0013B6 9800           04818         BCF     SSR_STATE, PRIV_MODE, ACCESS
                      04819         IF HAS_STATUS_LEDS
                      04820          ;SET_SSR_SLOW_FADE SSR_GREEN
                      04821          SET_SSR_NORMAL_MODE SSR_GREEN
                      04822         ENDIF
0013B8 AC00           04823         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
0013BA D???           04824         BRA     S9_PRIV_0X
                      04825         IF HAS_STATUS_LEDS
                      04826          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      04827          SET_SSR_DMX_MODE SSR_GREEN
                      04828         ENDIF
                      04829 
0013BC                04830 S9_PRIV_0X:
                      04831         IF ROLE_MASTER
                      04832          IF HAS_STATUS_LEDS
                      04833           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04834          ENDIF
                      04835          MOVLW  0xF0                                    ; send to slave chip: F0 21 00010111 00000111
                      04836          CALL   SIO_WRITE_W
                      04837          MOVLW  0x21
                      04838          CALL   SIO_WRITE_W
                      04839          MOVLW  0x17
                      04840          CALL   SIO_WRITE_W
                      04841          MOVLW  0x07
                      04842          CALL   SIO_WRITE_W
                      04843         ENDIF
0013BC 6A00           04844         CLRF    YY_STATE, ACCESS
0013BE EC?? F???      04845         CALL    DMX_RESUME
0013C2 0012           04846         RETURN
                      04847 
0013C4                04848 S9_PRIV_1:
0013C4 2CE8           04849         DECFSZ  WREG, W, ACCESS
0013C6 D???           04850         BRA     S9_PRIV_2
                      04851         ;
                      04852         ; CF_CONF command recognized.  Expect packet of 4 more bytes...
                      04853         ;
                      04854         WAIT_FOR_SENTINEL 4, B'00111101', 1     ; -> S6.1 when sentinel found
0013C8 0E04               M          MOVLW  4
0013CA 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013CC 0E3D               M          MOVLW  B'00111101'
0013CE 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013D0 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013D2 6E00               M          MOVWF  YY_STATE, ACCESS
0013D4 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013D6 0E01               M          MOVLW  1
0013D8 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013DA 0012           04855         RETURN
                      04856 
0013DC                04857 S9_PRIV_2:
0013DC 2CE8           04858         DECFSZ  WREG, W, ACCESS
0013DE D???           04859         BRA     S9_PRIV_3
                      04860         ;
                      04861         ; CF_BAUD command recognized.  Expect packet of 2 more bytes...
                      04862         ;
                      04863         WAIT_FOR_SENTINEL 2, B'00100110', 2     ; -> S6.2 when sentinel found
0013E0 0E02               M          MOVLW  2
0013E2 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013E4 0E26               M          MOVLW  B'00100110'
0013E6 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013E8 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013EA 6E00               M          MOVWF  YY_STATE, ACCESS
0013EC 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013EE 0E02               M          MOVLW  2
0013F0 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013F2 0012           04864         RETURN
                      04865 
0013F4                04866 S9_PRIV_3:
0013F4 2CE8           04867         DECFSZ  WREG, W, ACCESS
0013F6 D???           04868         BRA     S9_PRIV_4
                      04869         ;
                      04870         ; CF_RESET command recognized.  Expect packet of 2 more bytes...
                      04871         ;
                      04872         WAIT_FOR_SENTINEL 2, B'01110010', 3     ; -> S6.3 when sentinel found
0013F8 0E02               M          MOVLW  2
0013FA 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013FC 0E72               M          MOVLW  B'01110010'
0013FE 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001400 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001402 6E00               M          MOVWF  YY_STATE, ACCESS
001404 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001406 0E03               M          MOVLW  3
001408 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00140A 0012           04873         RETURN
                      04874 
00140C                04875 S9_PRIV_4:
00140C 2CE8           04876         DECFSZ  WREG, W, ACCESS
00140E D???           04877         BRA     S9_PRIV_5
                      04878         ;
                      04879         ; CF_XPRIV:
                      04880         ;
                      04881         ;   ___7______6______5______4______3______2______1______0__
                      04882         ;  |                                  |                    |
                      04883         ;  |                0                 |          7         | YY_COMMAND
                      04884         ;  |______|______|______|______|______|______|______|______|
                      04885         ;  |      |      |      |                                  |
                      04886         ;  |   0  |   1  |   1  |   1  |             4             | YY_DATA
                      04887         ;  |______|______|______|______|______|______|______|______|
                      04888         ;
                      04889         ;
001410                04890 CMD_XPRIV:
001410 8600           04891         BSF     SSR_STATE2, PRIV_FORBID, ACCESS
001412 EF?? F???      04892         GOTO    S9_PRIV_0
                      04893 
001416                04894 S9_PRIV_5:
001416 2CE8           04895         DECFSZ  WREG, W, ACCESS
001418 D???           04896         BRA     S9_PRIV_6
                      04897         ;
                      04898         ; CF_FLROM command recognized.  Expect packet of 3 more bytes...
                      04899         ;
                      04900         WAIT_FOR_SENTINEL 3, B'00011100', 13    ; -> S6.13 when sentinel found
00141A 0E03               M          MOVLW  3
00141C 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00141E 0E1C               M          MOVLW  B'00011100'
001420 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001422 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001424 6E00               M          MOVWF  YY_STATE, ACCESS
001426 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001428 0E0D               M          MOVLW  13
00142A 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00142C 0012           04901         RETURN
                      04902 
00142E                04903 S9_PRIV_6:
00142E EF?? F???      04904         GOTO    ERR_COMMAND
                      04905 
001432                04906 S9_CF_PHASE:
001432 C??? F???      04907         MOVFF   YY_DATA, YY_YY
                      04908         WAIT_FOR_SENTINEL 3, B'01001111', 4     ; -> S6.4 when sentinel found
001436 0E03               M          MOVLW  3
001438 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00143A 0E4F               M          MOVLW  B'01001111'
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00143C 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00143E 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001440 6E00               M          MOVWF  YY_STATE, ACCESS
001442 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001444 0E04               M          MOVLW  4
001446 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001448 0012           04909         RETURN
                      04910 
00144A                04911 S9_CF_ADDR:
00144A C??? F???      04912         MOVFF   YY_DATA, YY_YY
                      04913         WAIT_FOR_SENTINEL 3, B'01000100', 5     ; -> S6.5 when sentinel found
00144E 0E03               M          MOVLW  3
001450 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001452 0E44               M          MOVLW  B'01000100'
001454 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001456 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001458 6E00               M          MOVWF  YY_STATE, ACCESS
00145A 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00145C 0E05               M          MOVLW  5
00145E 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001460 0012           04914         RETURN
                      04915         
001462                04916 S10_DATA:
001462 2CE8           04917         DECFSZ  WREG, W, ACCESS
001464 D???           04918         BRA     S11_DATA
                      04919         ;
                      04920         ; S10: IC_TXDAT / IC_TXSTA received N byte; time to loop
                      04921         ; transmitting N bytes. First byte will have MSB set.
                      04922         ;
                      04923         ;   ___7______6______5______4______3______2______1______0__
                      04924         ;  |      |                    |                           |
                      04925         ;  |   1  |          7         |             0             | (not saved)
                      04926         ;  |______|______|______|______|______|______|______|______|
                      04927         ;  |SET   |      |      |      |    IC_TXDAT:   0          |
                      04928         ;  |MSB?  |   0  |   1  |   0  |    IC_TXSTA:   3          | YY_COMMAND 
                      04929         ;  |______|______|______|______|______|______|______|______|
                      04930         ;  |                                                       |  
                      04931         ;  |                Bytes to transmit  (N)                 | YY_YY
                      04932         ;  |______|______|______|______|______|______|______|______|
                      04933         ;  |      |                                                |
                      04934         ;  |   0  |                 Data byte #0                   | (not yet received)
                      04935         ;  |______|______|______|______|______|______|______|______|
                      04936         ;                              .
                      04937         ;                              .                                    
                      04938         ;                              .
                      04939         ;   _______________________________________________________
                      04940         ;  |      |                                                |
                      04941         ;  |   0  |                 Data byte #N-1                 | (not yet received)
                      04942         ;  |______|______|______|______|______|______|______|______|
                      04943         ;  |      |                                                |
                      04944         ;  |   0  |                   $73                          | (not yet received)
                      04945         ;  |______|______|______|______|______|______|______|______|
                      04946         ;
                      04947         IF ROLE_SLAVE
                      04948          BSF    YY_COMMAND, 7, ACCESS   ; note need to set MSB in data stream
                      04949          INCF   YY_STATE, F, ACCESS     ; -> S11
                      04950          MOVFF  YY_DATA, YY_YY          ; Byte counter (N-1)
                      04951          INCF   YY_YY, F, ACCESS        ; Adjust to true byte count
                      04952          CALL   TR_ON_DELAY
                      04953          BSF    PLAT_T_R, BIT_T_R, ACCESS ; Assert bus master role by firing up the transmitter
                      04954          RETURN
                      04955         ELSE
                      04956          ERR_BUG 0x08, ERR_CLASS_OVERRUN
001466 0E08               M          MOVLW  0x08
001468 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
00146A 6A00               M          CLRF   YY_STATE, ACCESS
00146C 0012               M          RETURN
                      04957         ENDIF
                      04958         
00146E                04959 S11_DATA:
00146E 2CE8           04960         DECFSZ  WREG, W, ACCESS
001470 D???           04961         BRA     S12_DATA
                      04962         ;
                      04963         ; IC_TXDAT / IC_TXSTA
                      04964         ; We're transmitting bytes as they come in until YY_YY is depleated.
                      04965         ;
                      04966         IF ROLE_SLAVE           ; BEGIN SLAVE-SIDE INTERNAL CMD CODE-----------
                      04967          TSTFSZ YY_YY, ACCESS                   ;                       ///////
                      04968          BRA    S11_WRITE_NEXT_BYTE             ;                       ///////
                      04969          ;                                                              ///////
                      04970          ; YY_YY is zero, the byte just received should be the sentinel.///////
                      04971          ;                                                              ///////
                      04972          MOVLW  0x73                            ;                       /////// 
                      04973          CPFSEQ YY_DATA, ACCESS                 ;                       /////// 
                      04974          BRA    S11_BAD_SENTINEL                ;                       /////// 
                      04975          ;                                                              ///////
                      04976          ; If we are processing IC_TXSTA, add our own six status bytes  ///////
                      04977          ; to the end of the output stream:                             ///////
                      04978          ;                                                              ///////
                      04979          ;                                                              ///////
                      04980          ;   ___7______6______5______4______3______2______1______0__    ///////
                      04981          ;  |      |                 fault code                     |  
                      04982          ;  |   0  |           (to be cleared after this)           | LAST_ERROR  
                      04983          ;  |______|______|______|______|______|______|______|______|
                      04984          ;  |      |                                  | phase offset|
                      04985          ;  |   0  |     unassigned, write as 0       |    <8:7>    | PHASE_OFFSET[HL]
                      04986          ;  |______|______|______|______|______|______|______|______|
                      04987          ;  |      |                                                |
                      04988          ;  |   0  |           phase offset <6:0>                   | PHASE_OFFSETL
                      04989          ;  |______|______|______|______|______|______|______|______|
                      04990          ;  |      |                                                |
                      04991          ;  |   0  |           serial number <13:7>                 | SYS_SNH
                      04992          ;  |______|______|______|______|______|______|______|______|
                      04993          ;  |      |                                                |
                      04994          ;  |   0  |           serial number <6:0>                  | SYS_SNL      
                      04995          ;  |______|______|______|______|______|______|______|______|
                      04996          ;  |      |                                                |   ///////
                      04997          ;  |   0  |                   $33                          |   ///////
                      04998          ;  |______|______|______|______|______|______|______|______|   ///////
                      04999          ;                                                              ///////
                      05000          ;                                                              ///////
                      05001          BTFSS  YY_COMMAND, 0, ACCESS           ; doing IC_TXSTA?       ///////
                      05002          BRA    S11_END_TRANSMIT                ; no, skip to end       ///////
                      05003          MOVF   LAST_ERROR, W, ACCESS           ; yes, send our private ///////
                      05004          SEND_8_BIT_W                           ;                       ///////
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05005          ;CALL  SIO_WRITE_W                     ; at the end of the     ///////
                      05006          CLRF   LAST_ERROR, ACCESS              ; stream                ///////
                      05007          CLRF   WREG, ACCESS                    ;                       ///////
                      05008          BTFSC  PHASE_OFFSETH, 0, ACCESS        ;                       ///////
                      05009          BSF    WREG, 1, ACCESS                 ;                       ///////
                      05010          BTFSC  PHASE_OFFSETL, 7, ACCESS        ;                       ///////
                      05011          BSF    WREG, 0, ACCESS                 ;                       ///////
                      05012          SEND_8_BIT_W                           ;                       ///////
                      05013          ;CALL  SIO_WRITE_W                     ;                       ///////
                      05014          MOVF   PHASE_OFFSETL, W, ACCESS        ;                       ///////
                      05015          BCF    WREG, 7, ACCESS                 ;                       ///////
                      05016          SEND_8_BIT_W                           ;                       ///////
                      05017          ;CALL  SIO_WRITE_W                     ;                       ///////
                      05018          MOVLW  UPPER(SYS_SNH)                  ;                       ///////
                      05019          MOVWF  TBLPTRU, ACCESS                 ;                       ///////
                      05020          MOVLW  HIGH(SYS_SNH)                   ;                       ///////
                      05021          MOVWF  TBLPTRH, ACCESS                 ;                       ///////
                      05022          MOVLW  LOW(SYS_SNH)                    ;                       ///////
                      05023          MOVWF  TBLPTRL, ACCESS                 ;                       ///////
                      05024          TBLRD*+                                ;                       ///////
                      05025          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      05026          SEND_8_BIT_W                           ;                       ///////
                      05027          TBLRD*+                                ;                       ///////
                      05028          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      05029          SEND_8_BIT_W                           ;                       ///////
                      05030          MOVLW  0x33                            ;                       ///////
                      05031          CALL   SIO_WRITE_W                     ;                       ///////
                      05032 S11_END_TRANSMIT:                               ;                       ///////
                      05033          ; we're done, shut down transmitter when data's all sent       ///////
                      05034          BSF    SSR_STATE, DRAIN_TR, ACCESS     ;                       ///////
                      05035          CLRF   YY_STATE, ACCESS                ;                       ///////
                      05036          RETURN                                 ;                       ///////
                      05037                                                 ;                       ///////
                      05038 S11_BAD_SENTINEL:                               ;                       ///////
                      05039          ERR_BUG 0x0A, ERR_CLASS_INT_COMMAND    ;                       ///////
                      05040                                                 ;                       ///////
                      05041 S11_WRITE_NEXT_BYTE:                            ;                       ///////
                      05042          MOVF   YY_DATA, W, ACCESS              ;                       ///////
                      05043          BTFSS  YY_COMMAND, 7, ACCESS           ; set the MSB of the    ///////
                      05044          BRA    S11_WNB_1                       ; first byte we see     ///////
                      05045          BSF    WREG, 7, ACCESS                 ;                       ///////
                      05046          BCF    YY_COMMAND, 7, ACCESS           ;                       ///////
                      05047          CALL   SIO_WRITE_W                     ; send raw 1st byte     ///////
                      05048          BRA    S11_END_1                       ;                       ///////
                      05049 S11_WNB_1:                                      ;                       ///////
                      05050          SEND_8_BIT_W                           ; send escaped byte     ///////
                      05051          ;CALL  SIO_WRITE_W                     ;                       ///////
                      05052 S11_END_1:                                      ;                       ///////
                      05053          DECF   YY_YY, F, ACCESS                ;                       ///////
                      05054          RETURN                                 ;                       ///////
                      05055         ELSE                                    ;                       ///////
                      05056          ERR_BUG 0x0B, ERR_CLASS_OVERRUN        ;                       ///////
001472 0E0B               M          MOVLW  0x0B
001474 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001476 6A00               M          CLRF   YY_STATE, ACCESS
001478 0012               M          RETURN
                      05057         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
                      05058         
00147A                05059 S12_DATA:
00147A 2CE8           05060         DECFSZ  WREG, W, ACCESS
00147C D???           05061         BRA     S13_DATA
                      05062         ;
                      05063         ; IC_LED:  Received GY byte, store in YY_YY and wait for R byte.
                      05064         ;
                      05065         IF ROLE_SLAVE
                      05066          MOVFF  YY_DATA, YY_YY
                      05067          INCF   YY_STATE, F, ACCESS             ; -> S13
                      05068          RETURN
                      05069         ELSE
                      05070          ERR_BUG 0x0C, ERR_CLASS_OVERRUN
00147E 0E0C               M          MOVLW  0x0C
001480 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001482 6A00               M          CLRF   YY_STATE, ACCESS
001484 0012               M          RETURN
                      05071         ENDIF
                      05072         
001486                05073 S13_DATA:
001486 2CE8           05074         DECFSZ  WREG, W, ACCESS
001488 D???           05075         BRA     S14_DATA
                      05076         ;
                      05077         ; S13: IC_LED command received
                      05078         ;
                      05079         ;   ___7______6______5______4______3______2______1______0__
                      05080         ;  |                                  |                    |
                      05081         ;  |                0                 |          7         | YY_COMMAND
                      05082         ;  |______|______|______|______|______|______|______|______|
                      05083         ;  |      |      |      |      |                           |
                      05084         ;  |   0  |   0  |   1  |   0  |             1             | (not saved)
                      05085         ;  |______|______|______|______|______|______|______|______|
                      05086         ;  |      |      |                    |                    |  
                      05087         ;  |   0  |   0  |     green LED      |     yellow LED     | YY_YY
                      05088         ;  |______|______|______|______|______|______|______|______|
                      05089         ;  |      |                           |                    |
                      05090         ;  |   0  |             0             |      red LED       | YY_DATA
                      05091         ;  |______|______|______|______|______|______|______|______|
                      05092         ;
                      05093         ;
                      05094         IF ROLE_SLAVE
                      05095          IF HAS_STATUS_LEDS
                      05096 ALTER_LED_STATE MACRO COLOR
                      05097           ;
                      05098           ; Change LED state based on W:
                      05099           ;   000  steady off    001  steady on
                      05100           ;   010  slow fade     011  rapid fade
                      05101           ;   100  slow flash    101  rapid flash
                      05102           ;   11x  no change
                      05103           ;
                      05104           BNZ   ALTER_LED_0_1
                      05105           SET_SSR_OFF COLOR
                      05106           BRA   ALTER_LED_0_EXIT
                      05107 ALTER_LED_0_1:
                      05108           DECFSZ WREG, W, ACCESS
                      05109           BRA   ALTER_LED_0_2
                      05110           SET_SSR_STEADY COLOR
                      05111           BRA   ALTER_LED_0_EXIT
                      05112 ALTER_LED_0_2:
                      05113           DECFSZ WREG, W, ACCESS
                      05114           BRA   ALTER_LED_0_3
                      05115           SET_SSR_SLOW_FADE COLOR
                      05116           BRA   ALTER_LED_0_EXIT
                      05117 ALTER_LED_0_3:
                      05118           DECFSZ WREG, W, ACCESS
                      05119           BRA   ALTER_LED_0_4
                      05120           SET_SSR_RAPID_FADE COLOR
                      05121           BRA   ALTER_LED_0_EXIT
                      05122 ALTER_LED_0_4:
                      05123           DECFSZ WREG, W, ACCESS
                      05124           BRA   ALTER_LED_0_5
                      05125           SET_SSR_SLOW_FLASH COLOR
                      05126           BRA   ALTER_LED_0_EXIT
                      05127 ALTER_LED_0_5:
                      05128           DECFSZ WREG, W, ACCESS
                      05129           BRA   ALTER_LED_0_EXIT
                      05130           SET_SSR_RAPID_FLASH COLOR
                      05131           ; fall-through: other bit patterns defined as "no change"
                      05132 ALTER_LED_0_EXIT:
                      05133          ENDM
                      05134          MOVLW  0x07
                      05135          ANDWF  YY_YY, W, ACCESS
                      05136          ALTER_LED_STATE SSR_YELLOW
                      05137          MOVLW  0x38
                      05138          ANDWF  YY_YY, W, ACCESS
                      05139          RRNCF  WREG, W, ACCESS
                      05140          RRNCF  WREG, W, ACCESS
                      05141          RRNCF  WREG, W, ACCESS
                      05142          ALTER_LED_STATE SSR_GREEN
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05143          MOVLW  0x07
                      05144          ANDWF  YY_DATA, W, ACCESS
                      05145          ALTER_LED_STATE SSR_RED
                      05146          ; and we're done.
                      05147          ENDIF
                      05148          CLRF   YY_STATE, ACCESS
                      05149          RETURN
                      05150         ELSE
                      05151          ERR_BUG 0x0D, ERR_CLASS_OVERRUN
00148A 0E0D               M          MOVLW  0x0D
00148C 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
00148E 6A00               M          CLRF   YY_STATE, ACCESS
001490 0012               M          RETURN
                      05152         ENDIF
                      05153         
001492                05154 S14_DATA:
001492 2CE8           05155         DECFSZ  WREG, W, ACCESS
001494 D???           05156         BRA     S15_DATA
                      05157         ;
                      05158         ; DEF_SEQ: sequence number received, now we need
                      05159         ; to collect the rest of the packet
                      05160         ;
001496 C??? F???      05161         MOVFF   YY_DATA, YY_YY          ; sequence number in YY_YY
                      05162         WAIT_FOR_SENTINEL .131, B'01110011', .12        ; S6.12 when sentinel found
00149A 0E83               M          MOVLW  .131
00149C 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00149E 0E73               M          MOVLW  B'01110011'
0014A0 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014A2 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014A4 6E00               M          MOVWF  YY_STATE, ACCESS
0014A6 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0014A8 0E0C               M          MOVLW  .12
0014AA 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014AC 0012           05163         RETURN
                      05164         
0014AE                05165 S15_DATA:
0014AE 2CE8           05166         DECFSZ  WREG, W, ACCESS
0014B0 D???           05167         BRA     S16_DATA
                      05168         ;
                      05169         ; S15: EXEC_SEQ: execute sequence
                      05170         ;
                      05171         ;   ___7______6______5______4______3______2______1______0__
                      05172         ;  |                                  |                    |
                      05173         ;  |                0                 |          7         | YY_COMMAND
                      05174         ;  |______|______|______|______|______|______|______|______|
                      05175         ;  |      |      |      |      |                           |
                      05176         ;  |   0  |   0  |   0  |   0  |             5             | (not saved)
                      05177         ;  |______|______|______|______|______|______|______|______|
                      05178         ;  |      |                                                |
                      05179         ;  |   0  |         sequence number or 0 to stop           | YY_DATA
                      05180         ;  |______|______|______|______|______|______|______|______|
                      05181         ;
0014B2 EF?? F???      05182         GOTO    ERR_NOT_IMP             ; XXX
                      05183         
0014B6                05184 S16_DATA:
0014B6 2CE8           05185         DECFSZ  WREG, W, ACCESS
0014B8 D???           05186         BRA     S17_DATA
                      05187         ;
                      05188         ; S16: MSK_SENS command received
                      05189         ;
                      05190         ;   ___7______6______5______4______3______2______1______0__
                      05191         ;  |                                  |                    |
                      05192         ;  |                0                 |          7         | YY_COMMAND
                      05193         ;  |______|______|______|______|______|______|______|______|
                      05194         ;  |      |      |      |      |                           |
                      05195         ;  |   0  |   0  |   0  |   0  |             7             | (not saved)
                      05196         ;  |______|______|______|______|______|______|______|______|
                      05197         ;  |      |                    |      Sensors enabled      |
                      05198         ;  |   0  |          0         |   A  |   B  |   C  |   D  | YY_DATA
                      05199         ;  |______|______|______|______|______|______|______|______|
                      05200         ;
                      05201         ;
0014BA EF?? F???      05202         GOTO    ERR_NOT_IMP             ; XXX
                      05203 
0014BE                05204 S17_DATA:
                      05205         ; Or this WOULD be state 17, except there isn't one!
                      05206         ; Any state >16 lands here.  Handle the exception and
                      05207         ; abort the command being processed.
                      05208         ;
                      05209         ERR_BUG 0x0E, ERR_CLASS_OVERRUN
0014BE 0E0E               M          MOVLW  0x0E
0014C0 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0014C2 6A00               M          CLRF   YY_STATE, ACCESS
0014C4 0012               M          RETURN
                      05210 
0014C6                05211 SSR_OUTPUT_VALUE:
                      05212         ;
                      05213         ; Change an SSR's output value.  This does the same thing
                      05214         ; as SET_SSR_VALUE, except the other one is a macro we can
                      05215         ; only use at runtime with constant SSR IDs (but more efficiently)
                      05216         ; while this works at runtime.
                      05217         ;
                      05218         ; Changes the output value of TARGET_SSR to the W register.
                      05219         ; Uses FSR0 register and KK.
                      05220         ;
0014C6 0004           05221         CLRWDT
0014C8 9E00           05222         BCF     TARGET_SSR, 7, ACCESS
0014CA 9C00           05223         BCF     TARGET_SSR, 6, ACCESS
0014CC 6E00           05224         MOVWF   KK, ACCESS
0014CE EE?? F0??      05225         LFSR    0, SSR_00_VALUE
0014D2 5000           05226         MOVF    TARGET_SSR, W, ACCESS           ; ssr value -> [ssr0 + target]
0014D4 26E9           05227         ADDWF   FSR0L, F, ACCESS
0014D6 C??? FFEF      05228         MOVFF   KK, INDF0
0014DA 0E14           05229         MOVLW   SSR_BLOCK_LEN
0014DC 26E9           05230         ADDWF   FSR0L, F, ACCESS
0014DE 6AEF           05231         CLRF    INDF0                           ; clear flags
0014E0 26E9           05232         ADDWF   FSR0L, F, ACCESS
0014E2 6AEF           05233         CLRF    INDF0                           ; clear step
0014E4 26E9           05234         ADDWF   FSR0L, F, ACCESS
0014E6 6AEF           05235         CLRF    INDF0                           ; clear speed
0014E8 26E9           05236         ADDWF   FSR0L, F, ACCESS
0014EA 6AEF           05237         CLRF    INDF0                           ; clear counter
0014EC 0012           05238         RETURN
                      05239         
0014EE                05240 XLATE_SSR_ID:
                      05241         ;
                      05242         ; Move YY_DATA -> TARGET_SSR
                      05243         ; setting flag bits as appropriate
                      05244         ;   _______________________________________________________
                      05245         ;  |             |                                         |
                      05246         ;  |             |           Channel ID (0-47)             | YY_DATA
                      05247         ;  |______|______|______|______|______|______|______|______|    |
                      05248         ;  |NOT_MY|INVALI|                                         |    V
                      05249         ;  | _SSR |D_SSR |           Channel ID (0-23)             | TARGET_SSR
                      05250         ;  |______|______|______|______|______|______|______|______|
                      05251         ;
                      05252         ; If INVALID_SSR=1, the ID cannot possibly be right for the device; disregard all other bits
                      05253         ; If NOT_MY_SSR=1, this channel exists on the slave chip; Channel ID has been adjusted to that C
                            PU.
                      05254         ; Else, Channel ID is for this chip and is in range [0,23].
                      05255         ;
0014EE 0004           05256         CLRWDT
0014F0 0E3F           05257         MOVLW   0x3F
0014F2 1400           05258         ANDWF   YY_DATA, W, ACCESS
0014F4 6E00           05259         MOVWF   TARGET_SSR, ACCESS
0014F6 0E17           05260         MOVLW   .23
0014F8 6400           05261         CPFSGT  TARGET_SSR, ACCESS
0014FA 0012           05262         RETURN
                      05263         IF ROLE_MASTER
                      05264          MOVLW  .24
                      05265          SUBWF  TARGET_SSR, F, ACCESS
                      05266          CPFSLT TARGET_SSR, ACCESS
                      05267         ENDIF
0014FC 8C00           05268         BSF     TARGET_SSR, INVALID_SSR, ACCESS
0014FE 8E00           05269         BSF     TARGET_SSR, NOT_MY_SSR, ACCESS
001500 0012           05270         RETURN
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05271 
001502                05272 UPDATE_SSR_OUTPUTS:
001502 0004           05273         CLRWDT
001504 0104           05274         BANKSEL SSR_DATA_BANK
001506 9A00           05275         BCF     SSR_STATE, SLICE_UPD, ACCESS
001508 5000           05276         MOVF    CUR_SLICE, W, ACCESS    ; is this the last cycle?
00150A E0??           05277         BZ      UPDATE_MINIMUM_LEVEL
                      05278         ;
                      05279         ; For maximum speed in this tight loop, we save time by 
                      05280         ; unrolling all the tests and output settings into a flat
                      05281         ; instruction sequence (via assembly-time macro) instead of
                      05282         ; using a run-time loop or subroutines to calculate the bits
                      05283         ; and ports for each.  (Like we used to in the previous version.)
                      05284         ;
  00000000            05285 X       SET     0
                      05286         WHILE X <= SSR_MAX
00150C 6300           05287          CPFSEQ SSR_00_VALUE+0,     BANKED      ; is this SSR set to our slice value?
00150E D???           05288          BRA    UPDATE_SSR_SKIP_0
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn on light
                      05291          ELSE
001510 948B           05292           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn on SSR
                      05293          ENDIF
001512                05294 UPDATE_SSR_SKIP_0:
  00000001            05295 X        ++
001512 6300           05287          CPFSEQ SSR_00_VALUE+1,     BANKED      ; is this SSR set to our slice value?
001514 D???           05288          BRA    UPDATE_SSR_SKIP_1
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn on light
                      05291          ELSE
001516 928B           05292           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn on SSR
                      05293          ENDIF
001518                05294 UPDATE_SSR_SKIP_1:
  00000002            05295 X        ++
001518 6300           05287          CPFSEQ SSR_00_VALUE+2,     BANKED      ; is this SSR set to our slice value?
00151A D???           05288          BRA    UPDATE_SSR_SKIP_2
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn on light
                      05291          ELSE
00151C 908B           05292           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn on SSR
                      05293          ENDIF
00151E                05294 UPDATE_SSR_SKIP_2:
  00000003            05295 X        ++
00151E 6300           05287          CPFSEQ SSR_00_VALUE+3,     BANKED      ; is this SSR set to our slice value?
001520 D???           05288          BRA    UPDATE_SSR_SKIP_3
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn on light
                      05291          ELSE
001522 948D           05292           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn on SSR
                      05293          ENDIF
001524                05294 UPDATE_SSR_SKIP_3:
  00000004            05295 X        ++
001524 6300           05287          CPFSEQ SSR_00_VALUE+4,     BANKED      ; is this SSR set to our slice value?
001526 D???           05288          BRA    UPDATE_SSR_SKIP_4
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn on light
                      05291          ELSE
001528 9E8A           05292           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn on SSR
                      05293          ENDIF
00152A                05294 UPDATE_SSR_SKIP_4:
  00000005            05295 X        ++
00152A 6300           05287          CPFSEQ SSR_00_VALUE+5,     BANKED      ; is this SSR set to our slice value?
00152C D???           05288          BRA    UPDATE_SSR_SKIP_5
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn on light
                      05291          ELSE
00152E 9C8A           05292           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn on SSR
                      05293          ENDIF
001530                05294 UPDATE_SSR_SKIP_5:
  00000006            05295 X        ++
001530 6300           05287          CPFSEQ SSR_00_VALUE+6,     BANKED      ; is this SSR set to our slice value?
001532 D???           05288          BRA    UPDATE_SSR_SKIP_6
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn on light
                      05291          ELSE
001534 9A8A           05292           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn on SSR
                      05293          ENDIF
001536                05294 UPDATE_SSR_SKIP_6:
  00000007            05295 X        ++
001536 6300           05287          CPFSEQ SSR_00_VALUE+7,     BANKED      ; is this SSR set to our slice value?
001538 D???           05288          BRA    UPDATE_SSR_SKIP_7
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn on light
                      05291          ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00153A 988A           05292           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn on SSR
                      05293          ENDIF
00153C                05294 UPDATE_SSR_SKIP_7:
  00000008            05295 X        ++
00153C 6300           05287          CPFSEQ SSR_00_VALUE+8,     BANKED      ; is this SSR set to our slice value?
00153E D???           05288          BRA    UPDATE_SSR_SKIP_8
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn on light
                      05291          ELSE
001540 968A           05292           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn on SSR
                      05293          ENDIF
001542                05294 UPDATE_SSR_SKIP_8:
  00000009            05295 X        ++
001542 6300           05287          CPFSEQ SSR_00_VALUE+9,     BANKED      ; is this SSR set to our slice value?
001544 D???           05288          BRA    UPDATE_SSR_SKIP_9
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn on light
                      05291          ELSE
001546 948A           05292           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn on SSR
                      05293          ENDIF
001548                05294 UPDATE_SSR_SKIP_9:
  0000000A            05295 X        ++
001548 6300           05287          CPFSEQ SSR_00_VALUE+10,    BANKED      ; is this SSR set to our slice value?
00154A D???           05288          BRA    UPDATE_SSR_SKIP_10
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn on light
                      05291          ELSE
00154C 928A           05292           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn on SSR
                      05293          ENDIF
00154E                05294 UPDATE_SSR_SKIP_10:
  0000000B            05295 X        ++
00154E 6300           05287          CPFSEQ SSR_00_VALUE+11,    BANKED      ; is this SSR set to our slice value?
001550 D???           05288          BRA    UPDATE_SSR_SKIP_11
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn on light
                      05291          ELSE
001552 908D           05292           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn on SSR
                      05293          ENDIF
001554                05294 UPDATE_SSR_SKIP_11:
  0000000C            05295 X        ++
001554 6300           05287          CPFSEQ SSR_00_VALUE+12,    BANKED      ; is this SSR set to our slice value?
001556 D???           05288          BRA    UPDATE_SSR_SKIP_12
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn on light
                      05291          ELSE
001558 9E8C           05292           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn on SSR
                      05293          ENDIF
00155A                05294 UPDATE_SSR_SKIP_12:
  0000000D            05295 X        ++
00155A 6300           05287          CPFSEQ SSR_00_VALUE+13,    BANKED      ; is this SSR set to our slice value?
00155C D???           05288          BRA    UPDATE_SSR_SKIP_13
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn on light
                      05291          ELSE
00155E 9C8C           05292           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn on SSR
                      05293          ENDIF
001560                05294 UPDATE_SSR_SKIP_13:
  0000000E            05295 X        ++
001560 6300           05287          CPFSEQ SSR_00_VALUE+14,    BANKED      ; is this SSR set to our slice value?
001562 D???           05288          BRA    UPDATE_SSR_SKIP_14
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn on light
                      05291          ELSE
001564 9A8C           05292           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn on SSR
                      05293          ENDIF
001566                05294 UPDATE_SSR_SKIP_14:
  0000000F            05295 X        ++
001566 6300           05287          CPFSEQ SSR_00_VALUE+15,    BANKED      ; is this SSR set to our slice value?
001568 D???           05288          BRA    UPDATE_SSR_SKIP_15
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn on light
                      05291          ELSE
00156A 928D           05292           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn on SSR
                      05293          ENDIF
00156C                05294 UPDATE_SSR_SKIP_15:
  00000010            05295 X        ++
00156C 6300           05287          CPFSEQ SSR_00_VALUE+16,    BANKED      ; is this SSR set to our slice value?
00156E D???           05288          BRA    UPDATE_SSR_SKIP_16
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn on light
                      05291          ELSE
001570 908A           05292           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn on SSR
                      05293          ENDIF
001572                05294 UPDATE_SSR_SKIP_16:
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000011            05295 X        ++
001572 6300           05287          CPFSEQ SSR_00_VALUE+17,    BANKED      ; is this SSR set to our slice value?
001574 D???           05288          BRA    UPDATE_SSR_SKIP_17
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn on light
                      05291          ELSE
001576 968C           05292           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn on SSR
                      05293          ENDIF
001578                05294 UPDATE_SSR_SKIP_17:
  00000012            05295 X        ++
001578 6300           05287          CPFSEQ SSR_00_VALUE+18,    BANKED      ; is this SSR set to our slice value?
00157A D???           05288          BRA    UPDATE_SSR_SKIP_18
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn on light
                      05291          ELSE
00157C 928C           05292           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn on SSR
                      05293          ENDIF
00157E                05294 UPDATE_SSR_SKIP_18:
  00000013            05295 X        ++
00157E 6300           05287          CPFSEQ SSR_00_VALUE+19,    BANKED      ; is this SSR set to our slice value?
001580 D???           05288          BRA    UPDATE_SSR_SKIP_19
                      05289          IF X > OUTPUT_CHAN_MAX
                      05290           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn on light
                      05291          ELSE
001582 948C           05292           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn on SSR
                      05293          ENDIF
001584                05294 UPDATE_SSR_SKIP_19:
  00000014            05295 X        ++
                      05296         ENDW
001584 0600           05297         DECF    CUR_SLICE, F, ACCESS
001586 0012           05298         RETURN
                      05299 
001588                05300 UPDATE_MINIMUM_LEVEL:
                      05301         ;
                      05302         ; turn off every output that isn't set to be fully on
                      05303         ; and handle ramping up/down
                      05304         ;
001588 0104           05305         BANKSEL SSR_DATA_BANK
00158A 8800           05306         BSF     SSR_STATE2, ALL_OFF, ACCESS     
  00000000            05307 X       SET     0
                      05308         WHILE X <= SSR_MAX
00158C 1D00           05309          COMF   SSR_00_VALUE+0,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
00158E E1??           05311          BNZ    UPDATE_MIN_DIMMED_0
                      05312          IF X <= OUTPUT_CHAN_MAX
001590 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001592 D???           05315          BRA    UPDATE_MIN_SKIP_0
                      05316 
001594                05317 UPDATE_MIN_DIMMED_0:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn off light
                      05320          ELSE
001594 848B           05321           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn off SSR
001596 6700           05322           TSTFSZ SSR_00_VALUE+0,     BANKED     ; is this SSR fully off?
001598 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
00159A                05325 UPDATE_MIN_SKIP_0:
                      05326 
00159A AF00           05327          BTFSS  SSR_00_FLAGS+0,     FADE_UP, BANKED
00159C D???           05328          BRA    TRY_DOWN_0
00159E 2F00           05329          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay to next step
0015A0 D???           05330          BRA    END_FADE_0
0015A2 C??? F???      05331          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0
0015A6 5100           05332          MOVF   SSR_00_STEP+0,     W, BANKED
0015A8 2700           05333          ADDWF  SSR_00_VALUE+0,     F, BANKED
0015AA E3??           05334          BNC    END_FADE_0
0015AC 6900           05335          SETF   SSR_00_VALUE+0,     BANKED              ; reached max value
0015AE 9F00           05336          BCF    SSR_00_FLAGS+0,     FADE_UP, BANKED     ; stop fading
0015B0 AB00           05337          BTFSS  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
0015B2 D???           05338          BRA    END_FADE_0
0015B4 8D00           05339          BSF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   
0015B6 D???           05340          BRA    END_FADE_0
                      05341 
0015B8                05342 TRY_DOWN_0:
0015B8 AD00           05343          BTFSS  SSR_00_FLAGS+0,     FADE_DOWN, BANKED
0015BA D???           05344          BRA    END_FADE_0
0015BC 2F00           05345          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay
0015BE D???           05346          BRA    END_FADE_0
0015C0 C??? F???      05347          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0; reset delay
0015C4 5100           05348          MOVF   SSR_00_STEP+0,     W, BANKED
0015C6 5F00           05349          SUBWF  SSR_00_VALUE+0,     F, BANKED
0015C8 E2??           05350          BC     END_FADE_0
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015CA 6B00           05351          CLRF   SSR_00_VALUE+0,     BANKED              ; reached min value
0015CC 9D00           05352          BCF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   ; stop fading
0015CE BB00           05353          BTFSC  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
0015D0 8F00           05354          BSF    SSR_00_FLAGS+0,     FADE_UP, BANKED
0015D2 B900           05355          BTFSC  SSR_00_FLAGS+0,     MAX_OFF_TIME, BANKED; maximizing off-time?
0015D4 6900           05356          SETF   SSR_00_COUNTER+0,     BANKED
                      05357 
0015D6                05358 END_FADE_0:
  00000001            05359 X        ++
0015D6 1D00           05309          COMF   SSR_00_VALUE+1,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
0015D8 E1??           05311          BNZ    UPDATE_MIN_DIMMED_1
                      05312          IF X <= OUTPUT_CHAN_MAX
0015DA 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
0015DC D???           05315          BRA    UPDATE_MIN_SKIP_1
                      05316 
0015DE                05317 UPDATE_MIN_DIMMED_1:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn off light
                      05320          ELSE
0015DE 828B           05321           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn off SSR
0015E0 6700           05322           TSTFSZ SSR_00_VALUE+1,     BANKED     ; is this SSR fully off?
0015E2 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
0015E4                05325 UPDATE_MIN_SKIP_1:
                      05326 
0015E4 AF00           05327          BTFSS  SSR_00_FLAGS+1,     FADE_UP, BANKED
0015E6 D???           05328          BRA    TRY_DOWN_1
0015E8 2F00           05329          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay to next step
0015EA D???           05330          BRA    END_FADE_1
0015EC C??? F???      05331          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1
0015F0 5100           05332          MOVF   SSR_00_STEP+1,     W, BANKED
0015F2 2700           05333          ADDWF  SSR_00_VALUE+1,     F, BANKED
0015F4 E3??           05334          BNC    END_FADE_1
0015F6 6900           05335          SETF   SSR_00_VALUE+1,     BANKED              ; reached max value
0015F8 9F00           05336          BCF    SSR_00_FLAGS+1,     FADE_UP, BANKED     ; stop fading
0015FA AB00           05337          BTFSS  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
0015FC D???           05338          BRA    END_FADE_1
0015FE 8D00           05339          BSF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   
001600 D???           05340          BRA    END_FADE_1
                      05341 
001602                05342 TRY_DOWN_1:
001602 AD00           05343          BTFSS  SSR_00_FLAGS+1,     FADE_DOWN, BANKED
001604 D???           05344          BRA    END_FADE_1
001606 2F00           05345          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay
001608 D???           05346          BRA    END_FADE_1
00160A C??? F???      05347          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1; reset delay
00160E 5100           05348          MOVF   SSR_00_STEP+1,     W, BANKED
001610 5F00           05349          SUBWF  SSR_00_VALUE+1,     F, BANKED
001612 E2??           05350          BC     END_FADE_1
001614 6B00           05351          CLRF   SSR_00_VALUE+1,     BANKED              ; reached min value
001616 9D00           05352          BCF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   ; stop fading
001618 BB00           05353          BTFSC  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
00161A 8F00           05354          BSF    SSR_00_FLAGS+1,     FADE_UP, BANKED
00161C B900           05355          BTFSC  SSR_00_FLAGS+1,     MAX_OFF_TIME, BANKED; maximizing off-time?
00161E 6900           05356          SETF   SSR_00_COUNTER+1,     BANKED
                      05357 
001620                05358 END_FADE_1:
  00000002            05359 X        ++
001620 1D00           05309          COMF   SSR_00_VALUE+2,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001622 E1??           05311          BNZ    UPDATE_MIN_DIMMED_2
                      05312          IF X <= OUTPUT_CHAN_MAX
001624 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001626 D???           05315          BRA    UPDATE_MIN_SKIP_2
                      05316 
001628                05317 UPDATE_MIN_DIMMED_2:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn off light
                      05320          ELSE
001628 808B           05321           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn off SSR
00162A 6700           05322           TSTFSZ SSR_00_VALUE+2,     BANKED     ; is this SSR fully off?
00162C 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
00162E                05325 UPDATE_MIN_SKIP_2:
                      05326 
00162E AF00           05327          BTFSS  SSR_00_FLAGS+2,     FADE_UP, BANKED
001630 D???           05328          BRA    TRY_DOWN_2
001632 2F00           05329          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay to next step
001634 D???           05330          BRA    END_FADE_2
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001636 C??? F???      05331          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2
00163A 5100           05332          MOVF   SSR_00_STEP+2,     W, BANKED
00163C 2700           05333          ADDWF  SSR_00_VALUE+2,     F, BANKED
00163E E3??           05334          BNC    END_FADE_2
001640 6900           05335          SETF   SSR_00_VALUE+2,     BANKED              ; reached max value
001642 9F00           05336          BCF    SSR_00_FLAGS+2,     FADE_UP, BANKED     ; stop fading
001644 AB00           05337          BTFSS  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
001646 D???           05338          BRA    END_FADE_2
001648 8D00           05339          BSF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   
00164A D???           05340          BRA    END_FADE_2
                      05341 
00164C                05342 TRY_DOWN_2:
00164C AD00           05343          BTFSS  SSR_00_FLAGS+2,     FADE_DOWN, BANKED
00164E D???           05344          BRA    END_FADE_2
001650 2F00           05345          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay
001652 D???           05346          BRA    END_FADE_2
001654 C??? F???      05347          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2; reset delay
001658 5100           05348          MOVF   SSR_00_STEP+2,     W, BANKED
00165A 5F00           05349          SUBWF  SSR_00_VALUE+2,     F, BANKED
00165C E2??           05350          BC     END_FADE_2
00165E 6B00           05351          CLRF   SSR_00_VALUE+2,     BANKED              ; reached min value
001660 9D00           05352          BCF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   ; stop fading
001662 BB00           05353          BTFSC  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
001664 8F00           05354          BSF    SSR_00_FLAGS+2,     FADE_UP, BANKED
001666 B900           05355          BTFSC  SSR_00_FLAGS+2,     MAX_OFF_TIME, BANKED; maximizing off-time?
001668 6900           05356          SETF   SSR_00_COUNTER+2,     BANKED
                      05357 
00166A                05358 END_FADE_2:
  00000003            05359 X        ++
00166A 1D00           05309          COMF   SSR_00_VALUE+3,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
00166C E1??           05311          BNZ    UPDATE_MIN_DIMMED_3
                      05312          IF X <= OUTPUT_CHAN_MAX
00166E 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001670 D???           05315          BRA    UPDATE_MIN_SKIP_3
                      05316 
001672                05317 UPDATE_MIN_DIMMED_3:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn off light
                      05320          ELSE
001672 848D           05321           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn off SSR
001674 6700           05322           TSTFSZ SSR_00_VALUE+3,     BANKED     ; is this SSR fully off?
001676 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001678                05325 UPDATE_MIN_SKIP_3:
                      05326 
001678 AF00           05327          BTFSS  SSR_00_FLAGS+3,     FADE_UP, BANKED
00167A D???           05328          BRA    TRY_DOWN_3
00167C 2F00           05329          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay to next step
00167E D???           05330          BRA    END_FADE_3
001680 C??? F???      05331          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3
001684 5100           05332          MOVF   SSR_00_STEP+3,     W, BANKED
001686 2700           05333          ADDWF  SSR_00_VALUE+3,     F, BANKED
001688 E3??           05334          BNC    END_FADE_3
00168A 6900           05335          SETF   SSR_00_VALUE+3,     BANKED              ; reached max value
00168C 9F00           05336          BCF    SSR_00_FLAGS+3,     FADE_UP, BANKED     ; stop fading
00168E AB00           05337          BTFSS  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
001690 D???           05338          BRA    END_FADE_3
001692 8D00           05339          BSF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   
001694 D???           05340          BRA    END_FADE_3
                      05341 
001696                05342 TRY_DOWN_3:
001696 AD00           05343          BTFSS  SSR_00_FLAGS+3,     FADE_DOWN, BANKED
001698 D???           05344          BRA    END_FADE_3
00169A 2F00           05345          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay
00169C D???           05346          BRA    END_FADE_3
00169E C??? F???      05347          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3; reset delay
0016A2 5100           05348          MOVF   SSR_00_STEP+3,     W, BANKED
0016A4 5F00           05349          SUBWF  SSR_00_VALUE+3,     F, BANKED
0016A6 E2??           05350          BC     END_FADE_3
0016A8 6B00           05351          CLRF   SSR_00_VALUE+3,     BANKED              ; reached min value
0016AA 9D00           05352          BCF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   ; stop fading
0016AC BB00           05353          BTFSC  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
0016AE 8F00           05354          BSF    SSR_00_FLAGS+3,     FADE_UP, BANKED
0016B0 B900           05355          BTFSC  SSR_00_FLAGS+3,     MAX_OFF_TIME, BANKED; maximizing off-time?
0016B2 6900           05356          SETF   SSR_00_COUNTER+3,     BANKED
                      05357 
0016B4                05358 END_FADE_3:
  00000004            05359 X        ++
0016B4 1D00           05309          COMF   SSR_00_VALUE+4,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
0016B6 E1??           05311          BNZ    UPDATE_MIN_DIMMED_4
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05312          IF X <= OUTPUT_CHAN_MAX
0016B8 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
0016BA D???           05315          BRA    UPDATE_MIN_SKIP_4
                      05316 
0016BC                05317 UPDATE_MIN_DIMMED_4:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn off light
                      05320          ELSE
0016BC 8E8A           05321           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn off SSR
0016BE 6700           05322           TSTFSZ SSR_00_VALUE+4,     BANKED     ; is this SSR fully off?
0016C0 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
0016C2                05325 UPDATE_MIN_SKIP_4:
                      05326 
0016C2 AF00           05327          BTFSS  SSR_00_FLAGS+4,     FADE_UP, BANKED
0016C4 D???           05328          BRA    TRY_DOWN_4
0016C6 2F00           05329          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay to next step
0016C8 D???           05330          BRA    END_FADE_4
0016CA C??? F???      05331          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4
0016CE 5100           05332          MOVF   SSR_00_STEP+4,     W, BANKED
0016D0 2700           05333          ADDWF  SSR_00_VALUE+4,     F, BANKED
0016D2 E3??           05334          BNC    END_FADE_4
0016D4 6900           05335          SETF   SSR_00_VALUE+4,     BANKED              ; reached max value
0016D6 9F00           05336          BCF    SSR_00_FLAGS+4,     FADE_UP, BANKED     ; stop fading
0016D8 AB00           05337          BTFSS  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
0016DA D???           05338          BRA    END_FADE_4
0016DC 8D00           05339          BSF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   
0016DE D???           05340          BRA    END_FADE_4
                      05341 
0016E0                05342 TRY_DOWN_4:
0016E0 AD00           05343          BTFSS  SSR_00_FLAGS+4,     FADE_DOWN, BANKED
0016E2 D???           05344          BRA    END_FADE_4
0016E4 2F00           05345          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay
0016E6 D???           05346          BRA    END_FADE_4
0016E8 C??? F???      05347          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4; reset delay
0016EC 5100           05348          MOVF   SSR_00_STEP+4,     W, BANKED
0016EE 5F00           05349          SUBWF  SSR_00_VALUE+4,     F, BANKED
0016F0 E2??           05350          BC     END_FADE_4
0016F2 6B00           05351          CLRF   SSR_00_VALUE+4,     BANKED              ; reached min value
0016F4 9D00           05352          BCF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   ; stop fading
0016F6 BB00           05353          BTFSC  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
0016F8 8F00           05354          BSF    SSR_00_FLAGS+4,     FADE_UP, BANKED
0016FA B900           05355          BTFSC  SSR_00_FLAGS+4,     MAX_OFF_TIME, BANKED; maximizing off-time?
0016FC 6900           05356          SETF   SSR_00_COUNTER+4,     BANKED
                      05357 
0016FE                05358 END_FADE_4:
  00000005            05359 X        ++
0016FE 1D00           05309          COMF   SSR_00_VALUE+5,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001700 E1??           05311          BNZ    UPDATE_MIN_DIMMED_5
                      05312          IF X <= OUTPUT_CHAN_MAX
001702 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001704 D???           05315          BRA    UPDATE_MIN_SKIP_5
                      05316 
001706                05317 UPDATE_MIN_DIMMED_5:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn off light
                      05320          ELSE
001706 8C8A           05321           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn off SSR
001708 6700           05322           TSTFSZ SSR_00_VALUE+5,     BANKED     ; is this SSR fully off?
00170A 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
00170C                05325 UPDATE_MIN_SKIP_5:
                      05326 
00170C AF00           05327          BTFSS  SSR_00_FLAGS+5,     FADE_UP, BANKED
00170E D???           05328          BRA    TRY_DOWN_5
001710 2F00           05329          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay to next step
001712 D???           05330          BRA    END_FADE_5
001714 C??? F???      05331          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5
001718 5100           05332          MOVF   SSR_00_STEP+5,     W, BANKED
00171A 2700           05333          ADDWF  SSR_00_VALUE+5,     F, BANKED
00171C E3??           05334          BNC    END_FADE_5
00171E 6900           05335          SETF   SSR_00_VALUE+5,     BANKED              ; reached max value
001720 9F00           05336          BCF    SSR_00_FLAGS+5,     FADE_UP, BANKED     ; stop fading
001722 AB00           05337          BTFSS  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
001724 D???           05338          BRA    END_FADE_5
001726 8D00           05339          BSF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   
001728 D???           05340          BRA    END_FADE_5
                      05341 
00172A                05342 TRY_DOWN_5:
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00172A AD00           05343          BTFSS  SSR_00_FLAGS+5,     FADE_DOWN, BANKED
00172C D???           05344          BRA    END_FADE_5
00172E 2F00           05345          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay
001730 D???           05346          BRA    END_FADE_5
001732 C??? F???      05347          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5; reset delay
001736 5100           05348          MOVF   SSR_00_STEP+5,     W, BANKED
001738 5F00           05349          SUBWF  SSR_00_VALUE+5,     F, BANKED
00173A E2??           05350          BC     END_FADE_5
00173C 6B00           05351          CLRF   SSR_00_VALUE+5,     BANKED              ; reached min value
00173E 9D00           05352          BCF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   ; stop fading
001740 BB00           05353          BTFSC  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
001742 8F00           05354          BSF    SSR_00_FLAGS+5,     FADE_UP, BANKED
001744 B900           05355          BTFSC  SSR_00_FLAGS+5,     MAX_OFF_TIME, BANKED; maximizing off-time?
001746 6900           05356          SETF   SSR_00_COUNTER+5,     BANKED
                      05357 
001748                05358 END_FADE_5:
  00000006            05359 X        ++
001748 1D00           05309          COMF   SSR_00_VALUE+6,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
00174A E1??           05311          BNZ    UPDATE_MIN_DIMMED_6
                      05312          IF X <= OUTPUT_CHAN_MAX
00174C 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
00174E D???           05315          BRA    UPDATE_MIN_SKIP_6
                      05316 
001750                05317 UPDATE_MIN_DIMMED_6:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn off light
                      05320          ELSE
001750 8A8A           05321           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn off SSR
001752 6700           05322           TSTFSZ SSR_00_VALUE+6,     BANKED     ; is this SSR fully off?
001754 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001756                05325 UPDATE_MIN_SKIP_6:
                      05326 
001756 AF00           05327          BTFSS  SSR_00_FLAGS+6,     FADE_UP, BANKED
001758 D???           05328          BRA    TRY_DOWN_6
00175A 2F00           05329          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay to next step
00175C D???           05330          BRA    END_FADE_6
00175E C??? F???      05331          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6
001762 5100           05332          MOVF   SSR_00_STEP+6,     W, BANKED
001764 2700           05333          ADDWF  SSR_00_VALUE+6,     F, BANKED
001766 E3??           05334          BNC    END_FADE_6
001768 6900           05335          SETF   SSR_00_VALUE+6,     BANKED              ; reached max value
00176A 9F00           05336          BCF    SSR_00_FLAGS+6,     FADE_UP, BANKED     ; stop fading
00176C AB00           05337          BTFSS  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
00176E D???           05338          BRA    END_FADE_6
001770 8D00           05339          BSF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   
001772 D???           05340          BRA    END_FADE_6
                      05341 
001774                05342 TRY_DOWN_6:
001774 AD00           05343          BTFSS  SSR_00_FLAGS+6,     FADE_DOWN, BANKED
001776 D???           05344          BRA    END_FADE_6
001778 2F00           05345          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay
00177A D???           05346          BRA    END_FADE_6
00177C C??? F???      05347          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6; reset delay
001780 5100           05348          MOVF   SSR_00_STEP+6,     W, BANKED
001782 5F00           05349          SUBWF  SSR_00_VALUE+6,     F, BANKED
001784 E2??           05350          BC     END_FADE_6
001786 6B00           05351          CLRF   SSR_00_VALUE+6,     BANKED              ; reached min value
001788 9D00           05352          BCF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   ; stop fading
00178A BB00           05353          BTFSC  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
00178C 8F00           05354          BSF    SSR_00_FLAGS+6,     FADE_UP, BANKED
00178E B900           05355          BTFSC  SSR_00_FLAGS+6,     MAX_OFF_TIME, BANKED; maximizing off-time?
001790 6900           05356          SETF   SSR_00_COUNTER+6,     BANKED
                      05357 
001792                05358 END_FADE_6:
  00000007            05359 X        ++
001792 1D00           05309          COMF   SSR_00_VALUE+7,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001794 E1??           05311          BNZ    UPDATE_MIN_DIMMED_7
                      05312          IF X <= OUTPUT_CHAN_MAX
001796 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001798 D???           05315          BRA    UPDATE_MIN_SKIP_7
                      05316 
00179A                05317 UPDATE_MIN_DIMMED_7:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn off light
                      05320          ELSE
00179A 888A           05321           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn off SSR
00179C 6700           05322           TSTFSZ SSR_00_VALUE+7,     BANKED     ; is this SSR fully off?
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00179E 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
0017A0                05325 UPDATE_MIN_SKIP_7:
                      05326 
0017A0 AF00           05327          BTFSS  SSR_00_FLAGS+7,     FADE_UP, BANKED
0017A2 D???           05328          BRA    TRY_DOWN_7
0017A4 2F00           05329          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay to next step
0017A6 D???           05330          BRA    END_FADE_7
0017A8 C??? F???      05331          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7
0017AC 5100           05332          MOVF   SSR_00_STEP+7,     W, BANKED
0017AE 2700           05333          ADDWF  SSR_00_VALUE+7,     F, BANKED
0017B0 E3??           05334          BNC    END_FADE_7
0017B2 6900           05335          SETF   SSR_00_VALUE+7,     BANKED              ; reached max value
0017B4 9F00           05336          BCF    SSR_00_FLAGS+7,     FADE_UP, BANKED     ; stop fading
0017B6 AB00           05337          BTFSS  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
0017B8 D???           05338          BRA    END_FADE_7
0017BA 8D00           05339          BSF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   
0017BC D???           05340          BRA    END_FADE_7
                      05341 
0017BE                05342 TRY_DOWN_7:
0017BE AD00           05343          BTFSS  SSR_00_FLAGS+7,     FADE_DOWN, BANKED
0017C0 D???           05344          BRA    END_FADE_7
0017C2 2F00           05345          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay
0017C4 D???           05346          BRA    END_FADE_7
0017C6 C??? F???      05347          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7; reset delay
0017CA 5100           05348          MOVF   SSR_00_STEP+7,     W, BANKED
0017CC 5F00           05349          SUBWF  SSR_00_VALUE+7,     F, BANKED
0017CE E2??           05350          BC     END_FADE_7
0017D0 6B00           05351          CLRF   SSR_00_VALUE+7,     BANKED              ; reached min value
0017D2 9D00           05352          BCF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   ; stop fading
0017D4 BB00           05353          BTFSC  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
0017D6 8F00           05354          BSF    SSR_00_FLAGS+7,     FADE_UP, BANKED
0017D8 B900           05355          BTFSC  SSR_00_FLAGS+7,     MAX_OFF_TIME, BANKED; maximizing off-time?
0017DA 6900           05356          SETF   SSR_00_COUNTER+7,     BANKED
                      05357 
0017DC                05358 END_FADE_7:
  00000008            05359 X        ++
0017DC 1D00           05309          COMF   SSR_00_VALUE+8,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
0017DE E1??           05311          BNZ    UPDATE_MIN_DIMMED_8
                      05312          IF X <= OUTPUT_CHAN_MAX
0017E0 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
0017E2 D???           05315          BRA    UPDATE_MIN_SKIP_8
                      05316 
0017E4                05317 UPDATE_MIN_DIMMED_8:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn off light
                      05320          ELSE
0017E4 868A           05321           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn off SSR
0017E6 6700           05322           TSTFSZ SSR_00_VALUE+8,     BANKED     ; is this SSR fully off?
0017E8 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
0017EA                05325 UPDATE_MIN_SKIP_8:
                      05326 
0017EA AF00           05327          BTFSS  SSR_00_FLAGS+8,     FADE_UP, BANKED
0017EC D???           05328          BRA    TRY_DOWN_8
0017EE 2F00           05329          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay to next step
0017F0 D???           05330          BRA    END_FADE_8
0017F2 C??? F???      05331          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8
0017F6 5100           05332          MOVF   SSR_00_STEP+8,     W, BANKED
0017F8 2700           05333          ADDWF  SSR_00_VALUE+8,     F, BANKED
0017FA E3??           05334          BNC    END_FADE_8
0017FC 6900           05335          SETF   SSR_00_VALUE+8,     BANKED              ; reached max value
0017FE 9F00           05336          BCF    SSR_00_FLAGS+8,     FADE_UP, BANKED     ; stop fading
001800 AB00           05337          BTFSS  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
001802 D???           05338          BRA    END_FADE_8
001804 8D00           05339          BSF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   
001806 D???           05340          BRA    END_FADE_8
                      05341 
001808                05342 TRY_DOWN_8:
001808 AD00           05343          BTFSS  SSR_00_FLAGS+8,     FADE_DOWN, BANKED
00180A D???           05344          BRA    END_FADE_8
00180C 2F00           05345          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay
00180E D???           05346          BRA    END_FADE_8
001810 C??? F???      05347          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8; reset delay
001814 5100           05348          MOVF   SSR_00_STEP+8,     W, BANKED
001816 5F00           05349          SUBWF  SSR_00_VALUE+8,     F, BANKED
001818 E2??           05350          BC     END_FADE_8
00181A 6B00           05351          CLRF   SSR_00_VALUE+8,     BANKED              ; reached min value
00181C 9D00           05352          BCF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   ; stop fading
00181E BB00           05353          BTFSC  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
001820 8F00           05354          BSF    SSR_00_FLAGS+8,     FADE_UP, BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001822 B900           05355          BTFSC  SSR_00_FLAGS+8,     MAX_OFF_TIME, BANKED; maximizing off-time?
001824 6900           05356          SETF   SSR_00_COUNTER+8,     BANKED
                      05357 
001826                05358 END_FADE_8:
  00000009            05359 X        ++
001826 1D00           05309          COMF   SSR_00_VALUE+9,     W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001828 E1??           05311          BNZ    UPDATE_MIN_DIMMED_9
                      05312          IF X <= OUTPUT_CHAN_MAX
00182A 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
00182C D???           05315          BRA    UPDATE_MIN_SKIP_9
                      05316 
00182E                05317 UPDATE_MIN_DIMMED_9:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn off light
                      05320          ELSE
00182E 848A           05321           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn off SSR
001830 6700           05322           TSTFSZ SSR_00_VALUE+9,     BANKED     ; is this SSR fully off?
001832 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001834                05325 UPDATE_MIN_SKIP_9:
                      05326 
001834 AF00           05327          BTFSS  SSR_00_FLAGS+9,     FADE_UP, BANKED
001836 D???           05328          BRA    TRY_DOWN_9
001838 2F00           05329          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay to next step
00183A D???           05330          BRA    END_FADE_9
00183C C??? F???      05331          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9
001840 5100           05332          MOVF   SSR_00_STEP+9,     W, BANKED
001842 2700           05333          ADDWF  SSR_00_VALUE+9,     F, BANKED
001844 E3??           05334          BNC    END_FADE_9
001846 6900           05335          SETF   SSR_00_VALUE+9,     BANKED              ; reached max value
001848 9F00           05336          BCF    SSR_00_FLAGS+9,     FADE_UP, BANKED     ; stop fading
00184A AB00           05337          BTFSS  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
00184C D???           05338          BRA    END_FADE_9
00184E 8D00           05339          BSF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   
001850 D???           05340          BRA    END_FADE_9
                      05341 
001852                05342 TRY_DOWN_9:
001852 AD00           05343          BTFSS  SSR_00_FLAGS+9,     FADE_DOWN, BANKED
001854 D???           05344          BRA    END_FADE_9
001856 2F00           05345          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay
001858 D???           05346          BRA    END_FADE_9
00185A C??? F???      05347          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9; reset delay
00185E 5100           05348          MOVF   SSR_00_STEP+9,     W, BANKED
001860 5F00           05349          SUBWF  SSR_00_VALUE+9,     F, BANKED
001862 E2??           05350          BC     END_FADE_9
001864 6B00           05351          CLRF   SSR_00_VALUE+9,     BANKED              ; reached min value
001866 9D00           05352          BCF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   ; stop fading
001868 BB00           05353          BTFSC  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
00186A 8F00           05354          BSF    SSR_00_FLAGS+9,     FADE_UP, BANKED
00186C B900           05355          BTFSC  SSR_00_FLAGS+9,     MAX_OFF_TIME, BANKED; maximizing off-time?
00186E 6900           05356          SETF   SSR_00_COUNTER+9,     BANKED
                      05357 
001870                05358 END_FADE_9:
  0000000A            05359 X        ++
001870 1D00           05309          COMF   SSR_00_VALUE+10,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001872 E1??           05311          BNZ    UPDATE_MIN_DIMMED_10
                      05312          IF X <= OUTPUT_CHAN_MAX
001874 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001876 D???           05315          BRA    UPDATE_MIN_SKIP_10
                      05316 
001878                05317 UPDATE_MIN_DIMMED_10:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn off light
                      05320          ELSE
001878 828A           05321           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn off SSR
00187A 6700           05322           TSTFSZ SSR_00_VALUE+10,    BANKED     ; is this SSR fully off?
00187C 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
00187E                05325 UPDATE_MIN_SKIP_10:
                      05326 
00187E AF00           05327          BTFSS  SSR_00_FLAGS+10,    FADE_UP, BANKED
001880 D???           05328          BRA    TRY_DOWN_10
001882 2F00           05329          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay to next step
001884 D???           05330          BRA    END_FADE_10
001886 C??? F???      05331          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10
00188A 5100           05332          MOVF   SSR_00_STEP+10,    W, BANKED
00188C 2700           05333          ADDWF  SSR_00_VALUE+10,    F, BANKED
00188E E3??           05334          BNC    END_FADE_10
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001890 6900           05335          SETF   SSR_00_VALUE+10,    BANKED              ; reached max value
001892 9F00           05336          BCF    SSR_00_FLAGS+10,    FADE_UP, BANKED     ; stop fading
001894 AB00           05337          BTFSS  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
001896 D???           05338          BRA    END_FADE_10
001898 8D00           05339          BSF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   
00189A D???           05340          BRA    END_FADE_10
                      05341 
00189C                05342 TRY_DOWN_10:
00189C AD00           05343          BTFSS  SSR_00_FLAGS+10,    FADE_DOWN, BANKED
00189E D???           05344          BRA    END_FADE_10
0018A0 2F00           05345          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay
0018A2 D???           05346          BRA    END_FADE_10
0018A4 C??? F???      05347          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10; reset delay
0018A8 5100           05348          MOVF   SSR_00_STEP+10,    W, BANKED
0018AA 5F00           05349          SUBWF  SSR_00_VALUE+10,    F, BANKED
0018AC E2??           05350          BC     END_FADE_10
0018AE 6B00           05351          CLRF   SSR_00_VALUE+10,    BANKED              ; reached min value
0018B0 9D00           05352          BCF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   ; stop fading
0018B2 BB00           05353          BTFSC  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
0018B4 8F00           05354          BSF    SSR_00_FLAGS+10,    FADE_UP, BANKED
0018B6 B900           05355          BTFSC  SSR_00_FLAGS+10,    MAX_OFF_TIME, BANKED; maximizing off-time?
0018B8 6900           05356          SETF   SSR_00_COUNTER+10,    BANKED
                      05357 
0018BA                05358 END_FADE_10:
  0000000B            05359 X        ++
0018BA 1D00           05309          COMF   SSR_00_VALUE+11,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
0018BC E1??           05311          BNZ    UPDATE_MIN_DIMMED_11
                      05312          IF X <= OUTPUT_CHAN_MAX
0018BE 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
0018C0 D???           05315          BRA    UPDATE_MIN_SKIP_11
                      05316 
0018C2                05317 UPDATE_MIN_DIMMED_11:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn off light
                      05320          ELSE
0018C2 808D           05321           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn off SSR
0018C4 6700           05322           TSTFSZ SSR_00_VALUE+11,    BANKED     ; is this SSR fully off?
0018C6 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
0018C8                05325 UPDATE_MIN_SKIP_11:
                      05326 
0018C8 AF00           05327          BTFSS  SSR_00_FLAGS+11,    FADE_UP, BANKED
0018CA D???           05328          BRA    TRY_DOWN_11
0018CC 2F00           05329          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay to next step
0018CE D???           05330          BRA    END_FADE_11
0018D0 C??? F???      05331          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11
0018D4 5100           05332          MOVF   SSR_00_STEP+11,    W, BANKED
0018D6 2700           05333          ADDWF  SSR_00_VALUE+11,    F, BANKED
0018D8 E3??           05334          BNC    END_FADE_11
0018DA 6900           05335          SETF   SSR_00_VALUE+11,    BANKED              ; reached max value
0018DC 9F00           05336          BCF    SSR_00_FLAGS+11,    FADE_UP, BANKED     ; stop fading
0018DE AB00           05337          BTFSS  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
0018E0 D???           05338          BRA    END_FADE_11
0018E2 8D00           05339          BSF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   
0018E4 D???           05340          BRA    END_FADE_11
                      05341 
0018E6                05342 TRY_DOWN_11:
0018E6 AD00           05343          BTFSS  SSR_00_FLAGS+11,    FADE_DOWN, BANKED
0018E8 D???           05344          BRA    END_FADE_11
0018EA 2F00           05345          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay
0018EC D???           05346          BRA    END_FADE_11
0018EE C??? F???      05347          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11; reset delay
0018F2 5100           05348          MOVF   SSR_00_STEP+11,    W, BANKED
0018F4 5F00           05349          SUBWF  SSR_00_VALUE+11,    F, BANKED
0018F6 E2??           05350          BC     END_FADE_11
0018F8 6B00           05351          CLRF   SSR_00_VALUE+11,    BANKED              ; reached min value
0018FA 9D00           05352          BCF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   ; stop fading
0018FC BB00           05353          BTFSC  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
0018FE 8F00           05354          BSF    SSR_00_FLAGS+11,    FADE_UP, BANKED
001900 B900           05355          BTFSC  SSR_00_FLAGS+11,    MAX_OFF_TIME, BANKED; maximizing off-time?
001902 6900           05356          SETF   SSR_00_COUNTER+11,    BANKED
                      05357 
001904                05358 END_FADE_11:
  0000000C            05359 X        ++
001904 1D00           05309          COMF   SSR_00_VALUE+12,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001906 E1??           05311          BNZ    UPDATE_MIN_DIMMED_12
                      05312          IF X <= OUTPUT_CHAN_MAX
001908 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00190A D???           05315          BRA    UPDATE_MIN_SKIP_12
                      05316 
00190C                05317 UPDATE_MIN_DIMMED_12:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn off light
                      05320          ELSE
00190C 8E8C           05321           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn off SSR
00190E 6700           05322           TSTFSZ SSR_00_VALUE+12,    BANKED     ; is this SSR fully off?
001910 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001912                05325 UPDATE_MIN_SKIP_12:
                      05326 
001912 AF00           05327          BTFSS  SSR_00_FLAGS+12,    FADE_UP, BANKED
001914 D???           05328          BRA    TRY_DOWN_12
001916 2F00           05329          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay to next step
001918 D???           05330          BRA    END_FADE_12
00191A C??? F???      05331          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12
00191E 5100           05332          MOVF   SSR_00_STEP+12,    W, BANKED
001920 2700           05333          ADDWF  SSR_00_VALUE+12,    F, BANKED
001922 E3??           05334          BNC    END_FADE_12
001924 6900           05335          SETF   SSR_00_VALUE+12,    BANKED              ; reached max value
001926 9F00           05336          BCF    SSR_00_FLAGS+12,    FADE_UP, BANKED     ; stop fading
001928 AB00           05337          BTFSS  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
00192A D???           05338          BRA    END_FADE_12
00192C 8D00           05339          BSF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   
00192E D???           05340          BRA    END_FADE_12
                      05341 
001930                05342 TRY_DOWN_12:
001930 AD00           05343          BTFSS  SSR_00_FLAGS+12,    FADE_DOWN, BANKED
001932 D???           05344          BRA    END_FADE_12
001934 2F00           05345          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay
001936 D???           05346          BRA    END_FADE_12
001938 C??? F???      05347          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12; reset delay
00193C 5100           05348          MOVF   SSR_00_STEP+12,    W, BANKED
00193E 5F00           05349          SUBWF  SSR_00_VALUE+12,    F, BANKED
001940 E2??           05350          BC     END_FADE_12
001942 6B00           05351          CLRF   SSR_00_VALUE+12,    BANKED              ; reached min value
001944 9D00           05352          BCF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   ; stop fading
001946 BB00           05353          BTFSC  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
001948 8F00           05354          BSF    SSR_00_FLAGS+12,    FADE_UP, BANKED
00194A B900           05355          BTFSC  SSR_00_FLAGS+12,    MAX_OFF_TIME, BANKED; maximizing off-time?
00194C 6900           05356          SETF   SSR_00_COUNTER+12,    BANKED
                      05357 
00194E                05358 END_FADE_12:
  0000000D            05359 X        ++
00194E 1D00           05309          COMF   SSR_00_VALUE+13,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001950 E1??           05311          BNZ    UPDATE_MIN_DIMMED_13
                      05312          IF X <= OUTPUT_CHAN_MAX
001952 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001954 D???           05315          BRA    UPDATE_MIN_SKIP_13
                      05316 
001956                05317 UPDATE_MIN_DIMMED_13:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn off light
                      05320          ELSE
001956 8C8C           05321           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn off SSR
001958 6700           05322           TSTFSZ SSR_00_VALUE+13,    BANKED     ; is this SSR fully off?
00195A 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
00195C                05325 UPDATE_MIN_SKIP_13:
                      05326 
00195C AF00           05327          BTFSS  SSR_00_FLAGS+13,    FADE_UP, BANKED
00195E D???           05328          BRA    TRY_DOWN_13
001960 2F00           05329          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay to next step
001962 D???           05330          BRA    END_FADE_13
001964 C??? F???      05331          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13
001968 5100           05332          MOVF   SSR_00_STEP+13,    W, BANKED
00196A 2700           05333          ADDWF  SSR_00_VALUE+13,    F, BANKED
00196C E3??           05334          BNC    END_FADE_13
00196E 6900           05335          SETF   SSR_00_VALUE+13,    BANKED              ; reached max value
001970 9F00           05336          BCF    SSR_00_FLAGS+13,    FADE_UP, BANKED     ; stop fading
001972 AB00           05337          BTFSS  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
001974 D???           05338          BRA    END_FADE_13
001976 8D00           05339          BSF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   
001978 D???           05340          BRA    END_FADE_13
                      05341 
00197A                05342 TRY_DOWN_13:
00197A AD00           05343          BTFSS  SSR_00_FLAGS+13,    FADE_DOWN, BANKED
00197C D???           05344          BRA    END_FADE_13
00197E 2F00           05345          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay
001980 D???           05346          BRA    END_FADE_13
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001982 C??? F???      05347          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13; reset delay
001986 5100           05348          MOVF   SSR_00_STEP+13,    W, BANKED
001988 5F00           05349          SUBWF  SSR_00_VALUE+13,    F, BANKED
00198A E2??           05350          BC     END_FADE_13
00198C 6B00           05351          CLRF   SSR_00_VALUE+13,    BANKED              ; reached min value
00198E 9D00           05352          BCF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   ; stop fading
001990 BB00           05353          BTFSC  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
001992 8F00           05354          BSF    SSR_00_FLAGS+13,    FADE_UP, BANKED
001994 B900           05355          BTFSC  SSR_00_FLAGS+13,    MAX_OFF_TIME, BANKED; maximizing off-time?
001996 6900           05356          SETF   SSR_00_COUNTER+13,    BANKED
                      05357 
001998                05358 END_FADE_13:
  0000000E            05359 X        ++
001998 1D00           05309          COMF   SSR_00_VALUE+14,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
00199A E1??           05311          BNZ    UPDATE_MIN_DIMMED_14
                      05312          IF X <= OUTPUT_CHAN_MAX
00199C 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
00199E D???           05315          BRA    UPDATE_MIN_SKIP_14
                      05316 
0019A0                05317 UPDATE_MIN_DIMMED_14:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn off light
                      05320          ELSE
0019A0 8A8C           05321           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn off SSR
0019A2 6700           05322           TSTFSZ SSR_00_VALUE+14,    BANKED     ; is this SSR fully off?
0019A4 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
0019A6                05325 UPDATE_MIN_SKIP_14:
                      05326 
0019A6 AF00           05327          BTFSS  SSR_00_FLAGS+14,    FADE_UP, BANKED
0019A8 D???           05328          BRA    TRY_DOWN_14
0019AA 2F00           05329          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay to next step
0019AC D???           05330          BRA    END_FADE_14
0019AE C??? F???      05331          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14
0019B2 5100           05332          MOVF   SSR_00_STEP+14,    W, BANKED
0019B4 2700           05333          ADDWF  SSR_00_VALUE+14,    F, BANKED
0019B6 E3??           05334          BNC    END_FADE_14
0019B8 6900           05335          SETF   SSR_00_VALUE+14,    BANKED              ; reached max value
0019BA 9F00           05336          BCF    SSR_00_FLAGS+14,    FADE_UP, BANKED     ; stop fading
0019BC AB00           05337          BTFSS  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
0019BE D???           05338          BRA    END_FADE_14
0019C0 8D00           05339          BSF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   
0019C2 D???           05340          BRA    END_FADE_14
                      05341 
0019C4                05342 TRY_DOWN_14:
0019C4 AD00           05343          BTFSS  SSR_00_FLAGS+14,    FADE_DOWN, BANKED
0019C6 D???           05344          BRA    END_FADE_14
0019C8 2F00           05345          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay
0019CA D???           05346          BRA    END_FADE_14
0019CC C??? F???      05347          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14; reset delay
0019D0 5100           05348          MOVF   SSR_00_STEP+14,    W, BANKED
0019D2 5F00           05349          SUBWF  SSR_00_VALUE+14,    F, BANKED
0019D4 E2??           05350          BC     END_FADE_14
0019D6 6B00           05351          CLRF   SSR_00_VALUE+14,    BANKED              ; reached min value
0019D8 9D00           05352          BCF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   ; stop fading
0019DA BB00           05353          BTFSC  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
0019DC 8F00           05354          BSF    SSR_00_FLAGS+14,    FADE_UP, BANKED
0019DE B900           05355          BTFSC  SSR_00_FLAGS+14,    MAX_OFF_TIME, BANKED; maximizing off-time?
0019E0 6900           05356          SETF   SSR_00_COUNTER+14,    BANKED
                      05357 
0019E2                05358 END_FADE_14:
  0000000F            05359 X        ++
0019E2 1D00           05309          COMF   SSR_00_VALUE+15,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
0019E4 E1??           05311          BNZ    UPDATE_MIN_DIMMED_15
                      05312          IF X <= OUTPUT_CHAN_MAX
0019E6 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
0019E8 D???           05315          BRA    UPDATE_MIN_SKIP_15
                      05316 
0019EA                05317 UPDATE_MIN_DIMMED_15:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn off light
                      05320          ELSE
0019EA 828D           05321           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn off SSR
0019EC 6700           05322           TSTFSZ SSR_00_VALUE+15,    BANKED     ; is this SSR fully off?
0019EE 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
0019F0                05325 UPDATE_MIN_SKIP_15:
                      05326 
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0019F0 AF00           05327          BTFSS  SSR_00_FLAGS+15,    FADE_UP, BANKED
0019F2 D???           05328          BRA    TRY_DOWN_15
0019F4 2F00           05329          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay to next step
0019F6 D???           05330          BRA    END_FADE_15
0019F8 C??? F???      05331          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15
0019FC 5100           05332          MOVF   SSR_00_STEP+15,    W, BANKED
0019FE 2700           05333          ADDWF  SSR_00_VALUE+15,    F, BANKED
001A00 E3??           05334          BNC    END_FADE_15
001A02 6900           05335          SETF   SSR_00_VALUE+15,    BANKED              ; reached max value
001A04 9F00           05336          BCF    SSR_00_FLAGS+15,    FADE_UP, BANKED     ; stop fading
001A06 AB00           05337          BTFSS  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
001A08 D???           05338          BRA    END_FADE_15
001A0A 8D00           05339          BSF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   
001A0C D???           05340          BRA    END_FADE_15
                      05341 
001A0E                05342 TRY_DOWN_15:
001A0E AD00           05343          BTFSS  SSR_00_FLAGS+15,    FADE_DOWN, BANKED
001A10 D???           05344          BRA    END_FADE_15
001A12 2F00           05345          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay
001A14 D???           05346          BRA    END_FADE_15
001A16 C??? F???      05347          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15; reset delay
001A1A 5100           05348          MOVF   SSR_00_STEP+15,    W, BANKED
001A1C 5F00           05349          SUBWF  SSR_00_VALUE+15,    F, BANKED
001A1E E2??           05350          BC     END_FADE_15
001A20 6B00           05351          CLRF   SSR_00_VALUE+15,    BANKED              ; reached min value
001A22 9D00           05352          BCF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   ; stop fading
001A24 BB00           05353          BTFSC  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
001A26 8F00           05354          BSF    SSR_00_FLAGS+15,    FADE_UP, BANKED
001A28 B900           05355          BTFSC  SSR_00_FLAGS+15,    MAX_OFF_TIME, BANKED; maximizing off-time?
001A2A 6900           05356          SETF   SSR_00_COUNTER+15,    BANKED
                      05357 
001A2C                05358 END_FADE_15:
  00000010            05359 X        ++
001A2C 1D00           05309          COMF   SSR_00_VALUE+16,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001A2E E1??           05311          BNZ    UPDATE_MIN_DIMMED_16
                      05312          IF X <= OUTPUT_CHAN_MAX
001A30 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001A32 D???           05315          BRA    UPDATE_MIN_SKIP_16
                      05316 
001A34                05317 UPDATE_MIN_DIMMED_16:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn off light
                      05320          ELSE
001A34 808A           05321           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn off SSR
001A36 6700           05322           TSTFSZ SSR_00_VALUE+16,    BANKED     ; is this SSR fully off?
001A38 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001A3A                05325 UPDATE_MIN_SKIP_16:
                      05326 
001A3A AF00           05327          BTFSS  SSR_00_FLAGS+16,    FADE_UP, BANKED
001A3C D???           05328          BRA    TRY_DOWN_16
001A3E 2F00           05329          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay to next step
001A40 D???           05330          BRA    END_FADE_16
001A42 C??? F???      05331          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16
001A46 5100           05332          MOVF   SSR_00_STEP+16,    W, BANKED
001A48 2700           05333          ADDWF  SSR_00_VALUE+16,    F, BANKED
001A4A E3??           05334          BNC    END_FADE_16
001A4C 6900           05335          SETF   SSR_00_VALUE+16,    BANKED              ; reached max value
001A4E 9F00           05336          BCF    SSR_00_FLAGS+16,    FADE_UP, BANKED     ; stop fading
001A50 AB00           05337          BTFSS  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
001A52 D???           05338          BRA    END_FADE_16
001A54 8D00           05339          BSF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   
001A56 D???           05340          BRA    END_FADE_16
                      05341 
001A58                05342 TRY_DOWN_16:
001A58 AD00           05343          BTFSS  SSR_00_FLAGS+16,    FADE_DOWN, BANKED
001A5A D???           05344          BRA    END_FADE_16
001A5C 2F00           05345          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay
001A5E D???           05346          BRA    END_FADE_16
001A60 C??? F???      05347          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16; reset delay
001A64 5100           05348          MOVF   SSR_00_STEP+16,    W, BANKED
001A66 5F00           05349          SUBWF  SSR_00_VALUE+16,    F, BANKED
001A68 E2??           05350          BC     END_FADE_16
001A6A 6B00           05351          CLRF   SSR_00_VALUE+16,    BANKED              ; reached min value
001A6C 9D00           05352          BCF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   ; stop fading
001A6E BB00           05353          BTFSC  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
001A70 8F00           05354          BSF    SSR_00_FLAGS+16,    FADE_UP, BANKED
001A72 B900           05355          BTFSC  SSR_00_FLAGS+16,    MAX_OFF_TIME, BANKED; maximizing off-time?
001A74 6900           05356          SETF   SSR_00_COUNTER+16,    BANKED
                      05357 
001A76                05358 END_FADE_16:
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000011            05359 X        ++
001A76 1D00           05309          COMF   SSR_00_VALUE+17,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001A78 E1??           05311          BNZ    UPDATE_MIN_DIMMED_17
                      05312          IF X <= OUTPUT_CHAN_MAX
001A7A 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001A7C D???           05315          BRA    UPDATE_MIN_SKIP_17
                      05316 
001A7E                05317 UPDATE_MIN_DIMMED_17:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn off light
                      05320          ELSE
001A7E 868C           05321           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn off SSR
001A80 6700           05322           TSTFSZ SSR_00_VALUE+17,    BANKED     ; is this SSR fully off?
001A82 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001A84                05325 UPDATE_MIN_SKIP_17:
                      05326 
001A84 AF00           05327          BTFSS  SSR_00_FLAGS+17,    FADE_UP, BANKED
001A86 D???           05328          BRA    TRY_DOWN_17
001A88 2F00           05329          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay to next step
001A8A D???           05330          BRA    END_FADE_17
001A8C C??? F???      05331          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17
001A90 5100           05332          MOVF   SSR_00_STEP+17,    W, BANKED
001A92 2700           05333          ADDWF  SSR_00_VALUE+17,    F, BANKED
001A94 E3??           05334          BNC    END_FADE_17
001A96 6900           05335          SETF   SSR_00_VALUE+17,    BANKED              ; reached max value
001A98 9F00           05336          BCF    SSR_00_FLAGS+17,    FADE_UP, BANKED     ; stop fading
001A9A AB00           05337          BTFSS  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
001A9C D???           05338          BRA    END_FADE_17
001A9E 8D00           05339          BSF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   
001AA0 D???           05340          BRA    END_FADE_17
                      05341 
001AA2                05342 TRY_DOWN_17:
001AA2 AD00           05343          BTFSS  SSR_00_FLAGS+17,    FADE_DOWN, BANKED
001AA4 D???           05344          BRA    END_FADE_17
001AA6 2F00           05345          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay
001AA8 D???           05346          BRA    END_FADE_17
001AAA C??? F???      05347          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17; reset delay
001AAE 5100           05348          MOVF   SSR_00_STEP+17,    W, BANKED
001AB0 5F00           05349          SUBWF  SSR_00_VALUE+17,    F, BANKED
001AB2 E2??           05350          BC     END_FADE_17
001AB4 6B00           05351          CLRF   SSR_00_VALUE+17,    BANKED              ; reached min value
001AB6 9D00           05352          BCF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   ; stop fading
001AB8 BB00           05353          BTFSC  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
001ABA 8F00           05354          BSF    SSR_00_FLAGS+17,    FADE_UP, BANKED
001ABC B900           05355          BTFSC  SSR_00_FLAGS+17,    MAX_OFF_TIME, BANKED; maximizing off-time?
001ABE 6900           05356          SETF   SSR_00_COUNTER+17,    BANKED
                      05357 
001AC0                05358 END_FADE_17:
  00000012            05359 X        ++
001AC0 1D00           05309          COMF   SSR_00_VALUE+18,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001AC2 E1??           05311          BNZ    UPDATE_MIN_DIMMED_18
                      05312          IF X <= OUTPUT_CHAN_MAX
001AC4 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001AC6 D???           05315          BRA    UPDATE_MIN_SKIP_18
                      05316 
001AC8                05317 UPDATE_MIN_DIMMED_18:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn off light
                      05320          ELSE
001AC8 828C           05321           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn off SSR
001ACA 6700           05322           TSTFSZ SSR_00_VALUE+18,    BANKED     ; is this SSR fully off?
001ACC 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001ACE                05325 UPDATE_MIN_SKIP_18:
                      05326 
001ACE AF00           05327          BTFSS  SSR_00_FLAGS+18,    FADE_UP, BANKED
001AD0 D???           05328          BRA    TRY_DOWN_18
001AD2 2F00           05329          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay to next step
001AD4 D???           05330          BRA    END_FADE_18
001AD6 C??? F???      05331          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18
001ADA 5100           05332          MOVF   SSR_00_STEP+18,    W, BANKED
001ADC 2700           05333          ADDWF  SSR_00_VALUE+18,    F, BANKED
001ADE E3??           05334          BNC    END_FADE_18
001AE0 6900           05335          SETF   SSR_00_VALUE+18,    BANKED              ; reached max value
001AE2 9F00           05336          BCF    SSR_00_FLAGS+18,    FADE_UP, BANKED     ; stop fading
001AE4 AB00           05337          BTFSS  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
001AE6 D???           05338          BRA    END_FADE_18
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001AE8 8D00           05339          BSF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   
001AEA D???           05340          BRA    END_FADE_18
                      05341 
001AEC                05342 TRY_DOWN_18:
001AEC AD00           05343          BTFSS  SSR_00_FLAGS+18,    FADE_DOWN, BANKED
001AEE D???           05344          BRA    END_FADE_18
001AF0 2F00           05345          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay
001AF2 D???           05346          BRA    END_FADE_18
001AF4 C??? F???      05347          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18; reset delay
001AF8 5100           05348          MOVF   SSR_00_STEP+18,    W, BANKED
001AFA 5F00           05349          SUBWF  SSR_00_VALUE+18,    F, BANKED
001AFC E2??           05350          BC     END_FADE_18
001AFE 6B00           05351          CLRF   SSR_00_VALUE+18,    BANKED              ; reached min value
001B00 9D00           05352          BCF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   ; stop fading
001B02 BB00           05353          BTFSC  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
001B04 8F00           05354          BSF    SSR_00_FLAGS+18,    FADE_UP, BANKED
001B06 B900           05355          BTFSC  SSR_00_FLAGS+18,    MAX_OFF_TIME, BANKED; maximizing off-time?
001B08 6900           05356          SETF   SSR_00_COUNTER+18,    BANKED
                      05357 
001B0A                05358 END_FADE_18:
  00000013            05359 X        ++
001B0A 1D00           05309          COMF   SSR_00_VALUE+19,    W, BANKED   ; is this set to maximum?
                      05310          ;BZ    UPDATE_MIN_SKIP_#v(X)
001B0C E1??           05311          BNZ    UPDATE_MIN_DIMMED_19
                      05312          IF X <= OUTPUT_CHAN_MAX
001B0E 9800           05313           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05314          ENDIF
001B10 D???           05315          BRA    UPDATE_MIN_SKIP_19
                      05316 
001B12                05317 UPDATE_MIN_DIMMED_19:
                      05318          IF X > OUTPUT_CHAN_MAX
                      05319           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn off light
                      05320          ELSE
001B12 848C           05321           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn off SSR
001B14 6700           05322           TSTFSZ SSR_00_VALUE+19,    BANKED     ; is this SSR fully off?
001B16 9800           05323           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05324          ENDIF
001B18                05325 UPDATE_MIN_SKIP_19:
                      05326 
001B18 AF00           05327          BTFSS  SSR_00_FLAGS+19,    FADE_UP, BANKED
001B1A D???           05328          BRA    TRY_DOWN_19
001B1C 2F00           05329          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay to next step
001B1E D???           05330          BRA    END_FADE_19
001B20 C??? F???      05331          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19
001B24 5100           05332          MOVF   SSR_00_STEP+19,    W, BANKED
001B26 2700           05333          ADDWF  SSR_00_VALUE+19,    F, BANKED
001B28 E3??           05334          BNC    END_FADE_19
001B2A 6900           05335          SETF   SSR_00_VALUE+19,    BANKED              ; reached max value
001B2C 9F00           05336          BCF    SSR_00_FLAGS+19,    FADE_UP, BANKED     ; stop fading
001B2E AB00           05337          BTFSS  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
001B30 D???           05338          BRA    END_FADE_19
001B32 8D00           05339          BSF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   
001B34 D???           05340          BRA    END_FADE_19
                      05341 
001B36                05342 TRY_DOWN_19:
001B36 AD00           05343          BTFSS  SSR_00_FLAGS+19,    FADE_DOWN, BANKED
001B38 D???           05344          BRA    END_FADE_19
001B3A 2F00           05345          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay
001B3C D???           05346          BRA    END_FADE_19
001B3E C??? F???      05347          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19; reset delay
001B42 5100           05348          MOVF   SSR_00_STEP+19,    W, BANKED
001B44 5F00           05349          SUBWF  SSR_00_VALUE+19,    F, BANKED
001B46 E2??           05350          BC     END_FADE_19
001B48 6B00           05351          CLRF   SSR_00_VALUE+19,    BANKED              ; reached min value
001B4A 9D00           05352          BCF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   ; stop fading
001B4C BB00           05353          BTFSC  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
001B4E 8F00           05354          BSF    SSR_00_FLAGS+19,    FADE_UP, BANKED
001B50 B900           05355          BTFSC  SSR_00_FLAGS+19,    MAX_OFF_TIME, BANKED; maximizing off-time?
001B52 6900           05356          SETF   SSR_00_COUNTER+19,    BANKED
                      05357 
001B54                05358 END_FADE_19:
  00000014            05359 X        ++
                      05360         ENDW
001B54 9E00           05361         BCF     SSR_STATE, INCYC, ACCESS        ; shut down slice processing until next ZC
                      05362         ;
                      05363         ; see if we should be asleep
                      05364         ;
001B56 A800           05365         BTFSS   SSR_STATE2, ALL_OFF, ACCESS
001B58 D???           05366         BRA     BE_AWAKE_NOW
001B5A 2E00           05367         DECFSZ  AUTO_OFF_CTRL, F, ACCESS        
001B5C 0012           05368         RETURN
001B5E 6800           05369         SETF    AUTO_OFF_CTRL, ACCESS
001B60 2E00           05370         DECFSZ  AUTO_OFF_CTRH, F, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B62 0012           05371         RETURN
                      05372         ; 
                      05373         ; We've been idle too long.  Go to sleep now.
                      05374         ;
001B64 A600           05375         BTFSS   SSR_STATE, SLEEP_MODE, ACCESS
001B66 EC?? F???      05376         CALL    DO_CMD_SLEEP
001B6A 0012           05377         RETURN
                      05378         
001B6C                05379 BE_AWAKE_NOW:
                      05380         ;
                      05381         ; we should be awake.  Make sure we are and reset counters
                      05382         ;
001B6C B600           05383         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
001B6E EC?? F???      05384         CALL    DO_CMD_WAKE
001B72 6800           05385         SETF    AUTO_OFF_CTRH, ACCESS
001B74 6800           05386         SETF    AUTO_OFF_CTRL, ACCESS
001B76 0012           05387         RETURN
                      05388 
                      05389 
                      05390 
                      05391 ; DMX512 RECEIVER CODE
                      05392 ; Based on Microchip Application Note AN1076
                      05393 ;
                      05394 
                      05395 ;
                      05396 ; If we have DMX mode running but need to shift to Lumos protocol
                      05397 ; (like entering config mode), we need to reset the baud rate to
                      05398 ; whatever is configured for non-DMX use.
                      05399 ;
001B78                05400 DMX_EXIT_TEMPORARILY:
001B78 0004           05401         CLRWDT
001B7A AC00           05402         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
001B7C 0012           05403         RETURN
                      05404         BEGIN_EEPROM_READ EE_BAUD
001B7E 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
001B80 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_BAUD     ; NOTE interrupts need to be OFF here!
001B82 0E00               M          MOVLW  HIGH(EE_BAUD)           ; NOTE interrupts need to be OFF here!
001B84 6EAA               M          MOVWF  EEADRH, ACCESS
001B86 0E01               M          MOVLW  LOW(EE_BAUD)
001B88 6EA9               M          MOVWF  EEADR, ACCESS
001B8A 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
001B8C 9CA6               M          BCF    EECON1, CFGS, ACCESS
001B8E 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
                      05405         READ_EEPROM_DATA_W
                          M         READ_EEPROM_DATA
001B90 80A6               M         BSF     EECON1, RD, ACCESS
001B92 CFA8 FFE8          M         MOVFF   EEDATA, WREG
                      05406         END_EEPROM_READ
001B96 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
001B98 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
001B9A 6AAA               M          CLRF   EEADRH, ACCESS
001B9C 6AA9               M          CLRF   EEADR, ACCESS
                      05407         IF ROLE_MASTER
                      05408          ; Send F0 72 <baud> 26 -> slave CPU
                      05409          MOVWF  I, ACCESS
                      05410          MOVLW  0xF0
                      05411          CALL   SIO_WRITE_W
                      05412          MOVLW  0x72
                      05413          CALL   SIO_WRITE_W
                      05414          MOVF   I, W, ACCESS
                      05415          CALL   SIO_WRITE_W
                      05416          MOVLW  0x26
                      05417          CALL   SIO_WRITE_W
                      05418          CALL   DRAIN_M_S_TX_BLOCKING
                      05419          MOVF   I, W, ACCESS
                      05420         ENDIF
001B9E EC?? F???      05421         CALL    SIO_SET_BAUD_W
001BA2 9C00           05422         BCF     DMX_SLOTH, DMX_SPEED, ACCESS    ; no longer running at DMX speeds
001BA4 0012           05423         RETURN
                      05424 
001BA6                05425 DMX_RESUME:
001BA6 0004           05426         CLRWDT
001BA8 BE00           05427         BTFSC   DMX_SLOTH, DMX_EN, ACCESS
001BAA BC00           05428         BTFSC   DMX_SLOTH, DMX_SPEED, ACCESS
001BAC 0012           05429         RETURN                                  ; either not using DMX at all or already at speed
                      05430         IF ROLE_MASTER
                      05431          ; Send F0 72 <baud> 26 -> slave CPU
                      05432          MOVLW  0xF0
                      05433          CALL   SIO_WRITE_W
                      05434          MOVLW  0x72
                      05435          CALL   SIO_WRITE_W
                      05436          MOVLW  SIO_250000
                      05437          CALL   SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05438          MOVLW  0x26
                      05439          CALL   SIO_WRITE_W
                      05440          CALL   DRAIN_M_S_TX_BLOCKING
                      05441         ENDIF
001BAE 0E0A           05442         MOVLW   SIO_250000
001BB0 EC?? F???      05443         CALL    SIO_SET_BAUD_W
001BB4 8C00           05444         BSF     DMX_SLOTH, DMX_SPEED, ACCESS    ; now at DMX speed
001BB6 0012           05445         RETURN
                      05446         
                      05447 ;
                      05448 ; Wait for start of packet
                      05449 ;
                      05450 ;DMX_WAIT_FOR_SYNC:
                      05451 ;       BTFSC   PIR1, RCIF, ACCESS
                      05452 ;       MOVF    RCREG, W, ACCESS        ; throw away received bytes until start of frame
                      05453 ;       BTFSS   RCSTA, FERR, ACCESS     ; wait until frame error
                      05454 ;       BRA     DMX_WAIT_FOR_SYNC
                      05455 ;       MOVF    RCREG, W, ACCESS        ; clear receive buffer
                      05456 ;DMX_WAIT_FOR_START:
                      05457 ;       BTFSS   PIR1, RCIF, ACCESS
                      05458 ;       BRA     DMX_WAIT_FOR_START      ; wait for actual characters to start
                      05459 ;       BTFSC   RCSTA, FERR, ACCESS     ; and break to end
                      05460 ;       BRA     DMX_WAIT_FOR_START
                      05461 ;       MOVF    RCREG, W, ACCESS
                      05462 ;       ANDLW   0xFF                    ; test byte just read, should be 0x00
                      05463 ;       BNZ     DMX_WAIT_FOR_SYNC       ; done here, come back when ready for next packet
                      05464 
                      05465         ; XXX now loop over bytes, aborting on FERR (indicates packet was short)
                      05466         ; or when your data have been received.
                      05467 
001BB8                05468 DMX_RECEIVED_BYTE:
001BB8 0004           05469         CLRWDT
                      05470         ;
                      05471         ; We just got a DMX byte.  IF DMX_FRAME is set, this is supposedly the start of
                      05472         ; a new frame, so any previous frame in progress is aborted.  The state machine
                      05473         ; in DMX mode is simply:
                      05474         ;       00 IDLE;     waiting for start of frame
                      05475         ;       17 DMX_WAIT; waiting for first slot for this device
                      05476         ;       18 DMX_UPD;  updating channels
                      05477         ;
001BBA AA00           05478         BTFSS   DMX_SLOTH, DMX_FRAME, ACCESS
001BBC D???           05479         BRA     DMX_NOT_FIRST
001BBE 9A00           05480         BCF     DMX_SLOTH, DMX_FRAME, ACCESS    ; clear start-of-frame signal
                      05481         ;
                      05482         ; Start of frame
                      05483         ; The first byte received is in WREG.  If this is 0x00, we need to pay
                      05484         ; attention to this frame.  Otherwise, it's something foreign we can ignore.
                      05485         ;
001BC0 66E8           05486         TSTFSZ  WREG, ACCESS
001BC2 D???           05487         BRA     DMX_WEIRD_FRAME
001BC4 0E17           05488         MOVLW   0x17                            ; start of frame -> state 17
001BC6 6E00           05489         MOVWF   YY_STATE, ACCESS
001BC8 C??? F???      05490         MOVFF   DMX_SLOTL, YY_YY                ; YY_COMMAND:YY_YY is the number of slots
001BCC 6A00           05491         CLRF    YY_COMMAND, ACCESS              ; to skip before we get to ours
001BCE B000           05492         BTFSC   DMX_SLOTH, DMX_BIT8, ACCESS
001BD0 8000           05493         BSF     YY_COMMAND, 0, ACCESS
001BD2 0012           05494         RETURN
                      05495 
001BD4                05496 DMX_WEIRD_FRAME:
                      05497         IF HAS_STATUS_LEDS
                      05498          SET_SSR_BLINK_FADE SSR_RED
                      05499         ENDIF
001BD4 6A00           05500         CLRF    YY_STATE, ACCESS                ; stay at state 0, wait for next frame.
001BD6 0012           05501         RETURN
                      05502 
001BD8                05503 DMX_NOT_FIRST:
001BD8 6E00           05504         MOVWF   YY_DATA, ACCESS                 ; save input byte in YY_DATA
001BDA 0E17           05505         MOVLW   0x17                            ; are we at state 17?
001BDC 6200           05506         CPFSEQ  YY_STATE, ACCESS
001BDE D???           05507         BRA     DMX_18
                      05508         ;
                      05509         ; State 17: waiting for our slot to come up
                      05510         ;
                      05511         IF HAS_STATUS_LEDS
                      05512          SET_SSR_BLINK_FADE SSR_YELLOW
                      05513         ENDIF
001BE0 6600           05514         TSTFSZ  YY_YY, ACCESS                   ; count off another slot...
001BE2 D???           05515         BRA     DMX_ST_LSB
001BE4 A000           05516         BTFSS   YY_COMMAND, 0, ACCESS
001BE6 D???           05517         BRA     DMX_SLOT_REACHED
001BE8 9000           05518         BCF     YY_COMMAND, 0, ACCESS           ; borrow 1 and roll over
001BEA                05519 DMX_ST_LSB:
001BEA 0600           05520         DECF    YY_YY, F, ACCESS
001BEC 0012           05521         RETURN
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05522 
001BEE                05523 DMX_SLOT_REACHED:
                      05524         ;
                      05525         ; We have waited long enough, we're up now!
                      05526         ;
001BEE 2A00           05527         INCF    YY_STATE, F, ACCESS             ; move state 17->18 (note YY_YY==0 now)
                      05528 
001BF0                05529 DMX_18:
001BF0 0004           05530         CLRWDT
                      05531         IF HAS_ACTIVE
                      05532          SET_SSR_BLINK_FADE SSR_ACTIVE
                      05533         ENDIF
001BF2 0E18           05534         MOVLW   0x18
001BF4 6200           05535         CPFSEQ  YY_STATE, ACCESS
001BF6 D???           05536         BRA     DMX_19
                      05537         ;
                      05538         ; State 18: updating slot value YY_DATA into channel YY_YY.
                      05539         ;
001BF8 C??? F???      05540         MOVFF   YY_DATA, YY_COMMAND
001BFC C??? F???      05541         MOVFF   YY_YY, YY_DATA
001C00 2A00           05542         INCF    YY_YY, F, ACCESS
001C02 EC?? F???      05543         CALL    XLATE_SSR_ID
001C06 BC00           05544         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
001C08 D???           05545         BRA     DMX_DONE
001C0A C??? F???      05546         MOVFF   YY_COMMAND, YY_DATA
001C0E BE00           05547         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
001C10 D???           05548         BRA     DMX_PASS_DOWN_SET_LVL
001C12 EF?? F???      05549         GOTO    SSR_OUTPUT_VALUE ; TARGET_SSR <- YY_DATA
                      05550 
001C16                05551 DMX_PASS_DOWN_SET_LVL:
                      05552         IF ROLE_MASTER
                      05553          MOVLW  0xA0
                      05554          CALL   SIO_WRITE_W
                      05555          BCF    TARGET_SSR, 7, ACCESS
                      05556          BCF    TARGET_SSR, 6, ACCESS
                      05557          BCF    STATUS, C, ACCESS
                      05558          RRCF   YY_DATA, F, ACCESS
                      05559          BTFSC  STATUS, C, ACCESS
                      05560          BSF    TARGET_SSR, 6, ACCESS   ; LSB of value
                      05561          MOVF   TARGET_SSR, W, ACCESS
                      05562          SEND_8_BIT_W
                      05563          MOVF   YY_DATA, W, ACCESS
                      05564          SEND_8_BIT_W
                      05565          IF HAS_STATUS_LEDS
                      05566           SET_SSR_BLINK_FADE SSR_YELLOW
                      05567          ENDIF
                      05568          RETURN
                      05569         ELSE
                      05570          ERR_BUG 0x02, ERR_CLASS_IN_VALID
001C16 0E02               M          MOVLW  0x02
001C18 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001C1A 6A00               M          CLRF   YY_STATE, ACCESS
001C1C 0012               M          RETURN
                      05571         ENDIF
                      05572          
001C1E                05573 DMX_DONE:
                      05574         ;
                      05575         ; reached the end of our range of slots
                      05576         ;
001C1E 6A00           05577         CLRF    YY_STATE, ACCESS
001C20 0012           05578         RETURN
                      05579 
001C22                05580 DMX_19:
                      05581         ;
                      05582         ; unknown state!  Force return to idle state
                      05583         ;
001C22 6A00           05584         CLRF    YY_STATE, ACCESS
001C24 0012           05585         RETURN
                      05586         
001C26                05587 HALT_MODE:
                      05588         ;
                      05589         ; Shut down forever
                      05590         ;
001C26 EC?? F???      05591         CALL    S0_CMD0                 ; blackout SSR outputs
001C2A 9EF2           05592         BCF     INTCON, GIEH, ACCESS            ; disable high-priority interrupts
001C2C 9CF2           05593         BCF     INTCON, GIEL, ACCESS            ; disable low-priority interrupts
                      05594         IF HAS_STATUS_LEDS
                      05595          BSF    PLAT_RED, BIT_RED, ACCESS       ; set only RED light
                      05596          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      05597          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      05598          IF HAS_ACTIVE
                      05599           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      05600          ENDIF
                      05601         ENDIF
001C2E 0E73           05602         MOVLW   b'01110011'                     ; Set oscillator mode for our long slumber
                      05603                 ; 0-------                      ; ~IDLEN enter SLEEP mode, not an idle mode
                      05604                 ; -111----                      ;  IRCF=7 select 8 MHz internal clock speed
                      05605                 ; ------11                      ;  SCS=3 system clock is now internal oscillator
001C30 6ED3           05606         MOVWF   OSCCON, ACCESS
001C32 80D1           05607         BSF     WDTCON, SWDTEN, ACCESS          ; make sure WDT is enabled
001C34                05608 HALT_SLEEP:
001C34 0004           05609         CLRWDT
001C36 0003           05610         SLEEP
                      05611         ; when we wake up from WDT, flashes red light briefly
                      05612         IF HAS_STATUS_LEDS
                      05613          BSF    PLAT_RED, BIT_RED, ACCESS
                      05614          CALL   DELAY_1_6_SEC                   ; 1/6 sec
                      05615          BCF    PLAT_RED, BIT_RED, ACCESS
                      05616         ENDIF
001C38 D???           05617         BRA     HALT_SLEEP
                      05618 
                      05619 
001C3A                05620 TR_ON_DELAY:
001C3A 6800           05621         SETF    TR_I, ACCESS
001C3C 0004           05622 TR_ON_L CLRWDT
001C3E 2E00           05623         DECFSZ  TR_I, F, ACCESS
001C40 D???           05624         BRA     TR_ON_L
001C42 0012           05625         RETURN
                      05626 
001C44                05627 TR_OFF_DELAY:
001C44 D???           05628         BRA     TR_ON_DELAY
                      05629         END
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 113


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABAT                              00000004
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ALL_OFF                           00000004
AN0                               00000000
AN1                               00000001
AN10                              00000000
AN2                               00000002
AN3                               00000003
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
AN8                               00000001
AN9                               00000004
AUTO_OFF_CTRH                     0000001C
AUTO_OFF_CTRL                     0000001D
B0CON                             00000E20
B0D0                              00000E26
B0D00                             00000000
B0D01                             00000001
B0D02                             00000002
B0D03                             00000003
B0D04                             00000004
B0D05                             00000005
B0D06                             00000006
B0D07                             00000007
B0D1                              00000E27
B0D10                             00000000
B0D11                             00000001
B0D12                             00000002
B0D13                             00000003
B0D14                             00000004
B0D15                             00000005
B0D16                             00000006
B0D17                             00000007
B0D2                              00000E28
B0D20                             00000000
B0D21                             00000001
B0D22                             00000002
B0D23                             00000003
B0D24                             00000004
B0D25                             00000005
B0D26                             00000006
B0D27                             00000007
B0D3                              00000E29
B0D30                             00000000
B0D31                             00000001
B0D32                             00000002
B0D33                             00000003
B0D34                             00000004
B0D35                             00000005
B0D36                             00000006
B0D37                             00000007
B0D4                              00000E2A
B0D40                             00000000
B0D41                             00000001
B0D42                             00000002
B0D43                             00000003
B0D44                             00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 114


SYMBOL TABLE
  LABEL                             VALUE 

B0D45                             00000005
B0D46                             00000006
B0D47                             00000007
B0D5                              00000E2B
B0D50                             00000000
B0D51                             00000001
B0D52                             00000002
B0D53                             00000003
B0D54                             00000004
B0D55                             00000005
B0D56                             00000006
B0D57                             00000007
B0D6                              00000E2C
B0D60                             00000000
B0D61                             00000001
B0D62                             00000002
B0D63                             00000003
B0D64                             00000004
B0D65                             00000005
B0D66                             00000006
B0D67                             00000007
B0D7                              00000E2D
B0D70                             00000000
B0D71                             00000001
B0D72                             00000002
B0D73                             00000003
B0D74                             00000004
B0D75                             00000005
B0D76                             00000006
B0D77                             00000007
B0DLC                             00000E25
B0EIDH                            00000E23
B0EIDL                            00000E24
B0IE                              00000002
B0SIDH                            00000E21
B0SIDL                            00000E22
B0TXEN                            00000002
B1CON                             00000E30
B1D0                              00000E36
B1D00                             00000000
B1D01                             00000001
B1D02                             00000002
B1D03                             00000003
B1D04                             00000004
B1D05                             00000005
B1D06                             00000006
B1D07                             00000007
B1D1                              00000E37
B1D10                             00000000
B1D11                             00000001
B1D12                             00000002
B1D13                             00000003
B1D14                             00000004
B1D15                             00000005
B1D16                             00000006
B1D17                             00000007
B1D2                              00000E38
B1D20                             00000000
B1D21                             00000001
B1D22                             00000002
B1D23                             00000003
B1D24                             00000004
B1D25                             00000005
B1D26                             00000006
B1D27                             00000007
B1D3                              00000E39
B1D30                             00000000
B1D31                             00000001
B1D32                             00000002
B1D33                             00000003
B1D34                             00000004
B1D35                             00000005
B1D36                             00000006
B1D37                             00000007
B1D4                              00000E3A
B1D40                             00000000
B1D41                             00000001
B1D42                             00000002
B1D43                             00000003
B1D44                             00000004
B1D45                             00000005
B1D46                             00000006
B1D47                             00000007
B1D5                              00000E3B
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 115


SYMBOL TABLE
  LABEL                             VALUE 

B1D50                             00000000
B1D51                             00000001
B1D52                             00000002
B1D53                             00000003
B1D54                             00000004
B1D55                             00000005
B1D56                             00000006
B1D57                             00000007
B1D6                              00000E3C
B1D60                             00000000
B1D61                             00000001
B1D62                             00000002
B1D63                             00000003
B1D64                             00000004
B1D65                             00000005
B1D66                             00000006
B1D67                             00000007
B1D7                              00000E3D
B1D70                             00000000
B1D71                             00000001
B1D72                             00000002
B1D73                             00000003
B1D74                             00000004
B1D75                             00000005
B1D76                             00000006
B1D77                             00000007
B1DLC                             00000E35
B1EIDH                            00000E33
B1EIDL                            00000E34
B1IE                              00000003
B1SIDH                            00000E31
B1SIDL                            00000E32
B1TXEN                            00000003
B2CON                             00000E40
B2D0                              00000E46
B2D00                             00000000
B2D01                             00000001
B2D02                             00000002
B2D03                             00000003
B2D04                             00000004
B2D05                             00000005
B2D06                             00000006
B2D07                             00000007
B2D1                              00000E47
B2D10                             00000000
B2D11                             00000001
B2D12                             00000002
B2D13                             00000003
B2D14                             00000004
B2D15                             00000005
B2D16                             00000006
B2D17                             00000007
B2D2                              00000E48
B2D20                             00000000
B2D21                             00000001
B2D22                             00000002
B2D23                             00000003
B2D24                             00000004
B2D25                             00000005
B2D26                             00000006
B2D27                             00000007
B2D3                              00000E49
B2D30                             00000000
B2D31                             00000001
B2D32                             00000002
B2D33                             00000003
B2D34                             00000004
B2D35                             00000005
B2D36                             00000006
B2D37                             00000007
B2D4                              00000E4A
B2D40                             00000000
B2D41                             00000001
B2D42                             00000002
B2D43                             00000003
B2D44                             00000004
B2D45                             00000005
B2D46                             00000006
B2D47                             00000007
B2D5                              00000E4B
B2D50                             00000000
B2D51                             00000001
B2D52                             00000002
B2D53                             00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 116


SYMBOL TABLE
  LABEL                             VALUE 

B2D54                             00000004
B2D55                             00000005
B2D56                             00000006
B2D57                             00000007
B2D6                              00000E4C
B2D60                             00000000
B2D61                             00000001
B2D62                             00000002
B2D63                             00000003
B2D64                             00000004
B2D65                             00000005
B2D66                             00000006
B2D67                             00000007
B2D7                              00000E4D
B2D70                             00000000
B2D71                             00000001
B2D72                             00000002
B2D73                             00000003
B2D74                             00000004
B2D75                             00000005
B2D76                             00000006
B2D77                             00000007
B2DLC                             00000E45
B2EIDH                            00000E43
B2EIDL                            00000E44
B2IE                              00000004
B2SIDH                            00000E41
B2SIDL                            00000E42
B2TXEN                            00000004
B32__BCD2ASCII                    00000000
B32__BCD_ASC                      00000000
B32__BIN                          00000000
B32__BIN2BCD                      00000000
B3CON                             00000E50
B3D0                              00000E56
B3D00                             00000000
B3D01                             00000001
B3D02                             00000002
B3D03                             00000003
B3D04                             00000004
B3D05                             00000005
B3D06                             00000006
B3D07                             00000007
B3D1                              00000E57
B3D10                             00000000
B3D11                             00000001
B3D12                             00000002
B3D13                             00000003
B3D14                             00000004
B3D15                             00000005
B3D16                             00000006
B3D17                             00000007
B3D2                              00000E58
B3D20                             00000000
B3D21                             00000001
B3D22                             00000002
B3D23                             00000003
B3D24                             00000004
B3D25                             00000005
B3D26                             00000006
B3D27                             00000007
B3D3                              00000E59
B3D30                             00000000
B3D31                             00000001
B3D32                             00000002
B3D33                             00000003
B3D34                             00000004
B3D35                             00000005
B3D36                             00000006
B3D37                             00000007
B3D4                              00000E5A
B3D40                             00000000
B3D41                             00000001
B3D42                             00000002
B3D43                             00000003
B3D44                             00000004
B3D45                             00000005
B3D46                             00000006
B3D47                             00000007
B3D5                              00000E5B
B3D50                             00000000
B3D51                             00000001
B3D52                             00000002
B3D53                             00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 117


SYMBOL TABLE
  LABEL                             VALUE 

B3D54                             00000004
B3D55                             00000005
B3D56                             00000006
B3D57                             00000007
B3D6                              00000E5C
B3D60                             00000000
B3D61                             00000001
B3D62                             00000002
B3D63                             00000003
B3D64                             00000004
B3D65                             00000005
B3D66                             00000006
B3D67                             00000007
B3D7                              00000E5D
B3D70                             00000000
B3D71                             00000001
B3D72                             00000002
B3D73                             00000003
B3D74                             00000004
B3D75                             00000005
B3D76                             00000006
B3D77                             00000007
B3DLC                             00000E55
B3EIDH                            00000E53
B3EIDL                            00000E54
B3IE                              00000005
B3SIDH                            00000E51
B3SIDL                            00000E52
B3TXEN                            00000005
B46D77                            00000007
B4CON                             00000E60
B4D0                              00000E66
B4D00                             00000000
B4D01                             00000001
B4D02                             00000002
B4D03                             00000003
B4D04                             00000004
B4D05                             00000005
B4D06                             00000006
B4D07                             00000007
B4D1                              00000E67
B4D10                             00000000
B4D11                             00000001
B4D12                             00000002
B4D13                             00000003
B4D14                             00000004
B4D15                             00000005
B4D16                             00000006
B4D17                             00000007
B4D2                              00000E68
B4D20                             00000000
B4D21                             00000001
B4D22                             00000002
B4D23                             00000003
B4D24                             00000004
B4D25                             00000005
B4D26                             00000006
B4D27                             00000007
B4D3                              00000E69
B4D30                             00000000
B4D31                             00000001
B4D32                             00000002
B4D33                             00000003
B4D34                             00000004
B4D35                             00000005
B4D36                             00000006
B4D37                             00000007
B4D4                              00000E6A
B4D40                             00000000
B4D41                             00000001
B4D42                             00000002
B4D43                             00000003
B4D44                             00000004
B4D45                             00000005
B4D46                             00000006
B4D47                             00000007
B4D5                              00000E6B
B4D50                             00000000
B4D51                             00000001
B4D52                             00000002
B4D53                             00000003
B4D54                             00000004
B4D55                             00000005
B4D56                             00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 118


SYMBOL TABLE
  LABEL                             VALUE 

B4D57                             00000007
B4D6                              00000E6C
B4D60                             00000000
B4D61                             00000001
B4D62                             00000002
B4D63                             00000003
B4D64                             00000004
B4D65                             00000005
B4D66                             00000006
B4D67                             00000007
B4D7                              00000E6D
B4D70                             00000000
B4D71                             00000001
B4D72                             00000002
B4D73                             00000003
B4D74                             00000004
B4D75                             00000005
B4D76                             00000006
B4D77                             00000007
B4DLC                             00000E65
B4EIDH                            00000E63
B4EIDL                            00000E64
B4IE                              00000006
B4SIDH                            00000E61
B4SIDL                            00000E62
B4TXEN                            00000006
B57D07                            00000007
B57D23                            00000003
B5CON                             00000E70
B5D0                              00000E76
B5D00                             00000000
B5D01                             00000001
B5D02                             00000002
B5D03                             00000003
B5D04                             00000004
B5D05                             00000005
B5D06                             00000006
B5D07                             00000007
B5D1                              00000E77
B5D10                             00000000
B5D11                             00000001
B5D12                             00000002
B5D13                             00000003
B5D14                             00000004
B5D15                             00000005
B5D16                             00000006
B5D17                             00000007
B5D2                              00000E78
B5D20                             00000000
B5D21                             00000001
B5D22                             00000002
B5D23                             00000003
B5D24                             00000004
B5D25                             00000005
B5D26                             00000006
B5D27                             00000007
B5D3                              00000E79
B5D30                             00000000
B5D31                             00000001
B5D32                             00000002
B5D33                             00000003
B5D34                             00000004
B5D35                             00000005
B5D36                             00000006
B5D37                             00000007
B5D4                              00000E7A
B5D40                             00000000
B5D41                             00000001
B5D42                             00000002
B5D43                             00000003
B5D44                             00000004
B5D45                             00000005
B5D46                             00000006
B5D47                             00000007
B5D5                              00000E7B
B5D50                             00000000
B5D51                             00000001
B5D52                             00000002
B5D53                             00000003
B5D54                             00000004
B5D55                             00000005
B5D56                             00000006
B5D57                             00000007
B5D6                              00000E7C
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 119


SYMBOL TABLE
  LABEL                             VALUE 

B5D60                             00000000
B5D61                             00000001
B5D62                             00000002
B5D63                             00000003
B5D64                             00000004
B5D65                             00000005
B5D66                             00000006
B5D67                             00000007
B5D7                              00000E7D
B5D70                             00000000
B5D71                             00000001
B5D72                             00000002
B5D73                             00000003
B5D74                             00000004
B5D75                             00000005
B5D76                             00000006
B5D77                             00000007
B5DLC                             00000E75
B5EIDH                            00000E73
B5EIDL                            00000E74
B5IE                              00000007
B5SIDH                            00000E71
B5SIDL                            00000E72
B5TXEN                            00000007
BAD_BREAK                         00000862
BANKED                            00000001
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BEGIN_EEPROM_READ                 
BEGIN_EEPROM_WRITE                
BE_AWAKE_NOW                      00001B6C
BF                                00000000
BGST                              00000005
BIE0                              00000DFA
BIT_0                             00000002
BIT_1                             00000001
BIT_10                            00000001
BIT_11                            00000000
BIT_12                            00000007
BIT_13                            00000006
BIT_14                            00000005
BIT_15                            00000001
BIT_16                            00000000
BIT_17                            00000003
BIT_18                            00000001
BIT_19                            00000002
BIT_2                             00000000
BIT_3                             00000002
BIT_4                             00000007
BIT_5                             00000006
BIT_6                             00000005
BIT_7                             00000004
BIT_8                             00000003
BIT_9                             00000002
BIT_FADE_CYCLE                    00000020
BIT_FADE_DOWN                     00000040
BIT_FADE_UP                       00000080
BIT_MAX_OFF_TIME                  00000010
BIT_RX                            00000007
BIT_T_R                           00000003
BOR                               00000000
BREAK_CONFIRMED                   0000084E
BRG16                             00000003
BRGCON1                           00000F70
BRGCON2                           00000F71
BRGCON3                           00000F72
BRGH                              00000002
BRK_DET                           00000828
BRK_DET2                          00000820
BRP0                              00000000
BRP1                              00000001
BRP2                              00000002
BRP3                              00000003
BRP4                              00000004
BRP5                              00000005
BSEL0                             00000DF8
BSR                               00000FE0
C                                 00000000
C1INA                             00000001
C1INB                             00000000
C1INV                             00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 120


SYMBOL TABLE
  LABEL                             VALUE 

C1OUT                             00000006
C2INA                             00000003
C2INB                             00000002
C2INV                             00000005
C2OUT                             00000007
CANCAP                            00000004
CANCON                            00000F6F
CANCON_RO0                        00000F5F
CANCON_RO1                        00000F4F
CANCON_RO2                        00000F3F
CANCON_RO3                        00000F2F
CANCON_RO4                        00000E7F
CANCON_RO5                        00000E6F
CANCON_RO6                        00000E5F
CANCON_RO7                        00000E4F
CANCON_RO8                        00000E3F
CANCON_RO9                        00000E2F
CANRX                             00000003
CANSTAT                           00000F6E
CANSTAT_RO0                       00000F5E
CANSTAT_RO1                       00000F4E
CANSTAT_RO2                       00000F3E
CANSTAT_RO3                       00000F2E
CANSTAT_RO4                       00000E7E
CANSTAT_RO5                       00000E6E
CANSTAT_RO6                       00000E5E
CANSTAT_RO7                       00000E4E
CANSTAT_RO8                       00000E3E
CANSTAT_RO9                       00000E2E
CANTX                             00000002
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CH                                00000014
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIOCON                            00000F73
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CLKI                              00000007
CLKO                              00000006
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMD_BIT                           00000007
CMD_XPRIV                         00001410
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
COMSTAT                           00000F74
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUR_PRE                           00000015
CUR_PREH                          00000014
CUR_SLICE                         00000016
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREF_CVRCON                      00000004
CVREF_PORTA                       00000000
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CYCLE_TMR_PERIOD                  00005D3D
D                                 00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 121


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DATA_BYTE                         00000A72
DB_CHK_7E                         00000A86
DB_CHK_7F                         00000A90
DB_CHK_LITERAL                    00000A7E
DB_HANDLER                        00000A9A
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEFAULT_TBL                       00014000
DELAY_1_12_SEC                    000002F2
DELAY_1_6_SEC                     000002FA
DFLC0                             00000000
DFLC1                             00000001
DFLC2                             00000002
DFLC3                             00000003
DFLC4                             00000004
DLC0                              00000000
DLC1                              00000001
DLC2                              00000002
DLC3                              00000003
DMX_18                            00001BF0
DMX_19                            00001C22
DMX_BIT8                          00000000
DMX_DONE                          00001C1E
DMX_EN                            00000007
DMX_EXIT_TEMPORARILY              00001B78
DMX_FRAME                         00000005
DMX_NOT_FIRST                     00001BD8
DMX_PASS_DOWN_SET_LVL             00001C16
DMX_RECEIVED_BYTE                 00001BB8
DMX_RESUME                        00001BA6
DMX_SLOTH                         00000008
DMX_SLOTL                         00000009
DMX_SLOT_REACHED                  00001BEE
DMX_SPEED                         00000006
DMX_ST_LSB                        00001BEA
DMX_WEIRD_FRAME                   00001BD4
DONE                              00000001
DO_CMD_SLEEP                      00000DD4
DO_CMD_WAKE                       00000DFE
DO_TEST_MODE                      000008AC
DRAIN_M_S_TX_BLOCKING             000008A4
DRAIN_TR                          00000002
DRAIN_TRANSMITTER                 0000088C
D_1_6_J                           00000302
D_1_6_K                           00000304
D_1_6_KK                          00000300
D_A                               00000005
D_FLASH                           00000102
D_NOT_A                           00000005
ECANCON                           00000F77
ECCP1                             00000004
ECCP1AS                           00000FB6
ECCP1CON                          00000FBA
ECCP1DEL                          00000FB7
ECCP1IE                           00000000
ECCP1IF                           00000000
ECCP1IP                           00000000
ECCP1M0                           00000000
ECCP1M1                           00000001
ECCP1M2                           00000002
ECCP1M3                           00000003
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
ECCPR1                            00000FBB
ECCPR1H                           00000FBC
ECCPR1L                           00000FBB
EDC1B0                            00000004
EDC1B1                            00000005
EEADR                             00000FA9
EEADRH                            00000FAA
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 122


SYMBOL TABLE
  LABEL                             VALUE 

EEIP                              00000004
EEPGD                             00000007
EEPROM_SETTINGS_LEN               00000010
EEPROM_USER_END                   000003FF
EEPROM_USER_START                 00000010
EE_BAUD                           00000001
EE_DEV_ID                         00000002
EE_DMX_H                          00000005
EE_DMX_L                          00000006
EE_END                            0000000F
EE_LL_XX                          00000007
EE_PHASE_H                        00000003
EE_PHASE_L                        00000004
EE_RESERVED_8                     00000008
EE_RESERVED_9                     00000009
EE_RESERVED_A                     0000000A
EE_RESERVED_B                     0000000B
EE_RESERVED_C                     0000000C
EE_RESERVED_D                     0000000D
EE_RESERVED_E                     0000000E
EE_SENSOR_CFG                     00000007
EE_START                          00000000
EICODE0                           00000000
EICODE1                           00000001
EICODE1_ICODE0                    00000001
EICODE2                           00000002
EICODE2_ICODE1                    00000002
EICODE3                           00000003
EICODE3_ICODE2                    00000003
EICODE4                           00000004
EID0                              00000000
EID1                              00000001
EID10                             00000002
EID11                             00000003
EID12                             00000004
EID13                             00000005
EID14                             00000006
EID15                             00000007
EID16                             00000000
EID17                             00000001
EID2                              00000002
EID3                              00000003
EID4                              00000004
EID5                              00000005
EID6                              00000006
EID7                              00000007
EID8                              00000000
EID9                              00000001
EIGHTBITSIOBUF                    0000001E
ENDRHI                            00000005
END_EEPROM_READ                   
END_EEPROM_WRITE                  
END_FADE_0                        000015D6
END_FADE_1                        00001620
END_FADE_10                       000018BA
END_FADE_11                       00001904
END_FADE_12                       0000194E
END_FADE_13                       00001998
END_FADE_14                       000019E2
END_FADE_15                       00001A2C
END_FADE_16                       00001A76
END_FADE_17                       00001AC0
END_FADE_18                       00001B0A
END_FADE_19                       00001B54
END_FADE_2                        0000166A
END_FADE_3                        000016B4
END_FADE_4                        000016FE
END_FADE_5                        00001748
END_FADE_6                        00001792
END_FADE_7                        000017DC
END_FADE_8                        00001826
END_FADE_9                        00001870
END_FRJC                          00000284
END_SERIAL_READ                   00000882
EPWM1M0                           00000006
EPWM1M1                           00000007
ERRIE                             00000005
ERRIF                             00000005
ERRIP                             00000005
ERR_ABORT                         0000091E
ERR_BUG                           
ERR_CLASS_DEVICE                  00000004
ERR_CLASS_FATAL_RESET             00000003
ERR_CLASS_INT_COMMAND             00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 123


SYMBOL TABLE
  LABEL                             VALUE 

ERR_CLASS_IN_VALID                00000002
ERR_CLASS_OVERRUN                 00000001
ERR_CMD_INCOMPLETE                0000090A
ERR_COMMAND                       0000091A
ERR_NOT_IMP                       00000912
ERR_SERIAL_FRAMING                000008F2
ERR_SERIAL_FULL                   00000902
ERR_SERIAL_OVERRUN                000008FC
EWARN                             00000000
EWIN0                             00000000
EWIN1                             00000001
EWIN2                             00000002
EWIN3                             00000003
EWIN4                             00000004
EXID                              00000003
EXIDE                             00000003
EXIDEN                            00000003
F                                 00000005
F0BP_0                            00000000
F0BP_1                            00000001
F0BP_2                            00000002
F0BP_3                            00000003
F10BP_0                           00000000
F10BP_1                           00000001
F10BP_2                           00000002
F10BP_3                           00000003
F11BP_0                           00000004
F11BP_1                           00000005
F11BP_2                           00000006
F11BP_3                           00000007
F12BP_0                           00000000
F12BP_1                           00000001
F12BP_2                           00000002
F12BP_3                           00000003
F13BP_0                           00000004
F13BP_1                           00000005
F13BP_2                           00000006
F13BP_3                           00000007
F14BP_0                           00000000
F14BP_1                           00000001
F14BP_2                           00000002
F14BP_3                           00000003
F15BP_0                           00000004
F15BP_1                           00000005
F15BP_2                           00000006
F15BP_3                           00000007
F1BP_0                            00000004
F1BP_1                            00000005
F1BP_2                            00000006
F1BP_3                            00000007
F2BP_0                            00000000
F2BP_1                            00000001
F2BP_2                            00000002
F2BP_3                            00000003
F3BP_0                            00000004
F3BP_1                            00000005
F3BP_2                            00000006
F3BP_3                            00000007
F4BP_0                            00000000
F4BP_1                            00000001
F4BP_2                            00000002
F4BP_3                            00000003
F5BP_0                            00000004
F5BP_1                            00000005
F5BP_2                            00000006
F5BP_3                            00000007
F6BP_0                            00000000
F6BP_1                            00000001
F6BP_2                            00000002
F6BP_3                            00000003
F7BP_0                            00000004
F7BP_1                            00000005
F7BP_2                            00000006
F7BP_3                            00000007
F8BP_0                            00000000
F8BP_1                            00000001
F8BP_2                            00000002
F8BP_3                            00000003
F9BP_0                            00000004
F9BP_1                            00000005
F9BP_2                            00000006
F9BP_3                            00000007
FACTORY_RESET                     00000298
FACTORY_RESET_FLASH               000002F0
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 124


SYMBOL TABLE
  LABEL                             VALUE 

FACTORY_RESET_JUMPER_CHECK        00000284
FACTORY_RESET_LOOP                000002BC
FADE_CYCLE                        00000005
FADE_DOWN                         00000006
FADE_UP                           00000007
FAST                              00000001
FERR                              00000002
FIFOEMPTY                         00000007
FIFOMWIE                          00000000
FIFOWM                            00000005
FIFOWMIE                          00000000
FIFOWMIF                          00000000
FIFOWMIP                          00000000
FIL0_0                            00000000
FIL0_1                            00000001
FIL10_0                           00000004
FIL10_1                           00000005
FIL11_0                           00000006
FIL11_1                           00000007
FIL12_0                           00000000
FIL12_1                           00000001
FIL13_0                           00000002
FIL13_1                           00000003
FIL14_0                           00000004
FIL14_1                           00000005
FIL15_0                           00000006
FIL15_1                           00000007
FIL1_0                            00000002
FIL1_1                            00000003
FIL2_0                            00000004
FIL2_1                            00000005
FIL3_0                            00000006
FIL3_1                            00000007
FIL4_0                            00000000
FIL4_1                            00000001
FIL5_0                            00000002
FIL5_1                            00000003
FIL6_0                            00000004
FIL6_1                            00000005
FIL7_0                            00000006
FIL7_1                            00000007
FIL8_0                            00000000
FIL8_1                            00000001
FIL9_0                            00000002
FIL9_1                            00000003
FILHIT0                           00000000
FILHIT0_TXPRI0                    00000000
FILHIT1                           00000001
FILHIT1_TXPRI1                    00000001
FILHIT2                           00000002
FILHIT2_RTREN                     00000002
FILHIT3                           00000003
FILHIT3_TXREQ                     00000003
FILHIT4                           00000004
FILHIT4_TXERR                     00000004
FLC0                              00000000
FLC1                              00000001
FLC2                              00000002
FLC3                              00000003
FLC4                              00000004
FLT0                              00000000
FP0                               00000000
FP1                               00000001
FP2                               00000002
FP3                               00000003
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HALT_MODE                         00001C26
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 125


SYMBOL TABLE
  LABEL                             VALUE 

HALT_SLEEP                        00001C34
HAS_ACTIVE                        00000000
HAS_OPTION                        00000000
HAS_POWER_CTRL                    00000000
HAS_SENSORS                       00000000
HAS_STATUS_LEDS                   00000000
HAS_T_R                           00000001
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
I                                 0000001F
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ICODE0                            00000000
ICODE1                            00000001
ICODE2                            00000002
ICODE3                            00000003
ICODE4                            00000004
IDLEN                             00000007
INCYC                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INHIBIT_OUTPUT                    00000002
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTERP_START                      00000942
INTSCR                            00000007
INTSRC                            00000007
INT_HIGH                          0000002A
INT_LOW                           00000000
INT_RX                            00000014
INT_RX_END                        0000001E
INT_TMR2                          00000044
INT_TMR2_DONE                     0000005E
INT_TMR2_END                      00000060
INT_TMR2_MSB                      00000062
INT_TMR2_NEXT                     0000005A
INT_TX                            0000000A
INT_TX_END                        00000014
INT_ZC                            0000002A
INT_ZC_END                        00000044
INVALID_SSR                       00000006
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IPR3                              00000FA5
IRCF0                             00000004
IRCF1                             00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 126


SYMBOL TABLE
  LABEL                             VALUE 

IRCF2                             00000006
IRVST                             00000005
IRXIE                             00000007
IRXIF                             00000007
IRXIP                             00000007
ISR_TMPL_BSR                      00000001
ISR_TMPL_STATUS                   00000000
ISR_TMPL_WREG                     00000002
IVRST                             00000005
J                                 00000020
JTOFF                             00000001
JTOFF_FILHIT1                     00000001
K                                 00000021
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
KK                                00000022
LAST_ERROR                        00000013
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LITERAL_ESC                       00000000
LUMOS_ARCH                        LUMOS_ARCH_4685
LUMOS_ARCH_14K50                  (0x1450)
LUMOS_ARCH_4685                   (0x4685)
LUMOS_CHIP_4CHANNEL               0x44
LUMOS_CHIP_MASTER                 0x41
LUMOS_CHIP_QSCC                   0x45
LUMOS_CHIP_QSRC                   0x46
LUMOS_CHIP_SLAVE                  0x42
LUMOS_CHIP_STANDALONE             0x43
LUMOS_CHIP_TYPE                   LUMOS_CHIP_QSRC
LUMOS_CONFIG_INC                  
LUMOS_INIT                        00000000
LUMOS_INTERNAL                    0x58
LUMOS_SLICE_TIMER                 LUMOS_INTERNAL
LUMOS_ZC                          0x55
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 127


SYMBOL TABLE
  LABEL                             VALUE 

LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAIN                              00000800
MAIN_DATA                         00000500
MAX_OFF_TIME                      00000004
MDSEL0                            00000006
MDSEL1                            00000007
MSB_ESC                           00000001
MSEL0                             00000DF0
MSEL1                             00000DF1
MSEL2                             00000DF2
MSEL3                             00000DF3
MY_ADDRESS                        00000003
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DMX                           0000085E
NOT_DONE                          00000001
NOT_FIFOEMPTY                     00000007
NOT_MY_SSR                        00000007
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NUM_CHANNELS                      (.20)
OBF                               00000006
OERR                              00000001
ON_OFF_ON                         00000AC2
ON_OFF_YY_DATA                    00000AA8
OPMODE0                           00000005
OPMODE1                           00000006
OPMODE2                           00000007
OPTION_DEBOUNCE                   00000018
OPTION_HOLD                       00000019
OSC1                              00000007
OSC2                              00000006
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OUTPUT_CHAN_MAX                   00000013
OV                                00000003
P                                 00000004
P1A                               00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
PASS_DOWN_ON_OFF                  00000AC8
PASS_DOWN_SET_LVL                 00000AF8
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 128


SYMBOL TABLE
  LABEL                             VALUE 

PGD                               00000007
PGM                               00000005
PHASE_OFFSETH                     00000004
PHASE_OFFSETL                     00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIE3                              00000FA3
PIR1                              00000F9E
PIR2                              00000FA1
PIR3                              00000FA4
PLAT_0                            00000F8B
PLAT_1                            00000F8B
PLAT_10                           00000F8A
PLAT_11                           00000F8D
PLAT_12                           00000F8C
PLAT_13                           00000F8C
PLAT_14                           00000F8C
PLAT_15                           00000F8D
PLAT_16                           00000F8A
PLAT_17                           00000F8C
PLAT_18                           00000F8C
PLAT_19                           00000F8C
PLAT_2                            00000F8B
PLAT_3                            00000F8D
PLAT_4                            00000F8A
PLAT_5                            00000F8A
PLAT_6                            00000F8A
PLAT_7                            00000F8A
PLAT_8                            00000F8A
PLAT_9                            00000F8A
PLAT_T_R                          00000F8B
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
PORT_RX                           00000F82
PORT_T_R                          00000F82
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PRECYC                            00000006
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRE_PRIV                          00000001
PRIV_FORBID                       00000003
PRIV_MODE                         00000004
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEG0                            00000000
PRSEG1                            00000001
PRSEG2                            00000002
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
QSCC_PORT                         (1)
R                                 00000002
RA0                               00000000
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 129


SYMBOL TABLE
  LABEL                             VALUE 

RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0_B0DLC                         00000004
RB0_B1DLC                         00000004
RB0_B2DLC                         00000004
RB0_B3DLC                         00000004
RB0_B4DLC                         00000004
RB0_B5DLC                         00000004
RB0_DDRB                          00000000
RB0_PORTB                         00000000
RB0_RXB0DLC                       00000004
RB0_RXB1DLC                       00000004
RB0_TRISB                         00000000
RB1_B0DLC                         00000005
RB1_B1DLC                         00000005
RB1_B2DLC                         00000005
RB1_B3DLC                         00000005
RB1_B4DLC                         00000005
RB1_B5DLC                         00000005
RB1_DDRB                          00000001
RB1_PORTB                         00000001
RB1_RXB0DLC                       00000005
RB1_RXB1DLC                       00000005
RB1_TRISB                         00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
READ_EEPROM_DATA                  
READ_EEPROM_DATA_REG              
READ_EEPROM_DATA_W                
READ_EEPROM_DATA_W_INC            
READ_WRITE                        00000002
REC0                              00000000
REC1                              00000001
REC2                              00000002
REC3                              00000003
REC4                              00000004
REC5                              00000005
REC6                              00000006
REC7                              00000007
RECEIVE_COMMAND                   00000922
REQOP0                            00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 130


SYMBOL TABLE
  LABEL                             VALUE 

REQOP1                            00000006
REQOP2                            00000007
RESRB0                            00000004
RESRB1                            00000005
RI                                00000004
ROLE_MASTER                       (0)
ROLE_SLAVE                        (0)
ROLE_STANDALONE                   (1)
RSEN                              00000001
RTREN                             00000002
RTRRO                             00000005
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXB0CON                           00000F60
RXB0D0                            00000F66
RXB0D00                           00000000
RXB0D01                           00000001
RXB0D02                           00000002
RXB0D03                           00000003
RXB0D04                           00000004
RXB0D05                           00000005
RXB0D06                           00000006
RXB0D07                           00000007
RXB0D1                            00000F67
RXB0D10                           00000000
RXB0D11                           00000001
RXB0D12                           00000002
RXB0D13                           00000003
RXB0D14                           00000004
RXB0D15                           00000005
RXB0D16                           00000006
RXB0D17                           00000007
RXB0D2                            00000F68
RXB0D20                           00000000
RXB0D21                           00000001
RXB0D22                           00000002
RXB0D23                           00000003
RXB0D24                           00000004
RXB0D25                           00000005
RXB0D26                           00000006
RXB0D27                           00000007
RXB0D3                            00000F69
RXB0D30                           00000000
RXB0D31                           00000001
RXB0D32                           00000002
RXB0D33                           00000003
RXB0D34                           00000004
RXB0D35                           00000005
RXB0D36                           00000006
RXB0D37                           00000007
RXB0D4                            00000F6A
RXB0D40                           00000000
RXB0D41                           00000001
RXB0D42                           00000002
RXB0D43                           00000003
RXB0D44                           00000004
RXB0D45                           00000005
RXB0D46                           00000006
RXB0D47                           00000007
RXB0D5                            00000F6B
RXB0D50                           00000000
RXB0D51                           00000001
RXB0D52                           00000002
RXB0D53                           00000003
RXB0D54                           00000004
RXB0D55                           00000005
RXB0D56                           00000006
RXB0D57                           00000007
RXB0D6                            00000F6C
RXB0D60                           00000000
RXB0D61                           00000001
RXB0D62                           00000002
RXB0D63                           00000003
RXB0D64                           00000004
RXB0D65                           00000005
RXB0D66                           00000006
RXB0D67                           00000007
RXB0D7                            00000F6D
RXB0D70                           00000000
RXB0D71                           00000001
RXB0D72                           00000002
RXB0D73                           00000003
RXB0D74                           00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 131


SYMBOL TABLE
  LABEL                             VALUE 

RXB0D75                           00000005
RXB0D76                           00000006
RXB0D77                           00000007
RXB0DBEN                          00000002
RXB0DBEN_FILHIT2                  00000002
RXB0DLC                           00000F65
RXB0EIDH                          00000F63
RXB0EIDL                          00000F64
RXB0IE                            00000000
RXB0IF                            00000000
RXB0IP                            00000000
RXB0OVFL                          00000007
RXB0OVFL_NOT_FIFOEMPTY            00000007
RXB0SIDH                          00000F61
RXB0SIDL                          00000F62
RXB1CON                           00000F50
RXB1D0                            00000F56
RXB1D00                           00000000
RXB1D01                           00000001
RXB1D02                           00000002
RXB1D03                           00000003
RXB1D04                           00000004
RXB1D05                           00000005
RXB1D06                           00000006
RXB1D07                           00000007
RXB1D1                            00000F57
RXB1D10                           00000000
RXB1D11                           00000001
RXB1D12                           00000002
RXB1D13                           00000003
RXB1D14                           00000004
RXB1D15                           00000005
RXB1D16                           00000006
RXB1D17                           00000007
RXB1D2                            00000F58
RXB1D20                           00000000
RXB1D21                           00000001
RXB1D22                           00000002
RXB1D23                           00000003
RXB1D24                           00000004
RXB1D25                           00000005
RXB1D26                           00000006
RXB1D27                           00000007
RXB1D3                            00000F59
RXB1D30                           00000000
RXB1D31                           00000001
RXB1D32                           00000002
RXB1D33                           00000003
RXB1D34                           00000004
RXB1D35                           00000005
RXB1D36                           00000006
RXB1D37                           00000007
RXB1D4                            00000F5A
RXB1D40                           00000000
RXB1D41                           00000001
RXB1D42                           00000002
RXB1D43                           00000003
RXB1D44                           00000004
RXB1D45                           00000005
RXB1D46                           00000006
RXB1D47                           00000007
RXB1D5                            00000F5B
RXB1D50                           00000000
RXB1D51                           00000001
RXB1D52                           00000002
RXB1D53                           00000003
RXB1D54                           00000004
RXB1D55                           00000005
RXB1D56                           00000006
RXB1D57                           00000007
RXB1D6                            00000F5C
RXB1D60                           00000000
RXB1D61                           00000001
RXB1D62                           00000002
RXB1D63                           00000003
RXB1D64                           00000004
RXB1D65                           00000005
RXB1D66                           00000006
RXB1D67                           00000007
RXB1D7                            00000F5D
RXB1D70                           00000000
RXB1D71                           00000001
RXB1D72                           00000002
RXB1D73                           00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 132


SYMBOL TABLE
  LABEL                             VALUE 

RXB1D74                           00000004
RXB1D75                           00000005
RXB1D76                           00000006
RXB1D77                           00000007
RXB1DLC                           00000F55
RXB1EIDH                          00000F53
RXB1EIDL                          00000F54
RXB1IE                            00000001
RXB1IF                            00000001
RXB1IP                            00000001
RXB1OVFL                          00000006
RXB1SIDH                          00000F51
RXB1SIDL                          00000F52
RXBODBEN                          00000002
RXBP                              00000003
RXBnIE                            00000001
RXBnIF                            00000001
RXBnIP                            00000001
RXBnOVFL                          00000006
RXDATA_FULL                       00000003
RXDATA_QUEUE                      00000001
RXERRCNT                          00000F75
RXF0EIDH                          00000F02
RXF0EIDL                          00000F03
RXF0EN                            00000000
RXF0SIDH                          00000F00
RXF0SIDL                          00000F01
RXF10EIDH                         00000D76
RXF10EIDL                         00000D77
RXF10EN                           00000002
RXF10SIDH                         00000D74
RXF10SIDL                         00000D75
RXF11EIDH                         00000D7A
RXF11EIDL                         00000D7B
RXF11EN                           00000003
RXF11SIDH                         00000D78
RXF11SIDL                         00000D79
RXF12EIDH                         00000D82
RXF12EIDL                         00000D83
RXF12EN                           00000004
RXF12SIDH                         00000D80
RXF12SIDL                         00000D81
RXF13EIDH                         00000D86
RXF13EIDL                         00000D87
RXF13EN                           00000005
RXF13SIDH                         00000D84
RXF13SIDL                         00000D85
RXF14EIDH                         00000D8A
RXF14EIDL                         00000D8B
RXF14EN                           00000006
RXF14SIDH                         00000D88
RXF14SIDL                         00000D89
RXF15EIDH                         00000D92
RXF15EIDL                         00000D93
RXF15EN                           00000007
RXF15SIDH                         00000D90
RXF15SIDL                         00000D91
RXF1EIDH                          00000F06
RXF1EIDL                          00000F07
RXF1EN                            00000001
RXF1SIDH                          00000F04
RXF1SIDL                          00000F05
RXF2EIDH                          00000F0A
RXF2EIDL                          00000F0B
RXF2EN                            00000002
RXF2SIDH                          00000F08
RXF2SIDL                          00000F09
RXF3EIDH                          00000F0E
RXF3EIDL                          00000F0F
RXF3EN                            00000003
RXF3SIDH                          00000F0C
RXF3SIDL                          00000F0D
RXF4EIDH                          00000F12
RXF4EIDL                          00000F13
RXF4EN                            00000004
RXF4SIDH                          00000F10
RXF4SIDL                          00000F11
RXF5EIDH                          00000F16
RXF5EIDL                          00000F17
RXF5EN                            00000005
RXF5SIDH                          00000F14
RXF5SIDL                          00000F15
RXF6EIDH                          00000D62
RXF6EIDL                          00000D63
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 133


SYMBOL TABLE
  LABEL                             VALUE 

RXF6EN                            00000006
RXF6SIDH                          00000D60
RXF6SIDL                          00000D61
RXF7EIDH                          00000D66
RXF7EIDL                          00000D67
RXF7EN                            00000007
RXF7SIDH                          00000D64
RXF7SIDL                          00000D65
RXF8EIDH                          00000D6A
RXF8EIDL                          00000D6B
RXF8EN                            00000000
RXF8SIDH                          00000D68
RXF8SIDL                          00000D69
RXF9EIDH                          00000D72
RXF9EIDL                          00000D73
RXF9EN                            00000001
RXF9SIDH                          00000D70
RXF9SIDL                          00000D71
RXFBCON0                          00000DE0
RXFBCON1                          00000DE1
RXFBCON2                          00000DE2
RXFBCON3                          00000DE3
RXFBCON4                          00000DE4
RXFBCON5                          00000DE5
RXFBCON6                          00000DE6
RXFBCON7                          00000DE7
RXFCON0                           00000DD4
RXFCON1                           00000DD5
RXFUL                             00000007
RXFUL_TXBIF                       00000007
RXM0                              00000005
RXM0EIDH                          00000F1A
RXM0EIDL                          00000F1B
RXM0SIDH                          00000F18
RXM0SIDL                          00000F19
RXM0_RTRRO                        00000005
RXM1                              00000006
RXM1EIDH                          00000F1E
RXM1EIDL                          00000F1F
RXM1SIDH                          00000F1C
RXM1SIDL                          00000F1D
RXM1_TXABT                        00000006
RXRTR                             00000006
RXRTRRO_B0CON                     00000005
RXRTRRO_B1CON                     00000005
RXRTRRO_B2CON                     00000005
RXRTRRO_B3CON                     00000005
RXRTRRO_B4CON                     00000005
RXRTRRO_B5CON                     00000005
RXRTRRO_FILHIT3                   00000003
RXRTRRO_RXB0CON                   00000003
RXRTRRO_RXB1CON                   00000003
RXRTRRO_TXLARB                    00000005
RXRTR_TXRTR                       00000006
RXWARN                            00000001
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
S0_CMD0                           0000095A
S0_CMD1                           00000A26
S0_CMD2                           00000A32
S0_CMD3                           00000A3C
S0_CMD4                           00000A46
S0_CMD5                           00000A50
S0_CMD6                           00000A58
S0_CMD7                           00000A60
S0_CMD_ERR                        00000A6A
S10_DATA                          00001462
S11_DATA                          0000146E
S12_DATA                          0000147A
S13_DATA                          00001486
S14_DATA                          00001492
S15_DATA                          000014AE
S16_DATA                          000014B6
S17_DATA                          000014BE
S1_DATA                           00000AA0
S2_DATA                           00000ACC
S3_DATA                           00000AE2
S4_DATA                           00000B00
S5_DATA                           00000B22
S6_0_DATA                         00000B58
S6_0_DATA_N_OK                    00000B6E
S6_0_UPDATE_MASTER                00000B82
S6_0_UPDATE_NEXT                  00000B9E
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 134


SYMBOL TABLE
  LABEL                             VALUE 

S6_10_DATA                        000011CA
S6_10_DEF_SENS                    000011DE
S6_10_VALID                       000011D8
S6_11_CLR_SEQ                     000011FA
S6_11_DATA                        000011E6
S6_11_VALID                       000011F4
S6_12_DATA                        0000120A
S6_12_DEF_SEQ                     0000122E
S6_12_VALID                       00001216
S6_12_VALID2                      00001228
S6_13_DATA                        0000123E
S6_13_VALID                       0000124C
S6_14_DATA                        00001264
S6_1_CONFIGURE                    00000BD0
S6_1_DATA                         00000BAE
S6_1_VALID_1                      00000BBC
S6_1_VALID_2                      00000BC2
S6_2_DATA                         00000C34
S6_2_SET_BAUD                     00000C56
S6_2_VALID1                       00000C42
S6_2_VALID2                       00000C48
S6_3_DATA                         00000C98
S6_3_HALT                         00000CC4
S6_3_RESET                        00000CAC
S6_3_VALID                        00000CA6
S6_4_DATA                         00000CC6
S6_4_SET_PHASE                    00000CDA
S6_4_VALID                        00000CD4
S6_5_ADDR                         00000D60
S6_5_DATA                         00000D4C
S6_5_VALID                        00000D5A
S6_6_DATA                         00000DB2
S6_6_SLEEP                        00000DC6
S6_6_VALID                        00000DC0
S6_7_DATA                         00000DDC
S6_7_VALID                        00000DEA
S6_7_WAKE                         00000DF0
S6_8_DATA                         00000E0A
S6_8_SHUTDOWN                     00000E1E
S6_8_VALID                        00000E18
S6_8_X                            00000E02
S6_9_DATA                         00000E2E
S6_9_QUERY                        00000E42
S6_9_VALID                        00000E3C
S6_DATA                           00000B40
S6_KEEP_LOOKING                   0000126E
S6_RESTART                        0000126C
S7_DATA                           00001286
S8B_CHK_7E1                       00000E74
S8B_CHK_7E10                      0000115A
S8B_CHK_7E11                      00001198
S8B_CHK_7E2                       00000EB0
S8B_CHK_7E3                       00000EF8
S8B_CHK_7E4                       00000F36
S8B_CHK_7E5                       00000F7A
S8B_CHK_7E6                       00000FC2
S8B_CHK_7E7                       00001000
S8B_CHK_7E8                       0000105A
S8B_CHK_7E9                       000010FE
S8B_CHK_MSB1                      00000E88
S8B_CHK_MSB10                     0000116E
S8B_CHK_MSB11                     000011AC
S8B_CHK_MSB2                      00000EC4
S8B_CHK_MSB3                      00000F0C
S8B_CHK_MSB4                      00000F4A
S8B_CHK_MSB5                      00000F8E
S8B_CHK_MSB6                      00000FD6
S8B_CHK_MSB7                      00001014
S8B_CHK_MSB8                      0000106E
S8B_CHK_MSB9                      00001112
S8B_END1                          00000E9A
S8B_END10                         00001180
S8B_END11                         000011BE
S8B_END2                          00000ED6
S8B_END3                          00000F1E
S8B_END4                          00000F5C
S8B_END5                          00000FA0
S8B_END6                          00000FE8
S8B_END7                          00001026
S8B_END8                          00001080
S8B_END9                          00001124
S8B_LABEL                         0000000C
S8B_SEND_NORMAL1                  00000E94
S8B_SEND_NORMAL10                 0000117A
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 135


SYMBOL TABLE
  LABEL                             VALUE 

S8B_SEND_NORMAL11                 000011B8
S8B_SEND_NORMAL2                  00000ED0
S8B_SEND_NORMAL3                  00000F18
S8B_SEND_NORMAL4                  00000F56
S8B_SEND_NORMAL5                  00000F9A
S8B_SEND_NORMAL6                  00000FE2
S8B_SEND_NORMAL7                  00001020
S8B_SEND_NORMAL8                  0000107A
S8B_SEND_NORMAL9                  0000111E
S8_DATA                           00001292
S8_PASS_DOWN_RAMP_LVL             000012CC
S9_CF_ADDR                        0000144A
S9_CF_PHASE                       00001432
S9_DATA                           000012D4
S9_DO_PRIV_CMD                    000013A8
S9_INTERNAL_CMD                   00001398
S9_PRIV_0                         000013B6
S9_PRIV_0X                        000013BC
S9_PRIV_1                         000013C4
S9_PRIV_2                         000013DC
S9_PRIV_3                         000013F4
S9_PRIV_4                         0000140C
S9_PRIV_5                         00001416
S9_PRIV_6                         0000142E
S9_PRIV_CMD                       0000139C
S9_X0_SLEEP                       000012E4
S9_X1_WAKE                        000012F8
S9_X2_SHUTDOWN                    00001310
S9_X3_QUERY                       00001328
S9_X4_DEF_SEQ                     00001340
S9_X5_EXEC_SEQ                    0000134A
S9_X6_DEF_SENS                    00001354
S9_X7_MSK_SENS                    0000136C
S9_X8_CLR_SEQ                     00001376
S9_X9_XPRIV                       0000138E
SAM                               00000006
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDFLC                             00000DD8
SDI                               00000004
SDO                               00000005
SEG1PH0                           00000003
SEG1PH1                           00000004
SEG1PH2                           00000005
SEG2PH0                           00000000
SEG2PH1                           00000001
SEG2PH2                           00000002
SEG2PHT                           00000007
SEG2PHTS                          00000007
SEN                               00000000
SENDB                             00000003
SEND_8_BIT_W                      
SEQ_DATA                          00000600
SET_EEPROM_ADDRESS                
SET_SSR_BLINK_FADE                
SET_SSR_DMX_MODE                  
SET_SSR_NORMAL_MODE               
SET_SSR_OFF                       
SET_SSR_PATTERN                   
SET_SSR_RAPID_FADE                
SET_SSR_RAPID_FLASH               
SET_SSR_SLOW_FADE                 
SET_SSR_SLOW_FLASH                
SET_SSR_STEADY                    
SET_SSR_VALUE                     
SID0                              00000005
SID1                              00000006
SID10                             00000007
SID2                              00000007
SID3                              00000000
SID4                              00000001
SID5                              00000002
SID6                              00000003
SID7                              00000004
SID8                              00000005
SID9                              00000006
SIO_115200                        00000009
SIO_1200                          00000002
SIO_19200                         00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 136


SYMBOL TABLE
  LABEL                             VALUE 

SIO_2400                          00000003
SIO_250000                        0000000A
SIO_300                           00000000
SIO_38400                         00000007
SIO_4800                          00000004
SIO_57600                         00000008
SIO_600                           00000001
SIO_9600                          00000005
SIO_DATA_START                    00000300
SIO_ECHO                          00000000
SIO_ECHO_W                        00000000
SIO_FERR                          00000005
SIO_FLUSH_INPUT                   00000000
SIO_FLUSH_OUTPUT                  00000000
SIO_GETCHAR                       00000000
SIO_GETCHAR_W                     00000000
SIO_INIT                          00000000
SIO_INPUT                         00000000
SIO_NEWLINE                       00000000
SIO_ORUN                          00000004
SIO_OUTPUT                        00000000
SIO_PRINT_HEX                     00000000
SIO_PRINT_HEX_W                   00000000
SIO_PUTCHAR                       00000000
SIO_PUTCHAR_W                     00000000
SIO_READ                          00000000
SIO_READ_W                        00000000
SIO_RECV                          00000000
SIO_RX_BUFFER_START               00000200
SIO_SEND                          00000000
SIO_SET_BAUD_W                    00000000
SIO_STATUS                        00000000
SIO_TABLE_START                   00015000
SIO_TX_BUFFER_START               00000100
SIO_WRITE                         00000000
SIO_WRITE_W                       00000000
SJW0                              00000006
SJW1                              00000007
SLEEP_MODE                        00000003
SLICE_TMR_PERIOD                  0000009F
SLICE_UPD                         00000005
SMP                               00000007
SND8BIT                           
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SRR                               00000004
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
SSR_00_COUNTER                    00000450
SSR_00_FLAGS                      00000414
SSR_00_SPEED                      0000043C
SSR_00_STEP                       00000428
SSR_00_VALUE                      00000400
SSR_BLOCK_LEN                     00000014
SSR_DATA_BANK                     00000400
SSR_MAX                           00000013
SSR_OUTPUT_VALUE                  000014C6
SSR_STATE                         00000006
SSR_STATE2                        00000007
START                             00000104
START_DMX_FRAME                   000008F8
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 137


SYMBOL TABLE
  LABEL                             VALUE 

STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYS_SNH                           00016FF0
SYS_SNL                           00016FF1
S_FLASH                           00000100
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1INSYNC                          00000002
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3ECCP1                           00000006
T3NSYNC                           00000002
T3SYNC                            00000002
TABLAT                            00000FF5
TARGET_SSR                        00000017
TARGET_SSR_MSK                    0000003F
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEC0                              00000000
TEC1                              00000001
TEC2                              00000002
TEC3                              00000003
TEC4                              00000004
TEC5                              00000005
TEC6                              00000006
TEC7                              00000007
TEST_BUTTON                       00000005
TEST_CYCLE                        0000001A
TEST_MODE                         00000000
TEST_MODE_1                       000008CA
TEST_MODE_BYPASS                  0000087E
TEST_NOT_PRESSED                  000008B6
TEST_NP_1                         000008CA
TEST_NP_2                         000008CA
TEST_PAUSE                        00000007
TEST_SSR                          0000001B
TEST_UPD                          00000006
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1                              00000FCE
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 138


SYMBOL TABLE
  LABEL                             VALUE 

TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRIS_T_R                          00000F94
TRMT                              00000001
TRY_DOWN_0                        000015B8
TRY_DOWN_1                        00001602
TRY_DOWN_10                       0000189C
TRY_DOWN_11                       000018E6
TRY_DOWN_12                       00001930
TRY_DOWN_13                       0000197A
TRY_DOWN_14                       000019C4
TRY_DOWN_15                       00001A0E
TRY_DOWN_16                       00001A58
TRY_DOWN_17                       00001AA2
TRY_DOWN_18                       00001AEC
TRY_DOWN_19                       00001B36
TRY_DOWN_2                        0000164C
TRY_DOWN_3                        00001696
TRY_DOWN_4                        000016E0
TRY_DOWN_5                        0000172A
TRY_DOWN_6                        00001774
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 139


SYMBOL TABLE
  LABEL                             VALUE 

TRY_DOWN_7                        000017BE
TRY_DOWN_8                        00001808
TRY_DOWN_9                        00001852
TR_I                              00000023
TR_OFF_DELAY                      00001C44
TR_ON_DELAY                       00001C3A
TR_ON_L                           00001C3C
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXABT                             00000006
TXB0CON                           00000F40
TXB0D0                            00000F46
TXB0D00                           00000000
TXB0D01                           00000001
TXB0D02                           00000002
TXB0D03                           00000003
TXB0D04                           00000004
TXB0D05                           00000005
TXB0D06                           00000006
TXB0D07                           00000007
TXB0D1                            00000F47
TXB0D10                           00000000
TXB0D11                           00000001
TXB0D12                           00000002
TXB0D13                           00000003
TXB0D14                           00000004
TXB0D15                           00000005
TXB0D16                           00000006
TXB0D17                           00000007
TXB0D2                            00000F48
TXB0D20                           00000000
TXB0D21                           00000001
TXB0D22                           00000002
TXB0D23                           00000003
TXB0D24                           00000004
TXB0D25                           00000005
TXB0D26                           00000006
TXB0D27                           00000007
TXB0D3                            00000F49
TXB0D30                           00000000
TXB0D31                           00000001
TXB0D32                           00000002
TXB0D33                           00000003
TXB0D34                           00000004
TXB0D35                           00000005
TXB0D36                           00000006
TXB0D37                           00000007
TXB0D4                            00000F4A
TXB0D40                           00000000
TXB0D41                           00000001
TXB0D42                           00000002
TXB0D43                           00000003
TXB0D44                           00000004
TXB0D45                           00000005
TXB0D46                           00000006
TXB0D47                           00000007
TXB0D5                            00000F4B
TXB0D50                           00000000
TXB0D51                           00000001
TXB0D52                           00000002
TXB0D53                           00000003
TXB0D54                           00000004
TXB0D55                           00000005
TXB0D56                           00000006
TXB0D57                           00000007
TXB0D6                            00000F4C
TXB0D60                           00000000
TXB0D61                           00000001
TXB0D62                           00000002
TXB0D63                           00000003
TXB0D64                           00000004
TXB0D65                           00000005
TXB0D66                           00000006
TXB0D67                           00000007
TXB0D7                            00000F4D
TXB0D70                           00000000
TXB0D71                           00000001
TXB0D72                           00000002
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 140


SYMBOL TABLE
  LABEL                             VALUE 

TXB0D73                           00000003
TXB0D74                           00000004
TXB0D75                           00000005
TXB0D76                           00000006
TXB0D77                           00000007
TXB0DLC                           00000F45
TXB0EIDH                          00000F43
TXB0EIDL                          00000F44
TXB0IE                            00000002
TXB0IF                            00000002
TXB0IP                            00000002
TXB0SIDH                          00000F41
TXB0SIDL                          00000F42
TXB1CON                           00000F30
TXB1D0                            00000F36
TXB1D00                           00000000
TXB1D01                           00000001
TXB1D02                           00000002
TXB1D03                           00000003
TXB1D04                           00000004
TXB1D05                           00000005
TXB1D06                           00000006
TXB1D07                           00000007
TXB1D1                            00000F37
TXB1D10                           00000000
TXB1D11                           00000001
TXB1D12                           00000002
TXB1D13                           00000003
TXB1D14                           00000004
TXB1D15                           00000005
TXB1D16                           00000006
TXB1D17                           00000007
TXB1D2                            00000F38
TXB1D20                           00000000
TXB1D21                           00000001
TXB1D22                           00000002
TXB1D23                           00000003
TXB1D24                           00000004
TXB1D25                           00000005
TXB1D26                           00000006
TXB1D27                           00000007
TXB1D3                            00000F39
TXB1D30                           00000000
TXB1D31                           00000001
TXB1D32                           00000002
TXB1D33                           00000003
TXB1D34                           00000004
TXB1D35                           00000005
TXB1D36                           00000006
TXB1D37                           00000007
TXB1D4                            00000F3A
TXB1D40                           00000000
TXB1D41                           00000001
TXB1D42                           00000002
TXB1D43                           00000003
TXB1D44                           00000004
TXB1D45                           00000005
TXB1D46                           00000006
TXB1D47                           00000007
TXB1D5                            00000F3B
TXB1D50                           00000000
TXB1D51                           00000001
TXB1D52                           00000002
TXB1D53                           00000003
TXB1D54                           00000004
TXB1D55                           00000005
TXB1D56                           00000006
TXB1D57                           00000007
TXB1D6                            00000F3C
TXB1D60                           00000000
TXB1D61                           00000001
TXB1D62                           00000002
TXB1D63                           00000003
TXB1D64                           00000004
TXB1D65                           00000005
TXB1D66                           00000006
TXB1D67                           00000007
TXB1D7                            00000F3D
TXB1D70                           00000000
TXB1D71                           00000001
TXB1D72                           00000002
TXB1D73                           00000003
TXB1D74                           00000004
TXB1D75                           00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 141


SYMBOL TABLE
  LABEL                             VALUE 

TXB1D76                           00000006
TXB1D77                           00000007
TXB1DLC                           00000F35
TXB1EIDH                          00000F33
TXB1EIDL                          00000F34
TXB1IE                            00000003
TXB1IF                            00000003
TXB1IP                            00000003
TXB1SIDH                          00000F31
TXB1SIDL                          00000F32
TXB2CON                           00000F20
TXB2D0                            00000F26
TXB2D00                           00000000
TXB2D01                           00000001
TXB2D02                           00000002
TXB2D03                           00000003
TXB2D04                           00000004
TXB2D05                           00000005
TXB2D06                           00000006
TXB2D07                           00000007
TXB2D1                            00000F27
TXB2D10                           00000000
TXB2D11                           00000001
TXB2D12                           00000002
TXB2D13                           00000003
TXB2D14                           00000004
TXB2D15                           00000005
TXB2D16                           00000006
TXB2D17                           00000007
TXB2D2                            00000F28
TXB2D20                           00000000
TXB2D21                           00000001
TXB2D22                           00000002
TXB2D23                           00000003
TXB2D24                           00000004
TXB2D25                           00000005
TXB2D26                           00000006
TXB2D27                           00000007
TXB2D3                            00000F29
TXB2D30                           00000000
TXB2D31                           00000001
TXB2D32                           00000002
TXB2D33                           00000003
TXB2D34                           00000004
TXB2D35                           00000005
TXB2D36                           00000006
TXB2D37                           00000007
TXB2D4                            00000F2A
TXB2D40                           00000000
TXB2D41                           00000001
TXB2D42                           00000002
TXB2D43                           00000003
TXB2D44                           00000004
TXB2D45                           00000005
TXB2D46                           00000006
TXB2D47                           00000007
TXB2D5                            00000F2B
TXB2D50                           00000000
TXB2D51                           00000001
TXB2D52                           00000002
TXB2D53                           00000003
TXB2D54                           00000004
TXB2D55                           00000005
TXB2D56                           00000006
TXB2D57                           00000007
TXB2D6                            00000F2C
TXB2D60                           00000000
TXB2D61                           00000001
TXB2D62                           00000002
TXB2D63                           00000003
TXB2D64                           00000004
TXB2D65                           00000005
TXB2D66                           00000006
TXB2D67                           00000007
TXB2D7                            00000F2D
TXB2D70                           00000000
TXB2D71                           00000001
TXB2D72                           00000002
TXB2D73                           00000003
TXB2D74                           00000004
TXB2D75                           00000005
TXB2D76                           00000006
TXB2D77                           00000007
TXB2DLC                           00000F25
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 142


SYMBOL TABLE
  LABEL                             VALUE 

TXB2EIDH                          00000F23
TXB2EIDL                          00000F24
TXB2IE                            00000004
TXB2IF                            00000004
TXB2IP                            00000004
TXB2SIDH                          00000F21
TXB2SIDL                          00000F22
TXBIE                             00000DFC
TXBIF                             00000007
TXBIFBXB2CON                      00000007
TXBIFTXB1CON                      00000007
TXBIP                             00000004
TXBO                              00000005
TXBP                              00000004
TXBnIE                            00000004
TXBnIF                            00000004
TXBnIP                            00000004
TXCKP                             00000004
TXDATA_FULL                       00000002
TXDATA_QUEUE                      00000000
TXEN                              00000005
TXERR                             00000004
TXERRCNT                          00000F76
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXLARB                            00000005
TXPRI0                            00000000
TXPRI1                            00000001
TXREG                             00000FAD
TXREQ                             00000003
TXRTR                             00000006
TXSTA                             00000FAC
TXWARN                            00000002
UA                                00000001
UPDATE_MINIMUM_LEVEL              00001588
UPDATE_MIN_DIMMED_0               00001594
UPDATE_MIN_DIMMED_1               000015DE
UPDATE_MIN_DIMMED_10              00001878
UPDATE_MIN_DIMMED_11              000018C2
UPDATE_MIN_DIMMED_12              0000190C
UPDATE_MIN_DIMMED_13              00001956
UPDATE_MIN_DIMMED_14              000019A0
UPDATE_MIN_DIMMED_15              000019EA
UPDATE_MIN_DIMMED_16              00001A34
UPDATE_MIN_DIMMED_17              00001A7E
UPDATE_MIN_DIMMED_18              00001AC8
UPDATE_MIN_DIMMED_19              00001B12
UPDATE_MIN_DIMMED_2               00001628
UPDATE_MIN_DIMMED_3               00001672
UPDATE_MIN_DIMMED_4               000016BC
UPDATE_MIN_DIMMED_5               00001706
UPDATE_MIN_DIMMED_6               00001750
UPDATE_MIN_DIMMED_7               0000179A
UPDATE_MIN_DIMMED_8               000017E4
UPDATE_MIN_DIMMED_9               0000182E
UPDATE_MIN_SKIP_0                 0000159A
UPDATE_MIN_SKIP_1                 000015E4
UPDATE_MIN_SKIP_10                0000187E
UPDATE_MIN_SKIP_11                000018C8
UPDATE_MIN_SKIP_12                00001912
UPDATE_MIN_SKIP_13                0000195C
UPDATE_MIN_SKIP_14                000019A6
UPDATE_MIN_SKIP_15                000019F0
UPDATE_MIN_SKIP_16                00001A3A
UPDATE_MIN_SKIP_17                00001A84
UPDATE_MIN_SKIP_18                00001ACE
UPDATE_MIN_SKIP_19                00001B18
UPDATE_MIN_SKIP_2                 0000162E
UPDATE_MIN_SKIP_3                 00001678
UPDATE_MIN_SKIP_4                 000016C2
UPDATE_MIN_SKIP_5                 0000170C
UPDATE_MIN_SKIP_6                 00001756
UPDATE_MIN_SKIP_7                 000017A0
UPDATE_MIN_SKIP_8                 000017EA
UPDATE_MIN_SKIP_9                 00001834
UPDATE_SSR_OUTPUTS                00001502
UPDATE_SSR_SKIP_0                 00001512
UPDATE_SSR_SKIP_1                 00001518
UPDATE_SSR_SKIP_10                0000154E
UPDATE_SSR_SKIP_11                00001554
UPDATE_SSR_SKIP_12                0000155A
UPDATE_SSR_SKIP_13                00001560
UPDATE_SSR_SKIP_14                00001566
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 143


SYMBOL TABLE
  LABEL                             VALUE 

UPDATE_SSR_SKIP_15                0000156C
UPDATE_SSR_SKIP_16                00001572
UPDATE_SSR_SKIP_17                00001578
UPDATE_SSR_SKIP_18                0000157E
UPDATE_SSR_SKIP_19                00001584
UPDATE_SSR_SKIP_2                 0000151E
UPDATE_SSR_SKIP_3                 00001524
UPDATE_SSR_SKIP_4                 0000152A
UPDATE_SSR_SKIP_5                 00001530
UPDATE_SSR_SKIP_6                 00001536
UPDATE_SSR_SKIP_7                 0000153C
UPDATE_SSR_SKIP_8                 00001542
UPDATE_SSR_SKIP_9                 00001548
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VREFM                             00000002
VREFP                             00000003
W                                 00000000
WAIT_FOR_SENTINEL                 
WAKDIS                            00000007
WAKFIL                            00000006
WAKIE                             00000006
WAKIF                             00000006
WAKIP                             00000006
WATCH_BREAK                       00000838
WCOL                              00000007
WDTCON                            00000FD1
WIN0                              00000001
WIN0_FP1                          00000001
WIN1                              00000002
WIN1_FP2                          00000002
WIN2                              00000003
WIN2_FP3                          00000003
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_EEPROM_DATA                 
WRITE_EEPROM_DATA_INC             
WRITE_EEPROM_DATA_W               
WRITE_EEPROM_DATA_W_INC           
WRITE_EEPROM_LOOP0                000002CE
WRITE_EEPROM_LOOP1                00000C04
WRITE_EEPROM_LOOP2                00000C1E
WRITE_EEPROM_LOOP3                00000C7C
WRITE_EEPROM_LOOP4                00000D16
WRITE_EEPROM_LOOP5                00000D36
WRITE_EEPROM_LOOP6                00000D9C
WUE                               00000001
X                                 00000014
XLATE_SSR_ID                      000014EE
YCF_RAMP_CYCLE                    00000007
YY_BUFFER                         00000500
YY_BUF_IDX                        00000010
YY_BUF_LEN                        000000C8
YY_CMD_FLAGS                      0000000C
YY_COMMAND                        0000000B
YY_DATA                           0000000D
YY_LOOKAHEAD_MAX                  0000000E
YY_LOOK_FOR                       0000000F
YY_NEXT_STATE                     00000011
YY_STATE                          0000000A
YY_YY                             00000012
Z                                 00000002
_BBSIZ_1024_4L                    000000CF
_BBSIZ_2048_4L                    000000DF
_BBSIZ_4096_4L                    000000EF
_BOREN_BOACTIVE_2L                000000FD
_BOREN_BOHW_2L                    000000FF
_BOREN_OFF_2L                     000000F9
_BOREN_SBORENCTRL_2L              000000FB
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 144


SYMBOL TABLE
  LABEL                             VALUE 

_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CP4_OFF_5L                       000000FF
_CP4_ON_5L                        000000EF
_CP5_OFF_5L                       000000FF
_CP5_ON_5L                        000000DF
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTR4_OFF_7L                     000000FF
_EBTR4_ON_7L                      000000EF
_EBTR5_OFF_7L                     000000FF
_EBTR5_ON_7L                      000000DF
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MAIN_EEPROM_TBL                  00014000
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO_1H                      000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_IRCIO67_1H                   000000F8
_OSC_IRCIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO_1H                      000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_SYSTEM_MFG_DATA                  00016FF0
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
MPASM 5.53                 ../LUMOS_MAIN.ASM   5-26-2014  22:33:11         PAGE 145


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRT4_OFF_6L                      000000FF
_WRT4_ON_6L                       000000EF
_WRT5_OFF_6L                      000000FF
_WRT5_ON_6L                       000000DF
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F4685                         00000001

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

