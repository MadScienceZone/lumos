#
# LUMOS 
#
# Lumos Light Orchestration System
# Copyright (c) 2005, 2006, 2007, 2008, 2014 by Steven L. Willoughby, Aloha,
# Oregon, USA.  All Rights Reserved.  Licensed under the Open Software
# License version 3.0.
#
# This product is provided for educational, experimental or personal
# interest use, in accordance with the terms and conditions of the
# aforementioned license agreement, ON AN "AS IS" BASIS AND WITHOUT
# WARRANTY, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION,
# THE WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY OF THE ORIGINAL
# WORK IS WITH YOU.  (See the license agreement for full details, 
# including disclaimer of warranty and limitation of liability.)
#
# Under no curcumstances is this product intended to be used where the
# safety of any person, animal, or property depends upon, or is at
# risk of any kind from, the correct operation of this software or
# the hardware devices which it controls.
#
# USE THIS PRODUCT AT YOUR OWN RISK.
# 
# vi:set ai sm nu ts=4 sw=4 expandtab:
import unittest
from Lumos.Event       import Event
from Lumos.ValueEvent  import ValueEvent
from Lumos.Sequence    import Sequence, InvalidFileFormat, InvalidTimestamp, InvalidUnitDefinition
from Lumos.Sequence    import InvalidEvent
from TestNetwork       import TestNetwork
from Lumos.PowerSource import PowerSource

from Lumos.Device.FireGodControllerUnit         import FireGodControllerUnit
from Lumos.Device.LynX10ControllerUnit          import LynX10ControllerUnit
from Lumos.VirtualChannels.DimmerVirtualChannel import DimmerVirtualChannel

class DummyController (object):
    def __init__(self, id):
        self.id = id

    def __eq__(self, other):
        return self.id == other.id

    def channel_id_from_string(self, ch):
        return ch

class DummyVirtualChannel (object):
    def __init__(self, id):
        self.id = id
        self.is_dimmable = True

    def normalize_level_value(self, v, permissive=False):
        return v

class SqeuenceTest (unittest.TestCase):
    def setUp(self):
        #
        # Gathering these into setUp to consolidate what
        # we are testing with; unfortunately the tests weren't
        # consistent with each other so we have some refactoring 
        # to do here...
        #
        self.controllers = {
            'floods': DummyController('floods'),
            'tree':   DummyController('tree')
        }
        self.virtuals = {
            'fa3':    DummyVirtualChannel('fa3'),
            'fx1':    DummyVirtualChannel('fx1'),
            't3':     DummyVirtualChannel('t3'),
            't0':     DummyVirtualChannel('t0'),
            't1':     DummyVirtualChannel('t1'),
            't2':     DummyVirtualChannel('t2'),
            'fc7':    DummyVirtualChannel('fc7'),
        }

        self.umap = {
            'floods': LynX10ControllerUnit('lx', PowerSource('ps2'), TestNetwork(), resolution=16),
            'tree':   FireGodControllerUnit('fg', PowerSource('ps1'), TestNetwork(),
                        address=1, resolution=101, num_channels=32),
        }

        self.umap['floods'].add_channel('C7', load=1, warm=10, resolution=16)
        self.umap['tree'].add_channel(0, load=1)
        self.umap['tree'].add_channel(1, load=1)
        self.umap['tree'].add_channel(2, load=1)
        self.umap['tree'].add_channel(3, load=1)

        self.vmap = {
            'flC7': DimmerVirtualChannel('flC7', self.umap['floods'].channels['C7']),
            'tr#0': DimmerVirtualChannel('tr#0', self.umap['tree'].channels[0]),
            'tr#1': DimmerVirtualChannel('tr#1', self.umap['tree'].channels[1]),
            'tr#2': DimmerVirtualChannel('tr#2', self.umap['tree'].channels[2]),
            'tr#3': DimmerVirtualChannel('tr#3', self.umap['tree'].channels[3]),
        }

        self.TEST_TIMELINE=[
(0, self.umap['floods'].all_channels_off, (), 1),
(0, self.umap['floods'].flush, (), 2),
(0, self.umap['tree'].all_channels_off, (), 1),
(0, self.umap['tree'].flush, (), 2),
(1000, self.umap['floods'].set_channel, ('C7', 7, False), 1),
(1000, self.umap['tree'].set_channel, (0, 100, False), 1),
(1000, self.umap['floods'].flush, (), 2),
(1000, self.umap['tree'].flush, (), 2),
(1021, self.umap['floods'].set_channel, ('C7', 8, False), 1),
(1021, self.umap['floods'].flush, (), 2),
(1043, self.umap['floods'].set_channel, ('C7', 9, False), 1),
(1043, self.umap['floods'].flush, (), 2),
(1064, self.umap['floods'].set_channel, ('C7', 10, False), 1),
(1064, self.umap['floods'].flush, (), 2),
(1086, self.umap['floods'].set_channel, ('C7', 11, False), 1),
(1086, self.umap['floods'].flush, (), 2),
(1107, self.umap['floods'].set_channel, ('C7', 12, False), 1),
(1107, self.umap['floods'].flush, (), 2),
(1129, self.umap['floods'].set_channel, ('C7', 13, False), 1),
(1129, self.umap['floods'].flush, (), 2),
(1150, self.umap['floods'].set_channel, ('C7', 14, False), 1),
(1150, self.umap['floods'].flush, (), 2),
(1172, self.umap['floods'].set_channel, ('C7', 15, False), 1),
(1172, self.umap['floods'].flush, (), 2),
(1193, self.umap['floods'].set_channel, ('C7', 16, False), 1),
(1193, self.umap['floods'].flush, (), 2),
(1215, self.umap['floods'].set_channel, ('C7', 17, False), 1),
(1215, self.umap['floods'].flush, (), 2),
(1236, self.umap['floods'].set_channel, ('C7', 18, False), 1),
(1236, self.umap['floods'].flush, (), 2),
(1258, self.umap['floods'].set_channel, ('C7', 19, False), 1),
(1258, self.umap['floods'].flush, (), 2),
(1279, self.umap['floods'].set_channel, ('C7', 20, False), 1),
(1279, self.umap['floods'].flush, (), 2),
(1301, self.umap['floods'].set_channel, ('C7', 21, False), 1),
(1301, self.umap['floods'].flush, (), 2),
(1322, self.umap['floods'].set_channel, ('C7', 22, False), 1),
(1322, self.umap['floods'].flush, (), 2),
(1344, self.umap['floods'].set_channel, ('C7', 23, False), 1),
(1344, self.umap['floods'].flush, (), 2),
(1365, self.umap['floods'].set_channel, ('C7', 24, False), 1),
(1365, self.umap['floods'].flush, (), 2),
(1387, self.umap['floods'].set_channel, ('C7', 25, False), 1),
(1387, self.umap['floods'].flush, (), 2),
(1408, self.umap['floods'].set_channel, ('C7', 26, False), 1),
(1408, self.umap['floods'].flush, (), 2),
(1430, self.umap['floods'].set_channel, ('C7', 27, False), 1),
(1430, self.umap['floods'].flush, (), 2),
(1451, self.umap['floods'].set_channel, ('C7', 28, False), 1),
(1451, self.umap['floods'].flush, (), 2),
(1473, self.umap['floods'].set_channel, ('C7', 29, False), 1),
(1473, self.umap['floods'].flush, (), 2),
(1494, self.umap['floods'].set_channel, ('C7', 30, False), 1),
(1494, self.umap['floods'].flush, (), 2),
(1516, self.umap['floods'].set_channel, ('C7', 31, False), 1),
(1516, self.umap['floods'].flush, (), 2),
(1537, self.umap['floods'].set_channel, ('C7', 32, False), 1),
(1537, self.umap['floods'].flush, (), 2),
(1559, self.umap['floods'].set_channel, ('C7', 33, False), 1),
(1559, self.umap['floods'].flush, (), 2),
(1580, self.umap['floods'].set_channel, ('C7', 34, False), 1),
(1580, self.umap['floods'].flush, (), 2),
(1602, self.umap['floods'].set_channel, ('C7', 35, False), 1),
(1602, self.umap['floods'].flush, (), 2),
(1623, self.umap['floods'].set_channel, ('C7', 36, False), 1),
(1623, self.umap['floods'].flush, (), 2),
(1645, self.umap['floods'].set_channel, ('C7', 37, False), 1),
(1645, self.umap['floods'].flush, (), 2),
(1666, self.umap['floods'].set_channel, ('C7', 38, False), 1),
(1666, self.umap['floods'].flush, (), 2),
(1688, self.umap['floods'].set_channel, ('C7', 39, False), 1),
(1688, self.umap['floods'].flush, (), 2),
(1709, self.umap['floods'].set_channel, ('C7', 40, False), 1),
(1709, self.umap['floods'].flush, (), 2),
(1731, self.umap['floods'].set_channel, ('C7', 41, False), 1),
(1731, self.umap['floods'].flush, (), 2),
(1752, self.umap['floods'].set_channel, ('C7', 42, False), 1),
(1752, self.umap['floods'].flush, (), 2),
(1774, self.umap['floods'].set_channel, ('C7', 43, False), 1),
(1774, self.umap['floods'].flush, (), 2),
(1795, self.umap['floods'].set_channel, ('C7', 44, False), 1),
(1795, self.umap['floods'].flush, (), 2),
(1817, self.umap['floods'].set_channel, ('C7', 45, False), 1),
(1817, self.umap['floods'].flush, (), 2),
(1838, self.umap['floods'].set_channel, ('C7', 46, False), 1),
(1838, self.umap['floods'].flush, (), 2),
(1860, self.umap['floods'].set_channel, ('C7', 47, False), 1),
(1860, self.umap['floods'].flush, (), 2),
(1881, self.umap['floods'].set_channel, ('C7', 48, False), 1),
(1881, self.umap['floods'].flush, (), 2),
(1903, self.umap['floods'].set_channel, ('C7', 49, False), 1),
(1903, self.umap['floods'].flush, (), 2),
(1924, self.umap['floods'].set_channel, ('C7', 50, False), 1),
(1924, self.umap['floods'].flush, (), 2),
(1946, self.umap['floods'].set_channel, ('C7', 51, False), 1),
(1946, self.umap['floods'].flush, (), 2),
(1967, self.umap['floods'].set_channel, ('C7', 52, False), 1),
(1967, self.umap['floods'].flush, (), 2),
(1989, self.umap['floods'].set_channel, ('C7', 53, False), 1),
(1989, self.umap['floods'].flush, (), 2),
(2000, self.umap['tree'].set_channel, (0, 0, False), 1),
(2000, self.umap['tree'].set_channel, (1, 100, False), 1),
(2000, self.umap['tree'].flush, (), 2),
(2010, self.umap['floods'].set_channel, ('C7', 54, False), 1),
(2010, self.umap['floods'].flush, (), 2),
(2032, self.umap['floods'].set_channel, ('C7', 55, False), 1),
(2032, self.umap['floods'].flush, (), 2),
(2053, self.umap['floods'].set_channel, ('C7', 56, False), 1),
(2053, self.umap['floods'].flush, (), 2),
(2075, self.umap['floods'].set_channel, ('C7', 57, False), 1),
(2075, self.umap['floods'].flush, (), 2),
(2096, self.umap['floods'].set_channel, ('C7', 58, False), 1),
(2096, self.umap['floods'].flush, (), 2),
(2118, self.umap['floods'].set_channel, ('C7', 59, False), 1),
(2118, self.umap['floods'].flush, (), 2),
(2139, self.umap['floods'].set_channel, ('C7', 60, False), 1),
(2139, self.umap['floods'].flush, (), 2),
(2161, self.umap['floods'].set_channel, ('C7', 61, False), 1),
(2161, self.umap['floods'].flush, (), 2),
(2182, self.umap['floods'].set_channel, ('C7', 62, False), 1),
(2182, self.umap['floods'].flush, (), 2),
(2204, self.umap['floods'].set_channel, ('C7', 63, False), 1),
(2204, self.umap['floods'].flush, (), 2),
(2225, self.umap['floods'].set_channel, ('C7', 64, False), 1),
(2225, self.umap['floods'].flush, (), 2),
(2247, self.umap['floods'].set_channel, ('C7', 65, False), 1),
(2247, self.umap['floods'].flush, (), 2),
(2268, self.umap['floods'].set_channel, ('C7', 66, False), 1),
(2268, self.umap['floods'].flush, (), 2),
(2290, self.umap['floods'].set_channel, ('C7', 67, False), 1),
(2290, self.umap['floods'].flush, (), 2),
(2311, self.umap['floods'].set_channel, ('C7', 68, False), 1),
(2311, self.umap['floods'].flush, (), 2),
(2333, self.umap['floods'].set_channel, ('C7', 69, False), 1),
(2333, self.umap['floods'].flush, (), 2),
(2354, self.umap['floods'].set_channel, ('C7', 70, False), 1),
(2354, self.umap['floods'].flush, (), 2),
(2376, self.umap['floods'].set_channel, ('C7', 71, False), 1),
(2376, self.umap['floods'].flush, (), 2),
(2397, self.umap['floods'].set_channel, ('C7', 72, False), 1),
(2397, self.umap['floods'].flush, (), 2),
(2419, self.umap['floods'].set_channel, ('C7', 73, False), 1),
(2419, self.umap['floods'].flush, (), 2),
(2440, self.umap['floods'].set_channel, ('C7', 74, False), 1),
(2440, self.umap['floods'].flush, (), 2),
(2462, self.umap['floods'].set_channel, ('C7', 75, False), 1),
(2462, self.umap['floods'].flush, (), 2),
(2483, self.umap['floods'].set_channel, ('C7', 76, False), 1),
(2483, self.umap['floods'].flush, (), 2),
(2505, self.umap['floods'].set_channel, ('C7', 77, False), 1),
(2505, self.umap['floods'].flush, (), 2),
(2526, self.umap['floods'].set_channel, ('C7', 78, False), 1),
(2526, self.umap['floods'].flush, (), 2),
(2548, self.umap['floods'].set_channel, ('C7', 79, False), 1),
(2548, self.umap['floods'].flush, (), 2),
(2569, self.umap['floods'].set_channel, ('C7', 80, False), 1),
(2569, self.umap['floods'].flush, (), 2),
(2591, self.umap['floods'].set_channel, ('C7', 81, False), 1),
(2591, self.umap['floods'].flush, (), 2),
(2612, self.umap['floods'].set_channel, ('C7', 82, False), 1),
(2612, self.umap['floods'].flush, (), 2),
(2634, self.umap['floods'].set_channel, ('C7', 83, False), 1),
(2634, self.umap['floods'].flush, (), 2),
(2655, self.umap['floods'].set_channel, ('C7', 84, False), 1),
(2655, self.umap['floods'].flush, (), 2),
(2677, self.umap['floods'].set_channel, ('C7', 85, False), 1),
(2677, self.umap['floods'].flush, (), 2),
(2698, self.umap['floods'].set_channel, ('C7', 86, False), 1),
(2698, self.umap['floods'].flush, (), 2),
(2720, self.umap['floods'].set_channel, ('C7', 87, False), 1),
(2720, self.umap['floods'].flush, (), 2),
(2741, self.umap['floods'].set_channel, ('C7', 88, False), 1),
(2741, self.umap['floods'].flush, (), 2),
(2763, self.umap['floods'].set_channel, ('C7', 89, False), 1),
(2763, self.umap['floods'].flush, (), 2),
(2784, self.umap['floods'].set_channel, ('C7', 90, False), 1),
(2784, self.umap['floods'].flush, (), 2),
(2806, self.umap['floods'].set_channel, ('C7', 91, False), 1),
(2806, self.umap['floods'].flush, (), 2),
(2827, self.umap['floods'].set_channel, ('C7', 92, False), 1),
(2827, self.umap['floods'].flush, (), 2),
(2849, self.umap['floods'].set_channel, ('C7', 93, False), 1),
(2849, self.umap['floods'].flush, (), 2),
(2870, self.umap['floods'].set_channel, ('C7', 94, False), 1),
(2870, self.umap['floods'].flush, (), 2),
(2892, self.umap['floods'].set_channel, ('C7', 95, False), 1),
(2892, self.umap['floods'].flush, (), 2),
(2913, self.umap['floods'].set_channel, ('C7', 96, False), 1),
(2913, self.umap['floods'].flush, (), 2),
(2935, self.umap['floods'].set_channel, ('C7', 97, False), 1),
(2935, self.umap['floods'].flush, (), 2),
(2956, self.umap['floods'].set_channel, ('C7', 98, False), 1),
(2956, self.umap['floods'].flush, (), 2),
(2978, self.umap['floods'].set_channel, ('C7', 99, False), 1),
(2978, self.umap['floods'].flush, (), 2),
(3000, self.umap['floods'].set_channel, ('C7', 100, False), 1),
(3000, self.umap['tree'].set_channel, (1, 0, False), 1),
(3000, self.umap['tree'].set_channel, (2, 100, False), 1),
(3000, self.umap['floods'].flush, (), 2),
(3000, self.umap['tree'].flush, (), 2),
(4000, self.umap['tree'].set_channel, (2, 0, False), 1),
(4000, self.umap['tree'].set_channel, (3, 100, False), 1),
(4000, self.umap['tree'].flush, (), 2),
(5000, self.umap['tree'].set_channel, (0, 1, False), 1),
(5000, self.umap['tree'].flush, (), 2),
(5010, self.umap['tree'].set_channel, (0, 2, False), 1),
(5010, self.umap['tree'].flush, (), 2),
(5020, self.umap['tree'].set_channel, (0, 3, False), 1),
(5020, self.umap['tree'].flush, (), 2),
(5030, self.umap['tree'].set_channel, (0, 4, False), 1),
(5030, self.umap['tree'].flush, (), 2),
(5040, self.umap['tree'].set_channel, (0, 5, False), 1),
(5040, self.umap['tree'].flush, (), 2),
(5050, self.umap['tree'].set_channel, (0, 6, False), 1),
(5050, self.umap['tree'].flush, (), 2),
(5060, self.umap['tree'].set_channel, (0, 7, False), 1),
(5060, self.umap['tree'].flush, (), 2),
(5070, self.umap['tree'].set_channel, (0, 8, False), 1),
(5070, self.umap['tree'].flush, (), 2),
(5080, self.umap['tree'].set_channel, (0, 9, False), 1),
(5080, self.umap['tree'].flush, (), 2),
(5090, self.umap['tree'].set_channel, (0, 10, False), 1),
(5090, self.umap['tree'].flush, (), 2),
(5101, self.umap['tree'].set_channel, (0, 11, False), 1),
(5101, self.umap['tree'].flush, (), 2),
(5111, self.umap['tree'].set_channel, (0, 12, False), 1),
(5111, self.umap['tree'].flush, (), 2),
(5121, self.umap['tree'].set_channel, (0, 13, False), 1),
(5121, self.umap['tree'].flush, (), 2),
(5131, self.umap['tree'].set_channel, (0, 14, False), 1),
(5131, self.umap['tree'].flush, (), 2),
(5141, self.umap['tree'].set_channel, (0, 15, False), 1),
(5141, self.umap['tree'].flush, (), 2),
(5151, self.umap['tree'].set_channel, (0, 16, False), 1),
(5151, self.umap['tree'].flush, (), 2),
(5161, self.umap['tree'].set_channel, (0, 17, False), 1),
(5161, self.umap['tree'].flush, (), 2),
(5171, self.umap['tree'].set_channel, (0, 18, False), 1),
(5171, self.umap['tree'].flush, (), 2),
(5181, self.umap['tree'].set_channel, (0, 19, False), 1),
(5181, self.umap['tree'].flush, (), 2),
(5191, self.umap['tree'].set_channel, (0, 20, False), 1),
(5191, self.umap['tree'].flush, (), 2),
(5202, self.umap['tree'].set_channel, (0, 21, False), 1),
(5202, self.umap['tree'].flush, (), 2),
(5212, self.umap['tree'].set_channel, (0, 22, False), 1),
(5212, self.umap['tree'].flush, (), 2),
(5222, self.umap['tree'].set_channel, (0, 23, False), 1),
(5222, self.umap['tree'].flush, (), 2),
(5232, self.umap['tree'].set_channel, (0, 24, False), 1),
(5232, self.umap['tree'].flush, (), 2),
(5242, self.umap['tree'].set_channel, (0, 25, False), 1),
(5242, self.umap['tree'].flush, (), 2),
(5252, self.umap['tree'].set_channel, (0, 26, False), 1),
(5252, self.umap['tree'].flush, (), 2),
(5262, self.umap['tree'].set_channel, (0, 27, False), 1),
(5262, self.umap['tree'].flush, (), 2),
(5272, self.umap['tree'].set_channel, (0, 28, False), 1),
(5272, self.umap['tree'].flush, (), 2),
(5282, self.umap['tree'].set_channel, (0, 29, False), 1),
(5282, self.umap['tree'].flush, (), 2),
(5292, self.umap['tree'].set_channel, (0, 30, False), 1),
(5292, self.umap['tree'].flush, (), 2),
(5303, self.umap['tree'].set_channel, (0, 31, False), 1),
(5303, self.umap['tree'].flush, (), 2),
(5313, self.umap['tree'].set_channel, (0, 32, False), 1),
(5313, self.umap['tree'].flush, (), 2),
(5323, self.umap['tree'].set_channel, (0, 33, False), 1),
(5323, self.umap['tree'].flush, (), 2),
(5333, self.umap['tree'].set_channel, (0, 34, False), 1),
(5333, self.umap['tree'].flush, (), 2),
(5343, self.umap['tree'].set_channel, (0, 35, False), 1),
(5343, self.umap['tree'].flush, (), 2),
(5353, self.umap['tree'].set_channel, (0, 36, False), 1),
(5353, self.umap['tree'].flush, (), 2),
(5363, self.umap['tree'].set_channel, (0, 37, False), 1),
(5363, self.umap['tree'].flush, (), 2),
(5373, self.umap['tree'].set_channel, (0, 38, False), 1),
(5373, self.umap['tree'].flush, (), 2),
(5383, self.umap['tree'].set_channel, (0, 39, False), 1),
(5383, self.umap['tree'].flush, (), 2),
(5393, self.umap['tree'].set_channel, (0, 40, False), 1),
(5393, self.umap['tree'].flush, (), 2),
(5404, self.umap['tree'].set_channel, (0, 41, False), 1),
(5404, self.umap['tree'].flush, (), 2),
(5414, self.umap['tree'].set_channel, (0, 42, False), 1),
(5414, self.umap['tree'].flush, (), 2),
(5424, self.umap['tree'].set_channel, (0, 43, False), 1),
(5424, self.umap['tree'].flush, (), 2),
(5434, self.umap['tree'].set_channel, (0, 44, False), 1),
(5434, self.umap['tree'].flush, (), 2),
(5444, self.umap['tree'].set_channel, (0, 45, False), 1),
(5444, self.umap['tree'].flush, (), 2),
(5454, self.umap['tree'].set_channel, (0, 46, False), 1),
(5454, self.umap['tree'].flush, (), 2),
(5464, self.umap['tree'].set_channel, (0, 47, False), 1),
(5464, self.umap['tree'].flush, (), 2),
(5474, self.umap['tree'].set_channel, (0, 48, False), 1),
(5474, self.umap['tree'].flush, (), 2),
(5484, self.umap['tree'].set_channel, (0, 49, False), 1),
(5484, self.umap['tree'].flush, (), 2),
(5494, self.umap['tree'].set_channel, (0, 50, False), 1),
(5494, self.umap['tree'].flush, (), 2),
(5505, self.umap['tree'].set_channel, (0, 51, False), 1),
(5505, self.umap['tree'].flush, (), 2),
(5515, self.umap['tree'].set_channel, (0, 52, False), 1),
(5515, self.umap['tree'].flush, (), 2),
(5525, self.umap['tree'].set_channel, (0, 53, False), 1),
(5525, self.umap['tree'].flush, (), 2),
(5535, self.umap['tree'].set_channel, (0, 54, False), 1),
(5535, self.umap['tree'].flush, (), 2),
(5545, self.umap['tree'].set_channel, (0, 55, False), 1),
(5545, self.umap['tree'].flush, (), 2),
(5555, self.umap['tree'].set_channel, (0, 56, False), 1),
(5555, self.umap['tree'].flush, (), 2),
(5565, self.umap['tree'].set_channel, (0, 57, False), 1),
(5565, self.umap['tree'].flush, (), 2),
(5575, self.umap['tree'].set_channel, (0, 58, False), 1),
(5575, self.umap['tree'].flush, (), 2),
(5585, self.umap['tree'].set_channel, (0, 59, False), 1),
(5585, self.umap['tree'].flush, (), 2),
(5595, self.umap['tree'].set_channel, (0, 60, False), 1),
(5595, self.umap['tree'].flush, (), 2),
(5606, self.umap['tree'].set_channel, (0, 61, False), 1),
(5606, self.umap['tree'].flush, (), 2),
(5616, self.umap['tree'].set_channel, (0, 62, False), 1),
(5616, self.umap['tree'].flush, (), 2),
(5626, self.umap['tree'].set_channel, (0, 63, False), 1),
(5626, self.umap['tree'].flush, (), 2),
(5636, self.umap['tree'].set_channel, (0, 64, False), 1),
(5636, self.umap['tree'].flush, (), 2),
(5646, self.umap['tree'].set_channel, (0, 65, False), 1),
(5646, self.umap['tree'].flush, (), 2),
(5656, self.umap['tree'].set_channel, (0, 66, False), 1),
(5656, self.umap['tree'].flush, (), 2),
(5666, self.umap['tree'].set_channel, (0, 67, False), 1),
(5666, self.umap['tree'].flush, (), 2),
(5676, self.umap['tree'].set_channel, (0, 68, False), 1),
(5676, self.umap['tree'].flush, (), 2),
(5686, self.umap['tree'].set_channel, (0, 69, False), 1),
(5686, self.umap['tree'].flush, (), 2),
(5696, self.umap['tree'].set_channel, (0, 70, False), 1),
(5696, self.umap['tree'].flush, (), 2),
(5707, self.umap['tree'].set_channel, (0, 71, False), 1),
(5707, self.umap['tree'].flush, (), 2),
(5717, self.umap['tree'].set_channel, (0, 72, False), 1),
(5717, self.umap['tree'].flush, (), 2),
(5727, self.umap['tree'].set_channel, (0, 73, False), 1),
(5727, self.umap['tree'].flush, (), 2),
(5737, self.umap['tree'].set_channel, (0, 74, False), 1),
(5737, self.umap['tree'].flush, (), 2),
(5747, self.umap['tree'].set_channel, (0, 75, False), 1),
(5747, self.umap['tree'].flush, (), 2),
(5757, self.umap['tree'].set_channel, (0, 76, False), 1),
(5757, self.umap['tree'].flush, (), 2),
(5767, self.umap['tree'].set_channel, (0, 77, False), 1),
(5767, self.umap['tree'].flush, (), 2),
(5777, self.umap['tree'].set_channel, (0, 78, False), 1),
(5777, self.umap['tree'].flush, (), 2),
(5787, self.umap['tree'].set_channel, (0, 79, False), 1),
(5787, self.umap['tree'].flush, (), 2),
(5797, self.umap['tree'].set_channel, (0, 80, False), 1),
(5797, self.umap['tree'].flush, (), 2),
(5808, self.umap['tree'].set_channel, (0, 81, False), 1),
(5808, self.umap['tree'].flush, (), 2),
(5818, self.umap['tree'].set_channel, (0, 82, False), 1),
(5818, self.umap['tree'].flush, (), 2),
(5828, self.umap['tree'].set_channel, (0, 83, False), 1),
(5828, self.umap['tree'].flush, (), 2),
(5838, self.umap['tree'].set_channel, (0, 84, False), 1),
(5838, self.umap['tree'].flush, (), 2),
(5848, self.umap['tree'].set_channel, (0, 85, False), 1),
(5848, self.umap['tree'].flush, (), 2),
(5858, self.umap['tree'].set_channel, (0, 86, False), 1),
(5858, self.umap['tree'].flush, (), 2),
(5868, self.umap['tree'].set_channel, (0, 87, False), 1),
(5868, self.umap['tree'].flush, (), 2),
(5878, self.umap['tree'].set_channel, (0, 88, False), 1),
(5878, self.umap['tree'].flush, (), 2),
(5888, self.umap['tree'].set_channel, (0, 89, False), 1),
(5888, self.umap['tree'].flush, (), 2),
(5898, self.umap['tree'].set_channel, (0, 90, False), 1),
(5898, self.umap['tree'].flush, (), 2),
(5909, self.umap['tree'].set_channel, (0, 91, False), 1),
(5909, self.umap['tree'].flush, (), 2),
(5919, self.umap['tree'].set_channel, (0, 92, False), 1),
(5919, self.umap['tree'].flush, (), 2),
(5929, self.umap['tree'].set_channel, (0, 93, False), 1),
(5929, self.umap['tree'].flush, (), 2),
(5939, self.umap['tree'].set_channel, (0, 94, False), 1),
(5939, self.umap['tree'].flush, (), 2),
(5949, self.umap['tree'].set_channel, (0, 95, False), 1),
(5949, self.umap['tree'].flush, (), 2),
(5959, self.umap['tree'].set_channel, (0, 96, False), 1),
(5959, self.umap['tree'].flush, (), 2),
(5969, self.umap['tree'].set_channel, (0, 97, False), 1),
(5969, self.umap['tree'].flush, (), 2),
(5979, self.umap['tree'].set_channel, (0, 98, False), 1),
(5979, self.umap['tree'].flush, (), 2),
(5989, self.umap['tree'].set_channel, (0, 99, False), 1),
(5989, self.umap['tree'].flush, (), 2),
(6000, self.umap['tree'].set_channel, (0, 100, False), 1),
(6000, self.umap['tree'].set_channel, (1, 1, False), 1),
(6000, self.umap['tree'].flush, (), 2),
(6010, self.umap['tree'].set_channel, (1, 2, False), 1),
(6010, self.umap['tree'].flush, (), 2),
(6020, self.umap['tree'].set_channel, (1, 3, False), 1),
(6020, self.umap['tree'].flush, (), 2),
(6030, self.umap['tree'].set_channel, (1, 4, False), 1),
(6030, self.umap['tree'].flush, (), 2),
(6040, self.umap['tree'].set_channel, (1, 5, False), 1),
(6040, self.umap['tree'].flush, (), 2),
(6050, self.umap['tree'].set_channel, (1, 6, False), 1),
(6050, self.umap['tree'].flush, (), 2),
(6060, self.umap['tree'].set_channel, (1, 7, False), 1),
(6060, self.umap['tree'].flush, (), 2),
(6070, self.umap['tree'].set_channel, (1, 8, False), 1),
(6070, self.umap['tree'].flush, (), 2),
(6080, self.umap['tree'].set_channel, (1, 9, False), 1),
(6080, self.umap['tree'].flush, (), 2),
(6090, self.umap['tree'].set_channel, (1, 10, False), 1),
(6090, self.umap['tree'].flush, (), 2),
(6101, self.umap['tree'].set_channel, (1, 11, False), 1),
(6101, self.umap['tree'].flush, (), 2),
(6111, self.umap['tree'].set_channel, (1, 12, False), 1),
(6111, self.umap['tree'].flush, (), 2),
(6121, self.umap['tree'].set_channel, (1, 13, False), 1),
(6121, self.umap['tree'].flush, (), 2),
(6131, self.umap['tree'].set_channel, (1, 14, False), 1),
(6131, self.umap['tree'].flush, (), 2),
(6141, self.umap['tree'].set_channel, (1, 15, False), 1),
(6141, self.umap['tree'].flush, (), 2),
(6151, self.umap['tree'].set_channel, (1, 16, False), 1),
(6151, self.umap['tree'].flush, (), 2),
(6161, self.umap['tree'].set_channel, (1, 17, False), 1),
(6161, self.umap['tree'].flush, (), 2),
(6171, self.umap['tree'].set_channel, (1, 18, False), 1),
(6171, self.umap['tree'].flush, (), 2),
(6181, self.umap['tree'].set_channel, (1, 19, False), 1),
(6181, self.umap['tree'].flush, (), 2),
(6191, self.umap['tree'].set_channel, (1, 20, False), 1),
(6191, self.umap['tree'].flush, (), 2),
(6202, self.umap['tree'].set_channel, (1, 21, False), 1),
(6202, self.umap['tree'].flush, (), 2),
(6212, self.umap['tree'].set_channel, (1, 22, False), 1),
(6212, self.umap['tree'].flush, (), 2),
(6222, self.umap['tree'].set_channel, (1, 23, False), 1),
(6222, self.umap['tree'].flush, (), 2),
(6232, self.umap['tree'].set_channel, (1, 24, False), 1),
(6232, self.umap['tree'].flush, (), 2),
(6242, self.umap['tree'].set_channel, (1, 25, False), 1),
(6242, self.umap['tree'].flush, (), 2),
(6252, self.umap['tree'].set_channel, (1, 26, False), 1),
(6252, self.umap['tree'].flush, (), 2),
(6262, self.umap['tree'].set_channel, (1, 27, False), 1),
(6262, self.umap['tree'].flush, (), 2),
(6272, self.umap['tree'].set_channel, (1, 28, False), 1),
(6272, self.umap['tree'].flush, (), 2),
(6282, self.umap['tree'].set_channel, (1, 29, False), 1),
(6282, self.umap['tree'].flush, (), 2),
(6292, self.umap['tree'].set_channel, (1, 30, False), 1),
(6292, self.umap['tree'].flush, (), 2),
(6303, self.umap['tree'].set_channel, (1, 31, False), 1),
(6303, self.umap['tree'].flush, (), 2),
(6313, self.umap['tree'].set_channel, (1, 32, False), 1),
(6313, self.umap['tree'].flush, (), 2),
(6323, self.umap['tree'].set_channel, (1, 33, False), 1),
(6323, self.umap['tree'].flush, (), 2),
(6333, self.umap['tree'].set_channel, (1, 34, False), 1),
(6333, self.umap['tree'].flush, (), 2),
(6343, self.umap['tree'].set_channel, (1, 35, False), 1),
(6343, self.umap['tree'].flush, (), 2),
(6353, self.umap['tree'].set_channel, (1, 36, False), 1),
(6353, self.umap['tree'].flush, (), 2),
(6363, self.umap['tree'].set_channel, (1, 37, False), 1),
(6363, self.umap['tree'].flush, (), 2),
(6373, self.umap['tree'].set_channel, (1, 38, False), 1),
(6373, self.umap['tree'].flush, (), 2),
(6383, self.umap['tree'].set_channel, (1, 39, False), 1),
(6383, self.umap['tree'].flush, (), 2),
(6393, self.umap['tree'].set_channel, (1, 40, False), 1),
(6393, self.umap['tree'].flush, (), 2),
(6404, self.umap['tree'].set_channel, (1, 41, False), 1),
(6404, self.umap['tree'].flush, (), 2),
(6414, self.umap['tree'].set_channel, (1, 42, False), 1),
(6414, self.umap['tree'].flush, (), 2),
(6424, self.umap['tree'].set_channel, (1, 43, False), 1),
(6424, self.umap['tree'].flush, (), 2),
(6434, self.umap['tree'].set_channel, (1, 44, False), 1),
(6434, self.umap['tree'].flush, (), 2),
(6444, self.umap['tree'].set_channel, (1, 45, False), 1),
(6444, self.umap['tree'].flush, (), 2),
(6454, self.umap['tree'].set_channel, (1, 46, False), 1),
(6454, self.umap['tree'].flush, (), 2),
(6464, self.umap['tree'].set_channel, (1, 47, False), 1),
(6464, self.umap['tree'].flush, (), 2),
(6474, self.umap['tree'].set_channel, (1, 48, False), 1),
(6474, self.umap['tree'].flush, (), 2),
(6484, self.umap['tree'].set_channel, (1, 49, False), 1),
(6484, self.umap['tree'].flush, (), 2),
(6494, self.umap['tree'].set_channel, (1, 50, False), 1),
(6494, self.umap['tree'].flush, (), 2),
(6505, self.umap['tree'].set_channel, (1, 51, False), 1),
(6505, self.umap['tree'].flush, (), 2),
(6515, self.umap['tree'].set_channel, (1, 52, False), 1),
(6515, self.umap['tree'].flush, (), 2),
(6525, self.umap['tree'].set_channel, (1, 53, False), 1),
(6525, self.umap['tree'].flush, (), 2),
(6535, self.umap['tree'].set_channel, (1, 54, False), 1),
(6535, self.umap['tree'].flush, (), 2),
(6545, self.umap['tree'].set_channel, (1, 55, False), 1),
(6545, self.umap['tree'].flush, (), 2),
(6555, self.umap['tree'].set_channel, (1, 56, False), 1),
(6555, self.umap['tree'].flush, (), 2),
(6565, self.umap['tree'].set_channel, (1, 57, False), 1),
(6565, self.umap['tree'].flush, (), 2),
(6575, self.umap['tree'].set_channel, (1, 58, False), 1),
(6575, self.umap['tree'].flush, (), 2),
(6585, self.umap['tree'].set_channel, (1, 59, False), 1),
(6585, self.umap['tree'].flush, (), 2),
(6595, self.umap['tree'].set_channel, (1, 60, False), 1),
(6595, self.umap['tree'].flush, (), 2),
(6606, self.umap['tree'].set_channel, (1, 61, False), 1),
(6606, self.umap['tree'].flush, (), 2),
(6616, self.umap['tree'].set_channel, (1, 62, False), 1),
(6616, self.umap['tree'].flush, (), 2),
(6626, self.umap['tree'].set_channel, (1, 63, False), 1),
(6626, self.umap['tree'].flush, (), 2),
(6636, self.umap['tree'].set_channel, (1, 64, False), 1),
(6636, self.umap['tree'].flush, (), 2),
(6646, self.umap['tree'].set_channel, (1, 65, False), 1),
(6646, self.umap['tree'].flush, (), 2),
(6656, self.umap['tree'].set_channel, (1, 66, False), 1),
(6656, self.umap['tree'].flush, (), 2),
(6666, self.umap['tree'].set_channel, (1, 67, False), 1),
(6666, self.umap['tree'].flush, (), 2),
(6676, self.umap['tree'].set_channel, (1, 68, False), 1),
(6676, self.umap['tree'].flush, (), 2),
(6686, self.umap['tree'].set_channel, (1, 69, False), 1),
(6686, self.umap['tree'].flush, (), 2),
(6696, self.umap['tree'].set_channel, (1, 70, False), 1),
(6696, self.umap['tree'].flush, (), 2),
(6707, self.umap['tree'].set_channel, (1, 71, False), 1),
(6707, self.umap['tree'].flush, (), 2),
(6717, self.umap['tree'].set_channel, (1, 72, False), 1),
(6717, self.umap['tree'].flush, (), 2),
(6727, self.umap['tree'].set_channel, (1, 73, False), 1),
(6727, self.umap['tree'].flush, (), 2),
(6737, self.umap['tree'].set_channel, (1, 74, False), 1),
(6737, self.umap['tree'].flush, (), 2),
(6747, self.umap['tree'].set_channel, (1, 75, False), 1),
(6747, self.umap['tree'].flush, (), 2),
(6757, self.umap['tree'].set_channel, (1, 76, False), 1),
(6757, self.umap['tree'].flush, (), 2),
(6767, self.umap['tree'].set_channel, (1, 77, False), 1),
(6767, self.umap['tree'].flush, (), 2),
(6777, self.umap['tree'].set_channel, (1, 78, False), 1),
(6777, self.umap['tree'].flush, (), 2),
(6787, self.umap['tree'].set_channel, (1, 79, False), 1),
(6787, self.umap['tree'].flush, (), 2),
(6797, self.umap['tree'].set_channel, (1, 80, False), 1),
(6797, self.umap['tree'].flush, (), 2),
(6808, self.umap['tree'].set_channel, (1, 81, False), 1),
(6808, self.umap['tree'].flush, (), 2),
(6818, self.umap['tree'].set_channel, (1, 82, False), 1),
(6818, self.umap['tree'].flush, (), 2),
(6828, self.umap['tree'].set_channel, (1, 83, False), 1),
(6828, self.umap['tree'].flush, (), 2),
(6838, self.umap['tree'].set_channel, (1, 84, False), 1),
(6838, self.umap['tree'].flush, (), 2),
(6848, self.umap['tree'].set_channel, (1, 85, False), 1),
(6848, self.umap['tree'].flush, (), 2),
(6858, self.umap['tree'].set_channel, (1, 86, False), 1),
(6858, self.umap['tree'].flush, (), 2),
(6868, self.umap['tree'].set_channel, (1, 87, False), 1),
(6868, self.umap['tree'].flush, (), 2),
(6878, self.umap['tree'].set_channel, (1, 88, False), 1),
(6878, self.umap['tree'].flush, (), 2),
(6888, self.umap['tree'].set_channel, (1, 89, False), 1),
(6888, self.umap['tree'].flush, (), 2),
(6898, self.umap['tree'].set_channel, (1, 90, False), 1),
(6898, self.umap['tree'].flush, (), 2),
(6909, self.umap['tree'].set_channel, (1, 91, False), 1),
(6909, self.umap['tree'].flush, (), 2),
(6919, self.umap['tree'].set_channel, (1, 92, False), 1),
(6919, self.umap['tree'].flush, (), 2),
(6929, self.umap['tree'].set_channel, (1, 93, False), 1),
(6929, self.umap['tree'].flush, (), 2),
(6939, self.umap['tree'].set_channel, (1, 94, False), 1),
(6939, self.umap['tree'].flush, (), 2),
(6949, self.umap['tree'].set_channel, (1, 95, False), 1),
(6949, self.umap['tree'].flush, (), 2),
(6959, self.umap['tree'].set_channel, (1, 96, False), 1),
(6959, self.umap['tree'].flush, (), 2),
(6969, self.umap['tree'].set_channel, (1, 97, False), 1),
(6969, self.umap['tree'].flush, (), 2),
(6979, self.umap['tree'].set_channel, (1, 98, False), 1),
(6979, self.umap['tree'].flush, (), 2),
(6989, self.umap['tree'].set_channel, (1, 99, False), 1),
(6989, self.umap['tree'].flush, (), 2),
(7000, self.umap['floods'].set_channel, ('C7', 46, False), 1),
(7000, self.umap['tree'].set_channel, (1, 100, False), 1),
(7000, self.umap['tree'].set_channel, (2, 1, False), 1),
(7000, self.umap['floods'].flush, (), 2),
(7000, self.umap['tree'].flush, (), 2),
(7010, self.umap['tree'].set_channel, (2, 2, False), 1),
(7010, self.umap['tree'].flush, (), 2),
(7020, self.umap['tree'].set_channel, (2, 3, False), 1),
(7020, self.umap['tree'].flush, (), 2),
(7030, self.umap['tree'].set_channel, (2, 4, False), 1),
(7030, self.umap['tree'].flush, (), 2),
(7040, self.umap['tree'].set_channel, (2, 5, False), 1),
(7040, self.umap['tree'].flush, (), 2),
(7050, self.umap['tree'].set_channel, (2, 6, False), 1),
(7050, self.umap['tree'].flush, (), 2),
(7060, self.umap['tree'].set_channel, (2, 7, False), 1),
(7060, self.umap['tree'].flush, (), 2),
(7070, self.umap['tree'].set_channel, (2, 8, False), 1),
(7070, self.umap['tree'].flush, (), 2),
(7080, self.umap['tree'].set_channel, (2, 9, False), 1),
(7080, self.umap['tree'].flush, (), 2),
(7090, self.umap['tree'].set_channel, (2, 10, False), 1),
(7090, self.umap['tree'].flush, (), 2),
(7101, self.umap['tree'].set_channel, (2, 11, False), 1),
(7101, self.umap['tree'].flush, (), 2),
(7111, self.umap['tree'].set_channel, (2, 12, False), 1),
(7111, self.umap['tree'].flush, (), 2),
(7121, self.umap['tree'].set_channel, (2, 13, False), 1),
(7121, self.umap['tree'].flush, (), 2),
(7131, self.umap['tree'].set_channel, (2, 14, False), 1),
(7131, self.umap['tree'].flush, (), 2),
(7141, self.umap['tree'].set_channel, (2, 15, False), 1),
(7141, self.umap['tree'].flush, (), 2),
(7151, self.umap['tree'].set_channel, (2, 16, False), 1),
(7151, self.umap['tree'].flush, (), 2),
(7161, self.umap['tree'].set_channel, (2, 17, False), 1),
(7161, self.umap['tree'].flush, (), 2),
(7171, self.umap['tree'].set_channel, (2, 18, False), 1),
(7171, self.umap['tree'].flush, (), 2),
(7181, self.umap['tree'].set_channel, (2, 19, False), 1),
(7181, self.umap['tree'].flush, (), 2),
(7191, self.umap['tree'].set_channel, (2, 20, False), 1),
(7191, self.umap['tree'].flush, (), 2),
(7202, self.umap['tree'].set_channel, (2, 21, False), 1),
(7202, self.umap['tree'].flush, (), 2),
(7212, self.umap['tree'].set_channel, (2, 22, False), 1),
(7212, self.umap['tree'].flush, (), 2),
(7222, self.umap['tree'].set_channel, (2, 23, False), 1),
(7222, self.umap['tree'].flush, (), 2),
(7232, self.umap['tree'].set_channel, (2, 24, False), 1),
(7232, self.umap['tree'].flush, (), 2),
(7242, self.umap['tree'].set_channel, (2, 25, False), 1),
(7242, self.umap['tree'].flush, (), 2),
(7252, self.umap['tree'].set_channel, (2, 26, False), 1),
(7252, self.umap['tree'].flush, (), 2),
(7262, self.umap['tree'].set_channel, (2, 27, False), 1),
(7262, self.umap['tree'].flush, (), 2),
(7272, self.umap['tree'].set_channel, (2, 28, False), 1),
(7272, self.umap['tree'].flush, (), 2),
(7282, self.umap['tree'].set_channel, (2, 29, False), 1),
(7282, self.umap['tree'].flush, (), 2),
(7292, self.umap['tree'].set_channel, (2, 30, False), 1),
(7292, self.umap['tree'].flush, (), 2),
(7303, self.umap['tree'].set_channel, (2, 31, False), 1),
(7303, self.umap['tree'].flush, (), 2),
(7313, self.umap['tree'].set_channel, (2, 32, False), 1),
(7313, self.umap['tree'].flush, (), 2),
(7323, self.umap['tree'].set_channel, (2, 33, False), 1),
(7323, self.umap['tree'].flush, (), 2),
(7333, self.umap['tree'].set_channel, (2, 34, False), 1),
(7333, self.umap['tree'].flush, (), 2),
(7343, self.umap['tree'].set_channel, (2, 35, False), 1),
(7343, self.umap['tree'].flush, (), 2),
(7353, self.umap['tree'].set_channel, (2, 36, False), 1),
(7353, self.umap['tree'].flush, (), 2),
(7363, self.umap['tree'].set_channel, (2, 37, False), 1),
(7363, self.umap['tree'].flush, (), 2),
(7373, self.umap['tree'].set_channel, (2, 38, False), 1),
(7373, self.umap['tree'].flush, (), 2),
(7383, self.umap['tree'].set_channel, (2, 39, False), 1),
(7383, self.umap['tree'].flush, (), 2),
(7393, self.umap['tree'].set_channel, (2, 40, False), 1),
(7393, self.umap['tree'].flush, (), 2),
(7404, self.umap['tree'].set_channel, (2, 41, False), 1),
(7404, self.umap['tree'].flush, (), 2),
(7414, self.umap['tree'].set_channel, (2, 42, False), 1),
(7414, self.umap['tree'].flush, (), 2),
(7424, self.umap['tree'].set_channel, (2, 43, False), 1),
(7424, self.umap['tree'].flush, (), 2),
(7434, self.umap['tree'].set_channel, (2, 44, False), 1),
(7434, self.umap['tree'].flush, (), 2),
(7444, self.umap['tree'].set_channel, (2, 45, False), 1),
(7444, self.umap['tree'].flush, (), 2),
(7454, self.umap['tree'].set_channel, (2, 46, False), 1),
(7454, self.umap['tree'].flush, (), 2),
(7464, self.umap['tree'].set_channel, (2, 47, False), 1),
(7464, self.umap['tree'].flush, (), 2),
(7474, self.umap['tree'].set_channel, (2, 48, False), 1),
(7474, self.umap['tree'].flush, (), 2),
(7484, self.umap['tree'].set_channel, (2, 49, False), 1),
(7484, self.umap['tree'].flush, (), 2),
(7494, self.umap['tree'].set_channel, (2, 50, False), 1),
(7494, self.umap['tree'].flush, (), 2),
(7505, self.umap['tree'].set_channel, (2, 51, False), 1),
(7505, self.umap['tree'].flush, (), 2),
(7515, self.umap['tree'].set_channel, (2, 52, False), 1),
(7515, self.umap['tree'].flush, (), 2),
(7525, self.umap['tree'].set_channel, (2, 53, False), 1),
(7525, self.umap['tree'].flush, (), 2),
(7535, self.umap['tree'].set_channel, (2, 54, False), 1),
(7535, self.umap['tree'].flush, (), 2),
(7545, self.umap['tree'].set_channel, (2, 55, False), 1),
(7545, self.umap['tree'].flush, (), 2),
(7555, self.umap['tree'].set_channel, (2, 56, False), 1),
(7555, self.umap['tree'].flush, (), 2),
(7565, self.umap['tree'].set_channel, (2, 57, False), 1),
(7565, self.umap['tree'].flush, (), 2),
(7575, self.umap['tree'].set_channel, (2, 58, False), 1),
(7575, self.umap['tree'].flush, (), 2),
(7585, self.umap['tree'].set_channel, (2, 59, False), 1),
(7585, self.umap['tree'].flush, (), 2),
(7595, self.umap['tree'].set_channel, (2, 60, False), 1),
(7595, self.umap['tree'].flush, (), 2),
(7606, self.umap['tree'].set_channel, (2, 61, False), 1),
(7606, self.umap['tree'].flush, (), 2),
(7616, self.umap['tree'].set_channel, (2, 62, False), 1),
(7616, self.umap['tree'].flush, (), 2),
(7626, self.umap['tree'].set_channel, (2, 63, False), 1),
(7626, self.umap['tree'].flush, (), 2),
(7636, self.umap['tree'].set_channel, (2, 64, False), 1),
(7636, self.umap['tree'].flush, (), 2),
(7646, self.umap['tree'].set_channel, (2, 65, False), 1),
(7646, self.umap['tree'].flush, (), 2),
(7656, self.umap['tree'].set_channel, (2, 66, False), 1),
(7656, self.umap['tree'].flush, (), 2),
(7666, self.umap['tree'].set_channel, (2, 67, False), 1),
(7666, self.umap['tree'].flush, (), 2),
(7676, self.umap['tree'].set_channel, (2, 68, False), 1),
(7676, self.umap['tree'].flush, (), 2),
(7686, self.umap['tree'].set_channel, (2, 69, False), 1),
(7686, self.umap['tree'].flush, (), 2),
(7696, self.umap['tree'].set_channel, (2, 70, False), 1),
(7696, self.umap['tree'].flush, (), 2),
(7707, self.umap['tree'].set_channel, (2, 71, False), 1),
(7707, self.umap['tree'].flush, (), 2),
(7717, self.umap['tree'].set_channel, (2, 72, False), 1),
(7717, self.umap['tree'].flush, (), 2),
(7727, self.umap['tree'].set_channel, (2, 73, False), 1),
(7727, self.umap['tree'].flush, (), 2),
(7737, self.umap['tree'].set_channel, (2, 74, False), 1),
(7737, self.umap['tree'].flush, (), 2),
(7747, self.umap['tree'].set_channel, (2, 75, False), 1),
(7747, self.umap['tree'].flush, (), 2),
(7757, self.umap['tree'].set_channel, (2, 76, False), 1),
(7757, self.umap['tree'].flush, (), 2),
(7767, self.umap['tree'].set_channel, (2, 77, False), 1),
(7767, self.umap['tree'].flush, (), 2),
(7777, self.umap['tree'].set_channel, (2, 78, False), 1),
(7777, self.umap['tree'].flush, (), 2),
(7787, self.umap['tree'].set_channel, (2, 79, False), 1),
(7787, self.umap['tree'].flush, (), 2),
(7797, self.umap['tree'].set_channel, (2, 80, False), 1),
(7797, self.umap['tree'].flush, (), 2),
(7808, self.umap['tree'].set_channel, (2, 81, False), 1),
(7808, self.umap['tree'].flush, (), 2),
(7818, self.umap['tree'].set_channel, (2, 82, False), 1),
(7818, self.umap['tree'].flush, (), 2),
(7828, self.umap['tree'].set_channel, (2, 83, False), 1),
(7828, self.umap['tree'].flush, (), 2),
(7838, self.umap['tree'].set_channel, (2, 84, False), 1),
(7838, self.umap['tree'].flush, (), 2),
(7848, self.umap['tree'].set_channel, (2, 85, False), 1),
(7848, self.umap['tree'].flush, (), 2),
(7858, self.umap['tree'].set_channel, (2, 86, False), 1),
(7858, self.umap['tree'].flush, (), 2),
(7868, self.umap['tree'].set_channel, (2, 87, False), 1),
(7868, self.umap['tree'].flush, (), 2),
(7878, self.umap['tree'].set_channel, (2, 88, False), 1),
(7878, self.umap['tree'].flush, (), 2),
(7888, self.umap['tree'].set_channel, (2, 89, False), 1),
(7888, self.umap['tree'].flush, (), 2),
(7898, self.umap['tree'].set_channel, (2, 90, False), 1),
(7898, self.umap['tree'].flush, (), 2),
(7909, self.umap['tree'].set_channel, (2, 91, False), 1),
(7909, self.umap['tree'].flush, (), 2),
(7919, self.umap['tree'].set_channel, (2, 92, False), 1),
(7919, self.umap['tree'].flush, (), 2),
(7929, self.umap['tree'].set_channel, (2, 93, False), 1),
(7929, self.umap['tree'].flush, (), 2),
(7939, self.umap['tree'].set_channel, (2, 94, False), 1),
(7939, self.umap['tree'].flush, (), 2),
(7949, self.umap['tree'].set_channel, (2, 95, False), 1),
(7949, self.umap['tree'].flush, (), 2),
(7959, self.umap['tree'].set_channel, (2, 96, False), 1),
(7959, self.umap['tree'].flush, (), 2),
(7969, self.umap['tree'].set_channel, (2, 97, False), 1),
(7969, self.umap['tree'].flush, (), 2),
(7979, self.umap['tree'].set_channel, (2, 98, False), 1),
(7979, self.umap['tree'].flush, (), 2),
(7989, self.umap['tree'].set_channel, (2, 99, False), 1),
(7989, self.umap['tree'].flush, (), 2),
(8000, self.umap['tree'].set_channel, (2, 100, False), 1),
(8000, self.umap['tree'].flush, (), 2),
(10000, self.umap['floods'].set_channel, ('C7', 45, False), 1),
(10000, self.umap['tree'].set_channel, (0, 99, False), 1),
(10000, self.umap['tree'].set_channel, (1, 99, False), 1),
(10000, self.umap['tree'].set_channel, (2, 99, False), 1),
(10000, self.umap['tree'].set_channel, (3, 99, False), 1),
(10000, self.umap['floods'].flush, (), 2),
(10000, self.umap['tree'].flush, (), 2),
(10010, self.umap['tree'].set_channel, (0, 98, False), 1),
(10010, self.umap['tree'].set_channel, (1, 98, False), 1),
(10010, self.umap['tree'].set_channel, (2, 98, False), 1),
(10010, self.umap['tree'].set_channel, (3, 98, False), 1),
(10010, self.umap['tree'].flush, (), 2),
(10020, self.umap['tree'].set_channel, (0, 97, False), 1),
(10020, self.umap['tree'].set_channel, (1, 97, False), 1),
(10020, self.umap['tree'].set_channel, (2, 97, False), 1),
(10020, self.umap['tree'].set_channel, (3, 97, False), 1),
(10020, self.umap['tree'].flush, (), 2),
(10025, self.umap['floods'].set_channel, ('C7', 44, False), 1),
(10025, self.umap['floods'].flush, (), 2),
(10030, self.umap['tree'].set_channel, (0, 96, False), 1),
(10030, self.umap['tree'].set_channel, (1, 96, False), 1),
(10030, self.umap['tree'].set_channel, (2, 96, False), 1),
(10030, self.umap['tree'].set_channel, (3, 96, False), 1),
(10030, self.umap['tree'].flush, (), 2),
(10040, self.umap['tree'].set_channel, (0, 95, False), 1),
(10040, self.umap['tree'].set_channel, (1, 95, False), 1),
(10040, self.umap['tree'].set_channel, (2, 95, False), 1),
(10040, self.umap['tree'].set_channel, (3, 95, False), 1),
(10040, self.umap['tree'].flush, (), 2),
(10050, self.umap['tree'].set_channel, (0, 94, False), 1),
(10050, self.umap['tree'].set_channel, (1, 94, False), 1),
(10050, self.umap['tree'].set_channel, (2, 94, False), 1),
(10050, self.umap['tree'].set_channel, (3, 94, False), 1),
(10050, self.umap['tree'].flush, (), 2),
(10051, self.umap['floods'].set_channel, ('C7', 43, False), 1),
(10051, self.umap['floods'].flush, (), 2),
(10060, self.umap['tree'].set_channel, (0, 93, False), 1),
(10060, self.umap['tree'].set_channel, (1, 93, False), 1),
(10060, self.umap['tree'].set_channel, (2, 93, False), 1),
(10060, self.umap['tree'].set_channel, (3, 93, False), 1),
(10060, self.umap['tree'].flush, (), 2),
(10070, self.umap['tree'].set_channel, (0, 92, False), 1),
(10070, self.umap['tree'].set_channel, (1, 92, False), 1),
(10070, self.umap['tree'].set_channel, (2, 92, False), 1),
(10070, self.umap['tree'].set_channel, (3, 92, False), 1),
(10070, self.umap['tree'].flush, (), 2),
(10076, self.umap['floods'].set_channel, ('C7', 42, False), 1),
(10076, self.umap['floods'].flush, (), 2),
(10080, self.umap['tree'].set_channel, (0, 91, False), 1),
(10080, self.umap['tree'].set_channel, (1, 91, False), 1),
(10080, self.umap['tree'].set_channel, (2, 91, False), 1),
(10080, self.umap['tree'].set_channel, (3, 91, False), 1),
(10080, self.umap['tree'].flush, (), 2),
(10090, self.umap['tree'].set_channel, (0, 90, False), 1),
(10090, self.umap['tree'].set_channel, (1, 90, False), 1),
(10090, self.umap['tree'].set_channel, (2, 90, False), 1),
(10090, self.umap['tree'].set_channel, (3, 90, False), 1),
(10090, self.umap['tree'].flush, (), 2),
(10101, self.umap['tree'].set_channel, (0, 89, False), 1),
(10101, self.umap['tree'].set_channel, (1, 89, False), 1),
(10101, self.umap['tree'].set_channel, (2, 89, False), 1),
(10101, self.umap['tree'].set_channel, (3, 89, False), 1),
(10101, self.umap['tree'].flush, (), 2),
(10102, self.umap['floods'].set_channel, ('C7', 41, False), 1),
(10102, self.umap['floods'].flush, (), 2),
(10111, self.umap['tree'].set_channel, (0, 88, False), 1),
(10111, self.umap['tree'].set_channel, (1, 88, False), 1),
(10111, self.umap['tree'].set_channel, (2, 88, False), 1),
(10111, self.umap['tree'].set_channel, (3, 88, False), 1),
(10111, self.umap['tree'].flush, (), 2),
(10121, self.umap['tree'].set_channel, (0, 87, False), 1),
(10121, self.umap['tree'].set_channel, (1, 87, False), 1),
(10121, self.umap['tree'].set_channel, (2, 87, False), 1),
(10121, self.umap['tree'].set_channel, (3, 87, False), 1),
(10121, self.umap['tree'].flush, (), 2),
(10128, self.umap['floods'].set_channel, ('C7', 40, False), 1),
(10128, self.umap['floods'].flush, (), 2),
(10131, self.umap['tree'].set_channel, (0, 86, False), 1),
(10131, self.umap['tree'].set_channel, (1, 86, False), 1),
(10131, self.umap['tree'].set_channel, (2, 86, False), 1),
(10131, self.umap['tree'].set_channel, (3, 86, False), 1),
(10131, self.umap['tree'].flush, (), 2),
(10141, self.umap['tree'].set_channel, (0, 85, False), 1),
(10141, self.umap['tree'].set_channel, (1, 85, False), 1),
(10141, self.umap['tree'].set_channel, (2, 85, False), 1),
(10141, self.umap['tree'].set_channel, (3, 85, False), 1),
(10141, self.umap['tree'].flush, (), 2),
(10151, self.umap['tree'].set_channel, (0, 84, False), 1),
(10151, self.umap['tree'].set_channel, (1, 84, False), 1),
(10151, self.umap['tree'].set_channel, (2, 84, False), 1),
(10151, self.umap['tree'].set_channel, (3, 84, False), 1),
(10151, self.umap['tree'].flush, (), 2),
(10153, self.umap['floods'].set_channel, ('C7', 39, False), 1),
(10153, self.umap['floods'].flush, (), 2),
(10161, self.umap['tree'].set_channel, (0, 83, False), 1),
(10161, self.umap['tree'].set_channel, (1, 83, False), 1),
(10161, self.umap['tree'].set_channel, (2, 83, False), 1),
(10161, self.umap['tree'].set_channel, (3, 83, False), 1),
(10161, self.umap['tree'].flush, (), 2),
(10171, self.umap['tree'].set_channel, (0, 82, False), 1),
(10171, self.umap['tree'].set_channel, (1, 82, False), 1),
(10171, self.umap['tree'].set_channel, (2, 82, False), 1),
(10171, self.umap['tree'].set_channel, (3, 82, False), 1),
(10171, self.umap['tree'].flush, (), 2),
(10179, self.umap['floods'].set_channel, ('C7', 38, False), 1),
(10179, self.umap['floods'].flush, (), 2),
(10181, self.umap['tree'].set_channel, (0, 81, False), 1),
(10181, self.umap['tree'].set_channel, (1, 81, False), 1),
(10181, self.umap['tree'].set_channel, (2, 81, False), 1),
(10181, self.umap['tree'].set_channel, (3, 81, False), 1),
(10181, self.umap['tree'].flush, (), 2),
(10191, self.umap['tree'].set_channel, (0, 80, False), 1),
(10191, self.umap['tree'].set_channel, (1, 80, False), 1),
(10191, self.umap['tree'].set_channel, (2, 80, False), 1),
(10191, self.umap['tree'].set_channel, (3, 80, False), 1),
(10191, self.umap['tree'].flush, (), 2),
(10202, self.umap['tree'].set_channel, (0, 79, False), 1),
(10202, self.umap['tree'].set_channel, (1, 79, False), 1),
(10202, self.umap['tree'].set_channel, (2, 79, False), 1),
(10202, self.umap['tree'].set_channel, (3, 79, False), 1),
(10202, self.umap['tree'].flush, (), 2),
(10205, self.umap['floods'].set_channel, ('C7', 37, False), 1),
(10205, self.umap['floods'].flush, (), 2),
(10212, self.umap['tree'].set_channel, (0, 78, False), 1),
(10212, self.umap['tree'].set_channel, (1, 78, False), 1),
(10212, self.umap['tree'].set_channel, (2, 78, False), 1),
(10212, self.umap['tree'].set_channel, (3, 78, False), 1),
(10212, self.umap['tree'].flush, (), 2),
(10222, self.umap['tree'].set_channel, (0, 77, False), 1),
(10222, self.umap['tree'].set_channel, (1, 77, False), 1),
(10222, self.umap['tree'].set_channel, (2, 77, False), 1),
(10222, self.umap['tree'].set_channel, (3, 77, False), 1),
(10222, self.umap['tree'].flush, (), 2),
(10230, self.umap['floods'].set_channel, ('C7', 36, False), 1),
(10230, self.umap['floods'].flush, (), 2),
(10232, self.umap['tree'].set_channel, (0, 76, False), 1),
(10232, self.umap['tree'].set_channel, (1, 76, False), 1),
(10232, self.umap['tree'].set_channel, (2, 76, False), 1),
(10232, self.umap['tree'].set_channel, (3, 76, False), 1),
(10232, self.umap['tree'].flush, (), 2),
(10242, self.umap['tree'].set_channel, (0, 75, False), 1),
(10242, self.umap['tree'].set_channel, (1, 75, False), 1),
(10242, self.umap['tree'].set_channel, (2, 75, False), 1),
(10242, self.umap['tree'].set_channel, (3, 75, False), 1),
(10242, self.umap['tree'].flush, (), 2),
(10252, self.umap['tree'].set_channel, (0, 74, False), 1),
(10252, self.umap['tree'].set_channel, (1, 74, False), 1),
(10252, self.umap['tree'].set_channel, (2, 74, False), 1),
(10252, self.umap['tree'].set_channel, (3, 74, False), 1),
(10252, self.umap['tree'].flush, (), 2),
(10256, self.umap['floods'].set_channel, ('C7', 35, False), 1),
(10256, self.umap['floods'].flush, (), 2),
(10262, self.umap['tree'].set_channel, (0, 73, False), 1),
(10262, self.umap['tree'].set_channel, (1, 73, False), 1),
(10262, self.umap['tree'].set_channel, (2, 73, False), 1),
(10262, self.umap['tree'].set_channel, (3, 73, False), 1),
(10262, self.umap['tree'].flush, (), 2),
(10272, self.umap['tree'].set_channel, (0, 72, False), 1),
(10272, self.umap['tree'].set_channel, (1, 72, False), 1),
(10272, self.umap['tree'].set_channel, (2, 72, False), 1),
(10272, self.umap['tree'].set_channel, (3, 72, False), 1),
(10272, self.umap['tree'].flush, (), 2),
(10282, self.umap['floods'].set_channel, ('C7', 34, False), 1),
(10282, self.umap['tree'].set_channel, (0, 71, False), 1),
(10282, self.umap['tree'].set_channel, (1, 71, False), 1),
(10282, self.umap['tree'].set_channel, (2, 71, False), 1),
(10282, self.umap['tree'].set_channel, (3, 71, False), 1),
(10282, self.umap['floods'].flush, (), 2),
(10282, self.umap['tree'].flush, (), 2),
(10292, self.umap['tree'].set_channel, (0, 70, False), 1),
(10292, self.umap['tree'].set_channel, (1, 70, False), 1),
(10292, self.umap['tree'].set_channel, (2, 70, False), 1),
(10292, self.umap['tree'].set_channel, (3, 70, False), 1),
(10292, self.umap['tree'].flush, (), 2),
(10303, self.umap['tree'].set_channel, (0, 69, False), 1),
(10303, self.umap['tree'].set_channel, (1, 69, False), 1),
(10303, self.umap['tree'].set_channel, (2, 69, False), 1),
(10303, self.umap['tree'].set_channel, (3, 69, False), 1),
(10303, self.umap['tree'].flush, (), 2),
(10307, self.umap['floods'].set_channel, ('C7', 33, False), 1),
(10307, self.umap['floods'].flush, (), 2),
(10313, self.umap['tree'].set_channel, (0, 68, False), 1),
(10313, self.umap['tree'].set_channel, (1, 68, False), 1),
(10313, self.umap['tree'].set_channel, (2, 68, False), 1),
(10313, self.umap['tree'].set_channel, (3, 68, False), 1),
(10313, self.umap['tree'].flush, (), 2),
(10323, self.umap['tree'].set_channel, (0, 67, False), 1),
(10323, self.umap['tree'].set_channel, (1, 67, False), 1),
(10323, self.umap['tree'].set_channel, (2, 67, False), 1),
(10323, self.umap['tree'].set_channel, (3, 67, False), 1),
(10323, self.umap['tree'].flush, (), 2),
(10333, self.umap['floods'].set_channel, ('C7', 32, False), 1),
(10333, self.umap['tree'].set_channel, (0, 66, False), 1),
(10333, self.umap['tree'].set_channel, (1, 66, False), 1),
(10333, self.umap['tree'].set_channel, (2, 66, False), 1),
(10333, self.umap['tree'].set_channel, (3, 66, False), 1),
(10333, self.umap['floods'].flush, (), 2),
(10333, self.umap['tree'].flush, (), 2),
(10343, self.umap['tree'].set_channel, (0, 65, False), 1),
(10343, self.umap['tree'].set_channel, (1, 65, False), 1),
(10343, self.umap['tree'].set_channel, (2, 65, False), 1),
(10343, self.umap['tree'].set_channel, (3, 65, False), 1),
(10343, self.umap['tree'].flush, (), 2),
(10353, self.umap['tree'].set_channel, (0, 64, False), 1),
(10353, self.umap['tree'].set_channel, (1, 64, False), 1),
(10353, self.umap['tree'].set_channel, (2, 64, False), 1),
(10353, self.umap['tree'].set_channel, (3, 64, False), 1),
(10353, self.umap['tree'].flush, (), 2),
(10358, self.umap['floods'].set_channel, ('C7', 31, False), 1),
(10358, self.umap['floods'].flush, (), 2),
(10363, self.umap['tree'].set_channel, (0, 63, False), 1),
(10363, self.umap['tree'].set_channel, (1, 63, False), 1),
(10363, self.umap['tree'].set_channel, (2, 63, False), 1),
(10363, self.umap['tree'].set_channel, (3, 63, False), 1),
(10363, self.umap['tree'].flush, (), 2),
(10373, self.umap['tree'].set_channel, (0, 62, False), 1),
(10373, self.umap['tree'].set_channel, (1, 62, False), 1),
(10373, self.umap['tree'].set_channel, (2, 62, False), 1),
(10373, self.umap['tree'].set_channel, (3, 62, False), 1),
(10373, self.umap['tree'].flush, (), 2),
(10383, self.umap['tree'].set_channel, (0, 61, False), 1),
(10383, self.umap['tree'].set_channel, (1, 61, False), 1),
(10383, self.umap['tree'].set_channel, (2, 61, False), 1),
(10383, self.umap['tree'].set_channel, (3, 61, False), 1),
(10383, self.umap['tree'].flush, (), 2),
(10384, self.umap['floods'].set_channel, ('C7', 30, False), 1),
(10384, self.umap['floods'].flush, (), 2),
(10393, self.umap['tree'].set_channel, (0, 60, False), 1),
(10393, self.umap['tree'].set_channel, (1, 60, False), 1),
(10393, self.umap['tree'].set_channel, (2, 60, False), 1),
(10393, self.umap['tree'].set_channel, (3, 60, False), 1),
(10393, self.umap['tree'].flush, (), 2),
(10404, self.umap['tree'].set_channel, (0, 59, False), 1),
(10404, self.umap['tree'].set_channel, (1, 59, False), 1),
(10404, self.umap['tree'].set_channel, (2, 59, False), 1),
(10404, self.umap['tree'].set_channel, (3, 59, False), 1),
(10404, self.umap['tree'].flush, (), 2),
(10410, self.umap['floods'].set_channel, ('C7', 29, False), 1),
(10410, self.umap['floods'].flush, (), 2),
(10414, self.umap['tree'].set_channel, (0, 58, False), 1),
(10414, self.umap['tree'].set_channel, (1, 58, False), 1),
(10414, self.umap['tree'].set_channel, (2, 58, False), 1),
(10414, self.umap['tree'].set_channel, (3, 58, False), 1),
(10414, self.umap['tree'].flush, (), 2),
(10424, self.umap['tree'].set_channel, (0, 57, False), 1),
(10424, self.umap['tree'].set_channel, (1, 57, False), 1),
(10424, self.umap['tree'].set_channel, (2, 57, False), 1),
(10424, self.umap['tree'].set_channel, (3, 57, False), 1),
(10424, self.umap['tree'].flush, (), 2),
(10434, self.umap['tree'].set_channel, (0, 56, False), 1),
(10434, self.umap['tree'].set_channel, (1, 56, False), 1),
(10434, self.umap['tree'].set_channel, (2, 56, False), 1),
(10434, self.umap['tree'].set_channel, (3, 56, False), 1),
(10434, self.umap['tree'].flush, (), 2),
(10435, self.umap['floods'].set_channel, ('C7', 28, False), 1),
(10435, self.umap['floods'].flush, (), 2),
(10444, self.umap['tree'].set_channel, (0, 55, False), 1),
(10444, self.umap['tree'].set_channel, (1, 55, False), 1),
(10444, self.umap['tree'].set_channel, (2, 55, False), 1),
(10444, self.umap['tree'].set_channel, (3, 55, False), 1),
(10444, self.umap['tree'].flush, (), 2),
(10454, self.umap['tree'].set_channel, (0, 54, False), 1),
(10454, self.umap['tree'].set_channel, (1, 54, False), 1),
(10454, self.umap['tree'].set_channel, (2, 54, False), 1),
(10454, self.umap['tree'].set_channel, (3, 54, False), 1),
(10454, self.umap['tree'].flush, (), 2),
(10461, self.umap['floods'].set_channel, ('C7', 27, False), 1),
(10461, self.umap['floods'].flush, (), 2),
(10464, self.umap['tree'].set_channel, (0, 53, False), 1),
(10464, self.umap['tree'].set_channel, (1, 53, False), 1),
(10464, self.umap['tree'].set_channel, (2, 53, False), 1),
(10464, self.umap['tree'].set_channel, (3, 53, False), 1),
(10464, self.umap['tree'].flush, (), 2),
(10474, self.umap['tree'].set_channel, (0, 52, False), 1),
(10474, self.umap['tree'].set_channel, (1, 52, False), 1),
(10474, self.umap['tree'].set_channel, (2, 52, False), 1),
(10474, self.umap['tree'].set_channel, (3, 52, False), 1),
(10474, self.umap['tree'].flush, (), 2),
(10484, self.umap['tree'].set_channel, (0, 51, False), 1),
(10484, self.umap['tree'].set_channel, (1, 51, False), 1),
(10484, self.umap['tree'].set_channel, (2, 51, False), 1),
(10484, self.umap['tree'].set_channel, (3, 51, False), 1),
(10484, self.umap['tree'].flush, (), 2),
(10487, self.umap['floods'].set_channel, ('C7', 26, False), 1),
(10487, self.umap['floods'].flush, (), 2),
(10494, self.umap['tree'].set_channel, (0, 50, False), 1),
(10494, self.umap['tree'].set_channel, (1, 50, False), 1),
(10494, self.umap['tree'].set_channel, (2, 50, False), 1),
(10494, self.umap['tree'].set_channel, (3, 50, False), 1),
(10494, self.umap['tree'].flush, (), 2),
(10505, self.umap['tree'].set_channel, (0, 49, False), 1),
(10505, self.umap['tree'].set_channel, (1, 49, False), 1),
(10505, self.umap['tree'].set_channel, (2, 49, False), 1),
(10505, self.umap['tree'].set_channel, (3, 49, False), 1),
(10505, self.umap['tree'].flush, (), 2),
(10512, self.umap['floods'].set_channel, ('C7', 25, False), 1),
(10512, self.umap['floods'].flush, (), 2),
(10515, self.umap['tree'].set_channel, (0, 48, False), 1),
(10515, self.umap['tree'].set_channel, (1, 48, False), 1),
(10515, self.umap['tree'].set_channel, (2, 48, False), 1),
(10515, self.umap['tree'].set_channel, (3, 48, False), 1),
(10515, self.umap['tree'].flush, (), 2),
(10525, self.umap['tree'].set_channel, (0, 47, False), 1),
(10525, self.umap['tree'].set_channel, (1, 47, False), 1),
(10525, self.umap['tree'].set_channel, (2, 47, False), 1),
(10525, self.umap['tree'].set_channel, (3, 47, False), 1),
(10525, self.umap['tree'].flush, (), 2),
(10535, self.umap['tree'].set_channel, (0, 46, False), 1),
(10535, self.umap['tree'].set_channel, (1, 46, False), 1),
(10535, self.umap['tree'].set_channel, (2, 46, False), 1),
(10535, self.umap['tree'].set_channel, (3, 46, False), 1),
(10535, self.umap['tree'].flush, (), 2),
(10538, self.umap['floods'].set_channel, ('C7', 24, False), 1),
(10538, self.umap['floods'].flush, (), 2),
(10545, self.umap['tree'].set_channel, (0, 45, False), 1),
(10545, self.umap['tree'].set_channel, (1, 45, False), 1),
(10545, self.umap['tree'].set_channel, (2, 45, False), 1),
(10545, self.umap['tree'].set_channel, (3, 45, False), 1),
(10545, self.umap['tree'].flush, (), 2),
(10555, self.umap['tree'].set_channel, (0, 44, False), 1),
(10555, self.umap['tree'].set_channel, (1, 44, False), 1),
(10555, self.umap['tree'].set_channel, (2, 44, False), 1),
(10555, self.umap['tree'].set_channel, (3, 44, False), 1),
(10555, self.umap['tree'].flush, (), 2),
(10564, self.umap['floods'].set_channel, ('C7', 23, False), 1),
(10564, self.umap['floods'].flush, (), 2),
(10565, self.umap['tree'].set_channel, (0, 43, False), 1),
(10565, self.umap['tree'].set_channel, (1, 43, False), 1),
(10565, self.umap['tree'].set_channel, (2, 43, False), 1),
(10565, self.umap['tree'].set_channel, (3, 43, False), 1),
(10565, self.umap['tree'].flush, (), 2),
(10575, self.umap['tree'].set_channel, (0, 42, False), 1),
(10575, self.umap['tree'].set_channel, (1, 42, False), 1),
(10575, self.umap['tree'].set_channel, (2, 42, False), 1),
(10575, self.umap['tree'].set_channel, (3, 42, False), 1),
(10575, self.umap['tree'].flush, (), 2),
(10585, self.umap['tree'].set_channel, (0, 41, False), 1),
(10585, self.umap['tree'].set_channel, (1, 41, False), 1),
(10585, self.umap['tree'].set_channel, (2, 41, False), 1),
(10585, self.umap['tree'].set_channel, (3, 41, False), 1),
(10585, self.umap['tree'].flush, (), 2),
(10589, self.umap['floods'].set_channel, ('C7', 22, False), 1),
(10589, self.umap['floods'].flush, (), 2),
(10595, self.umap['tree'].set_channel, (0, 40, False), 1),
(10595, self.umap['tree'].set_channel, (1, 40, False), 1),
(10595, self.umap['tree'].set_channel, (2, 40, False), 1),
(10595, self.umap['tree'].set_channel, (3, 40, False), 1),
(10595, self.umap['tree'].flush, (), 2),
(10606, self.umap['tree'].set_channel, (0, 39, False), 1),
(10606, self.umap['tree'].set_channel, (1, 39, False), 1),
(10606, self.umap['tree'].set_channel, (2, 39, False), 1),
(10606, self.umap['tree'].set_channel, (3, 39, False), 1),
(10606, self.umap['tree'].flush, (), 2),
(10615, self.umap['floods'].set_channel, ('C7', 21, False), 1),
(10615, self.umap['floods'].flush, (), 2),
(10616, self.umap['tree'].set_channel, (0, 38, False), 1),
(10616, self.umap['tree'].set_channel, (1, 38, False), 1),
(10616, self.umap['tree'].set_channel, (2, 38, False), 1),
(10616, self.umap['tree'].set_channel, (3, 38, False), 1),
(10616, self.umap['tree'].flush, (), 2),
(10626, self.umap['tree'].set_channel, (0, 37, False), 1),
(10626, self.umap['tree'].set_channel, (1, 37, False), 1),
(10626, self.umap['tree'].set_channel, (2, 37, False), 1),
(10626, self.umap['tree'].set_channel, (3, 37, False), 1),
(10626, self.umap['tree'].flush, (), 2),
(10636, self.umap['tree'].set_channel, (0, 36, False), 1),
(10636, self.umap['tree'].set_channel, (1, 36, False), 1),
(10636, self.umap['tree'].set_channel, (2, 36, False), 1),
(10636, self.umap['tree'].set_channel, (3, 36, False), 1),
(10636, self.umap['tree'].flush, (), 2),
(10641, self.umap['floods'].set_channel, ('C7', 20, False), 1),
(10641, self.umap['floods'].flush, (), 2),
(10646, self.umap['tree'].set_channel, (0, 35, False), 1),
(10646, self.umap['tree'].set_channel, (1, 35, False), 1),
(10646, self.umap['tree'].set_channel, (2, 35, False), 1),
(10646, self.umap['tree'].set_channel, (3, 35, False), 1),
(10646, self.umap['tree'].flush, (), 2),
(10656, self.umap['tree'].set_channel, (0, 34, False), 1),
(10656, self.umap['tree'].set_channel, (1, 34, False), 1),
(10656, self.umap['tree'].set_channel, (2, 34, False), 1),
(10656, self.umap['tree'].set_channel, (3, 34, False), 1),
(10656, self.umap['tree'].flush, (), 2),
(10666, self.umap['floods'].set_channel, ('C7', 19, False), 1),
(10666, self.umap['tree'].set_channel, (0, 33, False), 1),
(10666, self.umap['tree'].set_channel, (1, 33, False), 1),
(10666, self.umap['tree'].set_channel, (2, 33, False), 1),
(10666, self.umap['tree'].set_channel, (3, 33, False), 1),
(10666, self.umap['floods'].flush, (), 2),
(10666, self.umap['tree'].flush, (), 2),
(10676, self.umap['tree'].set_channel, (0, 32, False), 1),
(10676, self.umap['tree'].set_channel, (1, 32, False), 1),
(10676, self.umap['tree'].set_channel, (2, 32, False), 1),
(10676, self.umap['tree'].set_channel, (3, 32, False), 1),
(10676, self.umap['tree'].flush, (), 2),
(10686, self.umap['tree'].set_channel, (0, 31, False), 1),
(10686, self.umap['tree'].set_channel, (1, 31, False), 1),
(10686, self.umap['tree'].set_channel, (2, 31, False), 1),
(10686, self.umap['tree'].set_channel, (3, 31, False), 1),
(10686, self.umap['tree'].flush, (), 2),
(10692, self.umap['floods'].set_channel, ('C7', 18, False), 1),
(10692, self.umap['floods'].flush, (), 2),
(10696, self.umap['tree'].set_channel, (0, 30, False), 1),
(10696, self.umap['tree'].set_channel, (1, 30, False), 1),
(10696, self.umap['tree'].set_channel, (2, 30, False), 1),
(10696, self.umap['tree'].set_channel, (3, 30, False), 1),
(10696, self.umap['tree'].flush, (), 2),
(10707, self.umap['tree'].set_channel, (0, 29, False), 1),
(10707, self.umap['tree'].set_channel, (1, 29, False), 1),
(10707, self.umap['tree'].set_channel, (2, 29, False), 1),
(10707, self.umap['tree'].set_channel, (3, 29, False), 1),
(10707, self.umap['tree'].flush, (), 2),
(10717, self.umap['floods'].set_channel, ('C7', 17, False), 1),
(10717, self.umap['tree'].set_channel, (0, 28, False), 1),
(10717, self.umap['tree'].set_channel, (1, 28, False), 1),
(10717, self.umap['tree'].set_channel, (2, 28, False), 1),
(10717, self.umap['tree'].set_channel, (3, 28, False), 1),
(10717, self.umap['floods'].flush, (), 2),
(10717, self.umap['tree'].flush, (), 2),
(10727, self.umap['tree'].set_channel, (0, 27, False), 1),
(10727, self.umap['tree'].set_channel, (1, 27, False), 1),
(10727, self.umap['tree'].set_channel, (2, 27, False), 1),
(10727, self.umap['tree'].set_channel, (3, 27, False), 1),
(10727, self.umap['tree'].flush, (), 2),
(10737, self.umap['tree'].set_channel, (0, 26, False), 1),
(10737, self.umap['tree'].set_channel, (1, 26, False), 1),
(10737, self.umap['tree'].set_channel, (2, 26, False), 1),
(10737, self.umap['tree'].set_channel, (3, 26, False), 1),
(10737, self.umap['tree'].flush, (), 2),
(10743, self.umap['floods'].set_channel, ('C7', 16, False), 1),
(10743, self.umap['floods'].flush, (), 2),
(10747, self.umap['tree'].set_channel, (0, 25, False), 1),
(10747, self.umap['tree'].set_channel, (1, 25, False), 1),
(10747, self.umap['tree'].set_channel, (2, 25, False), 1),
(10747, self.umap['tree'].set_channel, (3, 25, False), 1),
(10747, self.umap['tree'].flush, (), 2),
(10757, self.umap['tree'].set_channel, (0, 24, False), 1),
(10757, self.umap['tree'].set_channel, (1, 24, False), 1),
(10757, self.umap['tree'].set_channel, (2, 24, False), 1),
(10757, self.umap['tree'].set_channel, (3, 24, False), 1),
(10757, self.umap['tree'].flush, (), 2),
(10767, self.umap['tree'].set_channel, (0, 23, False), 1),
(10767, self.umap['tree'].set_channel, (1, 23, False), 1),
(10767, self.umap['tree'].set_channel, (2, 23, False), 1),
(10767, self.umap['tree'].set_channel, (3, 23, False), 1),
(10767, self.umap['tree'].flush, (), 2),
(10769, self.umap['floods'].set_channel, ('C7', 15, False), 1),
(10769, self.umap['floods'].flush, (), 2),
(10777, self.umap['tree'].set_channel, (0, 22, False), 1),
(10777, self.umap['tree'].set_channel, (1, 22, False), 1),
(10777, self.umap['tree'].set_channel, (2, 22, False), 1),
(10777, self.umap['tree'].set_channel, (3, 22, False), 1),
(10777, self.umap['tree'].flush, (), 2),
(10787, self.umap['tree'].set_channel, (0, 21, False), 1),
(10787, self.umap['tree'].set_channel, (1, 21, False), 1),
(10787, self.umap['tree'].set_channel, (2, 21, False), 1),
(10787, self.umap['tree'].set_channel, (3, 21, False), 1),
(10787, self.umap['tree'].flush, (), 2),
(10794, self.umap['floods'].set_channel, ('C7', 14, False), 1),
(10794, self.umap['floods'].flush, (), 2),
(10797, self.umap['tree'].set_channel, (0, 20, False), 1),
(10797, self.umap['tree'].set_channel, (1, 20, False), 1),
(10797, self.umap['tree'].set_channel, (2, 20, False), 1),
(10797, self.umap['tree'].set_channel, (3, 20, False), 1),
(10797, self.umap['tree'].flush, (), 2),
(10808, self.umap['tree'].set_channel, (0, 19, False), 1),
(10808, self.umap['tree'].set_channel, (1, 19, False), 1),
(10808, self.umap['tree'].set_channel, (2, 19, False), 1),
(10808, self.umap['tree'].set_channel, (3, 19, False), 1),
(10808, self.umap['tree'].flush, (), 2),
(10818, self.umap['tree'].set_channel, (0, 18, False), 1),
(10818, self.umap['tree'].set_channel, (1, 18, False), 1),
(10818, self.umap['tree'].set_channel, (2, 18, False), 1),
(10818, self.umap['tree'].set_channel, (3, 18, False), 1),
(10818, self.umap['tree'].flush, (), 2),
(10820, self.umap['floods'].set_channel, ('C7', 13, False), 1),
(10820, self.umap['floods'].flush, (), 2),
(10828, self.umap['tree'].set_channel, (0, 17, False), 1),
(10828, self.umap['tree'].set_channel, (1, 17, False), 1),
(10828, self.umap['tree'].set_channel, (2, 17, False), 1),
(10828, self.umap['tree'].set_channel, (3, 17, False), 1),
(10828, self.umap['tree'].flush, (), 2),
(10838, self.umap['tree'].set_channel, (0, 16, False), 1),
(10838, self.umap['tree'].set_channel, (1, 16, False), 1),
(10838, self.umap['tree'].set_channel, (2, 16, False), 1),
(10838, self.umap['tree'].set_channel, (3, 16, False), 1),
(10838, self.umap['tree'].flush, (), 2),
(10846, self.umap['floods'].set_channel, ('C7', 12, False), 1),
(10846, self.umap['floods'].flush, (), 2),
(10848, self.umap['tree'].set_channel, (0, 15, False), 1),
(10848, self.umap['tree'].set_channel, (1, 15, False), 1),
(10848, self.umap['tree'].set_channel, (2, 15, False), 1),
(10848, self.umap['tree'].set_channel, (3, 15, False), 1),
(10848, self.umap['tree'].flush, (), 2),
(10858, self.umap['tree'].set_channel, (0, 14, False), 1),
(10858, self.umap['tree'].set_channel, (1, 14, False), 1),
(10858, self.umap['tree'].set_channel, (2, 14, False), 1),
(10858, self.umap['tree'].set_channel, (3, 14, False), 1),
(10858, self.umap['tree'].flush, (), 2),
(10868, self.umap['tree'].set_channel, (0, 13, False), 1),
(10868, self.umap['tree'].set_channel, (1, 13, False), 1),
(10868, self.umap['tree'].set_channel, (2, 13, False), 1),
(10868, self.umap['tree'].set_channel, (3, 13, False), 1),
(10868, self.umap['tree'].flush, (), 2),
(10871, self.umap['floods'].set_channel, ('C7', 11, False), 1),
(10871, self.umap['floods'].flush, (), 2),
(10878, self.umap['tree'].set_channel, (0, 12, False), 1),
(10878, self.umap['tree'].set_channel, (1, 12, False), 1),
(10878, self.umap['tree'].set_channel, (2, 12, False), 1),
(10878, self.umap['tree'].set_channel, (3, 12, False), 1),
(10878, self.umap['tree'].flush, (), 2),
(10888, self.umap['tree'].set_channel, (0, 11, False), 1),
(10888, self.umap['tree'].set_channel, (1, 11, False), 1),
(10888, self.umap['tree'].set_channel, (2, 11, False), 1),
(10888, self.umap['tree'].set_channel, (3, 11, False), 1),
(10888, self.umap['tree'].flush, (), 2),
(10897, self.umap['floods'].set_channel, ('C7', 10, False), 1),
(10897, self.umap['floods'].flush, (), 2),
(10898, self.umap['tree'].set_channel, (0, 10, False), 1),
(10898, self.umap['tree'].set_channel, (1, 10, False), 1),
(10898, self.umap['tree'].set_channel, (2, 10, False), 1),
(10898, self.umap['tree'].set_channel, (3, 10, False), 1),
(10898, self.umap['tree'].flush, (), 2),
(10909, self.umap['tree'].set_channel, (0, 9, False), 1),
(10909, self.umap['tree'].set_channel, (1, 9, False), 1),
(10909, self.umap['tree'].set_channel, (2, 9, False), 1),
(10909, self.umap['tree'].set_channel, (3, 9, False), 1),
(10909, self.umap['tree'].flush, (), 2),
(10919, self.umap['tree'].set_channel, (0, 8, False), 1),
(10919, self.umap['tree'].set_channel, (1, 8, False), 1),
(10919, self.umap['tree'].set_channel, (2, 8, False), 1),
(10919, self.umap['tree'].set_channel, (3, 8, False), 1),
(10919, self.umap['tree'].flush, (), 2),
(10923, self.umap['floods'].set_channel, ('C7', 9, False), 1),
(10923, self.umap['floods'].flush, (), 2),
(10929, self.umap['tree'].set_channel, (0, 7, False), 1),
(10929, self.umap['tree'].set_channel, (1, 7, False), 1),
(10929, self.umap['tree'].set_channel, (2, 7, False), 1),
(10929, self.umap['tree'].set_channel, (3, 7, False), 1),
(10929, self.umap['tree'].flush, (), 2),
(10939, self.umap['tree'].set_channel, (0, 6, False), 1),
(10939, self.umap['tree'].set_channel, (1, 6, False), 1),
(10939, self.umap['tree'].set_channel, (2, 6, False), 1),
(10939, self.umap['tree'].set_channel, (3, 6, False), 1),
(10939, self.umap['tree'].flush, (), 2),
(10948, self.umap['floods'].set_channel, ('C7', 8, False), 1),
(10948, self.umap['floods'].flush, (), 2),
(10949, self.umap['tree'].set_channel, (0, 5, False), 1),
(10949, self.umap['tree'].set_channel, (1, 5, False), 1),
(10949, self.umap['tree'].set_channel, (2, 5, False), 1),
(10949, self.umap['tree'].set_channel, (3, 5, False), 1),
(10949, self.umap['tree'].flush, (), 2),
(10959, self.umap['tree'].set_channel, (0, 4, False), 1),
(10959, self.umap['tree'].set_channel, (1, 4, False), 1),
(10959, self.umap['tree'].set_channel, (2, 4, False), 1),
(10959, self.umap['tree'].set_channel, (3, 4, False), 1),
(10959, self.umap['tree'].flush, (), 2),
(10969, self.umap['tree'].set_channel, (0, 3, False), 1),
(10969, self.umap['tree'].set_channel, (1, 3, False), 1),
(10969, self.umap['tree'].set_channel, (2, 3, False), 1),
(10969, self.umap['tree'].set_channel, (3, 3, False), 1),
(10969, self.umap['tree'].flush, (), 2),
(10974, self.umap['floods'].set_channel, ('C7', 7, False), 1),
(10974, self.umap['floods'].flush, (), 2),
(10979, self.umap['tree'].set_channel, (0, 2, False), 1),
(10979, self.umap['tree'].set_channel, (1, 2, False), 1),
(10979, self.umap['tree'].set_channel, (2, 2, False), 1),
(10979, self.umap['tree'].set_channel, (3, 2, False), 1),
(10979, self.umap['tree'].flush, (), 2),
(10989, self.umap['tree'].set_channel, (0, 1, False), 1),
(10989, self.umap['tree'].set_channel, (1, 1, False), 1),
(10989, self.umap['tree'].set_channel, (2, 1, False), 1),
(10989, self.umap['tree'].set_channel, (3, 1, False), 1),
(10989, self.umap['tree'].flush, (), 2),
(11000, self.umap['floods'].set_channel, ('C7', 6, False), 1),
(11000, self.umap['tree'].set_channel, (0, 0, False), 1),
(11000, self.umap['tree'].set_channel, (1, 0, False), 1),
(11000, self.umap['tree'].set_channel, (2, 0, False), 1),
(11000, self.umap['tree'].set_channel, (3, 0, False), 1),
(11000, self.umap['floods'].flush, (), 2),
(11000, self.umap['tree'].flush, (), 2),
]

    def build_seq(self):
        s = Sequence()
        s.load_file('data/test.lseq', self.umap, self.vmap)
        return s

    def test_obsolete_events(self):
        self.assertRaises(NotImplementedError, Event, self.controllers['floods'], 'A3')

    def test_add_events(self):
        s = Sequence()
        s.add(1234, ValueEvent(self.virtuals['fa3'],  50,  0))
        s.add(5543, ValueEvent(self.virtuals['t3'],  100, 12))
        s.add(5543, ValueEvent(self.virtuals['fa3'],  66,  0))
        s.add(1234, ValueEvent(self.virtuals['fx1'],  22,  0))

        expected_events = {
            1234: [
                 ValueEvent(self.virtuals['fa3'], 50, 0),
                 ValueEvent(self.virtuals['fx1'], 22, 0)
            ],
            5543: [
                 ValueEvent(self.virtuals['t3'], 100, 12),
                 ValueEvent(self.virtuals['fa3'], 66,  0)
            ],
        }
        self.assertEqual(len(s.intervals), 2)
        self.assertEqual([i for i in s.intervals], [1234, 5543])
        for time in s.intervals:
            e_list = s.events_at(time)
            self.assertEqual(e_list, expected_events[time])

    def test_load(self):
        s = self.build_seq()
        self.assertEqual(s.total_time, 11000)

    def test_save(self):
        self.build_seq().save_file('data/test-out.lseq')
        orig = file('data/test-cmp.lseq', 'rb').read()
        newf = file('data/test-out.lseq', 'rb').read()
        self.assertEqual(orig, newf, msg="data/test-cmp.lseq vs. data/test-out.lseq mismatch")

    def test_version(self):
        s = Sequence()
        self.assertRaises(InvalidFileFormat, s.load_file, 'data/testv1.lseq', {}, {})
        self.assertRaises(InvalidFileFormat, s.load_file, 'data/testv3.lseq', {}, {})
        self.assertRaises(InvalidFileFormat, s.load_file, 'data/testvq.lseq', {}, {})
        self.assertRaises(InvalidFileFormat, s.load_file, 'data/testnov.lseq', {}, {})

    def test_timestamps(self):
        s = Sequence()
        self.assertRaises(InvalidTimestamp, s.load_file, 'data/notime.lseq', {}, {})
        self.assertRaises(InvalidTimestamp, s.load_file, 'data/badtime.lseq', {}, {})
        self.assertRaises(InvalidTimestamp, s.load_file, 'data/badtime2.lseq', {}, {})

    def test_unitmap(self):
        s = self.build_seq()
        #self.assertEqual(len(s._controllers), 2)
        #self.assertEqual(s._controllers[0]['obj'].id, 'floods')
        #self.assertEqual(s._controllers[1]['obj'].id, 'tree')
        self.assertEqual(len(s._vchannels), 5)
        self.assertEqual(s._vchannels[0].id, 'flC7')
        self.assertEqual(s._vchannels[1].id, 'tr#0')
        self.assertEqual(s._vchannels[2].id, 'tr#1')
        self.assertEqual(s._vchannels[3].id, 'tr#2')
        self.assertEqual(s._vchannels[4].id, 'tr#3')

    def test_badunit(self):
        s = Sequence()
        self.assertRaises(InvalidUnitDefinition, s.load_file, 'data/badunit.lseq', {}, {})
        self.assertRaises(InvalidUnitDefinition, s.load_file, 'data/badunit2.lseq', {}, {})
        self.assertRaises(InvalidUnitDefinition, s.load_file, 'data/badunit3.lseq', {}, {})

    def test_badevents(self):
        s = Sequence()
        self.assertRaises(InvalidEvent, s.load_file, 'data/badev.lseq', {'flood': DummyController('flood')}, self.virtuals)

    def test_events(self):
        expected_events = {
            0:     [
                ValueEvent(None,0,0)
            ],
            1000:  [
                ValueEvent(self.vmap['flC7'],100,2000), 
                ValueEvent(self.vmap['tr#0'],100,0)
            ],
            2000:  [
                ValueEvent(self.vmap['tr#0'],0,0), 
                ValueEvent(self.vmap['tr#1'],100,0)
            ],
            3000:  [
                ValueEvent(self.vmap['tr#1'],0,0), 
                ValueEvent(self.vmap['tr#2'],100,0)
            ],
            4000:  [
                ValueEvent(self.vmap['tr#2'],0,0), 
                ValueEvent(self.vmap['tr#3'],100,0)
            ],
            5000:  [
                ValueEvent(self.vmap['tr#0'],100,1000), 
            ],
            6000:  [
                ValueEvent(self.vmap['tr#1'],100,1000), 
            ],
            7000:  [
                ValueEvent(self.vmap['tr#2'],100,1000), 
                ValueEvent(self.vmap['flC7'],50,0), 
            ],
            8000:  [
                ValueEvent(self.vmap['tr#3'],100,1000), 
            ],
            10000:  [
                ValueEvent(None,0,1000)
            ],
        }
        s = self.build_seq()
        self.assertEqual(len(s.intervals), 10)
        self.assertEqual([i for i in s.intervals], [0,1000,2000,3000,4000,5000,6000,7000,8000,10000])
        for time in s.intervals:
            e_list = s.events_at(time)
            self.assertEqual(e_list, expected_events[time], msg="@{0}, got {1}, expected {2}".format(time, e_list, expected_events[time]))

    def describe_events(self, s, f):
        f.write("EVENT LIST\n")
        for ms in sorted(s._event_list):
            f.write("TIME={0} ms\n".format(ms))
            for ev in s._event_list[ms]:
                f.write("{0}\n".format(ev))

    def describe_sequence(self, s, f):
        f.write("COMPILED OUTPUT:\n")
        for element in s:
            for uid in self.umap:
                if id(self.umap[uid]) == id(element[1].__self__):
                    fname = "self.umap['{0}'].{1}".format(uid, element[1].__name__)
                    break
            else:
                fname = repr(element[1])
            f.write("({0}, {1}, {2}, {3})\n".format(
                element[0], fname, repr(element[2]), element[3]))

                    
        
    def test_compilation(self):
        s = Sequence()
        s.load_file('data/test.lseq', self.umap, self.vmap)
        f = open('data/tmp_x', 'w')
        #f.write(`s.compile()`)
        self.describe_events(s, f)
        self.describe_sequence(sorted(s.compile()), f)
        f.close()

        self.assertEqual(None, self.compare_timeline_lists(s.compile(), self.TEST_TIMELINE))

    def test_duplicate_flush(self):
        s = Sequence()
        s.load_file('data/test.lseq', self.umap, self.vmap)
        c = s.compile()
        flush_seen = set()
        last_time = None
        for e in sorted(c):
            if last_time is None or last_time != e[0]:
                flush_seen = set()
                last_time = e[0]
            if e[1].__name__ == 'flush':
                if id(e[1].__self__) in flush_seen:
                    self.fail("Duplicate flush() scheduled at time {0}".format(e[0]))
                flush_seen.add(id(e[1].__self__))

    def test_compilation_of_v3_file(self):
        s = Sequence()
        s.load_file('data/test_v3.lseq', self.umap, self.vmap)
        f = open('data/tmp_xv3', 'w')
        f.write(repr(s.compile()))
        f.close()

        self.assertEqual(None, self.compare_timeline_lists(s.compile(), self.TEST_TIMELINE))

    def test_sequence_channel_types(self):
        '''Ensure that the channel names get converted to the proper 
        type for indices into the unit's channels array.  Different
        controller drivers use different types for these (string
        vs integer).'''
        s = Sequence()
        s.load_file('data/testchannels.lseq', self.umap, self.vmap)
        self.assertTrue(type(s._event_list[0][0].vchannel.channel.id) is str)
        self.assertTrue(type(s._event_list[1][0].vchannel.channel.id) is int)
        self.assertTrue(type(s._event_list[2][0].vchannel.channel.id) is int)
        self.assertTrue(type(s._event_list[3][0].vchannel.channel.id) is int)

    def compare_timeline_lists(self, actual, expected):
        '''Given two lists of tuples, where the first element of
        the tuple is a timestamp, report on whether each list
        contains identical content, considering that for a
        given timestamp, there could be many entries with
        that timestamp, but could appear in random sequence
        (as can all the elements in the outer list).  We
        just want to be sure the contents are the same
        regardless of order of appearance.
        
        Returns description of discrpancy as a string, or None
        if there was no mismatch.'''

        # first, put them in order
        a = sorted(actual)
        e = sorted(expected)
        result = None
        if len(a) != len(e):
            print("Actual data dumped to data/SequenceData.timeline.")
            outf = file("data/SequenceData.timeline", "w")
            for ev in a:
                print("%8d %-10s %s\n" % (ev[0], ev[2], ev[1]), file=outf)
            outf.close()
            return "TIMELINE MISMATCH: actual has %d elements vs. expected %d" % (len(a), len(e))

        for i in range(len(a)):
            if a[i] != e[i]:
                if result is None:
                    result = "TIMELINE MISMATCH: @%d: actual=%s, expected=%s" % (i, a[i], e[i])
                else:
                    result = "MULTIPLE TIMELINE MISMATCHES, including @%d: actual=%s, expected=%s" % (i, a[i], e[i])

        return result

#    def testCons(self):
#        s = Sequence()
#        self.assertEqual(s.event_list(), [])
#
#    def testSeq1(self):
#        s = Sequence()
#        s.add_event(Event(time=0, unit=0, channel=0, level=0))
#        self.assertEqual(s.event_list(), [(0,0,0,0)])
#
#    def testSeq2(self):
#        s = Sequence()
#        s.add_event(Event(time=100, unit=2, channel=12, level=32))
#        s.add_event(Event(time=200, unit=2, channel=12, level=64))
#        s.add_event(Event(time=200, unit=3, channel=14, level=12))
#        self.assertEqual(s.event_list(), [
#            (100, 2, 12, 32),
#            (200, 2, 12, 64),
#            (200, 3, 14, 12)
#        ])
#
#    def testSeq3(self):
#        s = Sequence()
#        s.add_event(Event(time=200, unit=4, channel=12, level=64))
#        s.add_event(Event(time=100, unit=5, channel=12, level=32))
#        s.add_event(Event(time=200, unit=0, channel=14, level=12))
#        self.assertEqual(s.event_list(), [
#            (100, 5, 12, 32),
#            (200, 4, 12, 64),
#            (200, 0, 14, 12)
#        ])
#
##    def testLoaderConstructor(self):
##        s = Sequence("test-1.csv")
##        self.checkLoadedFile(s)
##
##    def testLoaderMethod(self):
##        s = Sequence()
##        s.load("test-1.csv")
##        self.checkLoadedFile(s)
##
##    def testPlayList(self):
##        s = Sequence("test-2.csv")
##        self.assertEqual(s.eventList(), [
##            (    0L, 0, 0,   0),
##            (    0L, 0, 1,   0),
##            (    0L, 0, 2,   0),
##            (    0L, 0, 3,   0),
##            ( 5000L, 0, 0, 127),
##            ( 5000L, 0, 1,  64),
##            ( 5833L, 0, 1,  65),
##            ( 6666L, 0, 1,  66),
##            ( 7499L, 0, 1,  67),
##            ( 8332L, 0, 1,  68),
##            ( 9165L, 0, 1,  69),
##            ( 9998L, 0, 1,  70),
##            (10000L, 0, 0,  64),
##            (10000L, 0, 2,  50),
##            (15000L, 0, 0,  32),
##            (15000L, 0, 1,   0),
##            (15000L, 0, 2,   7),
##            (15000L, 0, 3,  42),
##            (15714L, 0, 2,   6),
##            (16428L, 0, 2,   5),
##            (17142L, 0, 2,   4),
##            (17856L, 0, 2,   3),
##            (18570L, 0, 2,   2),
##            (19284L, 0, 2,   1),
##            (19998L, 0, 2,   0),
##            (20000L, 0, 0,   0),
##            (20000L, 0, 3, 127),
##            (25000L, 0, 0, 127),
##            (25000L, 0, 3,   0),
##        ])
##
##    def checkLoadedFile(self, seq):
##        self.assertEqual(seq.eventList(), [
##            (    0L, 0, 0,   0),
##            (    0L, 0, 1,   0),
##            (    0L, 0, 2,   0),
##            (    0L, 0, 3,   0),
##            ( 5000L, 0, 0, 127),
##            ( 5000L, 0, 1,  64),
##            (10000L, 0, 0,  64),
##            (10000L, 0, 1,  64),
##            (10000L, 0, 2,  50),
##            (15000L, 0, 0,  32),
##            (15000L, 0, 1,   0),
##            (15000L, 0, 2,   7),
##            (15000L, 0, 3,  42),
##            (20000L, 0, 0,   0),
##            (20000L, 0, 2,   0),
##            (20000L, 0, 3, 127),
##            (25000L, 0, 0, 127),
##            (25000L, 0, 3,   0),
##        ])
# 
# $Log: not supported by cvs2svn $
#
