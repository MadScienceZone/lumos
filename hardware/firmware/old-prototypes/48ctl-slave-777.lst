MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@     @   @@@    @@@   @@@@@  @          48-Channel SSR Controller Board  @@
                      00007 ;@@    @@  @   @  @   @    @    @          Firmware Version 2.0.2           @@
                      00008 ;@@   @ @  @   @  @        @    @                                           @@
                      00009 ;@@  @  @   @@@   @        @    @          For use with controller hardware @@
                      00010 ;@@ @@@@@  @   @  @        @    @          revision 3.1 (boards marked as   @@
                      00011 ;@@     @  @   @  @   @    @    @          "48CTL-3-1")                     @@
                      00012 ;@@     @   @@@    @@@     @    @@@@@                                       @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2004, 2005, 2006, 2007 Steven L. Willoughby, Aloha, Oregon,
                      00017 ; USA.  All Rights Reserved.
                      00018 ;
                      00019 ; $Header: /usr/local/cvsroot/ssr/firmware/48ctl-slave-777.lst,v 1.3 2007/11/20 06:19:27 steve Exp $
                      00020 ;
                      00021 ; Target Microcontroller is PIC16F877A and/or PIC16F777, Q=20MHz
                      00022 ;  (200nS instruction cycle) (The master MUST be an 877A, the slave MAY
                      00023 ;  be either.)
                      00024 ; Serial control (RS-485) at 19.2kbps
                      00025 ;
                      00026 ; *** THIS IS THE SLAVE MCU FIRMWARE CODE.
                      00027 ; *** IT MUST BE FLASHED INTO U3 (THE LOWER MCU CHIP ON THE BOARD).
                      00028 ; *** This chip acts upon commands received from the master MCU.  It is
                      00029 ; *** also in control of the RS-485 transceiver mode (although in this
                      00030 ; *** version it leaves it set to RECEIVE mode all the time.)  It would
                      00031 ; *** also be the chip to transmit over the RS-485 bus, but again, this
                      00032 ; *** version never actually does that.
                      00033 ; *** THIS VERSION OF THE FILE MUST BE RUN ON A PIC16F777  *** @@P=777@@
                      00034 ;
                      00035 ;=============================================================================
                      00036 ; HARDWARE DESCRIPTION
                      00037 ;-----------------------------------------------------------------------------
                      00038 ;
                      00039 ;  PIC16F777/877A Microcontroller I/O pin assignments:
                      00040 ;                        ________   _________
                      00041 ;                       |o       \_/         |
                      00042 ;     Vpp /RESET -->  1 | /MCLR      PGD/RB7 | 40 <-> PGD
                      00043 ;         /SSR16 <--  2 | RA0        PGC/RB6 | 39 <-- PGC
                      00044 ;         /SSR14 <--  3 | RA1            RB5 | 38 --> /SSR15
                      00045 ;         /SSR12 <--  4 | RA2            RB4 | 37 --> /SSR13
                      00046 ;         /SSR10 <--  5 | RA3            RB3 | 36 --> /SSR11
                      00047 ;         /SSR08 <--  6 | RA4 (OD)       RB2 | 35 --> /SSR09
                      00048 ;        ACT LED <--  7 | RA5            RB1 | 34 --> /SSR07
                      00049 ;        GRN LED <--  8 | RE0        INT/RB0 | 33 <-- ZC INT
                      00050 ;        YEL LED <--  9 | RE1    PIC     VDD | 32 --- +5V
                      00051 ;        RED LED <-- 10 | RE2    16F     VSS | 31 --- GND
                      00052 ;            +5V --- 11 | VDD    877A    RD7 | 30 --> /SSR17
                      00053 ;            GND --- 12 | VSS     or     RD6 | 29 --> /SSR06
                      00054 ;           xtal --- 13 | OSC    777     RD5 | 28 --> /SSR05
                      00055 ;             +----- 14 | OSC            RD4 | 27 --> /SSR18
                      00056 ;         /SSR04 <-- 15 | RC0         RX/RC7 | 26 <-- Serial RxD
                      00057 ;         /SSR19 <-- 16 | RC1         TX/RC6 | 25 --> Serial TxD
                      00058 ;         /SSR03 <-- 17 | RC2            RC5 | 24 --> /SSR02
                      00059 ;         /SSR01 <-- 18 | RC3            RC4 | 23 --> /SSR00
                      00060 ;         /SSR23 <-- 19 | RD0            RD3 | 22 --> /SSR22
                      00061 ;         /SSR21 <-- 20 | RD1            RD2 | 21 --> /SSR20
                      00062 ;                       |____________________|
                      00063 ;
                      00064 ; Note that the '877A can be used for either master or slave, but the '777
                      00065 ; can ONLY be used for the slave processor.
                      00066 ;
                      00067 ;-----------------------------------------------------------------------------
                      00068 ; I/O PORT ASSIGNMENTS
                      00069 ;-----------------------------------------------------------------------------
                      00070 ;
                      00071 ;          7   6   5_  4   3   2   1   0
                      00072 ; PORT RA --- --- T/R /08 /10 /12 /14 /16
                      00073 ;          <OSC>   O   O   O   O   O   O
                      00074 ;
                      00075 ; PORT RB --- --- /15 /13 /11 /09 /07 ---
                      00076 ;          <PGM>   O   O   O   O   O  INT
                      00077 ;
                      00078 ; PORT RC --- --- /02 /00 /01 /03 /19 /04
                      00079 ;          <I/O>   O   O   O   O   O   O
                      00080 ;
                      00081 ; PORT RD /17 /06 /05 /18 /22 /20 /21 /23
                      00082 ;          O   O   O   O   O   O   O   O
                      00083 ;
                      00084 ; PORT RE --- --- --- --- --- RED YEL GRN
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00085 ;                              O   O   O
                      00086 ;
                      00087 ;
                      00088 ; THESE SSR LINES ARE NEGATIVE-LOGIC CONTROLLED!
                      00089 ; (0=ON, 1=OFF)
                      00090 ;
                      00091 ;=============================================================================
                      00092 ; MEMORY MAP (At least the parts we directly care about)
                      00093 ;-----------------------------------------------------------------------------
                      00094 ;
                      00095 ;-----------------------------------------------------------------------------
                      00096 ; ALL BANKS
                      00097 ;-----------------------------------------------------------------------------
                      00098 ;
                      00099 ;
                      00100 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00101 ; $000 INDF          |                                                       |
                      00102 ;                    |  Access register indirect [FSR]                       |
                      00103 ;                    |______|______|______|______|______|______|______|______|
                      00104 ; $002 PCL           |                                                       |
                      00105 ;                    |                         PC<7:0>                       |
                      00106 ;                    |______|______|______|______|______|______|______|______|
                      00107 ; $003 STATUS        |      |      |      |  __  |  __  |      |      |      |
                      00108 ;                    | IRP  |  RP1 |  RP0 |  TO  |  PD  |  Z   |  DC  |  C   |
                      00109 ;                    |______|______|______|______|______|______|______|______|
                      00110 ; $004 FSR           |                                                       |
                      00111 ;                    |  Address of target of INDF pseudo-register            |
                      00112 ;                    |______|______|______|______|______|______|______|______|
                      00113 ; $00A PCLATH        |////////////////////|                                  |
                      00114 ;                    |////////////////////|      PC<12:8> latch register     |
                      00115 ;                    |////////////////////|______|______|______|______|______|
                      00116 ; $00B INTCON        |      |      |      |      |      |      |      |      |
                      00117 ;                    | GIE  | PEIE |TMR0IE| INTE | RBIE |TMR0IF| INTF | RBIF |
                      00118 ;                    |______|______|______|______|______|______|______|______|
                      00119 ; $070 W_TEMP        |                                                       |
                      00120 ;                    |  Temporary storage for W during int service routine   |
                      00121 ;                    |______|______|______|______|______|______|______|______|
                      00122 ; $071 STATUS_TEMP   |                                                       |
                      00123 ;                    |  Temporary storage for STATUS during ISR              |
                      00124 ;                    |______|______|______|______|______|______|______|______|
                      00125 ; $072 I             |                                                       |
                      00126 ;                    |  General-purpose data counter                         |
                      00127 ;                    |______|______|______|______|______|______|______|______|
                      00128 ; $073 J             |                                                       |
                      00129 ;                    |  General-purpose data counter                         |
                      00130 ;                    |______|______|______|______|______|______|______|______|
                      00131 ; $074 K             |                                                       |
                      00132 ;                    |  General-purpose data counter                         |
                      00133 ;                    |______|______|______|______|______|______|______|______|
                      00134 ; $075 X             |                                                       |
                      00135 ;                    |  General-purpose data register                        |
                      00136 ;                    |______|______|______|______|______|______|______|______|
                      00137 ; $076 Y             |                                                       |
                      00138 ;                    |  General-purpose data register                        |
                      00139 ;                    |______|______|______|______|______|______|______|______|
                      00140 ; $077 PCLATH_TEMP   |                                                       |
                      00141 ;                    |  Temporary storage for PCLATH during ISR              |
                      00142 ;                    |______|______|______|______|______|______|______|______|
                      00143 ; $078               |      |      |      |      |      |      |      |      |
                      00144 ;                    |      |      |      |      |      |      |      |      |
                      00145 ;                    |______|______|______|______|______|______|______|______|
                      00146 ;
                      00147 ;       .                                        .
                      00148 ;       .                                        .
                      00149 ;       .                                        .
                      00150 ;
                      00151 ;                     _______________________________________________________
                      00152 ; $07F               |      |      |      |      |      |      |      |      |
                      00153 ;                    |      |      |      |      |      |      |      |      |
                      00154 ;                    |______|______|______|______|______|______|______|______|
                      00155 ;
                      00156 ;
                      00157 ;-----------------------------------------------------------------------------
                      00158 ; BANK 0
                      00159 ;-----------------------------------------------------------------------------
                      00160 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00161 ; $001 TMR0          |                                                       |
                      00162 ;   (bank 2 too)     |                                                       |
                      00163 ;                    |______|______|______|______|______|______|______|______|
                      00164 ; $005 PORTA         |/////////////|   _  | _____| _____| _____| _____| _____|
                      00165 ;                    |/////////////| T/R  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00166 ;                    |/////////////|______|______|______|______|______|______|
                      00167 ; $006 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00168 ;   (bank 2 too)     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00169 ;                    |/////////////|______|______|______|______|______|//////|
                      00170 ; $007 PORTC         |/////////////| _____| _____| _____| _____| _____| _____|
                      00171 ;                    |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00172 ;                    |/////////////|______|______|______|______|______|______|
                      00173 ; $008 PORTD         | _____| _____| _____| _____| _____| _____| _____| _____|
                      00174 ;                    | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00175 ;                    |______|______|______|______|______|______|______|______|
                      00176 ; $009 PORTE         |//////////////////////////////////|      |      |      |
                      00177 ;                    |//////////////////////////////////| RED  | YEL  | GRN  |
                      00178 ;                    |//////////////////////////////////|______|______|______|
                      00179 ; $00C PIR1          |      |      |      |      |      |      |      |      |
                      00180 ;                    |PSPIF | ADIF | RCIF | TXIF |SSPIF |CCP1IF|TMR2IF|TMR1IF|
                      00181 ;                    |______|______|______|______|______|______|______|______|
                      00182 ; $00D PIR2          |      |      |      |      |      |      |      |      |
                      00183 ;                    |      | CMIF |      | EEIF |BCLIF |      |      |CCP2IF|
                      00184 ;                    |______|______|______|______|______|______|______|______|
                      00185 ; $00E TMR1L         |                                                       |
                      00186 ;                    | Holding register for LSB of TMR1 register             |
                      00187 ;                    |______|______|______|______|______|______|______|______|
                      00188 ; $00F TMR1H         |                                                       |
                      00189 ;                    | Holding register for MSB of TMR1 register             |
                      00190 ;                    |______|______|______|______|______|______|______|______|
                      00191 ; $010 T1CON         |//////|      |             |T1    |______|      |      |
                      00192 ;                    |//////|T1RUN |  T1CKPS1,0  |OSCEN |T1SYNC|TMR1CS|TMR1ON|
                      00193 ;                    |//////|______|______|______|______|______|______|______|
                      00194 ; $011 TMR2          |                                                       |
                      00195 ;                    | Timer2 module register                                |
                      00196 ;                    |______|______|______|______|______|______|______|______|
                      00197 ; $012 T2CON         |//////|                           |      |             |
                      00198 ;                    |//////|       TOUTPS3,2,1,0       |TMR2ON|  T2CKPS1,0  |
                      00199 ;                    |//////|______|______|______|______|______|______|______|
                      00200 ; $018 RCSTA         |      |      |      |      |      |      |      |      |
                      00201 ;                    | SPEN |  RX9 | SREN | CREN |ADDEN | FERR | OERR | RX9D |
                      00202 ;                    |______|______|______|______|______|______|______|______|
                      00203 ; $019 TXREG         |                                                       |
                      00204 ;                    | AUSART transmit data register                         |
                      00205 ;                    |______|______|______|______|______|______|______|______|
                      00206 ; $01A RCREG         |                                                       |
                      00207 ;                    | AUSART receive data register                          |
                      00208 ;                    |______|______|______|______|______|______|______|______|
                      00209 ; $01F ADCON0        |      |      |      |      |      |      |//////|      |
                      00210 ;                    | ADCS1| ADCS0| CHS2 | CHS1 | CHS0 |  GO  |//////| ADON |
                      00211 ;                    |______|______|______|______|______|______|//////|______|
                      00212 ;
                      00213 ; General-purpose data files
                      00214 ;                     _______________________________________________________
                      00215 ; $020 SSR00_VAL     |      |      |      |                                  |
                      00216 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00217 ;                    |______|______|______|______|______|______|______|______|
                      00218 ; $021 SSR01_VAL     |      |      |      |                                  |
                      00219 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00220 ;                    |______|______|______|______|______|______|______|______|
                      00221 ;
                      00222 ;       .                                        .
                      00223 ;       .                                        .
                      00224 ;       .                                        .
                      00225 ;
                      00226 ;                     _______________________________________________________
                      00227 ; $037 SSR23_VAL     |      |      |      |                                  |
                      00228 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00229 ;                    |______|______|______|______|______|______|______|______|
                      00230 ; $038 PORTA_BUF     |/////////////|   _  | _____| _____| _____| _____| _____|
                      00231 ;                    |/////////////| T/R  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00232 ;                    |/////////////|______|______|______|______|______|______|
                      00233 ; $039 PORTB_BUF     |/////////////| _____| _____| _____| _____| _____|//////|
                      00234 ;                    |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00235 ;                    |/////////////|______|______|______|______|______|//////|
                      00236 ; $03A PORTC_BUF     |/////////////| _____| _____| _____| _____| _____| _____|
                      00237 ;                    |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00238 ;                    |/////////////|______|______|______|______|______|______|
                      00239 ; $03B PORTD_BUF     | _____| _____| _____| _____| _____| _____| _____| _____|
                      00240 ;                    | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00241 ;                    |______|______|______|______|______|______|______|______|
                      00242 ; $03C PORTE_BUF     |//////////////////////////////////|      |      |      |
                      00243 ;                    |//////////////////////////////////| RED  | YEL  | GRN  |
                      00244 ;                    |//////////////////////////////////|______|______|______|
                      00245 ; $03D PHASE_OFFSET  |                                                       |
                      00246 ;                    |  Number of slices to delay from ZC int to slice 0     |
                      00247 ;                    |______|______|______|______|______|______|______|______|
                      00248 ; $03E SSR_ID        |      |      |      |                                  |
                      00249 ;                    |MY_SSR|ILLSSR|      |  Local device offset from SSR00  |
                      00250 ;                    |______|______|______|______|______|______|______|______|
                      00251 ; $03F FLASH_CT      |                                                       |
                      00252 ;                    |  Value to be flashed on an LED                        |
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00253 ;                    |______|______|______|______|______|______|______|______|
                      00254 ; $040 DEVICE_ID     |///////////////////////////|                           |
                      00255 ;                    |///////////////////////////| This device's ID number   |
                      00256 ;                    |///////////////////////////|______|______|______|______|
                      00257 ; $041 GRN_TMR       |  If SSR_STATE<GRNEN>                                  |
                      00258 ;                    |  Number of 1/120sec until green LED flips state       |
                      00259 ;                    |______|______|______|______|______|______|______|______|
                      00260 ; $042 YEL_TMR       |  If SSR_STATE<YELEN>                                  |
                      00261 ;                    |  Number of 1/120sec until yellow LED turns off        |
                      00262 ;                    |______|______|______|______|______|______|______|______|
                      00263 ; $043 RED_TMR       |  If SSR_STATE<REDEN>                                  |
                      00264 ;                    |  Number of 1/120sec until red LED turns off           |
                      00265 ;                    |______|______|______|______|______|______|______|______|
                      00266 ; $044 SSR_STATE     |      |      |      |      |      |                    |
                      00267 ;                    |INCYC |PRECYC|REDEN |YELEN |GRNEN |       STATE        |
                      00268 ;                    |______|______|______|______|______|______|______|______|
                      00269 ; $045 CUR_SLICE     |  If SSR_STATE<INCYC>                                  |
                      00270 ;                    |  Current slice (counts down) of AC half-wave          |
                      00271 ;                    |______|______|______|______|______|______|______|______|
                      00272 ; $046 CUR_PRE       |  If SSR_STATE<PRECYC>                                 |
                      00273 ;                    |  Countdown from ZC interrupt to start of AC half-wave |
                      00274 ;                    |______|______|______|______|______|______|______|______|
                      00275 ; $047 RX_BYTE       |                                                       |
                      00276 ;                    |  Received byte from serial network                    |
                      00277 ;                    |______|______|______|______|______|______|______|______|
                      00278 ; $048 SSR_STATE2    |SLICE |DIM_  |DIM_  |      |      |      |      |      |
                      00279 ;                    |_UPD  |START |END   |REDOFF|YELOFF|GRNBLK|SSRUPD| TXQUE|
                      00280 ;                    |______|______|______|______|______|______|______|______|
                      00281 ; $049 DATA_BUF      |                                                       |
                      00282 ;                    |  Holding area for data of command being parsed        |
                      00283 ;                    |______|______|______|______|______|______|______|______|
                      00284 ; $04A ACT_TMR       |  If SSR_STATE3<ACTEN>                                 |
                      00285 ;                    |  Number of 1/120sec until ACT LED turns off           |
                      00286 ;                    |______|______|______|______|______|______|______|______|
                      00287 ; $04B SSR_STATE3    |      |      |      |      |      |      |      |      |
                      00288 ;                    |      |      |      |      |      |ACTEN |ACTOFF|PRIVEN|
                      00289 ;                    |______|______|______|______|______|______|______|______|
                      00290 ; $04C               |      |      |      |      |      |      |      |      |
                      00291 ;                    |      |      |      |      |      |      |      |      |
                      00292 ;                    |______|______|______|______|______|______|______|______|
                      00293 ; $04D               |      |      |      |      |      |      |      |      |
                      00294 ;                    |      |      |      |      |      |      |      |      |
                      00295 ;                    |______|______|______|______|______|______|______|______|
                      00296 ; $04E TXBUF_QUEUE   |                           |                           |
                      00297 ;                    |             5             | Addr of next byte to queue|
                      00298 ;                    |______|______|______|______|______|______|______|______|
                      00299 ; $04F TXBUF_SEND    |                           |                           |
                      00300 ;                    |             5             | Addr of next byte to send |
                      00301 ;                    |______|______|______|______|______|______|______|______|
                      00302 ; $050 TXBUF         |                                                       |
                      00303 ;                    |  Transmitter output buffer (byte 1 of 16)             |
                      00304 ;                    |______|______|______|______|______|______|______|______|
                      00305 ;
                      00306 ;       .                                        .
                      00307 ;       .                                        .
                      00308 ;       .                                        .
                      00309 ;
                      00310 ;                     _______________________________________________________
                      00311 ; $05F               |                                                       |
                      00312 ;                    |  Transmitter output buffer (byte 16 of 16)            |
                      00313 ;                    |______|______|______|______|______|______|______|______|
                      00314 ; $060               |      |      |      |      |      |      |      |      |
                      00315 ;                    |      |      |      |      |      |      |      |      |
                      00316 ;                    |______|______|______|______|______|______|______|______|
                      00317 ;
                      00318 ;       .                                        .
                      00319 ;       .                                        .
                      00320 ;       .                                        .
                      00321 ;
                      00322 ;                     _______________________________________________________
                      00323 ; $06F               |      |      |      |      |      |      |      |      |
                      00324 ;                    |      |      |      |      |      |      |      |      |
                      00325 ;                    |______|______|______|______|______|______|______|______|
                      00326 ;
                      00327 ;-----------------------------------------------------------------------------
                      00328 ; BANK 1
                      00329 ;-----------------------------------------------------------------------------
                      00330 ;
                      00331 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00332 ; $085 TRISA         |                                                       |
                      00333 ;                    | Port A tri-state bitmask (1=input, 0=output)          |
                      00334 ;                    |______|______|______|______|______|______|______|______|
                      00335 ; $086 TRISB         |                                                       |
                      00336 ;  (Bank 3 too)      | Port B tri-state bitmask (1=input, 0=output)          |
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00337 ;                    |______|______|______|______|______|______|______|______|
                      00338 ; $087 TRISC         |                                                       |
                      00339 ;                    | Port C tri-state bitmask (1=input, 0=output)          |
                      00340 ;                    |______|______|______|______|______|______|______|______|
                      00341 ; $088 TRISD         |                                                       |
                      00342 ;                    | Port D tri-state bitmask (1=input, 0=output)          |
                      00343 ;                    |______|______|______|______|______|______|______|______|
                      00344 ; $089 TRISE         |      |      |      | PSP  |//////|                    |
                      00345 ;                    |  IBF | OBF  | IBOV | MODE |//////| Port E tri-state   |
                      00346 ;                    |______|______|______|______|//////|______|______|______|
                      00347 ; $08C PIE1          |      |      |      |      |      |      |      |      |
                      00348 ;                    |PSPIE | ADIE | RCIE | TXIE |SSPIE |CCP1IE|TMR2IE|TMR1IE|
                      00349 ;                    |______|______|______|______|______|______|______|______|
                      00350 ; $08D PIE2          |      |      |      |      |      |      |      |      |
                      00351 ;                    |      | CMIE |      | EEIE |BCLIE |      |      |CCP2IE|
                      00352 ;                    |______|______|______|______|______|______|______|______|
                      00353 ; $092 PR2           |                                                       |
                      00354 ;                    | Timer 2 period register                               |
                      00355 ;                    |______|______|______|______|______|______|______|______|
                      00356 ; $098 TXSTA         |      |      |      |      |//////|      |      |      |
                      00357 ;                    | CSRC |  TX9 | TXEN | SYNC |//////| BRGH | TRMT | TX9D |
                      00358 ;                    |______|______|______|______|//////|______|______|______|
                      00359 ; $099 SPBRG         |                                                       |
                      00360 ;                    | Baud Rate Generator Value                             |
                      00361 ;                    |______|______|______|______|______|______|______|______|
                      00362 ; $09F ADCON1        |      |      |//////|//////|      |      |      |      |
                      00363 ;                    | ADFM | ADCS2|//////|//////| PCFG3| PCFG2| PCFG1| PCFG0|
                      00364 ;                    |______|______|//////|//////|______|______|______|______|
                      00365 ; $0AD               |      |      |      |      |      |      |      |      |
                      00366 ;                    |      |      |      |      |      |      |      |      |
                      00367 ;                    |______|______|______|______|______|______|______|______|
                      00368 ;
                      00369 ;       .                                        .
                      00370 ;       .                                        .
                      00371 ;       .                                        .
                      00372 ;
                      00373 ;                     _______________________________________________________
                      00374 ; $0EF               |      |      |      |      |      |      |      |      |
                      00375 ;                    |      |      |      |      |      |      |      |      |
                      00376 ;                    |______|______|______|______|______|______|______|______|
                      00377 ;
                      00378 ;-----------------------------------------------------------------------------
                      00379 ; BANK 2
                      00380 ;-----------------------------------------------------------------------------
                      00381 ;
                      00382 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00383 ; $101 TMR0          |                                                       |
                      00384 ;   (bank 0 too)     | Timer0 module register                                |
                      00385 ;                    |______|______|______|______|______|______|______|______|
                      00386 ; $106 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00387 ;   (bank 0 too)     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00388 ;                    |/////////////|______|______|______|______|______|//////|
                      00389 ; $10C EEDATA        |                                                       |
                      00390 ;                    | EEPROM Data register (LSB)                            |
                      00391 ;                    |______|______|______|______|______|______|______|______|
                      00392 ; $10D EEADR         |                                                       |
                      00393 ;                    | EEPROM Address register (LSB)                         |
                      00394 ;                    |______|______|______|______|______|______|______|______|
                      00395 ; $10E EEDATH        |/////////////|                                         |
                      00396 ;                    |/////////////| EEPROM Data register (MSB)              |
                      00397 ;                    |/////////////|______|______|______|______|______|______|
                      00398 ; $10F EEADRH        |////////////////////|                                  |
                      00399 ;                    |////////////////////| EEPROM Address register (MSB)    |
                      00400 ;                    |////////////////////|______|______|______|______|______|
                      00401 ; $120               |      |      |      |      |      |      |      |      |
                      00402 ;                    |      |      |      |      |      |      |      |      |
                      00403 ;                    |______|______|______|______|______|______|______|______|
                      00404 ;
                      00405 ;       .                                        .
                      00406 ;       .                                        .
                      00407 ;       .                                        .
                      00408 ;
                      00409 ;                     _______________________________________________________
                      00410 ; $16F               |      |      |      |      |      |      |      |      |
                      00411 ;                    |      |      |      |      |      |      |      |      |
                      00412 ;                    |______|______|______|______|______|______|______|______|
                      00413 ;
                      00414 ;-----------------------------------------------------------------------------
                      00415 ; BANK 3
                      00416 ;-----------------------------------------------------------------------------
                      00417 ;
                      00418 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00419 ; $181 OPTION_REG    | ____ |      |      |      |      |                    |
                      00420 ;                    | RBPU |INTEDG| T0CS | T0SE | PSA  |      PS2,1,0       |
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00421 ;                    |______|______|______|______|______|______|______|______|
                      00422 ; $186 TRISB         |                                                       |
                      00423 ;  (Bank 1 too)      | Port B tri-state bitmask (1=input, 0=output)          |
                      00424 ;                    |______|______|______|______|______|______|______|______|
                      00425 ; $18C EECON1        |      |      |      |      |      |      |      |      |
                      00426 ;                    |EEPGD |      |      |      |WRERR | WREN |  WR  |  RD  |
                      00427 ;                    |______|______|______|______|______|______|______|______|
                      00428 ; $18D EECON2        |                                                       |
                      00429 ;                    | EEPROM Control Register (magic register)              |
                      00430 ;                    |______|______|______|______|______|______|______|______|
                      00431 ; $1A0               |      |      |      |      |      |      |      |      |
                      00432 ;                    |      |      |      |      |      |      |      |      |
                      00433 ;                    |______|______|______|______|______|______|______|______|
                      00434 ;
                      00435 ;       .                                        .
                      00436 ;       .                                        .
                      00437 ;       .                                        .
                      00438 ;
                      00439 ;                     _______________________________________________________
                      00440 ; $1EF               |      |      |      |      |      |      |      |      |
                      00441 ;                    |      |      |      |      |      |      |      |      |
                      00442 ;                    |______|______|______|______|______|______|______|______|
                      00443 ;
                      00444 ;
                      00445 ;=============================================================================
                      00446 ; IMPLEMENTATION NOTES
                      00447 ;-----------------------------------------------------------------------------
                      00448 ;
                      00449 ; The SSR controller firmware consists of a number of somewhat independent
                      00450 ; subsystems:
                      00451 ;
                      00452 ; START
                      00453 ;       Initializes the microcontroller, starts up the required peripherals,
                      00454 ;       indicates the device ID on the front panel, and enters the main loop
                      00455 ;
                      00456 ; ISR
                      00457 ;       The interrupt service routine manages a set of counters and timers:
                      00458 ;       1. At each AC line zero-crossing point, we reset a two-stage waveform
                      00459 ;          slicing timing chain which governs the ability for the SSRs to dim
                      00460 ;          incandescent lamps plugged into them;
                      00461 ;       2. Each front panel LED has a counter for how long their current
                      00462 ;          status is to be held, to allow a human to have enough time to
                      00463 ;          see the LED before it would be extinguished.
                      00464 ;
                      00465 ; MAIN_LOOP
                      00466 ;       Manages the display of the front panel LEDs
                      00467 ;       Updates the status of the SSR lines if it's time to do so
                      00468 ;       Receives a character from the serial line if one's waiting
                      00469 ;
                      00470 ; INTERPRETER
                      00471 ;       When a byte is received on the serial line, it is processed by
                      00472 ;       a small state machine.  The current state is held in SSR_STATE<2:0>.
                      00473 ;
                      00474 ;-----------------------------------------------------------------------------
                      00475 ; Command Protocol:
                      00476 ;                     _______________________________________________________
                      00477 ; Command Byte:      |      |                    |                           |
                      00478 ;                    |  1   |    Command code    |   Target device address   |
                      00479 ;                    |______|______|______|______|______|______|______|______|
                      00480 ;
                      00481 ; Any byte with its MSB set is the beginning of a command.  If the target
                      00482 ; device matches this unit's address, the state machine kicks into gear and
                      00483 ; processes the command (which may require some following data bytes, all
                      00484 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00485 ; byte.
                      00486 ;
                      00487 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00488 ; in the middle of interpreting a multi-byte command.
                      00489 ;
                      00490 ; Commands recognized:
                      00491 ;       0: All channels off
                      00492 ;       1: Set/clear single channel (requires channel ID byte)
                      00493 ;       2: Set channel to value (requires channel ID and value bytes)
                      00494 ;       3: Reserved
                      00495 ;       4: Reserved
                      00496 ;       5: Reserved
                      00497 ;       6: Reserved
                      00498 ;       7: Administrative command (follow-on byte further decodes):
                      00499 ;          00pppppp Set phase offset=p and display on LEDs
                      00500 ;          010baaaa Set device address=aaaa; b=a<0>
                      00501 ;          01100000 Shutdown device
                      00502 ;          01100001 Disable administrative commands
                      00503 ;          01100010 Reserved
                      00504 ;             .         .
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00505 ;             .         .
                      00506 ;             .         .
                      00507 ;          01101111 Reserved
                      00508 ;          0111xxxx Internal commands MASTER->SLAVE:
                      00509 ;                   011100xx  Reserved
                      00510 ;                   011101yr  Display RED and/or YEL LED 2S
                      00511 ;                   01111gyr  HALT with <g><y><r> displayed on LEDs
                      00512 ;
                      00513 ;                     _______________________________________________________
                      00514 ; Channel ID:        |      |      |                                         |
                      00515 ;                    |  0   | ON   |               Channel ID                |
                      00516 ;                    |______|______|______|______|______|______|______|______|
                      00517 ; The ON bit <6> determines whether the channel is being turned on (1) or
                      00518 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00519 ; setting the channel to a specific dimmer value.
                      00520 ;
                      00521 ;                     _______________________________________________________
                      00522 ; Dimmer Value:      |      |      |      |                                  |
                      00523 ;                    |  0   |   x  |   x  | Brightness level (0=off, 31=on)  |
                      00524 ;                    |______|______|______|______|______|______|______|______|
                      00525 ;
                      00526 ;-----------------------------------------------------------------------------
                      00527 ; State Machine Details
                      00528 ;
                      00529 ; Normally sits at state 0 (Idle) where it pretty much spins free waiting
                      00530 ; for the start of a command to come along.
                      00531 ;  ___________________
                      00532 ; | 4 | ADMIN         |
                      00533 ; |___| Waiting for   |
                      00534 ; |     Sub-command   |
                      00535 ; |___________________|
                      00536 ;         ^  |
                      00537 ;         |  |
                      00538 ;         |  |
                      00539 ;         |  |
                      00540 ;  _______|__V________                   _________________
                      00541 ; | 0 | IDLE          |                 | 1 | SETCHAN     |
                      00542 ; |___|               |---------------->|___| Waiting for |
                      00543 ; |                   |<----------------|     Channel byte|
                      00544 ; |___________________|<-------+        |_________________|
                      00545 ;           |                  |
                      00546 ;           |                  |
                      00547 ;           |                  |
                      00548 ;           |                  |
                      00549 ;  _________V_________         |         _________________
                      00550 ; | 2 | DIMCHAN1      |        +--------| 3 | DIMCHAN2    |
                      00551 ; |___| Waiting for   |---------------->|___| Waiting for |
                      00552 ; |     Channel byte  |                 |     Value byte  |
                      00553 ; |___________________|                 |_________________|
                      00554 ;
                      00555 ;
                      00556 ;-----------------------------------------------------------------------------
                      00557 ; System Timing Notes
                      00558 ;
                      00559 ; The system has some fairly specific real-time timing requirements in order
                      00560 ; to function properly.  The main external event we're synchronized to is the
                      00561 ; point where the AC waveform crosses the 0V line (the "zero crossing" point).
                      00562 ;
                      00563 ; An optoisolator on the controller board is connected to the AC input of the
                      00564 ; transformer and sends a positive-logic pulse to the INT pin of the micro-
                      00565 ; controller every time the AC line crosses 0V.  (Actually, the leading edge
                      00566 ; will slightly lead the zero crossing point and the trailing edge will
                      00567 ; slightly lag behind it.)  So we enter our ISR once every 1/120 sec
                      00568 ; (assuming US-standard 60Hz power).  For reference, this is 0.00833333 sec
                      00569 ; or enough time for 41,666.666 instructions to be executed between each
                      00570 ; interrupt.
                      00571 ;
                      00572 ; (Revised; earlier versions of this firmware used 64 levels on the dimmers
                      00573 ; --which are probably too many--and this didn't allow enough time for the
                      00574 ; main loop to run, so we backed it off to 32 here.  We will only run into
                      00575 ; trouble now if all--or most--channels are set to the same level, since
                      00576 ; that one slice may run slightly over its allotted time, but the next slice
                      00577 ; will be shorter as a result and we'll catch back up within a tiny fraction
                      00578 ; of a cycle.)
                      00579 ;
                      00580 ; We divide the half-wave into "slices".  We need a minimum of 32 slices
                      00581 ; to get 32 levels of dimmer control, but we should add at least one on either
                      00582 ; end in case our timing's slightly off between the ZC points and the free-
                      00583 ; running timer.  For good measure, let's throw in a couple more to allow for
                      00584 ; pin settling times, minimum turn-on times for the triacs and just to be
                      00585 ; paranoid.  So let's say 38 slices per half-wave.  This is good, because it
                      00586 ; means that each dimmer level is 1/38th brightness, with the lowest setting
                      00587 ; (other than off) being a minimum of 7/38ths, which means we don't waste
                      00588 ; several dimmer levels below the threshold for an incandescent filament to
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00589 ; even be visibly on at all.
                      00590 ;
                      00591 ; At 38 slices per ZC, each slice is 0.000219298245614 seconds.
                      00592 ; The closest match to this is 0.0002192 sec (a timer value of 137 at 1:8 scale)
                      00593 ; so we're really getting about 38.01703 slices in a half-cycle.
                      00594 ; This works out to around 1,096 instructions per slice, which is more than
                      00595 ; adequate but can get tight if all the channels are at the same dimmer settings,
                      00596 ; but it works well enough.
                      00597 ; We have to be able to handle an incoming byte on the serial port and update all
                      00598 ; the SSRs once in that many instructions.
                      00599 ;
                      00600 ; These times will vary based on what commands are being parsed, the combination
                      00601 ; of SSRs on, off, dim, or at what brightness level, but a general idea is:
                      00602 ;
                      00603 ;    ROUTINE   IDLE  BUSY (total instruction cycles)
                      00604 ;     ISR              46
                      00605 ;     LEDs       12    16
                      00606 ;     SIO Poll    6    17
                      00607 ;     Parser     10     7, 23, 64, up to 129+
                      00608 ;     SSR Upd    22   373 up to 1,141+
                      00609 ;
                      00610 ; So when nothing at all is happening, we only need around 40 instruction
                      00611 ; cycles (0.000008 sec) per slice (3.6% of the available slice time) to run
                      00612 ; an idle main loop iteration.
                      00613 ;
                      00614 ; The overhead of some of the loops and subroutines can be eliminated by
                      00615 ; flattening them into lots of repetitive cut-and-paste inline code.  We do
                      00616 ; have the available program memory to do that, and gain some significant
                      00617 ; runtime performance.  For now, we will keep it less efficient but more
                      00618 ; maintainable until we need that performance.
                      00619 ;
                      00620 ; In the previous (prototype) version of this controller, we took the ZC
                      00621 ; signal from the *secondary* side of the transformer, which meant that it
                      00622 ; was possible for that to be out of phase with the actual AC ZC event, so
                      00623 ; the "phase delay" feature of the event handling code was written to
                      00624 ; compensate for this.  Now that we sample the AC line directly, we set
                      00625 ; this delay to a constant value and that should be good.  We left the
                      00626 ; capability in here, though, to account for any need for adjustment which
                      00627 ; may turn up due to component tolerances, propagation delays, or similar
                      00628 ; things.  We correct for any phase offset by adding a software delay
                      00629 ; from 0-255 (although really only 0-40 make much sense) slices between the ZC
                      00630 ; interrupt and the start of the dimmer cycle of 32 slices.  (The other 6
                      00631 ; slices are idle (not active) slices.)
                      00632 ;
                      00633 ; The value for PHASE_OFFSET should be chosen to start the cycle one or two
                      00634 ; slices into the actual half-wave.  So if there is no phase difference at all
                      00635 ; between sides of the transformer, PHASE_OFFSET shoud be started at 2.
                      00636 ;
                      00637 ; Here's the timeline:
                      00638 ;
                      00639 ;                    REAL                               REAL
                      00640 ;                     ZC                                 ZC
                      00641 ;    |................|..|...............|....|....|.....|..|..............
                      00642 ;    |phase delay------->|               |phase delay------>|
                      00643 ;    |                   |working slices----->|    |        |working slices-->
                      00644 ;    |                                   |    |idle|
                      00645 ;   INT                                 INT
                      00646 ;   (ZC)                                (ZC)
                      00647 ;
                      00648 ; Of course, in the current design, there is no phase shift across
                      00649 ; the transformer, so we'd have the trivial case of PHASE_OFFSET=2 (2 just to
                      00650 ; allow a little fudge room with the free-running slice timer which is not
                      00651 ; *quite* an even factor of the half-wave time):
                      00652 ;
                      00653 ;    REAL                         REAL
                      00654 ;     ZC                           ZC
                      00655 ;    .|..|....................|....|..|.................|
                      00656 ;     |->|                    |    |->|                 |
                      00657 ;     |  |working slices----->|    |  |working slices-->|
                      00658 ;     |  |                    |idle|  |                 |
                      00659 ;    INT                          INT
                      00660 ;
                      00661 ; Since the free-running slice timer isn't exactly in sync with the ZC timing,
                      00662 ; we'll start our working slices some variable fraction of 1/38th of a half-cycle
                      00663 ; each time.  This will cause a "wobble" in brightness level of not more than
                      00664 ; 1/38th brightness level (something less than one brightness increment), which
                      00665 ; ought to be difficult or impossible to notice by looking at an incandescent
                      00666 ; light load.  This is one reason why PHASE_OFFSET should be set to allow 1-2
                      00667 ; idle slices before we start turning on SSRs.
                      00668 ;
                      00669 ; On ZC interrupt, we set CUR_PRE to PHASE_DELAY and set <PRECYC>.
                      00670 ; On TMR2 interrupt, if SSR_STATE<PRECYC>, decrement CUR_PRE.
                      00671 ;   if zero, clear SSR_STATE<PRECYC>, set CUR_SLICE to 32, set <INCYC>,<DIM_START>.
                      00672 ;   if SSR_STATE<INCYC>, decrement CUR_SLICE; if zero, set DIM_END, clr INCYC; else set SLICE_UPD
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00673 ;
                      00674 ; In main polling loop:
                      00675 ;   if DIM_START: turn on "on" SSRs, clear DIM_START
                      00676 ;   if SLICE_UPD: turn on SSR == CUR_SLICE for SSRs with SSRDIM set; clear SLICE_UPD
                      00677 ;   if DIM_END:   turn off all except SSR_ON, clear DIM_END
                      00678 ;
                      00679 ; PRECYC INCYC SLICE_UPD DIM_START DIM_END CUR_PRE CUR_SLICE
                      00680 ;    0     x       x         x        x       x       x
                      00681 ;    1     x       x         x        x       4       x       <--zc
                      00682 ;    1     x       x         x        x       3       x
                      00683 ;    1     x       x         x        x       2       x
                      00684 ;    1     x       x         x        x       1       x
                      00685 ;    0     1     1-->0     1-->0      x       0      31       SSR@31/on turned on
                      00686 ;    0     1     1-->0       0        x       0      30       SSR@30    turned on
                      00687 ;    0     1     1-->0       0        x       0      29       SSR@29    turned on
                      00688 ; ...
                      00689 ;    0     1     1-->0       0        x       0       2       SSR@2     turned on
                      00690 ;    0     1     1-->0       0        x       0       1       SSR@1     turned on
                      00691 ;    0     0     1-->0       0      1-->0     0       0       all non-on turned off
                      00692 ;    0     0       0         0        0       0       0       idle...
                      00693 ; ...
                      00694 ;    1     0       0         0        0       4       0       <--zc
                      00695 ;
                      00696 ;
                      00697 ; We're apparently leaving the call stack half-empty worst-case.
                      00698 ; =============================================================================
                      00699 ;
                      00700 ; Startup LED sequence:
                      00701 ;  --- *set up I/O ports, TRIS bits
                      00702 ;  GYR flash quickly 5 times -- indicates restart of CPU
                      00703 ;  G-- [M] indicates MASTER
                      00704 ;  --R [S] indicates 877A SLAVE
                      00705 ;  -YR [S] indicates 777 SLAVE
                      00706 ;      *set up EEPROM
                      00707 ;      (2s)
                      00708 ;      *start transmitter
                      00709 ;  --- (2s)
                      00710 ;  -Y- flash YEL 1x == ROM ID v2.0
                      00711 ;  --- (2s)
                      00712 ;  G-R [M] GRN steady, flash RED for device ID
                      00713 ;  --- (2s)
                      00714 ;  --R (1s)
                      00715 ;      *set up serial port, interrupt options, etc.
                      00716 ;      (2s)
                      00717 ;      *start receiver
                      00718 ;  --- (.25s)
                      00719 ;  -Y- *slave waits for master
                      00720 ;      *master waits 1s then transmits
                      00721 ;  -YR RED steady, flash YEL MSN of PO
                      00722 ;  -YR YEL steady, flash RED LSN of PO
                      00723 ;  ---
                      00724 ;  GY- GRN blinking slowly => run state
                      00725 ;
                      00726 ;
                      00727 ;
                      00728 ;
                      00729 ; =============================================================================
                      00730 ;
                      00731                 PROCESSOR 16F777        ; @@P=777@@
                      00732 #include <p16f777.inc>                  ; @@P=777@@
                      00001         LIST
                      00002 ; P16F777.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00503         LIST
2007   1FE6           00733                 __CONFIG        _CONFIG1, _CP_ALL & _DEBUG_OFF & _VBOR_2_0 & _BOREN_1 & _MCLR_ON & _PWRT
                            E_ON & _WDT_ON & _HS_OSC ; @@P=777@@
2008   3FFC           00734                 __CONFIG        _CONFIG2, _BORSEN_1 & _IESO_OFF & _FCMEN_OFF ; @@P=777@@
                      00735 ;
                      00736 ;==============================================================================
                      00737 ; CONSTANTS
                      00738 ;==============================================================================
                      00739 ;
                      00740 ; Flash rates for various LED displays
                      00741 ;
  000000FF            00742 GRN_BLINK_RATE  EQU     .255            ; x 1/120s flash rate for green led
  0000003C            00743 ACT_RX_LEN      EQU     .60             ; x 1/120s active led for Rx data
  00000078            00744 RED_ORERR_LEN   EQU     .120            ; x 1/120s red for data overrun
  000000F0            00745 RED_CMDERR_LEN  EQU     .240            ; x 1/120s red for cmd error
  000000F0            00746 YEL_CMDERR_LEN  EQU     .240            ; x 1/120s yellow for cmd error
  0000001E            00747 SLV_TX_LEN      EQU     .30             ; x 1/120s red for Tx to slave
  0000001E            00748 SLV_RX_LEN      EQU     .30             ; x 1/120s red for Rx from master
  000000F0            00749 SLV_LED_LEN     EQU     .240            ; x 1/120s LED display time
                      00750 ;
                      00751 ;==============================================================================
                      00752 ; COMMAND BYTES
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00753 ;==============================================================================
                      00754 ;                     ___7______6______5______4______3______2______1______0__
                      00755 ; Command Byte:      |      |                    |                           |
                      00756 ;                    |  1   |    Command code    |   Target device address   |
                      00757 ;                    |______|______|______|______|______|______|______|______|
                      00758 ;
  00000007            00759 CMD_BIT         EQU     7               ; X------- Type (cmd=1; data=0)
  00000007            00760 CMD_SW_MASK     EQU     b'00000111'     ; -----XXX Nybble-swapped Command code mask
  00000070            00761 CMD_MASK        EQU     b'01110000'     ; -XXX---- Command code mask
  0000000F            00762 CMD_ADDR_MASK   EQU     b'00001111'     ; ----XXXX Device address mask
                      00763 ;
                      00764 ;                     ___7______6______5______4______3______2______1______0__
                      00765 ; Channel ID:        |      |      |                                         |
                      00766 ;                    |  0   | ON   |               Channel ID                |
                      00767 ;                    |______|______|______|______|______|______|______|______|
                      00768 ;
  00000006            00769 CMD_CHAN_ON     EQU     6               ; -X------ Channel fully on?
  0000003F            00770 CMD_CHAN_MASK   EQU     b'00111111'     ; --XXXXXX Channel ID mask
                      00771 ;
                      00772 ;                     ___7______6______5______4______3______2______1______0__
                      00773 ; Dimmer Value:      |      |      |      |                                  |
                      00774 ;                    |  0   |   x  |   x  | Brightness level (0=off, 31=on)  |
                      00775 ;                    |______|______|______|______|______|______|______|______|
                      00776 ;
  0000001F            00777 CMD_DIM_MASK    EQU     b'00011111'     ; ---XXXXX Dimmer value mask
                      00778 ;
                      00779 ;                     ___7______6______5______4______3______2______1______0__
                      00780 ; Set Phase Command: |      |      |      |                                  |
                      00781 ;                    |  0   |   0  |  Phase offset level (0-63)              |
                      00782 ;                    |______|______|______|______|______|______|______|______|
                      00783 ;
  0000003F            00784 CMD_AD_PH_MASK  EQU     b'00111111'     ; --XXXXXX phase offset value mask
                      00785 ;
                      00786 ;                     ___7______6______5______4______3______2______1______0__
                      00787 ; Set ID Command:    |      |      |      |      |                           |
                      00788 ;                    |  0   |   1  |   0  | ad<0>| New device address (ad)   |
                      00789 ;                    |______|______|______|______|______|______|______|______|
                      00790 ;
  00000004            00791 CMD_AD_ID_CHK   EQU     4               ; ---X---- Must == <0> bit
  0000000F            00792 CMD_AD_ID_MASK  EQU     b'00001111'     ; ----XXXX Device ID mask
                      00793 ;
                      00794 ;                     ___7______6______5______4______3______2______1______0__
                      00795 ; Misc. Admin Cmds:  |      |      |      |      |                           |
                      00796 ;                    |  0   |   1  |   1  |   0  |        command ID         |
                      00797 ;                    |______|______|______|______|______|______|______|______|
                      00798 ;
  0000000F            00799 CMD_AD_CMD_MASK EQU     b'00001111'     ; ----XXXX sub-command mask
                      00800 ;
                      00801 ;                     ___7______6______5______4______3______2______1______0__
                      00802 ; Slave Commands:    |      |      |      |      |                           |
                      00803 ;                    |  0   |   1  |   1  |   1  |    command / data bits    |
                      00804 ;                    |______|______|______|______|______|______|______|______|
                      00805 ;
                      00806 ;      Reserved for future commands:                 0      0      x      x
                      00807 ;      Display yellow/red pattern for 2s:            0      1     YEL    RED
                      00808 ;      Display green/yellow/red pattern, HALT:       1     GRN    YEL    RED
                      00809 ;
  00000004            00810 CMD_AD_SLAVE    EQU     4               ; ---X---- slave command?
  00000003            00811 CMD_AD_S_HALT   EQU     3               ; ----X--- halt w/LED pattern
  00000002            00812 CMD_AD_S_GRN    EQU     2               ; -----X-- green LED lit?
  00000001            00813 CMD_AD_S_YEL    EQU     1               ; ------X- yellow LED lit?
  00000000            00814 CMD_AD_S_RED    EQU     0               ; -------X red LED lit?
                      00815 
                      00816 
                      00817 ;
                      00818 ;==============================================================================
                      00819 ; EEPROM
                      00820 ;==============================================================================
                      00821 ;
                      00822 ; These locations in the EEPROM data area are used for persistent storage
                      00823 ; of important data values:
                      00824 ;
                      00825 ;                     ___7______6______5______4______3______2______1______0__
                      00826 ; $00  EE_IDLE       |      |      |      |      |      |      |      |      |
                      00827 ;                    |   1  |   1  |   1  |   1  |   1  |   1  |   1  |   1  |
                      00828 ;                    |______|______|______|______|______|______|______|______|
                      00829 ; $01  EE_DEV_ID     |///////////////////////////|                           |
                      00830 ;                    |///////////////////////////| This device's ID number   |
                      00831 ;                    |///////////////////////////|______|______|______|______|
                      00832 ; $02  EE_PHASE      |                                                       |
                      00833 ;                    |  Phase offset value                                   |
                      00834 ;                    |______|______|______|______|______|______|______|______|
                      00835 ;
                      00836 ;
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00837 ;
                      00838 ;==============================================================================
                      00839 ; REGISTERS
                      00840 ;==============================================================================
                      00841 ;
                      00842 ; Bits and registers used by the firmware
                      00843 ;
                      00844 ;------------------------------------------------------------------------------
                      00845 ; All Banks
                      00846 ;------------------------------------------------------------------------------
                      00847 ;
  00000070            00848 W_TEMP          EQU     0x070           ; Storage for W during ISR
  00000071            00849 STATUS_TEMP     EQU     0x071           ; Storage for STATUS during ISR
  00000072            00850 I               EQU     0x072           ; General-purpose data counter
  00000073            00851 J               EQU     0x073           ; General-purpose data counter
  00000074            00852 K               EQU     0x074           ; General-purpose data counter
  00000075            00853 X               EQU     0x075           ; General-purpose data register
  00000076            00854 Y               EQU     0x076           ; General-purpose data register
  00000077            00855 PCLATH_TEMP     EQU     0x077           ; Storage for PCLATH during ISR
                      00856 ;
                      00857 ;------------------------------------------------------------------------------
                      00858 ; Bank 0
                      00859 ;------------------------------------------------------------------------------
                      00860 ;
                      00861 ; Output Ports mapped to SSR outputs and LEDs.  These have a physical port
                      00862 ; register (e.g., PORTA), writing to which drives the outputs from the chip.
                      00863 ; A buffer register (e.g., PORTA_BUF) mirrors the layout of PORTA, and is
                      00864 ; where our routines update the bits before they're pushed out to the actual
                      00865 ; I/O port.
                      00866 ;
                      00867 ; We define the mappings between logical signals like /SSR08 and the
                      00868 ; registers and bit positions in memory here.
                      00869 ;
                      00870 ;                     ___7______6______5______4______3______2______1______0__
                      00871 ; $005 PORTA         |/////////////|   _  | _____| _____| _____| _____| _____|
                      00872 ; $038 PORTA_BUF     |/////////////| T/R  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00873 ;                    |/////////////|______|______|______|______|______|______|
                      00874 ;
  00000038            00875 PORTA_BUF       EQU     0x038
                      00876 
  00000005            00877 PORT_TRSEL      EQU     PORTA
  00000038            00878 PBUF_TRSEL      EQU     PORTA_BUF
  00000005            00879 BIT_TRSEL       EQU     5
  00000005            00880 PORT_08         EQU     PORTA
  00000005            00881 PORT_10         EQU     PORTA
  00000005            00882 PORT_12         EQU     PORTA
  00000005            00883 PORT_14         EQU     PORTA
  00000005            00884 PORT_16         EQU     PORTA
                      00885 
  00000038            00886 PBUF_08         EQU     PORTA_BUF
  00000038            00887 PBUF_10         EQU     PORTA_BUF
  00000038            00888 PBUF_12         EQU     PORTA_BUF
  00000038            00889 PBUF_14         EQU     PORTA_BUF
  00000038            00890 PBUF_16         EQU     PORTA_BUF
                      00891 
  00000004            00892 BIT_08          EQU     4
  00000003            00893 BIT_10          EQU     3
  00000002            00894 BIT_12          EQU     2
  00000001            00895 BIT_14          EQU     1
  00000000            00896 BIT_16          EQU     0
                      00897 ;
                      00898 ;                     ___7______6______5______4______3______2______1______0__
                      00899 ; $006 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00900 ; $039 PORTB_BUF     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00901 ;                    |/////////////|______|______|______|______|______|//////|
                      00902 ;
  00000039            00903 PORTB_BUF       EQU     0x039
                      00904 
  00000006            00905 PORT_15         EQU     PORTB
  00000006            00906 PORT_13         EQU     PORTB
  00000006            00907 PORT_11         EQU     PORTB
  00000006            00908 PORT_09         EQU     PORTB
  00000006            00909 PORT_07         EQU     PORTB
                      00910 
  00000039            00911 PBUF_15         EQU     PORTB_BUF
  00000039            00912 PBUF_13         EQU     PORTB_BUF
  00000039            00913 PBUF_11         EQU     PORTB_BUF
  00000039            00914 PBUF_09         EQU     PORTB_BUF
  00000039            00915 PBUF_07         EQU     PORTB_BUF
                      00916 
  00000005            00917 BIT_15          EQU     5
  00000004            00918 BIT_13          EQU     4
  00000003            00919 BIT_11          EQU     3
  00000002            00920 BIT_09          EQU     2
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            00921 BIT_07          EQU     1
                      00922 ;
                      00923 ;                     ___7______6______5______4______3______2______1______0__
                      00924 ; $007 PORTC         |/////////////| _____| _____| _____| _____| _____| _____|
                      00925 ; $03A PORTC_BUF     |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00926 ;                    |/////////////|______|______|______|______|______|______|
                      00927 ;
  0000003A            00928 PORTC_BUF       EQU     0x03A
                      00929 
  00000007            00930 PORT_02         EQU     PORTC
  00000007            00931 PORT_00         EQU     PORTC
  00000007            00932 PORT_01         EQU     PORTC
  00000007            00933 PORT_03         EQU     PORTC
  00000007            00934 PORT_19         EQU     PORTC
  00000007            00935 PORT_04         EQU     PORTC
                      00936 
  0000003A            00937 PBUF_02         EQU     PORTC_BUF
  0000003A            00938 PBUF_00         EQU     PORTC_BUF
  0000003A            00939 PBUF_01         EQU     PORTC_BUF
  0000003A            00940 PBUF_03         EQU     PORTC_BUF
  0000003A            00941 PBUF_19         EQU     PORTC_BUF
  0000003A            00942 PBUF_04         EQU     PORTC_BUF
                      00943 
  00000005            00944 BIT_02          EQU     5
  00000004            00945 BIT_00          EQU     4
  00000003            00946 BIT_01          EQU     3
  00000002            00947 BIT_03          EQU     2
  00000001            00948 BIT_19          EQU     1
  00000000            00949 BIT_04          EQU     0
                      00950 ;
                      00951 ;                     ___7______6______5______4______3______2______1______0__
                      00952 ; $008 PORTD         | _____| _____| _____| _____| _____| _____| _____| _____|
                      00953 ; $03B PORTD_BUF     | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00954 ;                    |______|______|______|______|______|______|______|______|
                      00955 ;
  0000003B            00956 PORTD_BUF       EQU     0x03B
                      00957 
  00000008            00958 PORT_17         EQU     PORTD
  00000008            00959 PORT_06         EQU     PORTD
  00000008            00960 PORT_05         EQU     PORTD
  00000008            00961 PORT_18         EQU     PORTD
  00000008            00962 PORT_22         EQU     PORTD
  00000008            00963 PORT_20         EQU     PORTD
  00000008            00964 PORT_21         EQU     PORTD
  00000008            00965 PORT_23         EQU     PORTD
                      00966 
  0000003B            00967 PBUF_17         EQU     PORTD_BUF
  0000003B            00968 PBUF_06         EQU     PORTD_BUF
  0000003B            00969 PBUF_05         EQU     PORTD_BUF
  0000003B            00970 PBUF_18         EQU     PORTD_BUF
  0000003B            00971 PBUF_22         EQU     PORTD_BUF
  0000003B            00972 PBUF_20         EQU     PORTD_BUF
  0000003B            00973 PBUF_21         EQU     PORTD_BUF
  0000003B            00974 PBUF_23         EQU     PORTD_BUF
                      00975 
  00000007            00976 BIT_17          EQU     7
  00000006            00977 BIT_06          EQU     6
  00000005            00978 BIT_05          EQU     5
  00000004            00979 BIT_18          EQU     4
  00000003            00980 BIT_22          EQU     3
  00000002            00981 BIT_20          EQU     2
  00000001            00982 BIT_21          EQU     1
  00000000            00983 BIT_23          EQU     0
                      00984 ;
                      00985 ;                     ___7______6______5______4______3______2______1______0__
                      00986 ; $009 PORTE         |//////////////////////////////////|      |      |      |
                      00987 ; $03C PORTE_BUF     |//////////////////////////////////| RED  | YEL  | GRN  |
                      00988 ;                    |//////////////////////////////////|______|______|______|
                      00989 ;
  0000003C            00990 PORTE_BUF       EQU     0x03C
                      00991 
  00000009            00992 PORT_RED        EQU     PORTE
  00000009            00993 PORT_YEL        EQU     PORTE
  00000009            00994 PORT_GRN        EQU     PORTE
                      00995 
  0000003C            00996 PBUF_RED        EQU     PORTE_BUF
  0000003C            00997 PBUF_YEL        EQU     PORTE_BUF
  0000003C            00998 PBUF_GRN        EQU     PORTE_BUF
                      00999 
  00000002            01000 BIT_RED         EQU     2
  00000001            01001 BIT_YEL         EQU     1
  00000000            01002 BIT_GRN         EQU     0
                      01003 
  00000009            01004 PORT_LEDS       EQU     PORTE
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000006            01005 MASK_RED_YEL    EQU     0x06    ; RED, YEL on; GRN off
  00000007            01006 MASK_ALL_LEDS   EQU     0x07    ; RED, YEL, GRN on
  00000000            01007 MASK_NO_LEDS    EQU     0x00    ; all off
                      01008 ;
                      01009 ; SSR Value buffers.
                      01010 ; These hold the current dimmer values for the SSR circuit outputs.
                      01011 ; The bits are interpreted as:
                      01012 ;
                      01013 ;  SSR_ON SSRDIM VALUE
                      01014 ;     0      0     x     Channel completely "off"
                      01015 ;     0      1     n     Channel dimmed to level n
                      01016 ;     1      x     x     Channel completely "on" (no dimmer control)
                      01017 ;
                      01018 ;
                      01019 ;                     ___7______6______5______4______3______2______1______0__
                      01020 ; $020 SSR00_VAL     |      |      |//////|                                  |
                      01021 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01022 ;                    |______|______|//////|______|______|______|______|______|
                      01023 ; $021 SSR01_VAL     |      |      |//////|                                  |
                      01024 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01025 ;                    |______|______|//////|______|______|______|______|______|
                      01026 ;
                      01027 ;       .                                        .
                      01028 ;       .                                        .
                      01029 ;       .                                        .
                      01030 ;
                      01031 ;                     _______________________________________________________
                      01032 ; $037 SSR23_VAL     |      |      |//////|                                  |
                      01033 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01034 ;                    |______|______|//////|______|______|______|______|______|
                      01035 ;
  00000007            01036 SSR_ON          EQU     7               ; X------- SSR ON (no dim)
  00000006            01037 SSRDIM          EQU     6               ; -X------ SSR dim
  00000005            01038 SSRVAL_RESV     EQU     5               ; --X----- Reserved bit
  0000001F            01039 SSRVAL_MASK     EQU     b'00011111'     ; ---XXXXX SSR dimmer value
                      01040 
  00000020            01041 SSR00_VAL       EQU     0x020
  00000021            01042 SSR01_VAL       EQU     0x021
  00000022            01043 SSR02_VAL       EQU     0x022
  00000023            01044 SSR03_VAL       EQU     0x023
  00000024            01045 SSR04_VAL       EQU     0x024
  00000025            01046 SSR05_VAL       EQU     0x025
  00000026            01047 SSR06_VAL       EQU     0x026
  00000027            01048 SSR07_VAL       EQU     0x027
  00000028            01049 SSR08_VAL       EQU     0x028
  00000029            01050 SSR09_VAL       EQU     0x029
  0000002A            01051 SSR10_VAL       EQU     0x02A
  0000002B            01052 SSR11_VAL       EQU     0x02B
  0000002C            01053 SSR12_VAL       EQU     0x02C
  0000002D            01054 SSR13_VAL       EQU     0x02D
  0000002E            01055 SSR14_VAL       EQU     0x02E
  0000002F            01056 SSR15_VAL       EQU     0x02F
  00000030            01057 SSR16_VAL       EQU     0x030
  00000031            01058 SSR17_VAL       EQU     0x031
  00000032            01059 SSR18_VAL       EQU     0x032
  00000033            01060 SSR19_VAL       EQU     0x033
  00000034            01061 SSR20_VAL       EQU     0x034
  00000035            01062 SSR21_VAL       EQU     0x035
  00000036            01063 SSR22_VAL       EQU     0x036
  00000037            01064 SSR23_VAL       EQU     0x037
                      01065 ;
                      01066 ; The master CPU reads this value from EEPROM when booting up, and sends
                      01067 ; it to the slave CPU.  From there, they both use this RAM location to
                      01068 ; hold the value during runtime.
                      01069 ;
                      01070 ;                     ___7______6______5______4______3______2______1______0__
                      01071 ; $03D PHASE_OFFSET  |                                                       |
                      01072 ;                    |  Number of slices to delay from ZC int to slice 0     |
                      01073 ;                    |______|______|______|______|______|______|______|______|
                      01074 ;
  0000003D            01075 PHASE_OFFSET    EQU     0x03D
                      01076 ;
                      01077 ; The SSR handling routines fill in this register when receiving a command
                      01078 ; targeted to a single channel.
                      01079 ;
                      01080 ;                     ___7______6______5______4______3______2______1______0__
                      01081 ; $03E SSR_ID        |      |      |//////|                                  |
                      01082 ;                    |MY_SSR|ILLSSR|//////|  Local device offset from SSR00  |
                      01083 ;                    |______|______|//////|______|______|______|______|______|
                      01084 ;
  0000003E            01085 SSR_ID          EQU     0x03E
                      01086 
  00000007            01087 MY_SSR          EQU     7               ; X------- Is this SSR for this CPU?
  00000006            01088 ILLSSR          EQU     6               ; -X------ Channel ID is illegal
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000005            01089 SSR_ID_RESV     EQU     5               ; --X----- Reserved bit
  0000001F            01090 SSR_DEV_MASK    EQU     b'00011111'     ; ---XXXXX Mask for local SSR ID
                      01091 ;
                      01092 ; This is used primarily for the POST LED effects which flash a value
                      01093 ; on the LEDs.  This is the parameter to the function which handles that.
                      01094 ;
                      01095 ;                     ___7______6______5______4______3______2______1______0__
                      01096 ; $03F FLASH_CT      |                                                       |
                      01097 ;                    |  Value to be flashed on an LED                        |
                      01098 ;                    |______|______|______|______|______|______|______|______|
                      01099 ;
  0000003F            01100 FLASH_CT        EQU     0x03F
                      01101 ;
                      01102 ;                     ___7______6______5______4______3______2______1______0__
                      01103 ; $040 DEVICE_ID     |///////////////////////////|                           |
                      01104 ;                    |///////////////////////////| This device's ID number   |
                      01105 ;                    |///////////////////////////|______|______|______|______|
                      01106 ;
                      01107 ; We copy the device ID from EEPROM to this location, where we can compare
                      01108 ; it more easily during runtime.  Note that it's also aligned with the device
                      01109 ; ID field in command bytes.
                      01110 ;
                      01111 ;
                      01112 ; LED Timers
                      01113 ;
                      01114 ; These hold the time remaining for a lit LED until it is scheduled to be
                      01115 ; turned off.  The units are 1/120 sec (i.e., number of ZC interrupts).
                      01116 ;
  00000041            01117 GRN_TMR         EQU     0x041           ; Green LED time until FLIPS STATE
  00000042            01118 YEL_TMR         EQU     0x042           ; Yellow LED time until turns off
  00000043            01119 RED_TMR         EQU     0x043           ; Red LED time until turns off
                      01120 ;
                      01121 ; State machine value and some misc. operating flags.
                      01122 ;
                      01123 ;                     ___7______6______5______4______3______2______1______0__
                      01124 ; $044 SSR_STATE     |      |      |      |      |      |                    |
                      01125 ;                    |INCYC |PRECYC|REDEN |YELEN |GRNEN |       STATE        |
                      01126 ;                    |______|______|______|______|______|______|______|______|
                      01127 ;
  00000044            01128 SSR_STATE       EQU     0x044
                      01129 
  00000007            01130 INCYC           EQU     7               ; X------- In an active ZC cycle?
  00000006            01131 PRECYC          EQU     6               ; -X------ Between int and start of cycle?
  00000005            01132 REDEN           EQU     5               ; --X----- Red LED off timer active
  00000004            01133 YELEN           EQU     4               ; ---X---- Yellow LED off timer active
  00000003            01134 GRNEN           EQU     3               ; ----X--- Green LED flip timer active
  00000002            01135 STATE2          EQU     2               ; -----X-- Bit 2 of state value
  00000001            01136 STATE1          EQU     1               ; ------X- Bit 1 of state value
  00000000            01137 STATE0          EQU     0               ; -------X Bit 0 of state value
  00000007            01138 SSR_STATE_MASK  EQU     b'00000111'     ; -----XXX Mask for state value
                      01139 ;
                      01140 ; Cycle/slice timers
                      01141 ;
  00000045            01142 CUR_SLICE       EQU     0x045           ; current slice number (counts down)
  00000046            01143 CUR_PRE         EQU     0x046           ; pre-slice number (counts down)
                      01144 ;
                      01145 ; Communications buffers
                      01146 ;
  00000047            01147 RX_BYTE         EQU     0x047           ; byte last received from serial port
  00000049            01148 DATA_BUF        EQU     0x049           ; holding area for command data
                      01149 ;
                      01150 ; More operating flags
                      01151 ;
                      01152 ;                     ___7______6______5______4______3______2______1______0__
                      01153 ; $048 SSR_STATE2    |SLICE |DIM_  |DIM_  |      |      |      |      |      |
                      01154 ;                    |_UPD  |START |END   |REDOFF|YELOFF|GRNBLK|SSRUPD| TXQUE|
                      01155 ;                    |______|______|______|______|______|______|______|______|
                      01156 ; $04B SSR_STATE3    |//////////////////////////////////|      |      |      |
                      01157 ;                    |//////////////////////////////////|ACTEN |ACTOFF|PRIVEN|
                      01158 ;                    |//////////////////////////////////|______|______|______|
                      01159 ;
  00000048            01160 SSR_STATE2      EQU     0x048
                      01161 
  00000007            01162 SLICE_UPD       EQU     7               ; X------- Ready to update current slice?
  00000006            01163 DIM_START       EQU     6               ; -X------ First dimmer cycle?
  00000005            01164 DIM_END         EQU     5               ; --X----- Last dimmer cycle?
  00000004            01165 REDOFF          EQU     4               ; ---X---- Red LED timer expired, turn off
  00000003            01166 YELOFF          EQU     3               ; ----X--- Yellow LED timer expired, turn off
  00000002            01167 GRNBLK          EQU     2               ; -----X-- Green LED timer expired, blink it
  00000001            01168 SSRUPD          EQU     1               ; ------X- Queued SSR update operation
  00000000            01169 TXQUE           EQU     0               ; -------X Something in transmit queue
                      01170 
  0000004B            01171 SSR_STATE3      EQU     0x04B
                      01172 
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000007            01173 SSR_STATE3_RES7 EQU     7               ; X------- Reserved bit
  00000006            01174 SSR_STATE3_RES6 EQU     6               ; -X------ Reserved bit
  00000005            01175 SSR_STATE3_RES5 EQU     5               ; --X----- Reserved bit
  00000004            01176 SSR_STATE3_RES4 EQU     4               ; ---X---- Reserved bit
  00000003            01177 SSR_STATE3_RES3 EQU     3               ; ----X--- Reserved bit
  00000002            01178 ACTEN           EQU     2               ; -----X-- Active LED timer active
  00000001            01179 ACTOFF          EQU     1               ; ------X- Active LED timer expired, turn off
  00000000            01180 PRIVEN          EQU     0               ; -------X Privileged commands enabled
                      01181 ;
                      01182 ; Serial Transmitter Ring Buffer
                      01183 ;
                      01184 ; We maintain a buffer of 16 output bytes waiting to be sent out of the
                      01185 ; serial port.  We empty this buffer in an interrupt-driven routine so
                      01186 ; the processing of incoming data isn't stalled while waiting for the
                      01187 ; UART to be idle.  XXX interrupt-driven??? not directly. XXX
                      01188 ;
                      01189 ; This needs to be arranged so that the table is a power of two in length
                      01190 ; and aligned in memory so that it starts on an even boundary of its
                      01191 ; length.  In other words, we can take a pointer P into the table,
                      01192 ; and ((P & TXBUF_MASK) | TXBUF) will yield a valid pointer within
                      01193 ; that space, with proper wraparound in either direction.
                      01194 ;
                      01195 ;                     ___7______6______5______4______3______2______1______0__
                      01196 ; $04E TXBUF_QUEUE   |                           |                           |
                      01197 ;                    |             5             | Addr of next byte to queue|
                      01198 ;                    |______|______|______|______|______|______|______|______|
                      01199 ; $04F TXBUF_SEND    |                           |                           |
                      01200 ;                    |             5             | Addr of next byte to send |
                      01201 ;                    |______|______|______|______|______|______|______|______|
                      01202 ; $050 TXBUF         |                                                       |
                      01203 ;                    |  Transmitter output buffer (byte 1 of 16)             |
                      01204 ;                    |______|______|______|______|______|______|______|______|
                      01205 ;
                      01206 ;       .                                        .
                      01207 ;       .                                        .
                      01208 ;       .                                        .
                      01209 ;
                      01210 ;                     _______________________________________________________
                      01211 ; $05F               |                                                       |
                      01212 ;                    |  Transmitter output buffer (byte 16 of 16)            |
                      01213 ;                    |______|______|______|______|______|______|______|______|
                      01214 ;
  0000004E            01215 TXBUF_QUEUE     EQU     0x04E
  0000004F            01216 TXBUF_SEND      EQU     0x04F
  00000050            01217 TXBUF           EQU     0x050
  0000000F            01218 TXBUF_MASK      EQU     b'00001111'     ; mask off table index
                      01219 ;
                      01220 ;-----------------------------------------------------------------------------
                      01221 ; Banks 1-3
                      01222 ;-----------------------------------------------------------------------------
                      01223 ;
                      01224 ; Nothing defined in these banks.
                      01225 ;
                      01226 
                      01227 ;=============================================================================
                      01228 ; VECTORED ENTRY POINTS
                      01229 ;=============================================================================
0000                  01230 RESTART_VECTOR  ORG     0x0000
0000   28BD           01231                 GOTO    INIT
                      01232 
0004                  01233 INT_VECTOR      ORG     0x0004
0004   2883           01234                 GOTO    ISR
                      01235 
                      01236 ;==============================================================================
                      01237 ; JUMP TABLES
                      01238 ;
                      01239 ; We collect these here so they are all within the $00xx range.  Otherwise
                      01240 ; it's a constant battle to keep the PCLATH register right as the code changes
                      01241 ; and moves these tables around across page boundaries.
                      01242 ;==============================================================================
                      01243 ;
                      01244 ; State 0 Command Dispatch Table
                      01245 ;  Given command in RX_BYTE<6:4>, branch to command #0-#7.
                      01246 ;  Errors (undefined commands) branch to CMD_ERROR.
                      01247 ;
0005   0064           01248 STATE_0_CMD_TBL CLRWDT
0006   018A           01249                 CLRF    PCLATH
0007   0E47           01250                 SWAPF   RX_BYTE, W
0008   3907           01251                 ANDLW   CMD_SW_MASK
0009   0782           01252                 ADDWF   PCL, F
000A   29B5           01253                 GOTO    CMD_0
000B   29B7           01254                 GOTO    CMD_1
000C   29B9           01255                 GOTO    CMD_2
000D   2A40           01256                 GOTO    CMD_ERROR
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E   2A40           01257                 GOTO    CMD_ERROR
000F   2A40           01258                 GOTO    CMD_ERROR
0010   2A40           01259                 GOTO    CMD_ERROR
0011   29BB           01260                 GOTO    CMD_7
0012   2A8B           01261                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01262 ;
                      01263 ; Received data byte dispatch function.
                      01264 ; When receiving a data byte, what happens next
                      01265 ; depends on the state of the parser's state machine.
                      01266 ; This jump table branches to the appropriate handler
                      01267 ; for each state.
                      01268 ;
                      01269 ; In the case of state 0, we just return to the
                      01270 ; original caller, ignoring the byte.
                      01271 ;
0013   0064           01272 DATA_BYTE_TBL   CLRWDT                          ; We received a data byte
0014   018A           01273                 CLRF    PCLATH                  ; We're in $00xx address range
0015   0844           01274                 MOVF    SSR_STATE, W            ; decode state bits
0016   3907           01275                 ANDLW   SSR_STATE_MASK
0017   0782           01276                 ADDWF   PCL, F
0018   0008           01277                 RETURN                          ; [0] ignore data
0019   29C0           01278                 GOTO    DATA_STATE_1            ; [1] handler
001A   29D5           01279                 GOTO    DATA_STATE_2            ; [2] handler
001B   29DA           01280                 GOTO    DATA_STATE_3            ; [3] handler
001C   29EB           01281                 GOTO    DATA_STATE_4            ; [4] handler
001D   29BE           01282                 GOTO    FAULT_1                 ; [5] illegal state
001E   29BE           01283                 GOTO    FAULT_1                 ; [6] illegal state
001F   29BE           01284                 GOTO    FAULT_1                 ; [7] illegal state
0020   2A8B           01285                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01286 ;
                      01287 ; Administrative Command Dispatch Table
                      01288 ; Dispatch the processing of admin commands, based on value
                      01289 ; of RX_BYTE.
                      01290 ;
0021   0064           01291 CMD_ADMIN_TABLE CLRWDT
0022   018A           01292                 CLRF    PCLATH                  ;
0023   0847           01293                 MOVF    RX_BYTE, W              ; Get and store command
0024   390F           01294                 ANDLW   b'00001111'             ; sub-command mask
0025   0782           01295                 ADDWF   PCL, F
0026   2A1F           01296                 GOTO    CMD_AD_SHUTDOWN         ; 0=shutdown cpu
0027   2A30           01297                 GOTO    CMD_AD_DIS_PRIV         ; 1=disable privs
0028   2A40           01298                 GOTO    CMD_ERROR               ; 2=reserved
0029   2A40           01299                 GOTO    CMD_ERROR               ; 3=reserved
002A   2A40           01300                 GOTO    CMD_ERROR               ; 4=reserved
002B   2A40           01301                 GOTO    CMD_ERROR               ; 5=reserved
002C   2A40           01302                 GOTO    CMD_ERROR               ; 6=reserved
002D   2A40           01303                 GOTO    CMD_ERROR               ; 7=reserved
002E   2A40           01304                 GOTO    CMD_ERROR               ; 8=reserved
002F   2A40           01305                 GOTO    CMD_ERROR               ; 9=reserved
0030   2A40           01306                 GOTO    CMD_ERROR               ; A=reserved
0031   2A40           01307                 GOTO    CMD_ERROR               ; B=reserved
0032   2A40           01308                 GOTO    CMD_ERROR               ; C=reserved
0033   2A40           01309                 GOTO    CMD_ERROR               ; D=reserved
0034   2A40           01310                 GOTO    CMD_ERROR               ; E=reserved
0035   2A40           01311                 GOTO    CMD_ERROR               ; F=reserved
0036   2A8B           01312                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01313 ;
                      01314 ;------------------------------------------------------------------------------
                      01315 ; SSR_Y_TO_PBUF
                      01316 ;   return specified SSR's port buffer's address
                      01317 ;
                      01318 ; Input:    Y=SSR channel (0-23)
                      01319 ; Output:   W=address of SSR's port buffer
                      01320 ; Context:  Any Bank
                      01321 ;------------------------------------------------------------------------------
                      01322 ;
                      01323 ; *** THIS CODE MUST BE ON ONE 256-BYTE PAGE ***
0037   0064           01324 SSR_Y_TO_PBUF   CLRWDT
0038   018A           01325                 CLRF    PCLATH          ; Our jump table's code page
0039   0876           01326                 MOVF    Y, W
003A   391F           01327                 ANDLW   b'00011111'     ; limit to 32
003B   0782           01328                 ADDWF   PCL, F          ; jump to SSR # in table
003C   343A           01329                 RETLW   PBUF_00
003D   343A           01330                 RETLW   PBUF_01
003E   343A           01331                 RETLW   PBUF_02
003F   343A           01332                 RETLW   PBUF_03
0040   343A           01333                 RETLW   PBUF_04
0041   343B           01334                 RETLW   PBUF_05
0042   343B           01335                 RETLW   PBUF_06
0043   3439           01336                 RETLW   PBUF_07
0044   3438           01337                 RETLW   PBUF_08
0045   3439           01338                 RETLW   PBUF_09
0046   3438           01339                 RETLW   PBUF_10
0047   3439           01340                 RETLW   PBUF_11
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0048   3438           01341                 RETLW   PBUF_12
0049   3439           01342                 RETLW   PBUF_13
004A   3438           01343                 RETLW   PBUF_14
004B   3439           01344                 RETLW   PBUF_15
004C   3438           01345                 RETLW   PBUF_16
004D   343B           01346                 RETLW   PBUF_17
004E   343B           01347                 RETLW   PBUF_18
004F   343A           01348                 RETLW   PBUF_19
0050   343B           01349                 RETLW   PBUF_20
0051   343B           01350                 RETLW   PBUF_21
0052   343B           01351                 RETLW   PBUF_22
0053   343B           01352                 RETLW   PBUF_23
0054   2A8B           01353                 GOTO    FAULT           ; FAULT 24
0055   2A8B           01354                 GOTO    FAULT           ; FAULT 25
0056   2A8B           01355                 GOTO    FAULT           ; FAULT 26
0057   2A8B           01356                 GOTO    FAULT           ; FAULT 27
0058   2A8B           01357                 GOTO    FAULT           ; FAULT 28
0059   2A8B           01358                 GOTO    FAULT           ; FAULT 29
005A   2A8B           01359                 GOTO    FAULT           ; FAULT 30
005B   2A8B           01360                 GOTO    FAULT           ; FAULT 31
005C   2A8B           01361                 GOTO    FAULT           ; FAULT 32 just to be paranoid
                      01362 ;
                      01363 ;------------------------------------------------------------------------------
                      01364 ; SSR_Y_SET_MASK
                      01365 ;   return bitmask for SSR output in its I/O port
                      01366 ;   If you OR the bit with the port's value the channel is turned on.
                      01367 ;   If you want to get the bitmask for turning it off, see SSR_Y_CLR_MASK.
                      01368 ;
                      01369 ; Input:    Y=SSR channel (0-23)
                      01370 ; Output:   W=bitmask for SETTING the bit (IOR with current value)
                      01371 ; Context:  Any Bank
                      01372 ;------------------------------------------------------------------------------
                      01373 ;
                      01374 ; *** THIS CODE MUST BE ON ONE 256-BYTE PAGE ***
                      01375 ;
005D   0064           01376 SSR_Y_SET_MASK  CLRWDT
005E   018A           01377                 CLRF    PCLATH
005F   0876           01378                 MOVF    Y, W
0060   391F           01379                 ANDLW   b'00011111'     ; limit to 32
0061   0782           01380                 ADDWF   PCL, F          ; jump to SSR # in table
0062   3410           01381                 RETLW   1 << BIT_00
0063   3408           01382                 RETLW   1 << BIT_01
0064   3420           01383                 RETLW   1 << BIT_02
0065   3404           01384                 RETLW   1 << BIT_03
0066   3401           01385                 RETLW   1 << BIT_04
0067   3420           01386                 RETLW   1 << BIT_05
0068   3440           01387                 RETLW   1 << BIT_06
0069   3402           01388                 RETLW   1 << BIT_07
006A   3410           01389                 RETLW   1 << BIT_08
006B   3404           01390                 RETLW   1 << BIT_09
006C   3408           01391                 RETLW   1 << BIT_10
006D   3408           01392                 RETLW   1 << BIT_11
006E   3404           01393                 RETLW   1 << BIT_12
006F   3410           01394                 RETLW   1 << BIT_13
0070   3402           01395                 RETLW   1 << BIT_14
0071   3420           01396                 RETLW   1 << BIT_15
0072   3401           01397                 RETLW   1 << BIT_16
0073   3480           01398                 RETLW   1 << BIT_17
0074   3410           01399                 RETLW   1 << BIT_18
0075   3402           01400                 RETLW   1 << BIT_19
0076   3404           01401                 RETLW   1 << BIT_20
0077   3402           01402                 RETLW   1 << BIT_21
0078   3408           01403                 RETLW   1 << BIT_22
0079   3401           01404                 RETLW   1 << BIT_23
007A   2A8B           01405                 GOTO    FAULT           ; fault 24
007B   2A8B           01406                 GOTO    FAULT           ; fault 25
007C   2A8B           01407                 GOTO    FAULT           ; fault 26
007D   2A8B           01408                 GOTO    FAULT           ; fault 27
007E   2A8B           01409                 GOTO    FAULT           ; fault 28
007F   2A8B           01410                 GOTO    FAULT           ; fault 29
0080   2A8B           01411                 GOTO    FAULT           ; fault 30
0081   2A8B           01412                 GOTO    FAULT           ; fault 31
0082   2A8B           01413                 GOTO    FAULT           ; fault 32 just to be paranoid
                      01414 ;
                      01415 ;==============================================================================
                      01416 ; INTERRUPT SERVICE ROUTINE (ISR)
                      01417 ;
                      01418 ; Responsible for handling the timing and synchronization for the unit.
                      01419 ;
                      01420 ; Context: Any Bank (restores original bank when finished)
                      01421 ; Affects: Various flag bits
                      01422 ; Also:    Restores status flags, PC and W when done
                      01423 ;
                      01424 ;==============================================================================
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01425 ;
0083   00F0           01426 ISR             MOVWF   W_TEMP          ; Save registers during interrupt
0084   0E03           01427                 SWAPF   STATUS, W       ; This moves status w/o disturbing it
0085   00F1           01428                 MOVWF   STATUS_TEMP
0086   080A           01429                 MOVF    PCLATH, W
0087   00F7           01430                 MOVWF   PCLATH_TEMP
0088   018A           01431                 CLRF    PCLATH          ; Force code page 0
0089   1283 1303      01432                 BANKSEL INTCON          ; (Bank 0)
008B   0064           01433                 CLRWDT
                      01434 ;
                      01435 ; Poll interrupts to see who's asking for attention.
                      01436 ;
                      01437 ;------------------------------------------------------------------------------
                      01438 ; INT0 -- 1/120sec timer synchronized with AC half-wave zero-crossing point.
                      01439 ;
008C   1C8B           01440 INT_INT0        BTFSS   INTCON, INTF            ; INT0 line interrupt pending?
008D   28A3           01441                 GOTO    INT_TMR2                ; no: try next vector
008E   108B           01442                 BCF     INTCON, INTF            ; yes: acknowledge interrupt
                      01443 
008F   1A44           01444 INT_YEL         BTFSC   SSR_STATE, YELEN        ; Yellow timer on?
0090   0BC2           01445                 DECFSZ  YEL_TMR, F              ; yes: count it down one step
0091   2894           01446                 GOTO    INT_RED
0092   15C8           01447                 BSF     SSR_STATE2, YELOFF      ; done? queue LED turn off event
0093   1244           01448                 BCF     SSR_STATE, YELEN        ; ...and stop the timer
                      01449 
0094   1AC4           01450 INT_RED         BTFSC   SSR_STATE, REDEN        ; Red timer on?
0095   0BC3           01451                 DECFSZ  RED_TMR, F              ; yes: count it down one step
0096   2899           01452                 GOTO    INT_GRN
0097   1648           01453                 BSF     SSR_STATE2, REDOFF      ; done? queue LED turn off event
0098   12C4           01454                 BCF     SSR_STATE, REDEN        ; ...and stop the timer
                      01455 
0099   19C4           01456 INT_GRN         BTFSC   SSR_STATE, GRNEN        ; Green timer on?
009A   0BC1           01457                 DECFSZ  GRN_TMR, F              ; yes: count it down one step
009B   289F           01458                 GOTO    INT_ACT
009C   1548           01459                 BSF     SSR_STATE2, GRNBLK      ; done? queue LED flip event
009D   30FF           01460                 MOVLW   GRN_BLINK_RATE          ; ...and reset timer for next blink
009E   00C1           01461                 MOVWF   GRN_TMR
                      01462 
009F   0064           01463 INT_ACT         CLRWDT
                      01464 ;
                      01465 ; Handle the cycle timers.
                      01466 ; We just hit a ZC interrupt, so let's start the pre-cycle now.
                      01467 ;
00A0   1744           01468 INT_ZC          BSF     SSR_STATE, PRECYC
00A1   083D           01469                 MOVF    PHASE_OFFSET, W
00A2   00C6           01470                 MOVWF   CUR_PRE
                      01471 ;
                      01472 ;------------------------------------------------------------------------------
                      01473 ; TMR2 -- Timer #2 interrupt
                      01474 ; This is a free-running slice timer (about 38 per INT0)
                      01475 ;
00A3   0064           01476 INT_TMR2        CLRWDT
00A4   1C8C           01477                 BTFSS   PIR1, TMR2IF    ; Timer 2 interrupt pending?
00A5   28B5           01478                 GOTO    INT_END         ; no: try next vector
00A6   108C           01479                 BCF     PIR1, TMR2IF    ; yes: acknowledge interrupt
                      01480 ;
                      01481 ; If in pre-cycle, count down to next real zero crossing event point
                      01482 ;
00A7   1B44           01483 INT_PRECYC      BTFSC   SSR_STATE, PRECYC
00A8   0BC6           01484                 DECFSZ  CUR_PRE, F
00A9   28AF           01485                 GOTO    INT_NEXTSLICE
                      01486 ;
                      01487 ; end of pre-cycle, start first real one
                      01488 ;
00AA   1344           01489                 BCF     SSR_STATE, PRECYC
00AB   17C4           01490                 BSF     SSR_STATE, INCYC
00AC   1748           01491                 BSF     SSR_STATE2, DIM_START
00AD   3020           01492                 MOVLW   .32
00AE   00C5           01493                 MOVWF   CUR_SLICE
                      01494 ;
                      01495 ; start of any active slice
                      01496 ;
00AF   1BC4           01497 INT_NEXTSLICE   BTFSC   SSR_STATE, INCYC
00B0   0BC5           01498                 DECFSZ  CUR_SLICE, F
00B1   28B4           01499                 GOTO    INT_ENDSLICE
                      01500 ;
                      01501 ; last slice (#0)
                      01502 ;
00B2   16C8           01503                 BSF     SSR_STATE2, DIM_END
00B3   13C4           01504                 BCF     SSR_STATE, INCYC
                      01505 ;
                      01506 ; slice timing ends
                      01507 ;
00B4   17C8           01508 INT_ENDSLICE    BSF     SSR_STATE2, SLICE_UPD
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01509 ;
                      01510 ; end of ISR
                      01511 ;
00B5   0064           01512 INT_END         CLRWDT                  ; (Any Bank)
00B6   0877           01513                 MOVF    PCLATH_TEMP, W
00B7   008A           01514                 MOVWF   PCLATH
00B8   0E71           01515                 SWAPF   STATUS_TEMP, W
00B9   0083           01516                 MOVWF   STATUS          ; (Previous Bank Restored)
00BA   0EF0           01517                 SWAPF   W_TEMP, F
00BB   0E70           01518                 SWAPF   W_TEMP, W
                      01519 
00BC   0009           01520                 RETFIE
                      01521 
                      01522 ;=============================================================================
                      01523 ; INIT: device initialization routines
                      01524 ;=============================================================================
00BD   0064           01525 INIT            CLRWDT
00BE   138B           01526                 BCF     INTCON, GIE     ; disable all interrupts
00BF   018A           01527                 CLRF    PCLATH          ; Program page 0
                      01528 ;
                      01529 ; Initialize I/O ports by pre-filling with initial bits, then enabling
                      01530 ; outputs on pins which are supposed to be outputs
                      01531 ;
00C0   0064           01532 SETUP_PORTS     CLRWDT
00C1   1283 1303      01533                 BANKSEL PORTA           ; (Bank 0)
00C3   0185           01534                 CLRF    PORTA           ; ACT off, RCV mode, pins off
00C4   0186           01535                 CLRF    PORTB           ; (Note that this would turn on
00C5   0187           01536                 CLRF    PORTC           ; the SSRs if the ports were
00C6   0188           01537                 CLRF    PORTD           ; enabled yet).
00C7   0189           01538                 CLRF    PORTE           ; LEDs off
00C8   22D3           01539                 CALL    ALL_SSRS_OFF    ; turn OFF SSR ports.
00C9   22F7           01540                 CALL    UPDATE_PORTS    ; push out bits to I/O ports.
                      01541 
00CA   1683 1303      01542                 BANKSEL TRISA                   ; (Bank 1)
00CC   30C0           01543                 MOVLW   b'11000000'             ; XXOOOOOO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00CD   0085           01544                 MOVWF   TRISA
                      01545 ;               MOVLW   b'10000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00CE   0087           01546                 MOVWF   TRISC                   ; Rx/Tx tri-stated here
00CF   30C1           01547                 MOVLW   b'11000001'             ; XXOOOOOI
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D0   0086           01548                 MOVWF   TRISB
00D1   3000           01549                 MOVLW   b'00000000'             ; OOOOOOOO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D2   0088           01550                 MOVWF   TRISD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D3   0089           01551                 MOVWF   TRISE                   ; (also sets PORTD mode)
00D4   300F           01552                 MOVLW   b'00001111'             ; All I/O pins DIGITAL  @@P=777@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D5   009F           01553                 MOVWF   ADCON1
                      01554 ;
                      01555 ; Flash LEDs for reset
                      01556 ;
00D6   0064           01557                 CLRWDT
00D7   1283 1303      01558                 BANKSEL PORT_LEDS               ; (Bank 0)
00D9   3005           01559                 MOVLW   .5                      ; flash 5 times
00DA   00F5           01560                 MOVWF   X
00DB   3007           01561 RESET_LEDS_NEXT MOVLW   MASK_ALL_LEDS
00DC   0089           01562                 MOVWF   PORT_LEDS
00DD   22C4           01563                 CALL    DELAY_FFLASH
00DE   3000           01564                 MOVLW   MASK_NO_LEDS
00DF   0089           01565                 MOVWF   PORT_LEDS
00E0   22C4           01566                 CALL    DELAY_FFLASH
00E1   0BF5           01567                 DECFSZ  X, F
00E2   28DB           01568                 GOTO    RESET_LEDS_NEXT
                      01569 ;
                      01570 ; Light green LED on the master and red LED on the slave
                      01571 ;
00E3   3006           01572                 MOVLW   MASK_RED_YEL            ; @@P=777@@
00E4   0089           01573                 MOVWF   PORT_LEDS               ; @@P=777@@
00E5   019F           01574                 CLRF    ADCON0                  ; A/D Converter off
                      01575 
                      01576 
                      01577 ; INIT: set up EEPROM idle value
                      01578 ; The 16F877A Rev. B2 has a defect where the power-down current exceeds the
                      01579 ; published tolerances in some (unlikely) circumstances if the CPU enters sleep
                      01580 ; mode while the EEADR register points to an EEPROM location holding a value
                      01581 ; other than 0xFF.
                      01582 ;
                      01583 ; So we make sure that the EEPROM address register is always pointing to a 0xFF value
                      01584 ; when it's not busy doing anything else.
                      01585 ;
                      01586 ; But first, we'll make sure that a reserved EEPROM location holds a 0xFF value
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01587 ; to start with. We do this every time since we don't /know/ the device was ever
                      01588 ; initialized before, although most likely this value will already be right
                      01589 ; (It /is/ EEPROM, after all!)
                      01590 ;
                      01591 ;
00E6   0064           01592 SETUP_EEPROM    CLRWDT
                      01593 ;
                      01594 ; INIT: read our device ID from EEPROM
                      01595 ;
                      01596 ;
                      01597 ; INIT: move EEPROM address to idle block
                      01598 ;
                      01599 
                      01600 ;----------------------------------------------------------------
                      01601 ; POST Light Displays
                      01602 ;
                      01603 ; Wait to allow master/slave light to be noticed,
                      01604 ; extinguish all lights, then flash ROM ID (yel),
                      01605 ; GRN+devID (red), then all off.
                      01606 ;----------------------------------------------------------------
00E7   22BB           01607 POST_START      CALL    DELAY_2S
00E8   1283 1303      01608                 BANKSEL PORT_LEDS       ; (Bank 0)               _
00EA   0189           01609                 CLRF    PORT_LEDS       ; XXX also clears ACT, T/R
                      01610                 ;
                      01611                 ; Set baud-rate generator
                      01612                 ;
00EB   1683 1303      01613                 BANKSEL SPBRG           ; (Bank 1)
00ED   3040           01614                 MOVLW   .64
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EE   0099           01615                 MOVWF   SPBRG           ; 19,236 baud
                      01616                 ;
                      01617                 ; Enable serial transmitter
                      01618                 ;
00EF   1683 1303      01619                 BANKSEL TXSTA           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   0198           01620                 CLRF    TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   1518           01621                 BSF     TXSTA, BRGH     ; High Baud Rate
00F3   1283 1303      01622                 BANKSEL RCSTA           ; (Bank 0)
00F5   0198           01623                 CLRF    RCSTA
00F6   1798           01624                 BSF     RCSTA, SPEN     ; Turn on USART
00F7   1683 1303      01625                 BANKSEL TXSTA           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F9   1698           01626                 BSF     TXSTA, TXEN     ; Turn on serial transmitter
00FA   1283 1303      01627                 BANKSEL PORT_LEDS       ; (Bank 0)
00FC   22BB           01628                 CALL    DELAY_2S
                      01629 
00FD   3001           01630 POST_ROM_ID     MOVLW   .1              ; 1=ROM 2.0
00FE   226D           01631                 CALL    FLASH_YEL       ; Flash ROM ID
00FF   22BB           01632                 CALL    DELAY_2S
                      01633 
0100   1509           01634 POST_STAGE_1    BSF     PORT_RED, BIT_RED
0101   22B3           01635                 CALL    DELAY_1S
                      01636                 ;
                      01637                 ; Set up USART & misc. options
                      01638                 ;
0102   1683 1303      01639                 BANKSEL OPTION_REG           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0104   1781           01640                 BSF     OPTION_REG, NOT_RBPU ; No pull-up on PORTB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0105   1301           01641                 BCF     OPTION_REG, INTEDG   ; Int on falling edge
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0106   1281           01642                 BCF     OPTION_REG, T0CS     ; TMR0 internal clock
                      01643                                              ; Prescaler on WDT, 1:128
                      01644                 ;
                      01645                 ; Initialiaze timer2 interrupt
                      01646                 ;
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0107   018C           01647                 CLRF    PIE1            ; Also disables TXIE, RXIE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0108   148C           01648                 BSF     PIE1, TMR2IE    ; Timer 2 match Interrupt enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0109   018D           01649                 CLRF    PIE2
                      01650 ;
                      01651 ; set slice timer (TMR2) to period of 137 at 1:8 scale, or 0.0002192 sec,
                      01652 ; which is just less than 1/38 half-cycle (i.e. 38x ZC interrupt rate
                      01653 ; at 60Hz)
                      01654 ;
010A   3089           01655                 MOVLW   .137
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
010B   0092           01656                 MOVWF   PR2
                      01657 
                      01658                 ;
                      01659                 ; Initialize serial port receiver
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01660                 ;
010C   22BB           01661                 CALL    DELAY_2S        ; Wait to be sure Tx going
010D   1283 1303      01662                 BANKSEL RCSTA           ; (Bank 0)
010F   1618           01663                 BSF     RCSTA, CREN     ; Enable receiver
                      01664                 ;
                      01665                 ; Enable INT0 interrupt
                      01666                 ;
0110   018B           01667                 CLRF    INTCON
0111   170B           01668                 BSF     INTCON, PEIE    ; Peripheral Interrupts enabled
0112   160B           01669                 BSF     INTCON, INTE    ; INT0 enabled
                      01670 
0113   0190           01671                 CLRF    T1CON           ; Timer 1 OFF
0114   3009           01672                 MOVLW   b'00001001'     ; Timer 2 OFF, prescale 1:4 postscale 1:2
0115   0092           01673                 MOVWF   T2CON
0116   0191           01674                 CLRF    TMR2            ; Reset Timer 2 value
                      01675 
0117   1109           01676 POST_STAGE_2    BCF     PORT_RED, BIT_RED
0118   22BE           01677                 CALL    DELAY_250MS
0119   1489           01678                 BSF     PORT_YEL, BIT_YEL
                      01679 
011A   0064           01680 POST_PHASE_SYNC CLRWDT
                      01681 ;
                      01682 ; Meanwhile, in the slave, we hold until we receive the phase offset
                      01683 ; value, then store it and flash it on the display.
                      01684 ;
011B   1283 1303      01685                 BANKSEL PHASE_OFFSET    ; (Bank 0)
011D   0064           01686                 CLRWDT
011E   1E8C           01687                 BTFSS   PIR1, RCIF      ; Wait for Rx byte
011F   291D           01688                 GOTO    $-2
0120   081A           01689                 MOVF    RCREG, W        ; Get byte and store it
0121   00BD           01690                 MOVWF   PHASE_OFFSET
0122   229E           01691                 CALL    FLASH_PHASE
                      01692 ;
                      01693 ;
                      01694 ; Finally, start up the timer and enable interrupts, and enter
                      01695 ; the main program loop.
                      01696 ;
0123   0064           01697 POST_FINAL      CLRWDT
0124   1283 1303      01698                 BANKSEL TMR2            ; (Bank 0)
0126   018C           01699                 CLRF    PIR1            ; Clear interrupt flags
0127   018D           01700                 CLRF    PIR2            ; Clear interrupt flags
0128   018B           01701                 CLRF    INTCON          ; Clear interrupt flags
0129   170B           01702                 BSF     INTCON, PEIE    ; Enable peripheral interrupts
012A   160B           01703                 BSF     INTCON, INTE    ; Enable INT0 interrupt
012B   0191           01704                 CLRF    TMR2            ; Clear timer value
012C   1512           01705                 BSF     T2CON, TMR2ON   ; Start timer running
012D   14BC           01706                 BSF     PBUF_YEL, BIT_YEL
                      01707 
012E   01C2           01708                 CLRF    YEL_TMR         ; Reset LED timer values
012F   01C3           01709                 CLRF    RED_TMR
0130   30FF           01710                 MOVLW   GRN_BLINK_RATE
0131   00C1           01711                 MOVWF   GRN_TMR
                      01712 
0132   01C4           01713                 CLRF    SSR_STATE
0133   01C8           01714                 CLRF    SSR_STATE2
0134   01CB           01715                 CLRF    SSR_STATE3
0135   01C9           01716                 CLRF    DATA_BUF
0136   01C5           01717                 CLRF    CUR_SLICE
0137   01C6           01718                 CLRF    CUR_PRE
0138   01C7           01719                 CLRF    RX_BYTE
                      01720 
0139   15C4           01721                 BSF     SSR_STATE, GRNEN
013A   14C8           01722                 BSF     SSR_STATE2, SSRUPD      ; to make lights appear
013B   144B           01723                 BSF     SSR_STATE3, PRIVEN
                      01724 
013C   3050           01725                 MOVLW   TXBUF
013D   00CE           01726                 MOVWF   TXBUF_QUEUE
013E   00CF           01727                 MOVWF   TXBUF_SEND
                      01728 
013F   22D3           01729                 CALL    ALL_SSRS_OFF
0140   22F7           01730                 CALL    UPDATE_PORTS
                      01731 ;
                      01732 ; Assert that some important constants have the values they
                      01733 ; are assumed to have.  This is for critical things where
                      01734 ; the stability of the whole system is at stake.  For example,
                      01735 ; a bitmask which limits how far a jump table can go.
                      01736 ;
0141   0064           01737 POST_ASSERTIONS CLRWDT
0142   3007           01738                 MOVLW   CMD_SW_MASK
0143   3C07           01739                 SUBLW   .7
0144   1D03           01740                 BTFSS   STATUS, Z
0145   2952           01741                 GOTO    ASSERT_FAIL
0146   3007           01742                 MOVLW   SSR_STATE_MASK
0147   3C07           01743                 SUBLW   .7
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0148   1D03           01744                 BTFSS   STATUS, Z
0149   2952           01745                 GOTO    ASSERT_FAIL
014A   303F           01746                 MOVLW   CMD_CHAN_MASK
014B   3C3F           01747                 SUBLW   .63
014C   1D03           01748                 BTFSS   STATUS, Z
014D   2952           01749                 GOTO    ASSERT_FAIL
014E   301F           01750                 MOVLW   SSR_DEV_MASK
014F   3C1F           01751                 SUBLW   .31
0150   1903           01752                 BTFSC   STATUS, Z
0151   2954           01753                 GOTO    ASSERT_PASS
0152   3003           01754 ASSERT_FAIL     MOVLW   .3
0153   2A8B           01755                 GOTO    FAULT
0154   178B           01756 ASSERT_PASS     BSF     INTCON, GIE     ; Enable interrupts
                      01757                 ;
                      01758                 ; Fall-through
                      01759                 ;       |
                      01760                 ;       |
                      01761                 ;       V
                      01762 
                      01763 ;================================================================
                      01764 ; MAIN PROGRAM LOOP
                      01765 ;================================================================
                      01766 ;
                      01767 ; This code is run over and over as fast as we can manage.  It keeps the SSR
                      01768 ; logic updated (on cue from the interrupt-driven timing controls), polls for
                      01769 ; serial line input (which it also parses) and keeps the front panel LEDs
                      01770 ; happy.
                      01771 ;
0155   0064           01772 MAIN_LOOP       CLRWDT
0156   1283 1303      01773                 BANKSEL 0                       ; (bank 0)
                      01774 ;
                      01775 ; Blink green LED every GRN_BLINK_RATE zero-crossings (1/120 sec)
                      01776 ; if SSR_STATE<GRNEN> set
                      01777 ;
0158   1D48           01778 MAIN_GREEN      BTFSS   SSR_STATE2, GRNBLK      ; Time to blink green LED?
0159   295E           01779                 GOTO    MAIN_YELLOW             ; No...skip the following
015A   3001           01780                 MOVLW   1<<BIT_GRN              ; toggle green LED bit
015B   06BC           01781                 XORWF   PBUF_GRN, F
015C   1148           01782                 BCF     SSR_STATE2, GRNBLK      ; done, clear flag
015D   14C8           01783                 BSF     SSR_STATE2, SSRUPD
                      01784 
015E   1DC8           01785 MAIN_YELLOW     BTFSS   SSR_STATE2, YELOFF      ; Time to turn off yellow LED?
015F   2963           01786                 GOTO    MAIN_YEL_PRV
0160   10BC           01787                 BCF     PBUF_YEL, BIT_YEL
0161   11C8           01788                 BCF     SSR_STATE2, YELOFF
0162   14C8           01789                 BSF     SSR_STATE2, SSRUPD
                      01790 
0163   1C4B           01791 MAIN_YEL_PRV    BTFSS   SSR_STATE3, PRIVEN      ; Force YEL on if privs enabled
0164   2967           01792                 GOTO    MAIN_RED
0165   14BC           01793                 BSF     PBUF_YEL, BIT_YEL
0166   14C8           01794                 BSF     SSR_STATE2, SSRUPD
                      01795 
0167   1E48           01796 MAIN_RED        BTFSS   SSR_STATE2, REDOFF      ; Time to turn off red LED?
0168   296C           01797                 GOTO    MAIN_ACT
0169   113C           01798                 BCF     PBUF_RED, BIT_RED
016A   1248           01799                 BCF     SSR_STATE2, REDOFF
016B   14C8           01800                 BSF     SSR_STATE2, SSRUPD
                      01801 
016C   0064           01802 MAIN_ACT        CLRWDT
                      01803 
016D   219C           01804 MAIN_PROCESS    CALL    POLL_SIO                ; process pending command byte
016E   2178           01805                 CALL    SEND_SIO                ; send outgoing bytes
016F   2305           01806                 CALL    UPDATE_SSRS             ; update the SSR lines
                      01807 
0170   2955           01808 END_MAIN        GOTO    MAIN_LOOP
                      01809 
                      01810 ;------------------------------------------------------------------------------
                      01811 ; SEND_SIO
                      01812 ;  Serial output queue management.
                      01813 ;
                      01814 ; Context: Sets bank 0
                      01815 ; In:      Reads TXBUF
                      01816 ; Also:    Affects INDF, FSR, TXBUF*, SSR_STATE2<TXQUE>
                      01817 ;
                      01818 ; FLUSH_SIO     Drains the entire output buffer before returning (blocking)
                      01819 ; SEND_SIO      Sends at most one character (non-blocking; returns immediately
                      01820 ;               if the transmitter is still busy)
                      01821 ;
                      01822 ;------------------------------------------------------------------------------
0171   0064           01823 FLUSH_SIO       CLRWDT
0172   1283 1303      01824                 BANKSEL SSR_STATE2              ; (Bank 0)
0174   1C48           01825                 BTFSS   SSR_STATE2, TXQUE
0175   0008           01826                 RETURN
0176   2178           01827                 CALL    SEND_SIO
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0177   2971           01828                 GOTO    FLUSH_SIO
                      01829 
0178   0064           01830 SEND_SIO        CLRWDT
0179   1283 1303      01831                 BANKSEL SSR_STATE2
017B   1048           01832                 BCF     SSR_STATE2, TXQUE       ; can't Tx from slave
017C   0008           01833                 RETURN
                      01834 
                      01835 ;----------------------------------------------------------------
                      01836 ; SEND_W
                      01837 ;  Queue W to transmit on serial port.
                      01838 ;
                      01839 ; Context: Sets Bank 0
                      01840 ; In:      W=data to send
                      01841 ; Also:    Affects SSR_STATE2<TXQUE>, FSR, TXBUF*, X
                      01842 ;
                      01843 ; Traps Fault 2 if the buffer is full.  This is a fatal error!
                      01844 ; It probably doesn't need to be, but it's safer to err on
                      01845 ; the side of caution here.
                      01846 ;----------------------------------------------------------------
                      01847 
017D   0064           01848 SEND_W          CLRWDT
017E   1283 1303      01849                 BANKSEL SSR_STATE2              ; (Bank 0)
0180   00F5           01850                 MOVWF   X                       ; save value
0181   1C48           01851                 BTFSS   SSR_STATE2, TXQUE       ; Check for buffer overflow
0182   2989           01852                 GOTO    SEND_W_OK               ; Buffer empty; go ahead
0183   084F           01853                 MOVF    TXBUF_SEND, W           ; Compare pointers
0184   024E           01854                 SUBWF   TXBUF_QUEUE, W          ; If equal, buffer is full
0185   1D03           01855                 BTFSS   STATUS, Z
0186   2989           01856                 GOTO    SEND_W_OK
0187   3002           01857                 MOVLW   .2                      ; oops, buffer full
0188   2A8B           01858                 GOTO    FAULT
                      01859 
0189   0064           01860 SEND_W_OK       CLRWDT                          ; insert W into buffer
018A   1383           01861                 BCF     STATUS, IRP             ; FSR in bank 0/1
018B   084E           01862                 MOVF    TXBUF_QUEUE, W
018C   0084           01863                 MOVWF   FSR
018D   0875           01864                 MOVF    X, W
018E   0080           01865                 MOVWF   INDF
018F   0A4E           01866                 INCF    TXBUF_QUEUE, W          ; bump pointer
0190   390F           01867                 ANDLW   TXBUF_MASK              ; wrap within table bounds
0191   3850           01868                 IORLW   TXBUF
0192   00CE           01869                 MOVWF   TXBUF_QUEUE
0193   1448           01870                 BSF     SSR_STATE2, TXQUE       ; flag non-empty buffer
                      01871 
0194   0008           01872                 RETURN
                      01873 
                      01874 ;------------------------------------------------------------------------------
                      01875 ; POLL_SIO
                      01876 ;  Serial I/O handling.
                      01877 ;
                      01878 ; Reads incoming byte from the serial network and interprets it,
                      01879 ; executing the corresponding code to handle the command (assuming
                      01880 ; it's addressed to this unit).
                      01881 ;
                      01882 ; Context: Sets bank 0
                      01883 ;
                      01884 ; 1 start bit, 8 data bits, 1 stop bit, no parity, 19.2Kbaud
                      01885 ; when data received: PIR1<RCIF> set, interrupt raised if enabled
                      01886 ; (PIE1<RCIE>), byte received available in RCREG.  Reading from
                      01887 ; RCREG clears it and the RCIF bit.  (Actually, RCREG is a 2-deep
                      01888 ; FIFO; if it fills up, RCSTA<OERR> (overrun) is raised.  If this
                      01889 ; happens, the I/O locks up and you must turn off and then back
                      01890 ; on the CREN bit.)
                      01891 ;
                      01892 ; Framing errors assert the RCSTA<FERR> bit.
                      01893 ;
                      01894 ; Note that at full speed, you'll get a character every ~.5mS so
                      01895 ; the polling loop has to be at least that fast. (about 2,500
                      01896 ; instruction cycles between characters)
                      01897 ;
0195   0064           01898 DRAIN_SIO_IN    CLRWDT                  ; drain receiver
0196   1283 1303      01899                 BANKSEL PIR1            ; (bank 0)
0198   1E8C           01900                 BTFSS   PIR1, RCIF      ; character received?
0199   0008           01901                 RETURN                  ; no: stop
                      01902                 ;BCF    PIR1, RCIF      ; yes: acknowledge...
019A   081A           01903                 MOVF    RCREG, W        ; ...read byte...
019B   2995           01904                 GOTO    DRAIN_SIO_IN    ; ...and repeat.
                      01905 
019C   0064           01906 POLL_SIO        CLRWDT
019D   1283 1303      01907                 BANKSEL PIR1            ; (bank 0)
019F   1E8C           01908                 BTFSS   PIR1, RCIF      ; character received?
01A0   0008           01909                 RETURN                  ; no--move along...
                      01910 
                      01911                 ;BCF    PIR1, RCIF      ; acknowledge receipt
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01912 
01A1   1898           01913                 BTFSC   RCSTA, OERR     ; overrun error?
01A2   2A49           01914                 GOTO    SIO_OVERRUN
                      01915 
01A3   1918           01916                 BTFSC   RCSTA, FERR     ; framing error?
01A4   2A53           01917                 GOTO    SIO_FRAMERR
                      01918 
01A5   0064           01919                 CLRWDT
01A6   081A           01920                 MOVF    RCREG,W
01A7   00C7           01921                 MOVWF   RX_BYTE                 ; store received byte
                      01922 ;
                      01923 ; Parse the command stream.
                      01924 ; At this point, we've just received a data byte into RX_BYTE.  The
                      01925 ; state of the parser state machine (SSR_STATE<STATE>) dictates what
                      01926 ; we do with the byte we just got.
                      01927 ;
                      01928 ; State:        Byte:
                      01929 ; [0] IDLE      DATA: ignore
                      01930 ;               CMD for other: ignore
                      01931 ;               CMD 0: exec all channels off
                      01932 ;               CMD 1: store cmd; -> 1
                      01933 ;               CMD 2: store cmd; -> 2
                      01934 ;               CMD 3: exec error
                      01935 ;               CMD 4: exec error
                      01936 ;               CMD 5: exec error
                      01937 ;               CMD 6: exec error
                      01938 ;               CMD 7: -> 4
                      01939 ;
                      01940 ; [1] SETCHAN   CMD: error -> 0; rescan
                      01941 ;               DATA: exec set channel on/off -> 0
                      01942 ;
                      01943 ; [2] DIMCHAN1  CMD: error -> 0; rescan
                      01944 ;               DATA: store byte; -> 3
                      01945 ;
                      01946 ; [3] DIMCHAN2  CMD: error -> 0; rescan
                      01947 ;               DATA: exec set channel dim level -> 0
                      01948 ;
                      01949 ; [4] ADMIN     CMD: error -> 0; rescan
                      01950 ;               DATA: exec sub-command -> 0
                      01951 ;
                      01952 ; [5-7] UNDEF   HALT ON INTERNAL FAULT
                      01953 ;
01A8   0064           01954 CMD_PARSER      CLRWDT
01A9   1FC7           01955                 BTFSS   RX_BYTE, CMD_BIT        ; is this a command byte?
01AA   29BD           01956                 GOTO    DATA_BYTE               ; no, go process data byte
                      01957 ;--------------------------------------------------------------------------
                      01958 ; RECEIVED COMMAND BYTE
                      01959 ;
                      01960 ; If we were still waiting for bytes to complete a command (state != 0),
                      01961 ; we abort the command with an error.  Otherwise, we act on the command
                      01962 ; if it's addressed to us.
                      01963 ;
01AB   0844           01964                 MOVF    SSR_STATE, W            ; COMMAND BYTE:
01AC   3907           01965                 ANDLW   SSR_STATE_MASK          ; --Error if state != 0
01AD   1D03           01966                 BTFSS   STATUS, Z               ;
01AE   2A41           01967                 GOTO    CMD_ABORT               ;
                      01968 ;
                      01969 ; Received command in state 0 (idle).  If we're the master, we make sure
                      01970 ; the command is addressed to us, and ignore it if it's not.  If we are
                      01971 ; the slave, our commands all come from the master, so we just do them
                      01972 ; unconditionally.
                      01973 ;
01AF   301E           01974                 MOVLW   SLV_RX_LEN              ; Flash red LED
01B0   00C3           01975                 MOVWF   RED_TMR
01B1   16C4           01976                 BSF     SSR_STATE, REDEN
01B2   153C           01977                 BSF     PBUF_RED, BIT_RED
01B3   14C8           01978                 BSF     SSR_STATE2, SSRUPD
01B4   2805           01979                 GOTO    STATE_0_CMD_TBL         ; dispatch command from RX_BYTE
                      01980 ;
                      01981 ; COMMAND 0:    ALL CHANNELS OFF
                      01982 ;               1000aaaa
                      01983 ;                       Set all device channels to OFF state
                      01984 ;
01B5   22D3           01985 CMD_0           CALL    ALL_SSRS_OFF
01B6   2A69           01986                 GOTO    PASS_DOWN
                      01987 ;
                      01988 ; COMMAND 1:    SET CHANNEL ON/OFF
                      01989 ;               1001aaaa ...
                      01990 ;               Wait for next byte
                      01991 ;
01B7   1444           01992 CMD_1           BSF     SSR_STATE, STATE0       ; -> 1
01B8   0008           01993                 RETURN
                      01994 ;
                      01995 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01996 ;               1010aaaa ...
                      01997 ;               Wait for next byte
                      01998 ;
01B9   14C4           01999 CMD_2           BSF     SSR_STATE, STATE1       ; -> 2
01BA   0008           02000                 RETURN
                      02001 ;
                      02002 ; COMMAND 7:    ADMINISTRATIVE COMMANDS
                      02003 ;               1011aaaa ...
                      02004 ;               Wait for next byte
                      02005 ;
01BB   1544           02006 CMD_7           BSF     SSR_STATE, STATE2       ; -> 4
01BC   0008           02007                 RETURN
                      02008 ;
                      02009 ;--------------------------------------------------------------------------
                      02010 ; RECEIVED DATA BYTE
                      02011 ;
                      02012 ; If we were not waiting for one (state zero), just ignore it.  It's some-
                      02013 ; one else's.  Otherwise, do what we were waiting for.
                      02014 ;
                      02015 ; Data byte handler dispatch based on state machine value.
                      02016 ;
01BD   2813           02017 DATA_BYTE       GOTO    DATA_BYTE_TBL           ; Dispatch command from state
                      02018                                                 ; machine value.
                      02019 
01BE   3001           02020 FAULT_1         MOVLW   .1                      ; Fault code
01BF   2A8B           02021                 GOTO    FAULT                   ; Halt on error
                      02022 ;
                      02023 ; COMMAND 1:    SET CHANNEL ON/OFF
                      02024 ;               1001aaaa 0fvvvvvv
                      02025 ;               Set channel vvvvvv to on if f=1 or off if f=0
                      02026 ;
01C0   0064           02027 DATA_STATE_1    CLRWDT
01C1   1283 1303      02028                 BANKSEL SSR_ID                  ; (bank 0)
01C3   0847           02029                 MOVF    RX_BYTE, W              ; get channel id byte
01C4   393F           02030                 ANDLW   CMD_CHAN_MASK
01C5   00BE           02031                 MOVWF   SSR_ID
01C6   2254           02032                 CALL    XLATE_SSR_ID            ; get local SSR ID
01C7   1B3E           02033                 BTFSC   SSR_ID, ILLSSR          ; is it a bad SSR?
01C8   2A40           02034                 GOTO    CMD_ERROR
01C9   1FBE           02035                 BTFSS   SSR_ID, MY_SSR          ; is it even my SSR?
01CA   29CF           02036                 GOTO    PASS_CMD_1              ; nope
                      02037 
01CB   0180           02038                 CLRF    INDF                    ; clear dim, on, value
01CC   1B47           02039                 BTFSC   RX_BYTE, CMD_CHAN_ON    ; set ON if on bit set in cmd
01CD   1780           02040                 BSF     INDF, SSR_ON
01CE   29D1           02041                 GOTO    CMD_RESET_STATE
                      02042 
01CF   0064           02043 PASS_CMD_1      CLRWDT                          ; not my SSR, send to slave CPU
01D0   2A8B           02044                 GOTO    FAULT
                      02045 
                      02046 ;
                      02047 ; Reset state machine (-> 0)
                      02048 ; This is usually the last step in any command execution.
                      02049 ;
01D1   0064           02050 CMD_RESET_STATE CLRWDT
01D2   30F8           02051                 MOVLW   ~SSR_STATE_MASK
01D3   05C4           02052                 ANDWF   SSR_STATE, F            ; -> 0
01D4   0008           02053                 RETURN
                      02054 ;
                      02055 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02056 ;               1010aaaa 0xvvvvvv ...
                      02057 ;               Wait for last byte
                      02058 ;
01D5   0064           02059 DATA_STATE_2    CLRWDT
01D6   0847           02060                 MOVF    RX_BYTE, W
01D7   00C9           02061                 MOVWF   DATA_BUF                ; store received byte
01D8   1444           02062                 BSF     SSR_STATE, STATE0       ; -> 3
01D9   0008           02063                 RETURN
                      02064 ;
                      02065 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02066 ;               1010aaaa 0xvvvvvv 0xxddddd
                      02067 ;               Set channel vvvvvv to dimmer level ddddd.
                      02068 ;
                      02069 ; note that setting value=0 or value=31 here is subtly different
                      02070 ; than just using the "set on/off" command.  This always engages
                      02071 ; the dimmer controls, although in theory a value of 0 should never
                      02072 ; get turned on, and a value of 31 should be pretty darn near fully
                      02073 ; on.
                      02074 ;
01DA   0064           02075 DATA_STATE_3    CLRWDT
01DB   0849           02076                 MOVF    DATA_BUF, W             ; get requested channel
01DC   393F           02077                 ANDLW   CMD_CHAN_MASK
01DD   00BE           02078                 MOVWF   SSR_ID
01DE   2254           02079                 CALL    XLATE_SSR_ID            ; normalize channel ID
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01DF   1B3E           02080                 BTFSC   SSR_ID, ILLSSR          ; is it even valid?
01E0   2A40           02081                 GOTO    CMD_ERROR
01E1   1FBE           02082                 BTFSS   SSR_ID, MY_SSR          ; is it for me?
01E2   29E9           02083                 GOTO    PASS_CMD_2              ; no: pass to slave
                      02084 
01E3   0847           02085                 MOVF    RX_BYTE, W              ; get dimmer value
01E4   391F           02086                 ANDLW   CMD_DIM_MASK
01E5   0080           02087                 MOVWF   INDF                    ; write to SSR value buffer
01E6   1700           02088                 BSF     INDF, SSRDIM            ; set SSR channel flags
01E7   1380           02089                 BCF     INDF, SSR_ON
01E8   29D1           02090                 GOTO    CMD_RESET_STATE
                      02091 ;
                      02092 ; If the channel is actually for the slave CPU, we need to send it
                      02093 ; over there.
                      02094 ;
01E9   0064           02095 PASS_CMD_2      CLRWDT
01EA   2A8B           02096                 GOTO    FAULT
                      02097 ;
                      02098 ; COMMAND 7:    ADMINISTRATIVE FUNCTIONS
                      02099 ;               1111aaaa 0xxxxxxx
                      02100 ;                        00pppppp set phase offset=p(*)
                      02101 ;                        010baaaa set device ID(*)
                      02102 ;                        01100000 shutdown(*)
                      02103 ;                        01100001 disable privileged commands
                      02104 ;                        011101yr (slave) red/yel 2s
                      02105 ;                        01111gyr (slave) halt with LED pattern
                      02106 ;
01EB   0064           02107 DATA_STATE_4    CLRWDT
01EC   1F47           02108                 BTFSS   RX_BYTE, 6              ; -0------ set phase offset
01ED   2A16           02109                 GOTO    CMD_SET_PHASE
01EE   1EC7           02110                 BTFSS   RX_BYTE, 5              ; -10----- set device id
01EF   2A1A           02111                 GOTO    CMD_SET_DEV_ID
01F0   1E47           02112                 BTFSS   RX_BYTE, 4              ; -110---- admin commands
01F1   2A1E           02113                 GOTO    CMD_ADMIN
01F2   0064           02114 CMD_SLAVE_CTL   CLRWDT                          ; -111---- slave control commands
01F3   19C7           02115                 BTFSC   RX_BYTE, 3              ; -1111--- HALT with LED pattern
01F4   29F8           02116                 GOTO    CMD_SLV_HALT
01F5   1947           02117                 BTFSC   RX_BYTE, 2              ; -11101-- Display LED pattern 2s
01F6   2A06           02118                 GOTO    CMD_SLV_LEDS
01F7   2A40           02119                 GOTO    CMD_ERROR               ; -11100xx Reserved for future commands
                      02120 ;
                      02121 ; ADMIN: SLAVE: HALT     1111xxxx 01111gyr
                      02122 ; Display a pattern on the LEDs and halt
                      02123 ;
01F8   0064           02124 CMD_SLV_HALT    CLRWDT
01F9   138B           02125                 BCF     INTCON, GIE             ; disable interrupts
01FA   22D3           02126                 CALL    ALL_SSRS_OFF
01FB   01BC           02127                 CLRF    PORTE_BUF
01FC   22F7           02128                 CALL    UPDATE_PORTS
01FD   1947           02129                 BTFSC   RX_BYTE, 2
01FE   143C           02130                 BSF     PBUF_GRN, BIT_GRN
01FF   18C7           02131                 BTFSC   RX_BYTE, 1
0200   14BC           02132                 BSF     PBUF_YEL, BIT_YEL
0201   1847           02133                 BTFSC   RX_BYTE, 0
0202   153C           02134                 BSF     PBUF_RED, BIT_RED
0203   22F7           02135                 CALL    UPDATE_PORTS
0204   0064           02136 CMD_SLV_STOP    CLRWDT
0205   2A04           02137                 GOTO    $-1
                      02138 ;
                      02139 ; ADMIN: SLAVE: LEDS     1111aaaa 011101yr
                      02140 ; Display a pattern on the yellow/red LEDs for 2s
                      02141 ;
0206   0064           02142 CMD_SLV_LEDS    CLRWDT
0207   1CC7           02143                 BTFSS   RX_BYTE, 1
0208   2A0E           02144                 GOTO    CMD_SLV_LED_R
0209   30F0           02145                 MOVLW   SLV_LED_LEN
020A   00C2           02146                 MOVWF   YEL_TMR
020B   1644           02147                 BSF     SSR_STATE, YELEN
020C   14BC           02148                 BSF     PBUF_YEL, BIT_YEL
020D   14C8           02149                 BSF     SSR_STATE2, SSRUPD
020E   1C47           02150 CMD_SLV_LED_R   BTFSS   RX_BYTE, 0
020F   29D1           02151                 GOTO    CMD_RESET_STATE
0210   30F0           02152                 MOVLW   SLV_LED_LEN
0211   00C3           02153                 MOVWF   RED_TMR
0212   16C4           02154                 BSF     SSR_STATE, REDEN
0213   153C           02155                 BSF     PBUF_RED, BIT_RED
0214   14C8           02156                 BSF     SSR_STATE2, SSRUPD
0215   29D1           02157                 GOTO    CMD_RESET_STATE
                      02158 ;
                      02159 ; ADMIN: SET PHASE       1111aaaa 00pppppp
                      02160 ; Set phase offset to p, reboot device
                      02161 ;
0216   0064           02162 CMD_SET_PHASE   CLRWDT
0217   1C4B           02163                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0218   2A36           02164                 GOTO    CMD_PRIV_ERROR
0219   2800           02165                 GOTO    RESTART_VECTOR          ; Restart device from scratch
                      02166 ;
                      02167 ; ADMIN: SET DEVICE ID   1111aaaa 010baaaa
                      02168 ; Change this device's ID on the serial network
                      02169 ;
                      02170 ; as a check bit, b==a<0>.  So, to set the device
                      02171 ; to ID=2, send 1111aaaa 01000010; to set it
                      02172 ; to ID=5, send 1111aaaa 01010101.
                      02173 ;
021A   0064           02174 CMD_SET_DEV_ID  CLRWDT
021B   1C4B           02175                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
021C   2A36           02176                 GOTO    CMD_PRIV_ERROR
                      02177 ;
021D   2A8B           02178                 GOTO    FAULT
                      02179 ;
                      02180 ; ADMIN: MISC. ADMINISTRATIVE FUNCTIONS
                      02181 ;               1111aaaa 0110xxxx (function x (0-15))
                      02182 ;                        01100000 shutdown(*)
                      02183 ;                        01100001 disable privileged commands
                      02184 ;
021E   2821           02185 CMD_ADMIN       GOTO    CMD_ADMIN_TABLE
                      02186 
                      02187 ;
                      02188 ; ADMIN: SHUTDOWN
                      02189 ;
021F   0064           02190 CMD_AD_SHUTDOWN CLRWDT
0220   1C4B           02191                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
0221   2A36           02192                 GOTO    CMD_PRIV_ERROR
0222   138B           02193                 BCF     INTCON, GIE             ; turn off interrupts
0223   22D3           02194                 CALL    ALL_SSRS_OFF
0224   01BC           02195                 CLRF    PORTE_BUF
0225   22F7           02196                 CALL    UPDATE_PORTS
0226   22BE           02197                 CALL    DELAY_250MS
0227   1489           02198                 BSF     PORT_YEL, BIT_YEL
0228   22B3           02199                 CALL    DELAY_1S
0229   1089           02200                 BCF     PORT_YEL, BIT_YEL
022A   22BE           02201                 CALL    DELAY_250MS
022B   1509           02202                 BSF     PORT_RED, BIT_RED
022C   22BB           02203                 CALL    DELAY_2S
022D   0063           02204                 SLEEP
022E   0064           02205                 CLRWDT                          ; extra paranoia
022F   2A2E           02206                 GOTO    $-1
                      02207 ;
                      02208 ; ADMIN: DISABLE PRIVILEGED FUNCTIONS
                      02209 ;
0230   0064           02210 CMD_AD_DIS_PRIV CLRWDT
0231   104B           02211                 BCF     SSR_STATE3, PRIVEN
0232   1E44           02212                 BTFSS   SSR_STATE, YELEN
0233   10BC           02213                 BCF     PBUF_YEL, BIT_YEL
0234   14C8           02214                 BSF     SSR_STATE2, SSRUPD
0235   29D1           02215                 GOTO    CMD_RESET_STATE
                      02216 ;------------------------------------------------------------------------------
                      02217 ; ERROR HANDLING
                      02218 ;------------------------------------------------------------------------------
                      02219 ;
                      02220 ; CMD_PRIV_ERROR Received privileged command when not enabled
                      02221 ;
                      02222 ; CMD_ERROR      Received invalid command; flash LED and ignore it
                      02223 ;
                      02224 ; CMD_ABORT      Received invalid byte in command sequence; flash
                      02225 ;                LED and re-parse received byte in case it might be
                      02226 ;                a new command addressed to us
                      02227 ;
0236   0064           02228 CMD_PRIV_ERROR  CLRWDT
                      02229 ; If we detected this in the slave, we can just
                      02230 ; handle it directly here.
0237   14BC           02231                 BSF     PBUF_YEL, BIT_YEL
0238   153C           02232                 BSF     PBUF_RED, BIT_RED
0239   30F0           02233                 MOVLW   .240
023A   00C2           02234                 MOVWF   YEL_TMR
023B   00C3           02235                 MOVWF   RED_TMR
023C   1644           02236                 BSF     SSR_STATE, YELEN
023D   16C4           02237                 BSF     SSR_STATE, REDEN
023E   14C8           02238                 BSF     SSR_STATE2, SSRUPD
023F   29D1           02239                 GOTO    CMD_RESET_STATE
                      02240 
0240   01C7           02241 CMD_ERROR       CLRF    RX_BYTE                 ; clear byte so rescan==ignore
0241   0064           02242 CMD_ABORT       CLRWDT
0242   14BC           02243                 BSF     PBUF_YEL, BIT_YEL
0243   30F0           02244                 MOVLW   YEL_CMDERR_LEN
0244   00C2           02245                 MOVWF   YEL_TMR
0245   1644           02246                 BSF     SSR_STATE, YELEN
0246   14C8           02247                 BSF     SSR_STATE2, SSRUPD
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0247   21D1           02248                 CALL    CMD_RESET_STATE         ; -> 0
0248   29A8           02249                 GOTO    CMD_PARSER              ; rescan byte
                      02250 ;
                      02251 ; Data overrun!  Panic!
                      02252 ;
0249   0064           02253 SIO_OVERRUN     CLRWDT
024A   1218           02254                 BCF     RCSTA, CREN             ; shut down receiver
024B   22BE           02255                 CALL    DELAY_250MS             ; for 250mS (maybe longer
024C   1618           02256                 BSF     RCSTA, CREN             ; than strictly necessary)
024D   3078           02257                 MOVLW   RED_ORERR_LEN
024E   00C3           02258                 MOVWF   RED_TMR
024F   16C4           02259                 BSF     SSR_STATE, REDEN
0250   153C           02260                 BSF     PBUF_RED, BIT_RED
0251   14C8           02261                 BSF     SSR_STATE2, SSRUPD
0252   29D1           02262                 GOTO    CMD_RESET_STATE
                      02263 ;
                      02264 ; Framing Error!  Don't Panic!  But flag as a command error, reset state
                      02265 ; machine, etc.
                      02266 ;
0253   2A40           02267 SIO_FRAMERR     GOTO    CMD_ERROR
                      02268 ;
                      02269 ;==============================================================================
                      02270 ; XLATE_SSR_ID
                      02271 ;  Translate the channel number to a local SSR number 0-23.
                      02272 ;
                      02273 ; Context: Sets Bank 0
                      02274 ; In:      SSR_ID=raw command
                      02275 ; Out:     SSR_ID=adjusted value, MY_SSR,ILLSSR flags
                      02276 ;          FSR=pointer to SSR value register
                      02277 ;
                      02278 ;==============================================================================
                      02279 ;
                      02280 ; Given a raw channel number in SSR_ID, convert it to the local
                      02281 ; SSR ID 0-23 and set the MY_SSR bit if this board has that SSR.
                      02282 ; Load FSR to point to that SSR's buffer
                      02283 ;
                      02284 ; Otherwise, clear MY_SSR and the other bits are undefined (in
                      02285 ; which case we should ignore the command and let the other board
                      02286 ; handle it).
                      02287 ;
                      02288 ; For this model, SSR ID 00-23 is for the master board,
                      02289 ; and SSR ID 24-47 is 00-23 on the slave board.
                      02290 ;
                      02291 ; If an illegal SSR ID is specified, ILLSSR is set.  In
                      02292 ; this case, disregard ALL OTHER BITS including MY_SSR.
                      02293 ;
0254   0064           02294 XLATE_SSR_ID    CLRWDT
0255   1283 1303      02295                 BANKSEL SSR_ID          ; (bank 0)
0257   303F           02296                 MOVLW   CMD_CHAN_MASK   ; mask off just the channel
0258   05BE           02297                 ANDWF   SSR_ID, F       ; (also clears MY_SSR and ILLSSR)
0259   3018           02298                 MOVLW   .24             ; subtract ch-24
025A   023E           02299                 SUBWF   SSR_ID, W       ; if ch<24, it is
025B   1C03           02300                 BTFSS   STATUS, C       ;
025C   2A8B           02301                 GOTO    FAULT           ; else...wait, we shouldn't see that!
025D   0064           02302                 CLRWDT                  ; slave continues checking...
025E   00BE           02303                 MOVWF   SSR_ID          ; put adjusted channel back
025F   3018           02304                 MOVLW   .24             ; subtract 24 again
0260   023E           02305                 SUBWF   SSR_ID, W       ; just to be sure it was <48
0261   1803           02306                 BTFSC   STATUS, C       ; Skip if < 48
0262   173E           02307                 BSF     SSR_ID, ILLSSR  ; **flag as illegal SSR ID**
0263   17BE           02308                 BSF     SSR_ID, MY_SSR  ; it's mine!
0264   083E           02309                 MOVF    SSR_ID, W
0265   393F           02310                 ANDLW   CMD_CHAN_MASK   ; calculate offset to SSR value register
0266   3E20           02311                 ADDLW   SSR00_VAL
0267   0084           02312                 MOVWF   FSR             ; make FSR point to that register
0268   0008           02313                 RETURN
                      02314 
                      02315 
                      02316 ;----------------------------------------------------------------
                      02317 ; PASS_DOWN
                      02318 ;  Pass received byte (in RX_BYTE) down to slave CPU.
                      02319 ;
                      02320 ; Context: Sets Bank 0
                      02321 ;
                      02322 ;----------------------------------------------------------------
0269   0064           02323 PASS_DOWN       CLRWDT
026A   1283 1303      02324                 BANKSEL RX_BYTE
026C   0008           02325                 RETURN
                      02326 
                      02327 
                      02328 ;----------------------------------------------------------------
                      02329 ; FLASH_YEL
                      02330 ; FLASH_RED
                      02331 ;  Flash yellow or red LED a number of times
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02332 ;
                      02333 ;  These write directly to the LED I/O port, so can only be
                      02334 ;  used outside normal running mode (POST, etc).
                      02335 ;
                      02336 ;  Context: Bank 0
                      02337 ;  In:      W=flasher count
                      02338 ;  Also:    FLASH_CT I, J, K affected
                      02339 ;----------------------------------------------------------------
026D   0064           02340 FLASH_YEL       CLRWDT
026E   1283 1303      02341                 BANKSEL FLASH_CT        ; (Bank 0)
0270   00BF           02342                 MOVWF   FLASH_CT
0271   22B4           02343                 CALL    FLASH_OFF_DELAY
0272   08BF           02344                 MOVF    FLASH_CT, F     ; If already zero, stop
0273   1903           02345                 BTFSC   STATUS, Z
0274   0008           02346                 RETURN
                      02347 
0275   1489           02348 NEXT_FLASH_YEL  BSF     PORT_YEL, BIT_YEL
0276   22B8           02349                 CALL    FLASH_ON_DELAY
0277   1089           02350                 BCF     PORT_YEL, BIT_YEL
0278   22B4           02351                 CALL    FLASH_OFF_DELAY
0279   0BBF           02352                 DECFSZ  FLASH_CT, F
027A   2A75           02353                 GOTO    NEXT_FLASH_YEL
027B   0008           02354                 RETURN
                      02355 
027C   0064           02356 FLASH_RED       CLRWDT
027D   1283 1303      02357                 BANKSEL FLASH_CT        ; (Bank 0)
027F   00BF           02358                 MOVWF   FLASH_CT
0280   22B4           02359                 CALL    FLASH_OFF_DELAY
0281   08BF           02360                 MOVF    FLASH_CT, F     ; If already zero, stop
0282   1903           02361                 BTFSC   STATUS, Z
0283   0008           02362                 RETURN
                      02363 
0284   1509           02364 NEXT_FLASH_RED  BSF     PORT_RED, BIT_RED
0285   22B8           02365                 CALL    FLASH_ON_DELAY
0286   1109           02366                 BCF     PORT_RED, BIT_RED
0287   22B4           02367                 CALL    FLASH_OFF_DELAY
0288   0BBF           02368                 DECFSZ  FLASH_CT, F
0289   2A84           02369                 GOTO    NEXT_FLASH_RED
028A   0008           02370                 RETURN
                      02371 
                      02372 ;----------------------------------------------------------------
                      02373 ; FAULT
                      02374 ;  Register a fault condition and halt operations.
                      02375 ;
                      02376 ; Codes:
                      02377 ;  Value  A GY GYR  Meaning
                      02378 ;  000001 - -- --O  Illegal state machine value
                      02379 ;  000010 - -- -O-  TX buffer overflow
                      02380 ;  000011 - -- -OO  Assertion error in POST
                      02381 ;  (none) x xx OOO  Slave tried to pass cmd downstream
                      02382 ;  (none) x xx OOO  Any fault detected only in slave CPU
                      02383 ;  011000 - OO ---  Internal SSR index out of range (==24)
                      02384 ;     :      :
                      02385 ;  011111 - OO OOO  Internal SSR index out of range (==31)
                      02386 ;
                      02387 ; Context: Sets Bank 0
                      02388 ; In:      W=fault code (0-63)
                      02389 ; Returns: never
                      02390 ;
                      02391 ;----------------------------------------------------------------
028B   0064           02392 FAULT           CLRWDT
028C   1283 1303      02393                 BANKSEL INTCON
028E   138B           02394                 BCF     INTCON, GIE     ; disable interrupts
028F   22D3           02395                 CALL    ALL_SSRS_OFF    ; kill outputs
0290   01BC           02396                 CLRF    PORTE_BUF       ; reset T/R, LED outputs
0291   22F7           02397                 CALL    UPDATE_PORTS    ; flush to output
                      02398 ;
                      02399 ;
                      02400 ; In the slave, we can't really report out faults so we'll
                      02401 ; just flash all our lights and halt.
                      02402 ;
0292   0064           02403 FAULT_HALT      CLRWDT
0293   153C           02404                 BSF     PBUF_RED, BIT_RED
0294   14BC           02405                 BSF     PBUF_YEL, BIT_YEL
0295   143C           02406                 BSF     PBUF_GRN, BIT_GRN
0296   22F7           02407                 CALL    UPDATE_PORTS
0297   22B7           02408                 CALL    DELAY_500MS
0298   113C           02409                 BCF     PBUF_RED, BIT_RED
0299   10BC           02410                 BCF     PBUF_YEL, BIT_YEL
029A   103C           02411                 BCF     PBUF_GRN, BIT_GRN
029B   22F7           02412                 CALL    UPDATE_PORTS
029C   22B7           02413                 CALL    DELAY_500MS
029D   2A92           02414                 GOTO    FAULT_HALT
                      02415 ;
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02416 ;
                      02417 
                      02418 
                      02419 ;----------------------------------------------------------------
                      02420 ; FLASH_PHASE
                      02421 ;  Flash the phase offset value on the diagnostic LEDs.
                      02422 ;  Normal interrupt processing should be suspended during this
                      02423 ;  operation.
                      02424 ;
                      02425 ;  Properly turns off LEDs via port buffers, but then takes over
                      02426 ;  direct control of the LEDs like the POST-level commands do.
                      02427 ;  (this is called during POST as well)
                      02428 ;
                      02429 ; Context: Sets Bank 0
                      02430 ; In:      PHASE_OFFSET=phase
                      02431 ; Also:    I, J, K affected
                      02432 ;----------------------------------------------------------------
029E   0064           02433 FLASH_PHASE     CLRWDT
029F   1283 1303      02434                 BANKSEL PHASE_OFFSET    ; (Bank 0)
02A1   103C           02435                 BCF     PBUF_GRN, BIT_GRN
02A2   10BC           02436                 BCF     PBUF_YEL, BIT_YEL
02A3   113C           02437                 BCF     PBUF_RED, BIT_RED
02A4   22F7           02438                 CALL    UPDATE_PORTS
02A5   22BB           02439                 CALL    DELAY_2S
02A6   1509           02440                 BSF     PORT_RED, BIT_RED
02A7   0E3D           02441                 SWAPF   PHASE_OFFSET, W
02A8   390F           02442                 ANDLW   0x0F
02A9   226D           02443                 CALL    FLASH_YEL
02AA   1109           02444                 BCF     PORT_RED, BIT_RED
02AB   22BB           02445                 CALL    DELAY_2S
02AC   1489           02446                 BSF     PORT_YEL, BIT_YEL
02AD   083D           02447                 MOVF    PHASE_OFFSET, W
02AE   390F           02448                 ANDLW   0x0F
02AF   227C           02449                 CALL    FLASH_RED
02B0   1089           02450                 BCF     PORT_YEL, BIT_YEL
02B1   22BB           02451                 CALL    DELAY_2S
02B2   0008           02452                 RETURN
                      02453 
                      02454 
                      02455 
                      02456 
                      02457 
02B3   0064           02458 DELAY_1S        CLRWDT
02B4   304C           02459 FLASH_OFF_DELAY MOVLW   .76
02B5   00F2           02460                 MOVWF   I
02B6   2AC7           02461                 GOTO    ISPINNER
                      02462 
02B7   0064           02463 DELAY_500MS     CLRWDT
02B8   3026           02464 FLASH_ON_DELAY  MOVLW   .38
02B9   00F2           02465                 MOVWF   I
02BA   2AC7           02466                 GOTO    ISPINNER
                      02467 
02BB   3098           02468 DELAY_2S        MOVLW   .152
02BC   00F2           02469                 MOVWF   I
02BD   2AC7           02470                 GOTO    ISPINNER
                      02471 
02BE   3013           02472 DELAY_250MS     MOVLW   .19
02BF   00F2           02473                 MOVWF   I
02C0   2AC7           02474                 GOTO    ISPINNER
                      02475 
02C1   300A           02476 DELAY_125MS     MOVLW   .10
02C2   00F2           02477                 MOVWF   I
02C3   2AC7           02478                 GOTO    ISPINNER
                      02479 
                      02480 ; fash flasher value
02C4   3005           02481 DELAY_FFLASH    MOVLW   .5
02C5   00F2           02482                 MOVWF   I
02C6   2AC7           02483                 GOTO    ISPINNER
                      02484 
                      02485 ;----------------------------------------------------------------
                      02486 ; ISPINNER
                      02487 ;  Delay for approximately I * 255 * 255 instructions.
                      02488 ;  I=19 is about 250mS
                      02489 ;  I=38 is about 500mS
                      02490 ;
                      02491 ; Context: ANY bank
                      02492 ; In:      I=delay
                      02493 ;
                      02494 ; Also:    J, K, W affected
                      02495 ;----------------------------------------------------------------
02C7   0064           02496 ISPINNER        CLRWDT
02C8   30FF           02497                 MOVLW   .255
02C9   00F3           02498                 MOVWF   J
02CA   30FF           02499 ISP_NEXTJ       MOVLW   .255
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02CB   00F4           02500                 MOVWF   K
02CC   0BF4           02501                 DECFSZ  K,F
02CD   2ACC           02502                 GOTO    $-1
02CE   0BF3           02503                 DECFSZ  J,F
02CF   2ACA           02504                 GOTO    ISP_NEXTJ
02D0   0BF2           02505                 DECFSZ  I,F
02D1   2AC7           02506                 GOTO    ISPINNER
02D2   0008           02507                 RETURN
                      02508 
                      02509 ;------------------------------------------------------------------------------
                      02510 ; ALL_SSRS_OFF
                      02511 ;
                      02512 ; The fastest route to clearing all SSR channels
                      02513 ; call UPDATE_PORTS after this.
                      02514 ;
                      02515 ; Context: Sets Bank 0
                      02516 ; Also:    Affects W
                      02517 ;
                      02518 ;------------------------------------------------------------------------------
02D3   0064           02519 ALL_SSRS_OFF    CLRWDT
02D4   1283 1303      02520                 BANKSEL SSR00_VAL       ; (Bank 0)
02D6   01A0           02521                 CLRF    SSR00_VAL
02D7   01A1           02522                 CLRF    SSR01_VAL
02D8   01A2           02523                 CLRF    SSR02_VAL
02D9   01A3           02524                 CLRF    SSR03_VAL
02DA   01A4           02525                 CLRF    SSR04_VAL
02DB   01A5           02526                 CLRF    SSR05_VAL
02DC   01A6           02527                 CLRF    SSR06_VAL
02DD   01A7           02528                 CLRF    SSR07_VAL
02DE   01A8           02529                 CLRF    SSR08_VAL
02DF   01A9           02530                 CLRF    SSR09_VAL
02E0   01AA           02531                 CLRF    SSR10_VAL
02E1   01AB           02532                 CLRF    SSR11_VAL
02E2   01AC           02533                 CLRF    SSR12_VAL
02E3   01AD           02534                 CLRF    SSR13_VAL
02E4   01AE           02535                 CLRF    SSR14_VAL
02E5   01AF           02536                 CLRF    SSR15_VAL
02E6   01B0           02537                 CLRF    SSR16_VAL
02E7   01B1           02538                 CLRF    SSR17_VAL
02E8   01B2           02539                 CLRF    SSR18_VAL
02E9   01B3           02540                 CLRF    SSR19_VAL
02EA   01B4           02541                 CLRF    SSR20_VAL
02EB   01B5           02542                 CLRF    SSR21_VAL
02EC   01B6           02543                 CLRF    SSR22_VAL
02ED   01B7           02544                 CLRF    SSR23_VAL
02EE   301F           02545                 MOVLW   b'00011111'
02EF   04B8           02546                 IORWF   PORTA_BUF, F
02F0   303E           02547                 MOVLW   b'00111110'
02F1   04B9           02548                 IORWF   PORTB_BUF, F
02F2   303F           02549                 MOVLW   b'00111111'
02F3   04BA           02550                 IORWF   PORTC_BUF, F
02F4   30FF           02551                 MOVLW   b'11111111'
02F5   04BB           02552                 IORWF   PORTD_BUF, F
02F6   0008           02553                 RETURN
                      02554 
                      02555 ;----------------------------------------------------------------
                      02556 ; Port Control
                      02557 ;
                      02558 ; Registers PORTx_BUF hold the values we want to write to the
                      02559 ; output pins.  Calling UPDATE_PORTS does the actual writing.
                      02560 ;
                      02561 ; We do it this way to avoid the READ/MODIFY/WRITE effect
                      02562 ; problems we'd have by fiddling with the I/O pins separately.
                      02563 ; Plus, this is more efficient if many pins are changing at
                      02564 ; once.
                      02565 ;
                      02566 ; UPDATE_PORTS
                      02567 ;  Context: Sets Bank 0
                      02568 ;  In:      PORTx_BUF
                      02569 ;  Also:    W affected
                      02570 ;----------------------------------------------------------------
02F7   0064           02571 UPDATE_PORTS    CLRWDT
02F8   1283 1303      02572                 BANKSEL PORTA           ; (Bank 0)
02FA   0838           02573                 MOVF    PORTA_BUF, W
02FB   0085           02574                 MOVWF   PORTA
02FC   0839           02575                 MOVF    PORTB_BUF, W
02FD   0086           02576                 MOVWF   PORTB
02FE   083A           02577                 MOVF    PORTC_BUF, W
02FF   0087           02578                 MOVWF   PORTC
0300   083B           02579                 MOVF    PORTD_BUF, W
0301   0088           02580                 MOVWF   PORTD
0302   083C           02581                 MOVF    PORTE_BUF, W
0303   0089           02582                 MOVWF   PORTE
0304   0008           02583                 RETURN
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02584 ;
                      02585 ;=============================================================================
                      02586 ; SSR UPDATE LOOP
                      02587 ;
                      02588 ; Each slice we need to turn on some SSRs and off others.
                      02589 ; We use the SSR_STATE2<SLICE_UPD> flag to indicate that we
                      02590 ; haven't updated the SSR arrays yet in this slice.
                      02591 ;
                      02592 ; *****************************************************************************
                      02593 ; Main SSR update cycle.
                      02594 ;
                      02595 ; This is called repeatedly in the main loop.
                      02596 ; What we do here depends on the flag bits set by the background timing logic.
                      02597 ;
                      02598 ; DIM_START:  All SSRs marked as ON get turned on now
                      02599 ; DIM_END:    All SSRs *not* marked as ON get turned off now; ignore SLICE_UPD
                      02600 ; SLICE_UPD:  All SSRs under dimmer control whose value == CUR_SLICE get turned
                      02601 ;             on now
                      02602 ;
                      02603 ;
0305   0064           02604 UPDATE_SSRS     CLRWDT
0306   1F48           02605                 BTFSS   SSR_STATE2, DIM_START   ; at start of dimmer cycle?
0307   2B19           02606                 GOTO    UPDATE_END
                      02607 ;
                      02608 ; Start of a dimmer cycle (first active slice): turn on everything that is
                      02609 ; supposed to be on all the time (they won't be turned off again at all until
                      02610 ; they are marked as dimmed or off).
                      02611 ;
0308   1348           02612 UPDATE_START    BCF     SSR_STATE2, DIM_START   ; got the flag, thanks...
0309   3018           02613                 MOVLW   .24                     ; Loop over our 24 SSRs...
030A   00F5           02614                 MOVWF   X                       ; X=loop counter 24->0
030B   01F6           02615                 CLRF    Y                       ; Y=SSR index 0->23
030C   0876           02616 UPDATE_ST_LOOP  MOVF    Y, W
030D   234C           02617                 CALL    SSR_SELECT_REG          ; FSR=ssr control register
030E   1F80           02618                 BTFSS   INDF, SSR_ON            ; is this SSR on? (not dimmed)
030F   2B16           02619                 GOTO    UPDATE_ST_NXT           ; else, check next SSR...
0310   2037           02620                 CALL    SSR_Y_TO_PBUF           ; W=buffer for SSR bit
0311   1383           02621                 BCF     STATUS, IRP             ; FSR in bank 0/1
0312   0084           02622                 MOVWF   FSR
0313   2352           02623                 CALL    SSR_Y_CLR_MASK          ; W=bitmask to clear SSR bit
0314   0580           02624                 ANDWF   INDF, F                 ; clear the bit
0315   14C8           02625                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
0316   0AF6           02626 UPDATE_ST_NXT   INCF    Y, F                    ; bump counter and index
0317   0BF5           02627                 DECFSZ  X, F
0318   2B0C           02628                 GOTO    UPDATE_ST_LOOP
                      02629 ;
                      02630 ; End of a dimmer cycle (last active slice): don't bother turning on any
                      02631 ; SSRs with dimmer value zero (duh).  Instead, now is the time to actually
                      02632 ; turn off EVERYTHING which isn't supposed to be on steadily.
                      02633 ;
0319   0064           02634 UPDATE_END      CLRWDT
031A   1EC8           02635                 BTFSS   SSR_STATE2, DIM_END     ; at end of dimmer cycle?
031B   2B2E           02636                 GOTO    UPDATE_SLICE
                      02637 
031C   12C8           02638                 BCF     SSR_STATE2, DIM_END     ; clear flag to do this
031D   13C8           02639                 BCF     SSR_STATE2, SLICE_UPD   ; don't update for slice 0
031E   3018           02640                 MOVLW   .24
031F   00F5           02641                 MOVWF   X
0320   01F6           02642                 CLRF    Y
0321   0876           02643 UPDATE_EN_LOOP  MOVF    Y, W
0322   234C           02644                 CALL    SSR_SELECT_REG          ; FSR=ssr control register
0323   1B80           02645                 BTFSC   INDF, SSR_ON            ; is this SSR not always on?
0324   2B2B           02646                 GOTO    UPDATE_EN_NXT           ; else, check next one...
0325   2037           02647                 CALL    SSR_Y_TO_PBUF           ; W=buffer for SSR bit
0326   1383           02648                 BCF     STATUS, IRP             ; FSR in bank 0/1
0327   0084           02649                 MOVWF   FSR
0328   205D           02650                 CALL    SSR_Y_SET_MASK
0329   0480           02651                 IORWF   INDF, F                 ; set the bit
032A   14C8           02652                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
032B   0AF6           02653 UPDATE_EN_NXT   INCF    Y, F
032C   0BF5           02654                 DECFSZ  X, F
032D   2B21           02655                 GOTO    UPDATE_EN_LOOP
                      02656 ;
                      02657 ; Any active dimmer cycle except the last one: CUR_SLICE holds the slice
                      02658 ; number we're processing, which starts at 63 and counts down to 0.  So
                      02659 ; we turn on any dimmer-controlled SSRs which have dimmer value equal to
                      02660 ; this slice number now.
                      02661 ;
032E   0064           02662 UPDATE_SLICE    CLRWDT
032F   1FC8           02663                 BTFSS   SSR_STATE2, SLICE_UPD   ; are we supposed to update?
0330   2B47           02664                 GOTO    UPDATE_COMMIT           ; no, move along...
                      02665 
0331   13C8           02666                 BCF     SSR_STATE2, SLICE_UPD   ; got it, thanks...
0332   3018           02667                 MOVLW   .24
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0333   00F5           02668                 MOVWF   X
0334   01F6           02669                 CLRF    Y
0335   0876           02670 UPDATE_SL_LOOP  MOVF    Y, W
0336   234C           02671                 CALL    SSR_SELECT_REG
0337   1F00           02672                 BTFSS   INDF, SSRDIM            ; under dimmer control?
0338   2B44           02673                 GOTO    UPDATE_SL_NXT           ; nope, try the next one...
0339   301F           02674                 MOVLW   SSRVAL_MASK
033A   0500           02675                 ANDWF   INDF, W
033B   0245           02676                 SUBWF   CUR_SLICE, W
033C   1D03           02677                 BTFSS   STATUS, Z               ; dimmer level == this slice?
033D   2B44           02678                 GOTO    UPDATE_SL_NXT           ; nope, try the next one...
033E   2037           02679                 CALL    SSR_Y_TO_PBUF
033F   1383           02680                 BCF     STATUS, IRP             ; FSR in bank 0/1
0340   0084           02681                 MOVWF   FSR
0341   2352           02682                 CALL    SSR_Y_CLR_MASK
0342   0580           02683                 ANDWF   INDF, F
0343   14C8           02684                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
0344   0AF6           02685 UPDATE_SL_NXT   INCF    Y, F
0345   0BF5           02686                 DECFSZ  X, F
0346   2B35           02687                 GOTO    UPDATE_SL_LOOP
                      02688 ;
                      02689 ; If any of the above routines were selected to actually do anyting with the
                      02690 ; I/O ports, commit any changes they made at this time.
                      02691 ;
0347   0064           02692 UPDATE_COMMIT   CLRWDT
0348   18C8           02693                 BTFSC   SSR_STATE2, SSRUPD
0349   22F7           02694                 CALL    UPDATE_PORTS
034A   10C8           02695                 BCF     SSR_STATE2, SSRUPD
034B   0008           02696                 RETURN
                      02697 ;
                      02698 ;------------------------------------------------------------------------------
                      02699 ; SSR_SELECT_REG
                      02700 ;   Get SSR buffer address from SSR number in W
                      02701 ;
                      02702 ; Input:  W=SSR (0-23)
                      02703 ; Output: FSR=value register for SSR
                      02704 ;
                      02705 ; Context: Bank 0
                      02706 ;------------------------------------------------------------------------------
034C   0064           02707 SSR_SELECT_REG  CLRWDT
034D   391F           02708                 ANDLW   SSR_DEV_MASK            ; limit to 32
034E   3E20           02709                 ADDLW   SSR00_VAL               ; add offset
034F   0084           02710                 MOVWF   FSR                     ; set as indirect reg
0350   1383           02711                 BCF     STATUS, IRP             ; FSR->Bank{0,1}
0351   0008           02712                 RETURN
                      02713 ;
                      02714 ;------------------------------------------------------------------------------
                      02715 ; SSR_Y_CLR_MASK
                      02716 ;   return inverse bitmask for SSR output in its I/O port
                      02717 ;   If you AND the bitmask with the port's value the channel is turned off.
                      02718 ;   If you want to get the bitmask for turning it on, see SSR_Y_SET_MASK.
                      02719 ;
                      02720 ; Input:    Y=SSR channel (0-23)
                      02721 ; Output:   W=bitmask for CLEARING the bit (AND with current value)
                      02722 ; Context:  Any Bank
                      02723 ;------------------------------------------------------------------------------
                      02724 ;;
0352   205D           02725 SSR_Y_CLR_MASK  CALL    SSR_Y_SET_MASK
0353   3AFF           02726                 XORLW   0xff
0354   0008           02727                 RETURN
                      02728 
                      02729 ;==============================================================================
                      02730 ; Fine.
                      02731 ;==============================================================================
                      02732 
                      02733                 END
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 34


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ACTEN                             00000002
ACTOFF                            00000001
ACT_RX_LEN                        0000003C
ADCON0                            0000001F
ADCON1                            0000009F
ADCON2                            0000009B
ADCS0                             00000006
ADCS1                             00000007
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALL_SSRS_OFF                      000002D3
ASSERT_FAIL                       00000152
ASSERT_PASS                       00000154
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BIT_00                            00000004
BIT_01                            00000003
BIT_02                            00000005
BIT_03                            00000002
BIT_04                            00000000
BIT_05                            00000005
BIT_06                            00000006
BIT_07                            00000001
BIT_08                            00000004
BIT_09                            00000002
BIT_10                            00000003
BIT_11                            00000003
BIT_12                            00000002
BIT_13                            00000004
BIT_14                            00000001
BIT_15                            00000005
BIT_16                            00000000
BIT_17                            00000007
BIT_18                            00000004
BIT_19                            00000001
BIT_20                            00000002
BIT_21                            00000001
BIT_22                            00000003
BIT_23                            00000000
BIT_GRN                           00000000
BIT_RED                           00000002
BIT_TRSEL                         00000005
BIT_YEL                           00000001
BRGH                              00000002
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP3CON                           00000097
CCP3IE                            00000001
CCP3IF                            00000001
CCP3M0                            00000000
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 35


SYMBOL TABLE
  LABEL                             VALUE 

CCP3M1                            00000001
CCP3M2                            00000002
CCP3M3                            00000003
CCP3X                             00000005
CCP3Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CCPR3H                            00000096
CCPR3L                            00000095
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CHS3                              00000001
CIS                               00000003
CKE                               00000006
CKP                               00000004
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             0000009C
CMD_0                             000001B5
CMD_1                             000001B7
CMD_2                             000001B9
CMD_7                             000001BB
CMD_ABORT                         00000241
CMD_ADDR_MASK                     0000000F
CMD_ADMIN                         0000021E
CMD_ADMIN_TABLE                   00000021
CMD_AD_CMD_MASK                   0000000F
CMD_AD_DIS_PRIV                   00000230
CMD_AD_ID_CHK                     00000004
CMD_AD_ID_MASK                    0000000F
CMD_AD_PH_MASK                    0000003F
CMD_AD_SHUTDOWN                   0000021F
CMD_AD_SLAVE                      00000004
CMD_AD_S_GRN                      00000002
CMD_AD_S_HALT                     00000003
CMD_AD_S_RED                      00000000
CMD_AD_S_YEL                      00000001
CMD_BIT                           00000007
CMD_CHAN_MASK                     0000003F
CMD_CHAN_ON                       00000006
CMD_DIM_MASK                      0000001F
CMD_ERROR                         00000240
CMD_MASK                          00000070
CMD_PARSER                        000001A8
CMD_PRIV_ERROR                    00000236
CMD_RESET_STATE                   000001D1
CMD_SET_DEV_ID                    0000021A
CMD_SET_PHASE                     00000216
CMD_SLAVE_CTL                     000001F2
CMD_SLV_HALT                      000001F8
CMD_SLV_LEDS                      00000206
CMD_SLV_LED_R                     0000020E
CMD_SLV_STOP                      00000204
CMD_SW_MASK                       00000007
CMIE                              00000006
CMIF                              00000006
CREN                              00000004
CSRC                              00000007
CUR_PRE                           00000046
CUR_SLICE                         00000045
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            0000009D
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
D                                 00000005
DATA_ADDRESS                      00000005
DATA_BUF                          00000049
DATA_BYTE                         000001BD
DATA_BYTE_TBL                     00000013
DATA_STATE_1                      000001C0
DATA_STATE_2                      000001D5
DATA_STATE_3                      000001DA
DATA_STATE_4                      000001EB
DC                                00000001
DELAY_125MS                       000002C1
DELAY_1S                          000002B3
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 36


SYMBOL TABLE
  LABEL                             VALUE 

DELAY_250MS                       000002BE
DELAY_2S                          000002BB
DELAY_500MS                       000002B7
DELAY_FFLASH                      000002C4
DIM_END                           00000005
DIM_START                         00000006
DRAIN_SIO_IN                      00000195
D_A                               00000005
END_MAIN                          00000170
F                                 00000001
FAULT                             0000028B
FAULT_1                           000001BE
FAULT_HALT                        00000292
FERR                              00000002
FLASH_CT                          0000003F
FLASH_OFF_DELAY                   000002B4
FLASH_ON_DELAY                    000002B8
FLASH_PHASE                       0000029E
FLASH_RED                         0000027C
FLASH_YEL                         0000026D
FLUSH_SIO                         00000171
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GRNBLK                            00000002
GRNEN                             00000003
GRN_BLINK_RATE                    000000FF
GRN_TMR                           00000041
I                                 00000072
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ILLSSR                            00000006
INCYC                             00000007
INDF                              00000000
INIT                              000000BD
INT0IE                            00000004
INT0IF                            00000001
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
INT_ACT                           0000009F
INT_END                           000000B5
INT_ENDSLICE                      000000B4
INT_GRN                           00000099
INT_INT0                          0000008C
INT_NEXTSLICE                     000000AF
INT_PRECYC                        000000A7
INT_RED                           00000094
INT_TMR2                          000000A3
INT_VECTOR                        00000004
INT_YEL                           0000008F
INT_ZC                            000000A0
IOFS                              00000002
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
IRVST                             00000005
ISPINNER                          000002C7
ISP_NEXTJ                         000002CA
ISR                               00000083
J                                 00000073
K                                 00000074
LVDCON                            00000109
LVDEN                             00000004
LVDIE                             00000005
LVDIF                             00000005
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
MAIN_ACT                          0000016C
MAIN_GREEN                        00000158
MAIN_LOOP                         00000155
MAIN_PROCESS                      0000016D
MAIN_RED                          00000167
MAIN_YELLOW                       0000015E
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

MAIN_YEL_PRV                      00000163
MASK_ALL_LEDS                     00000007
MASK_NO_LEDS                      00000000
MASK_RED_YEL                      00000006
MY_SSR                            00000007
NEXT_FLASH_RED                    00000284
NEXT_FLASH_YEL                    00000275
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
PASS_CMD_1                        000001CF
PASS_CMD_2                        000001E9
PASS_DOWN                         00000269
PBUF_00                           0000003A
PBUF_01                           0000003A
PBUF_02                           0000003A
PBUF_03                           0000003A
PBUF_04                           0000003A
PBUF_05                           0000003B
PBUF_06                           0000003B
PBUF_07                           00000039
PBUF_08                           00000038
PBUF_09                           00000039
PBUF_10                           00000038
PBUF_11                           00000039
PBUF_12                           00000038
PBUF_13                           00000039
PBUF_14                           00000038
PBUF_15                           00000039
PBUF_16                           00000038
PBUF_17                           0000003B
PBUF_18                           0000003B
PBUF_19                           0000003A
PBUF_20                           0000003B
PBUF_21                           0000003B
PBUF_22                           0000003B
PBUF_23                           0000003B
PBUF_GRN                          0000003C
PBUF_RED                          0000003C
PBUF_TRSEL                        00000038
PBUF_YEL                          0000003C
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCLATH_TEMP                       00000077
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHASE_OFFSET                      0000003D
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PMADR                             0000010D
PMADRH                            0000010F
PMCON1                            0000018C
PMDATA                            0000010C
PMDATH                            0000010E
POLL_SIO                          0000019C
PORTA                             00000005
PORTA_BUF                         00000038
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

PORTB                             00000006
PORTB_BUF                         00000039
PORTC                             00000007
PORTC_BUF                         0000003A
PORTD                             00000008
PORTD_BUF                         0000003B
PORTE                             00000009
PORTE_BUF                         0000003C
PORT_00                           00000007
PORT_01                           00000007
PORT_02                           00000007
PORT_03                           00000007
PORT_04                           00000007
PORT_05                           00000008
PORT_06                           00000008
PORT_07                           00000006
PORT_08                           00000005
PORT_09                           00000006
PORT_10                           00000005
PORT_11                           00000006
PORT_12                           00000005
PORT_13                           00000006
PORT_14                           00000005
PORT_15                           00000006
PORT_16                           00000005
PORT_17                           00000008
PORT_18                           00000008
PORT_19                           00000007
PORT_20                           00000008
PORT_21                           00000008
PORT_22                           00000008
PORT_23                           00000008
PORT_GRN                          00000009
PORT_LEDS                         00000009
PORT_RED                          00000009
PORT_TRSEL                        00000005
PORT_YEL                          00000009
POST_ASSERTIONS                   00000141
POST_FINAL                        00000123
POST_PHASE_SYNC                   0000011A
POST_ROM_ID                       000000FD
POST_STAGE_1                      00000100
POST_STAGE_2                      00000117
POST_START                        000000E7
PR2                               00000092
PRECYC                            00000006
PRIVEN                            00000000
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
REDEN                             00000005
REDOFF                            00000004
RED_CMDERR_LEN                    000000F0
RED_ORERR_LEN                     00000078
RED_TMR                           00000043
RESET_LEDS_NEXT                   000000DB
RESTART_VECTOR                    00000000
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
RX_BYTE                           00000047
R_W                               00000002
S                                 00000003
SBOREN                            00000002
SCS0                              00000000
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

SCS1                              00000001
SEN                               00000000
SEND_SIO                          00000178
SEND_W                            0000017D
SEND_W_OK                         00000189
SETUP_EEPROM                      000000E6
SETUP_PORTS                       000000C0
SIO_FRAMERR                       00000253
SIO_OVERRUN                       00000249
SLICE_UPD                         00000007
SLV_LED_LEN                       000000F0
SLV_RX_LEN                        0000001E
SLV_TX_LEN                        0000001E
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
SSR00_VAL                         00000020
SSR01_VAL                         00000021
SSR02_VAL                         00000022
SSR03_VAL                         00000023
SSR04_VAL                         00000024
SSR05_VAL                         00000025
SSR06_VAL                         00000026
SSR07_VAL                         00000027
SSR08_VAL                         00000028
SSR09_VAL                         00000029
SSR10_VAL                         0000002A
SSR11_VAL                         0000002B
SSR12_VAL                         0000002C
SSR13_VAL                         0000002D
SSR14_VAL                         0000002E
SSR15_VAL                         0000002F
SSR16_VAL                         00000030
SSR17_VAL                         00000031
SSR18_VAL                         00000032
SSR19_VAL                         00000033
SSR20_VAL                         00000034
SSR21_VAL                         00000035
SSR22_VAL                         00000036
SSR23_VAL                         00000037
SSRDIM                            00000006
SSRUPD                            00000001
SSRVAL_MASK                       0000001F
SSRVAL_RESV                       00000005
SSR_DEV_MASK                      0000001F
SSR_ID                            0000003E
SSR_ID_RESV                       00000005
SSR_ON                            00000007
SSR_SELECT_REG                    0000034C
SSR_STATE                         00000044
SSR_STATE2                        00000048
SSR_STATE3                        0000004B
SSR_STATE3_RES3                   00000003
SSR_STATE3_RES4                   00000004
SSR_STATE3_RES5                   00000005
SSR_STATE3_RES6                   00000006
SSR_STATE3_RES7                   00000007
SSR_STATE_MASK                    00000007
SSR_Y_CLR_MASK                    00000352
SSR_Y_SET_MASK                    0000005D
SSR_Y_TO_PBUF                     00000037
STATE0                            00000000
STATE1                            00000001
STATE2                            00000002
STATE_0_CMD_TBL                   00000005
STATUS                            00000003
STATUS_TEMP                       00000071
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRISD                             00000088
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRISE3                            00000003
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXBUF                             00000050
TXBUF_MASK                        0000000F
TXBUF_QUEUE                       0000004E
TXBUF_SEND                        0000004F
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXQUE                             00000000
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
UPDATE_COMMIT                     00000347
UPDATE_END                        00000319
UPDATE_EN_LOOP                    00000321
UPDATE_EN_NXT                     0000032B
UPDATE_PORTS                      000002F7
UPDATE_SLICE                      0000032E
UPDATE_SL_LOOP                    00000335
UPDATE_SL_NXT                     00000344
UPDATE_SSRS                       00000305
UPDATE_START                      00000308
UPDATE_ST_LOOP                    0000030C
UPDATE_ST_NXT                     00000316
VCFG0                             00000004
VCFG1                             00000005
W                                 00000000
WCOL                              00000007
WDTCON                            00000105
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
W_TEMP                            00000070
MPASM  5.06.4               48CTL-SLAVE-777.ASM   11-19-2007  19:25:11         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

X                                 00000075
XLATE_SSR_ID                      00000254
Y                                 00000076
YELEN                             00000004
YELOFF                            00000003
YEL_CMDERR_LEN                    000000F0
YEL_TMR                           00000042
Z                                 00000002
_BOREN_0                          00003FBF
_BOREN_1                          00003FFF
_BORSEN_0                         00003FBF
_BORSEN_1                         00003FFF
_CCP2_RB3                         00002FFF
_CCP2_RC1                         00003FFF
_CONFIG1                          00002007
_CONFIG2                          00002008
_CP_ALL                           00001FFF
_CP_OFF                           00003FFF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_EXTCLK                           00003FEF
_EXTRC_CLKOUT                     00003FFF
_EXTRC_IO                         00003FFE
_FCMEN_OFF                        00003FFE
_FCMEN_ON                         00003FFF
_HS_OSC                           00003FEE
_IESO_OFF                         00003FFD
_IESO_ON                          00003FFF
_INTRC_CLKOUT                     00003FFD
_INTRC_IO                         00003FFC
_LP_OSC                           00003FEC
_MCLR_OFF                         00003FDF
_MCLR_ON                          00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_VBOR_2_0                         00003FFF
_VBOR_2_7                         00003F7F
_VBOR_4_2                         00003EFF
_VBOR_4_5                         00003E7F
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FED
__16F777                          00000001


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXX----------- ---------------- ----------------
2000 : -------XX------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   850
Program Memory Words Free:  7342


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    17 reported,     0 suppressed

