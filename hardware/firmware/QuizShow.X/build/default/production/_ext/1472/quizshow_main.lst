MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Based on Lumos controller firmware 3.0, PWD-2 firmware (particularly 
                      00017 ; readerboard controls), and previous Quizshow hardware designs.  All of the
                      00018 ; above are copyright (c) Steven L. Willoughby, All Rights Reserved.
                      00019 ;
                      00020 ; ************                                                           /\
                      00021 ; * WARNING! *    EXPERIMENTAL DESIGN FOR EDUCATIONAL PURPOSES          /  \
                      00022 ; * WARNING! *                USE AT YOUR OWN RISK!                    / !  \
                      00023 ; ************                                                        /______\
                      00024 ; 
                      00025 ; PLEASE READ AND BE SURE YOU UNDERSTAND THE FOLLOWING SAFETY WARNINGS:
                      00026 ;
                      00027 ; THIS FIRMWARE AND THE ACCOMPANYING HARDWARE AND CONTROLLING SOFTWARE ARE
                      00028 ; EXPERIMENTAL "HOBBYIST" DESIGNS AND ARE NOT INTENDED FOR GENERAL CONSUMER USE
                      00029 ; OR FOR ANY APPLICATION WHERE THERE IS ANY POSSIBILITY OF RISK OF INJURY,
                      00030 ; PROPERTY DAMAGE, OR ANY OTHER SITUATION WHERE ANY FAILURE OF THE FIRMWARE,
                      00031 ; SOFTWARE AND/OR HARDWARE COULD RESULT IN HARM TO ANYONE OR ANYTHING.  
                      00032 ;
                      00033 ; THIS FIRMWARE, SOFTWARE, AND/OR HARDWARE ARE NOT INTENDED NOR RECOMMENDED 
                      00034 ; FOR APPLICATIONS INVOLVING LIFE SUPPORT OR SAFETY-CRITICAL SYSTEMS, RUNNING 
                      00035 ; FIREWORKS/PYROTECHNIC DISPLAYS, ETC.  
                      00036 ;
                      00037 ; BY OBTAINING AND USING THIS FIRMWARE, AND/OR ACCOMPANYING HARDWARE AND/OR 
                      00038 ; CONTROLLING SOFTWARE, YOU AGREE TO THESE CONDITIONS AND THAT TO THE FULLEST 
                      00039 ; EXTENT OF APPLICABLE LAW, THE ABOVE-LISTED ITEMS AND ALL ACCOMPANYING 
                      00040 ; DOCUMENTATION AND OTHER MATERIALS ARE PROVIDED TO YOU AS-IS, WITHOUT WARRANTY 
                      00041 ; OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
                      00042 ; WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE.  YOU 
                      00043 ; FURTHER AGREE TO DEFEND, INDEMNIFY, AND HOLD BLAMELESS, THE AUTHOR, STEVEN 
                      00044 ; L. Willoughby AND ANY OF HIS AGENTS AND ASSOCIATES ASSISTING WITH THIS WORK, 
                      00045 ; FROM ANY DAMAGES DIRECT OR INCIDENTAL ARISING FROM THE USE OF, OR INABILITY 
                      00046 ; TO USE, THE ABOVE-LISTED PRODUCTS.
                      00047 ; 
                      00048 ;
                      00049 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00050 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00051 ; information.
                      00052 ;
                      00053 ; Based on previous works by the same author, some of which are released
                      00054 ; under the Open Software License, version 3.0, which portions are available
                      00055 ; separately for free download.
                      00056 ;
                      00057 ; -*- -*- -* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00058 ;
                      00059 ; Main implementation module.
                      00060 ;
                      00061 #include "quizshow_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
                      00028 ;
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; CONFIGURATION OPTIONS
                      00032 ;==============================================================================
                      00033 ;
                      00034 ; Note: set LUMOS_CHIP_TYPE to LUMOS_CHIP_QSCC or _QSRC in lumos_config.inc
                      00035 ;
                      00062         RADIX           DEC
                      00063 ;#include "quizshow_init.inc"
                      00064 ;#include "serial-io.inc"
                      00065 
                      00066 ; Works on Software Alchemy Quiz Show QSCC and QSRC boards revision 4.0.
                      00067 ;
                      00068 ; N.B. THE BOARD SELECT BITS IN LUMOS_CONFIG.INC MUST BE SELECTED
                      00069 ; FOR THE TARGET CONFIGURATION!  EACH ROM IS DIFFERENT!
                      00070 ;
                      00071 ; Target Microcontroller is PIC18F4685, Q=40MHz (100nS instruction cycle)
                      00072 ;
                      00073 ; Serial control (RS-485) at 19.2kbps by default.
                      00074 ; Configurable from 300 to 250000 baud.
                      00075 ;
                      00076 ; OPTION BUTTON:
                      00077 ; XXX The Lumos controllers have an OPTION button which starts configuration
                      00078 ; XXX mode.  QS*C boards don't have those, so instead boot the unit while
                      00079 ; XXX holding down the A and D buttons (QSCC) or the L2 and L0 buttons (QSRC)
                      00080 ; XXX to enter configuration mode.
                      00081 ; 
                      00082 ;=============================================================================
                      00083 ; IMPLEMENTATION NOTES
                      00084 ;-----------------------------------------------------------------------------
                      00085 ;
                      00086 ; The QUIZSHOW controller firmware consists of a number of somewhat 
                      00087 ; independent subsystems:
                      00088 ; 
                      00089 ; LUMOS
                      00090 ;       The QSCC and QSRC boards are also Lumos SSR controllers which implement
                      00091 ;       most of the standard Lumos commands.  The various lights used by the
                      00092 ;       quiz show are mapped to Lumos channels.  The Lumos firmware is included
                      00093 ;       into the quizshow firmware, with some special switches enabled to adapt
                      00094 ;       it to this hardware.
                      00095 ;
                      00096 ; START
                      00097 ;       Initializes the microcontroller, starts up the required peripherals,
                      00098 ;       and enters the main loop
                      00099 ;
                      00100 ; SIO
                      00101 ;       Handles all serial I/O operations in the background (interrupt-driven)
                      00102 ;       so the rest of the code only needs to be concerned with higher-level
                      00103 ;       reads and writes.  Buffers hold 256 characters each of input and output.
                      00104 ;
                      00105 ; ISR
                      00106 ;       The interrupt service routine manages a set of counters and timers:
                      00107 ;       1. We run a 120 Hz timer which provides timing for the dimmers.
                      00108 ;
                      00109 ; MAIN_LOOP
                      00110 ;       Manages the display of the readerboards.
                      00111 ;       Updates the status of the SSR lines if it's time to do so
                      00112 ;       Receives a character from the serial line if one's waiting
                      00113 ;
                      00114 ; INTERPRETER
                      00115 ;       When a byte is received on the serial line, it is processed by
                      00116 ;       a small state machine.  The current state is held in YY_STATE (named
                      00117 ;       in honor of the venerable yacc).
                      00118 ;
                      00119 ;-----------------------------------------------------------------------------
                      00120 ; Command Protocol:
                      00121 ;                     ___7______6______5______4______3______2______1______0__
                      00122 ; Command Byte:      |      |                    |                           |
                      00123 ;                    |   1  |    Command code    |   Target device address   |
                      00124 ;                    |______|______|______|______|______|______|______|______|
                      00125 ;
                      00126 ; Any byte with its MSB set is the beginning of a command.  If the target 
                      00127 ; device matches this unit's address, the state machine kicks into gear and
                      00128 ; processes the command (which may require some following data bytes, all
                      00129 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00130 ; byte.
                      00131 ;
                      00132 ;                     ___7______6______5______4______3______2______1______0__
                      00133 ; Extended Command:  |      |                    |                           |
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00134 ;                    |   1  |          7         |   Target device address   |
                      00135 ;                    |______|______|______|______|______|______|______|______|
                      00136 ;                    |      |                                                |
                      00137 ;                    |   0  |                  Command code                  |
                      00138 ;                    |______|______|______|______|______|______|______|______|
                      00139 ;
                      00140 ; The most common commands are given ID 0-6 so that they may be sent in as few
                      00141 ; bytes as possible (as few as a single byte), but we have more than 8 commands
                      00142 ; so we have an extended code.  If the command code is 7 (all bits set), then
                      00143 ; the following byte contains the actual command code which may be any value
                      00144 ; from 0-127.
                      00145 ;
                      00146 ;                     ___7______6______5______4______3______2______1______0__
                      00147 ; Data Byte:         |      |                                                |
                      00148 ;                    |   0  |                      Data                      |
                      00149 ;                    |______|______|______|______|______|______|______|______|
                      00150 ;
                      00151 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00152 ; in the middle of interpreting a multi-byte command, in which case it's interpreted
                      00153 ; appropriately as data supporting the command being executed.  This way, other
                      00154 ; devices which share the same protocol format but not necessarily a compatible
                      00155 ; command set may safely know which bytes can be ignored without knowing the
                      00156 ; details of each other's command sets.
                      00157 ;
                      00158 ; Two special bytes are recognized:
                      00159 ;
                      00160 ;                     ___7______6______5______4______3______2______1______0__
                      00161 ; MSB Escape:        |      |                                                |
                      00162 ;                    |   0  |   1      1      1      1      1      1      0  |
                      00163 ;                    |______|______|______|______|______|______|______|______|
                      00164 ;
                      00165 ; If this ($7E) byte is received, it is ignored but the next byte received will
                      00166 ; have its MSB bit set.  This allows data bytes to have full 8-bit values without
                      00167 ; violating the communication protocol described above.  That second byte is not
                      00168 ; interpreted further.
                      00169 ;
                      00170 ;                     ___7______6______5______4______3______2______1______0__
                      00171 ; Literal Escape     |      |                                                |
                      00172 ;                    |   0  |   1      1      1      1      1      1      1  |
                      00173 ;                    |______|______|______|______|______|______|______|______|
                      00174 ;
                      00175 ; If this ($7F) byte is received, it is ignored but the next byte is accepted
                      00176 ; as-is without further interpretation.
                      00177 ;
                      00178 ; Specific Example Cases of interest:
                      00179 ;       Sequence    Resulting byte
                      00180 ;       $7E $7E     $FE
                      00181 ;       $7E $7F     $FF
                      00182 ;       $7F $7E     $7E
                      00183 ;       $7F $7F     $7F
                      00184 ;
                      00185 ; A command byte (received with MSB already set) trumps all of the above.  It is
                      00186 ; taken as the start of a command and the escape sequence in progress is canceled.
                      00187 ;
                      00188 ; Commands recognized (L indicates Lumos commands):
                      00189 ;
                      00190 ;   COMMAND  CODE  BITS
                      00191 ;L  BLACKOUT 0     1000aaaa
                      00192 ;L  ON_OFF   1     1001aaaa 0scccccc            Turn channel <c> on (<s>=1) or off (<s>=0)
                      00193 ;L  SET_LVL  2     1010aaaa 0hcccccc 0vvvvvvv    Set dimmer level <v>:<h> on channel <c>
                      00194 ;L  BULK_UPD 3     1011aaaa 0mcccccc ...                Bulk-upload multiple channel levels
                      00195 ;L  RAMP_LVL 4     1100aaaa Cdcccccc ...         Ramp channel <c> smoothly up (<d>=1) or down (<C>=1 cyc
                            le)
                      00196 ;   SCAN_ST  5     1101aaaa                      Start scanning buttons
                      00197 ;   SCAN_Q   6     1110aaaa 0000000s             Read scan results / Stop
                      00198 ;   EXTENDED 7     1111aaaa                      Extended command, decoded further in next byte
                      00199 ;L@ SLEEP    7+0   1111aaaa 00000000 01011010 01011010  Put unit to sleep
                      00200 ;L@ WAKE     7+1   1111aaaa 00000001 01011010 01011010  Take unit out of sleep mode
                      00201 ;L  SHUTDOWN 7+2   1111aaaa 00000010 01011000 01011001  Take unit completely offline
                      00202 ;L< QUERY    7+3   1111aaaa 00000011 00100100 01010100  Report device status
                      00203 ;X! DEF_SEQ  7+4   1111aaaa 00000100 0iiiiiii ...       Define sequence <i>
                      00204 ;X  EXEC_SEQ 7+5   1111aaaa 00000101 0iiiiiii           Execute sequence <i> (0=stop)
                      00205 ;X! CLR_SEQ  7+8   1111aaaa 00001000 01000011 01000001  Erase all stored sequences
                      00206 ;L  XPRIV    7+9   1111aaaa 00001001                    Forbid priviliged mode
                      00207 ;            7+10  1111aaaa 00001010                    Reserved for future use
                      00208 ;             :        :        :                           :     :     :    : 
                      00209 ;            7+28  1111aaaa 00011100                    Reserved for future use                 
                      00210 ;   OUT_SCAN 7+29  1111aaaa 00011101                    SCAN_Q reply
                      00211 ;L  OUT_NAK  7+30  1111aaaa 00011110                    QUERY NAK                               
                      00212 ;L  OUT_RPLY 7+31  1111aaaa 00011111 ...                Reply to QUERY command_________________ 
                      00213 ;   IC_***** 7+32  11110000 00100000                    Reserved (Lumos internal)
                      00214 ;             :        :        :                           :     :   :      :         ////////
                      00215 ;            7+63  11110000 00111111                    Reserved for new commands______////////
                      00216 ;*! CF_PHASE 7+64  1111aaaa 010000pp 0ppppppp 01010000 01001111   Phase offset=<p>       CONFIG
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00217 ;*! CF_ADDR  7+96  1111aaaa 0110AAAA 01001001 01000001 01000100   Change address to <A>  ||||||
                      00218 ;*  CF_NOPRV 7+112 1111aaaa 01110000                              Leave privileged mode  ||||||
                      00219 ;*  CF_CONF  7+113 1111aaaa 01110001 ...                          Configure device       ||||||
                      00220 ;*! CF_BAUD  7+114 1111aaaa 01110010 0bbbbbbb 00100110            Set baud rate to <b>   ||||||
                      00221 ;*! CF_RESET 7+115 1111aaaa 01110011 00100100 01110010            Reset factory defaults ||||||
                      00222 ;*  CF_XPRIV 7+116 1111aaaa 01110100                              Forbid priviliged mode ||||||
                      00223 ;*           7+117 1111aaaa 01110101                     Reserved for future config cmd  ||||||
                      00224 ;*                     :        :                            :     :     :      :    :   ||||||
                      00225 ;*           7+127 1111aaaa 01111111                     Reserved for future config cmd__||||||
                      00226 ;
                      00227 ; Legend:
                      00228 ;   X Not yet implemented; planned for future; subject to change
                      00229 ;   @ Unit may automatically take this action
                      00230 ;   * Privileged configuration-mode command
                      00231 ;   ! Permanent effect (written to EEPROM)
                      00232 ;   < Command generates response data (back to host)
                      00233 ;   a Device address (0-15)
                      00234 ;   b Baud rate code (0-127), but units may only define a small subset of those values
                      00235 ;   c Output channel (0-63, but unit may only support a lesser number)
                      00236 ;   d Direction: up (<d>=1) or down (<d>=0).
                      00237 ;   h High-res level bit (LSB of 8-bit value when in high-res mode)
                      00238 ;   m Mode (1=high-res, 0=low-res)
                      00239 ;   n Number of items affected
                      00240 ;   s Output state: 0=off, 1=on
                      00241 ;   v Value of dimmer (0-127) (most significant 7 bits of dimmer value)
                      00242 ;
                      00243 ; Payloads for many-byte commands
                      00244 ;
                      00245 ; BULK_UPD:  00cccccc 0nnnnnnn v0 v1 v2 ... vn 01010101
                      00246 ;       Updates <n>+1 channels starting at <c>, giving <v> values for each as per SET_LVL.
                      00247 ;
                      00248 ; RAMP_LVL:  Cdcccccc 0sssssss 0ttttttt   Channel <c> up/down in <s>+1 steps every <t>+1/120 sec
                      00249 ;
                      00250 ; DEF_SEQ:   0iiiiiii 0nnnnnnn (...)*<n+1> 01000100 01110011  Define sequence <i> of length <n+1>
                      00251 ;                                                             0 is boot sequence, 1-63 is EEPROM
                      00252 ;                                                             64-127 is RAM.
                      00253 ;
                      00254 ; CF_BAUD:   Values recognized:
                      00255 ;       00000000 ($00)      300 baud
                      00256 ;       00000001 ($01)      600
                      00257 ;       00000010 ($02)    1,200
                      00258 ;       00000011 ($03)    2,400
                      00259 ;       00000100 ($04)    4,800
                      00260 ;       00000101 ($05)    9,600
                      00261 ;       00000110 ($06)   19,200
                      00262 ;       00000111 ($07)   38,400
                      00263 ;       00001000 ($08)   57,600
                      00264 ;       00001001 ($09)  115,200
                      00265 ;       00001010 ($0A)  250,000
                      00266 ;
                      00267 ;
                      00268 ; Response packet from QUERY command (37 bytes):
                      00269 ; note the ROM version byte also serves to indicate the format of the response
                      00270 ; bytes which follow.  If the query packet format changes, the ROM version byte
                      00271 ; MUST also change.
                      00272 ;
                      00273 ;    1111aaaa 00011111 00110000 0ABCDdcc 0ccccccc 0ABCDqsf 0ABCDXpp 0ppppppp 
                      00274 ;        \__/           \_/\__/  \__/|\_________/  \__/|||  \__/|\_________/  
                      00275 ;          |             maj |     | |   |           | |||   |  |      `--phase
                      00276 ;          `--reporting    minor   | |   `--DMX      | |||   |  `--config locked?
                      00277 ;              unit addr  rom      | |      channel  | |||   `--active
                      00278 ;                         vers.    | |               | ||`--mem full?
                      00279 ;                                  | `--DMX mode?    | |`--sleeping?
                      00280 ;                                  `--configured     | `--config mode?
                      00281 ;                                                    `--masks
                      00282 ;
                      00283 ;    0eeeeeee 0eeeeeee 0MMMMMMM 0MMMMMMM 0X0iiiii 0xxxxxxx 
                      00284 ;     \______________/  \______________/  | \___/  \_____/
                      00285 ;        `--EEPROM free    `--RAM free    |   |       `--executing seq.
                      00286 ;                                         |   `--device model
                      00287 ;                                         `--seq running?
                      00288 ;
                      00289 ;    0owE0000 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for A
                      00290 ;    0owE0001 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for B
                      00291 ;    0owE0010 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for C
                      00292 ;    0owE0011 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for D
                      00293 ;
                      00294 ;    0fffffff 0fffffff 000000pp 0ppppppp ssssssss ssssssss 00110011
                      00295 ;    \______/ \______/       \_________/ \______S/N______/
                      00296 ;        |        |               `--phase (channels 24-47)
                      00297 ;        |        `--fault code (channels 24-47)
                      00298 ;        `--fault code (channels 0-23)
                      00299 ;
                      00300 ; Response to SCAN_Q query commands:
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00301 ; Note that the ROM version dictates these changes too, so if this format
                      00302 ; changes the ROM version MUST change (as reported in the QUERY response
                      00303 ; above).
                      00304 ;                               31       23       15       7      0
                      00305 ;    1111aaaa 00011101 0R0nnnnn tttttttt tttttttt tttttttt tttttttt ...
                      00306 ;        \__/           | \___/ \_________________________________/
                      00307 ;          |            |   |                    | (x n)
                      00308 ;          `--reporting | number of    0=not pressed yet
                      00309 ;              unit addr| buttons     >0=microseconds elapsed before press
                      00310 ;                       | reported
                      00311 ;                       0=scanning stopped
                      00312 ;                       1=scanner is still running
                      00313 ;                      
                      00314 ;    01010001 00101010 
                      00315 ;
                      00316 ; QSCC sends 6 buttons: X, L, A, B, C, D.
                      00317 ; QSRC sends 10 buttons: X0, L0, X1, L1, X2, L2, X3, L3, X4, L4.  
                      00318 ;
                      00319 ; Also note that the controller is allowed to send OUT_NAK packets to the
                      00320 ; host in response to QUERY commands.  This does not complete the exchange,
                      00321 ; but serves to ask the host to continue waiting if the device won't be able
                      00322 ; to reply to the QUERY for long enough that it risks a timeout.  The host
                      00323 ; is under no obligation to respect the OUT_NAK packets.
                      00324 ;
                      00325 ;   1111aaaa 00011110 
                      00326 ;
                      00327 ; A controller MUST never send data except in response to an explicit
                      00328 ; request from the host.  Controllers MUST immediately cease sending
                      00329 ; data upon receiving any bytes on the network (this indicates that
                      00330 ; the host is no longer waiting for a reply but has moved on to something
                      00331 ; else or is querying another device now).  No further data may be sent
                      00332 ; until again explicitly asked for.
                      00333 ;
                      00334 ;
                      00335 ;                     _______________________________________________________
                      00336 ; Channel ID:        |      |      |                                         |
                      00337 ;                    |  0   | ON   |               Channel ID                |
                      00338 ;                    |______|______|______|______|______|______|______|______|
                      00339 ; The ON bit <6> determines whether the channel is being turned on (1) or 
                      00340 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00341 ; setting the channel to a specific dimmer value.
                      00342 ;
                      00343 ;=============================================================================
                      00344 ; HARDWARE DESCRIPTION
                      00345 ;-----------------------------------------------------------------------------
                      00346 ;
                      00347 ; The controllers use the PIC18F4685 microcontroller, and have identical
                      00348 ; circuit boards, although the assignment of I/O pins is very different
                      00349 ; between them.
                      00350 ;
                      00351 ;  PIC18F4685 Microcontroller I/O pin assignments:
                      00352 ;
                      00353 ; QSRC    QSCC           ________   _________         QSCC    QSRC 
                      00354 ; BOARD:  BOARD:        |o       \_/         |        BOARD:  BOARD:
                      00355 ; /RESET  /RESET -->  1 | /MCLR RE3  PGD RB7 | 40 --> /AL     /X1R   
                      00356 ; /L1     /L     -->  2 | RA0        PGC RB6 | 39 --> /BL     /X1G    
                      00357 ; /X2     /X     -->  3 | RA1        PGM RB5 | 38 --> /CL     /X1B   
                      00358 ; /L0     /D     -->  4 | RA2            RB4 | 37 --> /DL     /L1R  
                      00359 ; /X0     /C     -->  5 | RA3            RB3 | 36 --> /FR     /X2R  
                      00360 ; /X2     /B     -->  6 | RA4       INT2 RB2 | 35 --> /FG     /X2G   
                      00361 ; /L2     /A     -->  7 | RA5       INT1 RB1 | 34 --> /FB     /X2B    
                      00362 ; /L2R    /LY    <--  8 | RE0       INT0 RB0 | 33 --> /FW     /X4R     
                      00363 ; /L3R    /LG    <--  9 | RE1            VDD | 32 --- +5V       
                      00364 ; /L0R    /LR    <-- 10 | RE2            VSS | 31 --- GND      
                      00365 ;            +5V --- 11 | VDD            RD7 | 30 --> D7      /X3R  
                      00366 ;            GND --- 12 | VSS            RD6 | 29 --> D6      /X3G  
                      00367 ;           xtal --- 13 | OSC            RD5 | 28 --> D5      /X3B  
                      00368 ;             +----- 14 | OSC            RD4 | 27 --- D4 ->   /X4 <-
                      00369 ; /X0B    /XB    <-- 15 | RC0         RX RC7 | 26 <-- Serial RxD
                      00370 ; /X0G    /XG    <-- 16 | RC1         TX RC6 | 25 --> Serial TxD
                      00371 ; /X0R    /XR    <-- 17 | RC2            RC5 | 24 --- PS0 ->  /L4 <-
                      00372 ; T/R     T/R    <-- 18 | RC3            RC4 | 23 --- PS1 ->  /X3 <- 
                      00373 ; /L3 ->  D0 <-  --- 19 | RD0            RD3 | 22 --> D3      /X4G  
                      00374 ; /X4B    D1     <-- 20 | RD1            RD2 | 21 --> D2      /L4R  
                      00375 ;                       |____________________|
                      00376 ;
                      00377 ;
                      00378 ; ========================================================================
                      00379 ; PROGRAM MEMORY MAP
                      00380 ; ______________________________________________________________________________
                      00381 ;
                      00382 ; 14K50 4685    _________________ ___
                      00383 ; $00000 $00000 | RESET Vector    | V_RST
                      00384 ; $00007 $00007 |_________________|___
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00385 ; $00008 $00008 | High Int Vector | V_INT_H
                      00386 ; $00017 $00017 |_________________|___
                      00387 ; $00018 $00018 | Low Int Vector  | V_INT_L
                      00388 ; $0001F $0001F |_________________|
                      00389 ; $00020 $00020 |/////////////////|
                      00390 ; $000FF $000FF |/////////////////|___
                      00391 ; $00100 $00100 | Boot code       | _BOOT
                      00392 ;               |.................|___
                      00393 ;               | Interrupt hand- | _INT
                      00394 ;               |  lers           |      
                      00395 ;               |/////////////////|
                      00396 ; $007FF $007FF |/////////////////|___
                      00397 ; $00800 $00800 | Mainline code   | _MAIN
                      00398 ;               |.................|___
                      00399 ;           ??? | Device init     | LUMOS_CODE_INIT
                      00400 ;               |_________________|___
                      00401 ;           ??? | Serial I/O      | _SIO_CODE
                      00402 ;               | Module          |
                      00403 ;               |_________________|___
                      00404 ;               |/////////////////|
                      00405 ;               |/////////////////|
                      00406 ;               |/////////////////|
                      00407 ;               |/////////////////|
                      00408 ;               |/////////////////|___
                      00409 ; $02E00 $14000 | EEPROM defaults | _MAIN_EEPROM_TBL
                      00410 ; $02EFF $14FFF |_________________|___
                      00411 ; $02F00 $15000 |Serial I/O Mod   | _SIO_LOOKUP_TABLES
                      00412 ;               |lookup tables    |
                      00413 ;        $150FF |_________________|___
                      00414 ;        $15100 |                 |
                      00415 ;               |                 |
                      00416 ; $02FEF $16FEF |_________________|___
                      00417 ; $02FF0 $16FF0 |System Mfg Data  | _SYSTEM_MFG_DATA
                      00418 ; $02FFF $16FFF |_________________|___
                      00419 ; $03000 $17000 |                 | 
                      00420 ; $03FFF $17FFF |_________________|___
                      00421 ;               |/////////////////|
                      00422 ;               |/////////////////|
                      00423 ;$1FFFFF$1FFFFF |/////////////////|___
                      00424 ;
                      00425 ;
                      00426 ; ========================================================================
                      00427 ; DATA MEMORY MAP (4685)
                      00428 ;
                      00429 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00430 ; $000 | global state,   | _ADATA            BANK 0
                      00431 ; $05F | ISR data, etc.  |                (ACCESS AREA)
                      00432 ;      |.................|...............................
                      00433 ; $060 |                 |                   
                      00434 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00435 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00436 ;      | ring buffer     |
                      00437 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00438 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00439 ;      | ring buffer     |
                      00440 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00441 ; $300 | Serial I/O mod  | _SIO_VAR_DATA     BANK 3
                      00442 ;      | variable space  |
                      00443 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00444 ; $400 | SSR state data  | _SSR_DATA         BANK 4
                      00445 ;      |                 |
                      00446 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00447 ; $500 | Parser buffer   | _MAINDATA         BANK 5
                      00448 ;      |.................|
                      00449 ; $5?? |                 |
                      00450 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00451 ; $600 | Stored sequences| _SEQ_DATA         BANK 6
                      00452 ;      | (1792 bytes)    |
                      00453 ;              .
                      00454 ;              .                 
                      00455 ;              .                
                      00456 ;      |                 |
                      00457 ;      |                 |
                      00458 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00459 ; $D00 |                 |                   BANK D
                      00460 ;      | CAN special     |
                      00461 ;      | function        |___ ___ ___ ___ ___ ___ ___ ___
                      00462 ; $E00 | registers       |                   BANK E
                      00463 ;      | (not used for   |
                      00464 ;      | Lumos)          |___ ___ ___ ___ ___ ___ ___ ___
                      00465 ; $F00 |                 |                   BANK F
                      00466 ;      |                 |
                      00467 ; $F5F |.................|...............................
                      00468 ; $F60 | Special Function|                (ACCESS AREA)
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00469 ;      | (device) regis- |
                      00470 ;      | ters            |
                      00471 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00472 ;
                      00473 ; ========================================================================
                      00474 ; EEPROM MEMORY
                      00475 ;
                      00476 ;
                      00477 ;       ______________            ______________ 
                      00478 ; $000 |_0xFF_________|     $010 | Saved        |
                      00479 ; $001 |_Baud_Rate____|     $011 | Sequence     |
                      00480 ; $002 |_Device_ID____|     $012 | Storage      |
                      00481 ; $003 | Phase     MSB|     $013 |       |      |
                      00482 ; $004 |_Offset____LSB|     $014 |       |      |
                      00483 ; $005 |_DMX_Slot__MSB|     $015 |       |      |
                      00484 ; $006 |_DMX_Slot__LSB|       .          .
                      00485 ; $007 |_Sensor_cfg___|       .          .
                      00486 ; $008 |______________|       .          .
                      00487 ; $009 |______________|     $3F9 |       |      |
                      00488 ; $00A |______________|     $3FA |       |      |
                      00489 ; $00B |______________|     $3FB | (1008 |      |
                      00490 ; $00C |______________|     $3FC | bytes)|      |
                      00491 ; $00D |______________|     $3FD |       |      |
                      00492 ; $00E |______________|     $3FE |       |      |
                      00493 ; $00F |_0x42_________|     $3FF |_______V______|
                      00494 ;
                      00495 ;
                      00496 
                      00497 ; ========================================================================
                      00498 ; DEVICES USED
                      00499 ;
                      00500 ; TMR0 L  120 Hz interrupt source (for boards without zero-crossing detector)
                      00501 ; TMR1
                      00502 ; TMR2 L  Dimmer slice timer (1/260 of a 120 Hz half-cycle)
                      00503 ; TMR3 L  Break detector for DMX reception
                      00504 ; UART L  SIO module
                      00505 ;=============================================================================
                      00506 ;
                      00507 ;------------------------------------------------------------------------------
                      00508 ; Significant Registers (ACCESS BANK)
                      00509 ;------------------------------------------------------------------------------
                      00510 ;
                      00511 ;                     ___7______6______5______4______3______2______1______0__
                      00512 ; ISR_TMPL_STATUS    |                                                       |
                      00513 ;                    | Temporary storage for STATUS register in low-pri ISR  |
                      00514 ;                    |______|______|______|______|______|______|______|______|
                      00515 ; ISR_TMPL_BSR       |                                                       |
                      00516 ;                    | Temporary storage for BSR register in low-priority ISR|
                      00517 ;                    |______|______|______|______|______|______|______|______|
                      00518 ; ISR_TMPL_WREG      |                                                       |
                      00519 ;                    | Temporary storage for W register in low-priority ISR  |
                      00520 ;                    |______|______|______|______|______|______|______|______|
                      00521 ; MY_ADDRESS         |                           |                           |
                      00522 ;                    |                           |       Unit address        |
                      00523 ;                    |______|______|______|______|______|______|______|______|
                      00524 ; PHASE_OFFSETH      |                                                       |
                      00525 ;                    |               Phase offset value (MSB)                |
                      00526 ;                    |______|______|______|______|______|______|______|______|
                      00527 ; PHASE_OFFSETL      |                                                       |
                      00528 ;                    |               Phase offset value (LSB)                |
                      00529 ;                    |______|______|______|______|______|______|______|______|
                      00530 ; SSR_STATE          |      |      |SLICE |PRIV_ |SLEEP |DRAIN |PRE_  |TEST_ |
                      00531 ;                    |INCYC |PRECYC| _UPD | MODE |_MODE |_TR   |PRIV  |MODE  |
                      00532 ;                    |______|______|______|______|______|______|______|______|
                      00533 ; SSR_STATE2         |TEST_ |TEST_ |TEST_ |ALL_  |PRIV_ |INHIBI|MSB_  |LITER |
                      00534 ;                    |PAUSE |UPD   |BUTTON|OFF   |FORBID|T_OUTP|ESC   |AL_ESC|
                      00535 ;                    |______|______|______|______|______|UT____|______|______|
                      00536 ; DMX_SLOTH          |DMX_EN|DMX_  |DMX_  |                           |DMX Sl|
                      00537 ;                    |      |SPEED |FRAME |                           |ot MSB|
                      00538 ;                    |______|______|______|______|______|______|______|______|
                      00539 ; DMX_SLOTL          |                                                       |
                      00540 ;                    |       Starting DMX Slot Number - 1 (low 8 bits)       |
                      00541 ;                    |______|______|______|______|______|______|______|______|
                      00542 ; YY_STATE           |                                                       |
                      00543 ;                    |                      Parser State                     |
                      00544 ;                    |______|______|______|______|______|______|______|______|
                      00545 ; YY_COMMAND         |                                                       |
                      00546 ;                    |                      Command Code                     |
                      00547 ;                    |______|______|______|______|______|______|______|______|
                      00548 ; YY_CMD_FLAGS       |                                                       |
                      00549 ;                    |               Command-specific Flag Bits              |
                      00550 ;                    |______|______|______|______|______|______|______|______|
                      00551 ; YY_DATA            |                                                       |
                      00552 ;                    |                      Command Data                     |
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00553 ;                    |______|______|______|______|______|______|______|______|
                      00554 ; YY_LOOKAHEAD_MAX   |                                                       |
                      00555 ;                    |               Maximum length for look-ahead           |
                      00556 ;                    |______|______|______|______|______|______|______|______|
                      00557 ; YY_LOOK_FOR        |                                                       |
                      00558 ;                    |               Sentinel value to search for            |
                      00559 ;                    |______|______|______|______|______|______|______|______|
                      00560 ; YY_BUF_IDX         |                                                       |
                      00561 ;                    |     Offset in YY_BUFFER where we will write next      |
                      00562 ;                    |______|______|______|______|______|______|______|______|
                      00563 ; YY_NEXT_STATE      |                                                       |
                      00564 ;                    |     State to transition to when YY_LOOK_FOR is found  |
                      00565 ;                    |______|______|______|______|______|______|______|______|
                      00566 ; YY_YY              |                                                       |
                      00567 ;                    |     General-purpose storage for use inside commands   |
                      00568 ;                    |______|______|______|______|______|______|______|______|
                      00569 ; LAST_ERROR         |                                                       |
                      00570 ;                    |  Last error code encountered (cleared when reported)  |
                      00571 ;                    |______|______|______|______|______|______|______|______|
                      00572 ; CUR_PREH           |                                                       |
                      00573 ;                    |         Pre-cycle count-down ticks left (MSB)         |
                      00574 ;                    |______|______|______|______|______|______|______|______|
                      00575 ; CUR_PRE            |                                                       |
                      00576 ;                    |         Pre-cycle count-down ticks left (LSB)         |
                      00577 ;                    |______|______|______|______|______|______|______|______|
                      00578 ; CUR_SLICE          |                                                       |
                      00579 ;                    |      Slice number within active portion of cycle      |
                      00580 ;                    |______|______|______|______|______|______|______|______|
                      00581 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      00582 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      00583 ;                    |______|______|______|______|______|______|______|______|
                      00584 ; OPTION_DEBOUNCE    |                                                       |
                      00585 ;                    |      Counter to debounce OPTION button presses        |
                      00586 ;                    |______|______|______|______|______|______|______|______|
                      00587 ; OPTION_HOLD        |                                                       |
                      00588 ;                    |      Counter for how long OPTION button is held       |
                      00589 ;                    |______|______|______|______|______|______|______|______|
                      00590 ; TEST_CYCLE         |                                                       |
                      00591 ;                    |        Count-down of ZC cycles until next step        |
                      00592 ;                    |______|______|______|______|______|______|______|______|
                      00593 ; TEST_SSR           |             |                                         |
                      00594 ;                    |             |  current SSR being tested               |
                      00595 ;                    |______|______|______|______|______|______|______|______|
                      00596 ; AUTO_OFF_CTRH      |                                                       |
                      00597 ;                    |         countdown register until auto-power-off (MSB) |
                      00598 ;                    |______|______|______|______|______|______|______|______|
                      00599 ; AUTO_OFF_CTRL      |                                                       |
                      00600 ;                    |         countdown register until auto-power-off (LSB) |
                      00601 ;                    |______|______|______|______|______|______|______|______|
                      00602 ; I                  |                                                       |
                      00603 ;                    |      General-purpose local counter variable           |
                      00604 ;                    |______|______|______|______|______|______|______|______|
                      00605 ; J                  |                                                       |
                      00606 ;                    |      General-purpose local counter variable           |
                      00607 ;                    |______|______|______|______|______|______|______|______|
                      00608 ; K                  |                                                       |
                      00609 ;                    |      General-purpose local counter variable           |
                      00610 ;                    |______|______|______|______|______|______|______|______|
                      00611 ; KK                 |                                                       |
                      00612 ;                    |      General-purpose local counter variable           |
                      00613 ;                    |______|______|______|______|______|______|______|______|
                      00614 ; TR_I               |                                                       |
                      00615 ;                    |      T/R delay timer delay counter                    |
                      00616 ;                    |______|______|______|______|______|______|______|______|
                      00617 ;
                      00618 ;
                      00619 ;------------------------------------------------------------------------------
                      00620 ; (SSR_DATA_BANK)
                      00621 ;------------------------------------------------------------------------------
                      00622 ;
                      00623 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      00624 ;
                      00625 ;                     ___7______6______5______4______3______2______1______0__
                      00626 ; SSR_00_VALUE       |                                                       |
                      00627 ;                    | Brightness value of SSR #00 (00=off, ... FF=fully on) |
                      00628 ;                    |______|______|______|______|______|______|______|______|
                      00629 ;                    |                                                       |
                      00630 ;                    | Brightness value of SSR #01 (00=off, ... FF=fully on) |
                      00631 ;                    |______|______|______|______|______|______|______|______|
                      00632 ;                                                .
                      00633 ;                                                .
                      00634 ;                     ___________________________.___________________________
                      00635 ;                    |                                                       |
                      00636 ;                    | Brightness value of SSR #23 (00=off, ... FF=fully on) |
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00637 ;                    |______|______|______|______|______|______|______|______|
                      00638 ;                    |                                                       |
                      00639 ;                    | Brightness value of Green   (00=off, ... FF=fully on) |
                      00640 ;                    |______|______|______|______|______|______|______|______|
                      00641 ;                    |                                                       |
                      00642 ;                    | Brightness value of Yellow  (00=off, ... FF=fully on) |
                      00643 ;                    |______|______|______|______|______|______|______|______|
                      00644 ;                    |                                                       |
                      00645 ;                    | Brightness value of Red     (00=off, ... FF=fully on) |
                      00646 ;                    |______|______|______|______|______|______|______|______|
                      00647 ;                    | IF MASTER/STANDALONE:                                 |
                      00648 ;                    | Brightness value of Active  (00=off, ... FF=fully on) |
                      00649 ;                    |______|______|______|______|______|______|______|______|
                      00650 ; SSR_00_FLAGS       | FADE | FADE | FADE_|MAX_OF|      |      |      |      |
                      00651 ;                    | _UP  | _DOWN| CYCLE|F_TIME|      |      |      |      |
                      00652 ;                    |______|______|______|______|______|______|______|______|
                      00653 ;                                                .
                      00654 ;                                                .
                      00655 ;                     ___________________________.___________________________
                      00656 ; SSR_00_STEP        |                                                       |
                      00657 ;                    |          Brightness increment (0..255)                |
                      00658 ;                    |______|______|______|______|______|______|______|______|
                      00659 ;                                                .
                      00660 ;                                                .
                      00661 ;                     ___________________________.___________________________
                      00662 ; SSR_00_SPEED       |                                                       |
                      00663 ;                    |          Cycles between each step (0..255)            |
                      00664 ;                    |______|______|______|______|______|______|______|______|
                      00665 ;                                                .
                      00666 ;                                                .
                      00667 ;                     ___________________________.___________________________
                      00668 ; SSR_00_COUNTER     |                                                       |
                      00669 ;                    |          Cycles until next step (0..255)              |
                      00670 ;                    |______|______|______|______|______|______|______|______|
                      00671 ;                                                .
                      00672 ;                                                .
                      00673 ;                                                .                           
                      00674 ;
  0000                00675         GLOBAL  QUIZSHOW_INIT
                      00676 
                      00677 _QUIZSHOW_CODE  CODE
000000                00678 QUIZSHOW_INIT:
000000 0004           00679         CLRWDT
                      00680         END
MPASM 5.53              ../QUIZSHOW_MAIN.ASM   5-26-2014  22:35:00         PAGE 10


SYMBOL TABLE
  LABEL                             VALUE 

QUIZSHOW_INIT                     00000000
__18F4685                         00000001

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

