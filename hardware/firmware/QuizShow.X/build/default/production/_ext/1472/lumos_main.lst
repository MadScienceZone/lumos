MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ; OSCCON:SCS=00;HS;
                      00002 ; vim:set syntax=pic ts=8:
                      00003 ;
                      00004                 LIST n=90
                      00005 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00006 ;@@                                                                         @@
                      00007 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00008 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.1   @@ 
                      00009 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00010 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00011 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00012 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00013 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00014 ;@@                                                                         @@
                      00015 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00016 ;
                      00017 ; ************                                                           /\
                      00018 ; * WARNING! *    EXPERIMENTAL DESIGN FOR EDUCATIONAL PURPOSES          /  \
                      00019 ; * WARNING! *                USE AT YOUR OWN RISK!                    / !  \
                      00020 ; ************                                                        /______\
                      00021 ; 
                      00022 ; PLEASE READ AND BE SURE YOU UNDERSTAND THE FOLLOWING SAFETY WARNINGS:
                      00023 ;
                      00024 ; THIS FIRMWARE AND THE ACCOMPANYING HARDWARE AND CONTROLLING SOFTWARE ARE
                      00025 ; EXPERIMENTAL "HOBBYIST" DESIGNS AND ARE NOT INTENDED FOR GENERAL CONSUMER USE
                      00026 ; OR FOR ANY APPLICATION WHERE THERE IS ANY POSSIBILITY OF RISK OF INJURY,
                      00027 ; PROPERTY DAMAGE, OR ANY OTHER SITUATION WHERE ANY FAILURE OF THE FIRMWARE,
                      00028 ; SOFTWARE AND/OR HARDWARE COULD RESULT IN HARM TO ANYONE OR ANYTHING.  
                      00029 ;
                      00030 ; THIS FIRMWARE, SOFTWARE, AND/OR HARDWARE ARE NOT INTENDED NOR RECOMMENDED 
                      00031 ; FOR APPLICATIONS INVOLVING LIFE SUPPORT OR SAFETY-CRITICAL SYSTEMS, RUNNING 
                      00032 ; FIREWORKS/PYROTECHNIC DISPLAYS, ETC.  
                      00033 ;
                      00034 ; BY OBTAINING AND USING THIS FIRMWARE, AND/OR ACCOMPANYING HARDWARE AND/OR 
                      00035 ; CONTROLLING SOFTWARE, YOU AGREE TO THESE CONDITIONS AND THAT TO THE FULLEST 
                      00036 ; EXTENT OF APPLICABLE LAW, THE ABOVE-LISTED ITEMS AND ALL ACCOMPANYING 
                      00037 ; DOCUMENTATION AND OTHER MATERIALS ARE PROVIDED TO YOU AS-IS, WITHOUT WARRANTY 
                      00038 ; OF ANY KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
                      00039 ; WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE.  YOU 
                      00040 ; FURTHER AGREE TO DEFEND, INDEMNIFY, AND HOLD BLAMELESS, THE AUTHOR, STEVEN 
                      00041 ; L. Willoughby AND ANY OF HIS AGENTS AND ASSOCIATES ASSISTING WITH THIS WORK, 
                      00042 ; FROM ANY DAMAGES DIRECT OR INCIDENTAL ARISING FROM THE USE OF, OR INABILITY 
                      00043 ; TO USE, THE ABOVE-LISTED PRODUCTS.
                      00044 ; 
                      00045 ;
                      00046 ; Copyright (c) 2012, 2013, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00047 ; All Rights Reserved.  Released under the terms and conditions of the 
                      00048 ; Open Software License, version 3.0.
                      00049 ;
                      00050 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00051 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00052 ;
                      00053 ; -*- -*- -* -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00054 ;
                      00055 ; Main implementation module.
                      00056 ;
                      00057 #include "lumos_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  
                      00018 ; Released under the terms and conditions of the Open Software
                      00019 ; License, version 3.0.
                      00020 ;
                      00021 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00022 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028 ;
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; CONFIGURATION OPTIONS
                      00032 ;==============================================================================
                      00033 #ifndef LUMOS_CONFIG_INC
                      00034 #define LUMOS_CONFIG_INC
                      00035 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00036 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00037 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00038 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00039 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00040 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00041 ;
                      00042 ; Un-comment one of these to select board type for this ROM image:
                      00043 ;
                      00044 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00045 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00046 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00047 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00048 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00049 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00050 ;
                      00051 ;
                      00052 ;
                      00053 #define LUMOS_ZC                0x55
                      00054 #define LUMOS_INTERNAL          0x58
                      00055 
                      00056  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00057   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00058  ELSE
                      00059   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00060    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00061   ELSE
                      00062    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00063   ENDIF
                      00064  ENDIF
                      00065  
                      00066  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00067   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00068  ENDIF
                      00069 
                      00070 
                      00071  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00072   #define ROLE_MASTER       (1)
                      00073   #define ROLE_SLAVE        (0)
                      00074   #define ROLE_STANDALONE   (0)
                      00075   #define NUM_CHANNELS      (.48)
                      00076   #define QSCC_PORT         (0)
                      00077  ELSE
                      00078   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00079    #define ROLE_MASTER      (0)
                      00080    #define ROLE_SLAVE       (1)
                      00081    #define ROLE_STANDALONE  (0)
                      00082    #define NUM_CHANNELS     (.48)
                      00083    #define QSCC_PORT        (0)
                      00084   ELSE
                      00085    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00086     #define ROLE_MASTER     (0)
                      00087     #define ROLE_SLAVE      (0)
                      00088     #define ROLE_STANDALONE (1)
                      00089     #define NUM_CHANNELS    (.24)
                      00090     #define QSCC_PORT       (0)
                      00091    ELSE
                      00092     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00093      #define ROLE_MASTER     (0)
                      00094      #define ROLE_SLAVE      (0)
                      00095      #define ROLE_STANDALONE (1)
                      00096      #define NUM_CHANNELS    (.4)
                      00097      #define QSCC_PORT       (0)
                      00098     ELSE
                      00099      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00100       #define ROLE_MASTER     (0)
                      00101       #define ROLE_SLAVE      (0)
                      00102       #define ROLE_STANDALONE (1)
                      00103       #define NUM_CHANNELS    (.14)
                      00104       #define QSCC_PORT       (1)
                      00105      ELSE
                      00106       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00107        #define ROLE_MASTER     (0)
                      00108        #define ROLE_SLAVE      (0)
                      00109        #define ROLE_STANDALONE (1)
                      00110        #define NUM_CHANNELS    (.20)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00111        #define QSCC_PORT       (1)
                      00112       ELSE
                      00113        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00114       ENDIF
                      00115      ENDIF
                      00116     ENDIF
                      00117    ENDIF
                      00118   ENDIF
                      00119  ENDIF
                      00120 
                      00121 #define LUMOS_ARCH_4685  (0x4685)
                      00122 #define LUMOS_ARCH_14K50 (0x1450)
                      00123 
                      00124  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00125   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00126   PROCESSOR 18F4685
                      00127   #include <p18f4685.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F4685 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      05130         LIST
                      00128  ELSE
                      00129   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00130    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00131    PROCESSOR 18F14K50
                      00132    #include <p18f14k50.inc>
                      00133   ELSE
                      00134    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00135   ENDIF
                      00136  ENDIF
                      00137 
                      00138 ;
                      00139 ; The following public symbols can be used after this file is
                      00140 ; included (and this file should be included everywhere before
                      00141 ; anything else is included, and in lieu of PROCESSOR directives
                      00142 ; or #includes which bring in processor-specific bits--this file
                      00143 ; will do that for you):
                      00144 ;
                      00145 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00146 ;                   of the target chip will be and what its particular 
                      00147 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00148 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00149 ;
                      00150 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00151 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00152 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00153 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00154 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00155 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00156 ;
                      00157 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00158 ;                   slice timer sync pulse is coming from:
                      00159 ;
                      00160 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00161 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00162 ;
                      00163 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00164 ;                   is targeted, strictly to determine chip-specific details,
                      00165 ;                   not how Lumos is using it.
                      00166 ;
                      00167 ;       "14K50"         - The PIC18F14K50
                      00168 ;       "4685"          - The PIC18F4685
                      00169 ;
                      00170 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00171 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00172 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00173 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00174 #endif
                      00058         RADIX   DEC
                      00059 #include "lumos_init.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All Rights
                      00017 ; Reserved.  Released under the terms and conditions of the Open Software
                      00018 ; License, version 3.0.
                      00019 ;
                      00020 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00021 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00022 ;
                      00023 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00024 ;
                      00025 ; Device initialization code.  See lumos_main.asm for hardware implementation
                      00026 ; details.
                      00027 ;
                      00028 #include "lumos_config.inc"
                      00175 ; vim:set syntax=pic ts=8:
                      00176 ;
                      00177                 LIST n=90
                      00178 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00179 ;@@                                                                         @@
                      00180 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00181 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00182 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00183 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00184 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00185 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00186 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00187 ;@@                                                                         @@
                      00188 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00189 ;
                      00190 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00191 ; All Rights Reserved.  
                      00192 ; Released under the terms and conditions of the Open Software
                      00193 ; License, version 3.0.
                      00194 ;
                      00195 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00196 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00197 ;
                      00198 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00199 ;
                      00200 ; Configuration options.  Set these as desired and then re-assemble the
                      00201 ; code to produce the desired version of the ROM.
                      00202 ;
                      00203 ; 
                      00204 ;==============================================================================
                      00205 ; CONFIGURATION OPTIONS
                      00206 ;==============================================================================
                      00207 #ifndef LUMOS_CONFIG_INC
                      00208 #define LUMOS_CONFIG_INC
                      00209 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00210 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00211 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00212 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00213 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00214 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00215 ;
                      00216 ; Un-comment one of these to select board type for this ROM image:
                      00217 ;
                      00218 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00219 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00220 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00221 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00222 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00223 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00224 ;
                      00225 ;
                      00226 ;
                      00227 #define LUMOS_ZC                0x55
                      00228 #define LUMOS_INTERNAL          0x58
                      00229 
                      00230  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00231   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00232  ELSE
                      00233   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00234    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00235   ELSE
                      00236    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00237   ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238  ENDIF
                      00239  
                      00240  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00241   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00242  ENDIF
                      00243 
                      00244 
                      00245  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00246   #define ROLE_MASTER       (1)
                      00247   #define ROLE_SLAVE        (0)
                      00248   #define ROLE_STANDALONE   (0)
                      00249   #define NUM_CHANNELS      (.48)
                      00250   #define QSCC_PORT         (0)
                      00251  ELSE
                      00252   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00253    #define ROLE_MASTER      (0)
                      00254    #define ROLE_SLAVE       (1)
                      00255    #define ROLE_STANDALONE  (0)
                      00256    #define NUM_CHANNELS     (.48)
                      00257    #define QSCC_PORT        (0)
                      00258   ELSE
                      00259    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00260     #define ROLE_MASTER     (0)
                      00261     #define ROLE_SLAVE      (0)
                      00262     #define ROLE_STANDALONE (1)
                      00263     #define NUM_CHANNELS    (.24)
                      00264     #define QSCC_PORT       (0)
                      00265    ELSE
                      00266     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00267      #define ROLE_MASTER     (0)
                      00268      #define ROLE_SLAVE      (0)
                      00269      #define ROLE_STANDALONE (1)
                      00270      #define NUM_CHANNELS    (.4)
                      00271      #define QSCC_PORT       (0)
                      00272     ELSE
                      00273      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00274       #define ROLE_MASTER     (0)
                      00275       #define ROLE_SLAVE      (0)
                      00276       #define ROLE_STANDALONE (1)
                      00277       #define NUM_CHANNELS    (.14)
                      00278       #define QSCC_PORT       (1)
                      00279      ELSE
                      00280       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00281        #define ROLE_MASTER     (0)
                      00282        #define ROLE_SLAVE      (0)
                      00283        #define ROLE_STANDALONE (1)
                      00284        #define NUM_CHANNELS    (.20)
                      00285        #define QSCC_PORT       (1)
                      00286       ELSE
                      00287        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00288       ENDIF
                      00289      ENDIF
                      00290     ENDIF
                      00291    ENDIF
                      00292   ENDIF
                      00293  ENDIF
                      00294 
                      00295 #define LUMOS_ARCH_4685  (0x4685)
                      00296 #define LUMOS_ARCH_14K50 (0x1450)
                      00297 
                      00298  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00299   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00300   PROCESSOR 18F4685
                      00301   #include <p18f4685.inc>
                      00302  ELSE
                      00303   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00304    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00305    PROCESSOR 18F14K50
                      00306    #include <p18f14k50.inc>
                      00307   ELSE
                      00308    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00309   ENDIF
                      00310  ENDIF
                      00311 
                      00312 ;
                      00313 ; The following public symbols can be used after this file is
                      00314 ; included (and this file should be included everywhere before
                      00315 ; anything else is included, and in lieu of PROCESSOR directives
                      00316 ; or #includes which bring in processor-specific bits--this file
                      00317 ; will do that for you):
                      00318 ;
                      00319 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00320 ;                   of the target chip will be and what its particular 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00321 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00322 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00323 ;
                      00324 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00325 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00326 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00327 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00328 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00329 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00330 ;
                      00331 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00332 ;                   slice timer sync pulse is coming from:
                      00333 ;
                      00334 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00335 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00336 ;
                      00337 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
                      00338 ;                   is targeted, strictly to determine chip-specific details,
                      00339 ;                   not how Lumos is using it.
                      00340 ;
                      00341 ;       "14K50"         - The PIC18F14K50
                      00342 ;       "4685"          - The PIC18F4685
                      00343 ;
                      00344 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00345 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00346 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00347 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00348 #endif
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; PUBLIC ENTRY POINTS
                      00032 ;==============================================================================
  0000                00033         EXTERN  LUMOS_INIT      ; Call this to set up the hardware before use.
                      00034 ;
                      00035 ;
                      00060 #include "serial-io.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST n=90
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; General serial console I/O handling
                      00022 ;
                      00023 #include "serial-io-bits.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002                 LIST n=90
                      00003 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00004 ;@@                                                                         @@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @@@@@  @@@@   @@@   @@@   @              @@@      @   @@@        @@
                      00007 ;@@ @   @  @      @   @   @   @   @  @               @       @  @   @       @@
                      00008 ;@@ @      @      @   @   @   @   @  @               @      @   @   @       @@
                      00009 ;@@  @@@   @@@@   @@@@    @   @@@@@  @      @@@@@    @     @    @   @       @@
                      00010 ;@@     @  @      @ @     @   @   @  @               @    @     @   @       @@
                      00011 ;@@ @   @  @      @  @    @   @   @  @               @   @      @   @       @@
                      00012 ;@@  @@@   @@@@@  @   @  @@@  @   @  @@@@@          @@@  @       @@@        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@ Copyright (c) 2012 by Steven L. Willoughby, Aloha, Oregon, USA.  All    @@
                      00015 ;@@ Rights Reserved.                                                        @@
                      00016 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00017 ;
                      00018 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007, 2008, 
                      00019 ; 2009, Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00020 ;
                      00021 ; serial io (SIO) module bit definitions, included by caller and the module
                      00022 ;
                      00023 #include "serial-io-user.inc"
                      00001 ;
                      00002 ; To use the serial I/O module, you need to edit this
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ; include file to suit your application.
                      00004 ;
                      00005 #include "lumos_config.inc"
                      00349 ; vim:set syntax=pic ts=8:
                      00350 ;
                      00351                 LIST n=90
                      00352 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00353 ;@@                                                                         @@
                      00354 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00355 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00356 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00357 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00358 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00359 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00360 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00361 ;@@                                                                         @@
                      00362 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00363 ;
                      00364 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00365 ; All Rights Reserved.  
                      00366 ; Released under the terms and conditions of the Open Software
                      00367 ; License, version 3.0.
                      00368 ;
                      00369 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00370 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00371 ;
                      00372 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00373 ;
                      00374 ; Configuration options.  Set these as desired and then re-assemble the
                      00375 ; code to produce the desired version of the ROM.
                      00376 ;
                      00377 ; 
                      00378 ;==============================================================================
                      00379 ; CONFIGURATION OPTIONS
                      00380 ;==============================================================================
                      00381 #ifndef LUMOS_CONFIG_INC
                      00382 #define LUMOS_CONFIG_INC
                      00383 #define LUMOS_CHIP_MASTER       0x41    ; 48-channel master CPU
                      00384 #define LUMOS_CHIP_SLAVE        0x42    ; 48-channel slave CPU
                      00385 #define LUMOS_CHIP_STANDALONE   0x43    ; 24-channel CPU
                      00386 #define LUMOS_CHIP_4CHANNEL     0x44    ; 4-channel CPU
                      00387 #define LUMOS_CHIP_QSCC         0x45    ; Private code; custom hardware
                      00388 #define LUMOS_CHIP_QSRC         0x46    ; Private code; custom hardware
                      00389 ;
                      00390 ; Un-comment one of these to select board type for this ROM image:
                      00391 ;
                      00392 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_MASTER
                      00393 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_SLAVE
                      00394 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_STANDALONE
                      00395 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_4CHANNEL
                      00396 ;#define LUMOS_CHIP_TYPE                LUMOS_CHIP_QSCC
                      00397 #define LUMOS_CHIP_TYPE         LUMOS_CHIP_QSRC
                      00398 ;
                      00399 ;
                      00400 ;
                      00401 #define LUMOS_ZC                0x55
                      00402 #define LUMOS_INTERNAL          0x58
                      00403 
                      00404  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00405   #define LUMOS_SLICE_TIMER LUMOS_ZC
                      00406  ELSE
                      00407   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL || LUMOS_CHIP_TY
                            PE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00408    #define LUMOS_SLICE_TIMER LUMOS_INTERNAL
                      00409   ELSE
                      00410    ERROR "LUMOS_CHIP_TYPE must be set to MASTER, SLAVE, 4CHANNEL, or STANDALONE"
                      00411   ENDIF
                      00412  ENDIF
                      00413  
                      00414  IF LUMOS_SLICE_TIMER != LUMOS_ZC && LUMOS_SLICE_TIMER != LUMOS_INTERNAL
                      00415   ERROR "LUMOS_SLICE_TIMER must be set to ZC or INTERNAL"
                      00416  ENDIF
                      00417 
                      00418 
                      00419  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      00420   #define ROLE_MASTER       (1)
                      00421   #define ROLE_SLAVE        (0)
                      00422   #define ROLE_STANDALONE   (0)
                      00423   #define NUM_CHANNELS      (.48)
                      00424   #define QSCC_PORT         (0)
                      00425  ELSE
                      00426   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      00427    #define ROLE_MASTER      (0)
                      00428    #define ROLE_SLAVE       (1)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00429    #define ROLE_STANDALONE  (0)
                      00430    #define NUM_CHANNELS     (.48)
                      00431    #define QSCC_PORT        (0)
                      00432   ELSE
                      00433    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      00434     #define ROLE_MASTER     (0)
                      00435     #define ROLE_SLAVE      (0)
                      00436     #define ROLE_STANDALONE (1)
                      00437     #define NUM_CHANNELS    (.24)
                      00438     #define QSCC_PORT       (0)
                      00439    ELSE
                      00440     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00441      #define ROLE_MASTER     (0)
                      00442      #define ROLE_SLAVE      (0)
                      00443      #define ROLE_STANDALONE (1)
                      00444      #define NUM_CHANNELS    (.4)
                      00445      #define QSCC_PORT       (0)
                      00446     ELSE
                      00447      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00448       #define ROLE_MASTER     (0)
                      00449       #define ROLE_SLAVE      (0)
                      00450       #define ROLE_STANDALONE (1)
                      00451       #define NUM_CHANNELS    (.14)
                      00452       #define QSCC_PORT       (1)
                      00453      ELSE
                      00454       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00455        #define ROLE_MASTER     (0)
                      00456        #define ROLE_SLAVE      (0)
                      00457        #define ROLE_STANDALONE (1)
                      00458        #define NUM_CHANNELS    (.20)
                      00459        #define QSCC_PORT       (1)
                      00460       ELSE
                      00461        ERROR "Invalid LUMOS_CHIP_TYPE"
                      00462       ENDIF
                      00463      ENDIF
                      00464     ENDIF
                      00465    ENDIF
                      00466   ENDIF
                      00467  ENDIF
                      00468 
                      00469 #define LUMOS_ARCH_4685  (0x4685)
                      00470 #define LUMOS_ARCH_14K50 (0x1450)
                      00471 
                      00472  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER || LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE || LUMOS_CHIP_TYPE == LU
                            MOS_CHIP_STANDALONE || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00473   #define LUMOS_ARCH LUMOS_ARCH_4685
                      00474   PROCESSOR 18F4685
                      00475   #include <p18f4685.inc>
                      00476  ELSE
                      00477   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      00478    #define LUMOS_ARCH LUMOS_ARCH_14K50
                      00479    PROCESSOR 18F14K50
                      00480    #include <p18f14k50.inc>
                      00481   ELSE
                      00482    ERROR "Invalid LUMOS_CHIP_TYPE"
                      00483   ENDIF
                      00484  ENDIF
                      00485 
                      00486 ;
                      00487 ; The following public symbols can be used after this file is
                      00488 ; included (and this file should be included everywhere before
                      00489 ; anything else is included, and in lieu of PROCESSOR directives
                      00490 ; or #includes which bring in processor-specific bits--this file
                      00491 ; will do that for you):
                      00492 ;
                      00493 ; LUMOS_CHIP_TYPE:  Will be one of the following, to show what the intent
                      00494 ;                   of the target chip will be and what its particular 
                      00495 ;                   I/O pin assignments are, role in the overall circuit, etc.
                      00496 ;                   (use the ROLE_* values where possible, though, in your logic)
                      00497 ;
                      00498 ;       LUMOS_CHIP_MASTER       - 48-channel (2-CPU) controller, master CPU
                      00499 ;       LUMOS_CHIP_SLAVE        - 48-channel (2-CPU) controller, slave CPU
                      00500 ;       LUMOS_CHIP_STANDALONE   - 24-channel (1-CPU) controller, sole CPU
                      00501 ;       LUMOS_CHIP_4CHANNEL     - 4-channel  (1-CPU) controller, sole CPU
                      00502 ;       LUMOS_CHIP_QSCC         - private configuration for custom hardware
                      00503 ;       LUMOS_CHIP_QSRC         - private configuration for custom hardware
                      00504 ;
                      00505 ; LUMOS_SLICE_TIMER: Will be one of the following, to specify where the PWM
                      00506 ;                   slice timer sync pulse is coming from:
                      00507 ;
                      00508 ;       LUMOS_ZC        - Hardware zero-crossing detector to PIC interrupt pin
                      00509 ;       LUMOS_INTERNAL  - Internal timing system (using PIC timer module)
                      00510 ;
                      00511 ; LUMOS_ARCH:       Will be one of the following, to show what PIC device
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00512 ;                   is targeted, strictly to determine chip-specific details,
                      00513 ;                   not how Lumos is using it.
                      00514 ;
                      00515 ;       "14K50"         - The PIC18F14K50
                      00516 ;       "4685"          - The PIC18F4685
                      00517 ;
                      00518 ; ROLE_MASTER           - (bool) true if this chip is the master in master/slave arrangement
                      00519 ; ROLE_SLAVE            - (bool) true if this chip is the slave in master/slave arrangement
                      00520 ; ROLE_STANDALONE       - (bool) true if this is the only chip, must run entire board function
                      00521 ; NUM_CHANNELS          - (int) number of output SSR channels
                      00522 #endif
                      00006 
                      00007                         IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000100            00008 SIO_TX_BUFFER_START      EQU    0x100   ; Starting address of 256-byte Tx buffer*
  00000200            00009 SIO_RX_BUFFER_START      EQU    0x200   ; Starting address of 256-byte Rx buffer*
  00000300            00010 SIO_DATA_START           EQU    0x300   ; Starting address for SIO module variable storage
  00015000            00011 SIO_TABLE_START          EQU    0x15000 ; Starting ROM address for SIO module tables*
                      00012                         ELSE
                      00013                          IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00014 SIO_TX_BUFFER_START       EQU   0x100   ; Starting address of 256-byte Tx buffer*
                      00015 SIO_RX_BUFFER_START       EQU   0x200   ; Starting address of 256-byte Rx buffer*
                      00016 SIO_DATA_START            EQU   0x0E4   ; Starting address for SIO module variable storage
                      00017 SIO_TABLE_START           EQU   0x2F00  ; Starting ROM address for SIO module tables*
                      00018                          ELSE
                      00019                           ERROR "Invalid architecture switch in serial-io-user.inc"
                      00020                          ENDIF
                      00021                         ENDIF
                      00022 ;
                      00023 ; * must be aligned to the start of a 256-byte bank.
                      00024 ;
                      00024 ;       
                      00025 ;                    bit 7      6      5      4      3      2      1      0
                      00026 ;                     _______________________________________________________
                      00027 ; +$00 SIO_STATUS    |      |      |SIO_  |SIO_  |RXDATA|TXDATA|RXDATA|TXDATA|
                      00028 ;                    |      |      | FERR | ORUN |_FULL |_FULL |_QUEUE|_QUEUE|
                      00029 ;                    |______|______|______|______|______|______|______|______|
                      00030 ;
  00000000            00031 TXDATA_QUEUE    EQU     0       ; Tx data waiting in buffer now to be sent
  00000001            00032 RXDATA_QUEUE    EQU     1       ; Rx data waiting in buffer to be retrieved
  00000002            00033 TXDATA_FULL     EQU     2       ; Tx buffer full
  00000003            00034 RXDATA_FULL     EQU     3       ; Rx buffer full
  00000004            00035 SIO_ORUN        EQU     4       ; I/O Error: incoming data overrun  (caller clears)
  00000005            00036 SIO_FERR        EQU     5       ; I/O Error: break/framing error received  (caller clears)
                      00037 ;
                      00038 ; Baud rate settings
                      00039 ;
  00000000            00040 SIO_300         EQU     0x00
  00000001            00041 SIO_600         EQU     0x01
  00000002            00042 SIO_1200        EQU     0x02
  00000003            00043 SIO_2400        EQU     0x03
  00000004            00044 SIO_4800        EQU     0x04
  00000005            00045 SIO_9600        EQU     0x05
  00000006            00046 SIO_19200       EQU     0x06
  00000007            00047 SIO_38400       EQU     0x07
  00000008            00048 SIO_57600       EQU     0x08
  00000009            00049 SIO_115200      EQU     0x09
  0000000A            00050 SIO_250000      EQU     0x0A
                      00024 ; 
                      00025 ;==============================================================================
                      00026 ; PUBLIC ENTRY POINTS
                      00027 ;==============================================================================
                      00028 ;
  0000                00029         EXTERN  SIO_INIT        ; Call this to set up the module before use.
  0000                00030         EXTERN  SIO_RECV        ; Call from ISR when a byte is received.
  0000                00031         EXTERN  SIO_SEND        ; Call from ISR when clear to send next byte.
  0000                00032         EXTERN  SIO_ECHO        ; Print char in SIO_OUTPUT in printable form.**
  0000                00033         EXTERN  SIO_ECHO_W      ; Print char in WREG in printable form.* **
  0000                00034         EXTERN  SIO_WRITE       ; Print char in SIO_OUTPUT in raw form.
  0000                00035         EXTERN  SIO_WRITE_W     ; Print char in WREG in raw form.*
  0000                00036         EXTERN  SIO_PUTCHAR     ; Blocking form of SIO_WRITE.**
  0000                00037         EXTERN  SIO_PUTCHAR_W   ; Blocking form of SIO_WRITE_W.* **
  0000                00038         EXTERN  SIO_READ        ; Read a character to SIO_INPUT.
  0000                00039         EXTERN  SIO_READ_W      ; Read a character to SIO_INPUT and WREG.
  0000                00040         EXTERN  SIO_GETCHAR     ; Blocking form of SIO_READ.**
  0000                00041         EXTERN  SIO_GETCHAR_W   ; Blocking form of SIO_READ_W.**
  0000                00042         EXTERN  SIO_NEWLINE     ; Print a carriage return/line feed.**
  0000                00043         EXTERN  SIO_PRINT_HEX   ; Print value in SIO_OUTPUT as hex byte.**
  0000                00044         EXTERN  SIO_PRINT_HEX_W ; Print value in SIO_OUTPUT as hex byte.* **
  0000                00045         EXTERN  B32__BIN2BCD    ; B32__BIN[4] -> B32__BCD_ASC[5]; big-endian
  0000                00046         EXTERN  B32__BCD2ASCII  ; B32__BCD_ASC[5] -> B32__BCD_ASC[10]
  0000                00047         EXTERN  SIO_SET_BAUD_W  ; Set baud rate from code in W (See serial-io-bits.inc)
  0000                00048         EXTERN  SIO_FLUSH_INPUT ; Clear input buffer; discards any unread received data
  0000                00049         EXTERN  SIO_FLUSH_OUTPUT; Clear output buffer; discards any unsent data
                      00050 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051 ; *Also overwrites SIO_OUTPUT or SIO_INPUT.
                      00052 ; **Blocks execution until device/buffer ready.
                      00053 ;
                      00054 ; The SIO_READ functions are non-blocking, in case you need non-blocking I/O,
                      00055 ; although a better approach would be to check SIO_STATUS<RXDATA_QUEUE> to see
                      00056 ; if there's data queued up waiting to be read before calling SIO_READ.
                      00057 ; Alternatively the SIO_GETCHAR functions always block to wait for data to be
                      00058 ; available.  The SIO_PUTCHAR, SIO_NEWLINE, and SIO_ECHO functions always block 
                      00059 ; until the characters can be successfully buffered to be transmitted.  A
                      00060 ; non-blocking write is avilable from SIO_WRITE.
                      00061 ;
                      00062 ; "printable form" means that control characters print as the two-character
                      00063 ; sequence "^x" (i.e., 0x00="^@", 0x01="^A", etc.); the escape character 0x1B
                      00064 ; prints as "$"; the delete character 0x7F prints as "^?"; and meta-characters
                      00065 ; (i.e., 0x80-0xFF) print as "M-" followed by what the character would have
                      00066 ; echoed as if the high bit were not sent (e.g., 0x80="M-^@", 0xD0="M-P").
                      00067 ;
                      00068 ; "raw form" send the 8-bit byte to the serial port with no translation at all.
                      00069 ;
                      00070 ; The READ functions are non-blocking; they will return 0 if no character is
                      00071 ; available (check SIO_STATUS<RXDATA_QUEUE> to see if data is ready to read).
                      00072 ;
                      00073 ; The GETCHAR functions are blocking; they will wait until they are able to write
                      00074 ; data before completing.
                      00075 ;
                      00076 ;==============================================================================
                      00077 ; PUBLIC DATA
                      00078 ;==============================================================================
                      00079 ;
  0000                00080         EXTERN  SIO_STATUS      ; status register (see serial-io-bits.inc for bit values)
  0000                00081         EXTERN  SIO_INPUT       ; last byte read from serial port (output from module)
  0000                00082         EXTERN  SIO_OUTPUT      ; byte to write to serial port (input to module)
  0000                00083         EXTERN  B32__BIN        ; 4-byte big-endian input to B32__BIN2BCD
  0000                00084         EXTERN  B32__BCD_ASC    ; 5-byte output from B32__BIN2BCD and input/output to/from
                      00085                                 ; B32__BCD2ASCII.
                      00086 ;
                      00087 ; If writing data to the port and the buffer fills up, the printed characters
                      00088 ; will be ignored past the point where the buffer fills up, and the SIO_STATUS<TXDATA_FULL>
                      00089 ; flag will be set.
                      00090 ;
                      00091 ; If too much data arrives at the serial port before you read it out with this module's
                      00092 ; functions, the extra incoming bytes will be discarded, and the SIO_STATUS<RXDATA_FULL>
                      00093 ; flag will be set.
                      00094 ;
                      00095 ; Framing errors and buffer overruns (data received faster than the SIO_RECV function
                      00096 ; could handle them, usually because the SIO_RECV function isn't being called quickly
                      00097 ; enough) cause the SIO_STATUS<SIO_FERR> and SIO_STATUS<SIO_ORUN> bits to be set,
                      00098 ; respectively.
                      00099 ;
                      00100 ; It is the caller's responsibility to clear these flags.
                      00101 ;
                      00102 ; This module will automatically turn on/off the TXIE interrupt enable
                      00103 ; bit as needed to handle shipping out buffered data to the serial port.
                      00104 ; Just ensure that your ISR calls SIO_RECV when an RXIF interrupt is
                      00105 ; detected (you should clear RXIF when that's done), and you also call
                      00106 ; SIO_SEND when TXIF is detected (and clear that bit, too).
                      00107 ;
                      00061         IF QSCC_PORT
                      00062 #include "qscc_bits.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 ; This defines the bits for bit-encoded flags, etc.
                      00027 ; 
                      00028 #ifndef QSCC_BITS_INC
                      00029 #define QSCC_BITS_INC
                      00030 
                      00031         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00032          ERROR "qscc_bits only used for QS*C systems"
                      00033         ENDIF
                      00034                                         ; QUIZSHOW_FLAGS
  00000002            00035 QS_FLAG_DOING120 EQU    2               ; -----1--      Doing "every 1/120 sec tasks" now
  00000001            00036 QS_FLAG_ON_120_S EQU    1               ; ------1-      Need to do "every 1/120 sec tasks" now
  00000000            00037 QS_FLAG_SCANNING EQU    0               ; -------1      Scanner running
                      00038 
                      00039                                         ; BTN_??_FLAGS
  00000003            00040 BTN_FLG_ACTIVE  EQU     3               ; ----1---      Button being pressed now
  00000002            00041 BTN_FLG_LOCKED  EQU     2               ; -----1--      Button locked out
  00000001            00042 BTN_FLG_MASKED  EQU     1               ; ------1-      Button ignored
  00000000            00043 BTN_FLG_PRESSED EQU     0               ; -------1      Button pressed already
                      00044 
  00000C00            00045 QUIZSHOW_DATA   EQU     0xC00
                      00046 #endif
                      00063 #include "qscc_init.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Device initialization code.  See lumos_main.asm for hardware implementation
                      00027 ; details.  Most of the initialization will be done in the Lumos firmware.
                      00028 ;
                      00029 #include "quizshow_config.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; Configuration options.  Set these as desired and then re-assemble the
                      00027 ; code to produce the desired version of the ROM.
                      00028 ;
                      00029 ; 
                      00030 ;==============================================================================
                      00031 ; CONFIGURATION OPTIONS
                      00032 ;==============================================================================
                      00033 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00034 ; Note: set LUMOS_CHIP_TYPE to LUMOS_CHIP_QSCC or _QSRC in lumos_config.inc
                      00035 ;
                      00030 ; 
                      00031 ;==============================================================================
                      00032 ; PUBLIC ENTRY POINTS
                      00033 ;==============================================================================
  0000                00034         EXTERN  QSCC_INIT       ; Call this to set up the hardware before use.
  0000                00035         EXTERN  QSCC_START      ; Call this before starting the main event loop.
  0000                00036         EXTERN  QSCC_MAIN       ; Call this in each main loop iteration.
  0000                00037         EXTERN  QSCC_CMD5_START
  0000                00038         EXTERN  QS_STOP_SCANNER
                      00039 
                      00040 ;
                      00041 ;
  0000                00064          GLOBAL SSR_STATE
  0000                00065          GLOBAL S0_CMD0
  0000                00066          GLOBAL SSR_00_VALUE
  0000                00067          GLOBAL SSR_00_FLAGS
  0000                00068          GLOBAL SSR_00_STEP
  0000                00069          GLOBAL SSR_00_SPEED
  0000                00070          GLOBAL SSR_00_COUNTER
  0000                00071          EXTERN QSCC_INIT
                      00072         ELSE
                      00073 #include "flash_update.inc"
                      00074         ENDIF
                      00075 
                      00076 ; Works on Lumos 48-Channel controller boards 48CTL-3-1 with retrofit
                      00077 ; and 24SSR-DC-1.0.8 boards.
                      00078 ;
                      00079 ; N.B. THE BOARD SELECT BITS IN LUMOS_CONFIG.INC MUST BE SELECTED
                      00080 ; FOR THE TARGET CONFIGURATION!  EACH ROM IS DIFFERENT!
                      00081 ;
                      00082 ; Target Microcontroller is PIC18F4685, Q=40MHz (100nS instruction cycle)
                      00083 ; (Original was designed for PIC16F777 and PIC16F877A; you must upgrade
                      00084 ; the uC to a PIC18F4685 AND retrofit some parts on the old board as
                      00085 ; follows:
                      00086 ;    Replace X0 and X1 with 10 MHz crystals.
                      00087 ;    Interface off-board reset button to ground J5 and J6 pin 3 when pressed.
                      00088 ;    Interface off-board option button to ground J5 pin 5 when pressed.
                      00089 ;    Install a 10K pull-up resistor between J5 pin 5 and +5V.
                      00090 ;    (Optional) /PWRCTL output to P/S available on J5 pin 4.
                      00091 ;    Option button should only be attached to the master microcontroller.
                      00092 ;    Both need reset signals.
                      00093 ;
                      00094 ; Serial control (RS-232 or RS-485) at 19.2kbps by default.
                      00095 ; Configurable from 300 to 250000 baud.
                      00096 ;
                      00097 ;=============================================================================
                      00098 ; DIAGNOSTICS
                      00099 ;-----------------------------------------------------------------------------
                      00100 ;
                      00101 ; The front panel LEDs provide the following indications of status.  
                      00102 ;
                      00103 ; A  G  Y  R
                      00104 ; C  R  E  E
                      00105 ; T  N  L  D PHASE MEANING
                      00106 ; ---------- ----- -------
                      00107 ; .  .  .  . BOOT  Never started into boot sequence
                      00108 ; .  .  .  * BOOT  Halted during EEPROM setup
                      00109 ; .  .  *  * BOOT  Halted during EEPROM write operation
                      00110 ; .  .  *  . BOOT  Halted during EEPROM read / system init
                      00111 ; .  *  *  . BOOT  Halted during system initialization
                      00112 ; .  *  .  . BOOT  Initialized but main loop or timing system non-functional
                      00113 ;** ** ** ** RUN   Factory defaults restored (then reboots)
                      00114 ; . (*) .  . RUN   Normal operations
                      00115 ; . **  .  . RUN   Normal operations + privileged (config) mode enabled
                      00116 ; ! (*) X  X RUN   Received command for this unit
                      00117 ; X  X  !  X RUN   Master/Slave communications
                      00118 ; X  X  X  * RUN   Command error
                      00119 ; X  X  * ** RUN   Communications error (framing error)
                      00120 ; X  X ** ** RUN   Communications error (overrun error)
                      00121 ; X  X (*)** RUN   Communications error (buffer full error)
                      00122 ;** (*)**  . RUN   Internal error (exact error displayed on 2nd set of LEDs)*
                      00123 ; . () () () SLEEP Sleep Mode
                      00124 ; .  .  .  % HALT  System Halted normally
                      00125 ; ?  ?  ? ** HALT  Fatal error (exact error displayed on other LEDs)
                      00126 ;**  . ** ** HALT  Fatal error: reset/halt failure
                      00127 ;
                      00128 ; .=off  *=steady (*)=slowly fading on/off X=don't care
                      00129 ; ()=slow flash **=rapid flash !=blink/fade once (**)=rapid fade
                      00130 ; %=extra-slow flash
                      00131 ;
                      00132 ;
                      00133 ; *Internal error codes on 2nd LEDs (48-channel models only)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00134 ; A  G  Y  R
                      00135 ; C  R  E  E
                      00136 ; T  N  L  D MEANING
                      00137 ; ---------- -------
                      00138 ;-- **  .  . dispatch table overrun
                      00139 ;--  X  .  * input validator failure
                      00140 ;-- ** ** ** reset failure
                      00141 ;--  X  . ** device/hardware problem
                      00142 ;--  X  .(*) internal command error
                      00143 ;--  . **  . unknown/other error class
                      00144 ;-- 
                      00145 ;
                      00146 ; Error codes retrieved from query command
                      00147 ; 01  Command decode error (dispatch overrun)
                      00148 ; 02  Input validator failed to deal with bad value (channel number range for SET_LVL)
                      00149 ; 03  Input validator failed to deal with bad value (channel number range for BULK_UPD)
                      00150 ; 04  Input validator failed to deal with bad value (BULK_UPD data block scan)
                      00151 ; 05  Command decode error (dispatch overrun in S6 final command execution)
                      00152 ; 06  Input validator failed to deal with bad value (channel number range for RAMP_LVL)
                      00153 ; 07  Command decode error (dispatch overrun in S9 internal command execution)
                      00154 ; 08  Command decode error (illegal state transition in S10 for IC_TXDAT/IC_TXSTA)
                      00155 ; 09  Command impossible to carry out on this hardware (chip without T/R tried to take control of bus)
                      00156 ; 0A  Illegal internal command sent from master chip (invalid packet in S11 IC_TXDAT/IC_TXSTA)
                      00157 ; 0B  Command decode error (illegal state transition in S11 for IC_TXDAT/IC_TXSTA)
                      00158 ; 0C  Command decode error (illegal state transition in S12 for IC_LED)
                      00159 ; 0D  Command decode error (illegal state transition in S13 for IC_LED)
                      00160 ; 0E  Command decode error (extended dispatch overrun)
                      00161 ; 0F  Illegal internal command sent from master chip (received raw QUERY packet)
                      00162 ; 10  Could not determine device type                                  _
                      00163 ; 11  Command impossible to carry out on this hardware (chip without T/R tried to release control of bus
                            )
                      00164 ; 12  Internal inter-CPU command executed on wrong class hardware
                      00165 ; 
                      00166 ; 20  Unrecognized command received or command arguments incorrect
                      00167 ; 21  Attempt to invoke privileged command from normal run mode
                      00168 ; 22  Command not yet implemented
                      00169 ; 23  Command received before previous one completed (previous command aborted)
                      00170 ; 70  CPU failed to reset with new configuration (execution bounds check)
                      00171 ; 71  CPU failed to halt when requested (execution bounds check)
                      00172 ;
                      00173 ; OPTION BUTTON:
                      00174 ; 
                      00175 ; Pres and hold the option button to enter field setup mode.  The lights will
                      00176 ; flash rapidly to signal this mode change.  Release the button and wait.  
                      00177 ; The lights will remain steady.  This enables the privileged 
                      00178 ; (configuration) command mode, allowing the Lumos unit to receive device 
                      00179 ; configuration commands from the host PC.
                      00180 ;
                      00181 ; Press the button again to enter self-test mode.  The LEDs will chase
                      00182 ; once to signal this mode.  In this mode, serial communication to the
                      00183 ; unit will be ignored.  Each output channel in turn will be turned on 
                      00184 ; for one second. The dimmer is NOT used, only fully on/fully off.  The
                      00185 ; LEDs on the top board will show the least-significant 4 bits of the
                      00186 ; output channel currently on.  If present, the bottom board's LEDs will
                      00187 ; show the most significant bits.
                      00188 ; 
                      00189 ; Pressing the button in this mode causes the cycle to pause on the current
                      00190 ; output channel until the button is pressed again to resume the cycle.
                      00191 ; 
                      00192 ; Pressing and holding the button will exit option mode and return to
                      00193 ; regular (but still privileged) run mode.  The host PC can issue a command
                      00194 ; to drop privileged mode, or the RESET button may be pressed to reset the
                      00195 ; system completely which includes disabling privileged mode.
                      00196 ; 
                      00197 ; ---TOP*---  --BOT--
                      00198 ; A  G  Y  R  G  Y  R
                      00199 ; C  R  E  E  R  E  E
                      00200 ; T  N  L  D  N  L  D  PHASE  MEANING
                      00201 ; -------------------  -----  -------
                      00202 ;** ** ** ** ** ** **  OPTION Entering option mode
                      00203 ; X **  X  X  X  X  X  OPTION Entered privileged run mode
                      00204 ;b3 b2 b1 b0 b5 b4 (*) OPTION Self-test mode (cycling)
                      00205 ;b3 b2 b1 b0 b5 b4  *  OPTION Self-test mode (paused)
                      00206 ;
                      00207 ; 24-channel models only have the top LEDs.  If sensors are installed
                      00208 ; in place of LEDs, some of these may not be present.
                      00209 ;
                      00210 ;=============================================================================
                      00211 ; IMPLEMENTATION NOTES
                      00212 ;-----------------------------------------------------------------------------
                      00213 ;
                      00214 ; The SSR controller firmware consists of a number of somewhat independent 
                      00215 ; subsystems:
                      00216 ; 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00217 ; START
                      00218 ;       Initializes the microcontroller, starts up the required peripherals,
                      00219 ;       indicates the device ID on the front panel, and enters the main loop
                      00220 ;
                      00221 ; SIO
                      00222 ;       Handles all serial I/O operations in the background (interrupt-driven)
                      00223 ;       so the rest of the code only needs to be concerned with higher-level
                      00224 ;       reads and writes.  Buffers hold 256 characters each of input and output.
                      00225 ;
                      00226 ; ISR
                      00227 ;       The interrupt service routine manages a set of counters and timers:
                      00228 ;       1. At each AC line zero-crossing point, we reset a two-stage waveform
                      00229 ;          slicing timing chain which governs the ability for the SSRs to dim
                      00230 ;          incandescent lamps plugged into them; 
                      00231 ;       2. For DC boards, we run a 120 Hz timer which provides approximately
                      00232 ;          the same time base since those boards have no zero-crossing detection;
                      00233 ;       3. Each front panel LED has a counter for how long their current 
                      00234 ;          status is to be held, to allow a human to have enough time to 
                      00235 ;          see the LED before it would be extinguished. (This is less explicit
                      00236 ;          now than the previous major firmware version.  The LEDs are now simply
                      00237 ;          treated just like extra SSR lines, so they use the same code to manage
                      00238 ;          them.)
                      00239 ;
                      00240 ; MAIN_LOOP
                      00241 ;       Manages the display of the front panel LEDs
                      00242 ;       Updates the status of the SSR lines if it's time to do so
                      00243 ;       Receives a character from the serial line if one's waiting
                      00244 ;
                      00245 ; INTERPRETER
                      00246 ;       When a byte is received on the serial line, it is processed by
                      00247 ;       a small state machine.  The current state is held in YY_STATE (named
                      00248 ;       in honor of the venerable yacc).
                      00249 ;
                      00250 ; FLASH_UPDATE
                      00251 ;       (flash_update.asm) Loader code to receive new firmware image over the
                      00252 ;       serial line and write it into the microcontroller's flash memory.
                      00253 ;
                      00254 ;-----------------------------------------------------------------------------
                      00255 ; Command Protocol:
                      00256 ;                     ___7______6______5______4______3______2______1______0__
                      00257 ; Command Byte:      |      |                    |                           |
                      00258 ;                    |   1  |    Command code    |   Target device address   |
                      00259 ;                    |______|______|______|______|______|______|______|______|
                      00260 ;
                      00261 ; Any byte with its MSB set is the beginning of a command.  If the target 
                      00262 ; device matches this unit's address, the state machine kicks into gear and
                      00263 ; processes the command (which may require some following data bytes, all
                      00264 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00265 ; byte.
                      00266 ;
                      00267 ;                     ___7______6______5______4______3______2______1______0__
                      00268 ; Extended Command:  |      |                    |                           |
                      00269 ;                    |   1  |          7         |   Target device address   |
                      00270 ;                    |______|______|______|______|______|______|______|______|
                      00271 ;                    |      |                                                |
                      00272 ;                    |   0  |                  Command code                  |
                      00273 ;                    |______|______|______|______|______|______|______|______|
                      00274 ;
                      00275 ; The most common commands are given ID 0-6 so that they may be sent in as few
                      00276 ; bytes as possible (as few as a single byte), but we have more than 8 commands
                      00277 ; so we have an extended code.  If the command code is 7 (all bits set), then
                      00278 ; the following byte contains the actual command code which may be any value
                      00279 ; from 0-127.
                      00280 ;
                      00281 ;                     ___7______6______5______4______3______2______1______0__
                      00282 ; Data Byte:         |      |                                                |
                      00283 ;                    |   0  |                      Data                      |
                      00284 ;                    |______|______|______|______|______|______|______|______|
                      00285 ;
                      00286 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00287 ; in the middle of interpreting a multi-byte command, in which case it's interpreted
                      00288 ; appropriately as data supporting the command being executed.  This way, other
                      00289 ; devices which share the same protocol format but not necessarily a compatible
                      00290 ; command set may safely know which bytes can be ignored without knowing the
                      00291 ; details of each other's command sets.
                      00292 ;
                      00293 ; Two special bytes are recognized:
                      00294 ;
                      00295 ;                     ___7______6______5______4______3______2______1______0__
                      00296 ; MSB Escape:        |      |                                                |
                      00297 ;                    |   0  |   1      1      1      1      1      1      0  |
                      00298 ;                    |______|______|______|______|______|______|______|______|
                      00299 ;
                      00300 ; If this ($7E) byte is received, it is ignored but the next byte received will
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00301 ; have its MSB bit set.  This allows data bytes to have full 8-bit values without
                      00302 ; violating the communication protocol described above.  That second byte is not
                      00303 ; interpreted further.
                      00304 ;
                      00305 ;                     ___7______6______5______4______3______2______1______0__
                      00306 ; Literal Escape     |      |                                                |
                      00307 ;                    |   0  |   1      1      1      1      1      1      1  |
                      00308 ;                    |______|______|______|______|______|______|______|______|
                      00309 ;
                      00310 ; If this ($7F) byte is received, it is ignored but the next byte is accepted
                      00311 ; as-is without further interpretation.
                      00312 ;
                      00313 ; Specific Example Cases of interest:
                      00314 ;       Sequence    Resulting byte
                      00315 ;       $7E $7E     $FE
                      00316 ;       $7E $7F     $FF
                      00317 ;       $7F $7E     $7E
                      00318 ;       $7F $7F     $7F
                      00319 ;
                      00320 ; A command byte (received with MSB already set) trumps all of the above.  It is
                      00321 ; taken as the start of a command and the escape sequence in progress is canceled.
                      00322 ;
                      00323 ; Commands recognized:
                      00324 ;
                      00325 ;   COMMAND  CODE  BITS
                      00326 ;   BLACKOUT 0     1000aaaa
                      00327 ;   ON_OFF   1     1001aaaa 0scccccc            Turn channel <c> on (<s>=1) or off (<s>=0)
                      00328 ;   SET_LVL  2     1010aaaa 0hcccccc 0vvvvvvv    Set dimmer level <v>:<h> on channel <c>
                      00329 ;   BULK_UPD 3     1011aaaa 0mcccccc ...                Bulk-upload multiple channel levels
                      00330 ;   RAMP_LVL 4     1100aaaa Cdcccccc ...         Ramp channel <c> smoothly up (<d>=1) or down (<C>=1 cyc
                            le)
                      00331 ;            5     1101aaaa                      Reserved for future use
                      00332 ;            6     1110aaaa                      Reserved for future use
                      00333 ;   EXTENDED 7     1111aaaa                      Extended command, decoded further in next byte
                      00334 ; @ SLEEP    7+0   1111aaaa 00000000 01011010 01011010  Put unit to sleep
                      00335 ; @ WAKE     7+1   1111aaaa 00000001 01011010 01011010  Take unit out of sleep mode
                      00336 ;   SHUTDOWN 7+2   1111aaaa 00000010 01011000 01011001  Take unit completely offline
                      00337 ; < QUERY    7+3   1111aaaa 00000011 00100100 01010100  Report device status
                      00338 ;X! DEF_SEQ  7+4   1111aaaa 00000100 0iiiiiii ...       Define sequence <i>
                      00339 ;X  EXEC_SEQ 7+5   1111aaaa 00000101 0iiiiiii           Execute sequence <i> (0=stop)
                      00340 ;X  DEF_SENS 7+6   1111aaaa 00000110 ...                Define sensor trigger
                      00341 ;X  MSK_SENS 7+7   1111aaaa 00000111 0000ABCD           Mask inputs (1=enable, 0=disable)
                      00342 ;X! CLR_SEQ  7+8   1111aaaa 00001000 01000011 01000001  Erase all stored sequences
                      00343 ;   XPRIV    7+9   1111aaaa 00001001                    Forbid priviliged mode
                      00344 ;            7+10  1111aaaa 00001010                    Reserved for future use
                      00345 ;             :        :        :                           :     :     :    : 
                      00346 ;            7+29  1111aaaa 00011101                    Reserved for future use                 
                      00347 ;   OUT_NAK  7+30  1111aaaa 00011110                    QUERY NAK                               
                      00348 ;   OUT_RPLY 7+31  1111aaaa 00011111 ...                Reply to QUERY command_________________ 
                      00349 ;   IC_TXDAT 7+32  11110000 00100000 0nnnnnnn (...)*<n>+1 00011011 data -> serial port INTERNAL
                      00350 ;   IC_LED   7+33  11110000 00100001 00GGGYYY 00000RRR             LED Control         ////////
                      00351 ;   IC_HALT  7+34  11110000 00100010                               CPU Halt            ////////
                      00352 ;   IC_TXSTA 7+35  11110000 00100011 0nnnnnnn (...)*<n>+1 00011011 TXDAT + status+sent ////////
                      00353 ;            7+36  11110000 00100100                    Reserved for new commands      ////////
                      00354 ;             :        :        :                           :     :   :      :         ////////
                      00355 ;            7+63  11110000 00111111                    Reserved for new commands______////////
                      00356 ;*! CF_PHASE 7+64  1111aaaa 010000pp 0ppppppp 01010000 01001111   Phase offset=<p>       CONFIG
                      00357 ;*! CF_ADDR  7+96  1111aaaa 0110AAAA 01001001 01000001 01000100   Change address to <A>  ||||||
                      00358 ;*  CF_NOPRV 7+112 1111aaaa 01110000                              Leave privileged mode  ||||||
                      00359 ;*  CF_CONF  7+113 1111aaaa 01110001 ...                          Configure device       ||||||
                      00360 ;*! CF_BAUD  7+114 1111aaaa 01110010 0bbbbbbb 00100110            Set baud rate to <b>   ||||||
                      00361 ;*! CF_RESET 7+115 1111aaaa 01110011 00100100 01110010            Reset factory defaults ||||||
                      00362 ;*  CF_XPRIV 7+116 1111aaaa 01110100                              Forbid priviliged mode ||||||
                      00363 ;*  CF_FLROM 7+117 1111aaaa 01110101 00110011 01001100 00011100   Begin ROM update cycle ||||||
                      00364 ;*           7+118 1111aaaa 01110110                     Reserved for future config cmd  ||||||
                      00365 ;*                     :        :                            :     :     :      :    :   ||||||
                      00366 ;*           7+127 1111aaaa 01111111                     Reserved for future config cmd__||||||
                      00367 ;
                      00368 ; Legend:
                      00369 ;   X Not yet implemented; planned for future; subject to change
                      00370 ;   @ Unit may automatically take this action
                      00371 ;   * Privileged configuration-mode command
                      00372 ;   ! Permanent effect (written to EEPROM)
                      00373 ;   < Command generates response data (back to host)
                      00374 ;   a Device address (0-15)
                      00375 ;   b Baud rate code (0-127), but units may only define a small subset of those values
                      00376 ;   c Output channel (0-63, but unit may only support a lesser number)
                      00377 ;   d Direction: up (<d>=1) or down (<d>=0).
                      00378 ;   h High-res level bit (LSB of 8-bit value when in high-res mode)
                      00379 ;   m Mode (1=high-res, 0=low-res)
                      00380 ;   n Number of items affected
                      00381 ;   s Output state: 0=off, 1=on
                      00382 ;   v Value of dimmer (0-127) (most significant 7 bits of dimmer value)
                      00383 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00384 ; Payloads for many-byte commands
                      00385 ;
                      00386 ; BULK_UPD:  00cccccc 0nnnnnnn v0 v1 v2 ... vn 01010101
                      00387 ;       Updates <n>+1 channels starting at <c>, giving <v> values for each as per SET_LVL.
                      00388 ;
                      00389 ; RAMP_LVL:  0dcccccc 0sssssss 0ttttttt   Channel <c> up/down in <s>+1 steps every <t>+1/120 sec
                      00390 ;
                      00391 ; DEF_SEQ:   0iiiiiii 0nnnnnnn (...)*<n+1> 01000100 01110011  Define sequence <i> of length <n+1>
                      00392 ;                                                             0 is boot sequence, 1-63 is EEPROM
                      00393 ;                                                             64-127 is RAM.
                      00394 ;
                      00395 ; DEF_SENS:  0owE00SS 0IIIIIII 0iiiiiii 0PPPPPPP 00111100
                      00396 ;       Defines the trigger for sensor <S> (00=A, 01=B, 10=C, 11=D), where the event triggers
                      00397 ;       when sensor input goes low (<E>=0) or high (<E>=1).  When triggered, sequence <I>
                      00398 ;       initially, then continues playing sequence <i> (once if <O>=1, else while the sensor
                      00399 ;       remains active if <W>=1, else forever until forced to stop), then sequence <P> is
                      00400 ;       played at the end of the event.
                      00401 ;
                      00402 ; IC_LED:    00GGGYYY 00000RRR
                      00403 ;       each 3 bits decode as:
                      00404 ;               000 steady off  001 steady on
                      00405 ;               010 slow fade   011 fast fade
                      00406 ;               100 slow flash  101 fast flash
                      00407 ;               11x no change
                      00408 ;
                      00409 ; CF_CONF:   0ABCDdcc 0ccccccc 00111010 00111101
                      00410 ;       Configure sensor lines ABCD as 1=sensor inputs or 0=LED outputs,
                      00411 ;       DMX mode if <d>=1, with Lumos channel 0 at DMX channel <c>+1.
                      00412 ;       
                      00413 ; CF_BAUD:   Values recognized:
                      00414 ;       00000000 ($00)      300 baud
                      00415 ;       00000001 ($01)      600
                      00416 ;       00000010 ($02)    1,200
                      00417 ;       00000011 ($03)    2,400
                      00418 ;       00000100 ($04)    4,800
                      00419 ;       00000101 ($05)    9,600
                      00420 ;       00000110 ($06)   19,200
                      00421 ;       00000111 ($07)   38,400
                      00422 ;       00001000 ($08)   57,600
                      00423 ;       00001001 ($09)  115,200
                      00424 ;       00001010 ($0A)  250,000
                      00425 ;
                      00426 ;
                      00427 ; Response packet from QUERY command (37 bytes):
                      00428 ; note the ROM version byte also serves to indicate the format of the response
                      00429 ; bytes which follow.  If the query packet format changes, the ROM version byte
                      00430 ; MUST also change.
                      00431 ;
                      00432 ;    1111aaaa 00011111 00110001 0ABCDdcc 0ccccccc 0ABCDqsf 0ABCDXpp 0ppppppp 
                      00433 ;        \__/           \_/\__/  \__/|\_________/  \__/|||  \__/|\_________/  
                      00434 ;          |             maj |     | |   |           | |||   |  |      `--phase
                      00435 ;          `--reporting    minor   | |   `--DMX      | |||   |  `--config locked?
                      00436 ;              unit addr  rom      | |      channel  | |||   `--active
                      00437 ;                         vers.    | |               | ||`--mem full?
                      00438 ;                                  | `--DMX mode?    | |`--sleeping?
                      00439 ;                                  `--configured     | `--config mode?
                      00440 ;                                                    `--masks
                      00441 ;
                      00442 ;    0eeeeeee 0eeeeeee 0MMMMMMM 0MMMMMMM 0X0iiiii 0xxxxxxx 
                      00443 ;     \______________/  \______________/  | \___/  \_____/
                      00444 ;        `--EEPROM free    `--RAM free    |   |       `--executing seq.
                      00445 ;                                         |   `--device model
                      00446 ;                                         `--seq running?
                      00447 ;
                      00448 ;    0owE0000 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for A
                      00449 ;    0owE0001 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for B
                      00450 ;    0owE0010 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for C
                      00451 ;    0owE0011 0IIIIIII 0iiiiiii 0PPPPPPP        Sensor trigger info for D
                      00452 ;
                      00453 ;    0fffffff 0fffffff 000000pp 0ppppppp ssssssss ssssssss 00110011
                      00454 ;    \______/ \______/       \_________/ \______S/N______/
                      00455 ;        |        |               `--phase (channels 24-47)
                      00456 ;        |        `--fault code (channels 24-47)
                      00457 ;        `--fault code (channels 0-23)
                      00458 ;
                      00459 ; Also note that the controller is allowed to send OUT_NAK packets to the
                      00460 ; host in response to QUERY commands.  This does not complete the exchange,
                      00461 ; but serves to ask the host to continue waiting if the device won't be able
                      00462 ; to reply to the QUERY for long enough that it risks a timeout.  The host
                      00463 ; is under no obligation to respect the OUT_NAK packets.
                      00464 ;
                      00465 ;   1111aaaa 00011110 
                      00466 ;
                      00467 ; A controller MUST never send data except in response to an explicit
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00468 ; request from the host.  Controllers MUST immediately cease sending
                      00469 ; data upon receiving any bytes on the network (this indicates that
                      00470 ; the host is no longer waiting for a reply but has moved on to something
                      00471 ; else or is querying another device now).  No further data may be sent
                      00472 ; until again explicitly asked for.
                      00473 ;
                      00474 ; This version of the Lumos ROM does not send OUT_NAK packets.
                      00475 ;
                      00476 ; 
                      00477 ;
                      00478 ;
                      00479 ;                     _______________________________________________________
                      00480 ; Channel ID:        |      |      |                                         |
                      00481 ;                    |  0   | ON   |               Channel ID                |
                      00482 ;                    |______|______|______|______|______|______|______|______|
                      00483 ; The ON bit <6> determines whether the channel is being turned on (1) or 
                      00484 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00485 ; setting the channel to a specific dimmer value.
                      00486 ;
                      00487 ;-----------------------------------------------------------------------------
                      00488 ; State Machine Details
                      00489 ;
                      00490 ; Normally sits at state 0 (Idle) where it pretty much spins free waiting
                      00491 ; for the start of a command to come along.
                      00492 ;
                      00493 ;  __________ my   __________
                      00494 ; |17 |      |slot|18 |      |
                      00495 ; |___|      |--->|___|      |
                      00496 ; | DMX WAIT |<---| DMX UPD  |
                      00497 ; |__________| brk|__________|
                      00498 ;    ^  |nottype0       |done
                      00499 ;    |  V_______________V_____________________________________.
                      00500 ; brk|  |                                                     |
                      00501 ;  __|__V____      __________                                 |
                      00502 ; | 0 |      |    | 1 |      |                                |
                      00503 ; |___|      |--->|___|      |                                |
                      00504 ; |   IDLE   |<---| ON_OFF   |                                | 
                      00505 ; |__________|  ch|__________|                                |
                      00506 ;    ^  |          __________      ___                        |
                      00507 ;    |  |         | 2 |      |ch  |   |v                      |
                      00508 ;    |  |-------->|___|      |--->| 3 |---------------------->|
                      00509 ;    |  |         | SET_LVL  |    |___|                       |
                      00510 ;    |  |         |__________|                                |
                      00511 ;    |  |          __________      ___      ___               |
                      00512 ;    |  |         | 5 |      |ch  |   |s   |   |t             |
                      00513 ;    |  |-------->|___|      |--->| 7 |--->| 8 |------------->|
                      00514 ;    |  |         | RAMP_LVL |    |___|    |___|              |
                      00515 ;    |  |         |__________|                                |
                      00516 ;    |  |          __________                  __________     |
                      00517 ;    |  |         | 4 |      |ch              | 6 | Wait |    |
                      00518 ;    |  |-------->|___|      |--------------->|___|  for |--->|
                      00519 ;    |  |         | BULK_UPD |                | Sentinel |    |
                      00520 ;  __|__V____     |__________|                |__________|    |
                      00521 ; | 9 |      |                                      ^         |
                      00522 ; |___|      |                                      |         |
                      00523 ; | Extended |------------------------------------->|         |
                      00524 ; |__________|                                      |         |
                      00525 ;       |          __________                       |         |
                      00526 ;       |         |14 |      |i                     |         |
                      00527 ;       |-------->|___|      |----------------------'         |
                      00528 ;       |         | DEF_SEQ  |                                |
                      00529 ;       |         |__________|                                |
                      00530 ;       |          __________      ____                       |
                      00531 ;       |         |10 |      |N   |    |(done)                |
                      00532 ;       |-------->|___|      |--->| 11 |--------------------->|
                      00533 ;       |         | IC_TXDAT |    |____|                      |
                      00534 ;       |         | IC_TXSTA |                                |
                      00535 ;       |         |__________|                                |
                      00536 ;       |          __________      ____                       |
                      00537 ;       |         |12 |      |GY  |    |R                     |
                      00538 ;       |-------->|___|      |--->| 13 |--------------------->|
                      00539 ;       |         | IC_LED   |    |____|                      |
                      00540 ;       |         |__________|                                |
                      00541 ;       |          __________                                 |
                      00542 ;       |         |15 |      |i                               |
                      00543 ;       |-------->|___|      |------------------------------->|
                      00544 ;       |         | EXEC_SEQ |                                |
                      00545 ;       |         |__________|                                |
                      00546 ;       |          __________                                 |
                      00547 ;       |         |16 |      |m                               |
                      00548 ;       `-------->|___|      |--------------------------------'
                      00549 ;                 | MSK_SENS |    
                      00550 ;                 |__________|              
                      00551 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00552 ;-----------------------------------------------------------------------------
                      00553 ; System Timing Notes
                      00554 ;
                      00555 ; The system has some fairly specific real-time timing requirements in order
                      00556 ; to function properly.  The main external event we're synchronized to is the
                      00557 ; point where the AC waveform crosses the 0V line (the "zero crossing" point).
                      00558 ;
                      00559 ; An optoisolator on the controller board is connected to the AC input of the
                      00560 ; transformer and sends a positive-logic pulse to the INT pin of the micro-
                      00561 ; controller every time the AC line crosses 0V.  (Actually, the leading edge
                      00562 ; will slightly lead the zero crossing point and the trailing edge will 
                      00563 ; slightly lag behind it.)  So we enter our ISR once every 1/120 sec 
                      00564 ; (assuming US-standard 60Hz power).  For reference, this is 0.00833333 sec 
                      00565 ; or enough time for 83,333.333 instructions to be executed between each 
                      00566 ; interrupt.
                      00567 ;
                      00568 ; Slices  Time/slice (s)  Instructions/slice
                      00569 ;   1     0.00833333      83,333.333
                      00570 ;  32     0.00026042       2,604.167
                      00571 ;  64     0.00013021       1,302.083
                      00572 ; 128     0.00006510         651.042
                      00573 ; 132     0.00006313         631.313    128 levels + 2 on each end
                      00574 ; 260     0.00003205         320.513    256 levels + 2 on each end
                      00575 ;
                      00576 ; We divide the half-wave into "slices".  We need a minimum of 256 slices
                      00577 ; to get 256 levels of dimmer control, but we should add at least one on either
                      00578 ; end in case our timing's slightly off between the ZC points and the free-
                      00579 ; running timer.  For good measure, let's throw in a couple more to allow for
                      00580 ; pin settling times, minimum turn-on times for the triacs and just to be
                      00581 ; paranoid.  So let's say 260 slices per half-wave.  
                      00582 ;
                      00583 ; At 260 slices per ZC, each slice is 0.00003205128205128205 seconds.
                      00584 ; We set TMR2's period register to 159, with a 1:2 postscaler and no prescaler.
                      00585 ; That gives us a timer interrupt every 320 clock ticks, or every .000032 seconds.
                      00586 ; That's 320 instruction cycles worth of work we can pack into these cycles.
                      00587 ; Most of the work per cycle takes about 1/3 that much, so this should be ok.
                      00588 ;
  0000009F            00589 SLICE_TMR_PERIOD        EQU     0x9F
                      00590 ;
                      00591 ; For standalone DC boards, we don't have a zero-crossing input so we set up
                      00592 ; our own 120 Hz timing signal by running TMR0 with a 1:2 prescaler for 
                      00593 ; 41,666 clock ticks (i.e., running the timer from $5D3D-$FFFF).
                      00594 ;
                      00595                         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
  00005D3D            00596 CYCLE_TMR_PERIOD         EQU    0x5D3D
                      00597                         ENDIF
                      00598 ;
                      00599 ; In the previous (prototype) version of this controller, we took the ZC
                      00600 ; signal from the *secondary* side of the transformer, which meant that it
                      00601 ; was possible for that to be out of phase with the actual AC ZC event, so
                      00602 ; the "phase delay" feature of the event handling code was written to 
                      00603 ; compensate for this.  Now that we sample the AC line directly, we set 
                      00604 ; this delay to a constant value and that should be good.  We left the 
                      00605 ; capability in here, though, to account for any need for adjustment which
                      00606 ; may turn up due to component tolerances, propagation delays, or similar
                      00607 ; things.  We correct for any phase offset by adding a software delay
                      00608 ; from 0-511 (although really only 0-260 make much sense) slices between the ZC
                      00609 ; interrupt and the start of the dimmer cycle of 260 slices.  (The other 4 
                      00610 ; slices are idle (not active) slices.) 
                      00611 ;
                      00612 ; The value for PHASE_OFFSET should be chosen to start the cycle one or two
                      00613 ; slices into the actual half-wave.  So if there is no phase difference at all
                      00614 ; between sides of the transformer, PHASE_OFFSET should be 2.
                      00615 ;
                      00616 ; Here's the timeline:
                      00617 ;
                      00618 ;                    REAL                               REAL
                      00619 ;                     ZC                                 ZC
                      00620 ;    |................|..|...............|....|....|.....|..|..............
                      00621 ;    |phase delay------->|               |phase delay------>|
                      00622 ;    |                   |working slices----->|    |        |working slices-->
                      00623 ;    |                                   |    |idle|
                      00624 ;   INT                                 INT
                      00625 ;   (ZC)                                (ZC)
                      00626 ;
                      00627 ; Of course, in the current design, there is no phase shift across
                      00628 ; the transformer, so we'd have the trivial case of PHASE_OFFSET=2 (2 just to
                      00629 ; allow a little fudge room with the free-running slice timer which is not
                      00630 ; *quite* an even factor of the half-wave time):
                      00631 ;
                      00632 ;    REAL                         REAL
                      00633 ;     ZC                           ZC
                      00634 ;    .|..|....................|....|..|.................|
                      00635 ;     |->|                    |    |->|                 |
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00636 ;     |  |working slices----->|    |  |working slices-->|
                      00637 ;     |  |                    |idle|  |                 |
                      00638 ;    INT                          INT
                      00639 ;
                      00640 ; Since the free-running slice timer isn't exactly in sync with the ZC timing,
                      00641 ; we'll start our working slices some variable fraction of 1/260th of a half-cycle
                      00642 ; each time.  This will cause a "wobble" in brightness level of not more than 
                      00643 ; 1/260th brightness level (something less than one brightness increment), which
                      00644 ; ought to be difficult or impossible to notice by looking at an incandescent
                      00645 ; light load.  This is one reason why PHASE_OFFSET should be set to allow 1-2
                      00646 ; idle slices before we start turning on SSRs.
                      00647 ;
                      00648 ; On ZC interrupt, we set CUR_PRE to PHASE_OFFSET and set <PRECYC>.
                      00649 ; On TMR2 interrupt, if SSR_STATE<PRECYC>, decrement CUR_PRE.
                      00650 ;   if zero, clear SSR_STATE<PRECYC>, set CUR_SLICE to 256, set <INCYC>,<DIM_START>.
                      00651 ;   if SSR_STATE<INCYC>, decrement CUR_SLICE; if zero, set DIM_END, clr INCYC; else set SLICE_UPD
                      00652 ; 
                      00653 ; In main polling loop:
                      00654 ;   if DIM_START: turn on "on" SSRs, clear DIM_START
                      00655 ;   if SLICE_UPD: turn on SSR == CUR_SLICE for SSRs with SSRDIM set; clear SLICE_UPD
                      00656 ;   if DIM_END:   turn off all except SSR_ON, clear DIM_END
                      00657 ;
                      00658 ; PRECYC INCYC SLICE_UPD  CUR_PRE CUR_SLICE
                      00659 ;    0     x       x         x       x
                      00660 ;    1     x       x         4       x       <--zc
                      00661 ;    1     x       x         3       x
                      00662 ;    1     x       x         2       x
                      00663 ;    1     x       x         1       x
                      00664 ;    0     1     1-->0       0      255      SSR@255/on turned on
                      00665 ;    0     1     1-->0       0      254      SSR@254    turned on
                      00666 ; ...
                      00667 ;    0     1     1-->0       0       2       SSR@2     turned on
                      00668 ;    0     1     1-->0       0       1       SSR@1     turned on
                      00669 ;    0     0     1-->0       0       0       all non-on turned off
                      00670 ;    0     0       0         0       0       idle...
                      00671 ; ...
                      00672 ;    1     0       0         4       0       <--zc
                      00673 ; 
                      00674 ;
                      00675 ;=============================================================================
                      00676 ; HARDWARE DESCRIPTION
                      00677 ;-----------------------------------------------------------------------------
                      00678 ;
                      00679 ; The 48-channel and 24-channel boards use the 18F4685 microcontroller 
                      00680 ; (LUMOS_ARCH == "4685"), while the 4-channel boards use the smaller
                      00681 ; 18F14K50 chip (LUMOS_ARCH == "14K50").
                      00682 ;
                      00683 ;  PIC18F4685 Microcontroller I/O pin assignments:
                      00684 ;
                      00685 ; 24-CH   48-CH          ________   _________         48-CH   24-CH
                      00686 ; BOARD:  BOARD:        |o       \_/         |        BOARD:  BOARD:
                      00687 ; /RESET  /RESET -->  1 | /MCLR RE3  PGD RB7 | 40 --> /PWRCTL /PWRCTL
                      00688 ; /SSR23  /SSR16 <--  2 | RA0        PGC RB6 | 39 <-- /OPTION /OPTION
                      00689 ; /SSR22  /SSR14 <--  3 | RA1        PGM RB5 | 38 --> /SSR15  /SSR00
                      00690 ; /SSR21  /SSR12 <--  4 | RA2            RB4 | 37 --> /SSR13  /SSR01
                      00691 ; /SSR20  /SSR10 <--  5 | RA3            RB3 | 36 --> /SSR11  /SSR02
                      00692 ; /SSR19  /SSR08 <--  6 | RA4       INT2 RB2 | 35 --> /SSR09  /SSR03
                      00693 ; ACT    ACT*LED <--  7 | RA5       INT1 RB1 | 34 --> /SSR07  /SSR04 _
                      00694 ; GRN    GRN LED <--  8 | RE0       INT0 RB0 | 33 <-- ZC INT  -->  T/R
                      00695 ; YEL    YEL LED <--  9 | RE1            VDD | 32 --- +5V       
                      00696 ; RED    RED LED <-- 10 | RE2            VSS | 31 --- GND      
                      00697 ;            +5V --- 11 | VDD            RD7 | 30 --> /SSR17  /SSR05
                      00698 ;            GND --- 12 | VSS            RD6 | 29 --> /SSR06  /SSR06
                      00699 ;           xtal --- 13 | OSC            RD5 | 28 --> /SSR05  /SSR07
                      00700 ;             +----- 14 | OSC            RD4 | 27 --> /SSR18  /SSR08
                      00701 ; /SSR18  /SSR04 <-- 15 | RC0         RX RC7 | 26 <-- Serial RxD
                      00702 ; /SSR17  /SSR19 <-- 16 | RC1         TX RC6 | 25 --> Serial TxD
                      00703 ; /SSR16  /SSR03 <-- 17 | RC2            RC5 | 24 --> /SSR02  /SSR09
                      00704 ; /SSR15  /SSR01 <-- 18 | RC3            RC4 | 23 --> /SSR00  /SSR10
                      00705 ; /SSR14  /SSR23 <-- 19 | RD0            RD3 | 22 --> /SSR22  /SSR11
                      00706 ; /SSR13  /SSR21 <-- 20 | RD1            RD2 | 21 --> /SSR20  /SSR12
                      00707 ;                       |____________________|
                      00708 ;                  _
                      00709 ; *pin 7 goes to T/R on the slave controller instead of the LED.
                      00710 ;
                      00711 ;
                      00712 ; The outputs from the controller board are on a 26-bin ribbon cable
                      00713 ; header with this pinout:
                      00714 ;
                      00715 ;                               _________
                      00716 ;                       SSR23  |  1 |  2 |  SSR00
                      00717 ;                       SSR22  |  3 |  4 |  SSR01
                      00718 ;                       SSR21  |  5 |  6 |  SSR02
                      00719 ;                       SSR20  |  7 |  8 |  SSR03
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00720 ;                       SSR19  |  9 | 10 |  SSR04
                      00721 ;                       SSR18  | 11 | 12 |  SSR05
                      00722 ;                       SSR17  | 13 | 14 |  SSR06
                      00723 ;                         GND  | 15 | 16 |  +5V
                      00724 ;                       SSR16  | 17 | 18 |  SSR07
                      00725 ;                       SSR15  | 18 | 20 |  SSR08
                      00726 ;                       SSR14  | 21 | 22 |  SSR09
                      00727 ;                       SSR13  | 23 | 24 |  SSR10
                      00728 ;                       SSR12  |_25_|_26_|  SSR11
                      00729 ;
                      00730 ;
                      00731 ; Communications are via RS-485 serial network using an 8p8c modular
                      00732 ; connector with this pinout:
                      00733 ;
                      00734 ;  ________
                      00735 ; |12345678|    1- Return Data Y (+)    5- Data A (+)
                      00736 ; |        |    2- Return Data Z (-)    6- Cable Check OUT
                      00737 ; |___  ___|    3- Cable Check IN       7- Data GND 
                      00738 ;    |__|       4- Data B (-)           8- Return Data GND
                      00739 ;
                      00740 ; CC is a cable check indicator.  A signal is sent out by the host on pin 3, with the
                      00741 ; expectation that each controller will pass it on down the cable to the terminator
                      00742 ; which connects it to pin 6 and sends the signal back through the controllers to the
                      00743 ; host again.  Note that the controllers themselves do nothing with the CC signal other
                      00744 ; than pass those pins straight through; it is available however for something at the 
                      00745 ; host side to verify cable integrity.
                      00746 ;
                      00747 ; Data A/B is the twisted pair for the RS-485 data between the host PC and controllers.
                      00748 ;
                      00749 ; Return Data Y/Z is only implemented if a full duplex RS-485 network is implemented
                      00750 ; (an option for some boards but not the default case).  This is dedicated for controllers
                      00751 ; sending data back to the host PC.  If using half-duplex, the same data pair is used
                      00752 ; for both sending and receiving, and the host PC needs to switch to receive mode
                      00753 ; when a controller is asked to report back.
                      00754 ;
                      00755 ;
                      00756 ; Termination at the end of the loop should be provided with a plug
                      00757 ; wired as:
                      00758 ; 
                      00759 ;     3 ------------ 6
                      00760 ; 
                      00761 ;     1 ---/\/\/---- 2 <--(if full duplex)
                      00762 ;         120 ohms
                      00763 ; 
                      00764 ;     4 ---/\/\/---- 5
                      00765 ;         120 ohms
                      00766 ;------------------------------------------------------------------------ 
                      00767 ;
                      00768 ;  PIC18F14K50 Microcontroller I/O pin assignments:
                      00769 ;
                      00770 ;         4-CH           ________   _________         4-CH
                      00771 ;         BOARD:        |o       \_/         |        BOARD: 
                      00772 ;            +5V ---  1 | Vdd            Vss | 20 --- GND    
                      00773 ;           XTAL ---  2 | OSC1       PGD RA0 | 19 --> /PWRCTL
                      00774 ;           XTAL ---  3 | OSC2       PGC RA1 | 18 <-- /OPTION
                      00775 ;          /MCLR -->  4 | /MCLR         Vusb | 17 
                      00776 ;    /A  ACT LED <->  5 | RC5            RC0 | 16 --> /SSR3
                      00777 ;        GRN LED <--  6 | RC4            RC1 | 15 --> /SSR2
                      00778 ;    /C  YEL LED <->  7 | RC3            RC2 | 14 --> /SSR1
                      00779 ;    /B  RED LED <->  8 | RC6            RB4 | 13 --> /SSR0
                      00780 ;    /D          -->  9 | RC7        RxD RB5 | 12 <-- RxD
                      00781 ;            TxD <-- 10 | RB7 TxD        RB6 | 11 --> T/R
                      00782 ;                       |____________________|
                      00783 ;
                      00784 ;
                      00785 ;
                      00786 ; ========================================================================
                      00787 ; PROGRAM MEMORY MAP
                      00788 ; ______________________________________________________________________________
                      00789 ;
                      00790 ; 14K50 4685    _________________ ___
                      00791 ; $00000 $00000 | RESET Vector    | V_RST
                      00792 ; $00007 $00007 |_________________|___
                      00793 ; $00008 $00008 | High Int Vector | V_INT_H
                      00794 ; $00017 $00017 |_________________|___
                      00795 ; $00018 $00018 | Low Int Vector  | V_INT_L
                      00796 ; $0001F $0001F |_________________|
                      00797 ; $00020 $00020 |/////////////////|
                      00798 ; $000FF $000FF |/////////////////|___
                      00799 ; $00100 $00100 | Boot code       | _BOOT
                      00800 ;               |.................|___
                      00801 ;               | Interrupt hand- | _INT
                      00802 ;               |  lers           |      
                      00803 ;               |/////////////////|
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00804 ; $007FF $007FF |/////////////////|___
                      00805 ; $00800 $00800 | Mainline code   | _MAIN
                      00806 ;               |.................|___
                      00807 ;           ??? | Device init     | LUMOS_CODE_INIT
                      00808 ;               |_________________|___
                      00809 ;           ??? | Serial I/O      | _SIO_CODE
                      00810 ;               | Module          |
                      00811 ;               |_________________|___
                      00812 ;               |/////////////////|
                      00813 ;               |/////////////////|
                      00814 ;               |/////////////////|
                      00815 ;               |/////////////////|
                      00816 ;               |/////////////////|___
                      00817 ; $02E00 $14000 | EEPROM defaults | _MAIN_EEPROM_TBL
                      00818 ; $02EFF $14FFF |_________________|___
                      00819 ; $02F00 $15000 |Serial I/O Mod   | _SIO_LOOKUP_TABLES
                      00820 ;               |lookup tables    |
                      00821 ;        $150FF |_________________|___
                      00822 ;        $15100 |                 |
                      00823 ;               |                 |
                      00824 ; $02FEF $16FEF |_________________|___
                      00825 ; $02FF0 $16FF0 |System Mfg Data  | _SYSTEM_MFG_DATA
                      00826 ; $02FFF $16FFF |_________________|___
                      00827 ; $03000 $17000 |Flash Loader Code| _FLASH_UPDATE_LOADER
                      00828 ; $03FFF $17FFF |_________________|___
                      00829 ;               |/////////////////|
                      00830 ;               |/////////////////|
                      00831 ;$1FFFFF$1FFFFF |/////////////////|___
                      00832 ;
                      00833  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00014000            00834 _MAIN_EEPROM_TBL        EQU     0x14000
  00016FF0            00835 _SYSTEM_MFG_DATA        EQU     0x16FF0
                      00836  ELSE
                      00837   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00838 _MAIN_EEPROM_TBL        EQU     0x02E00
                      00839 _SYSTEM_MFG_DATA        EQU     0x02FE0
                      00840   ELSE
                      00841    ERROR "Invalid architecture switch"
                      00842   ENDIF
                      00843  ENDIF
                      00844 ;
                      00845 ;
                      00846 ; ========================================================================
                      00847 ; DATA MEMORY MAP (4685)
                      00848 ;
                      00849 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00850 ; $000 | global state,   | _ADATA            BANK 0
                      00851 ; $05F | ISR data, etc.  |                (ACCESS AREA)
                      00852 ;      |.................|...............................
                      00853 ; $060 |                 |                   
                      00854 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00855 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00856 ;      | ring buffer     |
                      00857 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00858 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00859 ;      | ring buffer     |
                      00860 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00861 ; $300 | Serial I/O mod  | _SIO_VAR_DATA     BANK 3
                      00862 ;      | variable space  |
                      00863 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00864 ; $400 | SSR state data  | _SSR_DATA         BANK 4
                      00865 ;      |                 |
                      00866 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00867 ; $500 | Parser buffer   | _MAINDATA         BANK 5
                      00868 ;      |.................|
                      00869 ; $5?? |                 |
                      00870 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00871 ; $600 | Stored sequences| _SEQ_DATA         BANK 6
                      00872 ;      | (1792 bytes)    |
                      00873 ;              .
                      00874 ;              .                 
                      00875 ;              .                
                      00876 ;      |                 |
                      00877 ;      |                 |
                      00878 ;      |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00879 ; $D00 |                 |                   BANK D
                      00880 ;      | CAN special     |
                      00881 ;      | function        |___ ___ ___ ___ ___ ___ ___ ___
                      00882 ; $E00 | registers       |                   BANK E
                      00883 ;      | (not used for   |
                      00884 ;      | Lumos)          |___ ___ ___ ___ ___ ___ ___ ___
                      00885 ; $F00 |                 |                   BANK F
                      00886 ;      |                 |
                      00887 ; $F5F |.................|...............................
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00888 ; $F60 | Special Function|                (ACCESS AREA)
                      00889 ;      | (device) regis- |
                      00890 ;      | ters            |
                      00891 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00892 ;
                      00893 ; ------------------------------------------------------------------------
                      00894 ; DATA MEMORY MAP (14K50)
                      00895 ;
                      00896 ;       _________________ ___ ___ ___ ___ ___ ___ ___ ___
                      00897 ; $000 | global state,   | _ADATA            BANK 0
                      00898 ; $022 | ISR data, etc.  |                (ACCESS AREA)
                      00899 ;      |.................|
                      00900 ; $023 |                 |                   
                      00901 ;      |                 |                   
                      00902 ; $05F |_________________|...............................
                      00903 ; $060 | SSR state data  | _SSR_DATA         BANK 0
                      00904 ;      |                 |                (BANKED AREA)
                      00905 ; $07F |_________________|
                      00906 ; $088 | Parser buffer   | _MAINDATA
                      00907 ; $0E1 |.................|
                      00908 ; $0E2 |    [unused]     |
                      00909 ; $0E3 |_________________|
                      00910 ; $0E4 | Serial I/O mod  | _SIO_VAR_DATA
                      00911 ;      | variable space  |
                      00912 ; $0FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00913 ; $100 | Serial I/O TxD  | _SIO_TXBUF_DATA   BANK 1
                      00914 ;      | ring buffer     |
                      00915 ; $1FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00916 ; $200 | Serial I/O RxD  | _SIO_RXBUF_DATA   BANK 2
                      00917 ;      | ring buffer     |
                      00918 ; $2FF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00919 ; $300 |/////////////////|///////////////////////////////
                      00920 ;      |/////////////////|
                      00921 ;              .
                      00922 ;              .                 
                      00923 ;              .                DOES NOT EXIST
                      00924 ;      |/////////////////|
                      00925 ;      |/////////////////|
                      00926 ; $EFF |/////////////////|///////////////////////////////
                      00927 ; $F00 |/////////////////|                   
                      00928 ; $F52 |/////////////////|
                      00929 ; $F53 | Special Function|
                      00930 ; $F5F |.................|...............................
                      00931 ; $F60 | Special Function|                (ACCESS AREA)
                      00932 ;      | (device) regis- |
                      00933 ;      | ters            |
                      00934 ; $FFF |_________________|___ ___ ___ ___ ___ ___ ___ ___
                      00935 ;
                      00936 ; ========================================================================
                      00937 ; EEPROM MEMORY
                      00938 ;
                      00939 ;
                      00940 ;       ______________            ______________ 
                      00941 ; $000 |_0xFF_________|     $010 | Saved        |
                      00942 ; $001 |_Baud_Rate____|     $011 | Sequence     |
                      00943 ; $002 |_Device_ID____|     $012 | Storage      |
                      00944 ; $003 | Phase     MSB|     $013 |       |      |
                      00945 ; $004 |_Offset____LSB|     $014 |       |      |
                      00946 ; $005 |_DMX_Slot__MSB|     $015 |       |      |
                      00947 ; $006 |_DMX_Slot__LSB|       .          .
                      00948 ; $007 |_Sensor_cfg___|       .          .
                      00949 ; $008 |______________|       .          .
                      00950 ; $009 |______________|     $3F9 |       |      |
                      00951 ; $00A |______________|     $3FA |       |      |
                      00952 ; $00B |______________|     $3FB | (1008 |      |
                      00953 ; $00C |______________|     $3FC | bytes)|      |
                      00954 ; $00D |______________|     $3FD |       |      |
                      00955 ; $00E |______________|     $3FE |       |      |
                      00956 ; $00F |_0x42_________|     $3FF |_______V______|
                      00957 ;
                      00958 ;
                      00959 __SYS__ CODE_PACK       _SYSTEM_MFG_DATA
016FF0 A4             00960 SYS_SNH DE      0xA4            ; Device serial number
016FF1 45             00961 SYS_SNL DE      0x45
                      00962 
                      00963 _EEPROM CODE_PACK       0xF00000
F00000 FF             00964         DE      0xFF            ; 000: 0xFF constant
F00001 06             00965         DE      SIO_19200       ; 001: baud rate default
F00002 00             00966         DE      0x00            ; 002: default device ID
F00003 00 02          00967         DE      0x00, 0x02      ; 003: default phase offset
F00005 00 00          00968         DE      0x00, 0x00      ; 005: default DMX=0 (disabled, ch=1)
F00007 00             00969         DE      0x00            ; 007: default sensors (disabled)
F00008 00 00          00970         DE      0x00, 0x00      ; 008: reserved
F0000A 00 00 00       00971         DE      0x00, 0x00, 0x00; 00A: reserved
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

F0000D 00 00          00972         DE      0x00, 0x00      ; 00D: reserved
F0000F 42             00973         DE      0x42            ; 00F: sentinel
                      00974 
  00000000            00975 EE_START        EQU     0x000
  00000001            00976 EE_BAUD         EQU     0x001
  00000002            00977 EE_DEV_ID       EQU     0x002
  00000003            00978 EE_PHASE_H      EQU     0x003
  00000004            00979 EE_PHASE_L      EQU     0x004
  00000005            00980 EE_DMX_H        EQU     0x005
  00000006            00981 EE_DMX_L        EQU     0x006
  00000007            00982 EE_SENSOR_CFG   EQU     0x007
  00000008            00983 EE_RESERVED_8   EQU     0x008
  00000009            00984 EE_RESERVED_9   EQU     0x009
  0000000A            00985 EE_RESERVED_A   EQU     0x00A
  0000000B            00986 EE_RESERVED_B   EQU     0x00B
  0000000C            00987 EE_RESERVED_C   EQU     0x00C
  0000000D            00988 EE_RESERVED_D   EQU     0x00D
  0000000E            00989 EE_RESERVED_E   EQU     0x00E
  0000000F            00990 EE_END          EQU     0x00F
                      00991 
                      00992 _EEPROM_DEFS_TBL CODE_PACK _MAIN_EEPROM_TBL
014000                00993 DEFAULT_TBL:
014000 FF             00994         DB      0xFF                    ; $000: constant $FF
014001 06             00995         DB      SIO_19200               ; $001: 19200 baud
014002 00             00996         DB      0x00                    ; $002: device ID=0
014003 00 02          00997         DB      0x00, 0x02              ; $003: phase offset=2
014005 00 00          00998         DB      0x00, 0x00              ; $005: DMX slot=0 (disabled, ch=1)
014007 00             00999         DB      0x00                    ; $007: no sensors configured
014008 00 00 00       01000         DB      0x00, 0x00, 0x00        ; $008-$00A
01400B 00 00 00 00    01001         DB      0x00, 0x00, 0x00, 0x00  ; $00B-$00E
01400F 42             01002         DB      0x42                    ; $00F: constant $42
                      01003 
  00000010            01004 EEPROM_SETTINGS_LEN     EQU     .16
  00000010            01005 EEPROM_USER_START       EQU     0x010   
  000003FF            01006 EEPROM_USER_END         EQU     0x3FF
                      01007 ;
                      01008 ; ========================================================================
                      01009 ; DEVICES USED
                      01010 ;
                      01011 ; TMR0    120 Hz interrupt source (for boards without zero-crossing detector)
                      01012 ; TMR1    Button press timer (free-running 1MHz clock)
                      01013 ; TMR2    Dimmer slice timer (1/260 of a 120 Hz half-cycle)
                      01014 ; TMR3    Break detector for DMX reception
                      01015 ; UART    SIO module
                      01016 ;=============================================================================
                      01017 ;
                      01018 ;
                      01019 ;-----------------------------------------------------------------------------
                      01020 ; I/O PORT ASSIGNMENTS
                      01021 ;-----------------------------------------------------------------------------
                      01022 ;
                      01023 ;          7   6   5   4   3   2   1   0
                      01024 ; PORT RA --- --- ACT /08 /10 /12 /14 /16    48-Board AC/DC master
                      01025 ; PORT RA --- --- T/R /08 /10 /12 /14 /16    48-Board AC/DC slave
                      01026 ; PORT RA --- --- ACT /19 /20 /21 /22 /23    24-Board DC    standalone
                      01027 ;          <OSC>   O   O   O   O   O   O
                      01028 ; PORT RA /////// --- --- --- /// /OP /PS     4-Board DC
                      01029 ;         ///////  <OSC>   I  ///  I   O
                      01030 ;
                      01031 ;          7   6   5   4   3   2   1   0
                      01032 ; PORT RB /PS /OP /15 /13 /11 /09 /07 ---    48-Board AC/DC master
                      01033 ;          O   I   O   O   O   O   O  INT
                      01034 ; PORT RB /PS --- /15 /13 /11 /09 /07 ---    48-Board AC/DC slave
                      01035 ;          O   O   O   O   O   O   O  INT
                      01036 ; PORT RB /PS /OP /00 /01 /02 /03 /04 T/R    24-Board DC    standalone
                      01037 ;          O   I_  O   O   O   O   O   O 
                      01038 ; PORT RB --- T/R --- /00 ///////////////     4-Board DC
                      01039 ;         <O>  O  <I>  O  ///////////////
                      01040 ;
                      01041 ;          7   6   5   4   3   2   1   0
                      01042 ; PORT RC --- --- /02 /00 /01 /03 /19 /04    48-Board AC/DC master/slave
                      01043 ; PORT RC --- --- /09 /10 /15 /16 /17 /18    24-Board DC    standalone
                      01044 ;          <I/O>   O   O   O   O   O   O
                      01045 ; PORT RC /D  RED ACT GRN YEL /01 /02 /03     4-Board DC
                      01046 ;          I   O   O   O   O   O   O   O
                      01047 ;
                      01048 ;          7   6   5   4   3   2   1   0
                      01049 ; PORT RD /17 /06 /05 /18 /22 /20 /21 /23    48-Board AC/DC master/slave
                      01050 ; PORT RD /05 /06 /07 /08 /11 /12 /13 /14    24-Board DC    standalone
                      01051 ;         ///////////////////////////////     4-Board DC
                      01052 ;          O   O   O   O   O   O   O   O
                      01053 ;
                      01054 ;          7   6   5   4   3   2   1   0
                      01055 ; PORT RE --- --- --- --- --- RED YEL GRN    All boards
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01056 ;         ///////////////////////////////     4-Board DC
                      01057 ;                              O   O   O
                      01058 ;
                      01059 ;------------------------------------------------------------------------------
                      01060 ; Significant Registers (ACCESS BANK)
                      01061 ;------------------------------------------------------------------------------
                      01062 ;
                      01063 ;                     ___7______6______5______4______3______2______1______0__
                      01064 ; ISR_TMPL_STATUS    |                                                       |
                      01065 ;                    | Temporary storage for STATUS register in low-pri ISR  |
                      01066 ;                    |______|______|______|______|______|______|______|______|
                      01067 ; ISR_TMPL_BSR       |                                                       |
                      01068 ;                    | Temporary storage for BSR register in low-priority ISR|
                      01069 ;                    |______|______|______|______|______|______|______|______|
                      01070 ; ISR_TMPL_WREG      |                                                       |
                      01071 ;                    | Temporary storage for W register in low-priority ISR  |
                      01072 ;                    |______|______|______|______|______|______|______|______|
                      01073 ; MY_ADDRESS         |                           |                           |
                      01074 ;                    |                           |       Unit address        |
                      01075 ;                    |______|______|______|______|______|______|______|______|
                      01076 ; PHASE_OFFSETH      |                                                       |
                      01077 ;                    |               Phase offset value (MSB)                |
                      01078 ;                    |______|______|______|______|______|______|______|______|
                      01079 ; PHASE_OFFSETL      |                                                       |
                      01080 ;                    |               Phase offset value (LSB)                |
                      01081 ;                    |______|______|______|______|______|______|______|______|
                      01082 ; SSR_STATE          |      |      |SLICE |PRIV_ |SLEEP |DRAIN |PRE_  |TEST_ |
                      01083 ;                    |INCYC |PRECYC| _UPD | MODE |_MODE |_TR   |PRIV  |MODE  |
                      01084 ;                    |______|______|______|______|______|______|______|______|
                      01085 ; SSR_STATE2         |TEST_ |TEST_ |TEST_ |ALL_  |PRIV_ |INHIBI|MSB_  |LITER |
                      01086 ;                    |PAUSE |UPD   |BUTTON|OFF   |FORBID|T_OUTP|ESC   |AL_ESC|
                      01087 ;                    |______|______|______|______|______|UT____|______|______|
                      01088 ; DMX_SLOTH          |DMX_EN|DMX_  |DMX_  |                           |DMX Sl|
                      01089 ;                    |      |SPEED |FRAME |                           |ot MSB|
                      01090 ;                    |______|______|______|______|______|______|______|______|
                      01091 ; DMX_SLOTL          |                                                       |
                      01092 ;                    |       Starting DMX Slot Number - 1 (low 8 bits)       |
                      01093 ;                    |______|______|______|______|______|______|______|______|
                      01094 ; YY_STATE           |                                                       |
                      01095 ;                    |                      Parser State                     |
                      01096 ;                    |______|______|______|______|______|______|______|______|
                      01097 ; YY_COMMAND         |                                                       |
                      01098 ;                    |                      Command Code                     |
                      01099 ;                    |______|______|______|______|______|______|______|______|
                      01100 ; YY_CMD_FLAGS       |                                                       |
                      01101 ;                    |               Command-specific Flag Bits              |
                      01102 ;                    |______|______|______|______|______|______|______|______|
                      01103 ; YY_DATA            |                                                       |
                      01104 ;                    |                      Command Data                     |
                      01105 ;                    |______|______|______|______|______|______|______|______|
                      01106 ; YY_LOOKAHEAD_MAX   |                                                       |
                      01107 ;                    |               Maximum length for look-ahead           |
                      01108 ;                    |______|______|______|______|______|______|______|______|
                      01109 ; YY_LOOK_FOR        |                                                       |
                      01110 ;                    |               Sentinel value to search for            |
                      01111 ;                    |______|______|______|______|______|______|______|______|
                      01112 ; YY_BUF_IDX         |                                                       |
                      01113 ;                    |     Offset in YY_BUFFER where we will write next      |
                      01114 ;                    |______|______|______|______|______|______|______|______|
                      01115 ; YY_NEXT_STATE      |                                                       |
                      01116 ;                    |     State to transition to when YY_LOOK_FOR is found  |
                      01117 ;                    |______|______|______|______|______|______|______|______|
                      01118 ; YY_YY              |                                                       |
                      01119 ;                    |     General-purpose storage for use inside commands   |
                      01120 ;                    |______|______|______|______|______|______|______|______|
                      01121 ; LAST_ERROR         |                                                       |
                      01122 ;                    |  Last error code encountered (cleared when reported)  |
                      01123 ;                    |______|______|______|______|______|______|______|______|
                      01124 ; CUR_PREH           |                                                       |
                      01125 ;                    |         Pre-cycle count-down ticks left (MSB)         |
                      01126 ;                    |______|______|______|______|______|______|______|______|
                      01127 ; CUR_PRE            |                                                       |
                      01128 ;                    |         Pre-cycle count-down ticks left (LSB)         |
                      01129 ;                    |______|______|______|______|______|______|______|______|
                      01130 ; CUR_SLICE          |                                                       |
                      01131 ;                    |      Slice number within active portion of cycle      |
                      01132 ;                    |______|______|______|______|______|______|______|______|
                      01133 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01134 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01135 ;                    |______|______|______|______|______|______|______|______|
                      01136 ; OPTION_DEBOUNCE    |                                                       |
                      01137 ;                    |      Counter to debounce OPTION button presses        |
                      01138 ;                    |______|______|______|______|______|______|______|______|
                      01139 ; OPTION_HOLD        |                                                       |
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01140 ;                    |      Counter for how long OPTION button is held       |
                      01141 ;                    |______|______|______|______|______|______|______|______|
                      01142 ; TEST_CYCLE         |                                                       |
                      01143 ;                    |        Count-down of ZC cycles until next step        |
                      01144 ;                    |______|______|______|______|______|______|______|______|
                      01145 ; TEST_SSR           |             |                                         |
                      01146 ;                    |             |  current SSR being tested               |
                      01147 ;                    |______|______|______|______|______|______|______|______|
                      01148 ; AUTO_OFF_CTRH      |                                                       |
                      01149 ;                    |         countdown register until auto-power-off (MSB) |
                      01150 ;                    |______|______|______|______|______|______|______|______|
                      01151 ; AUTO_OFF_CTRL      |                                                       |
                      01152 ;                    |         countdown register until auto-power-off (LSB) |
                      01153 ;                    |______|______|______|______|______|______|______|______|
                      01154 ; I                  |                                                       |
                      01155 ;                    |      General-purpose local counter variable           |
                      01156 ;                    |______|______|______|______|______|______|______|______|
                      01157 ; J                  |                                                       |
                      01158 ;                    |      General-purpose local counter variable           |
                      01159 ;                    |______|______|______|______|______|______|______|______|
                      01160 ; K                  |                                                       |
                      01161 ;                    |      General-purpose local counter variable           |
                      01162 ;                    |______|______|______|______|______|______|______|______|
                      01163 ; KK                 |                                                       |
                      01164 ;                    |      General-purpose local counter variable           |
                      01165 ;                    |______|______|______|______|______|______|______|______|
                      01166 ; TR_I               |                                                       |
                      01167 ;                    |      T/R delay timer delay counter                    |
                      01168 ;                    |______|______|______|______|______|______|______|______|
                      01169 ;
                      01170 ;
                      01171 ;------------------------------------------------------------------------------
                      01172 ; (SSR_DATA_BANK)
                      01173 ;------------------------------------------------------------------------------
                      01174 ;
                      01175 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      01176 ;
                      01177 ;                     ___7______6______5______4______3______2______1______0__
                      01178 ; SSR_00_VALUE       |                                                       |
                      01179 ;                    | Brightness value of SSR #00 (00=off, ... FF=fully on) |
                      01180 ;                    |______|______|______|______|______|______|______|______|
                      01181 ;                    |                                                       |
                      01182 ;                    | Brightness value of SSR #01 (00=off, ... FF=fully on) |
                      01183 ;                    |______|______|______|______|______|______|______|______|
                      01184 ;                                                .
                      01185 ;                                                .
                      01186 ;                     ___________________________.___________________________
                      01187 ;                    |                                                       |
                      01188 ;                    | Brightness value of SSR #23 (00=off, ... FF=fully on) |
                      01189 ;                    |______|______|______|______|______|______|______|______|
                      01190 ;                    |                                                       |
                      01191 ;                    | Brightness value of Green   (00=off, ... FF=fully on) |
                      01192 ;                    |______|______|______|______|______|______|______|______|
                      01193 ;                    |                                                       |
                      01194 ;                    | Brightness value of Yellow  (00=off, ... FF=fully on) |
                      01195 ;                    |______|______|______|______|______|______|______|______|
                      01196 ;                    |                                                       |
                      01197 ;                    | Brightness value of Red     (00=off, ... FF=fully on) |
                      01198 ;                    |______|______|______|______|______|______|______|______|
                      01199 ;                    | IF MASTER/STANDALONE:                                 |
                      01200 ;                    | Brightness value of Active  (00=off, ... FF=fully on) |
                      01201 ;                    |______|______|______|______|______|______|______|______|
                      01202 ; SSR_00_FLAGS       | FADE | FADE | FADE_|MAX_OF|      |      |      |      |
                      01203 ;                    | _UP  | _DOWN| CYCLE|F_TIME|      |      |      |      |
                      01204 ;                    |______|______|______|______|______|______|______|______|
                      01205 ;                                                .
                      01206 ;                                                .
                      01207 ;                     ___________________________.___________________________
                      01208 ; SSR_00_STEP        |                                                       |
                      01209 ;                    |          Brightness increment (0..255)                |
                      01210 ;                    |______|______|______|______|______|______|______|______|
                      01211 ;                                                .
                      01212 ;                                                .
                      01213 ;                     ___________________________.___________________________
                      01214 ; SSR_00_SPEED       |                                                       |
                      01215 ;                    |          Cycles between each step (0..255)            |
                      01216 ;                    |______|______|______|______|______|______|______|______|
                      01217 ;                                                .
                      01218 ;                                                .
                      01219 ;                     ___________________________.___________________________
                      01220 ; SSR_00_COUNTER     |                                                       |
                      01221 ;                    |          Cycles until next step (0..255)              |
                      01222 ;                    |______|______|______|______|______|______|______|______|
                      01223 ;                                                .
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01224 ;                                                .
                      01225 ;                                                .                           
                      01226 #include "lumos_ssr_state.inc"
                      00001 ;
                      00002 ; SSR_STATE holds the execution state of the controller, including our
                      00003 ; main timing chain flags.
                      00004 ;
  00000007            00005 INCYC           EQU     7       ; 1-------  We are in a dimmer cycle now
  00000006            00006 PRECYC          EQU     6       ; -1------  We are in the pre-cycle countdown
  00000005            00007 SLICE_UPD       EQU     5       ; --1-----  Slice update needs to be done
  00000004            00008 PRIV_MODE       EQU     4       ; ---1----  We are in privileged (config) mode
  00000003            00009 SLEEP_MODE      EQU     3       ; ----1---  We are in sleep mode
  00000002            00010 DRAIN_TR        EQU     2       ; -----1--  Need to drain output queue then turn off transmitter
  00000001            00011 PRE_PRIV        EQU     1       ; ------1-  Entering privileged mode
  00000000            00012 TEST_MODE       EQU     0       ; -------1  In self-test mode
                      00013 ;
                      00014 ; SSR_STATE2 flags:
                      00015 ;
  00000007            00016 TEST_PAUSE      EQU     7       ; 1-------  We're pausing the test mode
  00000006            00017 TEST_UPD        EQU     6       ; -1------  Time to update the test count-down timer
  00000005            00018 TEST_BUTTON     EQU     5       ; --1-----  Waiting for button release in test mode
  00000004            00019 ALL_OFF         EQU     4       ; ---1----  All SSRs are currently completely off
  00000003            00020 PRIV_FORBID     EQU     3       ; ----1---  Forbidden to enter privileged mode again
  00000002            00021 INHIBIT_OUTPUT  EQU     2       ; -----1--  Forbid any further output
  00000001            00022 MSB_ESC         EQU     1       ; ------1-  MSB Escape pending
  00000000            00023 LITERAL_ESC     EQU     0       ; -------1  Literal Escape pending
                      01227 
                      01228 ; YY_CMD_FLAGS holds various command flag bits
                      01229 ;
  00000007            01230 YCF_RAMP_CYCLE  EQU     7       ; 1-------  Ramp should cycle now
                      01231                                 ; -XXXXXXX  Unassigned
                      01232 ;
                      01233 ; DMX_SLOTH contains these flags and the high-order bit of the DMX channel
                      01234 ;
  00000007            01235 DMX_EN          EQU     7       ; 1-------  DMX mode enabled
  00000006            01236 DMX_SPEED       EQU     6       ; -1------  UART at DMX speed now
  00000005            01237 DMX_FRAME       EQU     5       ; --1-----  Start of frame detected
                      01238 ;                               ; ---XXXX-  Reserved
  00000000            01239 DMX_BIT8        EQU     0       ; -------1  MSB of DMX channel
                      01240 
                      01241 ;
                      01242 ; TARGET_SSR has these flags:
                      01243 ;                     _______________________________________________________
                      01244 ; TARGET_SSR         |NOT_MY|INVALI|                                         |
                      01245 ;                    | _SSR |D_SSR |    SSR number for current command       |
                      01246 ;                    |______|______|______|______|______|______|______|______|
                      01247 ;
  00000007            01248 NOT_MY_SSR      EQU     7
  00000006            01249 INVALID_SSR     EQU     6               ; MUST be bit 6
  0000003F            01250 TARGET_SSR_MSK  EQU     0x3F
                      01251 
                      01252 
                      01253 ;
                      01254 ; CHIP-SPECIFIC PORT/PIN MAPPINGS
                      01255 ;
                      01256 ; 48-Channel board (master CPU)
                      01257 ;
                      01258                 IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      01259 PORT_RX          EQU    PORTC
                      01260 BIT_RX           EQU    7
                      01261 
                      01262 HAS_T_R          EQU    0
                      01263 HAS_ACTIVE       EQU    1
                      01264 HAS_SENSORS      EQU    1
                      01265 HAS_OPTION       EQU    1
                      01266 
                      01267 TRIS_SENS_A      EQU    TRISE   ; Sensor A == RED LED
                      01268 PORT_SENS_A      EQU    PORTE   ; Sensor A == RED LED
                      01269 BIT_SENS_A       EQU    2       ; Sensor A == RED LED
                      01270 TRIS_SENS_B      EQU    TRISE   ; Sensor B == GREEN LED
                      01271 PORT_SENS_B      EQU    PORTE   ; Sensor B == GREEN LED
                      01272 BIT_SENS_B       EQU    0       ; Sensor B == GREEN LED
                      01273 TRIS_SENS_C      EQU    TRISA   ; Sensor C == ACTIVE LED
                      01274 PORT_SENS_C      EQU    PORTA   ; Sensor C == ACTIVE LED
                      01275 BIT_SENS_C       EQU    5       ; Sensor C == ACTIVE LED
                      01276 TRIS_SENS_D      EQU    TRISE   ; Sensor D == YELLOW LED
                      01277 PORT_SENS_D      EQU    PORTE   ; Sensor D == YELLOW LED
                      01278 BIT_SENS_D       EQU    1       ; Sensor D == YELLOW LED
                      01279 
                      01280 PLAT_ACTIVE      EQU    LATA
                      01281 PLAT_RED         EQU    LATE
                      01282 PLAT_YELLOW      EQU    LATE
                      01283 PLAT_GREEN       EQU    LATE
                      01284 BIT_ACTIVE       EQU    5
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01285 BIT_RED          EQU    2
                      01286 BIT_YELLOW       EQU    1
                      01287 BIT_GREEN        EQU    0
                      01288 
                      01289 PORT_OPTION      EQU    PORTB
                      01290 BIT_OPTION       EQU    6
                      01291 
                      01292 PLAT_PWR_ON      EQU    LATB
                      01293 BIT_PWR_ON       EQU    7
                      01294 
                      01295 PLAT_0           EQU    LATC
                      01296 PLAT_1           EQU    LATC
                      01297 PLAT_2           EQU    LATC
                      01298 PLAT_3           EQU    LATC
                      01299 PLAT_4           EQU    LATC
                      01300 PLAT_5           EQU    LATD
                      01301 PLAT_6           EQU    LATD
                      01302 PLAT_7           EQU    LATB
                      01303 PLAT_8           EQU    LATA
                      01304 PLAT_9           EQU    LATB
                      01305 PLAT_10          EQU    LATA
                      01306 PLAT_11          EQU    LATB
                      01307 PLAT_12          EQU    LATA
                      01308 PLAT_13          EQU    LATB
                      01309 PLAT_14          EQU    LATA
                      01310 PLAT_15          EQU    LATB
                      01311 PLAT_16          EQU    LATA
                      01312 PLAT_17          EQU    LATD
                      01313 PLAT_18          EQU    LATD
                      01314 PLAT_19          EQU    LATC
                      01315 PLAT_20          EQU    LATD
                      01316 PLAT_21          EQU    LATD
                      01317 PLAT_22          EQU    LATD
                      01318 PLAT_23          EQU    LATD
                      01319 
                      01320 BIT_0            EQU    4
                      01321 BIT_1            EQU    3
                      01322 BIT_2            EQU    5
                      01323 BIT_3            EQU    2
                      01324 BIT_4            EQU    0
                      01325 BIT_5            EQU    5
                      01326 BIT_6            EQU    6
                      01327 BIT_7            EQU    1
                      01328 BIT_8            EQU    4
                      01329 BIT_9            EQU    2
                      01330 BIT_10           EQU    3
                      01331 BIT_11           EQU    3
                      01332 BIT_12           EQU    2
                      01333 BIT_13           EQU    4
                      01334 BIT_14           EQU    1
                      01335 BIT_15           EQU    5
                      01336 BIT_16           EQU    0
                      01337 BIT_17           EQU    7
                      01338 BIT_18           EQU    4
                      01339 BIT_19           EQU    1
                      01340 BIT_20           EQU    2
                      01341 BIT_21           EQU    1
                      01342 BIT_22           EQU    3
                      01343 BIT_23           EQU    0
                      01344 
                      01345 SSR_LIGHTS       EQU    24      ; first light ID (as opposed to SSR)
                      01346                 ELSE
                      01347                  IF LUMOS_CHIP_TYPE == LUMOS_CHIP_SLAVE
                      01348 ;
                      01349 ; 48-Channel Board (slave CPU)
                      01350 ;
                      01351 PORT_RX           EQU   PORTC
                      01352 BIT_RX            EQU   7
                      01353 
                      01354 HAS_T_R           EQU   1
                      01355 HAS_ACTIVE        EQU   0
                      01356 HAS_SENSORS       EQU   0
                      01357 HAS_OPTION        EQU   0
                      01358 
                      01359 PLAT_T_R          EQU   LATA
                      01360 PORT_T_R          EQU   PORTA
                      01361 TRIS_T_R          EQU   TRISA
                      01362 BIT_T_R           EQU   5
                      01363 
                      01364 PLAT_RED          EQU   LATE
                      01365 PLAT_YELLOW       EQU   LATE
                      01366 PLAT_GREEN        EQU   LATE
                      01367 
                      01368 BIT_RED           EQU   2
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01369 BIT_YELLOW        EQU   1
                      01370 BIT_GREEN         EQU   0
                      01371 
                      01372 PLAT_PWR_ON       EQU   LATB
                      01373 BIT_PWR_ON        EQU   7
                      01374 
                      01375 PLAT_0            EQU   LATC
                      01376 PLAT_1            EQU   LATC
                      01377 PLAT_2            EQU   LATC
                      01378 PLAT_3            EQU   LATC
                      01379 PLAT_4            EQU   LATC
                      01380 PLAT_5            EQU   LATD
                      01381 PLAT_6            EQU   LATD
                      01382 PLAT_7            EQU   LATB
                      01383 PLAT_8            EQU   LATA
                      01384 PLAT_9            EQU   LATB
                      01385 PLAT_10           EQU   LATA
                      01386 PLAT_11           EQU   LATB
                      01387 PLAT_12           EQU   LATA
                      01388 PLAT_13           EQU   LATB
                      01389 PLAT_14           EQU   LATA
                      01390 PLAT_15           EQU   LATB
                      01391 PLAT_16           EQU   LATA
                      01392 PLAT_17           EQU   LATD
                      01393 PLAT_18           EQU   LATD
                      01394 PLAT_19           EQU   LATC
                      01395 PLAT_20           EQU   LATD
                      01396 PLAT_21           EQU   LATD
                      01397 PLAT_22           EQU   LATD
                      01398 PLAT_23           EQU   LATD
                      01399 
                      01400 BIT_0             EQU   4
                      01401 BIT_1             EQU   3
                      01402 BIT_2             EQU   5
                      01403 BIT_3             EQU   2
                      01404 BIT_4             EQU   0
                      01405 BIT_5             EQU   5
                      01406 BIT_6             EQU   6
                      01407 BIT_7             EQU   1
                      01408 BIT_8             EQU   4
                      01409 BIT_9             EQU   2
                      01410 BIT_10            EQU   3
                      01411 BIT_11            EQU   3
                      01412 BIT_12            EQU   2
                      01413 BIT_13            EQU   4
                      01414 BIT_14            EQU   1
                      01415 BIT_15            EQU   5
                      01416 BIT_16            EQU   0
                      01417 BIT_17            EQU   7
                      01418 BIT_18            EQU   4
                      01419 BIT_19            EQU   1
                      01420 BIT_20            EQU   2
                      01421 BIT_21            EQU   1
                      01422 BIT_22            EQU   3
                      01423 BIT_23            EQU   0
                      01424 
                      01425 SSR_LIGHTS        EQU   24      ; first light ID (as opposed to SSR)
                      01426                  ELSE
                      01427                   IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      01428 ;
                      01429 ; 24-Channel board (Standalone CPU)
                      01430 ;
                      01431 PORT_RX            EQU  PORTC
                      01432 BIT_RX             EQU  7
                      01433 
                      01434 HAS_T_R            EQU  1
                      01435 HAS_ACTIVE         EQU  1
                      01436 HAS_SENSORS        EQU  1
                      01437 HAS_OPTION         EQU  1
                      01438 
                      01439 TRIS_SENS_A        EQU  TRISE   ; Sensor A == RED LED
                      01440 PORT_SENS_A        EQU  PORTE   ; Sensor A == RED LED
                      01441 BIT_SENS_A         EQU  2       ; Sensor A == RED LED
                      01442 TRIS_SENS_B        EQU  TRISE   ; Sensor B == GREEN LED
                      01443 PORT_SENS_B        EQU  PORTE   ; Sensor B == GREEN LED
                      01444 BIT_SENS_B         EQU  0       ; Sensor B == GREEN LED
                      01445 TRIS_SENS_C        EQU  TRISA   ; Sensor C == ACTIVE LED
                      01446 PORT_SENS_C        EQU  PORTA   ; Sensor C == ACTIVE LED
                      01447 BIT_SENS_C         EQU  5       ; Sensor C == ACTIVE LED
                      01448 TRIS_SENS_D        EQU  TRISE   ; Sensor D == YELLOW LED
                      01449 PORT_SENS_D        EQU  PORTE   ; Sensor D == YELLOW LED
                      01450 BIT_SENS_D         EQU  1       ; Sensor D == YELLOW LED
                      01451 
                      01452 PLAT_T_R           EQU  LATB
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01453 PORT_T_R           EQU  PORTB
                      01454 TRIS_T_R           EQU  TRISB
                      01455 BIT_T_R            EQU  0
                      01456 
                      01457 PLAT_ACTIVE        EQU  LATA
                      01458 PLAT_RED           EQU  LATE
                      01459 PLAT_YELLOW        EQU  LATE
                      01460 PLAT_GREEN         EQU  LATE
                      01461 BIT_ACTIVE         EQU  5
                      01462 BIT_RED            EQU  2
                      01463 BIT_YELLOW         EQU  1
                      01464 BIT_GREEN          EQU  0
                      01465 
                      01466 PORT_OPTION        EQU  PORTB
                      01467 BIT_OPTION         EQU  6
                      01468 
                      01469 PLAT_PWR_ON        EQU  LATB
                      01470 BIT_PWR_ON         EQU  7
                      01471 
                      01472 PLAT_0             EQU  LATB
                      01473 PLAT_1             EQU  LATB
                      01474 PLAT_2             EQU  LATB
                      01475 PLAT_3             EQU  LATB
                      01476 PLAT_4             EQU  LATB
                      01477 PLAT_5             EQU  LATD
                      01478 PLAT_6             EQU  LATD
                      01479 PLAT_7             EQU  LATD
                      01480 PLAT_8             EQU  LATD
                      01481 PLAT_9             EQU  LATC
                      01482 PLAT_10            EQU  LATC
                      01483 PLAT_11            EQU  LATD
                      01484 PLAT_12            EQU  LATD
                      01485 PLAT_13            EQU  LATD
                      01486 PLAT_14            EQU  LATD
                      01487 PLAT_15            EQU  LATC
                      01488 PLAT_16            EQU  LATC
                      01489 PLAT_17            EQU  LATC
                      01490 PLAT_18            EQU  LATC
                      01491 PLAT_19            EQU  LATA
                      01492 PLAT_20            EQU  LATA
                      01493 PLAT_21            EQU  LATA
                      01494 PLAT_22            EQU  LATA
                      01495 PLAT_23            EQU  LATA
                      01496 
                      01497 BIT_0              EQU  5
                      01498 BIT_1              EQU  4
                      01499 BIT_2              EQU  3
                      01500 BIT_3              EQU  2
                      01501 BIT_4              EQU  1
                      01502 BIT_5              EQU  7
                      01503 BIT_6              EQU  6
                      01504 BIT_7              EQU  5
                      01505 BIT_8              EQU  4
                      01506 BIT_9              EQU  5
                      01507 BIT_10             EQU  4
                      01508 BIT_11             EQU  3
                      01509 BIT_12             EQU  2
                      01510 BIT_13             EQU  1
                      01511 BIT_14             EQU  0
                      01512 BIT_15             EQU  3
                      01513 BIT_16             EQU  2
                      01514 BIT_17             EQU  1
                      01515 BIT_18             EQU  0
                      01516 BIT_19             EQU  4
                      01517 BIT_20             EQU  3
                      01518 BIT_21             EQU  2
                      01519 BIT_22             EQU  1
                      01520 BIT_23             EQU  0
                      01521 
                      01522 SSR_LIGHTS         EQU  24      ; first light ID (as opposed to SSR)
                      01523                   ELSE
                      01524                    IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      01525 ;
                      01526 ; 4-Channel Board (Mini Standalone CPU)
                      01527 ;
                      01528 PORT_RX             EQU PORTB
                      01529 BIT_RX              EQU 5
                      01530 
                      01531 HAS_T_R             EQU 1
                      01532 HAS_ACTIVE          EQU 1
                      01533 HAS_SENSORS         EQU 1
                      01534 HAS_OPTION          EQU 1
                      01535 
                      01536 TRIS_SENS_A         EQU TRISC   ; Sensor A == ACTIVE LED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01537 PORT_SENS_A         EQU PORTC   ; Sensor A == ACTIVE LED
                      01538 BIT_SENS_A          EQU 5       ; Sensor A == ACTIVE LED
                      01539 TRIS_SENS_B         EQU TRISC   ; Sensor B == RED LED
                      01540 PORT_SENS_B         EQU PORTC   ; Sensor B == RED LED
                      01541 BIT_SENS_B          EQU 6       ; Sensor B == RED LED
                      01542 TRIS_SENS_C         EQU TRISC   ; Sensor C == YELLOW LED
                      01543 PORT_SENS_C         EQU PORTC   ; Sensor C == YELLOW LED
                      01544 BIT_SENS_C          EQU 3       ; Sensor C == YELLOW LED
                      01545 TRIS_SENS_D         EQU TRISC   ; Sensor D
                      01546 PORT_SENS_D         EQU PORTC   ; Sensor D
                      01547 BIT_SENS_D          EQU 7       ; Sensor D
                      01548 
                      01549 PLAT_T_R            EQU LATB
                      01550 PORT_T_R            EQU PORTB
                      01551 TRIS_T_R            EQU TRISB
                      01552 BIT_T_R             EQU 6
                      01553 
                      01554 PLAT_ACTIVE         EQU LATC
                      01555 PLAT_RED            EQU LATC
                      01556 PLAT_YELLOW         EQU LATC
                      01557 PLAT_GREEN          EQU LATC
                      01558 BIT_ACTIVE          EQU 5
                      01559 BIT_RED             EQU 6
                      01560 BIT_YELLOW          EQU 3
                      01561 BIT_GREEN           EQU 4
                      01562 
                      01563 PORT_OPTION         EQU PORTA
                      01564 BIT_OPTION          EQU 1
                      01565 
                      01566 PLAT_PWR_ON         EQU LATA
                      01567 BIT_PWR_ON          EQU 0
                      01568 
                      01569 PLAT_0              EQU LATB
                      01570 PLAT_1              EQU LATC
                      01571 PLAT_2              EQU LATC
                      01572 PLAT_3              EQU LATC
                      01573 
                      01574 BIT_0               EQU 4
                      01575 BIT_1               EQU 2
                      01576 BIT_2               EQU 1
                      01577 BIT_3               EQU 0
                      01578 
                      01579 SSR_LIGHTS          EQU 4       ; first light ID (as opposed to SSR)
                      01580                    ELSE
                      01581                     IF QSCC_PORT
                      01582                      #include "qscc_hook_main_pins.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos device initialization code which sets up I/O pins.
                      00027 ; We want them arranged differently than the Lumos controllers do, but we put
                      00028 ; the QuizShow code here to keep the Lumos product clean and separate.
                      00029 ; 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_main_pins only used for QS*C systems"
                      00032         ENDIF
                      00033 
                      00034 ;
                      00035 ; QSCC
                      00036 ;
                      00037                     IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00038 N_BUTTONS            EQU        6       ; X L A B C D
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 BTN_IDX_X0           EQU        0
                      00040 BTN_IDX_L0           EQU        1
                      00041 BTN_IDX_A0           EQU        2
                      00042 BTN_IDX_B0           EQU        3
                      00043 BTN_IDX_C0           EQU        4
                      00044 BTN_IDX_D0           EQU        5
                      00045 PORT_X0              EQU        PORTA
                      00046 PORT_L0              EQU        PORTA
                      00047 PORT_A0              EQU        PORTA
                      00048 PORT_B0              EQU        PORTA
                      00049 PORT_C0              EQU        PORTA
                      00050 PORT_D0              EQU        PORTA
                      00051 BIT_X0               EQU        1
                      00052 BIT_L0               EQU        0
                      00053 BIT_A0               EQU        5
                      00054 BIT_B0               EQU        4
                      00055 BIT_C0               EQU        3
                      00056 BIT_D0               EQU        2
                      00057 
                      00058 QS_SENS_PORT         EQU        PORTA           ;      76543210
                      00059 QS_SENS_MASK         EQU        B'00111111'     ; RA:  00ABCDXL
                      00060 QS_SENS_CONF         EQU        B'00101000'     ; A+C -> config mode
                      00061 
                      00062 PORT_RX              EQU        PORTC
                      00063 BIT_RX               EQU        7
                      00064 
                      00065 HAS_T_R              EQU        1
                      00066 HAS_ACTIVE           EQU        0
                      00067 HAS_SENSORS          EQU        0
                      00068 HAS_OPTION           EQU        0
                      00069 HAS_STATUS_LEDS      EQU        0
                      00070 HAS_POWER_CTRL       EQU        0
                      00071 
                      00072 PLAT_T_R             EQU        LATC
                      00073 PORT_T_R             EQU        PORTC
                      00074 TRIS_T_R             EQU        TRISC
                      00075 BIT_T_R              EQU        3
                      00076 
                      00077 CHAN_X0R             EQU        .0
                      00078 CHAN_X0G             EQU        .1
                      00079 CHAN_X0B             EQU        .2
                      00080 CHAN_L0R             EQU        .3
                      00081 CHAN_L0Y             EQU        .4
                      00082 CHAN_L0G             EQU        .5
                      00083 CHAN_A0L             EQU        .6
                      00084 CHAN_B0L             EQU        .7
                      00085 CHAN_C0L             EQU        .8
                      00086 CHAN_D0L             EQU        .9
                      00087 CHAN_F_R             EQU        .10
                      00088 CHAN_F_G             EQU        .11
                      00089 CHAN_F_B             EQU        .12
                      00090 CHAN_F_W             EQU        .13
                      00091 
                      00092 PLAT_0               EQU        LATC    ; XR
                      00093 PLAT_1               EQU        LATC    ; XG
                      00094 PLAT_2               EQU        LATC    ; XB
                      00095 PLAT_3               EQU        LATE    ; LR
                      00096 PLAT_4               EQU        LATE    ; LY
                      00097 PLAT_5               EQU        LATE    ; LG
                      00098 PLAT_6               EQU        LATB    ; AL
                      00099 PLAT_7               EQU        LATB    ; BL
                      00100 PLAT_8               EQU        LATB    ; CL
                      00101 PLAT_9               EQU        LATB    ; DL
                      00102 PLAT_10              EQU        LATB    ; FR
                      00103 PLAT_11              EQU        LATB    ; FG
                      00104 PLAT_12              EQU        LATB    ; FB
                      00105 PLAT_13              EQU        LATB    ; FW
                      00106 SSR_MAX              EQU        13
                      00107 
                      00108 BIT_0                EQU        2       ; XR
                      00109 BIT_1                EQU        1       ; XG
                      00110 BIT_2                EQU        0       ; XB
                      00111 BIT_3                EQU        2       ; LR
                      00112 BIT_4                EQU        0       ; LY
                      00113 BIT_5                EQU        1       ; LG
                      00114 BIT_6                EQU        7       ; AL
                      00115 BIT_7                EQU        6       ; BL
                      00116 BIT_8                EQU        5       ; CL
                      00117 BIT_9                EQU        4       ; DL
                      00118 BIT_10               EQU        3       ; FR
                      00119 BIT_11               EQU        2       ; FG
                      00120 BIT_12               EQU        1       ; FB
                      00121 BIT_13               EQU        0       ; FW
                      00122                     ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00123                      IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
  0000000A            00124 N_BUTTONS             EQU       10      ; X0 L0 X1 L1 ... X4 L4
  00000000            00125 BTN_IDX_X0            EQU       0
  00000001            00126 BTN_IDX_L0            EQU       1
  00000002            00127 BTN_IDX_X1            EQU       2
  00000003            00128 BTN_IDX_L1            EQU       3
  00000004            00129 BTN_IDX_X2            EQU       4
  00000005            00130 BTN_IDX_L2            EQU       5
  00000006            00131 BTN_IDX_X3            EQU       6
  00000007            00132 BTN_IDX_L3            EQU       7
  00000008            00133 BTN_IDX_X4            EQU       8
  00000009            00134 BTN_IDX_L4            EQU       9
                      00135 
  00000F80            00136 QS_SENS_PORT          EQU       PORTA           ;      76543210
  0000003F            00137 QS_SENS_MASK          EQU       B'00111111'     ; RA:  00LXXLXL
  00000028            00138 QS_SENS_CONF          EQU       B'00101000'     ;        220011
  00000006            00139 QS_SENS_STAND         EQU       B'00000110'     ; L2+X0: CONF; X1+L0: stand
                      00140 
  00000F80            00141 PORT_X0               EQU       PORTA
  00000F80            00142 PORT_L0               EQU       PORTA
  00000F80            00143 PORT_X1               EQU       PORTA
  00000F80            00144 PORT_L1               EQU       PORTA
  00000F80            00145 PORT_X2               EQU       PORTA
  00000F80            00146 PORT_L2               EQU       PORTA
  00000F82            00147 PORT_X3               EQU       PORTC
  00000F83            00148 PORT_L3               EQU       PORTD
  00000F83            00149 PORT_X4               EQU       PORTD
  00000F82            00150 PORT_L4               EQU       PORTC
  00000003            00151 BIT_X0                EQU       3
  00000002            00152 BIT_L0                EQU       2
  00000001            00153 BIT_X1                EQU       1
  00000000            00154 BIT_L1                EQU       0
  00000004            00155 BIT_X2                EQU       4
  00000005            00156 BIT_L2                EQU       5
  00000004            00157 BIT_X3                EQU       4
  00000000            00158 BIT_L3                EQU       0
  00000004            00159 BIT_X4                EQU       4
  00000005            00160 BIT_L4                EQU       5
                      00161 
  00000F82            00162 PORT_RX               EQU       PORTC
  00000007            00163 BIT_RX                EQU       7
                      00164 
  00000001            00165 HAS_T_R               EQU       1
  00000000            00166 HAS_ACTIVE            EQU       0
  00000000            00167 HAS_SENSORS           EQU       0
  00000000            00168 HAS_OPTION            EQU       0
  00000000            00169 HAS_STATUS_LEDS       EQU       0
  00000000            00170 HAS_POWER_CTRL        EQU       0
                      00171 
  00000F8B            00172 PLAT_T_R              EQU       LATC
  00000F82            00173 PORT_T_R              EQU       PORTC
  00000F94            00174 TRIS_T_R              EQU       TRISC
  00000003            00175 BIT_T_R               EQU       3
                      00176 
  00000000            00177 CHAN_X0R              EQU       .0
  00000001            00178 CHAN_X0G              EQU       .1
  00000002            00179 CHAN_X0B              EQU       .2
  00000003            00180 CHAN_L0R              EQU       .3
  00000004            00181 CHAN_X1R              EQU       .4
  00000005            00182 CHAN_X1G              EQU       .5
  00000006            00183 CHAN_X1B              EQU       .6
  00000007            00184 CHAN_L1R              EQU       .7
  00000008            00185 CHAN_X2R              EQU       .8
  00000009            00186 CHAN_X2G              EQU       .9
  0000000A            00187 CHAN_X2B              EQU       .10
  0000000B            00188 CHAN_L2R              EQU       .11
  0000000C            00189 CHAN_X3R              EQU       .12
  0000000D            00190 CHAN_X3G              EQU       .13
  0000000E            00191 CHAN_X3B              EQU       .14
  0000000F            00192 CHAN_L3R              EQU       .15
  00000010            00193 CHAN_X4R              EQU       .16
  00000011            00194 CHAN_X4G              EQU       .17
  00000012            00195 CHAN_X4B              EQU       .18
  00000013            00196 CHAN_L4R              EQU       .19
  00000F8B            00197 PLAT_0                EQU       LATC    ; X0R
  00000F8B            00198 PLAT_1                EQU       LATC    ; X0G
  00000F8B            00199 PLAT_2                EQU       LATC    ; X0B
  00000F8D            00200 PLAT_3                EQU       LATE    ; L0R
  00000F8A            00201 PLAT_4                EQU       LATB    ; X1R
  00000F8A            00202 PLAT_5                EQU       LATB    ; X1G
  00000F8A            00203 PLAT_6                EQU       LATB    ; X1B
  00000F8A            00204 PLAT_7                EQU       LATB    ; L1R
  00000F8A            00205 PLAT_8                EQU       LATB    ; X2R
  00000F8A            00206 PLAT_9                EQU       LATB    ; X2G
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000F8A            00207 PLAT_10               EQU       LATB    ; X2B
  00000F8D            00208 PLAT_11               EQU       LATE    ; L2R
  00000F8C            00209 PLAT_12               EQU       LATD    ; X3R
  00000F8C            00210 PLAT_13               EQU       LATD    ; X3G
  00000F8C            00211 PLAT_14               EQU       LATD    ; X3B
  00000F8D            00212 PLAT_15               EQU       LATE    ; L3R
  00000F8A            00213 PLAT_16               EQU       LATB    ; X4R
  00000F8C            00214 PLAT_17               EQU       LATD    ; X4G
  00000F8C            00215 PLAT_18               EQU       LATD    ; X4B
  00000F8C            00216 PLAT_19               EQU       LATD    ; L4R
  00000013            00217 SSR_MAX               EQU       19
                      00218 
  00000002            00219 BIT_0                 EQU       2       ; X0R
  00000001            00220 BIT_1                 EQU       1       ; X0G
  00000000            00221 BIT_2                 EQU       0       ; X0B
  00000002            00222 BIT_3                 EQU       2       ; L0R
  00000007            00223 BIT_4                 EQU       7       ; X1R
  00000006            00224 BIT_5                 EQU       6       ; X1G
  00000005            00225 BIT_6                 EQU       5       ; X1B
  00000004            00226 BIT_7                 EQU       4       ; L1R
  00000003            00227 BIT_8                 EQU       3       ; X2R
  00000002            00228 BIT_9                 EQU       2       ; X2G
  00000001            00229 BIT_10                EQU       1       ; X2B
  00000000            00230 BIT_11                EQU       0       ; L2R
  00000007            00231 BIT_12                EQU       7       ; X3R
  00000006            00232 BIT_13                EQU       6       ; X3G
  00000005            00233 BIT_14                EQU       5       ; X3B
  00000001            00234 BIT_15                EQU       1       ; L3R
  00000000            00235 BIT_16                EQU       0       ; X4R
  00000003            00236 BIT_17                EQU       3       ; X4G
  00000001            00237 BIT_18                EQU       1       ; X4B
  00000002            00238 BIT_19                EQU       2       ; L4R
                      00239                      ENDIF
                      00240                     ENDIF
                      00241 
                      01583                     ELSE
                      01584                      ERROR "Invalid platform select"
                      01585                     ENDIF
                      01586                    ENDIF
                      01587                   ENDIF
                      01588                  ENDIF
                      01589                 ENDIF
                      01590 ;
                      01591 ; THESE SSR LINES ARE NEGATIVE-LOGIC CONTROLLED!
                      01592 ; (0=ON, 1=OFF)
                      01593 ;
                      01594 
                      01595 ; In this version, we have an array of outputs mapped with 0-255 values
                      01596 ; and another block of flags, etc. in SSR_DATA_BANK.
                      01597 ; We include the panel LEDs here, too, so we can handle them like the 
                      01598 ; others as far as timed patterns and display refreshes and the like.
                      01599 ;
                      01600 ; Offsets for panel lights
                      01601                         IF      HAS_STATUS_LEDS
                      01602 SSR_GREEN                EQU    SSR_LIGHTS+0    ; NOTE These are positive-logic, not negative like SSRs
                      01603 SSR_YELLOW               EQU    SSR_LIGHTS+1
                      01604 SSR_RED                  EQU    SSR_LIGHTS+2
                      01605 ;
                      01606 ;
                      01607 ; Aliases for macro expansion (continues SSR numbering into these too)
                      01608 ;
                      01609 PLAT_0                   EQU    PLAT_RED
                      01610 PLAT_0                   EQU    PLAT_YELLOW
                      01611 PLAT_0                   EQU    PLAT_GREEN
                      01612 BIT_0                    EQU    BIT_RED
                      01613 BIT_0                    EQU    BIT_YELLOW
                      01614 BIT_0                    EQU    BIT_GREEN
                      01615 ;
                      01616 ;
                      01617                          IF HAS_ACTIVE
                      01618 SSR_ACTIVE                EQU   SSR_LIGHTS+3
                      01619 PLAT_0                    EQU   PLAT_ACTIVE
                      01620 BIT_0                     EQU   BIT_ACTIVE
                      01621 SSR_MAX                   EQU   SSR_LIGHTS+3
                      01622                          ELSE
                      01623 SSR_MAX                   EQU   SSR_LIGHTS+2
                      01624                          ENDIF
                      01625                         ENDIF
                      01626 
                      01627                         IF HAS_STATUS_LEDS
                      01628 OUTPUT_CHAN_MAX          EQU    SSR_LIGHTS-1
                      01629                         ELSE
  00000013            01630 OUTPUT_CHAN_MAX          EQU    SSR_MAX
                      01631                         ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01632 
                      01633 WAIT_FOR_SENTINEL MACRO MAX_LEN, SENTINEL_VALUE, NEXT_STATE
                      01634          MOVLW  MAX_LEN
                      01635          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
                      01636          MOVLW  SENTINEL_VALUE
                      01637          MOVWF  YY_LOOK_FOR, ACCESS
                      01638          MOVLW  6                       ; -> state 6 (wait for end of packet)
                      01639          MOVWF  YY_STATE, ACCESS
                      01640          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
                      01641          MOVLW  NEXT_STATE
                      01642          MOVWF  YY_NEXT_STATE, ACCESS
                      01643         ENDM
                      01644 
  00000001            01645 ERR_CLASS_OVERRUN       EQU     1       ; ID dispatch overrun
  00000002            01646 ERR_CLASS_IN_VALID      EQU     2       ; Input validation failure
  00000003            01647 ERR_CLASS_FATAL_RESET   EQU     3       ; reset failure
  00000004            01648 ERR_CLASS_DEVICE        EQU     4       ; hardware issue
  00000005            01649 ERR_CLASS_INT_COMMAND   EQU     5       ; internal command invalid
                      01650 ERR_BUG MACRO   ERR_CODE, ERR_CLASS
                      01651          MOVLW  ERR_CODE
                      01652          MOVWF  LAST_ERROR, ACCESS
                      01653          IF HAS_ACTIVE
                      01654           SET_SSR_RAPID_FLASH SSR_ACTIVE
                      01655          ENDIF
                      01656          IF HAS_STATUS_LEDS
                      01657           SET_SSR_RAPID_FLASH SSR_YELLOW
                      01658           IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01659            SET_SSR_RAPID_FLASH SSR_RED
                      01660            SET_SSR_OFF SSR_GREEN
                      01661           ELSE
                      01662            SET_SSR_OFF SSR_RED
                      01663           ENDIF
                      01664          ENDIF
                      01665          IF ROLE_MASTER
                      01666           ; Send extra flags to slave
                      01667           MOVLW 0xF0
                      01668           CALL  SIO_WRITE_W
                      01669           MOVLW 0x21
                      01670           CALL  SIO_WRITE_W
                      01671           IF ERR_CLASS == ERR_CLASS_OVERRUN
                      01672            MOVLW B'00101000'
                      01673            CALL SIO_WRITE_W
                      01674            MOVLW B'00000000'
                      01675           ELSE
                      01676            IF ERR_CLASS == ERR_CLASS_IN_VALID
                      01677             MOVLW B'00111000'
                      01678             CALL SIO_WRITE_W
                      01679             MOVLW B'00000001'
                      01680            ELSE
                      01681             IF ERR_CLASS == ERR_CLASS_FATAL_RESET
                      01682              MOVLW B'00101101'
                      01683              CALL SIO_WRITE_W
                      01684              MOVLW B'00000101'
                      01685             ELSE
                      01686              IF ERR_CLASS == ERR_CLASS_DEVICE
                      01687               MOVLW B'00111000'
                      01688               CALL SIO_WRITE_W
                      01689               MOVLW B'00000101'
                      01690              ELSE
                      01691               IF ERR_CLASS == ERR_CLASS_INT_COMMAND
                      01692                MOVLW B'00111000'
                      01693                CALL SIO_WRITE_W
                      01694                MOVLW B'00000110'
                      01695               ELSE
                      01696                MOVLW B'00000101'
                      01697                CALL  SIO_WRITE_W
                      01698                MOVLW B'00000000'
                      01699               ENDIF
                      01700              ENDIF
                      01701             ENDIF
                      01702            ENDIF
                      01703           ENDIF
                      01704           CALL SIO_WRITE_W
                      01705          ENDIF
                      01706          CLRF   YY_STATE, ACCESS
                      01707          RETURN
                      01708         ENDM
                      01709 
                      01710 #include "lumos_set_ssr.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00006 ;@@ @      @   @  @   @   @@@    @@@          LUMOS: LIGHT ORCHESTRATION    @@
                      00007 ;@@ @      @   @  @@ @@  @   @  @   @         SYSTEM FIRMWARE VERSION 3.0   @@
                      00008 ;@@ @      @   @  @ @ @  @   @  @                                           @@
                      00009 ;@@ @      @   @  @   @  @   @   @@@   @@@@@  FOR 24- AND 48-CHANNEL AC/DC  @@
                      00010 ;@@ @      @   @  @   @  @   @      @         LUMOS CONTROLLER UNITS        @@
                      00011 ;@@ @      @   @  @   @  @   @  @   @         BASED ON THE PIC18F4685 CHIP  @@
                      00012 ;@@ @@@@@   @@@   @   @   @@@    @@@                                        @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2012, 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  
                      00018 ; Released under the terms and conditions of the Open Software
                      00019 ; License, version 3.0.
                      00020 ;
                      00021 ; Portions based on earlier code copyright (c) 2004, 2005, 2006, 2007
                      00022 ; Steven L. Willoughby, Aloha, Oregon, USA.  All Rights Reserved.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 #ifndef LUMOS_SET_SSR_INC
                      00027 #define LUMOS_SET_SSR_INC
                      00028 
                      00029  IF LUMOS_ARCH == LUMOS_ARCH_4685
  00000400            00030 SSR_DATA_BANK   EQU     0x400
  00000500            00031 MAIN_DATA       EQU     0x500
  000000C8            00032 YY_BUF_LEN      EQU     .200
                      00033  ELSE
                      00034   IF LUMOS_ARCH == LUMOS_ARCH_14K50
                      00035 SSR_DATA_BANK   EQU     0x060
                      00036 MAIN_DATA       EQU     0x088
                      00037 YY_BUF_LEN      EQU     .90 
                      00038   ELSE
                      00039    ERROR "Invalid architecture switch for SSR_DATA_BANK"
                      00040   ENDIF
                      00041  ENDIF
                      00042 
                      00043 ;
                      00044 ; SSR_FLAGS words for each output show state information about those
                      00045 ; channels.
                      00046 ;
  00000007            00047 FADE_UP         EQU     7       ; 1-------  This channel is fading up
  00000006            00048 FADE_DOWN       EQU     6       ; -1------  This channel is fading down
  00000005            00049 FADE_CYCLE      EQU     5       ; --1-----  This channel is fading up<-->down
  00000004            00050 MAX_OFF_TIME    EQU     4       ; ---1----  Use maximum off-time in cycle
  00000080            00051 BIT_FADE_UP     EQU     0x80
  00000040            00052 BIT_FADE_DOWN   EQU     0x40
  00000020            00053 BIT_FADE_CYCLE  EQU     0x20
  00000010            00054 BIT_MAX_OFF_TIME EQU    0x10
                      00055 
                      00056 SET_SSR_VALUE MACRO IDX, LEVEL
                      00057         BANKSEL SSR_DATA_BANK
                      00058          MOVLW  LEVEL
                      00059          MOVWF  SSR_00_VALUE+IDX, BANKED
                      00060          CLRF   SSR_00_STEP+IDX, BANKED
                      00061          CLRF   SSR_00_SPEED+IDX, BANKED
                      00062          CLRF   SSR_00_COUNTER+IDX, BANKED
                      00063          CLRF   SSR_00_FLAGS+IDX, BANKED
                      00064         ENDM
                      00065 
                      00066 SET_SSR_PATTERN MACRO IDX, LEVEL, STEP, SPEED, FLAGS
                      00067         BANKSEL SSR_DATA_BANK
                      00068          MOVLW  LEVEL
                      00069          MOVWF  SSR_00_VALUE+IDX, BANKED
                      00070          MOVLW  STEP
                      00071          MOVWF  SSR_00_STEP+IDX, BANKED
                      00072          MOVLW  SPEED
                      00073          MOVWF  SSR_00_SPEED+IDX, BANKED
                      00074          MOVWF  SSR_00_COUNTER+IDX, BANKED
                      00075          MOVLW  FLAGS
                      00076          MOVWF  SSR_00_FLAGS+IDX, BANKED
                      00077         ENDM
                      00078 
                      00079 SET_SSR_NORMAL_MODE MACRO IDX
                      00080          SET_SSR_PATTERN IDX, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      00081         ENDM
                      00082 
                      00083 SET_SSR_DMX_MODE MACRO IDX
                      00084          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00085         ENDM
                      00086 
                      00087 SET_SSR_RAPID_FLASH MACRO IDX
                      00088          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE
                      00089         ENDM
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00090 
                      00091 SET_SSR_BLINK_FADE MACRO IDX
                      00092          SET_SSR_PATTERN IDX, 255,   2,  1, BIT_FADE_DOWN
                      00093         ENDM
                      00094 
                      00095 SET_SSR_SLOW_FLASH MACRO IDX
                      00096          SET_SSR_PATTERN IDX, 255, 255, 30, BIT_FADE_DOWN|BIT_FADE_CYCLE|BIT_MAX_OFF_TIME
                      00097         ENDM
                      00098 
                      00099 SET_SSR_RAPID_FADE MACRO IDX
                      00100          SET_SSR_PATTERN IDX, 0, 4, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00101         ENDM
                      00102 
                      00103 SET_SSR_SLOW_FADE MACRO IDX
                      00104          SET_SSR_PATTERN IDX, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      00105         ENDM
                      00106 
                      00107 SET_SSR_STEADY MACRO IDX
                      00108          SET_SSR_VALUE IDX, 255
                      00109         ENDM
                      00110 
                      00111 SET_SSR_OFF MACRO IDX
                      00112          SET_SSR_VALUE IDX, 0
                      00113         ENDM
                      00114 #endif
                      01711 #include "lumos_8bit_escapes.inc"
                      00001 ;
                      00002 ; Sending 8-bit data bytes in our 7-bit protocol
                      00003 ; (in data bytes, in other words) requires this
                      00004 ; escaping mechanism:
                      00005 ;   If high bit set, send $7E + low 7 bits
                      00006 ;   Literal $7E is sent as $7F + $7E
                      00007 ;   Literal $7F is sent as $7F + $7F
                      00008 ; 
                      00009 ; Other interesting cases inferred from the above:
                      00010 ;   $FE is sent as $7E + $7E
                      00011 ;   $FF is sent as $7E + $7F
                      00012 ;
                      00013 ; This calls the SIO_WRITE_W entry point, so the bank
                      00014 ; will shift as a result.
                      00015 ;
                      00016 SND8BIT MACRO   VALUE
                      00017         MOVLW   VALUE
                      00018         SEND_8_BIT_W
                      00019         ENDM
                      00020 
  00000001            00021 S8B_LABEL SET   1
                      00022 SEND_8_BIT_W MACRO
                      00023         MOVWF   EIGHTBITSIOBUF, ACCESS
                      00024         MOVLW   0x7F                            ; sending literal $7F?
                      00025         CPFSEQ  EIGHTBITSIOBUF, ACCESS
                      00026         BRA     S8B_CHK_7E#v(S8B_LABEL)
                      00027         CALL    SIO_WRITE_W                     ; send $7F to escape first
                      00028         MOVLW   0x7F                            ; then the literal $7F itself.
                      00029         CALL    SIO_WRITE_W                     
                      00030         BRA     S8B_END#v(S8B_LABEL)
                      00031 S8B_CHK_7E#v(S8B_LABEL):
                      00032         MOVLW   0x7E                            ; sending literal $7E?
                      00033         CPFSEQ  EIGHTBITSIOBUF, ACCESS
                      00034         BRA     S8B_CHK_MSB#v(S8B_LABEL)
                      00035         MOVLW   0x7F                            ; send $7F to escape first
                      00036         CALL    SIO_WRITE_W
                      00037         MOVLW   0x7E                            ; then the literal $7E itself.
                      00038         CALL    SIO_WRITE_W
                      00039         BRA     S8B_END#v(S8B_LABEL)
                      00040 S8B_CHK_MSB#v(S8B_LABEL):
                      00041         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
                      00042         BRA     S8B_SEND_NORMAL#v(S8B_LABEL)
                      00043         MOVLW   0x7E                            ; send $7E to escape first
                      00044         CALL    SIO_WRITE_W
                      00045         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
                      00046 S8B_SEND_NORMAL#v(S8B_LABEL):
                      00047         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
                      00048         CALL    SIO_WRITE_W     
                      00049 S8B_END#v(S8B_LABEL):
                      00050 S8B_LABEL ++
                      00051         ENDM
                      00052 
                      01712 
                      01713 ;==============================================================================
                      01714 ; BOOT BLOCK
                      01715 ;______________________________________________________________________________
                      01716 
                      01717 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01718 ; RESET VECTOR
                      01719 ;
                      01720 V_RST   CODE    0x0000
000000 0004           01721         CLRWDT
000002 EF?? F???      01722         GOTO    START
                      01723 ;
                      01724 ; HIGH-PRIORITY INTERRUPT VECTOR
                      01725 ;
                      01726 V_INT_H CODE    0x0008
000008 0004           01727         CLRWDT
00000A EF?? F???      01728         GOTO    INT_HIGH
                      01729 ;
                      01730 ; LOW-PRIORITY INTERRUPT VECTOR
                      01731 ;
                      01732 V_INT_L CODE    0x0018
000018 0004           01733         CLRWDT
00001A EF?? F???      01734         GOTO    INT_LOW
                      01735 ;
                      01736 ; INITIALIZATION CODE
                      01737 ;
                      01738 _BOOT   CODE    0x0100
                      01739 
000100                01740 S_FLASH:
                      01741         IF HAS_STATUS_LEDS
                      01742          BSF    PLAT_RED, BIT_RED, ACCESS
                      01743          RCALL  DELAY_1_6_SEC
                      01744          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01745          RCALL  DELAY_1_6_SEC
                      01746         
                      01747          BCF    PLAT_RED, BIT_RED, ACCESS
                      01748          RCALL  DELAY_1_6_SEC
                      01749          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01750          RCALL  DELAY_1_6_SEC
                      01751         ENDIF
000100 0012           01752         RETURN
                      01753 
000102                01754 D_FLASH:
                      01755         IF HAS_STATUS_LEDS
                      01756          BSF    PLAT_RED, BIT_RED, ACCESS
                      01757          RCALL  DELAY_1_12_SEC
                      01758          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01759          RCALL  DELAY_1_12_SEC
                      01760          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01761          RCALL  DELAY_1_12_SEC
                      01762          IF HAS_ACTIVE
                      01763           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01764           RCALL DELAY_1_12_SEC
                      01765          ENDIF
                      01766         
                      01767          BCF    PLAT_RED, BIT_RED, ACCESS
                      01768          RCALL  DELAY_1_12_SEC
                      01769          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      01770          RCALL  DELAY_1_12_SEC
                      01771          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      01772          RCALL  DELAY_1_12_SEC
                      01773          IF HAS_ACTIVE
                      01774           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      01775           RCALL DELAY_1_12_SEC
                      01776          ENDIF
                      01777         ENDIF
000102 0012           01778         RETURN
                      01779 
000104                01780 START:
000104 0004           01781         CLRWDT
000106 6AFC           01782         CLRF    STKPTR, ACCESS          ; clear stack error bits, set SP=0
000108 EC?? F???      01783         CALL    LUMOS_INIT
                      01784         IF ! HAS_SENSORS && !QSCC_PORT
                      01785          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS         ; If this device can't possibly
                      01786          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS         ; support sensor inputs, enable outputs
                      01787          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS         ; on those pins early to let the LEDs
                      01788          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS         ; work ASAP.
                      01789         ENDIF
                      01790         IF 0
                      01791         ;
                      01792         ; Extra start-up delay to investigate boot bug
                      01793         ;
                      01794         MOVLW   .10
                      01795         MOVWF   I, ACCESS
                      01796 SSS_SSS:
                      01797         CLRWDT
                      01798         CALL    S_FLASH
                      01799         DECFSZ  I, F, ACCESS
                      01800         BRA     SSS_SSS
                      01801         ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01802         ;
00010C EC?? F???      01803         CALL    D_FLASH
000110 EC?? F???      01804         CALL    SIO_INIT                ; call after other TRIS bits set
                      01805         ;
                      01806         ; Get EEPROM settings
                      01807         ;
                      01808         IF HAS_STATUS_LEDS
                      01809          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () () () R
                      01810         ENDIF
                      01811         ;
                      01812         ; Test sentinel values $000==$FF and $00F==$42.
                      01813         ; If they are not there, do a full factory reset of those
                      01814         ; settings to restore something that we know will work.
                      01815         ;
000114 0004           01816         CLRWDT
000116 6AAA           01817         CLRF    EEADRH, ACCESS          ; EEPROM location $000
000118 6AA9           01818         CLRF    EEADR, ACCESS           ; (note interrupts are still off now)
00011A 9EA6           01819         BCF     EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
00011C 9CA6           01820         BCF     EECON1, CFGS, ACCESS
00011E 94A6           01821         BCF     EECON1, WREN, ACCESS    ; disable writing
000120 80A6           01822         BSF     EECON1, RD, ACCESS      ; initiate read operation
000122 0EFF           01823         MOVLW   0xFF                    ; 
000124 62A8           01824         CPFSEQ  EEDATA, ACCESS          ; byte == $FF?
000126 D???           01825         BRA     FACTORY_RESET           ; if not, overwrite everything!
000128 0E0F           01826         MOVLW   0x0F                    ; try ending sentinel
00012A 6EA9           01827         MOVWF   EEADR, ACCESS           ; at $00F
00012C 80A6           01828         BSF     EECON1, RD, ACCESS
00012E 0E42           01829         MOVLW   0x42
000130 62A8           01830         CPFSEQ  EEDATA, ACCESS          ; byte == $42?
000132 D???           01831         BRA     FACTORY_RESET           ; else, overwrite.
                      01832         ;
                      01833         ; Values checked out, so assume EEPROM is intact.
                      01834         ; Read values into RAM variables and continue booting.
                      01835         ;
000134 0004           01836         CLRWDT
000136 98A1           01837         BCF     PIR2, EEIF, ACCESS      ; clear interrupt flag
                      01838         IF HAS_STATUS_LEDS
                      01839          BCF    PLAT_RED, BIT_RED, ACCESS       
                      01840          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y ()
                      01841         ENDIF
                      01842         ;
000138 94A6           01843         BCF     EECON1, WREN, ACCESS    ; Read (not write) access to memory
00013A 9EA6           01844         BCF     EECON1, EEPGD, ACCESS   ; Select access to DATA area
00013C 9CA6           01845         BCF     EECON1, CFGS, ACCESS
                      01846         ;
00013E 6AAA           01847         CLRF    EEADRH, ACCESS
000140 0E01           01848         MOVLW   1
000142 6EA9           01849         MOVWF   EEADR, ACCESS           ; EEPROM location 0x001: baud rate
000144 80A6           01850         BSF     EECON1, RD, ACCESS
000146 50A8           01851         MOVF    EEDATA, W, ACCESS
000148 EC?? F???      01852         CALL    SIO_SET_BAUD_W
                      01853         ;
00014C 2AA9           01854         INCF    EEADR, F, ACCESS        ; EEPROM location 0x002: device address
00014E 80A6           01855         BSF     EECON1, RD, ACCESS
000150 CFA8 F???      01856         MOVFF   EEDATA, MY_ADDRESS
                      01857         ;
000154 2AA9           01858         INCF    EEADR, F, ACCESS        ; EEPROM location 0x003: phase offset MSB
000156 80A6           01859         BSF     EECON1, RD, ACCESS
000158 CFA8 F???      01860         MOVFF   EEDATA, PHASE_OFFSETH
                      01861         ;
00015C 2AA9           01862         INCF    EEADR, F, ACCESS        ; EEPROM location 0x004: phase offset LSB
00015E 80A6           01863         BSF     EECON1, RD, ACCESS
000160 CFA8 F???      01864         MOVFF   EEDATA, PHASE_OFFSETL
                      01865         ;
000164 2AA9           01866         INCF    EEADR, F, ACCESS        ; EEPROM location 0x005: DMX slot MSB
000166 80A6           01867         BSF     EECON1, RD, ACCESS
000168 CFA8 F???      01868         MOVFF   EEDATA, DMX_SLOTH
                      01869         ;
00016C 2AA9           01870         INCF    EEADR, F, ACCESS        ; EEPROM location 0x006: DMX slot LSB
00016E 80A6           01871         BSF     EECON1, RD, ACCESS
000170 CFA8 F???      01872         MOVFF   EEDATA, DMX_SLOTL
000174 9C00           01873         BCF     DMX_SLOTH, DMX_SPEED, ACCESS    ; clear flag (we're not running at DMX speed yet)
                      01874         ;
000176 2AA9           01875         INCF    EEADR, F, ACCESS        ; EEPROM location 0x007: Sensor Configuration
                      01876         IF HAS_SENSORS
                      01877          BSF    EECON1, RD, ACCESS
                      01878          BTFSS  EEDATA, 3, ACCESS
                      01879          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      01880          BTFSS  EEDATA, 2, ACCESS
                      01881          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      01882          BTFSS  EEDATA, 1, ACCESS
                      01883          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      01884          BTFSS  EEDATA, 0, ACCESS
                      01885          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01886         ENDIF
                      01887         ;
000178 6AA9           01888         CLRF    EEADR, ACCESS   ; Leave pointer at 0x000
                      01889         ;
                      01890         IF HAS_STATUS_LEDS
                      01891          BSF    PLAT_GREEN, BIT_GREEN, ACCESS   ; Panel: () G Y ()
                      01892         ENDIF
                      01893         ;
00017A 989F           01894         BCF     IPR1, TXIP, ACCESS      ; TxD interrupt = low priority
00017C 9A9F           01895         BCF     IPR1, RCIP, ACCESS      ; RxD interrupt = low priority
00017E 0004           01896         CLRWDT
                      01897         ;
                      01898         ; Initialize data structures
                      01899         ;
000180 6A00           01900         CLRF    SSR_STATE, ACCESS
000182 6A00           01901         CLRF    SSR_STATE2, ACCESS
000184 6A00           01902         CLRF    YY_STATE, ACCESS
                      01903         ;
000186 0E80           01904         MOVLW   .128
000188 6E00           01905         MOVWF   OPTION_DEBOUNCE, ACCESS
00018A 6A00           01906         CLRF    OPTION_HOLD, ACCESS
00018C 6800           01907         SETF    AUTO_OFF_CTRH, ACCESS
00018E 6800           01908         SETF    AUTO_OFF_CTRL, ACCESS
000190 0104           01909         BANKSEL SSR_DATA_BANK
  00000000            01910 CH      SET     0
                      01911         WHILE CH<=SSR_MAX
000192 6B00           01912          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
000194 6B00           01913          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
000196 6B00           01914          CLRF   SSR_00_STEP+0,      BANKED
000198 6B00           01915          CLRF   SSR_00_SPEED+0,      BANKED
00019A 6B00           01916          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            01917 CH       ++
00019C 6B00           01912          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
00019E 6B00           01913          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
0001A0 6B00           01914          CLRF   SSR_00_STEP+1,      BANKED
0001A2 6B00           01915          CLRF   SSR_00_SPEED+1,      BANKED
0001A4 6B00           01916          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            01917 CH       ++
0001A6 6B00           01912          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
0001A8 6B00           01913          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
0001AA 6B00           01914          CLRF   SSR_00_STEP+2,      BANKED
0001AC 6B00           01915          CLRF   SSR_00_SPEED+2,      BANKED
0001AE 6B00           01916          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            01917 CH       ++
0001B0 6B00           01912          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
0001B2 6B00           01913          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
0001B4 6B00           01914          CLRF   SSR_00_STEP+3,      BANKED
0001B6 6B00           01915          CLRF   SSR_00_SPEED+3,      BANKED
0001B8 6B00           01916          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            01917 CH       ++
0001BA 6B00           01912          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
0001BC 6B00           01913          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
0001BE 6B00           01914          CLRF   SSR_00_STEP+4,      BANKED
0001C0 6B00           01915          CLRF   SSR_00_SPEED+4,      BANKED
0001C2 6B00           01916          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            01917 CH       ++
0001C4 6B00           01912          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
0001C6 6B00           01913          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
0001C8 6B00           01914          CLRF   SSR_00_STEP+5,      BANKED
0001CA 6B00           01915          CLRF   SSR_00_SPEED+5,      BANKED
0001CC 6B00           01916          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            01917 CH       ++
0001CE 6B00           01912          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
0001D0 6B00           01913          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
0001D2 6B00           01914          CLRF   SSR_00_STEP+6,      BANKED
0001D4 6B00           01915          CLRF   SSR_00_SPEED+6,      BANKED
0001D6 6B00           01916          CLRF   SSR_00_COUNTER+6,      BANKED
  00000007            01917 CH       ++
0001D8 6B00           01912          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
0001DA 6B00           01913          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
0001DC 6B00           01914          CLRF   SSR_00_STEP+7,      BANKED
0001DE 6B00           01915          CLRF   SSR_00_SPEED+7,      BANKED
0001E0 6B00           01916          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            01917 CH       ++
0001E2 6B00           01912          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
0001E4 6B00           01913          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
0001E6 6B00           01914          CLRF   SSR_00_STEP+8,      BANKED
0001E8 6B00           01915          CLRF   SSR_00_SPEED+8,      BANKED
0001EA 6B00           01916          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            01917 CH       ++
0001EC 6B00           01912          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
0001EE 6B00           01913          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
0001F0 6B00           01914          CLRF   SSR_00_STEP+9,      BANKED
0001F2 6B00           01915          CLRF   SSR_00_SPEED+9,      BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001F4 6B00           01916          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            01917 CH       ++
0001F6 6B00           01912          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
0001F8 6B00           01913          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
0001FA 6B00           01914          CLRF   SSR_00_STEP+10,     BANKED
0001FC 6B00           01915          CLRF   SSR_00_SPEED+10,     BANKED
0001FE 6B00           01916          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            01917 CH       ++
000200 6B00           01912          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
000202 6B00           01913          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
000204 6B00           01914          CLRF   SSR_00_STEP+11,     BANKED
000206 6B00           01915          CLRF   SSR_00_SPEED+11,     BANKED
000208 6B00           01916          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            01917 CH       ++
00020A 6B00           01912          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
00020C 6B00           01913          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
00020E 6B00           01914          CLRF   SSR_00_STEP+12,     BANKED
000210 6B00           01915          CLRF   SSR_00_SPEED+12,     BANKED
000212 6B00           01916          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            01917 CH       ++
000214 6B00           01912          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
000216 6B00           01913          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
000218 6B00           01914          CLRF   SSR_00_STEP+13,     BANKED
00021A 6B00           01915          CLRF   SSR_00_SPEED+13,     BANKED
00021C 6B00           01916          CLRF   SSR_00_COUNTER+13,     BANKED
  0000000E            01917 CH       ++
00021E 6B00           01912          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
000220 6B00           01913          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
000222 6B00           01914          CLRF   SSR_00_STEP+14,     BANKED
000224 6B00           01915          CLRF   SSR_00_SPEED+14,     BANKED
000226 6B00           01916          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            01917 CH       ++
000228 6B00           01912          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
00022A 6B00           01913          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
00022C 6B00           01914          CLRF   SSR_00_STEP+15,     BANKED
00022E 6B00           01915          CLRF   SSR_00_SPEED+15,     BANKED
000230 6B00           01916          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            01917 CH       ++
000232 6B00           01912          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
000234 6B00           01913          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
000236 6B00           01914          CLRF   SSR_00_STEP+16,     BANKED
000238 6B00           01915          CLRF   SSR_00_SPEED+16,     BANKED
00023A 6B00           01916          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            01917 CH       ++
00023C 6B00           01912          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
00023E 6B00           01913          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
000240 6B00           01914          CLRF   SSR_00_STEP+17,     BANKED
000242 6B00           01915          CLRF   SSR_00_SPEED+17,     BANKED
000244 6B00           01916          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            01917 CH       ++
000246 6B00           01912          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
000248 6B00           01913          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
00024A 6B00           01914          CLRF   SSR_00_STEP+18,     BANKED
00024C 6B00           01915          CLRF   SSR_00_SPEED+18,     BANKED
00024E 6B00           01916          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            01917 CH       ++
000250 6B00           01912          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
000252 6B00           01913          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
000254 6B00           01914          CLRF   SSR_00_STEP+19,     BANKED
000256 6B00           01915          CLRF   SSR_00_SPEED+19,     BANKED
000258 6B00           01916          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            01917 CH       ++
                      01918         ENDW
                      01919         IF HAS_STATUS_LEDS
                      01920          BSF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G Y R
                      01921         ENDIF
                      01922         ;
                      01923         ; Timer 0 for non-ZC boards
                      01924         ;
                      01925         IF LUMOS_SLICE_TIMER == LUMOS_INTERNAL
00025A 6AD7           01926          CLRF   TMR0H, ACCESS
00025C 6AD6           01927          CLRF   TMR0L, ACCESS
00025E 84F1           01928          BSF    INTCON2, TMR0IP, ACCESS ; set HIGH priority for timing
000260 8AF2           01929          BSF    INTCON, TMR0IE, ACCESS  ; enable timer 0 interrupts
000262 8ED5           01930          BSF    T0CON, TMR0ON, ACCESS   ; start timer 0 running
                      01931         ELSE
                      01932          IF LUMOS_SLICE_TIMER == LUMOS_ZC
                      01933           BSF   INTCON, INT0IE, ACCESS  ; enable ZC detect pin interrupt
                      01934          ELSE
                      01935           ERROR "LUMOS_SLICE_TIMER set incorrectly"
                      01936          ENDIF
                      01937         ENDIF
                      01938         IF HAS_STATUS_LEDS
                      01939          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () G () R
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01940         ENDIF
                      01941         ;
                      01942         ; Timer 2 for half-wave slice timing
                      01943         ;
000264 0E9F           01944         MOVLW   SLICE_TMR_PERIOD        ; set timer period
000266 6ECB           01945         MOVWF   PR2, ACCESS
000268 6ACC           01946         CLRF    TMR2, ACCESS            ; reset timer
00026A 829F           01947         BSF     IPR1, TMR2IP, ACCESS    ; set HIGH priority for timing
00026C 929E           01948         BCF     PIR1, TMR2IF, ACCESS    ; clear any pending interrupt
00026E 829D           01949         BSF     PIE1, TMR2IE, ACCESS    ; enable timer 2 interrupts
000270 84CA           01950         BSF     T2CON, TMR2ON, ACCESS   ; start timer 2 running
                      01951         ;
000272 8A9D           01952         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts
                      01953         ;
                      01954         ; Clear all interrupt flags and enable interrupts
                      01955         ;
000274 6A9E           01956         CLRF    PIR1, ACCESS
000276 6AA1           01957         CLRF    PIR2, ACCESS
000278 6AA4           01958         CLRF    PIR3, ACCESS
00027A 94F2           01959         BCF     INTCON, TMR0IF, ACCESS
00027C 92F2           01960         BCF     INTCON, INT0IF, ACCESS
00027E 8EF2           01961         BSF     INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000280 8CF2           01962         BSF     INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      01963         ;
                      01964         ; Check for factory reset jumper
                      01965         ;  (short J11 pins 4 and 5, then power up device [or press reset].  When 
                      01966         ;  all lights flash, pull the jumper away. device will restore factory 
                      01967         ;  settings.)
                      01968         ;                                                            ______
                      01969         ; With the jumper in place, the OPTION input will follow the PWRCTL output.
                      01970         ; If they start off unequal, we skip this check and don't disturb the power
                      01971         ; supply logic at all.  Otherwise, we will flip our output a couple of times
                      01972         ; and see that OPTION keeps pace, which indicates that the jumper is there.
                      01973         ; we'll wait for the jumper to be pulled to avoid an infinite loop of resets,
                      01974         ; and also to provide a way out (power off first and no reset will have happened).
                      01975         ;
000282 0004           01976         CLRWDT
                      01977         IF HAS_POWER_CTRL
                      01978          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; turn on power supply
                      01979         ENDIF
000284                01980 FACTORY_RESET_JUMPER_CHECK:
                      01981         IF HAS_OPTION
                      01982          RCALL  DELAY_1_12_SEC
                      01983          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS
                      01984          BRA    END_FRJC                        ; OPTION button not jumpered, boot normally
                      01985 
                      01986          CLRWDT                                 
                      01987          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping the output bit
                      01988          RCALL  DELAY_1_12_SEC
                      01989          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS ; OPTION was down, but not because of the 
                      01990          BRA    END_FRJC                        ; jumper--boot normally
                      01991 
                      01992          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping back
                      01993          RCALL  DELAY_1_12_SEC
                      01994          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS 
                      01995          BRA    END_FRJC                        
                      01996 
                      01997          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; try flipping back last time
                      01998          RCALL  DELAY_1_12_SEC
                      01999          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS 
                      02000          BRA    END_FRJC                        
                      02001 
                      02002         ;
                      02003         ; After perhaps a bit too much caution, we're convinced there's a jumper there.
                      02004         ; wait for it to go away now, then do the reset.
                      02005         ;                                         ______                ______
                      02006          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS ; PWRCTL low, watch for PWR_ON->1
                      02007 FRJC_LOOP:
                      02008          CLRWDT
                      02009          BTG    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02010          BTG    PLAT_GREEN, BIT_GREEN, ACCESS
                      02011          BTG    PLAT_RED, BIT_RED, ACCESS       
                      02012          IF HAS_ACTIVE
                      02013           BTG   PLAT_ACTIVE, BIT_ACTIVE, ACCESS 
                      02014          ENDIF
                      02015          RCALL  DELAY_1_12_SEC
                      02016          BTFSS  PORT_OPTION, BIT_OPTION, ACCESS
                      02017          BRA    FRJC_LOOP
                      02018          GOTO   FACTORY_RESET
                      02019         ENDIF
                      02020         
000284                02021 END_FRJC:
                      02022         IF QSCC_PORT
000284 EC?? F???      02023          CALL   QSCC_START
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02024         ENDIF
                      02025         ;
                      02026         ; Launch mainline code
                      02027         ;
000288 0104           02028         BANKSEL SSR_DATA_BANK
                      02029         IF HAS_STATUS_LEDS
                      02030          BCF    PLAT_RED, BIT_RED, ACCESS       ; Panel: () G () ()
                      02031          CLRF   SSR_00_VALUE+SSR_GREEN, BANKED  ; Green light cycles ~ 1/4 Hz
                      02032          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 1, BIT_FADE_UP|BIT_FADE_CYCLE
                      02033          SET_SSR_NORMAL_MODE SSR_GREEN
                      02034         ENDIF
                      02035         ;       
                      02036         ; If we're in DMX mode, change our baud rate to 250,000 bps
                      02037         ;
00028A AE00           02038         BTFSS   DMX_SLOTH, DMX_EN, ACCESS
00028C EF?? F???      02039         GOTO    MAIN
000290 0E0A           02040         MOVLW   SIO_250000
000292 EC?? F???      02041         CALL    SIO_SET_BAUD_W
000296 8C00           02042         BSF     DMX_SLOTH, DMX_SPEED, ACCESS
                      02043         IF HAS_STATUS_LEDS
                      02044          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      02045          SET_SSR_DMX_MODE SSR_GREEN
                      02046         ENDIF
000298 EF?? F???      02047         GOTO    MAIN
                      02048 
                      02049 BEGIN_EEPROM_READ MACRO START_ADDR
                      02050          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02051          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02052          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02053          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02054          BCF    EECON1, CFGS, ACCESS
                      02055          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02056         ENDM
                      02057 
                      02058 BEGIN_EEPROM_WRITE MACRO START_ADDR
                      02059          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
                      02060          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02061          SET_EEPROM_ADDRESS START_ADDR  ; NOTE interrupts need to be OFF here!
                      02062          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
                      02063          BCF    EECON1, CFGS, ACCESS
                      02064          BSF    EECON1, WREN, ACCESS    ; enable writing
                      02065         ENDM
                      02066 
                      02067 END_EEPROM_READ MACRO                   ; THIS CANNOT CHANGE WREG
                      02068          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02069          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02070          CLRF   EEADRH, ACCESS
                      02071          CLRF   EEADR, ACCESS
                      02072         ENDM
                      02073         
                      02074 END_EEPROM_WRITE MACRO
                      02075          BCF    EECON1, WREN, ACCESS    ; disable writing
                      02076          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
                      02077          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
                      02078          CLRF   EEADRH, ACCESS
                      02079          CLRF   EEADR, ACCESS
                      02080         ENDM
                      02081 
                      02082 SET_EEPROM_ADDRESS MACRO ADDR
                      02083          MOVLW  HIGH(ADDR)              ; NOTE interrupts need to be OFF here!
                      02084          MOVWF  EEADRH, ACCESS
                      02085          MOVLW  LOW(ADDR)
                      02086          MOVWF  EEADR, ACCESS
                      02087         ENDM
                      02088 
  00000000            02089 EE_LL_XX    SET 0
                      02090 WRITE_EEPROM_DATA MACRO
                      02091          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02092          MOVLW  0x55
                      02093          MOVWF  EECON2, ACCESS
                      02094          MOVLW  0xAA
                      02095          MOVWF  EECON2, ACCESS
                      02096          BSF    EECON1, WR, ACCESS      ; start write cycle
                      02097 WRITE_EEPROM_LOOP#v(EE_LL_XX):
                      02098          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
                      02099          BRA    WRITE_EEPROM_LOOP#v(EE_LL_XX)
                      02100          CLRWDT
                      02101          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
                      02102 EE_LL_XX    ++
                      02103         ENDM
                      02104 
                      02105 WRITE_EEPROM_DATA_INC MACRO
                      02106         WRITE_EEPROM_DATA
                      02107         INCF    EEADR, F, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02108         ENDM
                      02109 
                      02110 WRITE_EEPROM_DATA_W MACRO
                      02111         MOVWF   EEDATA, ACCESS
                      02112         WRITE_EEPROM_DATA
                      02113         ENDM
                      02114 
                      02115 WRITE_EEPROM_DATA_W_INC MACRO
                      02116         WRITE_EEPROM_DATA_W
                      02117         INCF    EEADR, F, ACCESS
                      02118         ENDM
                      02119 
                      02120 READ_EEPROM_DATA MACRO
                      02121         BSF     EECON1, RD, ACCESS
                      02122         ENDM
                      02123 
                      02124 READ_EEPROM_DATA_REG MACRO REGISTER
                      02125         READ_EEPROM_DATA
                      02126         MOVFF   EEDATA, REGISTER
                      02127         ENDM
                      02128 
                      02129 READ_EEPROM_DATA_W MACRO
                      02130         READ_EEPROM_DATA
                      02131         MOVFF   EEDATA, WREG
                      02132         ENDM
                      02133 
                      02134 READ_EEPROM_DATA_W_INC MACRO
                      02135         READ_EEPROM_DATA_W
                      02136         INCF    EEADR, F, ACCESS
                      02137         ENDM
                      02138         
00029C                02139 FACTORY_RESET:
00029C 0004           02140         CLRWDT
                      02141         ;
                      02142         ; write default configuration to EEPROM
                      02143         ;
                      02144         BEGIN_EEPROM_WRITE EE_START
00029E 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
0002A0 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_START    ; NOTE interrupts need to be OFF here!
0002A2 0E00               M          MOVLW  HIGH(EE_START)          ; NOTE interrupts need to be OFF here!
0002A4 6EAA               M          MOVWF  EEADRH, ACCESS
0002A6 0E00               M          MOVLW  LOW(EE_START)
0002A8 6EA9               M          MOVWF  EEADR, ACCESS
0002AA 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
0002AC 9CA6               M          BCF    EECON1, CFGS, ACCESS
0002AE 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
0002B0 0E??           02145         MOVLW   UPPER(DEFAULT_TBL)      ; load lookup table pointer
0002B2 6EF8           02146         MOVWF   TBLPTRU, ACCESS
0002B4 0E??           02147         MOVLW   HIGH(DEFAULT_TBL)
0002B6 6EF7           02148         MOVWF   TBLPTRH, ACCESS
0002B8 0E??           02149         MOVLW   LOW(DEFAULT_TBL)
0002BA 6EF6           02150         MOVWF   TBLPTR, ACCESS
                      02151 
0002BC 0E10           02152         MOVLW   EEPROM_SETTINGS_LEN
0002BE 6E00           02153         MOVWF   I, ACCESS
                      02154 
0002C0                02155 FACTORY_RESET_LOOP:
0002C0 0009           02156         TBLRD   *+                      ; byte -> TABLAT
0002C2 CFF5 FFA8      02157         MOVFF   TABLAT, EEDATA
                      02158         IF HAS_STATUS_LEDS
                      02159          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () Y R
                      02160         ENDIF
                      02161         WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
0002C6 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
0002C8 0E55               M          MOVLW  0x55
0002CA 6EA7               M          MOVWF  EECON2, ACCESS
0002CC 0EAA               M          MOVLW  0xAA
0002CE 6EA7               M          MOVWF  EECON2, ACCESS
0002D0 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
0002D2                    M WRITE_EEPROM_LOOP0:
0002D2 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
0002D4 D???               M          BRA    WRITE_EEPROM_LOOP0
0002D6 0004               M          CLRWDT
0002D8 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000001                M EE_LL_XX    ++
0002DA 2AA9               M         INCF    EEADR, F, ACCESS
                      02162         IF HAS_STATUS_LEDS
                      02163          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS ; Panel: () () () R
                      02164         ENDIF
                      02165 
0002DC 2E00           02166         DECFSZ  I, F, ACCESS
0002DE D???           02167         BRA     FACTORY_RESET_LOOP
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02168         END_EEPROM_WRITE
0002E0 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
0002E2 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
0002E4 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
0002E6 6AAA               M          CLRF   EEADRH, ACCESS
0002E8 6AA9               M          CLRF   EEADR, ACCESS
                      02169 
0002EA 0E10           02170         MOVLW   .16
0002EC 6E00           02171         MOVWF   I, ACCESS
                      02172 
0002EE 0004           02173         CLRWDT
0002F0 9EF2           02174         BCF     INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
0002F2 9CF2           02175         BCF     INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                      02176 
0002F4                02177 FACTORY_RESET_FLASH:
                      02178         IF HAS_STATUS_LEDS
                      02179          IF HAS_ACTIVE
                      02180           BSF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: A G Y R
                      02181          ENDIF
                      02182          BSF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02183          BSF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02184          BSF    PLAT_RED, BIT_RED, ACCESS
                      02185          RCALL  DELAY_1_12_SEC
                      02186          IF HAS_ACTIVE
                      02187           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS ; Panel: () () () ()
                      02188          ENDIF
                      02189          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      02190          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      02191          BCF    PLAT_RED, BIT_RED, ACCESS
                      02192          RCALL  DELAY_1_6_SEC
                      02193          DECFSZ I, F, ACCESS
                      02194          BRA    FACTORY_RESET_FLASH
                      02195         ENDIF
0002F4 00FF           02196         RESET
                      02197 
0002F6                02198 DELAY_1_12_SEC: ; Approx 1/12 sec delay loop
0002F6 0004           02199         CLRWDT
0002F8 0E04           02200         MOVLW   .4
0002FA 6E00           02201         MOVWF   KK, ACCESS
0002FC D???           02202         BRA     D_1_6_KK
                      02203 
0002FE                02204 DELAY_1_6_SEC:  ; Approx 1/6 sec delay loop
0002FE 0004           02205         CLRWDT
000300 0E08           02206         MOVLW   .8
000302 6E00           02207         MOVWF   KK, ACCESS
000304                02208 D_1_6_KK:
000304 6800           02209         SETF    J, ACCESS
000306                02210 D_1_6_J:
000306 6800           02211         SETF    K, ACCESS
000308                02212 D_1_6_K:
000308 2E00           02213         DECFSZ  K, F, ACCESS
00030A D???           02214         BRA     D_1_6_K
00030C 2E00           02215         DECFSZ  J, F, ACCESS
00030E D???           02216         BRA     D_1_6_J
000310 2E00           02217         DECFSZ  KK, F, ACCESS
000312 D???           02218         BRA     D_1_6_KK
000314 0012           02219         RETURN
                      02220 
                      02221 ;==============================================================================
                      02222 ; INTERRUPT HANDLERS
                      02223 ;______________________________________________________________________________
                      02224 _INT    CODE
000000                02225 INT_LOW:
000000 6E00           02226         MOVWF   ISR_TMPL_WREG, ACCESS   ; Save W, status, and bank registers
000002 CFD8 F???      02227         MOVFF   STATUS, ISR_TMPL_STATUS
000006 CFE0 F???      02228         MOVFF   BSR, ISR_TMPL_BSR
                      02229         ;
                      02230         ; Serial I/O ready for transmit?
                      02231         ;
00000A                02232 INT_TX:
00000A A89E           02233         BTFSS   PIR1, TXIF, ACCESS
00000C D???           02234         BRA     INT_TX_END
00000E EC?? F???      02235         CALL    SIO_SEND                ; push next byte out
000012 989E           02236         BCF     PIR1, TXIF, ACCESS      ; acknowledge interrupt
000014                02237 INT_TX_END:
                      02238         ;
                      02239         ; Serial I/O received a byte?
                      02240         ;
000014                02241 INT_RX:
000014 AA9E           02242         BTFSS   PIR1, RCIF, ACCESS
000016 D???           02243         BRA     INT_RX_END
000018 EC?? F???      02244         CALL    SIO_RECV                ; grab next byte
00001C 9A9E           02245         BCF     PIR1, RCIF, ACCESS      ; acknowledge interrupt
00001E                02246 INT_RX_END:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02247         ;
                      02248         ; Finished with low-priority interrupts.
                      02249         ; Clean up and go home.
                      02250         ;
00001E C??? FFE0      02251         MOVFF   ISR_TMPL_BSR, BSR
000022 5000           02252         MOVF    ISR_TMPL_WREG, W, ACCESS
000024 C??? FFD8      02253         MOVFF   ISR_TMPL_STATUS, STATUS
000028 0010           02254         RETFIE
                      02255 
00002A                02256 INT_HIGH:
                      02257         ; High-priority interrupts automatically
                      02258         ; save state (fast interrupt call)
                      02259         ;
                      02260         ; Zero-crossing start-of-cycle event signal
                      02261         ;
00002A                02262 INT_ZC:
                      02263         IF LUMOS_SLICE_TIMER==LUMOS_ZC
                      02264          BTFSS  INTCON, INT0IF, ACCESS  ; ZC signal asserted?
                      02265          BRA    INT_ZC_END              ; no, move along...
                      02266          BCF    INTCON, INT0IF, ACCESS  ; acknowledge interrupt
                      02267         ELSE
                      02268          IF LUMOS_SLICE_TIMER==LUMOS_INTERNAL
00002A A4F2           02269           BTFSS INTCON, TMR0IF, ACCESS  ; 120 Hz timer expired?
00002C D???           02270           BRA   INT_ZC_END              ; no, move along...
00002E 0E5D           02271           MOVLW HIGH(CYCLE_TMR_PERIOD)  ; reset timer for another 1/120 sec.
000030 6ED7           02272           MOVWF TMR0H, ACCESS
000032 0E3D           02273           MOVLW LOW(CYCLE_TMR_PERIOD)
000034 6ED6           02274           MOVWF TMR0L, ACCESS
000036 94F2           02275           BCF   INTCON, TMR0IF, ACCESS  ; acknowledge interrupt
                      02276          ELSE
                      02277           ERROR "LUMOS_SLICE_TIMER not set correctly"
                      02278          ENDIF
                      02279         ENDIF
000038 8C00           02280         BSF     SSR_STATE, PRECYC, ACCESS       ; mark start of pre-cycle countdown
00003A 8C00           02281         BSF     SSR_STATE2, TEST_UPD, ACCESS    ; time for next test-mode countdown
00003C C??? F???      02282         MOVFF   PHASE_OFFSETH, CUR_PREH
000040 C??? F???      02283         MOVFF   PHASE_OFFSETL, CUR_PRE
                      02284         IF QSCC_PORT
                      02285          #include "qscc_hook_120hz.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos ISR block and is performed every 1/120 second.
                      00027 ; 
                      00028 #include "qscc_bits.inc"
                      00047 ; vim:set syntax=pic ts=8:
                      00048 ;
                      00049                 LIST n=90
                      00050 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00051 ;@@                                                                         @@
                      00052 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00053 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00054 ;@@ @   @  @   @    @       @                                               @@
                      00055 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00056 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00057 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00058 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00059 ;@@                                                                         @@
                      00060 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00061 ;
                      00062 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00063 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00064 ; information.
                      00065 ;
                      00066 ; Based on previous works by the same author, some of which are released
                      00067 ; under the Open Software License, version 3.0, which portions are available
                      00068 ; separately for free download.
                      00069 ;
                      00070 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00071 ;
                      00072 ; This defines the bits for bit-encoded flags, etc.
                      00073 ; 
                      00074 #ifndef QSCC_BITS_INC
                      00075 #define QSCC_BITS_INC
                      00076 
                      00077         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00078          ERROR "qscc_bits only used for QS*C systems"
                      00079         ENDIF
                      00080                                         ; QUIZSHOW_FLAGS
                      00081 QS_FLAG_DOING120 EQU    2               ; -----1--      Doing "every 1/120 sec tasks" now
                      00082 QS_FLAG_ON_120_S EQU    1               ; ------1-      Need to do "every 1/120 sec tasks" now
                      00083 QS_FLAG_SCANNING EQU    0               ; -------1      Scanner running
                      00084 
                      00085                                         ; BTN_??_FLAGS
                      00086 BTN_FLG_ACTIVE  EQU     3               ; ----1---      Button being pressed now
                      00087 BTN_FLG_LOCKED  EQU     2               ; -----1--      Button locked out
                      00088 BTN_FLG_MASKED  EQU     1               ; ------1-      Button ignored
                      00089 BTN_FLG_PRESSED EQU     0               ; -------1      Button pressed already
                      00090 
                      00091 QUIZSHOW_DATA   EQU     0xC00
                      00092 #endif
                      00029 
                      00030         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00031          ERROR "qscc_hook_120hz only used for QS*C systems"
                      00032         ENDIF
                      00033 
000044 8200           00034         BSF     QUIZSHOW_FLAGS, QS_FLAG_ON_120_S, ACCESS
                      02286         ENDIF
                      02287         ;
                      02288         ; handle OPTION button
                      02289         ; increment hold counter if we see it pressed, decrement if not.
                      02290         ;
                      02291         IF HAS_OPTION
                      02292          COMF   OPTION_DEBOUNCE, W, ACCESS      ; button fully on?
                      02293          BZ     INT_ZC_OPTION_ON
                      02294          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; button fully off?
                      02295          BRA    INT_ZC_OPTION_UNDEFINED
                      02296 INT_ZC_OPTION_OFF:
                      02297          TSTFSZ OPTION_HOLD, ACCESS             ; unless already at zero,
                      02298          DECF   OPTION_HOLD, F, ACCESS          ; decrement counter
                      02299          BRA    INT_ZC_END_OPTION
                      02300 INT_ZC_OPTION_ON:
                      02301          INFSNZ OPTION_HOLD, F, ACCESS          ; increment counter
                      02302          SETF   OPTION_HOLD, ACCESS             ; but don't let it overflow
                      02303 INT_ZC_OPTION_UNDEFINED:
                      02304          ; If the button is still floating between on and off, don't
                      02305          ; count it yet.  It needs to stay on or off for a while before
                      02306          ; we count it toward the hold time.
                      02307 INT_ZC_END_OPTION:
                      02308         ENDIF
000046                02309 INT_ZC_END:
                      02310         ;
                      02311         ; Start of cycle slice signal
                      02312         ;
000046                02313 INT_TMR2:
000046 A29E           02314         BTFSS   PIR1, TMR2IF, ACCESS            ; has timer expired?
000048 D???           02315         BRA     INT_TMR2_END                    ; no, move along...
                      02316         ;
                      02317         ; debounce OPTION button
                      02318         ;
                      02319         IF HAS_OPTION
                      02320          BTFSC  PORT_OPTION, BIT_OPTION, ACCESS ; is option button triggered? (active-low)
                      02321          BRA    INT_OPTION_OFF                  
                      02322 INT_OPTION_ON:
                      02323          INFSNZ OPTION_DEBOUNCE, F, ACCESS      ; increment bounce counter
                      02324          SETF   OPTION_DEBOUNCE, ACCESS         ; but not too far - don't overflow
                      02325          BRA    INT_OPTION_END
                      02326 INT_OPTION_OFF:
                      02327          TSTFSZ OPTION_DEBOUNCE, ACCESS         ; if not already at zero,
                      02328          DECF   OPTION_DEBOUNCE, F, ACCESS      ; decrement counter
                      02329 INT_OPTION_END:
                      02330         ENDIF
                      02331         ;
                      02332         ; rest of cycle timing code
                      02333         ;
00004A AC00           02334         BTFSS   SSR_STATE, PRECYC, ACCESS       ; are we in pre-cycle countdown?
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00004C D???           02335         BRA     INT_TMR2_NEXT                   ; no, signal next update run
00004E 2E00           02336         DECFSZ  CUR_PRE, F, ACCESS              ; count down
000050 D???           02337         BRA     INT_TMR2_DONE
000052 6600           02338         TSTFSZ  CUR_PREH, ACCESS                ; high-order byte
000054 D???           02339         BRA     INT_TMR2_MSB
000056 9C00           02340         BCF     SSR_STATE, PRECYC, ACCESS       ; END pre-cycle
000058 8E00           02341         BSF     SSR_STATE, INCYC, ACCESS        ; BEGIN active cycle
00005A 6800           02342         SETF    CUR_SLICE, ACCESS               ; initial slice value 0xFF (will count down to 0x00)
00005C                02343 INT_TMR2_NEXT:
00005C BE00           02344         BTFSC   SSR_STATE, INCYC, ACCESS        ; if we're in active dimmer cycle now,
00005E 8A00           02345         BSF     SSR_STATE, SLICE_UPD, ACCESS    ; then signal next update run
000060                02346 INT_TMR2_DONE:
000060 929E           02347         BCF     PIR1, TMR2IF, ACCESS            ; acknowledge interrrupt
000062                02348 INT_TMR2_END:
                      02349         
                      02350         IF QSCC_PORT
                      02351          #include "qscc_hook_isr.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos ISR block for high-priority interrupts 
                      00027 ; 
                      00028         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00029          ERROR "qscc_hook_isr only used for QS*C systems"
                      00030         ENDIF
                      00031 
000062                00032 QSCC_INT_TMR1:
000062 A09E           00033         BTFSS   PIR1, TMR1IF, ACCESS            ; TMR1 overflow
000064 D???           00034         BRA     QSCC_INT_END
000066 909E           00035         BCF     PIR1, TMR1IF, ACCESS            ; acknowledge interrupt
000068 4A00           00036         INFSNZ  QS_BTN_TMR_U, F, ACCESS         ; increment next significant byte
00006A 2A00           00037         INCF    QS_BTN_TMR_T, F, ACCESS         ; carry to most significant byte 
00006C                00038 QSCC_INT_END:
                      02352         ENDIF
                      02353 
00006C 0011           02354         RETFIE  FAST
                      02355 
00006E                02356 INT_TMR2_MSB:
00006E 0600           02357         DECF    CUR_PREH, F, ACCESS             ; tick down MSB, start another loop
000070 6800           02358         SETF    CUR_PRE, ACCESS
000072 D???           02359         BRA     INT_TMR2_DONE
                      02360 
                      02361 ;==============================================================================
                      02362 ; ACCESS DATA BANK
                      02363 ;______________________________________________________________________________
                      02364 _ADATA  UDATA_ACS       0x000
000000                02365 ISR_TMPL_STATUS RES     1
000001                02366 ISR_TMPL_BSR    RES     1
000002                02367 ISR_TMPL_WREG   RES     1
                      02368 ;ISR_TMPH_STATUS        RES     1
                      02369 ;ISR_TMPH_BSR   RES     1
                      02370 ;ISR_TMPH_WREG  RES     1
000003                02371 MY_ADDRESS      RES     1
000004                02372 PHASE_OFFSETH   RES     1
000005                02373 PHASE_OFFSETL   RES     1
000006                02374 SSR_STATE       RES     1               ; major state/timing flags
000007                02375 SSR_STATE2      RES     1               ; major state/timing flags
000008                02376 DMX_SLOTH       RES     1
000009                02377 DMX_SLOTL       RES     1
00000A                02378 YY_STATE        RES     1
00000B                02379 YY_COMMAND      RES     1
00000C                02380 YY_CMD_FLAGS    RES     1
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00000D                02381 YY_DATA         RES     1
00000E                02382 YY_LOOKAHEAD_MAX RES    1
00000F                02383 YY_LOOK_FOR     RES     1
000010                02384 YY_BUF_IDX      RES     1
000011                02385 YY_NEXT_STATE   RES     1
000012                02386 YY_YY           RES     1
000013                02387 LAST_ERROR      RES     1
000014                02388 CUR_PREH        RES     1
000015                02389 CUR_PRE         RES     1
000016                02390 CUR_SLICE       RES     1
000017                02391 TARGET_SSR      RES     1
000018                02392 OPTION_DEBOUNCE RES     1
000019                02393 OPTION_HOLD     RES     1
00001A                02394 TEST_CYCLE      RES     1
00001B                02395 TEST_SSR        RES     1
00001C                02396 AUTO_OFF_CTRH   RES     1
00001D                02397 AUTO_OFF_CTRL   RES     1
00001E                02398 EIGHTBITSIOBUF  RES     1               ; buffer for 8-bit data adjustments
00001F                02399 I               RES     1
000020                02400 J               RES     1
000021                02401 K               RES     1
000022                02402 KK              RES     1
000023                02403 TR_I            RES     1
                      02404 ;                      --
                      02405 ;                      35
                      02406 ;
                      02407                 IF QSCC_PORT
                      02408                  #include "qscc_hook_access_bank.inc"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos access data block
                      00027 ; 
                      00028         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00029          ERROR "qscc_hook_access_bank only used for QS*C systems"
                      00030         ENDIF
                      00031 
  0000                00032         GLOBAL QUIZSHOW_FLAGS
  0000                00033         GLOBAL QS_BTN_TMR_T
  0000                00034         GLOBAL QS_BTN_TMR_U
                      00035 
000024                00036 QS_BTN_TMR_T    RES     1       ; Timer1 bits <31:24>
000025                00037 QS_BTN_TMR_U    RES     1       ; Timer1 bits <23:16>
000026                00038 QUIZSHOW_FLAGS  RES     1
                      00039 
                      00040 #include "qscc_bits.inc"
                      00093 ; vim:set syntax=pic ts=8:
                      00094 ;
                      00095                 LIST n=90
                      00096 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00097 ;@@                                                                         @@
                      00098 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00099 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00100 ;@@ @   @  @   @    @       @                                               @@
                      00101 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00102 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00103 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00104 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00105 ;@@                                                                         @@
                      00106 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00107 ;
                      00108 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00109 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00110 ; information.
                      00111 ;
                      00112 ; Based on previous works by the same author, some of which are released
                      00113 ; under the Open Software License, version 3.0, which portions are available
                      00114 ; separately for free download.
                      00115 ;
                      00116 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00117 ;
                      00118 ; This defines the bits for bit-encoded flags, etc.
                      00119 ; 
                      00120 #ifndef QSCC_BITS_INC
                      00121 #define QSCC_BITS_INC
                      00122 
                      00123         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00124          ERROR "qscc_bits only used for QS*C systems"
                      00125         ENDIF
                      00126                                         ; QUIZSHOW_FLAGS
                      00127 QS_FLAG_DOING120 EQU    2               ; -----1--      Doing "every 1/120 sec tasks" now
                      00128 QS_FLAG_ON_120_S EQU    1               ; ------1-      Need to do "every 1/120 sec tasks" now
                      00129 QS_FLAG_SCANNING EQU    0               ; -------1      Scanner running
                      00130 
                      00131                                         ; BTN_??_FLAGS
                      00132 BTN_FLG_ACTIVE  EQU     3               ; ----1---      Button being pressed now
                      00133 BTN_FLG_LOCKED  EQU     2               ; -----1--      Button locked out
                      00134 BTN_FLG_MASKED  EQU     1               ; ------1-      Button ignored
                      00135 BTN_FLG_PRESSED EQU     0               ; -------1      Button pressed already
                      00136 
                      00137 QUIZSHOW_DATA   EQU     0xC00
                      00138 #endif
                      02409                 ENDIF
                      02410 
                      02411 ;==============================================================================
                      02412 ; DATA BANK 4
                      02413 ;______________________________________________________________________________
                      02414 
                      02415 _SSR_DATA       UDATA   SSR_DATA_BANK
                      02416 ;
                      02417 ; *** THE FOLLOWING BLOCKS *MUST* BE THE SAME SIZE AS EACH OTHER ***
                      02418 ; and in fact, that size must be SSR_BLOCK_LEN.  THEY MUST ALSO be
                      02419 ; in this order, due to some optimizations that occur in the code.
                      02420 ;
  00000014            02421 SSR_BLOCK_LEN   EQU     SSR_MAX+1
000400                02422 SSR_00_VALUE    RES     SSR_BLOCK_LEN   ; each SSR value 0x00-FF
000414                02423 SSR_00_FLAGS    RES     SSR_BLOCK_LEN
000428                02424 SSR_00_STEP     RES     SSR_BLOCK_LEN
00043C                02425 SSR_00_SPEED    RES     SSR_BLOCK_LEN
000450                02426 SSR_00_COUNTER  RES     SSR_BLOCK_LEN
                      02427 
                      02428 ;==============================================================================
                      02429 ; DATA BANK 5: MAIN CODE DATA STORAGE
                      02430 ;______________________________________________________________________________
                      02431 _MAINDATA       UDATA   MAIN_DATA
000500                02432 YY_BUFFER       RES     YY_BUF_LEN
                      02433 
                      02434 ;==============================================================================
                      02435 ; DATA BANKS 6-: SEQUENCE STORAGE
                      02436 ;______________________________________________________________________________
  00000600            02437 SEQ_DATA        EQU     0x600                   ; XXX NOT on 14K50!!!
                      02438 _SEQ_DATA       UDATA   SEQ_DATA
                      02439 
                      02440 ;==============================================================================
                      02441 ; MAINLINE CODE
                      02442 ;______________________________________________________________________________
                      02443 _MAIN   CODE    0x0800
000800                02444 MAIN:
000800 0004           02445         CLRWDT
                      02446         IF QSCC_PORT
000802 EC?? F???      02447          CALL   QSCC_MAIN
                      02448         ENDIF
                      02449 
000806 0004           02450         CLRWDT
000808 BA00           02451         BTFSC   SSR_STATE, SLICE_UPD, ACCESS
00080A EC?? F???      02452         CALL    UPDATE_SSR_OUTPUTS
                      02453 
                      02454         ; DMX mode: poll for framing error to start DMX frame reception
00080E AE00           02455         BTFSS   DMX_SLOTH, DMX_EN, ACCESS
000810 D???           02456         BRA     NOT_DMX
000812 0103           02457         BANKSEL SIO_DATA_START
000814 AB00           02458         BTFSS   SIO_STATUS, SIO_FERR, BANKED    ; Did SIO code find a framing error first?
000816 D???           02459         BRA     BRK_DET2                        ; No, check ourselves then
                      02460         IF HAS_ACTIVE
                      02461          SET_SSR_BLINK_FADE SSR_ACTIVE
                      02462         ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000818 EC?? F???      02463         CALL    SIO_GETCHAR                     ; Yes, then read the byte we received
00081C 6700           02464         TSTFSZ  SIO_INPUT, BANKED               ; ...  is the received byte all zeroes?
00081E D???           02465         BRA     NOT_DMX                         ; No, must not really be a break then
000820 0103           02466         BANKSEL SIO_DATA_START
000822 9B00           02467         BCF     SIO_STATUS, SIO_FERR, BANKED    ; Yes: clear the status and proceed
000824 D???           02468         BRA     BRK_DET
000826                02469 BRK_DET2:
000826 A4AB           02470         BTFSS   RCSTA, FERR, ACCESS
000828 D???           02471         BRA     NOT_DMX
                      02472         ; found framing error -- is it a break?
                      02473         IF HAS_ACTIVE
                      02474          SET_SSR_BLINK_FADE SSR_ACTIVE
                      02475         ENDIF
00082A 50AE           02476         MOVF    RCREG, W, ACCESS        ; read byte, clear FERR, see if data all zeroes
00082C E1??           02477         BNZ     NOT_DMX                 ; no, must be line noise, carry on...
00082E                02478 BRK_DET:
                      02479         ;
                      02480         ; BREAK DETECTED
                      02481         ;
                      02482         ; Now we start counting while we watch the RxD line for the 0->1 transition
                      02483         ; If it took <56uS, we'll interpret it as noise.  Otherwise, it's a break and
                      02484         ; the start of our DMX frame.  As a safety measure, if the break lasts longer
                      02485         ; than ~8,000uS, we abandon the frame.
                      02486         ; 
                      02487         IF HAS_STATUS_LEDS
                      02488          SET_SSR_BLINK_FADE SSR_YELLOW
                      02489         ENDIF
00082E 9A9D           02490         BCF     PIE1, RCIE, ACCESS      ; Disable RxD interrupts for now
000830 0EE0           02491         MOVLW   0xE0
000832 6EB3           02492         MOVWF   TMR3H, ACCESS
000834 0EC7           02493         MOVLW   0xC7
000836 6EB2           02494         MOVWF   TMR3L, ACCESS           ; $E0C7 is 7,992 away from overflowing and 56 away
                      02495                                         ; from overflowing the LSB
000838 92A1           02496         BCF     PIR2, TMR3IF, ACCESS    ; Clear overflow status bit
00083A 92A0           02497         BCF     PIE2, TMR3IE, ACCESS    ; Don't use as interrupt
00083C 80B1           02498         BSF     T3CON, TMR3ON, ACCESS   ; Start Timer 3 Running
                      02499         ;
                      02500         ; Watch the RxD line for a transition away from the break
                      02501         ;
00083E                02502 WATCH_BREAK:
00083E 0004           02503         CLRWDT
000840 BA00           02504         BTFSC   SSR_STATE, SLICE_UPD, ACCESS    ; keep updating SSR outputs during this
000842 EC?? F???      02505         CALL    UPDATE_SSR_OUTPUTS
000846 BE82           02506         BTFSC   PORT_RX, BIT_RX, ACCESS ; Is the line 0?
000848 D???           02507         BRA     BREAK_CONFIRMED
00084A A2A1           02508         BTFSS   PIR2, TMR3IF, ACCESS    ; Did we exceed our limit?
00084C D???           02509         BRA     WATCH_BREAK
                      02510         ;
                      02511         ; We've been holding too long, give up on the break signal.
                      02512         ; 
00084E 90B1           02513         BCF     T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
000850 8A9D           02514         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
000852 D???           02515         BRA     BAD_BREAK
                      02516 
000854                02517 BREAK_CONFIRMED:
                      02518         ;
                      02519         ; Break over, reset UART and interpret frame
                      02520         ;
                      02521         IF HAS_STATUS_LEDS
                      02522          SET_SSR_BLINK_FADE SSR_RED
                      02523         ENDIF
000854 90B1           02524         BCF     T3CON, TMR3ON, ACCESS   ; Shut down Timer 3
000856 8A9D           02525         BSF     PIE1, RCIE, ACCESS      ; Enable RxD interrupts again
000858 98AB           02526         BCF     RCSTA, CREN, ACCESS
00085A 88AB           02527         BSF     RCSTA, CREN, ACCESS
00085C 0EE0           02528         MOVLW   0xE0
00085E 50B2           02529         MOVF    TMR3L, W, ACCESS        ; Initiate 16-bit read of TMR3 register
000860 62B3           02530         CPFSEQ  TMR3H, ACCESS           ; If MSB of Timer3 advanced, it was >56uS
000862 D???           02531         BRA     START_DMX_FRAME         ; and therefore the start of the frame
                      02532         ;                               ; If not, it's noise and we interpret as "NOT_DMX"
                      02533         ;        | |
                      02534         ;       _| |_
                      02535         ;       \   /
                      02536         ;        \ /
                      02537         ;         V
000864                02538 NOT_DMX:
000864 0103           02539         BANKSEL SIO_DATA_START
000866 BB00           02540         BTFSC   SIO_STATUS, SIO_FERR, BANKED
000868                02541 BAD_BREAK:
000868 D???           02542         RCALL   ERR_SERIAL_FRAMING
                      02543 
00086A 0103           02544         BANKSEL SIO_DATA_START
00086C B900           02545         BTFSC   SIO_STATUS, SIO_ORUN, BANKED
00086E D???           02546         RCALL   ERR_SERIAL_OVERRUN
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02547 
000870 0103           02548         BANKSEL SIO_DATA_START
000872 B700           02549         BTFSC   SIO_STATUS, RXDATA_FULL, BANKED
000874 D???           02550         RCALL   ERR_SERIAL_FULL
                      02551 
000876 0103           02552         BANKSEL SIO_DATA_START
000878 A300           02553         BTFSS   SIO_STATUS, RXDATA_QUEUE, BANKED
00087A D???           02554         BRA     END_SERIAL_READ
00087C B000           02555         BTFSC   SSR_STATE, TEST_MODE, ACCESS
00087E D???           02556         BRA     TEST_MODE_BYPASS
000880 D???           02557         RCALL   RECEIVE_COMMAND
000882 D???           02558         BRA     END_SERIAL_READ
000884                02559 TEST_MODE_BYPASS:
000884 EC?? F???      02560         CALL    SIO_READ                ; read and discard input while in test mode
000888                02561 END_SERIAL_READ:
                      02562 
000888 B400           02563         BTFSC   SSR_STATE, DRAIN_TR, ACCESS
00088A D???           02564         RCALL   DRAIN_TRANSMITTER
                      02565 
00088C B000           02566         BTFSC   SSR_STATE, TEST_MODE, ACCESS
00088E D???           02567         RCALL   DO_TEST_MODE
                      02568 
                      02569         IF HAS_OPTION
                      02570 OPTION_HANDLER:
                      02571          BTFSS  SSR_STATE, PRIV_MODE, ACCESS            ; are we in privileged mode?
                      02572          BRA    OPTION_PRE_PRIV                         ; no, check if we're in pre-priv...
                      02573                                                         ; ----------------------------------------------
                            ---PRIV_MODE
                      02574          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; PRIV_MODE+PRE_PRIV: transitioning to TEST mode
                      02575          BRA    OPTION_PRIV_MODE                        ; just PRIV_MODE: skip down a bit...
                      02576          TSTFSZ OPTION_DEBOUNCE, ACCESS                 ; has button released yet?
                      02577          BRA    END_OPTION_HANDLER                      ; no, keep waiting
                      02578          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; yes: move to test mode now
                      02579          BSF    SSR_STATE, TEST_MODE, ACCESS
                      02580          MOVLW  .120
                      02581          MOVWF  TEST_CYCLE, ACCESS
                      02582          SETF   TEST_SSR, ACCESS                        ; initialize ssr index
                      02583          CLRF   OPTION_HOLD, ACCESS
                      02584          IF HAS_STATUS_LEDS
                      02585           IF HAS_ACTIVE
                      02586            SET_SSR_OFF SSR_ACTIVE
                      02587           ENDIF
                      02588           SET_SSR_OFF SSR_GREEN
                      02589           SET_SSR_OFF SSR_YELLOW
                      02590           SET_SSR_OFF SSR_RED
                      02591          ENDIF
                      02592          IF ROLE_MASTER
                      02593           MOVLW 0xF0                                    ; send to slave chip: F0 21 00000000 00000000
                      02594           CALL  SIO_WRITE_W                             ; (all LEDs off)
                      02595           MOVLW 0x21
                      02596           CALL  SIO_WRITE_W
                      02597           MOVLW 0x00
                      02598           CALL  SIO_WRITE_W
                      02599           MOVLW 0x00
                      02600           CALL  SIO_WRITE_W
                      02601          ENDIF
                      02602          RCALL  S0_CMD0                                 ; blackout all SSR outputs
                      02603          BRA    END_OPTION_HANDLER
                      02604 
                      02605 OPTION_PRIV_MODE:
                      02606          COMF   OPTION_HOLD, W, ACCESS                  ; is option pressed ~2s?
                      02607          BNZ    END_OPTION_HANDLER                      ; no
                      02608          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; set PRE_PRIV (wait for button release)
                      02609          BRA    END_OPTION_HANDLER
                      02610 
                      02611 OPTION_PRE_PRIV:                                        
                      02612          BTFSS  SSR_STATE, PRE_PRIV, ACCESS             ; are we in pre-priv state?
                      02613          BRA    OPTION_NORMAL                           ; no, must be normal operating mode.
                      02614          TSTFSZ OPTION_HOLD, ACCESS                     ; ----------------------------------------------
                            ----PRE_PRIV
                      02615          BRA    END_OPTION_HANDLER                      ; wait for button to be released ~2s
                      02616          BCF    SSR_STATE, PRE_PRIV, ACCESS             ; move to privileged run mode
                      02617          BTFSC  SSR_STATE2, PRIV_FORBID, ACCESS         ; unless we have privileges locked out now...
                      02618          BRA    END_OPTION_HANDLER
                      02619          BSF    SSR_STATE, PRIV_MODE, ACCESS            ; turn on privileged mode
                      02620          IF HAS_STATUS_LEDS
                      02621           IF HAS_ACTIVE
                      02622            SET_SSR_BLINK_FADE SSR_ACTIVE
                      02623           ENDIF
                      02624           SET_SSR_BLINK_FADE SSR_YELLOW
                      02625           SET_SSR_BLINK_FADE SSR_RED
                      02626          ENDIF
                      02627          IF ROLE_MASTER
                      02628           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101000 00000000
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02629           CALL  SIO_WRITE_W                             ; (rapid flash green, others off)
                      02630           MOVLW 0x21
                      02631           CALL  SIO_WRITE_W
                      02632           MOVLW 0x28
                      02633           CALL  SIO_WRITE_W
                      02634           MOVLW 0x00
                      02635           CALL  SIO_WRITE_W
                      02636          ENDIF
                      02637          CALL   DMX_EXIT_TEMPORARILY
                      02638          BRA END_OPTION_HANDLER
                      02639 
                      02640 OPTION_NORMAL:                                          ; ----------------------------------------------
                            ------NORMAL
                      02641          COMF   OPTION_HOLD, W, ACCESS                  ; has option been held full time?
                      02642          BNZ    END_OPTION_HANDLER                      ; nope, move along...
                      02643          BSF    SSR_STATE, PRE_PRIV, ACCESS             ; yes, initiate pre-priv mode (wait for button r
                            elease)
                      02644          IF HAS_STATUS_LEDS
                      02645           IF HAS_ACTIVE
                      02646            SET_SSR_RAPID_FLASH SSR_ACTIVE
                      02647           ENDIF
                      02648           SET_SSR_RAPID_FLASH SSR_GREEN
                      02649           SET_SSR_RAPID_FLASH SSR_YELLOW
                      02650           SET_SSR_RAPID_FLASH SSR_RED
                      02651          ENDIF
                      02652          IF ROLE_MASTER
                      02653           MOVLW 0xF0                                    ; send to slave chip: F0 21 00101101 00000101
                      02654           CALL  SIO_WRITE_W                             ; (rapid flash all LEDs)
                      02655           MOVLW 0x21
                      02656           CALL  SIO_WRITE_W
                      02657           MOVLW 0x2D
                      02658           CALL  SIO_WRITE_W
                      02659           MOVLW 0x05
                      02660           CALL  SIO_WRITE_W
                      02661          ENDIF
                      02662 END_OPTION_HANDLER:
                      02663         ENDIF
                      02664 
                      02665         ; OPTION button handler
                      02666         ; normal: option held ~2s, -> init option mode
                      02667         ; initopt: option released -> priv mode
                      02668         ; priv: option held ~2s and release -> test mode
                      02669         ; test: option press -> pause, wait for release
                      02670         ; pause: option press -> wait for release, test
                      02671 
000890 D???           02672         BRA     MAIN
                      02673         
000892                02674 DRAIN_TRANSMITTER:
                      02675         IF HAS_T_R
000892 0103           02676          BANKSEL SIO_DATA_START
000894 B100           02677          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED        ; data still waiting in our output buffer?
000896 0012           02678          RETURN
000898 A89E           02679          BTFSS  PIR1, TXIF, ACCESS                      ; data in transit into UART shift register?
00089A 0012           02680          RETURN
00089C A2AC           02681          BTFSS  TXSTA, TRMT, ACCESS                     ; data being shifted out now?
00089E 0012           02682          RETURN
0008A0 9400           02683          BCF    SSR_STATE, DRAIN_TR, ACCESS             ; none of the above--shut down transmitter now
0008A2 EC?? F???      02684          CALL   TR_OFF_DELAY
0008A6 968B           02685          BCF    PLAT_T_R, BIT_T_R, ACCESS               
0008A8 0012           02686          RETURN
                      02687         ELSE
                      02688          ERR_BUG 0x11, ERR_CLASS_DEVICE
                      02689         ENDIF
                      02690 
0008AA                02691 DRAIN_M_S_TX_BLOCKING:
                      02692         ;
                      02693         ; version of DRAIN_TRANSMITTER which is designed to clear
                      02694         ; master->slave comms in critical situations.  Blocks until
                      02695         ; the pending output is sent to the slave.
                      02696         ;
                      02697         IF ROLE_MASTER
                      02698          BANKSEL SIO_DATA_START
                      02699          CLRWDT
                      02700 DRAIN_M_S_DRAIN_SIO_QUEUE:
                      02701          BTFSC  SIO_STATUS, TXDATA_QUEUE, BANKED
                      02702          BRA    DRAIN_M_S_DRAIN_SIO_QUEUE
                      02703          CLRWDT
                      02704 DRAIN_M_S_DRAIN_UART_TX_BUF:
                      02705          BTFSS  PIR1, TXIF, ACCESS
                      02706          BRA    DRAIN_M_S_DRAIN_UART_TX_BUF
                      02707          CLRWDT
                      02708 DRAIN_M_S_DRAIN_UART_SHIFT_REG:
                      02709          BTFSS  TXSTA, TRMT, ACCESS
                      02710          BRA    DRAIN_M_S_DRAIN_UART_SHIFT_REG
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02711          CLRWDT
                      02712          RETURN
                      02713         ELSE
                      02714          ERR_BUG 0x12, ERR_CLASS_DEVICE
0008AA 0E12               M          MOVLW  0x12
0008AC 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_DEVICE == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_DEVICE == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_DEVICE == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_DEVICE == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_DEVICE == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0008AE 6A00               M          CLRF   YY_STATE, ACCESS
0008B0 0012               M          RETURN
                      02715         ENDIF
                      02716 
0008B2                02717 DO_TEST_MODE:
0008B2 0004           02718         CLRWDT
                      02719 
0008B4 1C00           02720         COMF    OPTION_DEBOUNCE, W, ACCESS      ; is option button pressed?
0008B6 E1??           02721         BNZ     TEST_NOT_PRESSED
0008B8 8A00           02722         BSF     SSR_STATE2, TEST_BUTTON, ACCESS ; yes, keep waiting for it to be released
0008BA D???           02723         BRA     TEST_MODE_1
0008BC                02724 TEST_NOT_PRESSED:
0008BC 6600           02725         TSTFSZ  OPTION_DEBOUNCE, ACCESS         ; is option button fully off?
0008BE D???           02726         BRA     TEST_MODE_1
0008C0 AA00           02727         BTFSS   SSR_STATE2, TEST_BUTTON, ACCESS ; were we waiting for this button cycle event?
0008C2 D???           02728         BRA     TEST_MODE_1                     ; 
                      02729         ;
                      02730         ; OPTION button was pressed and then released.  Toggle pause state.
                      02731         ;
0008C4 9A00           02732         BCF     SSR_STATE2, TEST_BUTTON, ACCESS ; 
0008C6 7E00           02733         BTG     SSR_STATE2, TEST_PAUSE, ACCESS  ;
0008C8 6800           02734         SETF    TEST_CYCLE, ACCESS              ; reset cycle timer
                      02735         IF ROLE_MASTER                          ; MASTER  SLAVE           STANDALONE
                      02736          MOVLW  0xF0                            ; A G Y R G Y R           A G Y R
                      02737          CALL   SIO_WRITE_W                     ; b3b2b1b0b5b4(*)         b2b1b0(*)  run
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02738          MOVLW  0x21                            ;              *                 *   pause
                      02739          CALL   SIO_WRITE_W
                      02740          MOVLW  B'00111111'
                      02741          CALL   SIO_WRITE_W
                      02742          MOVLW  B'00000001'
                      02743          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
                      02744          MOVLW  B'00000010'
                      02745          CALL   SIO_WRITE_W
                      02746         ELSE
0008CA AE00           02747          BTFSS  SSR_STATE2, TEST_PAUSE, ACCESS
0008CC D???           02748          BRA    TEST_NP_1
                      02749          IF HAS_STATUS_LEDS
                      02750           SET_SSR_STEADY SSR_RED
                      02751          ENDIF
0008CE D???           02752          BRA    TEST_NP_2
0008D0                02753 TEST_NP_1:
                      02754          IF HAS_STATUS_LEDS
                      02755           SET_SSR_SLOW_FADE SSR_RED
                      02756          ENDIF
0008D0                02757 TEST_NP_2:
                      02758         ENDIF
                      02759         
0008D0                02760 TEST_MODE_1:
0008D0 AE00           02761         BTFSS   SSR_STATE2, TEST_PAUSE, ACCESS  ; paused? 
0008D2 AC00           02762         BTFSS   SSR_STATE2, TEST_UPD, ACCESS    ; time to count down?
0008D4 0012           02763         RETURN                                  ; either we're paused or not time to update; stop.
                      02764         
0008D6 9C00           02765         BCF     SSR_STATE2, TEST_UPD, ACCESS    ; clear flag about being time to update
0008D8 2E00           02766         DECFSZ  TEST_CYCLE, F, ACCESS           ; count down until time to change channels
0008DA 0012           02767         RETURN
0008DC 0E78           02768         MOVLW   .120
0008DE 6E00           02769         MOVWF   TEST_CYCLE, ACCESS              ; reset counter time for next channel
                      02770 
0008E0 D???           02771         RCALL   S0_CMD0                         ; kill all outputs
0008E2 2A00           02772         INCF    TEST_SSR, F, ACCESS             ; jump to next SSR
0008E4 0E14           02773         MOVLW   NUM_CHANNELS
0008E6 6000           02774         CPFSLT  TEST_SSR, ACCESS                ; channel > last channel?
0008E8 6A00           02775         CLRF    TEST_SSR, ACCESS                ; cycle to 0 if exceeded our limit
                      02776 
0008EA 0E3F           02777         MOVLW   0x3F
0008EC 1400           02778         ANDWF   TEST_SSR, W, ACCESS             ; keep to limits of channel number
0008EE 6E00           02779         MOVWF   YY_DATA, ACCESS                 ; set up YY_DATA for ON_OFF call
0008F0 8C00           02780         BSF     YY_DATA, 6, ACCESS              ; turn on
0008F2 D???           02781         RCALL   ON_OFF_YY_DATA                  ; execute
                      02782 
0008F4 0104           02783         BANKSEL SSR_DATA_BANK
                      02784         IF HAS_STATUS_LEDS
                      02785          CLRF   SSR_00_VALUE + SSR_RED, BANKED
                      02786          CLRF   SSR_00_VALUE + SSR_YELLOW, BANKED
                      02787          CLRF   SSR_00_VALUE + SSR_GREEN, BANKED
                      02788          IF HAS_ACTIVE
                      02789           CLRF  SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02790          ENDIF
                      02791         ENDIF
                      02792 
                      02793         IF ROLE_MASTER                                  ; MASTER----- SLAVE---      STANDALONE-
                      02794          IF HAS_STATUS_LEDS
                      02795           BTFSC TEST_SSR, 2, ACCESS                     ; A  G  Y  R  G  Y  R       A  G  Y  R
                      02796           SETF  SSR_00_VALUE + SSR_RED, BANKED          ; b5 b4 b3 b2 b1 b0 (*)     b2 b1 b0 (*)
                      02797           BTFSC TEST_SSR, 3, ACCESS
                      02798           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      02799           BTFSC TEST_SSR, 4, ACCESS
                      02800           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      02801           IF HAS_ACTIVE
                      02802            BTFSC TEST_SSR, 5, ACCESS
                      02803            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02804           ENDIF
                      02805          ENDIF
                      02806 
                      02807          MOVLW  0xF0                                    ; send to slave chip: F0 21 00gggyyy 00000rrr
                      02808          CALL   SIO_WRITE_W
                      02809          MOVLW  0x21
                      02810          CALL   SIO_WRITE_W
                      02811          CLRF   WREG, ACCESS
                      02812          BTFSC  TEST_SSR, 1, ACCESS
                      02813          BSF    WREG, 3, ACCESS
                      02814          BTFSC  TEST_SSR, 0, ACCESS
                      02815          BSF    WREG, 0, ACCESS
                      02816          CALL   SIO_WRITE_W
                      02817          MOVLW  0x02
                      02818          CALL   SIO_WRITE_W
                      02819         ELSE
                      02820          IF HAS_STATUS_LEDS
                      02821           BTFSC TEST_SSR, 0, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02822           SETF  SSR_00_VALUE + SSR_YELLOW, BANKED
                      02823           BTFSC TEST_SSR, 1, ACCESS
                      02824           SETF  SSR_00_VALUE + SSR_GREEN, BANKED
                      02825           IF HAS_ACTIVE
                      02826            BTFSC TEST_SSR, 2, ACCESS
                      02827            SETF SSR_00_VALUE + SSR_ACTIVE, BANKED
                      02828           ENDIF
                      02829           SET_SSR_SLOW_FADE SSR_RED
                      02830          ENDIF
                      02831         ENDIF
                      02832 
0008F6 0012           02833         RETURN
                      02834 
0008F8                02835 ERR_SERIAL_FRAMING:
0008F8 0103           02836         BANKSEL SIO_DATA_START
0008FA 9B00           02837         BCF     SIO_STATUS, SIO_FERR, BANKED
                      02838 ;       BTFSC   DMX_SLOTH, DMX_EN, ACCESS
                      02839 ;       BRA     START_DMX_FRAME
                      02840         IF HAS_STATUS_LEDS
                      02841          SET_SSR_RAPID_FLASH SSR_RED
                      02842          SET_SSR_STEADY SSR_YELLOW
                      02843         ENDIF
0008FC 0012           02844         RETURN
0008FE                02845 START_DMX_FRAME:
                      02846         ;
                      02847         ; We're in DMX mode so a framing error (aka break) is really
                      02848         ; not an error, but the start of our data frame!
                      02849         ;
0008FE 8A00           02850         BSF     DMX_SLOTH, DMX_FRAME, ACCESS
                      02851         IF HAS_STATUS_LEDS
                      02852          SET_SSR_RAPID_FLASH SSR_YELLOW
                      02853         ENDIF
000900 0012           02854         RETURN
                      02855         
000902                02856 ERR_SERIAL_OVERRUN:
000902 0103           02857         BANKSEL SIO_DATA_START
000904 9900           02858         BCF     SIO_STATUS, SIO_ORUN, BANKED
                      02859         IF HAS_STATUS_LEDS
                      02860          SET_SSR_RAPID_FLASH SSR_RED
                      02861          SET_SSR_RAPID_FLASH SSR_YELLOW
                      02862         ENDIF
000906 0012           02863         RETURN
                      02864 
000908                02865 ERR_SERIAL_FULL:
                      02866         IF HAS_STATUS_LEDS
                      02867          SET_SSR_RAPID_FLASH SSR_RED
                      02868          SET_SSR_SLOW_FADE SSR_YELLOW
                      02869         ENDIF
                      02870         ; clear input buffer and reset state machine
000908 6A00           02871         CLRF    YY_STATE, ACCESS
00090A EC?? F???      02872         CALL    SIO_FLUSH_INPUT
00090E 0012           02873         RETURN
                      02874 
000910                02875 ERR_CMD_INCOMPLETE:
000910 0E23           02876         MOVLW   0x23
000912 6E00           02877         MOVWF   LAST_ERROR, ACCESS
                      02878         IF HAS_STATUS_LEDS
                      02879          SET_SSR_SLOW_FLASH SSR_RED
                      02880         ENDIF
000914 EF?? F???      02881         GOTO    ERR_ABORT
000918                02882 ERR_NOT_IMP:
000918 0E22           02883         MOVLW   0x22
00091A 6E00           02884         MOVWF   LAST_ERROR, ACCESS
                      02885         IF HAS_STATUS_LEDS
                      02886          SET_SSR_RAPID_FLASH SSR_RED
                      02887         ENDIF
00091C EF?? F???      02888         GOTO    ERR_ABORT
000920                02889 ERR_COMMAND:
000920 0E20           02890         MOVLW   0x20
000922 6E00           02891         MOVWF   LAST_ERROR, ACCESS
                      02892         IF HAS_STATUS_LEDS
                      02893          SET_SSR_PATTERN SSR_RED, .255, .1, .32, BIT_FADE_DOWN
                      02894         ENDIF
000924                02895 ERR_ABORT:
                      02896         ;SET_SSR_STEADY SSR_RED
000924 6A00           02897         CLRF    YY_STATE, ACCESS        ; reset state machine
000926 0012           02898         RETURN
                      02899 
000928                02900 RECEIVE_COMMAND:
  00000007            02901 CMD_BIT EQU     7
                      02902 
000928 0004           02903         CLRWDT
                      02904         ;
                      02905         ; First of all, if we received a byte at all, that means
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02906         ; we're not the one expected to be talking anymore.
                      02907         ; we should never see this while trying to output anything,
                      02908         ; if everyone else is playing by the same rules,
                      02909         ; but this is a fail-safe just in case.  In this case, we
                      02910         ; will immediately shut up.
                      02911         ;
00092A 8400           02912         BSF     SSR_STATE2, INHIBIT_OUTPUT, ACCESS
                      02913         ;
                      02914         ; We just received a byte.  The state machine dictates what
                      02915         ; we do with the byte we just got.
                      02916         ;
                      02917         ; State:        Byte:
                      02918         ; [0] IDLE      DATA: ignore
                      02919         ;               CMD for someone else: ignore
                      02920         ;               store command, then decode it.
                      02921         ;
00092C EC?? F???      02922         CALL    SIO_GETCHAR_W
000930 BC00           02923         BTFSC   DMX_SLOTH, DMX_SPEED, ACCESS    ; check if we're trying to read DMX now
000932 EF?? F???      02924         GOTO    DMX_RECEIVED_BYTE
                      02925         ;
000936 0004           02926         CLRWDT
000938 0103           02927         BANKSEL SIO_DATA_START
00093A AF00           02928         BTFSS   SIO_INPUT, CMD_BIT, BANKED
00093C D???           02929         BRA     DATA_BYTE               ; it's a data byte
                      02930         ;
                      02931         ; ok, so it's a command. are we still waiting for another
                      02932         ; command to complete?  If so, abort it and start over.
                      02933         ; otherwise, get to work.
                      02934         ;
00093E 9200           02935         BCF     SSR_STATE2, MSB_ESC, ACCESS     ; cancel escape sequence if any
000940 9000           02936         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
000942 5000           02937         MOVF    YY_STATE, W, ACCESS
000944 E0??           02938         BZ      INTERP_START     
                      02939         ;
                      02940         ; ERROR: We hadn't finished with the last command yet, and here we
                      02941         ; have another one!  (Yes, even if it's someone else's command, that
                      02942         ; still means ours is apparently abandoned.)
                      02943         ;
000946 D???           02944         RCALL   ERR_CMD_INCOMPLETE              ; let user know
                      02945         
000948                02946 INTERP_START:
                      02947         ;
                      02948         ; Start of a new command.
                      02949         ;
000948 0103           02950         BANKSEL SIO_DATA_START
00094A 0004           02951         CLRWDT
                      02952         ;
                      02953         ; Is it ours?
                      02954         ;
                      02955         IF QSCC_PORT
                      02956          #include "qscc_hook_global_commands.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpretation code so that we handle
                      00027 ; globally-recognized commands, which isn't something Lumos controllers do.
                      00028 ;
                      00029 ; Force global commands to be our address
                      00030 ;
                      00031 ; Context: SIO data bank selected
                      00032 ; SIO_INPUT contains command byte on input.
                      00033 ; RETURN from here will end command interpretation, so if we branch to
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00034 ; a command handler, its return will go back to our caller.
                      00035 ;
00094C 0E8F           00036         MOVLW   b'10001111'     ; 8F: Global Blackout
00094E 6300           00037         CPFSEQ  SIO_INPUT, BANKED
000950 D???           00038         BRA     QSCC_G_C_1
000952 EF?? F???      00039         GOTO    S0_CMD0
                      00040 
000956                00041 QSCC_G_C_1:
000956 EF?? F???      00042         GOTO    S0_CMD0
00095A 0EDF           00043         MOVLW   b'11011111'     ; DF: Global Start
00095C 6300           00044         CPFSEQ  SIO_INPUT, BANKED
00095E D???           00045         BRA     QSCC_G_C_2
000960 EF?? F???      00046         GOTO    QSCC_CMD5_START
                      00047 
000964                00048 QSCC_G_C_2:
                      02957         ENDIF
                      02958         IF ! ROLE_SLAVE         ; the slave chip has no address and sees no other commands
000964 5100           02959          MOVF   SIO_INPUT, W, BANKED
000966 0B0F           02960          ANDLW  0x0F
000968 6200           02961          CPFSEQ MY_ADDRESS, ACCESS
00096A 0012           02962          RETURN ; not my problem.
                      02963         ENDIF
                      02964         ;
                      02965         ; ok, so it's OUR command.  We're at state 0,
                      02966         ; so let's decode it and go from here.
                      02967         ;
                      02968         ; === STATE 0 ===
                      02969         ; New command byte received
                      02970         ;
                      02971         ; CMD 0 (BLACKOUT): exec -> 0
                      02972         ; CMD 1 (ON_OFF): -> 1
                      02973         ; CMD 2 (SET_LVL): -> 2
                      02974         ; CMD 3 (BULK_UPD): -> 4
                      02975         ; CMD 4 (RAMP_LVL): -> 5
                      02976         ; CMD 5 ERROR -> 0
                      02977         ; CMD 6 ERROR -> 0
                      02978         ; CMD 7 (EXTENDED) -> 9
                      02979         ;
                      02980         IF HAS_ACTIVE
                      02981          SET_SSR_BLINK_FADE SSR_ACTIVE  ; activity indicator
                      02982         ENDIF
                      02983         IF ROLE_SLAVE && HAS_STATUS_LEDS
                      02984          SET_SSR_BLINK_FADE SSR_YELLOW  ; slave activity indicator
                      02985         ENDIF
00096C 0103           02986         BANKSEL SIO_DATA_START
00096E 3900           02987         SWAPF   SIO_INPUT, W, BANKED
000970 0B07           02988         ANDLW   0x07
000972 E0??           02989         BZ      S0_CMD0
000974 EF?? F???      02990         GOTO    S0_CMD1         ; can't do BNZ S0_CMD1 because it's too far away from here
                      02991 
000978                02992 S0_CMD0:
                      02993         ;
                      02994         ; BLACKOUT:
                      02995         ;
                      02996         ;   ___7______6______5______4______3______2______1______0__
                      02997         ;  |      |                    |                           |
                      02998         ;  |   1  |          0         |   Target device address   | SIO_INPUT
                      02999         ;  |______|______|______|______|______|______|______|______|
                      03000         ;  |                                  |          0         |
                      03001         ;  |                 0                |   (Command code)   | W
                      03002         ;  |______|______|______|______|______|______|______|______|
                      03003         ;
000978 0104           03004         BANKSEL SSR_DATA_BANK
  00000000            03005 CH      SET     0
                      03006         WHILE CH <= OUTPUT_CHAN_MAX
00097A 6B00           03007          CLRF   SSR_00_VALUE+0,      BANKED     ; all SSRs OFF
00097C 6B00           03008          CLRF   SSR_00_FLAGS+0,      BANKED     ; all SSR flags cleared
00097E 6B00           03009          CLRF   SSR_00_STEP+0,      BANKED
000980 6B00           03010          CLRF   SSR_00_SPEED+0,      BANKED
000982 6B00           03011          CLRF   SSR_00_COUNTER+0,      BANKED
  00000001            03012 CH       ++
000984 6B00           03007          CLRF   SSR_00_VALUE+1,      BANKED     ; all SSRs OFF
000986 6B00           03008          CLRF   SSR_00_FLAGS+1,      BANKED     ; all SSR flags cleared
000988 6B00           03009          CLRF   SSR_00_STEP+1,      BANKED
00098A 6B00           03010          CLRF   SSR_00_SPEED+1,      BANKED
00098C 6B00           03011          CLRF   SSR_00_COUNTER+1,      BANKED
  00000002            03012 CH       ++
00098E 6B00           03007          CLRF   SSR_00_VALUE+2,      BANKED     ; all SSRs OFF
000990 6B00           03008          CLRF   SSR_00_FLAGS+2,      BANKED     ; all SSR flags cleared
000992 6B00           03009          CLRF   SSR_00_STEP+2,      BANKED
000994 6B00           03010          CLRF   SSR_00_SPEED+2,      BANKED
000996 6B00           03011          CLRF   SSR_00_COUNTER+2,      BANKED
  00000003            03012 CH       ++
000998 6B00           03007          CLRF   SSR_00_VALUE+3,      BANKED     ; all SSRs OFF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00099A 6B00           03008          CLRF   SSR_00_FLAGS+3,      BANKED     ; all SSR flags cleared
00099C 6B00           03009          CLRF   SSR_00_STEP+3,      BANKED
00099E 6B00           03010          CLRF   SSR_00_SPEED+3,      BANKED
0009A0 6B00           03011          CLRF   SSR_00_COUNTER+3,      BANKED
  00000004            03012 CH       ++
0009A2 6B00           03007          CLRF   SSR_00_VALUE+4,      BANKED     ; all SSRs OFF
0009A4 6B00           03008          CLRF   SSR_00_FLAGS+4,      BANKED     ; all SSR flags cleared
0009A6 6B00           03009          CLRF   SSR_00_STEP+4,      BANKED
0009A8 6B00           03010          CLRF   SSR_00_SPEED+4,      BANKED
0009AA 6B00           03011          CLRF   SSR_00_COUNTER+4,      BANKED
  00000005            03012 CH       ++
0009AC 6B00           03007          CLRF   SSR_00_VALUE+5,      BANKED     ; all SSRs OFF
0009AE 6B00           03008          CLRF   SSR_00_FLAGS+5,      BANKED     ; all SSR flags cleared
0009B0 6B00           03009          CLRF   SSR_00_STEP+5,      BANKED
0009B2 6B00           03010          CLRF   SSR_00_SPEED+5,      BANKED
0009B4 6B00           03011          CLRF   SSR_00_COUNTER+5,      BANKED
  00000006            03012 CH       ++
0009B6 6B00           03007          CLRF   SSR_00_VALUE+6,      BANKED     ; all SSRs OFF
0009B8 6B00           03008          CLRF   SSR_00_FLAGS+6,      BANKED     ; all SSR flags cleared
0009BA 6B00           03009          CLRF   SSR_00_STEP+6,      BANKED
0009BC 6B00           03010          CLRF   SSR_00_SPEED+6,      BANKED
0009BE 6B00           03011          CLRF   SSR_00_COUNTER+6,      BANKED
  00000007            03012 CH       ++
0009C0 6B00           03007          CLRF   SSR_00_VALUE+7,      BANKED     ; all SSRs OFF
0009C2 6B00           03008          CLRF   SSR_00_FLAGS+7,      BANKED     ; all SSR flags cleared
0009C4 6B00           03009          CLRF   SSR_00_STEP+7,      BANKED
0009C6 6B00           03010          CLRF   SSR_00_SPEED+7,      BANKED
0009C8 6B00           03011          CLRF   SSR_00_COUNTER+7,      BANKED
  00000008            03012 CH       ++
0009CA 6B00           03007          CLRF   SSR_00_VALUE+8,      BANKED     ; all SSRs OFF
0009CC 6B00           03008          CLRF   SSR_00_FLAGS+8,      BANKED     ; all SSR flags cleared
0009CE 6B00           03009          CLRF   SSR_00_STEP+8,      BANKED
0009D0 6B00           03010          CLRF   SSR_00_SPEED+8,      BANKED
0009D2 6B00           03011          CLRF   SSR_00_COUNTER+8,      BANKED
  00000009            03012 CH       ++
0009D4 6B00           03007          CLRF   SSR_00_VALUE+9,      BANKED     ; all SSRs OFF
0009D6 6B00           03008          CLRF   SSR_00_FLAGS+9,      BANKED     ; all SSR flags cleared
0009D8 6B00           03009          CLRF   SSR_00_STEP+9,      BANKED
0009DA 6B00           03010          CLRF   SSR_00_SPEED+9,      BANKED
0009DC 6B00           03011          CLRF   SSR_00_COUNTER+9,      BANKED
  0000000A            03012 CH       ++
0009DE 6B00           03007          CLRF   SSR_00_VALUE+10,     BANKED     ; all SSRs OFF
0009E0 6B00           03008          CLRF   SSR_00_FLAGS+10,     BANKED     ; all SSR flags cleared
0009E2 6B00           03009          CLRF   SSR_00_STEP+10,     BANKED
0009E4 6B00           03010          CLRF   SSR_00_SPEED+10,     BANKED
0009E6 6B00           03011          CLRF   SSR_00_COUNTER+10,     BANKED
  0000000B            03012 CH       ++
0009E8 6B00           03007          CLRF   SSR_00_VALUE+11,     BANKED     ; all SSRs OFF
0009EA 6B00           03008          CLRF   SSR_00_FLAGS+11,     BANKED     ; all SSR flags cleared
0009EC 6B00           03009          CLRF   SSR_00_STEP+11,     BANKED
0009EE 6B00           03010          CLRF   SSR_00_SPEED+11,     BANKED
0009F0 6B00           03011          CLRF   SSR_00_COUNTER+11,     BANKED
  0000000C            03012 CH       ++
0009F2 6B00           03007          CLRF   SSR_00_VALUE+12,     BANKED     ; all SSRs OFF
0009F4 6B00           03008          CLRF   SSR_00_FLAGS+12,     BANKED     ; all SSR flags cleared
0009F6 6B00           03009          CLRF   SSR_00_STEP+12,     BANKED
0009F8 6B00           03010          CLRF   SSR_00_SPEED+12,     BANKED
0009FA 6B00           03011          CLRF   SSR_00_COUNTER+12,     BANKED
  0000000D            03012 CH       ++
0009FC 6B00           03007          CLRF   SSR_00_VALUE+13,     BANKED     ; all SSRs OFF
0009FE 6B00           03008          CLRF   SSR_00_FLAGS+13,     BANKED     ; all SSR flags cleared
000A00 6B00           03009          CLRF   SSR_00_STEP+13,     BANKED
000A02 6B00           03010          CLRF   SSR_00_SPEED+13,     BANKED
000A04 6B00           03011          CLRF   SSR_00_COUNTER+13,     BANKED
  0000000E            03012 CH       ++
000A06 6B00           03007          CLRF   SSR_00_VALUE+14,     BANKED     ; all SSRs OFF
000A08 6B00           03008          CLRF   SSR_00_FLAGS+14,     BANKED     ; all SSR flags cleared
000A0A 6B00           03009          CLRF   SSR_00_STEP+14,     BANKED
000A0C 6B00           03010          CLRF   SSR_00_SPEED+14,     BANKED
000A0E 6B00           03011          CLRF   SSR_00_COUNTER+14,     BANKED
  0000000F            03012 CH       ++
000A10 6B00           03007          CLRF   SSR_00_VALUE+15,     BANKED     ; all SSRs OFF
000A12 6B00           03008          CLRF   SSR_00_FLAGS+15,     BANKED     ; all SSR flags cleared
000A14 6B00           03009          CLRF   SSR_00_STEP+15,     BANKED
000A16 6B00           03010          CLRF   SSR_00_SPEED+15,     BANKED
000A18 6B00           03011          CLRF   SSR_00_COUNTER+15,     BANKED
  00000010            03012 CH       ++
000A1A 6B00           03007          CLRF   SSR_00_VALUE+16,     BANKED     ; all SSRs OFF
000A1C 6B00           03008          CLRF   SSR_00_FLAGS+16,     BANKED     ; all SSR flags cleared
000A1E 6B00           03009          CLRF   SSR_00_STEP+16,     BANKED
000A20 6B00           03010          CLRF   SSR_00_SPEED+16,     BANKED
000A22 6B00           03011          CLRF   SSR_00_COUNTER+16,     BANKED
  00000011            03012 CH       ++
000A24 6B00           03007          CLRF   SSR_00_VALUE+17,     BANKED     ; all SSRs OFF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A26 6B00           03008          CLRF   SSR_00_FLAGS+17,     BANKED     ; all SSR flags cleared
000A28 6B00           03009          CLRF   SSR_00_STEP+17,     BANKED
000A2A 6B00           03010          CLRF   SSR_00_SPEED+17,     BANKED
000A2C 6B00           03011          CLRF   SSR_00_COUNTER+17,     BANKED
  00000012            03012 CH       ++
000A2E 6B00           03007          CLRF   SSR_00_VALUE+18,     BANKED     ; all SSRs OFF
000A30 6B00           03008          CLRF   SSR_00_FLAGS+18,     BANKED     ; all SSR flags cleared
000A32 6B00           03009          CLRF   SSR_00_STEP+18,     BANKED
000A34 6B00           03010          CLRF   SSR_00_SPEED+18,     BANKED
000A36 6B00           03011          CLRF   SSR_00_COUNTER+18,     BANKED
  00000013            03012 CH       ++
000A38 6B00           03007          CLRF   SSR_00_VALUE+19,     BANKED     ; all SSRs OFF
000A3A 6B00           03008          CLRF   SSR_00_FLAGS+19,     BANKED     ; all SSR flags cleared
000A3C 6B00           03009          CLRF   SSR_00_STEP+19,     BANKED
000A3E 6B00           03010          CLRF   SSR_00_SPEED+19,     BANKED
000A40 6B00           03011          CLRF   SSR_00_COUNTER+19,     BANKED
  00000014            03012 CH       ++
                      03013         ENDW
                      03014 
                      03015         IF ROLE_MASTER
                      03016          MOVLW  0x80            ; Pass this command on to the other 
                      03017          CALL   SIO_WRITE_W     ; processor too
                      03018          IF HAS_STATUS_LEDS
                      03019           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03020          ENDIF
                      03021         ENDIF
000A42 0012           03022         RETURN
                      03023 
000A44                03024 S0_CMD1:
000A44 6E00           03025         MOVWF   YY_COMMAND, ACCESS      ; save command byte in YY_COMMAND
000A46 2CE8           03026         DECFSZ  WREG, W, ACCESS
000A48 D???           03027         BRA     S0_CMD2
                      03028         ; ON_OFF:
000A4A 0E01           03029         MOVLW   1
000A4C 6E00           03030         MOVWF   YY_STATE, ACCESS        ; -> state 1 (wait for channel)
000A4E 0012           03031         RETURN
                      03032 
000A50                03033 S0_CMD2:
                      03034         ; SET_LEVEL
000A50 2CE8           03035         DECFSZ  WREG, W, ACCESS
000A52 D???           03036         BRA     S0_CMD3
000A54 0E02           03037         MOVLW   2
000A56 6E00           03038         MOVWF   YY_STATE, ACCESS        ; -> state 2 (wait for channel)
000A58 0012           03039         RETURN
                      03040 
000A5A                03041 S0_CMD3:
                      03042         ; BULK_UPD
000A5A 2CE8           03043         DECFSZ  WREG, W, ACCESS
000A5C D???           03044         BRA     S0_CMD4
000A5E 0E04           03045         MOVLW   4
000A60 6E00           03046         MOVWF   YY_STATE, ACCESS        ; -> state 4 (wait for channel)
000A62 0012           03047         RETURN
                      03048 
000A64                03049 S0_CMD4:
                      03050         ; RAMP_LVL
000A64 2CE8           03051         DECFSZ  WREG, W, ACCESS
000A66 D???           03052         BRA     S0_CMD5
000A68 0E05           03053         MOVLW   5
000A6A 6E00           03054         MOVWF   YY_STATE, ACCESS        ; -> state 5 (wait for channel)
000A6C 0012           03055         RETURN
                      03056 
                      03057 ;       IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC || LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      03058 ;        #include "qscc_hook_5_6.asm"
                      03059 ;       ELSE
000A6E                03060 S0_CMD5:
                      03061          ; Unimplemented Command
000A6E 2CE8           03062          DECFSZ WREG, W, ACCESS
000A70 D???           03063          BRA    S0_CMD6
000A72 EF?? F???      03064          GOTO   ERR_NOT_IMP             ; XXX RESERVED FOR FUTURE COMMAND XXX
                      03065 
000A76                03066 S0_CMD6:
                      03067          ; Unimplemented Command
000A76 2CE8           03068          DECFSZ WREG, W, ACCESS
000A78 D???           03069          BRA    S0_CMD7
000A7A EF?? F???      03070          GOTO   ERR_NOT_IMP             ; XXX RESERVED FOR FUTURE COMMAND XXX
                      03071 ;       ENDIF
                      03072 
000A7E                03073 S0_CMD7:
                      03074         ; Extended commands
000A7E 2CE8           03075         DECFSZ  WREG, W, ACCESS
000A80 D???           03076         BRA     S0_CMD_ERR
000A82 0E09           03077         MOVLW   9
000A84 6E00           03078         MOVWF   YY_STATE, ACCESS        ; -> state 9 (decode extended command)
000A86 0012           03079         RETURN
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03080 
000A88                03081 S0_CMD_ERR:
                      03082         ; BUG: We really shouldn't have arrived here!
                      03083         ERR_BUG 0x01, ERR_CLASS_OVERRUN
000A88 0E01               M          MOVLW  0x01
000A8A 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000A8C 6A00               M          CLRF   YY_STATE, ACCESS
000A8E 0012               M          RETURN
                      03084          
000A90                03085 DATA_BYTE:
000A90 0004           03086         CLRWDT
                      03087         ;
                      03088         ; Check for escape sequences
                      03089         ;
                      03090         ; in MSB mode? set this byte's MSB and skip down
000A92 A200           03091         BTFSS   SSR_STATE2, MSB_ESC, ACCESS
000A94 D???           03092         BRA     DB_CHK_LITERAL
000A96 8F00           03093         BSF     SIO_INPUT, 7, BANKED
000A98 9200           03094         BCF     SSR_STATE2, MSB_ESC, ACCESS
000A9A D???           03095         BRA     DB_HANDLER
000A9C                03096 DB_CHK_LITERAL:
                      03097         ; no, how about in literal mode? if so, just pass through this byte
000A9C A000           03098         BTFSS   SSR_STATE2, LITERAL_ESC, ACCESS
000A9E D???           03099         BRA     DB_CHK_7E
000AA0 9000           03100         BCF     SSR_STATE2, LITERAL_ESC, ACCESS
000AA2 D???           03101         BRA     DB_HANDLER
000AA4                03102 DB_CHK_7E:
                      03103         ; no, ok, then is this the start of an MSB escape?
000AA4 0E7E           03104         MOVLW   0x7E
000AA6 6300           03105         CPFSEQ  SIO_INPUT, BANKED
000AA8 D???           03106         BRA     DB_CHK_7F
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AAA 8200           03107         BSF     SSR_STATE2, MSB_ESC, ACCESS
000AAC 0012           03108         RETURN
                      03109 
000AAE                03110 DB_CHK_7F:
                      03111         ; no, then maybe we're starting a literal escape?
000AAE 0E7F           03112         MOVLW   0x7F
000AB0 6300           03113         CPFSEQ  SIO_INPUT, BANKED
000AB2 D???           03114         BRA     DB_HANDLER
000AB4 8000           03115         BSF     SSR_STATE2, LITERAL_ESC, ACCESS
000AB6 0012           03116         RETURN
                      03117         
000AB8                03118 DB_HANDLER:
                      03119         ;
                      03120         ; Data byte:  If we're at state 0, we aren't expecting
                      03121         ; this, so just ignore it. 
                      03122         ;
000AB8 5000           03123         MOVF    YY_STATE, W, ACCESS
000ABA E1??           03124         BNZ     S1_DATA
000ABC 0012           03125         RETURN
                      03126         ;
                      03127         ; We're collecting data, so add this to the pile, depending
                      03128         ; on where the state machine is now.
                      03129         ;
000ABE                03130 S1_DATA:
                      03131         ;
                      03132         ; STATE 1: collect channel number for ON_OFF command
                      03133         ;          and execute.
                      03134         ;
000ABE C??? F???      03135         MOVFF   SIO_INPUT, YY_DATA;             Save data byte in YY_DATA
000AC2 2CE8           03136         DECFSZ  WREG, W, ACCESS
000AC4 D???           03137         BRA     S2_DATA
                      03138         ;
                      03139         ; ON_OFF:
                      03140         ;
                      03141         ;   ___7______6______5______4______3______2______1______0__
                      03142         ;  |                                  |                    |
                      03143         ;  |                0                 |          1         | YY_COMMAND
                      03144         ;  |______|______|______|______|______|______|______|______|
                      03145         ;  |      |0=off |                                         |
                      03146         ;  |   0  |1=on  |           Channel ID (0-47)             | YY_DATA
                      03147         ;  |______|______|______|______|______|______|______|______|
                      03148         ;
000AC6                03149 ON_OFF_YY_DATA:
000AC6 EC?? F???      03150         CALL    XLATE_SSR_ID
000ACA 6A00           03151         CLRF    YY_STATE, ACCESS                        ; reset command state
000ACC BC00           03152         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000ACE EF?? F???      03153         GOTO    ERR_COMMAND                             ; SSR number out of range
000AD2 BE00           03154         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000AD4 D???           03155         BRA     PASS_DOWN_ON_OFF
000AD6 BC00           03156         BTFSC   YY_DATA, 6, ACCESS
000AD8 D???           03157         BRA     ON_OFF_ON
000ADA 6AE8           03158         CLRF    WREG, ACCESS
000ADC EF?? F???      03159         GOTO    SSR_OUTPUT_VALUE                        ; set value off and return
                      03160 
000AE0                03161 ON_OFF_ON:
000AE0 68E8           03162         SETF    WREG, ACCESS
000AE2 EF?? F???      03163         GOTO    SSR_OUTPUT_VALUE                        ; set value on and return
                      03164         
000AE6                03165 PASS_DOWN_ON_OFF:
                      03166         IF ROLE_MASTER
                      03167          MOVLW  0x90
                      03168          CALL   SIO_WRITE_W
                      03169          MOVF   TARGET_SSR, W, ACCESS
                      03170          ANDLW  0x3F
                      03171          BTFSC  YY_DATA, 6, ACCESS
                      03172          BSF    WREG, 6, ACCESS
                      03173          SEND_8_BIT_W
                      03174          ;CALL  SIO_WRITE_W
                      03175          IF HAS_STATUS_LEDS
                      03176           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03177          ENDIF
                      03178          RETURN
                      03179         ELSE
000AE6 EF?? F???      03180          GOTO   ERR_COMMAND
                      03181         ENDIF
                      03182 
000AEA                03183 S2_DATA:
000AEA 2CE8           03184         DECFSZ  WREG, W, ACCESS
000AEC D???           03185         BRA     S3_DATA
                      03186         ; SET_LVL channel byte
000AEE EC?? F???      03187         CALL    XLATE_SSR_ID
000AF2 BC00           03188         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000AF4 EF?? F???      03189         GOTO    ERR_COMMAND
000AF8 BC00           03190         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (LSB of value)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AFA 8C00           03191         BSF     TARGET_SSR, 6, ACCESS   ; Reuse bit 6 (INVALID_SSR) for this purpose now
000AFC 2A00           03192         INCF    YY_STATE, F, ACCESS     ; -> state 3 (wait for level byte)
000AFE 0012           03193         RETURN
                      03194 
000B00                03195 S3_DATA:
                      03196         ; SET_LVL value byte
000B00 2CE8           03197         DECFSZ  WREG, W, ACCESS
000B02 D???           03198         BRA     S4_DATA
                      03199         ;
                      03200         ; SET_LVL:
                      03201         ;
                      03202         ;   ___7______6______5______4______3______2______1______0__
                      03203         ;  |                                  |                    |
                      03204         ;  |                0                 |          2         | YY_COMMAND
                      03205         ;  |______|______|______|______|______|______|______|______|
                      03206         ;  |NOT_MY|Value |                                         |
                      03207         ;  | _SSR |LSB   |           Channel ID (0-47)             | TARGET_SSR
                      03208         ;  |______|______|______|______|______|______|______|______|
                      03209         ;  |      |                                                |
                      03210         ;  |   0  |            Value MSBs (0-127)                  | YY_DATA
                      03211         ;  |______|______|______|______|______|______|______|______|
                      03212         ;
000B04 BE00           03213         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
000B06 D???           03214         BRA     PASS_DOWN_SET_LVL
000B08 90D8           03215         BCF     STATUS, C, ACCESS                       ; move LSB -> CARRY
000B0A BC00           03216         BTFSC   TARGET_SSR, 6, ACCESS
000B0C 80D8           03217         BSF     STATUS, C, ACCESS
000B0E 3400           03218         RLCF    YY_DATA, W, ACCESS                      ; Shift LSB into value byte
000B10 6A00           03219         CLRF    YY_STATE, ACCESS                        ; reset state (end of command)
                      03220         ;XXX removed MOVF       YY_DATA, W, ACCESS
000B12 EF?? F???      03221         GOTO    SSR_OUTPUT_VALUE                        ; set SSR to 8-bit YY_DATA value
                      03222 
000B16                03223 PASS_DOWN_SET_LVL:
                      03224         IF ROLE_MASTER
                      03225          MOVLW  0xA0
                      03226          CALL   SIO_WRITE_W
                      03227          BCF    TARGET_SSR, 7, ACCESS
                      03228          MOVF   TARGET_SSR, W, ACCESS
                      03229          SEND_8_BIT_W
                      03230          ;CALL  SIO_WRITE_W
                      03231          MOVF   YY_DATA, W, ACCESS
                      03232          SEND_8_BIT_W
                      03233          ;CALL  SIO_WRITE_W
                      03234          CLRF   YY_STATE, ACCESS
                      03235          IF HAS_STATUS_LEDS
                      03236           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03237          ENDIF
                      03238          RETURN
                      03239         ELSE
                      03240          ERR_BUG 0x02, ERR_CLASS_IN_VALID
000B16 0E02               M          MOVLW  0x02
000B18 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000B1A 6A00               M          CLRF   YY_STATE, ACCESS
000B1C 0012               M          RETURN
                      03241         ENDIF
                      03242 
000B1E                03243 S4_DATA:
000B1E 2CE8           03244         DECFSZ  WREG, W, ACCESS
000B20 D???           03245         BRA     S5_DATA
                      03246         ; BULK_UPD, received channel byte
000B22 EC?? F???      03247         CALL    XLATE_SSR_ID
000B26 BC00           03248         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000B28 EF?? F???      03249         GOTO    ERR_COMMAND
                      03250         ;BTFSC  YY_DATA, 6, ACCESS      ; preserve bit 7 (resolution flag)
                      03251         ;BSF    TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
                      03252         WAIT_FOR_SENTINEL .57, B'01010101', 0   ; -> S6.0 when sentinel found
000B2C 0E39               M          MOVLW  .57
000B2E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
000B30 0E55               M          MOVLW  B'01010101'
000B32 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
000B34 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
000B36 6E00               M          MOVWF  YY_STATE, ACCESS
000B38 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
000B3A 0E00               M          MOVLW  0
000B3C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
000B3E 0012           03253         RETURN
                      03254 
000B40                03255 S5_DATA:
000B40 2CE8           03256         DECFSZ  WREG, W, ACCESS
000B42 D???           03257         BRA     S6_DATA
                      03258         ; RAMP_LVL received channel number
000B44 EC?? F???      03259         CALL    XLATE_SSR_ID
000B48 BC00           03260         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
000B4A EF?? F???      03261         GOTO    ERR_COMMAND
000B4E BC00           03262         BTFSC   YY_DATA, 6, ACCESS      ; preserve bit 6 (direction flag)
000B50 8C00           03263         BSF     TARGET_SSR, 6, ACCESS   ; (reusing the INVALID_SSR bit)
000B52 6A00           03264         CLRF    YY_CMD_FLAGS, ACCESS
000B54 BE00           03265         BTFSC   YY_DATA, 7, ACCESS      ; bit 7: cycle flag -> YY_CMD_FLAGS
000B56 8E00           03266         BSF     YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
000B58 0E07           03267         MOVLW   7
000B5A 6E00           03268         MOVWF   YY_STATE, ACCESS        ; -> state 7 (wait for step count)
000B5C 0012           03269         RETURN
                      03270         
                      03271 
000B5E                03272 S6_DATA:
000B5E 2CE8           03273         DECFSZ  WREG, W, ACCESS
000B60 EF?? F???      03274         GOTO    S7_DATA
                      03275         ;
                      03276         ; State 6: Wait for Sentinel
                      03277         ;
                      03278         ; In this state, the machine is looking ahead in the data stream
                      03279         ; for a sentinel pattern.  The pattern is terminated by the byte
                      03280         ; YY_LOOK_FOR and must be seen in the next YY_LOOKAHEAD_MAX bytes.
                      03281         ; If the sentinel is not recognized before YY_LOOKAHEAD_MAX runs
                      03282         ; out, we abort on ERR_COMMAND.
                      03283         ;
                      03284         ; Once it's recognized, we move to YY_NEXT_STATE immediately.  This is
                      03285         ; not a state here in the state machine, but a sub-case of state 6
                      03286         ; to interpret the final packet.
                      03287         ;
                      03288         ; In order to do this, we buffer up the input received in YY_BUFFER.  This is
                      03289         ; a YY_BUF_LEN-byte memory space aligned on a data bank boundary where YY_BUF_LEN
                      03290         ; is not more than 256 (currently it's 200).  We will record the character at
                      03291         ; YY_BUFFER[YY_BUF_IDX++] and stop if YY_BUF_IDX > YY_LOOKAHEAD_MAX.
                      03292         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B64 0004           03293         CLRWDT
000B66 5000           03294         MOVF    YY_DATA, W, ACCESS              ; Is this the sentinel we're looking for?
000B68 6200           03295         CPFSEQ  YY_LOOK_FOR, ACCESS
000B6A EF?? F???      03296         GOTO    S6_KEEP_LOOKING
                      03297         ;
                      03298         ; We have a packet, now switch on YY_NEXT_STATE to decode and execute
                      03299         ; the completed command.
                      03300         ;
000B6E 5000           03301         MOVF    YY_NEXT_STATE, W, ACCESS
000B70 E0??           03302         BZ      S6_0_DATA
000B72 EF?? F???      03303         GOTO    S6_1_DATA       ; too far away for relative branch
                      03304         ;
                      03305         ; S6.0: Complete BULK_UPD command (from state 5)
                      03306         ;
                      03307         ;   ___7______6______5______4______3______2______1______0__
                      03308         ;  |                                  |                    |
                      03309         ;  |                0                 |          3         | YY_COMMAND
                      03310         ;  |______|______|______|______|______|______|______|______|
                      03311         ;  |NOT_MY|      |                                         |
                      03312         ;  | _SSR |      |   c = Starting Channel ID (0-47)        | TARGET_SSR
                      03313         ;  |______|______|______|______|______|______|______|______|
                      03314         ;  |      |                                                |
                      03315         ;  |   0  |      n = (Number of channels - 1) (0-47)       | YY_BUFFER+0
                      03316         ;  |______|______|______|______|______|______|______|______|
                      03317         ;  |                                                       |
                      03318         ;  |                  Value for SSR #c                     | YY_BUFFER+1
                      03319         ;  |______|______|______|______|______|______|______|______|
                      03320         ;  |                                                       |
                      03321         ;  |                  Value for SSR #c+1                   | YY_BUFFER+2
                      03322         ;  |______|______|______|______|______|______|______|______|
                      03323         ;                               .
                      03324         ;                               .
                      03325         ;                               .
                      03326         ;   _______________________________________________________
                      03327         ;  |                                                       |
                      03328         ;  |                  Value for SSR #c+n-1                 | YY_BUFFER+n
                      03329         ;  |______|______|______|______|______|______|______|______|
                      03330         ;                                                       <-- YY_BUF_IDX == n+1
                      03331         ;
                      03332         ;
                      03333         ;
000B76                03334 S6_0_DATA:
000B76 6A00           03335         CLRF    YY_STATE, ACCESS                ; go ahead and signal end of command parsing
                      03336         ;                                       ; now so we can just RETURN when done.
                      03337         ; Calculate expected data lengths
                      03338         ;
000B78 EE?? F0??      03339         LFSR    0, YY_BUFFER                    
000B7C 5000           03340         MOVF    TARGET_SSR, W, ACCESS           ; start
000B7E 0B3F           03341         ANDLW   0x3F
000B80 24EF           03342         ADDWF   INDF0, W, ACCESS                ; start + N-1      (N=#changed; N=n+1)
000B82 28E8           03343         INCF    WREG, W, ACCESS                 ; start + N
000B84 0814           03344         SUBLW   NUM_CHANNELS                    ; start + N > NUM_CHANNELS? 
000B86 E2??           03345         BC      S6_0_DATA_N_OK                  ; NO: proceed
000B88 EF?? F???      03346         GOTO    ERR_COMMAND                     ; YES: bad command - reject it!
                      03347         ;
                      03348         ; Do we have all the bytes yet?  (Or did a data byte happen to equal our sentinel?)
                      03349         ;
000B8C                03350 S6_0_DATA_N_OK:
000B8C 28EF           03351         INCF    INDF0, W, ACCESS                ; W=N
000B8E 6400           03352         CPFSGT  YY_BUF_IDX, ACCESS              ; if IDX > N, we're done.
000B90 EF?? F???      03353         GOTO    S6_KEEP_LOOKING                 ; otherwise, go back and wait for more data
                      03354         ; XXX Don't do this.
                      03355         ;INCF   INDF0, F, ACCESS                ; fix it so that YY_BUFFER[0] is N, not N-1
                      03356         ;
                      03357         ; start bulk update of channels
                      03358         ;
                      03359         ; Remember that since the protocol specifies that we get N-1 in the length field,
                      03360         ; we will always have at least 1 channel to change.  (There's no way to specify a
                      03361         ; BULK_UPD command to change 0 channels.)
                      03362         ;
                      03363         ; Does the target range of channels lie entirely within the slave chip's 
                      03364         ; range?  If so, just pass the whole command down to it, with starting SSR
                      03365         ; number translated down to its range...
                      03366         ;
000B94 AE00           03367         BTFSS   TARGET_SSR, NOT_MY_SSR, ACCESS
000B96 D???           03368         BRA     S6_0_UPDATE_MASTER
                      03369         IF ROLE_MASTER
                      03370          CLRWDT
                      03371          IF HAS_STATUS_LEDS
                      03372           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03373          ENDIF
                      03374          MOVLW  0xB0                            ; command code
                      03375          CALL   SIO_WRITE_W
                      03376          MOVF   TARGET_SSR, W, ACCESS           ; starting channel
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03377          SEND_8_BIT_W
                      03378          LFSR   0, YY_BUFFER                    ; now write YY_BUFFER[0..YY_BUF_IDX-1]
                      03379 S6_0_PD_ALL:
                      03380          MOVF   POSTINC0, W, ACCESS
                      03381          SEND_8_BIT_W
                      03382          DECFSZ YY_BUF_IDX, F, ACCESS
                      03383          BRA    S6_0_PD_ALL
                      03384          MOVLW  0x55                            ; and finally the trailing sentinel byte $55.
                      03385          CALL   SIO_WRITE_W
                      03386          RETURN
                      03387         ELSE
                      03388          ERR_BUG 0x03, ERR_CLASS_IN_VALID
000B98 0E03               M          MOVLW  0x03
000B9A 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000B9C 6A00               M          CLRF   YY_STATE, ACCESS
000B9E 0012               M          RETURN
                      03389         ENDIF
                      03390 
000BA0                03391 S6_0_UPDATE_MASTER:
                      03392         ;
                      03393         ; Copy the bytes directly into SSR registers
                      03394         ;
000BA0 0004           03395         CLRWDT
000BA2 EE?? F0??      03396         LFSR    0, YY_BUFFER                    ; FSR0 points to each source data byte to copy
000BA6 EE?? F0??      03397         LFSR    1, SSR_00_VALUE                 ; FSR1 points to each destination SSR control block
000BAA EE?? F0??      03398         LFSR    2, SSR_00_FLAGS                 ; FSR2 points to the SSR flag blocks
000BAE 5000           03399         MOVF    TARGET_SSR, W, ACCESS           ; Move in to first SSR in target range
000BB0 0B3F           03400         ANDLW   0x3F
000BB2 26E1           03401         ADDWF   FSR1L, F, ACCESS                
000BB4 26D9           03402         ADDWF   FSR2L, F, ACCESS
                      03403         IF ROLE_MASTER
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03404          SUBLW  .24
                      03405          MOVWF  KK, ACCESS                      ; KK=24-start (max # of channels on OUR chip)
                      03406         ENDIF
000BB6 CFEE F???      03407         MOVFF   POSTINC0, I                     ; I=N counter           (I = *FSR0++ + 1)
000BBA 2A00           03408         INCF    I, F, ACCESS                    ;                            \_____/
                      03409                                                 ;                               n
000BBC                03410 S6_0_UPDATE_NEXT:
000BBC 6ADE           03411         CLRF    POSTINC2, ACCESS                ; clear SSR flags       *fsr2++ = 0
000BBE CFEE FFE7      03412         MOVFF   POSTINC0, INDF1                 ; set SSR               *fsr1++ = *fsr0++
000BC2 2AE1           03413         INCF    FSR1L, F, ACCESS
                      03414         IF ROLE_MASTER                          ;
                      03415          DCFSNZ KK, F, ACCESS
                      03416          BRA    S6_0_PASS_DOWN                  ; ran out of KK, send rest to slave chip
                      03417         ENDIF
000BC4 2E00           03418         DECFSZ  I, F, ACCESS
000BC6 D???           03419         BRA     S6_0_UPDATE_NEXT
000BC8 0012           03420         RETURN
                      03421 
                      03422         IF ROLE_MASTER
                      03423 S6_0_PASS_DOWN:
                      03424          DCFSNZ I, F, ACCESS                    ; we left before I-- happened
                      03425          RETURN                                 ; already out of data to send; don't bother the slave
                      03426          IF HAS_STATUS_LEDS
                      03427           SET_SSR_BLINK_FADE SSR_YELLOW         ; slave activity indicator
                      03428          ENDIF
                      03429          MOVLW  0xB0                            ; Start command to slave with I remaining values
                      03430          CALL   SIO_WRITE_W                     
                      03431          CLRF   WREG, ACCESS                    ; target SSR always 0 in this case
                      03432          SEND_8_BIT_W
                      03433          DECF   I, W, ACCESS                    ; I channels left for slave to update, 
                      03434          SEND_8_BIT_W                           ;    protocol wants I-1
                      03435 S6_0_PD_NEXT:
                      03436          MOVF   POSTINC0, W, ACCESS
                      03437          SEND_8_BIT_W
                      03438          DECFSZ I, F, ACCESS
                      03439          BRA    S6_0_PD_NEXT
                      03440          MOVLW  0x55                            ; sentinel $55 after bytes
                      03441          CALL   SIO_WRITE_W
                      03442          RETURN
                      03443         ENDIF
000BCA 0012           03444         RETURN
                      03445 
                      03446 
000BCC                03447 S6_1_DATA:
000BCC 2EE8           03448         DECFSZ  WREG, F, ACCESS
000BCE D???           03449         BRA     S6_2_DATA
                      03450         ;
                      03451         ; S6.1: CF_CONF Command completed:
                      03452         ;
                      03453         ;   ___7______6______5______4______3______2______1______0__
                      03454         ;  |                                  |                    |
                      03455         ;  |                0                 |          7         | YY_COMMAND
                      03456         ;  |______|______|______|______|______|______|______|______|
                      03457         ;  |      |      |      |      |                           |
                      03458         ;  |   0  |   1  |   1  |   1  |             1             | (not saved)
                      03459         ;  |______|______|______|______|______|______|______|______|
                      03460         ;  |      |    Sensors connected      |DMX   | DMX start   |  
                      03461         ;  |   0  |   A      B      C      D  |MODE  | <8:7>       | YY_BUFFER+0
                      03462         ;  |______|______|______|______|______|______|______|______|
                      03463         ;  |      |                                                |
                      03464         ;  |   0  |               DMX start <6:0>                  | YY_BUFFER+1
                      03465         ;  |______|______|______|______|______|______|______|______|
                      03466         ;  |      |                                                |
                      03467         ;  |   0  |                   $3A                          | YY_BUFFER+2
                      03468         ;  |______|______|______|______|______|______|______|______|
                      03469         ;  |      |                                                |
                      03470         ;  |   0  |                   $3B                          | YY_DATA
                      03471         ;  |______|______|______|______|______|______|______|______|
                      03472         ;
                      03473         ; Validate inputs
                      03474         ;
000BD0 0E03           03475         MOVLW   3
000BD2 5C00           03476         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000BD4 E2??           03477         BC      S6_1_VALID_1    
000BD6 EF?? F???      03478         GOTO    S6_KEEP_LOOKING                 ; input < 3? not done yet
                      03479 
000BDA                03480 S6_1_VALID_1:
000BDA E0??           03481         BZ      S6_1_VALID_2                    ; 
000BDC EF?? F???      03482         GOTO    ERR_COMMAND                     ; input > 3? too big: reject
                      03483 
000BE0                03484 S6_1_VALID_2:
000BE0 EE?? F0??      03485         LFSR    0, YY_BUFFER+2
000BE4 50ED           03486         MOVF    POSTDEC0, W, ACCESS             ; check 1st sentinel
                      03487         ;ANDLW  0x3F
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BE6 083A           03488         SUBLW   0x3A
000BE8 E0??           03489         BZ      S6_1_CONFIGURE
000BEA EF?? F???      03490         GOTO    ERR_COMMAND
                      03491 
000BEE                03492 S6_1_CONFIGURE:
000BEE CFED F???      03493         MOVFF   POSTDEC0, DMX_SLOTL
000BF2 6A00           03494         CLRF    DMX_SLOTH, ACCESS
000BF4 B0EF           03495         BTFSC   INDF0, 0, ACCESS
000BF6 8E00           03496         BSF     DMX_SLOTL, 7, ACCESS
000BF8 B2EF           03497         BTFSC   INDF0, 1, ACCESS
000BFA 8000           03498         BSF     DMX_SLOTH, DMX_BIT8, ACCESS
000BFC B4EF           03499         BTFSC   INDF0, 2, ACCESS
000BFE 8E00           03500         BSF     DMX_SLOTH, DMX_EN, ACCESS
                      03501         ;
                      03502         ; Save DMX settings to EEPROM
                      03503         ;
                      03504         BEGIN_EEPROM_WRITE EE_DMX_H
000C00 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000C02 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DMX_H    ; NOTE interrupts need to be OFF here!
000C04 0E00               M          MOVLW  HIGH(EE_DMX_H)          ; NOTE interrupts need to be OFF here!
000C06 6EAA               M          MOVWF  EEADRH, ACCESS
000C08 0E05               M          MOVLW  LOW(EE_DMX_H)
000C0A 6EA9               M          MOVWF  EEADR, ACCESS
000C0C 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000C0E 9CA6               M          BCF    EECON1, CFGS, ACCESS
000C10 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000C12 C??? FFA8      03505         MOVFF   DMX_SLOTH, EEDATA
                      03506         WRITE_EEPROM_DATA_INC
                          M         WRITE_EEPROM_DATA
000C16 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C18 0E55               M          MOVLW  0x55
000C1A 6EA7               M          MOVWF  EECON2, ACCESS
000C1C 0EAA               M          MOVLW  0xAA
000C1E 6EA7               M          MOVWF  EECON2, ACCESS
000C20 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C22                    M WRITE_EEPROM_LOOP1:
000C22 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C24 D???               M          BRA    WRITE_EEPROM_LOOP1
000C26 0004               M          CLRWDT
000C28 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000002                M EE_LL_XX    ++
000C2A 2AA9               M         INCF    EEADR, F, ACCESS
000C2C C??? FFA8      03507         MOVFF   DMX_SLOTL, EEDATA
                      03508         WRITE_EEPROM_DATA
000C30 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C32 0E55               M          MOVLW  0x55
000C34 6EA7               M          MOVWF  EECON2, ACCESS
000C36 0EAA               M          MOVLW  0xAA
000C38 6EA7               M          MOVWF  EECON2, ACCESS
000C3A 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C3C                    M WRITE_EEPROM_LOOP2:
000C3C A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C3E D???               M          BRA    WRITE_EEPROM_LOOP2
000C40 0004               M          CLRWDT
000C42 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000003                M EE_LL_XX    ++
                      03509         END_EEPROM_WRITE
000C44 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000C46 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000C48 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000C4A 6AAA               M          CLRF   EEADRH, ACCESS
000C4C 6AA9               M          CLRF   EEADR, ACCESS
                      03510         ;
                      03511         ; Configure sensors
                      03512         ;
                      03513         IF HAS_SENSORS
                      03514          BSF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      03515          BSF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03516          BSF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03517          BSF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03518          BTFSS  INDF0, 6, ACCESS                        ; A 
                      03519          BCF    TRIS_SENS_A, BIT_SENS_A, ACCESS
                      03520          BTFSS  INDF0, 5, ACCESS                        ; B 
                      03521          BCF    TRIS_SENS_B, BIT_SENS_B, ACCESS
                      03522          BTFSS  INDF0, 4, ACCESS                        ; C 
                      03523          BCF    TRIS_SENS_C, BIT_SENS_C, ACCESS
                      03524          BTFSS  INDF0, 3, ACCESS                        ; D 
                      03525          BCF    TRIS_SENS_D, BIT_SENS_D, ACCESS
                      03526          ;
                      03527          ; Save these settings to EEPROM
                      03528          ;
                      03529          BEGIN_EEPROM_WRITE EE_SENSOR_CFG
                      03530          RRNCF  INDF0, W, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03531          RRNCF  WREG, W, ACCESS
                      03532          RRNCF  WREG, W, ACCESS
                      03533          ANDLW  0x0f
                      03534          MOVFF  WREG, EEDATA
                      03535          WRITE_EEPROM_DATA
                      03536          END_EEPROM_WRITE
                      03537         ENDIF
                      03538 
000C4E 6A00           03539         CLRF    YY_STATE, ACCESS
000C50 0012           03540         RETURN
                      03541 
000C52                03542 S6_2_DATA:
000C52 2EE8           03543         DECFSZ  WREG, F, ACCESS
000C54 D???           03544         BRA     S6_3_DATA
                      03545         ;
                      03546         ; S6.2: CF_BAUD Command completed:
                      03547         ;
                      03548         ;   ___7______6______5______4______3______2______1______0__
                      03549         ;  |                                  |                    |
                      03550         ;  |                0                 |          7         | YY_COMMAND
                      03551         ;  |______|______|______|______|______|______|______|______|
                      03552         ;  |      |      |      |      |                           |
                      03553         ;  |   0  |   1  |   1  |   1  |             2             | (not saved)
                      03554         ;  |______|______|______|______|______|______|______|______|
                      03555         ;  |      |                                                |  
                      03556         ;  |   0  |              baud rate code                    | YY_BUFFER+0
                      03557         ;  |______|______|______|______|______|______|______|______|
                      03558         ;  |      |                                                |
                      03559         ;  |   0  |                   $26                          | YY_DATA
                      03560         ;  |______|______|______|______|______|______|______|______|
                      03561         ;
                      03562         ; Validate inputs
                      03563         ;
000C56 0E01           03564         MOVLW   1
000C58 5C00           03565         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000C5A E2??           03566         BC      S6_2_VALID1
000C5C EF?? F???      03567         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03568 
000C60                03569 S6_2_VALID1:
000C60 E0??           03570         BZ      S6_2_VALID2
000C62 EF?? F???      03571         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03572 
000C66                03573 S6_2_VALID2:
000C66 EE?? F0??      03574         LFSR    0, YY_BUFFER
000C6A 0E0B           03575         MOVLW   0x0B
000C6C 5CEF           03576         SUBWF   INDF0, W, ACCESS                ; test baud rate in range [$00,$0A]
000C6E E3??           03577         BNC     S6_2_SET_BAUD
000C70 EF?? F???      03578         GOTO    ERR_COMMAND
                      03579 
000C74                03580 S6_2_SET_BAUD:
                      03581         ;
                      03582         ; Change the baud rate in the slave first, or we'll
                      03583         ; never be able to talk to it again...
                      03584         ;
                      03585         ; limit baud rate value 
000C74 0E0F           03586         MOVLW   0x0F
000C76 16EF           03587         ANDWF   INDF0, F, ACCESS
                      03588         IF ROLE_MASTER
                      03589          IF HAS_STATUS_LEDS
                      03590           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03591          ENDIF
                      03592          MOVLW  0xF0                            ; F0 72 <baud> 26  -> slave
                      03593          CALL   SIO_WRITE_W
                      03594          MOVLW  0x72
                      03595          CALL   SIO_WRITE_W
                      03596          MOVF   INDF0, W, ACCESS
                      03597          CALL   SIO_WRITE_W
                      03598          MOVLW  0x26
                      03599          CALL   SIO_WRITE_W
                      03600          CALL   DRAIN_M_S_TX_BLOCKING           ; wait for command to slave to be fully sent
                      03601         ENDIF                                   ; before changing the UART speed on it.
                      03602 
                      03603         BEGIN_EEPROM_WRITE EE_BAUD
000C78 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000C7A 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_BAUD     ; NOTE interrupts need to be OFF here!
000C7C 0E00               M          MOVLW  HIGH(EE_BAUD)           ; NOTE interrupts need to be OFF here!
000C7E 6EAA               M          MOVWF  EEADRH, ACCESS
000C80 0E01               M          MOVLW  LOW(EE_BAUD)
000C82 6EA9               M          MOVWF  EEADR, ACCESS
000C84 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000C86 9CA6               M          BCF    EECON1, CFGS, ACCESS
000C88 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000C8A CFEF FFA8      03604         MOVFF   INDF0, EEDATA                   ; save value permanently (address 001)
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03605         WRITE_EEPROM_DATA
000C8E 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000C90 0E55               M          MOVLW  0x55
000C92 6EA7               M          MOVWF  EECON2, ACCESS
000C94 0EAA               M          MOVLW  0xAA
000C96 6EA7               M          MOVWF  EECON2, ACCESS
000C98 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000C9A                    M WRITE_EEPROM_LOOP3:
000C9A A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000C9C D???               M          BRA    WRITE_EEPROM_LOOP3
000C9E 0004               M          CLRWDT
000CA0 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000004                M EE_LL_XX    ++
                      03606         END_EEPROM_WRITE
000CA2 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000CA4 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000CA6 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000CA8 6AAA               M          CLRF   EEADRH, ACCESS
000CAA 6AA9               M          CLRF   EEADR, ACCESS
000CAC 50EF           03607         MOVF    INDF0, W, ACCESS
000CAE EC?? F???      03608         CALL    SIO_SET_BAUD_W
000CB2 6A00           03609         CLRF    YY_STATE, ACCESS
000CB4 0012           03610         RETURN
                      03611 
000CB6                03612 S6_3_DATA:
000CB6 2EE8           03613         DECFSZ  WREG, F, ACCESS
000CB8 D???           03614         BRA     S6_4_DATA
                      03615         ;
                      03616         ; S6.3: CF_RESET Command completed:
                      03617         ;
                      03618         ;   ___7______6______5______4______3______2______1______0__
                      03619         ;  |                                  |                    |
                      03620         ;  |                0                 |          7         | YY_COMMAND
                      03621         ;  |______|______|______|______|______|______|______|______|
                      03622         ;  |      |      |      |      |                           |
                      03623         ;  |   0  |   1  |   1  |   1  |             3             | (not saved)
                      03624         ;  |______|______|______|______|______|______|______|______|
                      03625         ;  |      |                                                |
                      03626         ;  |   0  |                   $24                          | YY_BUFFER+0
                      03627         ;  |______|______|______|______|______|______|______|______|
                      03628         ;  |      |                                                |
                      03629         ;  |   0  |                   $72                          | YY_DATA
                      03630         ;  |______|______|______|______|______|______|______|______|
                      03631         ;
                      03632         ; Validate inputs
                      03633         ;
000CBA 0E01           03634         MOVLW   1
000CBC 5C00           03635         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000CBE E2??           03636         BC      S6_3_VALID      
000CC0 EF?? F???      03637         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03638 
000CC4                03639 S6_3_VALID:
000CC4 E0??           03640         BZ      S6_3_RESET
000CC6 EF?? F???      03641         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03642 
000CCA                03643 S6_3_RESET:
000CCA EE?? F0??      03644         LFSR    0, YY_BUFFER
000CCE 0E24           03645         MOVLW   0x24
000CD0 62EF           03646         CPFSEQ  INDF0, ACCESS
000CD2 EF?? F???      03647         GOTO    ERR_COMMAND
000CD6 EF?? F???      03648         GOTO    FACTORY_RESET                   ; we never return from here
                      03649         ERR_BUG 0x70, ERR_CLASS_FATAL_RESET     
000CDA 0E70               M          MOVLW  0x70
000CDC 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_FATAL_RESET == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_FATAL_RESET == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_FATAL_RESET == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_FATAL_RESET == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_FATAL_RESET == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
000CDE 6A00               M          CLRF   YY_STATE, ACCESS
000CE0 0012               M          RETURN
                      03650 
000CE2                03651 S6_3_HALT:
000CE2 D???           03652         BRA     S6_3_HALT
                      03653 
000CE4                03654 S6_4_DATA:
000CE4 2EE8           03655         DECFSZ  WREG, F, ACCESS
000CE6 D???           03656         BRA     S6_5_DATA
                      03657         ;
                      03658         ; S6.4: CF_PHASE Command completed:
                      03659         ;
                      03660         ;   ___7______6______5______4______3______2______1______0__
                      03661         ;  |                                  |                    |
                      03662         ;  |                0                 |          7         | YY_COMMAND
                      03663         ;  |______|______|______|______|______|______|______|______|
                      03664         ;  |      |      |      |      |             | phase       |
                      03665         ;  |   0  |   1  |   0  |   0  |   X      X  |  <8:7>      | YY_YY
                      03666         ;  |______|______|______|______|______|______|______|______|
                      03667         ;  |      |                                                |
                      03668         ;  |   0  |               phase <6:0>                      | YY_BUFFER+0
                      03669         ;  |______|______|______|______|______|______|______|______|
                      03670         ;  |      |                                                |
                      03671         ;  |   0  |                   $50                          | YY_BUFFER+1
                      03672         ;  |______|______|______|______|______|______|______|______|
                      03673         ;  |      |                                                |
                      03674         ;  |   0  |                   $4F                          | YY_DATA
                      03675         ;  |______|______|______|______|______|______|______|______|
                      03676         ;
                      03677         ; Validate inputs
                      03678         ;
000CE8 0E02           03679         MOVLW   2
000CEA 5C00           03680         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000CEC E2??           03681         BC      S6_4_VALID
000CEE EF?? F???      03682         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03683 
000CF2                03684 S6_4_VALID:
000CF2 E0??           03685         BZ      S6_4_SET_PHASE
000CF4 EF?? F???      03686         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03687 
000CF8                03688 S6_4_SET_PHASE:
000CF8 EE?? F0??      03689         LFSR    0, YY_BUFFER+1
000CFC 0E50           03690         MOVLW   0x50
000CFE 62ED           03691         CPFSEQ  POSTDEC0, ACCESS
000D00 EF?? F???      03692         GOTO    ERR_COMMAND
                      03693         ;
                      03694         ; Set phase (and notify slave)
                      03695         ;
                      03696         IF ROLE_MASTER
                      03697          IF HAS_STATUS_LEDS
                      03698           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03699          ENDIF
                      03700          MOVLW  0xF0
                      03701          CALL   SIO_WRITE_W
                      03702          MOVF   YY_YY, W, ACCESS
                      03703          SEND_8_BIT_W
                      03704          ;CALL  SIO_WRITE_W
                      03705          MOVF   INDF0, W, ACCESS
                      03706          SEND_8_BIT_W
                      03707          ;CALL  SIO_WRITE_W
                      03708          MOVLW  0x50
                      03709          CALL   SIO_WRITE_W
                      03710          MOVLW  0x4F
                      03711          CALL   SIO_WRITE_W
                      03712         ENDIF
000D04 CFEF F???      03713         MOVFF   INDF0, PHASE_OFFSETL
000D08 B000           03714         BTFSC   YY_YY, 0, ACCESS
000D0A 8E00           03715         BSF     PHASE_OFFSETL, 7, ACCESS
000D0C 6A00           03716         CLRF    PHASE_OFFSETH, ACCESS
000D0E B200           03717         BTFSC   YY_YY, 1, ACCESS
000D10 8000           03718         BSF     PHASE_OFFSETH, 0, ACCESS
                      03719         BEGIN_EEPROM_WRITE EE_PHASE_H
000D12 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000D14 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_PHASE_H  ; NOTE interrupts need to be OFF here!
000D16 0E00               M          MOVLW  HIGH(EE_PHASE_H)        ; NOTE interrupts need to be OFF here!
000D18 6EAA               M          MOVWF  EEADRH, ACCESS
000D1A 0E03               M          MOVLW  LOW(EE_PHASE_H)
000D1C 6EA9               M          MOVWF  EEADR, ACCESS
000D1E 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000D20 9CA6               M          BCF    EECON1, CFGS, ACCESS
000D22 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000D24 C??? FFA8      03720         MOVFF   PHASE_OFFSETH, EEDATA
                      03721         WRITE_EEPROM_DATA
000D28 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D2A 0E55               M          MOVLW  0x55
000D2C 6EA7               M          MOVWF  EECON2, ACCESS
000D2E 0EAA               M          MOVLW  0xAA
000D30 6EA7               M          MOVWF  EECON2, ACCESS
000D32 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D34                    M WRITE_EEPROM_LOOP4:
000D34 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D36 D???               M          BRA    WRITE_EEPROM_LOOP4
000D38 0004               M          CLRWDT
000D3A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000005                M EE_LL_XX    ++
                      03722         SET_EEPROM_ADDRESS EE_PHASE_L
000D3C 0E00               M          MOVLW  HIGH(EE_PHASE_L)        ; NOTE interrupts need to be OFF here!
000D3E 6EAA               M          MOVWF  EEADRH, ACCESS
000D40 0E04               M          MOVLW  LOW(EE_PHASE_L)
000D42 6EA9               M          MOVWF  EEADR, ACCESS
000D44 C??? FFA8      03723         MOVFF   PHASE_OFFSETL, EEDATA
                      03724         WRITE_EEPROM_DATA
000D48 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000D4A 0E55               M          MOVLW  0x55
000D4C 6EA7               M          MOVWF  EECON2, ACCESS
000D4E 0EAA               M          MOVLW  0xAA
000D50 6EA7               M          MOVWF  EECON2, ACCESS
000D52 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000D54                    M WRITE_EEPROM_LOOP5:
000D54 A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000D56 D???               M          BRA    WRITE_EEPROM_LOOP5
000D58 0004               M          CLRWDT
000D5A 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000006                M EE_LL_XX    ++
                      03725         END_EEPROM_WRITE
000D5C 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000D5E 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000D60 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000D62 6AAA               M          CLRF   EEADRH, ACCESS
000D64 6AA9               M          CLRF   EEADR, ACCESS
000D66 6A00           03726         CLRF    YY_STATE, ACCESS
000D68 0012           03727         RETURN
                      03728         
000D6A                03729 S6_5_DATA:
000D6A 2EE8           03730         DECFSZ  WREG, F, ACCESS
000D6C D???           03731         BRA     S6_6_DATA
                      03732         ;
                      03733         ; S6.5: CF_ADDR Command completed:
                      03734         ;
                      03735         ;   ___7______6______5______4______3______2______1______0__
                      03736         ;  |                                  |                    |
                      03737         ;  |                0                 |          7         | YY_COMMAND
                      03738         ;  |______|______|______|______|______|______|______|______|
                      03739         ;  |      |      |      |      |                           |
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03740         ;  |   0  |   1  |   1  |   0  |    new device address     | YY_YY      
                      03741         ;  |______|______|______|______|______|______|______|______|
                      03742         ;  |      |                                                |
                      03743         ;  |   0  |                   $49                          | YY_BUFFER+0
                      03744         ;  |______|______|______|______|______|______|______|______|
                      03745         ;  |      |                                                |
                      03746         ;  |   0  |                   $41                          | YY_BUFFER+1
                      03747         ;  |______|______|______|______|______|______|______|______|
                      03748         ;  |      |                                                |
                      03749         ;  |   0  |                   $44                          | YY_DATA
                      03750         ;  |______|______|______|______|______|______|______|______|
                      03751         ;
                      03752         ; Validate inputs
                      03753         ;
000D6E 0E02           03754         MOVLW   2
000D70 5C00           03755         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000D72 E2??           03756         BC      S6_5_VALID
000D74 EF?? F???      03757         GOTO    S6_KEEP_LOOKING                 ; input < 2? not done yet
                      03758 
000D78                03759 S6_5_VALID:
000D78 E0??           03760         BZ      S6_5_ADDR
000D7A EF?? F???      03761         GOTO    ERR_COMMAND                     ; input > 2? too big: reject
                      03762 
000D7E                03763 S6_5_ADDR:
000D7E EE?? F0??      03764         LFSR    0, YY_BUFFER+1
000D82 0E41           03765         MOVLW   0x41
000D84 62ED           03766         CPFSEQ  POSTDEC0, ACCESS
000D86 EF?? F???      03767         GOTO    ERR_COMMAND
000D8A 0E49           03768         MOVLW   0x49
000D8C 62EF           03769         CPFSEQ  INDF0, ACCESS
000D8E EF?? F???      03770         GOTO    ERR_COMMAND
                      03771         ;
                      03772         ; set address
                      03773         ;
000D92 5000           03774         MOVF    YY_YY, W, ACCESS
000D94 0B0F           03775         ANDLW   0x0F
000D96 6E00           03776         MOVWF   MY_ADDRESS, ACCESS
                      03777         BEGIN_EEPROM_WRITE EE_DEV_ID
000D98 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
000D9A 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_DEV_ID   ; NOTE interrupts need to be OFF here!
000D9C 0E00               M          MOVLW  HIGH(EE_DEV_ID)         ; NOTE interrupts need to be OFF here!
000D9E 6EAA               M          MOVWF  EEADRH, ACCESS
000DA0 0E02               M          MOVLW  LOW(EE_DEV_ID)
000DA2 6EA9               M          MOVWF  EEADR, ACCESS
000DA4 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
000DA6 9CA6               M          BCF    EECON1, CFGS, ACCESS
000DA8 84A6               M          BSF    EECON1, WREN, ACCESS    ; enable writing
000DAA C??? FFA8      03778         MOVFF   MY_ADDRESS, EEDATA
                      03779         WRITE_EEPROM_DATA
000DAE 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
000DB0 0E55               M          MOVLW  0x55
000DB2 6EA7               M          MOVWF  EECON2, ACCESS
000DB4 0EAA               M          MOVLW  0xAA
000DB6 6EA7               M          MOVWF  EECON2, ACCESS
000DB8 82A6               M          BSF    EECON1, WR, ACCESS      ; start write cycle
000DBA                    M WRITE_EEPROM_LOOP6:
000DBA A8A1               M          BTFSS  PIR2, EEIF, ACCESS      ; wait until write completes
000DBC D???               M          BRA    WRITE_EEPROM_LOOP6
000DBE 0004               M          CLRWDT
000DC0 98A1               M          BCF    PIR2, EEIF, ACCESS      ; clear interrupt flag
  00000007                M EE_LL_XX    ++
                      03780         END_EEPROM_WRITE
000DC2 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
000DC4 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
000DC6 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
000DC8 6AAA               M          CLRF   EEADRH, ACCESS
000DCA 6AA9               M          CLRF   EEADR, ACCESS
000DCC 6A00           03781         CLRF    YY_STATE, ACCESS
000DCE 0012           03782         RETURN
                      03783 
000DD0                03784 S6_6_DATA:
000DD0 2EE8           03785         DECFSZ  WREG, F, ACCESS
000DD2 D???           03786         BRA     S6_7_DATA
                      03787         ;
                      03788         ; S6.6: SLEEP Command completed:
                      03789         ;
                      03790         ;   ___7______6______5______4______3______2______1______0__
                      03791         ;  |                                  |                    |
                      03792         ;  |                0                 |          7         | YY_COMMAND
                      03793         ;  |______|______|______|______|______|______|______|______|
                      03794         ;  |      |      |      |      |                           |
                      03795         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      03796         ;  |______|______|______|______|______|______|______|______|
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03797         ;  |      |                                                |
                      03798         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      03799         ;  |______|______|______|______|______|______|______|______|
                      03800         ;  |      |                                                |
                      03801         ;  |   0  |                   $5A                          | YY_DATA
                      03802         ;  |______|______|______|______|______|______|______|______|
                      03803         ;
                      03804         ; Validate inputs
                      03805         ;
000DD4 0E01           03806         MOVLW   1
000DD6 5C00           03807         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000DD8 E2??           03808         BC      S6_6_VALID
000DDA EF?? F???      03809         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03810 
000DDE                03811 S6_6_VALID:
000DDE E0??           03812         BZ      S6_6_SLEEP
000DE0 EF?? F???      03813         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03814 
000DE4                03815 S6_6_SLEEP:
000DE4 EE?? F0??      03816         LFSR    0, YY_BUFFER
000DE8 0E5A           03817         MOVLW   0x5A
000DEA 62EF           03818         CPFSEQ  INDF0, ACCESS
000DEC EF?? F???      03819         GOTO    ERR_COMMAND
000DF0 6A00           03820         CLRF    YY_STATE, ACCESS
000DF2                03821 DO_CMD_SLEEP:
000DF2 B800           03822         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; don't sleep in priv mode
000DF4 0012           03823         RETURN
                      03824         ;
                      03825         ; Pass command to slave
                      03826         ;
                      03827         IF ROLE_MASTER
                      03828          IF HAS_STATUS_LEDS
                      03829           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03830          ENDIF
                      03831          MOVLW  0xF0
                      03832          CALL   SIO_WRITE_W
                      03833          CLRF   WREG, ACCESS
                      03834          CALL   SIO_WRITE_W
                      03835          MOVLW  0x5A
                      03836          CALL   SIO_WRITE_W
                      03837          MOVLW  0x5A
                      03838          CALL   SIO_WRITE_W
                      03839         ENDIF
                      03840         ;
                      03841         ; Tell power supply to sleep
                      03842         ;
                      03843         IF HAS_POWER_CTRL
                      03844          BSF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      03845         ENDIF
                      03846         IF HAS_STATUS_LEDS
                      03847          SET_SSR_SLOW_FLASH SSR_GREEN
                      03848          SET_SSR_SLOW_FLASH SSR_YELLOW
                      03849          SET_SSR_SLOW_FLASH SSR_RED
                      03850         ENDIF
000DF6 8600           03851         BSF     SSR_STATE, SLEEP_MODE, ACCESS
000DF8 0012           03852         RETURN
                      03853 
000DFA                03854 S6_7_DATA:
000DFA 2EE8           03855         DECFSZ  WREG, F, ACCESS
000DFC D???           03856         BRA     S6_8_DATA
                      03857         ;
                      03858         ; S6.7: WAKE Command completed:
                      03859         ;
                      03860         ;   ___7______6______5______4______3______2______1______0__
                      03861         ;  |                                  |                    |
                      03862         ;  |                0                 |          7         | YY_COMMAND
                      03863         ;  |______|______|______|______|______|______|______|______|
                      03864         ;  |      |      |      |      |                           |
                      03865         ;  |   0  |   0  |   0  |   0  |             1             | (not saved)
                      03866         ;  |______|______|______|______|______|______|______|______|
                      03867         ;  |      |                                                |
                      03868         ;  |   0  |                   $5A                          | YY_BUFFER+0
                      03869         ;  |______|______|______|______|______|______|______|______|
                      03870         ;  |      |                                                |
                      03871         ;  |   0  |                   $5A                          | YY_DATA
                      03872         ;  |______|______|______|______|______|______|______|______|
                      03873         ;
                      03874         ; Validate inputs
                      03875         ;
000DFE 0E01           03876         MOVLW   1
000E00 5C00           03877         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E02 E2??           03878         BC      S6_7_VALID
000E04 EF?? F???      03879         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03880 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E08                03881 S6_7_VALID:
000E08 E0??           03882         BZ      S6_7_WAKE
000E0A EF?? F???      03883         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03884 
000E0E                03885 S6_7_WAKE:
000E0E EE?? F0??      03886         LFSR    0, YY_BUFFER
000E12 0E5A           03887         MOVLW   0x5A
000E14 62EF           03888         CPFSEQ  INDF0, ACCESS
000E16 EF?? F???      03889         GOTO    ERR_COMMAND
000E1A 6A00           03890         CLRF    YY_STATE, ACCESS
                      03891 
000E1C                03892 DO_CMD_WAKE:
                      03893         ;
                      03894         ; Pass command to slave
                      03895         ;
                      03896         IF ROLE_MASTER
                      03897          IF HAS_STATUS_LEDS
                      03898           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      03899          ENDIF
                      03900          MOVLW  0xF0
                      03901          CALL   SIO_WRITE_W
                      03902          MOVLW  0x01
                      03903          CALL   SIO_WRITE_W
                      03904          MOVLW  0x5A
                      03905          CALL   SIO_WRITE_W
                      03906          MOVLW  0x5A
                      03907          CALL   SIO_WRITE_W
                      03908         ENDIF
                      03909         ;
                      03910         ; Tell power supply to wake up
                      03911         ;
                      03912         IF HAS_POWER_CTRL
                      03913          BCF    PLAT_PWR_ON, BIT_PWR_ON, ACCESS
                      03914         ENDIF
                      03915         IF HAS_STATUS_LEDS
                      03916          ;SET_SSR_SLOW_FADE SSR_GREEN
                      03917          SET_SSR_NORMAL_MODE SSR_GREEN
                      03918         ENDIF
                      03919         ; If in DMX mode, use slower green LED pattern
000E1C AC00           03920         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
000E1E D???           03921         BRA     S6_8_X
                      03922         IF HAS_STATUS_LEDS
                      03923          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      03924          SET_SSR_DMX_MODE SSR_GREEN
                      03925         ENDIF
000E20                03926 S6_8_X:
                      03927         IF HAS_STATUS_LEDS
                      03928          SET_SSR_OFF SSR_YELLOW
                      03929          SET_SSR_OFF SSR_RED
                      03930         ENDIF
000E20 9600           03931         BCF     SSR_STATE, SLEEP_MODE, ACCESS
000E22 6800           03932         SETF    AUTO_OFF_CTRH, ACCESS
000E24 6800           03933         SETF    AUTO_OFF_CTRL, ACCESS
000E26 0012           03934         RETURN
                      03935 
000E28                03936 S6_8_DATA:
000E28 2EE8           03937         DECFSZ  WREG, F, ACCESS
000E2A D???           03938         BRA     S6_9_DATA
                      03939         ;
                      03940         ; S6.8: SHUTDOWN Command completed:
                      03941         ;
                      03942         ;   ___7______6______5______4______3______2______1______0__
                      03943         ;  |                                  |                    |
                      03944         ;  |                0                 |          7         | YY_COMMAND
                      03945         ;  |______|______|______|______|______|______|______|______|
                      03946         ;  |      |      |      |      |                           |
                      03947         ;  |   0  |   0  |   0  |   0  |             2             | (not saved)
                      03948         ;  |______|______|______|______|______|______|______|______|
                      03949         ;  |      |                                                |
                      03950         ;  |   0  |                   $58                          | YY_BUFFER
                      03951         ;  |______|______|______|______|______|______|______|______|
                      03952         ;  |      |                                                |
                      03953         ;  |   0  |                   $59                          | YY_DATA
                      03954         ;  |______|______|______|______|______|______|______|______|
                      03955         ;
                      03956         ; Validate inputs
                      03957         ;
000E2C 0E01           03958         MOVLW   1
000E2E 5C00           03959         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E30 E2??           03960         BC      S6_8_VALID
000E32 EF?? F???      03961         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      03962 
000E36                03963 S6_8_VALID:
000E36 E0??           03964         BZ      S6_8_SHUTDOWN
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E38 EF?? F???      03965         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      03966 
000E3C                03967 S6_8_SHUTDOWN:
000E3C EE?? F0??      03968         LFSR    0, YY_BUFFER
000E40 0E58           03969         MOVLW   0x58
000E42 62EF           03970         CPFSEQ  INDF0, ACCESS
000E44 EF?? F???      03971         GOTO    ERR_COMMAND
                      03972         ;       
                      03973         ; shutdown
                      03974         ;
000E48 EF?? F???      03975         GOTO    HALT_MODE
                      03976 
000E4C                03977 S6_9_DATA:
000E4C 2EE8           03978         DECFSZ  WREG, F, ACCESS
000E4E D???           03979         BRA     S6_10_DATA
                      03980         ;
                      03981         ; S6.9: QUERY Command completed:
                      03982         ;
                      03983         ;   ___7______6______5______4______3______2______1______0__
                      03984         ;  |                                  |                    |
                      03985         ;  |                0                 |          7         | YY_COMMAND
                      03986         ;  |______|______|______|______|______|______|______|______|
                      03987         ;  |      |      |      |      |                           |
                      03988         ;  |   0  |   0  |   0  |   0  |             3             | (not saved)
                      03989         ;  |______|______|______|______|______|______|______|______|
                      03990         ;  |      |                                                |
                      03991         ;  |   0  |                   $24                          | YY_BUFFER+0
                      03992         ;  |______|______|______|______|______|______|______|______|
                      03993         ;  |      |                                                |
                      03994         ;  |   0  |                   $54                          | YY_DATA
                      03995         ;  |______|______|______|______|______|______|______|______|
                      03996         ;
                      03997         ; Validate inputs
                      03998         ;
000E50 0E01           03999         MOVLW   1
000E52 5C00           04000         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
000E54 E2??           04001         BC      S6_9_VALID
000E56 EF?? F???      04002         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04003 
000E5A                04004 S6_9_VALID:
000E5A E0??           04005         BZ      S6_9_QUERY
000E5C EF?? F???      04006         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04007 
000E60                04008 S6_9_QUERY:
000E60 EE?? F0??      04009         LFSR    0, YY_BUFFER
000E64 0E24           04010         MOVLW   0x24
000E66 62EF           04011         CPFSEQ  INDF0, ACCESS
000E68 EF?? F???      04012         GOTO    ERR_COMMAND
                      04013         ;
                      04014         ; return status of unit
                      04015         ;
                      04016         IF ROLE_MASTER
                      04017          IF HAS_STATUS_LEDS
                      04018           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04019          ENDIF
                      04020          MOVLW  0xF0                    ; initiate write-through IC_TXSTA command
                      04021          CALL   SIO_WRITE_W             ; to slave CPU
                      04022          MOVLW  0x23
                      04023          CALL   SIO_WRITE_W
                      04024          MOVLW  .30                     ; write 31-byte packet
                      04025          CALL   SIO_WRITE_W
                      04026         ELSE
                      04027          IF ROLE_STANDALONE
000E6C EC?? F???      04028           CALL  TR_ON_DELAY
000E70 868B           04029           BSF   PLAT_T_R, BIT_T_R, ACCESS               ; Fire up our transmitter now
000E72 9400           04030           BCF   SSR_STATE2, INHIBIT_OUTPUT, ACCESS      ; Allow sending output
                      04031          ELSE
                      04032           ERR_BUG 0x0F, ERR_CLASS_INT_COMMAND
                      04033          ENDIF
                      04034         ENDIF
000E74 5000           04035         MOVF    MY_ADDRESS, W, ACCESS
000E76 09F0           04036         IORLW   0xF0
                      04037         IF ROLE_MASTER
                      04038          BCF    WREG, 7, ACCESS
                      04039         ENDIF
000E78 EC?? F???      04040         CALL    SIO_WRITE_W                     ; 00 start byte                         <1111aaaa>
000E7C 0E1F           04041         MOVLW   0x1F
                      04042         SEND_8_BIT_W                            ; 01 "reply to query" packet type       <00011111>
000E7E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000E80 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000E82 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E84 D???               M         BRA     S8B_CHK_7E1
000E86 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000E8A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E8C EC?? F???          M         CALL    SIO_WRITE_W                     
000E90 D???               M         BRA     S8B_END1
000E92                    M S8B_CHK_7E1:
000E92 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000E94 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000E96 D???               M         BRA     S8B_CHK_MSB1
000E98 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000E9A EC?? F???          M         CALL    SIO_WRITE_W
000E9E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000EA0 EC?? F???          M         CALL    SIO_WRITE_W
000EA4 D???               M         BRA     S8B_END1
000EA6                    M S8B_CHK_MSB1:
000EA6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000EA8 D???               M         BRA     S8B_SEND_NORMAL1
000EAA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000EAC EC?? F???          M         CALL    SIO_WRITE_W
000EB0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000EB2                    M S8B_SEND_NORMAL1:
000EB2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000EB4 EC?? F???          M         CALL    SIO_WRITE_W     
000EB8                    M S8B_END1:
  00000002                M S8B_LABEL ++
000EB8 0E31           04043         MOVLW   0x31
                      04044         SEND_8_BIT_W                            ; 02 ROM/format version 3.1             <00110001>
000EBA 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000EBC 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000EBE 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000EC0 D???               M         BRA     S8B_CHK_7E2
000EC2 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000EC6 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000EC8 EC?? F???          M         CALL    SIO_WRITE_W                     
000ECC D???               M         BRA     S8B_END2
000ECE                    M S8B_CHK_7E2:
000ECE 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000ED0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000ED2 D???               M         BRA     S8B_CHK_MSB2
000ED4 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000ED6 EC?? F???          M         CALL    SIO_WRITE_W
000EDA 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000EDC EC?? F???          M         CALL    SIO_WRITE_W
000EE0 D???               M         BRA     S8B_END2
000EE2                    M S8B_CHK_MSB2:
000EE2 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000EE4 D???               M         BRA     S8B_SEND_NORMAL2
000EE6 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000EE8 EC?? F???          M         CALL    SIO_WRITE_W
000EEC 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000EEE                    M S8B_SEND_NORMAL2:
000EEE 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000EF0 EC?? F???          M         CALL    SIO_WRITE_W     
000EF4                    M S8B_END2:
  00000003                M S8B_LABEL ++
000EF4 6AE8           04045         CLRF    WREG, ACCESS
                      04046         IF HAS_SENSORS
                      04047          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If sensor A is enabled on this board,
                      04048          BSF    WREG, 6, ACCESS                 ; set the Sc bit for that sensor.
                      04049          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS ; and for sensor B
                      04050          BSF    WREG, 5, ACCESS                 ; 
                      04051          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS ; and for sensor C
                      04052          BSF    WREG, 4, ACCESS                 ; 
                      04053          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS ; and for sensor D
                      04054          BSF    WREG, 3, ACCESS                 ; 
                      04055         ENDIF                                   ; W=0ABCD---  1=sensor configured; 0=LED
000EF6 BE00           04056         BTFSC   DMX_SLOTH, DMX_EN, ACCESS
000EF8 84E8           04057         BSF     WREG, 2, ACCESS                 ;   0----d--  DMX enable bit
000EFA B000           04058         BTFSC   DMX_SLOTH, DMX_BIT8, ACCESS
000EFC 82E8           04059         BSF     WREG, 1, ACCESS                 ;   0-----c-  DMX channel bit 8
000EFE BE00           04060         BTFSC   DMX_SLOTL, 7, ACCESS            ; 
000F00 80E8           04061         BSF     WREG, 0, ACCESS                 ;   0------c  DMX channel bit 7
                      04062         SEND_8_BIT_W                            ; 03 sensor, DMX status                 <0ABCDdcc> 
000F02 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F04 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F06 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F08 D???               M         BRA     S8B_CHK_7E3
000F0A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F0E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F10 EC?? F???          M         CALL    SIO_WRITE_W                     
000F14 D???               M         BRA     S8B_END3
000F16                    M S8B_CHK_7E3:
000F16 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F18 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F1A D???               M         BRA     S8B_CHK_MSB3
000F1C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F1E EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F22 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F24 EC?? F???          M         CALL    SIO_WRITE_W
000F28 D???               M         BRA     S8B_END3
000F2A                    M S8B_CHK_MSB3:
000F2A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F2C D???               M         BRA     S8B_SEND_NORMAL3
000F2E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F30 EC?? F???          M         CALL    SIO_WRITE_W
000F34 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F36                    M S8B_SEND_NORMAL3:
000F36 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F38 EC?? F???          M         CALL    SIO_WRITE_W     
000F3C                    M S8B_END3:
  00000004                M S8B_LABEL ++
000F3C 5000           04063         MOVF    DMX_SLOTL, W, ACCESS            ;   0ccccccc  DMX channel bits 6:0
000F3E 0B7F           04064         ANDLW   0x7F
                      04065         SEND_8_BIT_W                            ; 04 DMX status
000F40 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F42 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F44 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F46 D???               M         BRA     S8B_CHK_7E4
000F48 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F4C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F4E EC?? F???          M         CALL    SIO_WRITE_W                     
000F52 D???               M         BRA     S8B_END4
000F54                    M S8B_CHK_7E4:
000F54 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F56 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F58 D???               M         BRA     S8B_CHK_MSB4
000F5A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000F5C EC?? F???          M         CALL    SIO_WRITE_W
000F60 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000F62 EC?? F???          M         CALL    SIO_WRITE_W
000F66 D???               M         BRA     S8B_END4
000F68                    M S8B_CHK_MSB4:
000F68 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000F6A D???               M         BRA     S8B_SEND_NORMAL4
000F6C 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000F6E EC?? F???          M         CALL    SIO_WRITE_W
000F72 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000F74                    M S8B_SEND_NORMAL4:
000F74 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000F76 EC?? F???          M         CALL    SIO_WRITE_W     
000F7A                    M S8B_END4:
  00000005                M S8B_LABEL ++
000F7A 6AE8           04066         CLRF    WREG, ACCESS
000F7C B800           04067         BTFSC   SSR_STATE, PRIV_MODE, ACCESS    ; W=00000qs0
000F7E 84E8           04068         BSF     WREG, 2, ACCESS
000F80 B600           04069         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
000F82 82E8           04070         BSF     WREG, 1, ACCESS
                      04071         SEND_8_BIT_W
000F84 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000F86 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000F88 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F8A D???               M         BRA     S8B_CHK_7E5
000F8C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000F90 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000F92 EC?? F???          M         CALL    SIO_WRITE_W                     
000F96 D???               M         BRA     S8B_END5
000F98                    M S8B_CHK_7E5:
000F98 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000F9A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000F9C D???               M         BRA     S8B_CHK_MSB5
000F9E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000FA0 EC?? F???          M         CALL    SIO_WRITE_W
000FA4 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000FA6 EC?? F???          M         CALL    SIO_WRITE_W
000FAA D???               M         BRA     S8B_END5
000FAC                    M S8B_CHK_MSB5:
000FAC AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000FAE D???               M         BRA     S8B_SEND_NORMAL5
000FB0 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000FB2 EC?? F???          M         CALL    SIO_WRITE_W
000FB6 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
000FB8                    M S8B_SEND_NORMAL5:
000FB8 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
000FBA EC?? F???          M         CALL    SIO_WRITE_W     
000FBE                    M S8B_END5:
  00000006                M S8B_LABEL ++
                      04072         ;CALL   SIO_WRITE_W                     ; 05 masks, priv, sleep, mem full       <0ABCDqsf> XXX N
                            OT ALL IMPLEMENTED
000FBE 6AE8           04073         CLRF    WREG, ACCESS
                      04074         IF HAS_SENSORS
                      04075          MOVLW  0x78                            ; Initially set all sensors to 1
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04076          BTFSC  TRIS_SENS_A, BIT_SENS_A, ACCESS ; If that line is not a sensor... 
                      04077          BTFSC  PORT_SENS_A, BIT_SENS_A, ACCESS ; Or the sensor is not pulled low...
                      04078          BCF    WREG, 6, ACCESS                 ; Then clear the reported flag.
                      04079          BTFSC  TRIS_SENS_B, BIT_SENS_B, ACCESS 
                      04080          BTFSC  PORT_SENS_B, BIT_SENS_B, ACCESS 
                      04081          BCF    WREG, 5, ACCESS                 
                      04082          BTFSC  TRIS_SENS_C, BIT_SENS_C, ACCESS 
                      04083          BTFSC  PORT_SENS_C, BIT_SENS_C, ACCESS 
                      04084          BCF    WREG, 4, ACCESS                 
                      04085          BTFSC  TRIS_SENS_D, BIT_SENS_D, ACCESS 
                      04086          BTFSC  PORT_SENS_D, BIT_SENS_D, ACCESS 
                      04087          BCF    WREG, 3, ACCESS                 ; W=0ABCD---  1=sensor active (low) 0=inactive (high)
                      04088         ENDIF
000FC0 B600           04089         BTFSC   SSR_STATE2, PRIV_FORBID, ACCESS
000FC2 84E8           04090         BSF     WREG, 2, ACCESS                 
000FC4 B000           04091         BTFSC   PHASE_OFFSETH, 0, ACCESS
000FC6 82E8           04092         BSF     WREG, 1, ACCESS
000FC8 BE00           04093         BTFSC   PHASE_OFFSETL, 7, ACCESS
000FCA 80E8           04094         BSF     WREG, 0, ACCESS
                      04095         SEND_8_BIT_W
000FCC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
000FCE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
000FD0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FD2 D???               M         BRA     S8B_CHK_7E6
000FD4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
000FD8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
000FDA EC?? F???          M         CALL    SIO_WRITE_W                     
000FDE D???               M         BRA     S8B_END6
000FE0                    M S8B_CHK_7E6:
000FE0 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
000FE2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
000FE4 D???               M         BRA     S8B_CHK_MSB6
000FE6 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
000FE8 EC?? F???          M         CALL    SIO_WRITE_W
000FEC 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
000FEE EC?? F???          M         CALL    SIO_WRITE_W
000FF2 D???               M         BRA     S8B_END6
000FF4                    M S8B_CHK_MSB6:
000FF4 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
000FF6 D???               M         BRA     S8B_SEND_NORMAL6
000FF8 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
000FFA EC?? F???          M         CALL    SIO_WRITE_W
000FFE 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001000                    M S8B_SEND_NORMAL6:
001000 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001002 EC?? F???          M         CALL    SIO_WRITE_W     
001006                    M S8B_END6:
  00000007                M S8B_LABEL ++
                      04096         ;CALL   SIO_WRITE_W                     ; 06 active sensors, xpriv, phase<8:7>  <0ABCDXpp> XXX N
                            OT ALL IMPLEMENTED
001006 5000           04097         MOVF    PHASE_OFFSETL, W, ACCESS
001008 9EE8           04098         BCF     WREG, 7, ACCESS
                      04099         SEND_8_BIT_W
00100A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00100C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00100E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001010 D???               M         BRA     S8B_CHK_7E7
001012 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001016 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001018 EC?? F???          M         CALL    SIO_WRITE_W                     
00101C D???               M         BRA     S8B_END7
00101E                    M S8B_CHK_7E7:
00101E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001020 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001022 D???               M         BRA     S8B_CHK_MSB7
001024 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001026 EC?? F???          M         CALL    SIO_WRITE_W
00102A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00102C EC?? F???          M         CALL    SIO_WRITE_W
001030 D???               M         BRA     S8B_END7
001032                    M S8B_CHK_MSB7:
001032 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001034 D???               M         BRA     S8B_SEND_NORMAL7
001036 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001038 EC?? F???          M         CALL    SIO_WRITE_W
00103C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00103E                    M S8B_SEND_NORMAL7:
00103E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001040 EC?? F???          M         CALL    SIO_WRITE_W     
001044                    M S8B_END7:
  00000008                M S8B_LABEL ++
                      04100         ;CALL   SIO_WRITE_W                     ; 07 phase <6:0>                        <0ppppppp>
001044 6AE8           04101         CLRF    WREG, ACCESS
001046 EC?? F???      04102         CALL    SIO_WRITE_W                     ; 08 eeprom memory free <14:7>          <0eeeeeee> XXX N
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            OT IMPLEMENTED
00104A 6AE8           04103         CLRF    WREG, ACCESS
00104C EC?? F???      04104         CALL    SIO_WRITE_W                     ; 09 eeprom memory free <6:0>           <0eeeeeee> XXX N
                            OT IMPLEMENTED
001050 6AE8           04105         CLRF    WREG, ACCESS
001052 EC?? F???      04106         CALL    SIO_WRITE_W                     ; 10 RAM memory free <14:7>             <0MMMMMMM> XXX N
                            OT IMPLEMENTED
001056 6AE8           04107         CLRF    WREG, ACCESS
001058 EC?? F???      04108         CALL    SIO_WRITE_W                     ; 11 RAM memory free <6:0>              <0MMMMMMM> XXX N
                            OT IMPLEMENTED
                      04109         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_MASTER
                      04110          MOVLW  0x00
                      04111         ELSE
                      04112          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_STANDALONE
                      04113           MOVLW 0x01
                      04114          ELSE
                      04115           IF LUMOS_CHIP_TYPE == LUMOS_CHIP_4CHANNEL
                      04116            MOVLW 0x02
                      04117           ELSE
                      04118            IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      04119             MOVLW 0x03
                      04120            ELSE
                      04121             IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
00105C 0E04           04122              MOVLW 0x04
                      04123             ELSE
                      04124              ERROR "Invalid chip type selected"
                      04125              ERR_BUG 0x10, ERR_CLASS_DEVICE
                      04126             ENDIF
                      04127            ENDIF
                      04128           ENDIF
                      04129          ENDIF
                      04130         ENDIF
                      04131         SEND_8_BIT_W
00105E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001060 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001062 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001064 D???               M         BRA     S8B_CHK_7E8
001066 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00106A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00106C EC?? F???          M         CALL    SIO_WRITE_W                     
001070 D???               M         BRA     S8B_END8
001072                    M S8B_CHK_7E8:
001072 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001074 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001076 D???               M         BRA     S8B_CHK_MSB8
001078 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00107A EC?? F???          M         CALL    SIO_WRITE_W
00107E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001080 EC?? F???          M         CALL    SIO_WRITE_W
001084 D???               M         BRA     S8B_END8
001086                    M S8B_CHK_MSB8:
001086 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001088 D???               M         BRA     S8B_SEND_NORMAL8
00108A 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00108C EC?? F???          M         CALL    SIO_WRITE_W
001090 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001092                    M S8B_SEND_NORMAL8:
001092 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001094 EC?? F???          M         CALL    SIO_WRITE_W     
001098                    M S8B_END8:
  00000009                M S8B_LABEL ++
                      04132         ;CALL   SIO_WRITE_W                     ; 12 sequence flag, device ID           <0X0iiiii> XXX N
                            OT ALL IMPLEMENTED
001098 6AE8           04133         CLRF    WREG, ACCESS
00109A EC?? F???      04134         CALL    SIO_WRITE_W                     ; 13 executing sequence                 <0xxxxxxx> XXX N
                            OT IMPLEMENTED
                      04135 
00109E 0E00           04136         MOVLW   0x00
0010A0 EC?? F???      04137         CALL    SIO_WRITE_W                     ; 14 sensor A settings                  <0owE0000> XXX N
                            OT IMPLEMENTED
0010A4 0E00           04138         MOVLW   0x00
0010A6 EC?? F???      04139         CALL    SIO_WRITE_W                     ; 15 sensor A pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010AA 0E00           04140         MOVLW   0x00
0010AC EC?? F???      04141         CALL    SIO_WRITE_W                     ; 16 sensor A sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010B0 0E00           04142         MOVLW   0x00
0010B2 EC?? F???      04143         CALL    SIO_WRITE_W                     ; 17 sensor A post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04144 
0010B6 0E01           04145         MOVLW   0x01
0010B8 EC?? F???      04146         CALL    SIO_WRITE_W                     ; 18 sensor B settings                  <0owE0001> XXX N
                            OT IMPLEMENTED
0010BC 0E00           04147         MOVLW   0x00
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010BE EC?? F???      04148         CALL    SIO_WRITE_W                     ; 19 sensor B pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010C2 0E00           04149         MOVLW   0x00
0010C4 EC?? F???      04150         CALL    SIO_WRITE_W                     ; 20 sensor B sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010C8 0E00           04151         MOVLW   0x00
0010CA EC?? F???      04152         CALL    SIO_WRITE_W                     ; 21 sensor B post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04153 
0010CE 0E02           04154         MOVLW   0x02
0010D0 EC?? F???      04155         CALL    SIO_WRITE_W                     ; 22 sensor C settings                  <0owE0010> XXX N
                            OT IMPLEMENTED
0010D4 0E00           04156         MOVLW   0x00
0010D6 EC?? F???      04157         CALL    SIO_WRITE_W                     ; 23 sensor C pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010DA 0E00           04158         MOVLW   0x00
0010DC EC?? F???      04159         CALL    SIO_WRITE_W                     ; 24 sensor C sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010E0 0E00           04160         MOVLW   0x00
0010E2 EC?? F???      04161         CALL    SIO_WRITE_W                     ; 25 sensor C post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04162 
0010E6 0E03           04163         MOVLW   0x03
0010E8 EC?? F???      04164         CALL    SIO_WRITE_W                     ; 26 sensor D settings                  <0owE0011> XXX N
                            OT IMPLEMENTED
0010EC 0E00           04165         MOVLW   0x00
0010EE EC?? F???      04166         CALL    SIO_WRITE_W                     ; 27 sensor D pre-sequence              <0IIIIIII> XXX N
                            OT IMPLEMENTED
0010F2 0E00           04167         MOVLW   0x00
0010F4 EC?? F???      04168         CALL    SIO_WRITE_W                     ; 28 sensor D sequence                  <0iiiiiii> XXX N
                            OT IMPLEMENTED
0010F8 0E00           04169         MOVLW   0x00
0010FA EC?? F???      04170         CALL    SIO_WRITE_W                     ; 29 sensor D post-sequence             <0PPPPPPP> XXX N
                            OT IMPLEMENTED
                      04171         
0010FE 5000           04172         MOVF    LAST_ERROR, W, ACCESS
001100 6A00           04173         CLRF    LAST_ERROR, ACCESS
                      04174         SEND_8_BIT_W
001102 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001104 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001106 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001108 D???               M         BRA     S8B_CHK_7E9
00110A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00110E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001110 EC?? F???          M         CALL    SIO_WRITE_W                     
001114 D???               M         BRA     S8B_END9
001116                    M S8B_CHK_7E9:
001116 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001118 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00111A D???               M         BRA     S8B_CHK_MSB9
00111C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00111E EC?? F???          M         CALL    SIO_WRITE_W
001122 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001124 EC?? F???          M         CALL    SIO_WRITE_W
001128 D???               M         BRA     S8B_END9
00112A                    M S8B_CHK_MSB9:
00112A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00112C D???               M         BRA     S8B_SEND_NORMAL9
00112E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001130 EC?? F???          M         CALL    SIO_WRITE_W
001134 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001136                    M S8B_SEND_NORMAL9:
001136 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001138 EC?? F???          M         CALL    SIO_WRITE_W     
00113C                    M S8B_END9:
  0000000A                M S8B_LABEL ++
                      04175         ;CALL   SIO_WRITE_W                     ; 30 fault code                         <0fffffff>
                      04176         IF ROLE_MASTER
                      04177          MOVLW  B'00011011'
                      04178          CALL   SIO_WRITE_W                     ; 31 end of packet to slave chip
                      04179         ELSE
00113C 6AE8           04180          CLRF   WREG, ACCESS
00113E EC?? F???      04181          CALL   SIO_WRITE_W                     ; 31 (nil) slave fault code
001142 6AE8           04182          CLRF   WREG, ACCESS    
001144 EC?? F???      04183          CALL   SIO_WRITE_W                     ; 32 (nil) slave phase offset <8:7>
001148 6AE8           04184          CLRF   WREG, ACCESS    
00114A EC?? F???      04185          CALL   SIO_WRITE_W                     ; 33 (nil) slave phase offset <6:0>
00114E 0E??           04186          MOVLW  UPPER(SYS_SNH)
001150 6EF8           04187          MOVWF  TBLPTRU, ACCESS
001152 0E??           04188          MOVLW  HIGH(SYS_SNH)
001154 6EF7           04189          MOVWF  TBLPTRH, ACCESS
001156 0E??           04190          MOVLW  LOW(SYS_SNH)
001158 6EF6           04191          MOVWF  TBLPTRL, ACCESS
00115A 0009           04192          TBLRD*+
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00115C 50F5           04193          MOVF   TABLAT, W, ACCESS
                      04194          SEND_8_BIT_W                           ; 34 Serial Number (MSB)
00115E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001160 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001162 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001164 D???               M         BRA     S8B_CHK_7E10
001166 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00116A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00116C EC?? F???          M         CALL    SIO_WRITE_W                     
001170 D???               M         BRA     S8B_END10
001172                    M S8B_CHK_7E10:
001172 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001174 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001176 D???               M         BRA     S8B_CHK_MSB10
001178 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00117A EC?? F???          M         CALL    SIO_WRITE_W
00117E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001180 EC?? F???          M         CALL    SIO_WRITE_W
001184 D???               M         BRA     S8B_END10
001186                    M S8B_CHK_MSB10:
001186 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001188 D???               M         BRA     S8B_SEND_NORMAL10
00118A 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00118C EC?? F???          M         CALL    SIO_WRITE_W
001190 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001192                    M S8B_SEND_NORMAL10:
001192 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001194 EC?? F???          M         CALL    SIO_WRITE_W     
001198                    M S8B_END10:
  0000000B                M S8B_LABEL ++
001198 0009           04195          TBLRD*+
00119A 50F5           04196          MOVF   TABLAT, W, ACCESS
                      04197          SEND_8_BIT_W                           ; 35 Serial Number (LSB)
00119C 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00119E 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0011A0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0011A2 D???               M         BRA     S8B_CHK_7E11
0011A4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0011A8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0011AA EC?? F???          M         CALL    SIO_WRITE_W                     
0011AE D???               M         BRA     S8B_END11
0011B0                    M S8B_CHK_7E11:
0011B0 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0011B2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0011B4 D???               M         BRA     S8B_CHK_MSB11
0011B6 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0011B8 EC?? F???          M         CALL    SIO_WRITE_W
0011BC 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0011BE EC?? F???          M         CALL    SIO_WRITE_W
0011C2 D???               M         BRA     S8B_END11
0011C4                    M S8B_CHK_MSB11:
0011C4 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0011C6 D???               M         BRA     S8B_SEND_NORMAL11
0011C8 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0011CA EC?? F???          M         CALL    SIO_WRITE_W
0011CE 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0011D0                    M S8B_SEND_NORMAL11:
0011D0 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0011D2 EC?? F???          M         CALL    SIO_WRITE_W     
0011D6                    M S8B_END11:
  0000000C                M S8B_LABEL ++
0011D6 0E33           04198          MOVLW  0x33
0011D8 EC?? F???      04199          CALL   SIO_WRITE_W                     ; 36 sentinel at end of packet
0011DC 8400           04200          BSF    SSR_STATE, DRAIN_TR, ACCESS     ; schedule transmitter shut-down
                      04201         ENDIF
0011DE 6A00           04202         CLRF    YY_STATE, ACCESS
0011E0 0012           04203         RETURN
                      04204         
0011E2                04205 S6_10_DATA:
0011E2 2EE8           04206         DECFSZ  WREG, F, ACCESS
0011E4 D???           04207         BRA     S6_11_DATA
                      04208         ;
                      04209         ; S6.10: DEF_SENS Command completed:
                      04210         ;
                      04211         ;   ___7______6______5______4______3______2______1______0__
                      04212         ;  |                                  |                    |
                      04213         ;  |                0                 |          7         | YY_COMMAND
                      04214         ;  |______|______|______|______|______|______|______|______|
                      04215         ;  |      |      |      |      |                           |
                      04216         ;  |   0  |   0  |   0  |   0  |             6             | (not saved)
                      04217         ;  |______|______|______|______|______|______|______|______|
                      04218         ;  |      |    Trigger modes   |             |             |  
                      04219         ;  |   0  | once | while|1=high|      0      |    sensor   | YY_BUFFER+0
                      04220         ;  |______|______|______|______|______|______|______|______|
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04221         ;  |      |                                                |
                      04222         ;  |   0  |           pre-trigger sequence ID              | YY_BUFFER+1
                      04223         ;  |______|______|______|______|______|______|______|______|
                      04224         ;  |      |                                                |
                      04225         ;  |   0  |               trigger sequence ID              | YY_BUFFER+2
                      04226         ;  |______|______|______|______|______|______|______|______|
                      04227         ;  |      |                                                |
                      04228         ;  |   0  |          post-trigger sequence ID              | YY_BUFFER+3
                      04229         ;  |______|______|______|______|______|______|______|______|
                      04230         ;  |      |                                                |
                      04231         ;  |   0  |                   $3C                          | YY_DATA
                      04232         ;  |______|______|______|______|______|______|______|______|
                      04233         ;
                      04234         ;
0011E6 0E04           04235         MOVLW   4
0011E8 5C00           04236         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0011EA E2??           04237         BC      S6_10_VALID
0011EC EF?? F???      04238         GOTO    S6_KEEP_LOOKING                 ; input < 4? not done yet
                      04239 
0011F0                04240 S6_10_VALID:
0011F0 E0??           04241         BZ      S6_10_DEF_SENS
0011F2 EF?? F???      04242         GOTO    ERR_COMMAND                     ; input > 4? too big: reject
                      04243 
0011F6                04244 S6_10_DEF_SENS:
0011F6 EE?? F0??      04245         LFSR    0, YY_BUFFER
0011FA EF?? F???      04246         GOTO    ERR_NOT_IMP             ; XXX
                      04247         
0011FE                04248 S6_11_DATA:
0011FE 2EE8           04249         DECFSZ  WREG, F, ACCESS
001200 D???           04250         BRA     S6_12_DATA
                      04251         ;
                      04252         ; S6.11: CLR_SEQ Command completed:
                      04253         ;
                      04254         ;   ___7______6______5______4______3______2______1______0__
                      04255         ;  |                                  |                    |
                      04256         ;  |                0                 |          7         | YY_COMMAND
                      04257         ;  |______|______|______|______|______|______|______|______|
                      04258         ;  |      |      |      |      |                           |
                      04259         ;  |   0  |   0  |   0  |   0  |             8             | (not saved)
                      04260         ;  |______|______|______|______|______|______|______|______|
                      04261         ;  |      |                                                |
                      04262         ;  |   0  |                   $43                          | YY_BUFFER
                      04263         ;  |______|______|______|______|______|______|______|______|
                      04264         ;  |      |                                                |
                      04265         ;  |   0  |                   $41                          | YY_DATA
                      04266         ;  |______|______|______|______|______|______|______|______|
                      04267         ;
                      04268         ; Validate inputs
                      04269         ;
001202 0E01           04270         MOVLW   1
001204 5C00           04271         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
001206 E2??           04272         BC      S6_11_VALID
001208 EF?? F???      04273         GOTO    S6_KEEP_LOOKING                 ; input < 1? not done yet
                      04274 
00120C                04275 S6_11_VALID:
00120C E0??           04276         BZ      S6_11_CLR_SEQ
00120E EF?? F???      04277         GOTO    ERR_COMMAND                     ; input > 1? too big: reject
                      04278 
001212                04279 S6_11_CLR_SEQ:
001212 EE?? F0??      04280         LFSR    0, YY_BUFFER
001216 0E43           04281         MOVLW   0x43
001218 62EF           04282         CPFSEQ  INDF0, ACCESS
00121A EF?? F???      04283         GOTO    ERR_COMMAND
00121E EF?? F???      04284         GOTO    ERR_NOT_IMP             ; XXX
                      04285 
001222                04286 S6_12_DATA:
001222 2EE8           04287         DECFSZ  WREG, F, ACCESS
001224 D???           04288         BRA     S6_13_DATA
                      04289         ;
                      04290         ; S6.12: DEF_SEQ Command completed:
                      04291         ;
                      04292         ;   ___7______6______5______4______3______2______1______0__
                      04293         ;  |                                  |                    |
                      04294         ;  |                0                 |          7         | YY_COMMAND
                      04295         ;  |______|______|______|______|______|______|______|______|
                      04296         ;  |      |      |      |      |                           |
                      04297         ;  |   0  |   0  |   0  |   0  |             0             | (not saved)
                      04298         ;  |______|______|______|______|______|______|______|______|
                      04299         ;  |      |                                                |
                      04300         ;  |   0  |               sequence number                  | YY_YY
                      04301         ;  |______|______|______|______|______|______|______|______|
                      04302         ;  |      |                                                |
                      04303         ;  |   0  |             sequence length - 1 (N-1)          | YY_BUFFER+0
                      04304         ;  |______|______|______|______|______|______|______|______|
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04305         ;  |      |                                                |
                      04306         ;  |   0  |              byte #0                           | YY_BUFFER+1
                      04307         ;  |______|______|______|______|______|______|______|______|
                      04308         ;                              .
                      04309         ;                              .
                      04310         ;                              .
                      04311         ;  _________________________________________________________
                      04312         ;  |      |                                                |
                      04313         ;  |   0  |              byte #N-1                         | YY_BUFFER+N
                      04314         ;  |______|______|______|______|______|______|______|______|
                      04315         ;  |      |                                                |
                      04316         ;  |   0  |                   $44                          | YY_BUFFER+N+1
                      04317         ;  |______|______|______|______|______|______|______|______|
                      04318         ;  |      |                                                |
                      04319         ;  |   0  |                   $73                          | YY_DATA
                      04320         ;  |______|______|______|______|______|______|______|______|
                      04321         ;
                      04322         ; Validate inputs
                      04323         ; first, do we even have a full packet yet?
                      04324         ;
001226 5000           04325         MOVF    YY_BUF_IDX, W, ACCESS
001228 E1??           04326         BNZ     S6_12_VALID
00122A EF?? F???      04327         GOTO    S6_KEEP_LOOKING                 
                      04328 
00122E                04329 S6_12_VALID:
00122E EE?? F0??      04330         LFSR    0, YY_BUFFER
001232 28EF           04331         INCF    INDF0, W, ACCESS
001234 28E8           04332         INCF    WREG, W, ACCESS
001236 28E8           04333         INCF    WREG, W, ACCESS         ; W = (N-1)+3 = size our packet must be
001238 5C00           04334         SUBWF   YY_BUF_IDX, W, ACCESS   ; bytes read < W?
00123A E2??           04335         BC      S6_12_VALID2
00123C EF?? F???      04336         GOTO    S6_KEEP_LOOKING         ; yes, keep reading more
                      04337 
001240                04338 S6_12_VALID2:
001240 E0??           04339         BZ      S6_12_DEF_SEQ
001242 EF?? F???      04340         GOTO    ERR_COMMAND             ; if read too much, reject command
                      04341 
001246                04342 S6_12_DEF_SEQ:
                      04343         ;
                      04344         ; next, test sentinel
                      04345         ;
001246 0400           04346         DECF    YY_BUF_IDX, W, ACCESS
001248 26E9           04347         ADDWF   FSR0L, F, ACCESS
00124A 0E44           04348         MOVLW   0x44
00124C 62EF           04349         CPFSEQ  INDF0                   ; sentinel==$44?
00124E EF?? F???      04350         GOTO    ERR_COMMAND
                      04351         ;
                      04352         ; ok, define the sequence now
                      04353         ;
001252 EF?? F???      04354         GOTO    ERR_NOT_IMP             ; XXX
                      04355         
001256                04356 S6_13_DATA:
001256 2EE8           04357         DECFSZ  WREG, F, ACCESS
001258 D???           04358         BRA     S6_14_DATA
                      04359         ;
                      04360         ; S6.13: CF_FLROM Command completed:
                      04361         ;
                      04362         ;   ___7______6______5______4______3______2______1______0__
                      04363         ;  |                                  |                    |
                      04364         ;  |                0                 |          7         | YY_COMMAND
                      04365         ;  |______|______|______|______|______|______|______|______|
                      04366         ;  |      |      |      |      |                           |
                      04367         ;  |   0  |   1  |   1  |   1  |             5             | (not saved)
                      04368         ;  |______|______|______|______|______|______|______|______|
                      04369         ;  |      |                                                |
                      04370         ;  |   0  |                   $33                          | YY_BUFFER+0
                      04371         ;  |______|______|______|______|______|______|______|______|
                      04372         ;  |      |                                                |
                      04373         ;  |   0  |                   $4C                          | YY_BUFFER+1
                      04374         ;  |______|______|______|______|______|______|______|______|
                      04375         ;  |      |                                                |
                      04376         ;  |   0  |                   $1C                          | YY_DATA
                      04377         ;  |______|______|______|______|______|______|______|______|
                      04378         ;
                      04379         ; Validate inputs
                      04380         ;
00125A 0E02           04381         MOVLW   2
00125C 5C00           04382         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
00125E E0??           04383         BZ      S6_13_VALID                     ; 2 bytes received (plus final)? good.
001260 EF?? F???      04384         GOTO    ERR_COMMAND                     ; otherwise, it's not right.
                      04385         ;
                      04386         ; next, test sentinel
                      04387         ;
001264                04388 S6_13_VALID:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001264 EE?? F0??      04389         LFSR    0, YY_BUFFER
001268 0E33           04390         MOVLW   0x33
00126A 62EE           04391         CPFSEQ  POSTINC0
00126C EF?? F???      04392         GOTO    ERR_COMMAND
001270 0E4C           04393         MOVLW   0x4C
001272 62EF           04394         CPFSEQ  INDF0
001274 EF?? F???      04395         GOTO    ERR_COMMAND
                      04396         ;
                      04397         ; ok, start updating the firmware!
                      04398         ;
                      04399         IF !QSCC_PORT
                      04400          GOTO   FLASH_UPDATE_START
                      04401         ELSE
001278 EF?? F???      04402          GOTO   ERR_COMMAND
                      04403         ENDIF
                      04404 
00127C                04405 S6_14_DATA:
                      04406         IF QSCC_PORT
                      04407          #include "qscc_hook_s6_14.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s6_14 only used for QS*C systems"
                      00031         ENDIF
                      00032 
00127C                00033 S6_14_DATA_QS:
00127C 2CE8           00034         DECFSZ  WREG, W, ACCESS 
00127E D???           00035         BRA     S6_15_DATA
                      00036         ;
                      00037         ; S6.14: DISP_TEXT command received.
                      00038         ;
                      00039         ;   ___7______6______5______4______3______2______1______0__
                      00040         ;  |                                  |                    |
                      00041         ;  |                0                 |          7         | YY_COMMAND
                      00042         ;  |______|______|______|______|______|______|______|______|
                      00043         ;  |      |      |      |      |                           |
                      00044         ;  |   0  |   0  |   0  |   0  |            12             | (not saved)
                      00045         ;  |______|______|______|______|______|______|______|______|
                      00046         ;  |      |      |                                         |
                      00047         ;  |   0  |   0  |                N                        | YY_BUFFER+0
                      00048         ;  |______|______|______|______|______|______|______|______|
                      00049         ;  |                                                       |
                      00050         ;  |                Character code 0                       | YY_BUFFER+1
                      00051         ;  |______|______|______|______|______|______|______|______|
                      00052         ;  |                                                       |
                      00053         ;  |                Character code 1                       | YY_BUFFER+2
                      00054         ;  |______|______|______|______|______|______|______|______|
                      00055         ;                              :
                      00056         ;                              :
                      00057         ;   _______________________________________________________
                      00058         ;  |                                                       |
                      00059         ;  |                Character code N-1                     | YY_BUFFER+N
                      00060         ;  |______|______|______|______|______|______|______|______|
                      00061         ;  |      |                                                |
                      00062         ;  |   0  |   1      0      1      0      1      0      1  | YY_DATA
                      00063         ;  |______|______|______|______|______|______|______|______|
                      00064         ;
                      00065         ; Validate inputs
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00066         ;
001280 2800           00067         INCF    YY_BUFFER, W, ACCESS            ; expecting N+1 bytes
001282 5C00           00068         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
001284 E2??           00069         BC      S6_14_VALID                     ; N+1 bytes received (plus final)? good.
001286 EF?? F???      00070         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00071 
00128A                00072 S6_14_VALID:
00128A E0??           00073         BZ      S6_14_DISP_TEXT                 ; exact byte length? great, execute command
00128C EF?? F???      00074         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00075 
001290                00076 S6_14_DISP_TEXT:
                      00077         ;
                      00078         ; XXX display YYBUFFER[1]..YYBUFFER[YY_BUFFER[0]] on scoreboard
                      00079         ;
001290 6A00           00080         CLRF    YY_STATE, ACCESS
001292 0012           00081         RETURN
                      00082 
001294                00083 S6_15_DATA:
001294 2CE8           00084         DECFSZ  WREG, W, ACCESS 
001296 D???           00085         BRA     S6_16_DATA
                      00086         ;
                      00087         ; S6.15: DISP_BITMAP command received.
                      00088         ;
                      00089         ;   ___7______6______5______4______3______2______1______0__
                      00090         ;  |                                  |                    |
                      00091         ;  |                0                 |          7         | YY_COMMAND
                      00092         ;  |______|______|______|______|______|______|______|______|
                      00093         ;  |      |      |      |      |                           |
                      00094         ;  |   0  |   0  |   0  |   0  |            13             | (not saved)
                      00095         ;  |______|______|______|______|______|______|______|______|
                      00096         ;  |                                                       |
                      00097         ;  | (0,0)  (0,1) ...                                      | YY_BUFFER+0
                      00098         ;  |______|______|______|______|______|______|______|______|
                      00099         ;                              :
                      00100         ;                              :
                      00101         ;   _______________________________________________________
                      00102         ;  |                                                       |
                      00103         ;  |                                          (6,62) (6,63)| YY_BUFFER+55
                      00104         ;  |______|______|______|______|______|______|______|______|
                      00105         ;  |      |                                                |
                      00106         ;  |   0  |   1      1      0      0      1      1      0  | YY_DATA
                      00107         ;  |______|______|______|______|______|______|______|______|
                      00108         ;
                      00109         ; Validate inputs
                      00110         ;
001298 0E38           00111         MOVLW   .56                             ; expecting 56 bytes
00129A 5C00           00112         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
00129C E2??           00113         BC      S6_15_VALID                     ; 56 bytes received (plus final)? good.
00129E EF?? F???      00114         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00115 
0012A2                00116 S6_15_VALID:
0012A2 E0??           00117         BZ      S6_15_DISP_BITMAP               ; exact byte length? great, execute command
0012A4 EF?? F???      00118         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00119 
0012A8                00120 S6_15_DISP_BITMAP:
                      00121         ;
                      00122         ; XXX display YYBUFFER[0]..YYBUFFER[55] as raw bits
                      00123         ;
0012A8 6A00           00124         CLRF    YY_STATE, ACCESS
0012AA 0012           00125         RETURN
                      00126 
0012AC                00127 S6_16_DATA:
0012AC 2CE8           00128         DECFSZ  WREG, W, ACCESS 
0012AE D???           00129         BRA     S6_17_DATA
                      00130         ;
                      00131         ; S6.16: CF_SET_QS_PARAMS command received
                      00132         ;
                      00133         ;   ___7______6______5______4______3______2______1______0__
                      00134         ;  |                                  |                    |
                      00135         ;  |                0                 |          7         | YY_COMMAND
                      00136         ;  |______|______|______|______|______|______|______|______|
                      00137         ;  |      |      |      |      |                           |
                      00138         ;  |   0  |   1  |   1  |   1  |             6             | (not saved)
                      00139         ;  |______|______|______|______|______|______|______|______|
                      00140         ;  |                                                       |
                      00141         ;  |                Lockout time (x .1 sec)                | YY_BUFFER+0
                      00142         ;  |______|______|______|______|______|______|______|______|
                      00143         ;  |      |                                                |
                      00144         ;  |   0  |   0      1      1      0      0      1      0  | YY_BUFFER+1
                      00145         ;  |______|______|______|______|______|______|______|______|
                      00146         ;  |      |                                                |
                      00147         ;  |   0  |   1      0      1      1      0      1      0  | YY_DATA
                      00148         ;  |______|______|______|______|______|______|______|______|
                      00149         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150         ; Validate inputs
                      00151         ;
0012B0 0E02           00152         MOVLW   .2                              ; expecting 2 bytes
0012B2 5C00           00153         SUBWF   YY_BUF_IDX, W, ACCESS           ; input bytes in packet
0012B4 E2??           00154         BC      S6_16_VALID                     ; 2 bytes received (plus final)? good.
0012B6 EF?? F???      00155         GOTO    S6_KEEP_LOOKING                 ; input too small? keep going
                      00156 
0012BA                00157 S6_16_VALID:
0012BA E0??           00158         BZ      S6_16_CF_SET_QS_PARAMS          ; exact byte length? great, execute command
0012BC EF?? F???      00159         GOTO    ERR_COMMAND                     ; oops, too many bytes received!
                      00160 
0012C0                00161 S6_16_CF_SET_QS_PARAMS:
                      00162         ;
                      00163         ; Validate first sentinel byte
                      00164         ;
0012C0 0E32           00165         MOVLW   0x32
0012C2 6200           00166         CPFSEQ  YY_BUFFER+1, ACCESS
0012C4 EF?? F???      00167         GOTO    ERR_COMMAND
                      00168         ;
                      00169         ; XXX set params
                      00170         ;
0012C8 6A00           00171         CLRF    YY_STATE, ACCESS
0012CA 0012           00172         RETURN
                      00173 
0012CC                00174 S6_17_DATA:
                      00175         ERR_BUG 0x05, ERR_CLASS_OVERRUN
0012CC 0E05               M          MOVLW  0x05
0012CE 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
0012D0 6A00               M          CLRF   YY_STATE, ACCESS
0012D2 0012               M          RETURN
                      04408         ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04409          ERR_BUG 0x05, ERR_CLASS_OVERRUN
                      04410         ENDIF
                      04411 
0012D4                04412 S6_RESTART:
                      04413         ; We stopped too early -- resume now
0012D4 0012           04414         RETURN                                  ; 
                      04415 
0012D6                04416 S6_KEEP_LOOKING:
0012D6 5000           04417         MOVF    YY_BUF_IDX, W, ACCESS           ; Have we reached our limit (idx >= max)?
0012D8 6400           04418         CPFSGT  YY_LOOKAHEAD_MAX, ACCESS        ; (skip if MAX > bytes read so far)
0012DA EF?? F???      04419         GOTO    ERR_COMMAND                     ; Yes:  Abort here and ignore data to next cmd
0012DE EE?? F0??      04420         LFSR    0, YY_BUFFER                    ; No: Save character in buffer and keep waiting
0012E2 5000           04421         MOVF    YY_BUF_IDX, W, ACCESS
0012E4 26E9           04422         ADDWF   FSR0L, F, ACCESS
0012E6 C??? FFEF      04423         MOVFF   YY_DATA, INDF0
0012EA 2A00           04424         INCF    YY_BUF_IDX, F, ACCESS
0012EC 0012           04425         RETURN
                      04426 
0012EE                04427 S7_DATA:
0012EE 2CE8           04428         DECFSZ  WREG, W, ACCESS
0012F0 D???           04429         BRA     S8_DATA
                      04430         ; RAMP_LVL recieved step count
0012F2 2800           04431         INCF    YY_DATA, W, ACCESS              ; step count - 1 sent in protocol
0012F4 6E00           04432         MOVWF   YY_YY, ACCESS                   ; actual step count saved in YY_YY (1-128)
0012F6 2A00           04433         INCF    YY_STATE, F, ACCESS             ; -> state 8 (wait for time interval byte)
0012F8 0012           04434         RETURN
                      04435         
0012FA                04436 S8_DATA:
0012FA 2CE8           04437         DECFSZ  WREG, W, ACCESS
0012FC D???           04438         BRA     S9_DATA
0012FE 2A00           04439         INCF    YY_DATA, F, ACCESS
                      04440         ;
                      04441         ; RAMP_LVL:
                      04442         ;
                      04443         ;   ___7______6______5______4______3______2______1______0__
                      04444         ;  |                                  |                    |
                      04445         ;  |                0                 |          4         | YY_COMMAND
                      04446         ;  |______|______|______|______|______|______|______|______|
                      04447         ;  |NOT_MY|0=down|                                         |
                      04448         ;  | _SSR |1=up  |           Channel ID (0-23)             | TARGET_SSR
                      04449         ;  |______|______|______|______|______|______|______|______|
                      04450         ;  |                                                       |
                      04451         ;  |              Steps between update (1-128)             | YY_YY
                      04452         ;  |______|______|______|______|______|______|______|______|
                      04453         ;  |                                                       |
                      04454         ;  |             update every n/120 sec (1-128)            | YY_DATA
                      04455         ;  |______|______|______|______|______|______|______|______|
                      04456         ;  |YCF_  |                                                |
                      04457         ;  |RAMP_ |                                                | YY_CMD_FLAGS
                      04458         ;  |CYCLE_|______|______|______|______|______|______|______|
                      04459         ;
001300 BE00           04460         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
001302 D???           04461         BRA     S8_PASS_DOWN_RAMP_LVL
001304 EE?? F0??      04462         LFSR    0, SSR_00_FLAGS
001308 5000           04463         MOVF    TARGET_SSR, W, ACCESS
00130A 0B3F           04464         ANDLW   0x3F
00130C 26E9           04465         ADDWF   FSR0L, F, ACCESS
00130E 6AEF           04466         CLRF    INDF0, ACCESS
001310 BC00           04467         BTFSC   TARGET_SSR, 6, ACCESS           ; this is cheaper than branching :)
001312 8EEF           04468         BSF     INDF0, FADE_UP, ACCESS
001314 AC00           04469         BTFSS   TARGET_SSR, 6, ACCESS
001316 8CEF           04470         BSF     INDF0, FADE_DOWN, ACCESS
001318 BE00           04471         BTFSC   YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
00131A 8AEF           04472         BSF     INDF0, FADE_CYCLE, ACCESS
00131C 0E14           04473         MOVLW   SSR_BLOCK_LEN
00131E 26E9           04474         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's step byte
001320 C??? FFEF      04475         MOVFF   YY_YY, INDF0
001324 26E9           04476         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's speed byte
001326 C??? FFEF      04477         MOVFF   YY_DATA, INDF0
00132A 26E9           04478         ADDWF   FSR0L, F, ACCESS                ; jump to this SSR's counter byte
00132C C??? FFEF      04479         MOVFF   YY_DATA, INDF0
001330 6A00           04480         CLRF    YY_STATE, ACCESS
001332 0012           04481         RETURN
                      04482 
001334                04483 S8_PASS_DOWN_RAMP_LVL:
                      04484         ;
                      04485         ; Hand off RAMP_LVL command to slave chip.
                      04486         ;
                      04487         IF ROLE_MASTER
                      04488          IF HAS_STATUS_LEDS
                      04489           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04490          ENDIF
                      04491          MOVLW  0xC0                            ; command byte
                      04492          CALL   SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04493          BCF    TARGET_SSR, 7, ACCESS
                      04494          BTFSC  YY_CMD_FLAGS, YCF_RAMP_CYCLE, ACCESS
                      04495          BSF    TARGET_SSR, 7, ACCESS
                      04496          MOVF   TARGET_SSR, W, ACCESS
                      04497          SEND_8_BIT_W
                      04498          ;CALL  SIO_WRITE_W                     ; channel + direction
                      04499          DECF   YY_YY, W, ACCESS                ; steps - 1
                      04500          SEND_8_BIT_W
                      04501          ;CALL  SIO_WRITE_W
                      04502          DECF   YY_DATA, W, ACCESS              ; speed - 1
                      04503          SEND_8_BIT_W
                      04504          ;CALL  SIO_WRITE_W
                      04505          CLRF   YY_STATE, ACCESS
                      04506          RETURN
                      04507         ENDIF
                      04508         ERR_BUG 0x06, ERR_CLASS_IN_VALID
001334 0E06               M          MOVLW  0x06
001336 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001338 6A00               M          CLRF   YY_STATE, ACCESS
00133A 0012               M          RETURN
                      04509         
00133C                04510 S9_DATA:
00133C 2CE8           04511         DECFSZ  WREG, W, ACCESS
00133E D???           04512         BRA     S10_DATA
                      04513         ;
                      04514         ; State 9:  Extended command code received; decode further
                      04515         ;
                      04516         ;   ___7______6______5______4______3______2______1______0__
                      04517         ;  |                                  |                    |
                      04518         ;  |                0                 |          7         | YY_COMMAND
                      04519         ;  |______|______|______|______|______|______|______|______|
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04520         ;  |                                                       |
                      04521         ;  |               Extended Command Code                   | YY_DATA   
                      04522         ;  |______|______|______|______|______|______|______|______|
                      04523         ;
                      04524         ; Extended commands decode like this:
                      04525         ;       01xxxxxx        privileged configuration commands
                      04526         ;       010-----        CF_PHASE command (remaining bits are data)
                      04527         ;       0110----        CF_ADDR command (remaining bits are data)
                      04528         ;       0111----        other CF_* commands (remaining bits are command number)
                      04529         ;       001-----        IC_* internal (mater->slave) commands
                      04530         ;       000-----        Regular extended commands
                      04531         ;        
001340 BC00           04532         BTFSC   YY_DATA, 6, ACCESS
001342 D???           04533         BRA     S9_PRIV_CMD
001344 BA00           04534         BTFSC   YY_DATA, 5, ACCESS
001346 D???           04535         BRA     S9_INTERNAL_CMD
                      04536         ;
                      04537         ; Regular extended commands
                      04538         ;
001348 5000           04539         MOVF    YY_DATA, W, ACCESS
00134A E1??           04540         BNZ     S9_X1_WAKE
00134C                04541 S9_X0_SLEEP:
                      04542         WAIT_FOR_SENTINEL 2, B'01011010', 6     ; -> S6.6 when sentinel found
00134C 0E02               M          MOVLW  2
00134E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001350 0E5A               M          MOVLW  B'01011010'
001352 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001354 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001356 6E00               M          MOVWF  YY_STATE, ACCESS
001358 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00135A 0E06               M          MOVLW  6
00135C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00135E 0012           04543         RETURN
001360                04544 S9_X1_WAKE:
001360 2CE8           04545         DECFSZ  WREG, W, ACCESS
001362 D???           04546         BRA     S9_X2_SHUTDOWN
                      04547         WAIT_FOR_SENTINEL 2, B'01011010', 7     ; -> S6.7 when sentinel found
001364 0E02               M          MOVLW  2
001366 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001368 0E5A               M          MOVLW  B'01011010'
00136A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00136C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00136E 6E00               M          MOVWF  YY_STATE, ACCESS
001370 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001372 0E07               M          MOVLW  7
001374 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001376 0012           04548         RETURN
001378                04549 S9_X2_SHUTDOWN:
001378 2CE8           04550         DECFSZ  WREG, W, ACCESS
00137A D???           04551         BRA     S9_X3_QUERY
                      04552         WAIT_FOR_SENTINEL 2, B'01011001', .8    ; -> S6.8 when sentinel found
00137C 0E02               M          MOVLW  2
00137E 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001380 0E59               M          MOVLW  B'01011001'
001382 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001384 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001386 6E00               M          MOVWF  YY_STATE, ACCESS
001388 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00138A 0E08               M          MOVLW  .8
00138C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00138E 0012           04553         RETURN
001390                04554 S9_X3_QUERY:
001390 2CE8           04555         DECFSZ  WREG, W, ACCESS
001392 D???           04556         BRA     S9_X4_DEF_SEQ
                      04557         WAIT_FOR_SENTINEL 2, B'01010100', .9    ; -> S6.9 when sentinel found
001394 0E02               M          MOVLW  2
001396 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001398 0E54               M          MOVLW  B'01010100'
00139A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00139C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00139E 6E00               M          MOVWF  YY_STATE, ACCESS
0013A0 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013A2 0E09               M          MOVLW  .9
0013A4 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013A6 0012           04558         RETURN
0013A8                04559 S9_X4_DEF_SEQ:
0013A8 2CE8           04560         DECFSZ  WREG, W, ACCESS
0013AA D???           04561         BRA     S9_X5_EXEC_SEQ
0013AC 0E0E           04562         MOVLW   .14
0013AE 6E00           04563         MOVWF   YY_STATE, ACCESS                ; -> 14, wait to get I byte
0013B0 0012           04564         RETURN
0013B2                04565 S9_X5_EXEC_SEQ:
0013B2 2CE8           04566         DECFSZ  WREG, W, ACCESS
0013B4 D???           04567         BRA     S9_X6_DEF_SENS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013B6 0E0F           04568         MOVLW   .15
0013B8 6E00           04569         MOVWF   YY_STATE, ACCESS                ; -> 15, wait to get I byte
0013BA 0012           04570         RETURN
0013BC                04571 S9_X6_DEF_SENS:
0013BC 2CE8           04572         DECFSZ  WREG, W, ACCESS
0013BE D???           04573         BRA     S9_X7_MSK_SENS
                      04574         WAIT_FOR_SENTINEL 5, B'00111100', .10   ; -> S6.10 when sentinel found
0013C0 0E05               M          MOVLW  5
0013C2 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013C4 0E3C               M          MOVLW  B'00111100'
0013C6 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013C8 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013CA 6E00               M          MOVWF  YY_STATE, ACCESS
0013CC 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013CE 0E0A               M          MOVLW  .10
0013D0 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013D2 0012           04575         RETURN
0013D4                04576 S9_X7_MSK_SENS:
0013D4 2CE8           04577         DECFSZ  WREG, W, ACCESS
0013D6 D???           04578         BRA     S9_X8_CLR_SEQ
0013D8 0E10           04579         MOVLW   .16
0013DA 6E00           04580         MOVWF   YY_STATE, ACCESS                ; -> 16, wait to get sensor byte
0013DC 0012           04581         RETURN
0013DE                04582 S9_X8_CLR_SEQ:
0013DE 2CE8           04583         DECFSZ  WREG, W, ACCESS
0013E0 D???           04584         BRA     S9_X9_XPRIV
                      04585         WAIT_FOR_SENTINEL 2, B'01000001', .11   ; -> S6.11 when sentinel found
0013E2 0E02               M          MOVLW  2
0013E4 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0013E6 0E41               M          MOVLW  B'01000001'
0013E8 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0013EA 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0013EC 6E00               M          MOVWF  YY_STATE, ACCESS
0013EE 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0013F0 0E0B               M          MOVLW  .11
0013F2 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0013F4 0012           04586         RETURN
0013F6                04587 S9_X9_XPRIV:
0013F6 2CE8           04588         DECFSZ  WREG, W, ACCESS                 
0013F8 D???           04589         BRA     S9_XA_ERR_COMMAND
                      04590         ;
                      04591         ; XPRIV:
                      04592         ;
                      04593         ;   ___7______6______5______4______3______2______1______0__
                      04594         ;  |                                  |                    |
                      04595         ;  |                0                 |          7         | YY_COMMAND
                      04596         ;  |______|______|______|______|______|______|______|______|
                      04597         ;  |      |      |      |                                  |
                      04598         ;  |   0  |   0  |   0  |   0  |             9             | YY_DATA
                      04599         ;  |______|______|______|______|______|______|______|______|
                      04600         ;
0013FA EF?? F???      04601         GOTO    CMD_XPRIV
                      04602 
0013FE                04603 S9_XA_ERR_COMMAND:
                      04604         IF QSCC_PORT
                      04605          #include "qscc_hook_s9_xa.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s9_xa only used for QS*C systems"
                      00031         ENDIF
                      00032 
0013FE                00033 S9_XA_QS_QUERY:
0013FE 2CE8           00034         DECFSZ  WREG, W, ACCESS
001400 D???           00035         BRA     S9_XB_BTN_MASK
001402 0E13           00036         MOVLW   .19
001404 6E00           00037         MOVWF   YY_STATE, ACCESS
001406 0012           00038         RETURN
                      00039 
001408                00040 S9_XB_BTN_MASK:
001408 2CE8           00041         DECFSZ  WREG, W, ACCESS
00140A D???           00042         BRA     S9_XC_DISP_TEXT
00140C 0E14           00043         MOVLW   .20
00140E 6E00           00044         MOVWF   YY_STATE, ACCESS
001410 0012           00045         RETURN
                      00046 
001412                00047 S9_XC_DISP_TEXT:
001412 2CE8           00048         DECFSZ  WREG, W, ACCESS
001414 D???           00049         BRA     S9_XD_DISP_BITMAP
                      00050         WAIT_FOR_SENTINEL .67, B'01010101', .14
001416 0E43               M          MOVLW  .67
001418 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00141A 0E55               M          MOVLW  B'01010101'
00141C 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00141E 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001420 6E00               M          MOVWF  YY_STATE, ACCESS
001422 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001424 0E0E               M          MOVLW  .14
001426 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001428 0012           00051         RETURN
                      00052 
00142A                00053 S9_XD_DISP_BITMAP:
00142A 2CE8           00054         DECFSZ  WREG, W, ACCESS
00142C D???           00055         BRA     S9_XE_ERR_COMMAND
                      00056         WAIT_FOR_SENTINEL .59, B'01100110', .15
00142E 0E3B               M          MOVLW  .59
001430 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001432 0E66               M          MOVLW  B'01100110'
001434 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001436 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001438 6E00               M          MOVWF  YY_STATE, ACCESS
00143A 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00143C 0E0F               M          MOVLW  .15
00143E 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001440 0012           00057         RETURN
                      00058 
001442                00059 S9_XE_ERR_COMMAND:
001442 EF?? F???      00060         GOTO    ERR_COMMAND
                      04606         ELSE
                      04607          GOTO   ERR_COMMAND
                      04608         ENDIF
                      04609 
001446                04610 S9_INTERNAL_CMD:
                      04611         ;
                      04612         ; received internal command from master
                      04613         ;
                      04614         IF !ROLE_SLAVE
001446 EF?? F???      04615          GOTO   ERR_COMMAND
                      04616         ELSE    ; BEGIN SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE--------
                      04617         MOVLW   0x1F                    ;                               ///////
                      04618         ANDWF   YY_DATA, W, ACCESS      ;                               ///////
                      04619         BNZ     S9_1_IC_LED             ;                               ///////
                      04620                                         ;                               ///////
                      04621 S9_0_IC_TXDAT:                          ;                               ///////
                      04622         ;                                                               ///////
                      04623         ; IC_TXDAT: Send byte stream to serial port                     ///////
                      04624         ;                                                               ///////
                      04625         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04626         ;                                                               ///////
                      04627         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04628         MOVLW   .10                     ;                               ///////
                      04629         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04630         RETURN                          ;                               ///////
                      04631                                         ;                               ///////
                      04632 S9_1_IC_LED:                            ;                               ///////
                      04633         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04634         BRA     S9_2_IC_HALT            ;                               ///////
                      04635         ;                               ;                               ///////
                      04636         ; IC_LED                        ;                               ///////
                      04637         ; wait for GY byte to arrive.   ;                               ///////
                      04638         ;                               ;                               ///////
                      04639         MOVLW   .12                     ;                               ///////
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04640         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04641         RETURN                          ;                               ///////
                      04642                                         ;                               ///////
                      04643 S9_2_IC_HALT:                           ;                               ///////
                      04644         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04645         BRA     S9_3_IC_TXSTA           ;                               ///////
                      04646         ;                                                               ///////
                      04647         ; IC_HALT                                                       ///////
                      04648         ;                                                               ///////
                      04649         ; Close up shop.                                                ///////
                      04650         ;                                                               ///////
                      04651         IF HAS_ACTIVE                   ;                               ///////
                      04652          SET_SSR_OFF SSR_ACTIVE         ;                               ///////
                      04653         ENDIF                           ;                               ///////
                      04654         IF HAS_STATUS_LEDS
                      04655          SET_SSR_OFF SSR_GREEN          ; set LEDs for halt mode        ///////
                      04656          SET_SSR_OFF SSR_YELLOW         ;                               ///////
                      04657          SET_SSR_STEADY SSR_RED         ;                               ///////
                      04658         ENDIF
                      04659         IF HAS_T_R                      ;                 _             ///////
                      04660          BCF    PLAT_T_R, BIT_T_R, ACCESS       ; Clear T/R output      ///////
                      04661         ENDIF                           ;                               ///////
                      04662         GOTO    HALT_MODE               ;                               ///////
                      04663                                         ;                               ///////
                      04664 S9_3_IC_TXSTA:                          ;                               ///////
                      04665         DECFSZ  WREG, W, ACCESS         ;                               ///////
                      04666         BRA     S9_4_OVERRUN            ;                               ///////
                      04667         ;                                                               ///////
                      04668         ; IC_TXSTA                                                      ///////
                      04669         ; wait for N byte to arrive, preserve command code in YY_COMMAND///////
                      04670         ; so we can tell if we're doing this or IC_TXDAT later.         ///////
                      04671         ;                                                               ///////
                      04672         MOVFF   YY_DATA, YY_COMMAND     ;                               ///////
                      04673         MOVLW   .10                     ;                               ///////
                      04674         MOVWF   YY_STATE, ACCESS        ;                               ///////
                      04675         RETURN                          ;                               ///////
                      04676                                         ;                               ///////
                      04677 S9_4_OVERRUN:                           ;                               ///////
                      04678         ERR_BUG 0x07, ERR_CLASS_OVERRUN ;                               ///////
                      04679         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
                      04680 
                      04681         
00144A                04682 S9_PRIV_CMD:
                      04683         ; received privileged configuration command     ; 01xxxxxx
                      04684         ;
                      04685         ; Anything from here down requires the privilege bit to be set.
                      04686         ;
00144A B800           04687         BTFSC   SSR_STATE, PRIV_MODE, ACCESS
00144C D???           04688         BRA     S9_DO_PRIV_CMD
00144E 0E21           04689         MOVLW   0x21
001450 6E00           04690         MOVWF   LAST_ERROR, ACCESS
001452 EF?? F???      04691         GOTO    ERR_ABORT
001456                04692 S9_DO_PRIV_CMD:
                      04693         ;
                      04694         ; decode which command this is
                      04695         ;
001456 AA00           04696         BTFSS   YY_DATA, 5, ACCESS
001458 D???           04697         BRA     S9_CF_PHASE                             ; 010xxxxx
00145A A800           04698         BTFSS   YY_DATA, 4, ACCESS
00145C D???           04699         BRA     S9_CF_ADDR                              ; 0110xxxx
                      04700         ; other priv commands                           ; 0111xxxx
00145E 0E0F           04701         MOVLW   0x0F
001460 1400           04702         ANDWF   YY_DATA, W, ACCESS
001462 E1??           04703         BNZ     S9_PRIV_1
                      04704 
001464                04705 S9_PRIV_0:
                      04706         ;
                      04707         ; CF_NOPRV:
                      04708         ;
                      04709         ;   ___7______6______5______4______3______2______1______0__
                      04710         ;  |                                  |                    |
                      04711         ;  |                0                 |          7         | YY_COMMAND
                      04712         ;  |______|______|______|______|______|______|______|______|
                      04713         ;  |      |      |      |                                  |
                      04714         ;  |   0  |   1  |   1  |   1  |             0             | YY_DATA
                      04715         ;  |______|______|______|______|______|______|______|______|
                      04716         ;
                      04717         ;
001464 9800           04718         BCF     SSR_STATE, PRIV_MODE, ACCESS
                      04719         IF HAS_STATUS_LEDS
                      04720          ;SET_SSR_SLOW_FADE SSR_GREEN
                      04721          SET_SSR_NORMAL_MODE SSR_GREEN
                      04722         ENDIF
001466 AC00           04723         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001468 D???           04724         BRA     S9_PRIV_0X
                      04725         IF HAS_STATUS_LEDS
                      04726          ;SET_SSR_PATTERN SSR_GREEN, 0, 1, 3, BIT_FADE_UP|BIT_FADE_CYCLE
                      04727          SET_SSR_DMX_MODE SSR_GREEN
                      04728         ENDIF
                      04729 
00146A                04730 S9_PRIV_0X:
                      04731         IF ROLE_MASTER
                      04732          IF HAS_STATUS_LEDS
                      04733           SET_SSR_BLINK_FADE SSR_YELLOW ; slave activity indicator
                      04734          ENDIF
                      04735          MOVLW  0xF0                                    ; send to slave chip: F0 21 00010111 00000111
                      04736          CALL   SIO_WRITE_W
                      04737          MOVLW  0x21
                      04738          CALL   SIO_WRITE_W
                      04739          MOVLW  0x17
                      04740          CALL   SIO_WRITE_W
                      04741          MOVLW  0x07
                      04742          CALL   SIO_WRITE_W
                      04743         ENDIF
00146A 6A00           04744         CLRF    YY_STATE, ACCESS
00146C EC?? F???      04745         CALL    DMX_RESUME
001470 0012           04746         RETURN
                      04747 
001472                04748 S9_PRIV_1:
001472 2CE8           04749         DECFSZ  WREG, W, ACCESS
001474 D???           04750         BRA     S9_PRIV_2
                      04751         ;
                      04752         ; CF_CONF command recognized.  Expect packet of 4 more bytes...
                      04753         ;
                      04754         WAIT_FOR_SENTINEL 4, B'00111101', 1     ; -> S6.1 when sentinel found
001476 0E04               M          MOVLW  4
001478 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
00147A 0E3D               M          MOVLW  B'00111101'
00147C 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00147E 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001480 6E00               M          MOVWF  YY_STATE, ACCESS
001482 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001484 0E01               M          MOVLW  1
001486 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001488 0012           04755         RETURN
                      04756 
00148A                04757 S9_PRIV_2:
00148A 2CE8           04758         DECFSZ  WREG, W, ACCESS
00148C D???           04759         BRA     S9_PRIV_3
                      04760         ;
                      04761         ; CF_BAUD command recognized.  Expect packet of 2 more bytes...
                      04762         ;
                      04763         WAIT_FOR_SENTINEL 2, B'00100110', 2     ; -> S6.2 when sentinel found
00148E 0E02               M          MOVLW  2
001490 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001492 0E26               M          MOVLW  B'00100110'
001494 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001496 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001498 6E00               M          MOVWF  YY_STATE, ACCESS
00149A 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00149C 0E02               M          MOVLW  2
00149E 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014A0 0012           04764         RETURN
                      04765 
0014A2                04766 S9_PRIV_3:
0014A2 2CE8           04767         DECFSZ  WREG, W, ACCESS
0014A4 D???           04768         BRA     S9_PRIV_4
                      04769         ;
                      04770         ; CF_RESET command recognized.  Expect packet of 2 more bytes...
                      04771         ;
                      04772         WAIT_FOR_SENTINEL 2, B'01110010', 3     ; -> S6.3 when sentinel found
0014A6 0E02               M          MOVLW  2
0014A8 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0014AA 0E72               M          MOVLW  B'01110010'
0014AC 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014AE 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014B0 6E00               M          MOVWF  YY_STATE, ACCESS
0014B2 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014B4 0E03               M          MOVLW  3
0014B6 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014B8 0012           04773         RETURN
                      04774 
0014BA                04775 S9_PRIV_4:
0014BA 2CE8           04776         DECFSZ  WREG, W, ACCESS
0014BC D???           04777         BRA     S9_PRIV_5
                      04778         ;
                      04779         ; CF_XPRIV:
                      04780         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04781         ;   ___7______6______5______4______3______2______1______0__
                      04782         ;  |                                  |                    |
                      04783         ;  |                0                 |          7         | YY_COMMAND
                      04784         ;  |______|______|______|______|______|______|______|______|
                      04785         ;  |      |      |      |                                  |
                      04786         ;  |   0  |   1  |   1  |   1  |             4             | YY_DATA
                      04787         ;  |______|______|______|______|______|______|______|______|
                      04788         ;
                      04789         ;
0014BE                04790 CMD_XPRIV:
0014BE 8600           04791         BSF     SSR_STATE2, PRIV_FORBID, ACCESS
0014C0 EF?? F???      04792         GOTO    S9_PRIV_0
                      04793 
0014C4                04794 S9_PRIV_5:
0014C4 2CE8           04795         DECFSZ  WREG, W, ACCESS
0014C6 D???           04796         BRA     S9_PRIV_6
                      04797         ;
                      04798         ; CF_FLROM command recognized.  Expect packet of 3 more bytes...
                      04799         ;
                      04800         WAIT_FOR_SENTINEL 3, B'00011100', 13    ; -> S6.13 when sentinel found
0014C8 0E03               M          MOVLW  3
0014CA 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0014CC 0E1C               M          MOVLW  B'00011100'
0014CE 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014D0 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014D2 6E00               M          MOVWF  YY_STATE, ACCESS
0014D4 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014D6 0E0D               M          MOVLW  13
0014D8 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014DA 0012           04801         RETURN
                      04802 
0014DC                04803 S9_PRIV_6:
                      04804         IF QSCC_PORT
                      04805          #include "qscc_hook_s9_priv_6.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s9_priv_6 only used for QS*C systems"
                      00031         ENDIF
                      00032 
0014DC                00033 S9_PRIV_6_QS_PARAM:
0014DC 2CE8           00034         DECFSZ  WREG, W, ACCESS
0014DE D???           00035         BRA     S9_PRIV_7
                      00036         WAIT_FOR_SENTINEL 5, B'01011010', .16
0014E0 0E05               M          MOVLW  5
0014E2 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
0014E4 0E5A               M          MOVLW  B'01011010'
0014E6 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
0014E8 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
0014EA 6E00               M          MOVWF  YY_STATE, ACCESS
0014EC 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
0014EE 0E10               M          MOVLW  .16
0014F0 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
0014F2 0012           00037         RETURN
                      00038 
0014F4                00039 S9_PRIV_7:
0014F4 EF?? F???      00040         GOTO    ERR_COMMAND
                      04806         ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04807          GOTO   ERR_COMMAND
                      04808         ENDIF
                      04809 
0014F8                04810 S9_CF_PHASE:
0014F8 C??? F???      04811         MOVFF   YY_DATA, YY_YY
                      04812         WAIT_FOR_SENTINEL 3, B'01001111', 4     ; -> S6.4 when sentinel found
0014FC 0E03               M          MOVLW  3
0014FE 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001500 0E4F               M          MOVLW  B'01001111'
001502 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001504 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
001506 6E00               M          MOVWF  YY_STATE, ACCESS
001508 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00150A 0E04               M          MOVLW  4
00150C 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
00150E 0012           04813         RETURN
                      04814 
001510                04815 S9_CF_ADDR:
001510 C??? F???      04816         MOVFF   YY_DATA, YY_YY
                      04817         WAIT_FOR_SENTINEL 3, B'01000100', 5     ; -> S6.5 when sentinel found
001514 0E03               M          MOVLW  3
001516 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001518 0E44               M          MOVLW  B'01000100'
00151A 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
00151C 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00151E 6E00               M          MOVWF  YY_STATE, ACCESS
001520 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
001522 0E05               M          MOVLW  5
001524 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001526 0012           04818         RETURN
                      04819         
001528                04820 S10_DATA:
001528 2CE8           04821         DECFSZ  WREG, W, ACCESS
00152A D???           04822         BRA     S11_DATA
                      04823         ;
                      04824         ; S10: IC_TXDAT / IC_TXSTA received N byte; time to loop
                      04825         ; transmitting N bytes. First byte will have MSB set.
                      04826         ;
                      04827         ;   ___7______6______5______4______3______2______1______0__
                      04828         ;  |      |                    |                           |
                      04829         ;  |   1  |          7         |             0             | (not saved)
                      04830         ;  |______|______|______|______|______|______|______|______|
                      04831         ;  |SET   |      |      |      |    IC_TXDAT:   0          |
                      04832         ;  |MSB?  |   0  |   1  |   0  |    IC_TXSTA:   3          | YY_COMMAND 
                      04833         ;  |______|______|______|______|______|______|______|______|
                      04834         ;  |                                                       |  
                      04835         ;  |                Bytes to transmit  (N)                 | YY_YY
                      04836         ;  |______|______|______|______|______|______|______|______|
                      04837         ;  |      |                                                |
                      04838         ;  |   0  |                 Data byte #0                   | (not yet received)
                      04839         ;  |______|______|______|______|______|______|______|______|
                      04840         ;                              .
                      04841         ;                              .                                    
                      04842         ;                              .
                      04843         ;   _______________________________________________________
                      04844         ;  |      |                                                |
                      04845         ;  |   0  |                 Data byte #N-1                 | (not yet received)
                      04846         ;  |______|______|______|______|______|______|______|______|
                      04847         ;  |      |                                                |
                      04848         ;  |   0  |                   $73                          | (not yet received)
                      04849         ;  |______|______|______|______|______|______|______|______|
                      04850         ;
                      04851         IF ROLE_SLAVE
                      04852          BSF    YY_COMMAND, 7, ACCESS   ; note need to set MSB in data stream
                      04853          INCF   YY_STATE, F, ACCESS     ; -> S11
                      04854          MOVFF  YY_DATA, YY_YY          ; Byte counter (N-1)
                      04855          INCF   YY_YY, F, ACCESS        ; Adjust to true byte count
                      04856          CALL   TR_ON_DELAY
                      04857          BSF    PLAT_T_R, BIT_T_R, ACCESS ; Assert bus master role by firing up the transmitter
                      04858          RETURN
                      04859         ELSE
                      04860          ERR_BUG 0x08, ERR_CLASS_OVERRUN
00152C 0E08               M          MOVLW  0x08
00152E 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001530 6A00               M          CLRF   YY_STATE, ACCESS
001532 0012               M          RETURN
                      04861         ENDIF
                      04862         
001534                04863 S11_DATA:
001534 2CE8           04864         DECFSZ  WREG, W, ACCESS
001536 D???           04865         BRA     S12_DATA
                      04866         ;
                      04867         ; IC_TXDAT / IC_TXSTA
                      04868         ; We're transmitting bytes as they come in until YY_YY is depleated.
                      04869         ;
                      04870         IF ROLE_SLAVE           ; BEGIN SLAVE-SIDE INTERNAL CMD CODE-----------
                      04871          TSTFSZ YY_YY, ACCESS                   ;                       ///////
                      04872          BRA    S11_WRITE_NEXT_BYTE             ;                       ///////
                      04873          ;                                                              ///////
                      04874          ; YY_YY is zero, the byte just received should be the sentinel.///////
                      04875          ;                                                              ///////
                      04876          MOVLW  0x73                            ;                       /////// 
                      04877          CPFSEQ YY_DATA, ACCESS                 ;                       /////// 
                      04878          BRA    S11_BAD_SENTINEL                ;                       /////// 
                      04879          ;                                                              ///////
                      04880          ; If we are processing IC_TXSTA, add our own six status bytes  ///////
                      04881          ; to the end of the output stream:                             ///////
                      04882          ;                                                              ///////
                      04883          ;                                                              ///////
                      04884          ;   ___7______6______5______4______3______2______1______0__    ///////
                      04885          ;  |      |                 fault code                     |  
                      04886          ;  |   0  |           (to be cleared after this)           | LAST_ERROR  
                      04887          ;  |______|______|______|______|______|______|______|______|
                      04888          ;  |      |                                  | phase offset|
                      04889          ;  |   0  |     unassigned, write as 0       |    <8:7>    | PHASE_OFFSET[HL]
                      04890          ;  |______|______|______|______|______|______|______|______|
                      04891          ;  |      |                                                |
                      04892          ;  |   0  |           phase offset <6:0>                   | PHASE_OFFSETL
                      04893          ;  |______|______|______|______|______|______|______|______|
                      04894          ;  |      |                                                |
                      04895          ;  |   0  |           serial number <13:7>                 | SYS_SNH
                      04896          ;  |______|______|______|______|______|______|______|______|
                      04897          ;  |      |                                                |
                      04898          ;  |   0  |           serial number <6:0>                  | SYS_SNL      
                      04899          ;  |______|______|______|______|______|______|______|______|
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      04900          ;  |      |                                                |   ///////
                      04901          ;  |   0  |                   $33                          |   ///////
                      04902          ;  |______|______|______|______|______|______|______|______|   ///////
                      04903          ;                                                              ///////
                      04904          ;                                                              ///////
                      04905          BTFSS  YY_COMMAND, 0, ACCESS           ; doing IC_TXSTA?       ///////
                      04906          BRA    S11_END_TRANSMIT                ; no, skip to end       ///////
                      04907          MOVF   LAST_ERROR, W, ACCESS           ; yes, send our private ///////
                      04908          SEND_8_BIT_W                           ;                       ///////
                      04909          ;CALL  SIO_WRITE_W                     ; at the end of the     ///////
                      04910          CLRF   LAST_ERROR, ACCESS              ; stream                ///////
                      04911          CLRF   WREG, ACCESS                    ;                       ///////
                      04912          BTFSC  PHASE_OFFSETH, 0, ACCESS        ;                       ///////
                      04913          BSF    WREG, 1, ACCESS                 ;                       ///////
                      04914          BTFSC  PHASE_OFFSETL, 7, ACCESS        ;                       ///////
                      04915          BSF    WREG, 0, ACCESS                 ;                       ///////
                      04916          SEND_8_BIT_W                           ;                       ///////
                      04917          ;CALL  SIO_WRITE_W                     ;                       ///////
                      04918          MOVF   PHASE_OFFSETL, W, ACCESS        ;                       ///////
                      04919          BCF    WREG, 7, ACCESS                 ;                       ///////
                      04920          SEND_8_BIT_W                           ;                       ///////
                      04921          ;CALL  SIO_WRITE_W                     ;                       ///////
                      04922          MOVLW  UPPER(SYS_SNH)                  ;                       ///////
                      04923          MOVWF  TBLPTRU, ACCESS                 ;                       ///////
                      04924          MOVLW  HIGH(SYS_SNH)                   ;                       ///////
                      04925          MOVWF  TBLPTRH, ACCESS                 ;                       ///////
                      04926          MOVLW  LOW(SYS_SNH)                    ;                       ///////
                      04927          MOVWF  TBLPTRL, ACCESS                 ;                       ///////
                      04928          TBLRD*+                                ;                       ///////
                      04929          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      04930          SEND_8_BIT_W                           ;                       ///////
                      04931          TBLRD*+                                ;                       ///////
                      04932          MOVF   TABLAT, W, ACCESS               ;                       ///////
                      04933          SEND_8_BIT_W                           ;                       ///////
                      04934          MOVLW  0x33                            ;                       ///////
                      04935          CALL   SIO_WRITE_W                     ;                       ///////
                      04936 S11_END_TRANSMIT:                               ;                       ///////
                      04937          ; we're done, shut down transmitter when data's all sent       ///////
                      04938          BSF    SSR_STATE, DRAIN_TR, ACCESS     ;                       ///////
                      04939          CLRF   YY_STATE, ACCESS                ;                       ///////
                      04940          RETURN                                 ;                       ///////
                      04941                                                 ;                       ///////
                      04942 S11_BAD_SENTINEL:                               ;                       ///////
                      04943          ERR_BUG 0x0A, ERR_CLASS_INT_COMMAND    ;                       ///////
                      04944                                                 ;                       ///////
                      04945 S11_WRITE_NEXT_BYTE:                            ;                       ///////
                      04946          MOVF   YY_DATA, W, ACCESS              ;                       ///////
                      04947          BTFSS  YY_COMMAND, 7, ACCESS           ; set the MSB of the    ///////
                      04948          BRA    S11_WNB_1                       ; first byte we see     ///////
                      04949          BSF    WREG, 7, ACCESS                 ;                       ///////
                      04950          BCF    YY_COMMAND, 7, ACCESS           ;                       ///////
                      04951          CALL   SIO_WRITE_W                     ; send raw 1st byte     ///////
                      04952          BRA    S11_END_1                       ;                       ///////
                      04953 S11_WNB_1:                                      ;                       ///////
                      04954          SEND_8_BIT_W                           ; send escaped byte     ///////
                      04955          ;CALL  SIO_WRITE_W                     ;                       ///////
                      04956 S11_END_1:                                      ;                       ///////
                      04957          DECF   YY_YY, F, ACCESS                ;                       ///////
                      04958          RETURN                                 ;                       ///////
                      04959         ELSE                                    ;                       ///////
                      04960          ERR_BUG 0x0B, ERR_CLASS_OVERRUN        ;                       ///////
001538 0E0B               M          MOVLW  0x0B
00153A 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
00153C 6A00               M          CLRF   YY_STATE, ACCESS
00153E 0012               M          RETURN
                      04961         ENDIF   ; END SLAVE-SIDE INTERNAL COMMAND INTERPRETATION CODE----------
                      04962         
001540                04963 S12_DATA:
001540 2CE8           04964         DECFSZ  WREG, W, ACCESS
001542 D???           04965         BRA     S13_DATA
                      04966         ;
                      04967         ; IC_LED:  Received GY byte, store in YY_YY and wait for R byte.
                      04968         ;
                      04969         IF ROLE_SLAVE
                      04970          MOVFF  YY_DATA, YY_YY
                      04971          INCF   YY_STATE, F, ACCESS             ; -> S13
                      04972          RETURN
                      04973         ELSE
                      04974          ERR_BUG 0x0C, ERR_CLASS_OVERRUN
001544 0E0C               M          MOVLW  0x0C
001546 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001548 6A00               M          CLRF   YY_STATE, ACCESS
00154A 0012               M          RETURN
                      04975         ENDIF
                      04976         
00154C                04977 S13_DATA:
00154C 2CE8           04978         DECFSZ  WREG, W, ACCESS
00154E D???           04979         BRA     S14_DATA
                      04980         ;
                      04981         ; S13: IC_LED command received
                      04982         ;
                      04983         ;   ___7______6______5______4______3______2______1______0__
                      04984         ;  |                                  |                    |
                      04985         ;  |                0                 |          7         | YY_COMMAND
                      04986         ;  |______|______|______|______|______|______|______|______|
                      04987         ;  |      |      |      |      |                           |
                      04988         ;  |   0  |   0  |   1  |   0  |             1             | (not saved)
                      04989         ;  |______|______|______|______|______|______|______|______|
                      04990         ;  |      |      |                    |                    |  
                      04991         ;  |   0  |   0  |     green LED      |     yellow LED     | YY_YY
                      04992         ;  |______|______|______|______|______|______|______|______|
                      04993         ;  |      |                           |                    |
                      04994         ;  |   0  |             0             |      red LED       | YY_DATA
                      04995         ;  |______|______|______|______|______|______|______|______|
                      04996         ;
                      04997         ;
                      04998         IF ROLE_SLAVE
                      04999          IF HAS_STATUS_LEDS
                      05000 ALTER_LED_STATE MACRO COLOR
                      05001           ;
                      05002           ; Change LED state based on W:
                      05003           ;   000  steady off    001  steady on
                      05004           ;   010  slow fade     011  rapid fade
                      05005           ;   100  slow flash    101  rapid flash
                      05006           ;   11x  no change
                      05007           ;
                      05008           BNZ   ALTER_LED_0_1
                      05009           SET_SSR_OFF COLOR
                      05010           BRA   ALTER_LED_0_EXIT
                      05011 ALTER_LED_0_1:
                      05012           DECFSZ WREG, W, ACCESS
                      05013           BRA   ALTER_LED_0_2
                      05014           SET_SSR_STEADY COLOR
                      05015           BRA   ALTER_LED_0_EXIT
                      05016 ALTER_LED_0_2:
                      05017           DECFSZ WREG, W, ACCESS
                      05018           BRA   ALTER_LED_0_3
                      05019           SET_SSR_SLOW_FADE COLOR
                      05020           BRA   ALTER_LED_0_EXIT
                      05021 ALTER_LED_0_3:
                      05022           DECFSZ WREG, W, ACCESS
                      05023           BRA   ALTER_LED_0_4
                      05024           SET_SSR_RAPID_FADE COLOR
                      05025           BRA   ALTER_LED_0_EXIT
                      05026 ALTER_LED_0_4:
                      05027           DECFSZ WREG, W, ACCESS
                      05028           BRA   ALTER_LED_0_5
                      05029           SET_SSR_SLOW_FLASH COLOR
                      05030           BRA   ALTER_LED_0_EXIT
                      05031 ALTER_LED_0_5:
                      05032           DECFSZ WREG, W, ACCESS
                      05033           BRA   ALTER_LED_0_EXIT
                      05034           SET_SSR_RAPID_FLASH COLOR
                      05035           ; fall-through: other bit patterns defined as "no change"
                      05036 ALTER_LED_0_EXIT:
                      05037          ENDM
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05038          MOVLW  0x07
                      05039          ANDWF  YY_YY, W, ACCESS
                      05040          ALTER_LED_STATE SSR_YELLOW
                      05041          MOVLW  0x38
                      05042          ANDWF  YY_YY, W, ACCESS
                      05043          RRNCF  WREG, W, ACCESS
                      05044          RRNCF  WREG, W, ACCESS
                      05045          RRNCF  WREG, W, ACCESS
                      05046          ALTER_LED_STATE SSR_GREEN
                      05047          MOVLW  0x07
                      05048          ANDWF  YY_DATA, W, ACCESS
                      05049          ALTER_LED_STATE SSR_RED
                      05050          ; and we're done.
                      05051          ENDIF
                      05052          CLRF   YY_STATE, ACCESS
                      05053          RETURN
                      05054         ELSE
                      05055          ERR_BUG 0x0D, ERR_CLASS_OVERRUN
001550 0E0D               M          MOVLW  0x0D
001552 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
001554 6A00               M          CLRF   YY_STATE, ACCESS
001556 0012               M          RETURN
                      05056         ENDIF
                      05057         
001558                05058 S14_DATA:
001558 2CE8           05059         DECFSZ  WREG, W, ACCESS
00155A D???           05060         BRA     S15_DATA
                      05061         ;
                      05062         ; DEF_SEQ: sequence number received, now we need
                      05063         ; to collect the rest of the packet
                      05064         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00155C C??? F???      05065         MOVFF   YY_DATA, YY_YY          ; sequence number in YY_YY
                      05066         WAIT_FOR_SENTINEL .131, B'01110011', .12        ; S6.12 when sentinel found
001560 0E83               M          MOVLW  .131
001562 6E00               M          MOVWF  YY_LOOKAHEAD_MAX, ACCESS
001564 0E73               M          MOVLW  B'01110011'
001566 6E00               M          MOVWF  YY_LOOK_FOR, ACCESS
001568 0E06               M          MOVLW  6                       ; -> state 6 (wait for end of packet)
00156A 6E00               M          MOVWF  YY_STATE, ACCESS
00156C 6A00               M          CLRF   YY_BUF_IDX, ACCESS      ; empty readahead buffer
00156E 0E0C               M          MOVLW  .12
001570 6E00               M          MOVWF  YY_NEXT_STATE, ACCESS
001572 0012           05067         RETURN
                      05068         
001574                05069 S15_DATA:
001574 2CE8           05070         DECFSZ  WREG, W, ACCESS
001576 D???           05071         BRA     S16_DATA
                      05072         ;
                      05073         ; S15: EXEC_SEQ: execute sequence
                      05074         ;
                      05075         ;   ___7______6______5______4______3______2______1______0__
                      05076         ;  |                                  |                    |
                      05077         ;  |                0                 |          7         | YY_COMMAND
                      05078         ;  |______|______|______|______|______|______|______|______|
                      05079         ;  |      |      |      |      |                           |
                      05080         ;  |   0  |   0  |   0  |   0  |             5             | (not saved)
                      05081         ;  |______|______|______|______|______|______|______|______|
                      05082         ;  |      |                                                |
                      05083         ;  |   0  |         sequence number or 0 to stop           | YY_DATA
                      05084         ;  |______|______|______|______|______|______|______|______|
                      05085         ;
001578 EF?? F???      05086         GOTO    ERR_NOT_IMP             ; XXX
                      05087         
00157C                05088 S16_DATA:
00157C 2CE8           05089         DECFSZ  WREG, W, ACCESS
00157E D???           05090         BRA     S17_DATA
                      05091         ;
                      05092         ; S16: MSK_SENS command received
                      05093         ;
                      05094         ;   ___7______6______5______4______3______2______1______0__
                      05095         ;  |                                  |                    |
                      05096         ;  |                0                 |          7         | YY_COMMAND
                      05097         ;  |______|______|______|______|______|______|______|______|
                      05098         ;  |      |      |      |      |                           |
                      05099         ;  |   0  |   0  |   0  |   0  |             7             | (not saved)
                      05100         ;  |______|______|______|______|______|______|______|______|
                      05101         ;  |      |                    |      Sensors enabled      |
                      05102         ;  |   0  |          0         |   A  |   B  |   C  |   D  | YY_DATA
                      05103         ;  |______|______|______|______|______|______|______|______|
                      05104         ;
                      05105         ;
001580 EF?? F???      05106         GOTO    ERR_NOT_IMP             ; XXX
                      05107 
001584                05108 S17_DATA:
                      05109         ; Or this WOULD be state 17, except there isn't one!
                      05110         ; Any state >16 lands here.  Handle the exception and
                      05111         ; abort the command being processed.
                      05112         ;
                      05113         IF QSCC_PORT
                      05114          #include "qscc_hook_s17.asm"
                      00001 ; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@  @@@   @   @  @@@@@  @@@@@                QUIZ SHOW HARDWARE CONTROLLER @@
                      00007 ;@@ @   @  @   @    @        @                FIRMWARE VERSION 4.0          @@ 
                      00008 ;@@ @   @  @   @    @       @                                               @@
                      00009 ;@@ @   @  @   @    @      @                  FOR HARDWARE REVISION 4.0     @@
                      00010 ;@@ @ @ @  @   @    @     @                   QSCC - QUIZ SHOW CONTESTANT   @@
                      00011 ;@@ @  @@  @   @    @    @                    QSRC - QUIZ SHOW REMOTE       @@
                      00012 ;@@ @@@@@   @@@   @@@@@  @@@@@                                              @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2014 by Steven L. Willoughby, Aloha, Oregon, USA.  
                      00017 ; All Rights Reserved.  Quiz Show portions are unreleased trade secret
                      00018 ; information.
                      00019 ;
                      00020 ; Based on previous works by the same author, some of which are released
                      00021 ; under the Open Software License, version 3.0, which portions are available
                      00022 ; separately for free download.
                      00023 ;
                      00024 ; -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*- -* -*- -*- -*- -*- -*-
                      00025 ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 ; This hooks into the Lumos command interpreter to add extended commands 
                      00027 ; (state 9)
                      00028 ; 
                      00029         IF LUMOS_CHIP_TYPE != LUMOS_CHIP_QSCC && LUMOS_CHIP_TYPE != LUMOS_CHIP_QSRC
                      00030          ERROR "qscc_hook_s17 only used for QS*C systems"
                      00031         ENDIF
                      00032 
001584                00033 S17_DATA_NIL:
001584 2CE8           00034         DECFSZ  WREG, W, ACCESS
001586 D???           00035         BRA     S18_DATA_NIL
001588 EF?? F???      00036         GOTO    ERR_COMMAND
                      00037 
00158C                00038 S18_DATA_NIL:
00158C 2CE8           00039         DECFSZ  WREG, W, ACCESS
00158E D???           00040         BRA     S19_DATA
001590 EF?? F???      00041         GOTO    ERR_COMMAND
                      00042 
001594                00043 S19_DATA:
001594 2CE8           00044         DECFSZ  WREG, W, ACCESS
001596 EF?? F???      00045         GOTO    S20_DATA
                      00046         ;
                      00047         ; S19: QS_QUERY command received.
                      00048         ;
                      00049         ;   ___7______6______5______4______3______2______1______0__
                      00050         ;  |                                  |                    |
                      00051         ;  |                0                 |          7         | YY_COMMAND
                      00052         ;  |______|______|______|______|______|______|______|______|
                      00053         ;  |      |      |      |      |                           |
                      00054         ;  |   0  |   0  |   0  |   0  |             10            | (not saved)
                      00055         ;  |______|______|______|______|______|______|______|______|
                      00056         ;  |      |      |      |      |      |      |      |      |
                      00057         ;  |   0  |   1  |   1  |   0  |   0  |Button| Ping | Stop | YY_DATA
                      00058         ;  |______|______|______|______|______|______|______|______|
                      00059         ;
                      00060         ;
00159A 0004           00061         CLRWDT
00159C 0EF8           00062         MOVLW   B'11111000'                     ; Verify YY_DATA's constant bits
00159E 1400           00063         ANDWF   YY_DATA, W, ACCESS
0015A0 6E00           00064         MOVWF   YY_YY, ACCESS
0015A2 0E60           00065         MOVLW   B'01100000'
0015A4 6200           00066         CPFSEQ  YY_YY, ACCESS
0015A6 EF?? F???      00067         GOTO    ERR_COMMAND
                      00068         
  00000002            00069 QS_QFLG_BUTTONS EQU     2
  00000001            00070 QS_QFLG_PING    EQU     1
  00000000            00071 QS_QFLG_STOP    EQU     0
  0000                00072         EXTERN  BTN_X0_TIME_T
  0000                00073         EXTERN  BTN_X0_TIME_U
  0000                00074         EXTERN  BTN_X0_TIME_H
  0000                00075         EXTERN  BTN_X0_TIME_L
  0000                00076         EXTERN  BTN_X0_FLAGS
                      00077 
0015AA B000           00078         BTFSC   YY_DATA, QS_QFLG_STOP, ACCESS
0015AC EC?? F???      00079         CALL    QS_STOP_SCANNER
                      00080         ;
                      00081         ; report out status:
                      00082         ;
                      00083         ;      ___7______6______5______4______3______2______1______0__
                      00084         ;     |                           |                           |
                      00085         ; 00  |   1      1      1      1  |         address           | 
                      00086         ;     |______|______|______|______|______|______|______|______|
                      00087         ;     |      |                                                |
                      00088         ; 01  |   0  |   0      0      1      1      1      0      1  |
                      00089         ;     |______|______|______|______|______|______|______|______|
                      00090         ;  
                      00091         ;
                      00092         ;   If ping-only (p=1)
                      00093         ;      ___7______6______5______4______3______2______1______0__
                      00094         ;     |      |      |             PACKET LENGTH               |
                      00095         ; 02  |   0  |   s  |   0      0      0      0      0     0   |
                      00096         ;     |______|______|______|______|______|______|______|______|
                      00097         ;
                      00098         ;
                      00099         ;   Else If button or full query (p=0)
                      00100         ;      ___7______6______5______4______3______2______1______0__      //QSCC//
                      00101         ;     |      |      |             PACKET LENGTH               |     ////////
                      00102         ; 02  |   0  |   s  |   0      0      0      0      1     0   |     ////////
                      00103         ;     |______|______|______|______|______|______|______|______|___  ////////
                      00104         ;     |      |      |      BUTTON PRESSED ALREADY?            | |   ////////
                      00105         ; 03  |   0  |   0  |   A      B      C      D      L     X   | |   ////////
                      00106         ;     |______|______|______|______|______|______|______|______| 2   ////////
                      00107         ;     |      |      |      BUTTON MASKED OUT (IGNORED)?       | |   ////////
                      00108         ; 04  |   0  |   0  |   A      B      C      D      L     X   | |   ////////
                      00109         ;     |______|______|______|______|______|______|______|______|_V_  ////////
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00110         ;
                      00111         ;      ___7______6______5______4______3______2______1______0__      \\QSRC\\
                      00112         ;     |      |      |              PACKET LENGTH              |     \\\\\\\\
                      00113         ; 02  |   0  |   s  |   0      0      0      0      1     0   |     \\\\\\\\
                      00114         ;     |______|______|______|______|______|______|______|______|___  \\\\\\\\
                      00115         ;     |      |  L3  |     X3      |     L0      |     X0      | |   \\\\\\\\ 
                      00116         ; 03  |   0  | Press|Masked Press |Masked Press |Masked Press | |   \\\\\\\\
                      00117         ;     |______|______|______|______|______|______|______|______| |   \\\\\\\\
                      00118         ;     |      |  L4  |     X4      |     L1      |     X1      | |   \\\\\\\\`j
                      00119         ; 04  |   0  | Press|Masked Press |Masked Press |Masked Press | 3   \\\\\\\\
                      00120         ;     |______|______|______|______|______|______|______|______| |   \\\\\\\\
                      00121         ;     |      |      |  L4  |  L3  |     L2      |     X2      | |   \\\\\\\\
                      00122         ; 05  |   0  |   0  |Masked|Masked|Masked Press |Masked Press | |   \\\\\\\\
                      00123         ;     |______|______|______|______|______|______|______|______|_V_  \\\\\\\\
                      00124         ;
                      00125         ;   Additionally If full query (b=0)
                      00126         ;      ___7______6______5______4______3______2______1______0__ _____//QSCC//
                      00127         ;     |                                           Bits <31:24>| | | ////////
                      00128         ; +1  | Button press time (if "pressed" bit set) x 100 nS     | | | ////////
                      00129         ;     |.......................................................| | | ////////
                      00130         ;     |                                           Bits <23:16>| | | ////////
                      00131         ; +2  |                                                       | | | ////////
                      00132         ;     |.......................................................| X | ////////
                      00133         ;     |                                           Bits <15:08>| | | ////////
                      00134         ; +3  |                                                       | | | ////////
                      00135         ;     |.......................................................| | | ////////
                      00136         ;     |                                           Bits <07:00>| | | ////////
                      00137         ; +4  |                                                       | | | ////////
                      00138         ;     |______|______|______|______|______|______|______|______|_V_| ////////
                      00139         ;     |                                           Bits <31:24>| | | ////////
                      00140         ; +5  | Button press time (if "pressed" bit set) x 100 nS     | | | ////////
                      00141         ;     |.......................................................| | | ////////
                      00142         ;     |                                           Bits <23:16>| | | ////////
                      00143         ; +6  |                                                       | |+24////////
                      00144         ;     |.......................................................| L | ////////
                      00145         ;     |                                           Bits <15:08>| | | ////////
                      00146         ; +7  |                                                       | | | ////////
                      00147         ;     |.......................................................| | | ////////
                      00148         ;     |                                           Bits <07:00>| | | ////////
                      00149         ; +8  |                                                       | | | ////////
                      00150         ;     |______|______|______|______|______|______|______|______|_V_| ////////
                      00151         ;                                                                 | ////////
                      00152         ;                                 |                               | ////////
                      00153         ;                                 |  likewise A, B, C, D          | ////////
                      00154         ;                                 V                               | ////////
                      00155         ;      ___7______6______5______4______3______2______1______0__  | | ////////
                      00156         ;     |                                           Bits <07:00>| D | ////////
                      00157         ; +24 |                                                       | | | ////////
                      00158         ;     |______|______|______|______|______|______|______|______|_V_V_////////
                      00159         ;
                      00160         ;      ___7______6______5______4______3______2______1______0__ _____\\QSRC\\
                      00161         ;     |                                           Bits <31:24>| | | \\\\\\\\
                      00162         ; +1  | Button press time (if "pressed" bit set) x 100 nS     | | | \\\\\\\\
                      00163         ;     |.......................................................| | | \\\\\\\\
                      00164         ;     |                                           Bits <23:16>| | | \\\\\\\\
                      00165         ; +2  |                                                       | | | \\\\\\\\
                      00166         ;     |.......................................................|X0 | \\\\\\\\
                      00167         ;     |                                           Bits <15:08>| | | \\\\\\\\
                      00168         ; +3  |                                                       | | | \\\\\\\\
                      00169         ;     |.......................................................| | | \\\\\\\\
                      00170         ;     |                                           Bits <07:00>| | | \\\\\\\\
                      00171         ; +4  |                                                       | | | \\\\\\\\
                      00172         ;     |______|______|______|______|______|______|______|______|_V_| \\\\\\\\
                      00173         ;     |                                           Bits <31:24>| | | \\\\\\\\
                      00174         ; +5  | Button press time (if "pressed" bit set) x 100 nS     | | | \\\\\\\\
                      00175         ;     |.......................................................| | | \\\\\\\\
                      00176         ;     |                                           Bits <23:16>| | | \\\\\\\\
                      00177         ; +6  |                                                       | |+40\\\\\\\\
                      00178         ;     |.......................................................|L0 | \\\\\\\\
                      00179         ;     |                                           Bits <15:08>| | | \\\\\\\\
                      00180         ; +7  |                                                       | | | \\\\\\\\
                      00181         ;     |.......................................................| | | \\\\\\\\
                      00182         ;     |                                           Bits <07:00>| | | \\\\\\\\
                      00183         ; +8  |                                                       | | | \\\\\\\\
                      00184         ;     |______|______|______|______|______|______|______|______|_V_| \\\\\\\\
                      00185         ;                                                                 | \\\\\\\\
                      00186         ;                                 |                               | \\\\\\\\
                      00187         ;                                 |  likewise X1, L1, ..., L4     | \\\\\\\\
                      00188         ;                                 V                               | \\\\\\\\
                      00189         ;      ___7______6______5______4______3______2______1______0__  | | \\\\\\\\
                      00190         ;     |                                           Bits <07:00>|L4 | \\\\\\\\
                      00191         ; +40 |                                                       | | | \\\\\\\\
                      00192         ;     |______|______|______|______|______|______|______|______|_V_V_\\\\\\\\
                      00193         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00194         ;
                      00195         ; Finally:
                      00196         ;
                      00197         ;      ___7______6______5______4______3______2______1______0__ 
                      00198         ;     |      |      |                    |                    |
                      00199         ; +x  |   0  |   s  |   1      0      1  | Packet Length & 7  |
                      00200         ;     |______|______|______|______|______|______|______|______|
                      00201         ;
                      00202         ;
                      00203 
0015B0 EC?? F???      00204         CALL    TR_ON_DELAY
0015B4 868B           00205         BSF     PLAT_T_R, BIT_T_R, ACCESS               ; Fire up our transmitter now
0015B6 9400           00206         BCF     SSR_STATE2, INHIBIT_OUTPUT, ACCESS      ; Allow sending output
0015B8 0EF0           00207         MOVLW   0xf0
0015BA 1400           00208         ANDWF   MY_ADDRESS, W, ACCESS
0015BC EC?? F???      00209         CALL    SIO_WRITE_W                     ; 00 start byte                 <1111aaaa>
0015C0 0E1D           00210         MOVLW   0x1d                            ; 01 extended ID byte for       <00011101>
0015C2 EC?? F???      00211         CALL    SIO_WRITE_W                     ;    for this type of reply
                      00212         
0015C6 B200           00213         BTFSC   YY_DATA, QS_QFLG_PING, ACCESS   ; If ping-only, send short packet
0015C8 EF?? F???      00214         GOTO    QS_QUERY_PING
                      00215 
                      00216         ;
                      00217         ; Figure out ultimate packet length
                      00218         ;
                      00219         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00220          MOVLW  .2
                      00221          BTFSS  YY_DATA, QS_QFLG_BUTTONS, ACCESS
                      00222          ADDLW  .24
                      00223         ELSE
                      00224          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
0015CC 0E03           00225           MOVLW .3
0015CE A400           00226           BTFSS YY_DATA, QS_QFLG_BUTTONS, ACCESS
0015D0 0F28           00227           ADDLW .40
                      00228          ENDIF
                      00229         ENDIF
0015D2 B000           00230         BTFSC   QUIZSHOW_FLAGS, QS_FLAG_SCANNING, ACCESS
0015D4 8CE8           00231         BSF     WREG, 6, ACCESS                 ; YY_YY = 0spppppp (header byte)
0015D6 6E00           00232         MOVWF   YY_YY, ACCESS
0015D8 EC?? F???      00233         CALL    SIO_WRITE_W                     ; 02 payload length     <0spppppp>
                      00234 
0015DC 010C           00235         BANKSEL QUIZSHOW_DATA
                      00236         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC
                      00237          CLRF   WREG, ACCESS
                      00238          BTFSC  BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_PRESSED, BANKED
                      00239          BSF    WREG, 0, ACCESS
                      00240          BTFSC  BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_PRESSED, BANKED
                      00241          BSF    WREG, 1, ACCESS
                      00242          BTFSC  BTN_X0_FLAGS + BTN_IDX_D0, BTN_FLG_PRESSED, BANKED
                      00243          BSF    WREG, 2, ACCESS
                      00244          BTFSC  BTN_X0_FLAGS + BTN_IDX_C0, BTN_FLG_PRESSED, BANKED
                      00245          BSF    WREG, 3, ACCESS
                      00246          BTFSC  BTN_X0_FLAGS + BTN_IDX_B0, BTN_FLG_PRESSED, BANKED
                      00247          BSF    WREG, 4, ACCESS
                      00248          BTFSC  BTN_X0_FLAGS + BTN_IDX_A0, BTN_FLG_PRESSED, BANKED
                      00249          BSF    WREG, 5, ACCESS
                      00250          CALL   SIO_WRITE_W                     ; 03 pressed flags      <00ABCDLX>
                      00251 
                      00252          CLRF   WREG, ACCESS
                      00253          BTFSC  BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
                      00254          BSF    WREG, 0, ACCESS
                      00255          BTFSC  BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
                      00256          BSF    WREG, 1, ACCESS
                      00257          BTFSC  BTN_X0_FLAGS + BTN_IDX_D0, BTN_FLG_MASKED, BANKED
                      00258          BSF    WREG, 2, ACCESS
                      00259          BTFSC  BTN_X0_FLAGS + BTN_IDX_C0, BTN_FLG_MASKED, BANKED
                      00260          BSF    WREG, 3, ACCESS
                      00261          BTFSC  BTN_X0_FLAGS + BTN_IDX_B0, BTN_FLG_MASKED, BANKED
                      00262          BSF    WREG, 4, ACCESS
                      00263          BTFSC  BTN_X0_FLAGS + BTN_IDX_A0, BTN_FLG_MASKED, BANKED
                      00264          BSF    WREG, 5, ACCESS
                      00265          CALL   SIO_WRITE_W                     ; 04 masked flags       <00ABCDLX>
                      00266         ELSE
                      00267          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
0015DE 6AE8           00268           CLRF  WREG, ACCESS
0015E0 B100           00269           BTFSC BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_PRESSED, BANKED
0015E2 80E8           00270           BSF   WREG, 0, ACCESS
0015E4 B300           00271           BTFSC BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
0015E6 82E8           00272           BSF   WREG, 1, ACCESS
0015E8 B100           00273           BTFSC BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_PRESSED, BANKED
0015EA 84E8           00274           BSF   WREG, 2, ACCESS
0015EC B300           00275           BTFSC BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
0015EE 86E8           00276           BSF   WREG, 3, ACCESS
0015F0 B100           00277           BTFSC BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_PRESSED, BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015F2 88E8           00278           BSF   WREG, 4, ACCESS
0015F4 B300           00279           BTFSC BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_MASKED, BANKED
0015F6 8AE8           00280           BSF   WREG, 5, ACCESS
0015F8 B100           00281           BTFSC BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_PRESSED, BANKED
0015FA 8CE8           00282           BSF   WREG, 6, ACCESS                 ;                        3330000
0015FC EC?? F???      00283           CALL  SIO_WRITE_W                     ; 03 x=press X=mask    <0lXxLlXx>
                      00284 
001600 6AE8           00285           CLRF  WREG, ACCESS
001602 B100           00286           BTFSC BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_PRESSED, BANKED
001604 80E8           00287           BSF   WREG, 0, ACCESS
001606 B300           00288           BTFSC BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_MASKED, BANKED
001608 82E8           00289           BSF   WREG, 1, ACCESS
00160A B100           00290           BTFSC BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_PRESSED, BANKED
00160C 84E8           00291           BSF   WREG, 2, ACCESS
00160E B300           00292           BTFSC BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_MASKED, BANKED
001610 86E8           00293           BSF   WREG, 3, ACCESS
001612 B100           00294           BTFSC BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_PRESSED, BANKED
001614 88E8           00295           BSF   WREG, 4, ACCESS
001616 B300           00296           BTFSC BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_MASKED, BANKED
001618 8AE8           00297           BSF   WREG, 5, ACCESS
00161A B100           00298           BTFSC BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_PRESSED, BANKED
00161C 8CE8           00299           BSF   WREG, 6, ACCESS                 ;                        4441111
00161E EC?? F???      00300           CALL  SIO_WRITE_W                     ; 04 x=press X=mask    <0lXxLlXx>
                      00301 
001622 6AE8           00302           CLRF  WREG, ACCESS
001624 B100           00303           BTFSC BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_PRESSED, BANKED
001626 80E8           00304           BSF   WREG, 0, ACCESS
001628 B300           00305           BTFSC BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_MASKED, BANKED
00162A 82E8           00306           BSF   WREG, 1, ACCESS
00162C B100           00307           BTFSC BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_PRESSED, BANKED
00162E 84E8           00308           BSF   WREG, 2, ACCESS
001630 B300           00309           BTFSC BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_MASKED, BANKED
001632 86E8           00310           BSF   WREG, 3, ACCESS
001634 B300           00311           BTFSC BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_MASKED, BANKED
001636 88E8           00312           BSF   WREG, 4, ACCESS
001638 B300           00313           BTFSC BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_MASKED, BANKED
00163A 8AE8           00314           BSF   WREG, 5, ACCESS                 ;                         432222
00163C EC?? F???      00315           CALL  SIO_WRITE_W                     ; 05 x=press X=mask    <00LLLlXx>
                      00316          ELSE
                      00317           ERROR "Invalid chip selection"
                      00318          ENDIF
                      00319         ENDIF
                      00320 
001640 B400           00321         BTFSC   YY_DATA, QS_QFLG_BUTTONS, ACCESS        
001642 EF?? F???      00322         GOTO    QS_QUERY_DONE
                      00323         ;
                      00324         ; Not *just* looking for button states? 
                      00325         ; send timing data as well now
                      00326         ;
                      00327 QS_SEND_BUTTON_TIME MACRO BTN_IDX
                      00328          MOVFF  BTN_X0_TIME_T + BTN_IDX, WREG
                      00329          SEND_8_BIT_W
                      00330          MOVFF  BTN_X0_TIME_U + BTN_IDX, WREG
                      00331          SEND_8_BIT_W
                      00332          MOVFF  BTN_X0_TIME_H + BTN_IDX, WREG
                      00333          SEND_8_BIT_W
                      00334          MOVFF  BTN_X0_TIME_L + BTN_IDX, WREG
                      00335          SEND_8_BIT_W
                      00336         ENDM
                      00337 
                      00338         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC   
                      00339          QS_SEND_BUTTON_TIME BTN_IDX_X0
                      00340          QS_SEND_BUTTON_TIME BTN_IDX_L0
                      00341          QS_SEND_BUTTON_TIME BTN_IDX_A0
                      00342          QS_SEND_BUTTON_TIME BTN_IDX_B0
                      00343          QS_SEND_BUTTON_TIME BTN_IDX_C0
                      00344          QS_SEND_BUTTON_TIME BTN_IDX_D0
                      00345         ELSE
                      00346          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
                      00347           QS_SEND_BUTTON_TIME BTN_IDX_X0
001646 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
00164A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00164C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00164E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001650 D???               M         BRA     S8B_CHK_7E12
001652 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001656 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001658 EC?? F???          M         CALL    SIO_WRITE_W                     
00165C D???               M         BRA     S8B_END12
00165E                    M S8B_CHK_7E12:
00165E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001660 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001662 D???               M         BRA     S8B_CHK_MSB12
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001664 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001666 EC?? F???          M         CALL    SIO_WRITE_W
00166A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00166C EC?? F???          M         CALL    SIO_WRITE_W
001670 D???               M         BRA     S8B_END12
001672                    M S8B_CHK_MSB12:
001672 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001674 D???               M         BRA     S8B_SEND_NORMAL12
001676 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001678 EC?? F???          M         CALL    SIO_WRITE_W
00167C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00167E                    M S8B_SEND_NORMAL12:
00167E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001680 EC?? F???          M         CALL    SIO_WRITE_W     
001684                    M S8B_END12:
  0000000D                M S8B_LABEL ++
001684 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
001688 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00168A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00168C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00168E D???               M         BRA     S8B_CHK_7E13
001690 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001694 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001696 EC?? F???          M         CALL    SIO_WRITE_W                     
00169A D???               M         BRA     S8B_END13
00169C                    M S8B_CHK_7E13:
00169C 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00169E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0016A0 D???               M         BRA     S8B_CHK_MSB13
0016A2 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0016A4 EC?? F???          M         CALL    SIO_WRITE_W
0016A8 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0016AA EC?? F???          M         CALL    SIO_WRITE_W
0016AE D???               M         BRA     S8B_END13
0016B0                    M S8B_CHK_MSB13:
0016B0 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0016B2 D???               M         BRA     S8B_SEND_NORMAL13
0016B4 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0016B6 EC?? F???          M         CALL    SIO_WRITE_W
0016BA 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0016BC                    M S8B_SEND_NORMAL13:
0016BC 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0016BE EC?? F???          M         CALL    SIO_WRITE_W     
0016C2                    M S8B_END13:
  0000000E                M S8B_LABEL ++
0016C2 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
0016C6 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0016C8 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0016CA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0016CC D???               M         BRA     S8B_CHK_7E14
0016CE EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0016D2 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0016D4 EC?? F???          M         CALL    SIO_WRITE_W                     
0016D8 D???               M         BRA     S8B_END14
0016DA                    M S8B_CHK_7E14:
0016DA 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0016DC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0016DE D???               M         BRA     S8B_CHK_MSB14
0016E0 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0016E2 EC?? F???          M         CALL    SIO_WRITE_W
0016E6 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0016E8 EC?? F???          M         CALL    SIO_WRITE_W
0016EC D???               M         BRA     S8B_END14
0016EE                    M S8B_CHK_MSB14:
0016EE AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0016F0 D???               M         BRA     S8B_SEND_NORMAL14
0016F2 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0016F4 EC?? F???          M         CALL    SIO_WRITE_W
0016F8 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0016FA                    M S8B_SEND_NORMAL14:
0016FA 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0016FC EC?? F???          M         CALL    SIO_WRITE_W     
001700                    M S8B_END14:
  0000000F                M S8B_LABEL ++
001700 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X0, WREG
                          M          SEND_8_BIT_W
001704 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001706 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001708 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00170A D???               M         BRA     S8B_CHK_7E15
00170C EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001710 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001712 EC?? F???          M         CALL    SIO_WRITE_W                     
001716 D???               M         BRA     S8B_END15
001718                    M S8B_CHK_7E15:
001718 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00171A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00171C D???               M         BRA     S8B_CHK_MSB15
00171E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001720 EC?? F???          M         CALL    SIO_WRITE_W
001724 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001726 EC?? F???          M         CALL    SIO_WRITE_W
00172A D???               M         BRA     S8B_END15
00172C                    M S8B_CHK_MSB15:
00172C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00172E D???               M         BRA     S8B_SEND_NORMAL15
001730 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001732 EC?? F???          M         CALL    SIO_WRITE_W
001736 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001738                    M S8B_SEND_NORMAL15:
001738 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00173A EC?? F???          M         CALL    SIO_WRITE_W     
00173E                    M S8B_END15:
  00000010                M S8B_LABEL ++
                      00348           QS_SEND_BUTTON_TIME BTN_IDX_L0
00173E C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L0, WREG
                          M          SEND_8_BIT_W
001742 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001744 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001746 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001748 D???               M         BRA     S8B_CHK_7E16
00174A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00174E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001750 EC?? F???          M         CALL    SIO_WRITE_W                     
001754 D???               M         BRA     S8B_END16
001756                    M S8B_CHK_7E16:
001756 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001758 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00175A D???               M         BRA     S8B_CHK_MSB16
00175C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00175E EC?? F???          M         CALL    SIO_WRITE_W
001762 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001764 EC?? F???          M         CALL    SIO_WRITE_W
001768 D???               M         BRA     S8B_END16
00176A                    M S8B_CHK_MSB16:
00176A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00176C D???               M         BRA     S8B_SEND_NORMAL16
00176E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001770 EC?? F???          M         CALL    SIO_WRITE_W
001774 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001776                    M S8B_SEND_NORMAL16:
001776 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001778 EC?? F???          M         CALL    SIO_WRITE_W     
00177C                    M S8B_END16:
  00000011                M S8B_LABEL ++
00177C C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L0, WREG
                          M          SEND_8_BIT_W
001780 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001782 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001784 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001786 D???               M         BRA     S8B_CHK_7E17
001788 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00178C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00178E EC?? F???          M         CALL    SIO_WRITE_W                     
001792 D???               M         BRA     S8B_END17
001794                    M S8B_CHK_7E17:
001794 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001796 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001798 D???               M         BRA     S8B_CHK_MSB17
00179A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00179C EC?? F???          M         CALL    SIO_WRITE_W
0017A0 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0017A2 EC?? F???          M         CALL    SIO_WRITE_W
0017A6 D???               M         BRA     S8B_END17
0017A8                    M S8B_CHK_MSB17:
0017A8 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0017AA D???               M         BRA     S8B_SEND_NORMAL17
0017AC 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0017AE EC?? F???          M         CALL    SIO_WRITE_W
0017B2 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0017B4                    M S8B_SEND_NORMAL17:
0017B4 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0017B6 EC?? F???          M         CALL    SIO_WRITE_W     
0017BA                    M S8B_END17:
  00000012                M S8B_LABEL ++
0017BA C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L0, WREG
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M          SEND_8_BIT_W
0017BE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0017C0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0017C2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0017C4 D???               M         BRA     S8B_CHK_7E18
0017C6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0017CA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0017CC EC?? F???          M         CALL    SIO_WRITE_W                     
0017D0 D???               M         BRA     S8B_END18
0017D2                    M S8B_CHK_7E18:
0017D2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0017D4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0017D6 D???               M         BRA     S8B_CHK_MSB18
0017D8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0017DA EC?? F???          M         CALL    SIO_WRITE_W
0017DE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0017E0 EC?? F???          M         CALL    SIO_WRITE_W
0017E4 D???               M         BRA     S8B_END18
0017E6                    M S8B_CHK_MSB18:
0017E6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0017E8 D???               M         BRA     S8B_SEND_NORMAL18
0017EA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0017EC EC?? F???          M         CALL    SIO_WRITE_W
0017F0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0017F2                    M S8B_SEND_NORMAL18:
0017F2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0017F4 EC?? F???          M         CALL    SIO_WRITE_W     
0017F8                    M S8B_END18:
  00000013                M S8B_LABEL ++
0017F8 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L0, WREG
                          M          SEND_8_BIT_W
0017FC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0017FE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001800 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001802 D???               M         BRA     S8B_CHK_7E19
001804 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001808 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00180A EC?? F???          M         CALL    SIO_WRITE_W                     
00180E D???               M         BRA     S8B_END19
001810                    M S8B_CHK_7E19:
001810 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001812 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001814 D???               M         BRA     S8B_CHK_MSB19
001816 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001818 EC?? F???          M         CALL    SIO_WRITE_W
00181C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00181E EC?? F???          M         CALL    SIO_WRITE_W
001822 D???               M         BRA     S8B_END19
001824                    M S8B_CHK_MSB19:
001824 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001826 D???               M         BRA     S8B_SEND_NORMAL19
001828 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00182A EC?? F???          M         CALL    SIO_WRITE_W
00182E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001830                    M S8B_SEND_NORMAL19:
001830 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001832 EC?? F???          M         CALL    SIO_WRITE_W     
001836                    M S8B_END19:
  00000014                M S8B_LABEL ++
                      00349           QS_SEND_BUTTON_TIME BTN_IDX_X1
001836 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
00183A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00183C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00183E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001840 D???               M         BRA     S8B_CHK_7E20
001842 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001846 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001848 EC?? F???          M         CALL    SIO_WRITE_W                     
00184C D???               M         BRA     S8B_END20
00184E                    M S8B_CHK_7E20:
00184E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001850 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001852 D???               M         BRA     S8B_CHK_MSB20
001854 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001856 EC?? F???          M         CALL    SIO_WRITE_W
00185A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00185C EC?? F???          M         CALL    SIO_WRITE_W
001860 D???               M         BRA     S8B_END20
001862                    M S8B_CHK_MSB20:
001862 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001864 D???               M         BRA     S8B_SEND_NORMAL20
001866 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001868 EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00186C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
00186E                    M S8B_SEND_NORMAL20:
00186E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001870 EC?? F???          M         CALL    SIO_WRITE_W     
001874                    M S8B_END20:
  00000015                M S8B_LABEL ++
001874 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
001878 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
00187A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
00187C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00187E D???               M         BRA     S8B_CHK_7E21
001880 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001884 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001886 EC?? F???          M         CALL    SIO_WRITE_W                     
00188A D???               M         BRA     S8B_END21
00188C                    M S8B_CHK_7E21:
00188C 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00188E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001890 D???               M         BRA     S8B_CHK_MSB21
001892 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001894 EC?? F???          M         CALL    SIO_WRITE_W
001898 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
00189A EC?? F???          M         CALL    SIO_WRITE_W
00189E D???               M         BRA     S8B_END21
0018A0                    M S8B_CHK_MSB21:
0018A0 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0018A2 D???               M         BRA     S8B_SEND_NORMAL21
0018A4 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0018A6 EC?? F???          M         CALL    SIO_WRITE_W
0018AA 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0018AC                    M S8B_SEND_NORMAL21:
0018AC 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0018AE EC?? F???          M         CALL    SIO_WRITE_W     
0018B2                    M S8B_END21:
  00000016                M S8B_LABEL ++
0018B2 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
0018B6 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0018B8 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0018BA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0018BC D???               M         BRA     S8B_CHK_7E22
0018BE EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0018C2 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0018C4 EC?? F???          M         CALL    SIO_WRITE_W                     
0018C8 D???               M         BRA     S8B_END22
0018CA                    M S8B_CHK_7E22:
0018CA 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0018CC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0018CE D???               M         BRA     S8B_CHK_MSB22
0018D0 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0018D2 EC?? F???          M         CALL    SIO_WRITE_W
0018D6 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0018D8 EC?? F???          M         CALL    SIO_WRITE_W
0018DC D???               M         BRA     S8B_END22
0018DE                    M S8B_CHK_MSB22:
0018DE AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0018E0 D???               M         BRA     S8B_SEND_NORMAL22
0018E2 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0018E4 EC?? F???          M         CALL    SIO_WRITE_W
0018E8 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0018EA                    M S8B_SEND_NORMAL22:
0018EA 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0018EC EC?? F???          M         CALL    SIO_WRITE_W     
0018F0                    M S8B_END22:
  00000017                M S8B_LABEL ++
0018F0 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X1, WREG
                          M          SEND_8_BIT_W
0018F4 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0018F6 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0018F8 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0018FA D???               M         BRA     S8B_CHK_7E23
0018FC EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001900 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001902 EC?? F???          M         CALL    SIO_WRITE_W                     
001906 D???               M         BRA     S8B_END23
001908                    M S8B_CHK_7E23:
001908 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
00190A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00190C D???               M         BRA     S8B_CHK_MSB23
00190E 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001910 EC?? F???          M         CALL    SIO_WRITE_W
001914 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001916 EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00191A D???               M         BRA     S8B_END23
00191C                    M S8B_CHK_MSB23:
00191C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00191E D???               M         BRA     S8B_SEND_NORMAL23
001920 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001922 EC?? F???          M         CALL    SIO_WRITE_W
001926 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001928                    M S8B_SEND_NORMAL23:
001928 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
00192A EC?? F???          M         CALL    SIO_WRITE_W     
00192E                    M S8B_END23:
  00000018                M S8B_LABEL ++
                      00350           QS_SEND_BUTTON_TIME BTN_IDX_L1
00192E C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
001932 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001934 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001936 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001938 D???               M         BRA     S8B_CHK_7E24
00193A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00193E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001940 EC?? F???          M         CALL    SIO_WRITE_W                     
001944 D???               M         BRA     S8B_END24
001946                    M S8B_CHK_7E24:
001946 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001948 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
00194A D???               M         BRA     S8B_CHK_MSB24
00194C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00194E EC?? F???          M         CALL    SIO_WRITE_W
001952 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001954 EC?? F???          M         CALL    SIO_WRITE_W
001958 D???               M         BRA     S8B_END24
00195A                    M S8B_CHK_MSB24:
00195A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00195C D???               M         BRA     S8B_SEND_NORMAL24
00195E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001960 EC?? F???          M         CALL    SIO_WRITE_W
001964 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001966                    M S8B_SEND_NORMAL24:
001966 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001968 EC?? F???          M         CALL    SIO_WRITE_W     
00196C                    M S8B_END24:
  00000019                M S8B_LABEL ++
00196C C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
001970 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001972 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001974 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001976 D???               M         BRA     S8B_CHK_7E25
001978 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
00197C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
00197E EC?? F???          M         CALL    SIO_WRITE_W                     
001982 D???               M         BRA     S8B_END25
001984                    M S8B_CHK_7E25:
001984 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001986 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001988 D???               M         BRA     S8B_CHK_MSB25
00198A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
00198C EC?? F???          M         CALL    SIO_WRITE_W
001990 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001992 EC?? F???          M         CALL    SIO_WRITE_W
001996 D???               M         BRA     S8B_END25
001998                    M S8B_CHK_MSB25:
001998 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
00199A D???               M         BRA     S8B_SEND_NORMAL25
00199C 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
00199E EC?? F???          M         CALL    SIO_WRITE_W
0019A2 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0019A4                    M S8B_SEND_NORMAL25:
0019A4 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0019A6 EC?? F???          M         CALL    SIO_WRITE_W     
0019AA                    M S8B_END25:
  0000001A                M S8B_LABEL ++
0019AA C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
0019AE 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0019B0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0019B2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0019B4 D???               M         BRA     S8B_CHK_7E26
0019B6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0019BA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0019BC EC?? F???          M         CALL    SIO_WRITE_W                     
0019C0 D???               M         BRA     S8B_END26
0019C2                    M S8B_CHK_7E26:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0019C2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
0019C4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0019C6 D???               M         BRA     S8B_CHK_MSB26
0019C8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
0019CA EC?? F???          M         CALL    SIO_WRITE_W
0019CE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
0019D0 EC?? F???          M         CALL    SIO_WRITE_W
0019D4 D???               M         BRA     S8B_END26
0019D6                    M S8B_CHK_MSB26:
0019D6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
0019D8 D???               M         BRA     S8B_SEND_NORMAL26
0019DA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
0019DC EC?? F???          M         CALL    SIO_WRITE_W
0019E0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
0019E2                    M S8B_SEND_NORMAL26:
0019E2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
0019E4 EC?? F???          M         CALL    SIO_WRITE_W     
0019E8                    M S8B_END26:
  0000001B                M S8B_LABEL ++
0019E8 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L1, WREG
                          M          SEND_8_BIT_W
0019EC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
0019EE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
0019F0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
0019F2 D???               M         BRA     S8B_CHK_7E27
0019F4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
0019F8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
0019FA EC?? F???          M         CALL    SIO_WRITE_W                     
0019FE D???               M         BRA     S8B_END27
001A00                    M S8B_CHK_7E27:
001A00 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001A02 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A04 D???               M         BRA     S8B_CHK_MSB27
001A06 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001A08 EC?? F???          M         CALL    SIO_WRITE_W
001A0C 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001A0E EC?? F???          M         CALL    SIO_WRITE_W
001A12 D???               M         BRA     S8B_END27
001A14                    M S8B_CHK_MSB27:
001A14 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001A16 D???               M         BRA     S8B_SEND_NORMAL27
001A18 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001A1A EC?? F???          M         CALL    SIO_WRITE_W
001A1E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001A20                    M S8B_SEND_NORMAL27:
001A20 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001A22 EC?? F???          M         CALL    SIO_WRITE_W     
001A26                    M S8B_END27:
  0000001C                M S8B_LABEL ++
                      00351           QS_SEND_BUTTON_TIME BTN_IDX_X2
001A26 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
001A2A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001A2C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001A2E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A30 D???               M         BRA     S8B_CHK_7E28
001A32 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001A36 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001A38 EC?? F???          M         CALL    SIO_WRITE_W                     
001A3C D???               M         BRA     S8B_END28
001A3E                    M S8B_CHK_7E28:
001A3E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001A40 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A42 D???               M         BRA     S8B_CHK_MSB28
001A44 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001A46 EC?? F???          M         CALL    SIO_WRITE_W
001A4A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001A4C EC?? F???          M         CALL    SIO_WRITE_W
001A50 D???               M         BRA     S8B_END28
001A52                    M S8B_CHK_MSB28:
001A52 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001A54 D???               M         BRA     S8B_SEND_NORMAL28
001A56 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001A58 EC?? F???          M         CALL    SIO_WRITE_W
001A5C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001A5E                    M S8B_SEND_NORMAL28:
001A5E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001A60 EC?? F???          M         CALL    SIO_WRITE_W     
001A64                    M S8B_END28:
  0000001D                M S8B_LABEL ++
001A64 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
001A68 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001A6A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A6C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A6E D???               M         BRA     S8B_CHK_7E29
001A70 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001A74 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001A76 EC?? F???          M         CALL    SIO_WRITE_W                     
001A7A D???               M         BRA     S8B_END29
001A7C                    M S8B_CHK_7E29:
001A7C 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001A7E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001A80 D???               M         BRA     S8B_CHK_MSB29
001A82 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001A84 EC?? F???          M         CALL    SIO_WRITE_W
001A88 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001A8A EC?? F???          M         CALL    SIO_WRITE_W
001A8E D???               M         BRA     S8B_END29
001A90                    M S8B_CHK_MSB29:
001A90 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001A92 D???               M         BRA     S8B_SEND_NORMAL29
001A94 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001A96 EC?? F???          M         CALL    SIO_WRITE_W
001A9A 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001A9C                    M S8B_SEND_NORMAL29:
001A9C 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001A9E EC?? F???          M         CALL    SIO_WRITE_W     
001AA2                    M S8B_END29:
  0000001E                M S8B_LABEL ++
001AA2 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
001AA6 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001AA8 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001AAA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001AAC D???               M         BRA     S8B_CHK_7E30
001AAE EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001AB2 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001AB4 EC?? F???          M         CALL    SIO_WRITE_W                     
001AB8 D???               M         BRA     S8B_END30
001ABA                    M S8B_CHK_7E30:
001ABA 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001ABC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001ABE D???               M         BRA     S8B_CHK_MSB30
001AC0 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001AC2 EC?? F???          M         CALL    SIO_WRITE_W
001AC6 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001AC8 EC?? F???          M         CALL    SIO_WRITE_W
001ACC D???               M         BRA     S8B_END30
001ACE                    M S8B_CHK_MSB30:
001ACE AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001AD0 D???               M         BRA     S8B_SEND_NORMAL30
001AD2 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001AD4 EC?? F???          M         CALL    SIO_WRITE_W
001AD8 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001ADA                    M S8B_SEND_NORMAL30:
001ADA 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001ADC EC?? F???          M         CALL    SIO_WRITE_W     
001AE0                    M S8B_END30:
  0000001F                M S8B_LABEL ++
001AE0 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X2, WREG
                          M          SEND_8_BIT_W
001AE4 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001AE6 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001AE8 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001AEA D???               M         BRA     S8B_CHK_7E31
001AEC EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001AF0 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001AF2 EC?? F???          M         CALL    SIO_WRITE_W                     
001AF6 D???               M         BRA     S8B_END31
001AF8                    M S8B_CHK_7E31:
001AF8 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001AFA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001AFC D???               M         BRA     S8B_CHK_MSB31
001AFE 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001B00 EC?? F???          M         CALL    SIO_WRITE_W
001B04 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001B06 EC?? F???          M         CALL    SIO_WRITE_W
001B0A D???               M         BRA     S8B_END31
001B0C                    M S8B_CHK_MSB31:
001B0C AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001B0E D???               M         BRA     S8B_SEND_NORMAL31
001B10 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001B12 EC?? F???          M         CALL    SIO_WRITE_W
001B16 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001B18                    M S8B_SEND_NORMAL31:
001B18 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001B1A EC?? F???          M         CALL    SIO_WRITE_W     
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B1E                    M S8B_END31:
  00000020                M S8B_LABEL ++
                      00352           QS_SEND_BUTTON_TIME BTN_IDX_L2
001B1E C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001B22 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001B24 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001B26 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B28 D???               M         BRA     S8B_CHK_7E32
001B2A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001B2E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001B30 EC?? F???          M         CALL    SIO_WRITE_W                     
001B34 D???               M         BRA     S8B_END32
001B36                    M S8B_CHK_7E32:
001B36 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001B38 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B3A D???               M         BRA     S8B_CHK_MSB32
001B3C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001B3E EC?? F???          M         CALL    SIO_WRITE_W
001B42 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001B44 EC?? F???          M         CALL    SIO_WRITE_W
001B48 D???               M         BRA     S8B_END32
001B4A                    M S8B_CHK_MSB32:
001B4A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001B4C D???               M         BRA     S8B_SEND_NORMAL32
001B4E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001B50 EC?? F???          M         CALL    SIO_WRITE_W
001B54 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001B56                    M S8B_SEND_NORMAL32:
001B56 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001B58 EC?? F???          M         CALL    SIO_WRITE_W     
001B5C                    M S8B_END32:
  00000021                M S8B_LABEL ++
001B5C C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001B60 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001B62 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001B64 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B66 D???               M         BRA     S8B_CHK_7E33
001B68 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001B6C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001B6E EC?? F???          M         CALL    SIO_WRITE_W                     
001B72 D???               M         BRA     S8B_END33
001B74                    M S8B_CHK_7E33:
001B74 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001B76 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001B78 D???               M         BRA     S8B_CHK_MSB33
001B7A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001B7C EC?? F???          M         CALL    SIO_WRITE_W
001B80 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001B82 EC?? F???          M         CALL    SIO_WRITE_W
001B86 D???               M         BRA     S8B_END33
001B88                    M S8B_CHK_MSB33:
001B88 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001B8A D???               M         BRA     S8B_SEND_NORMAL33
001B8C 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001B8E EC?? F???          M         CALL    SIO_WRITE_W
001B92 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001B94                    M S8B_SEND_NORMAL33:
001B94 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001B96 EC?? F???          M         CALL    SIO_WRITE_W     
001B9A                    M S8B_END33:
  00000022                M S8B_LABEL ++
001B9A C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001B9E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001BA0 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001BA2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001BA4 D???               M         BRA     S8B_CHK_7E34
001BA6 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001BAA 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001BAC EC?? F???          M         CALL    SIO_WRITE_W                     
001BB0 D???               M         BRA     S8B_END34
001BB2                    M S8B_CHK_7E34:
001BB2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001BB4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001BB6 D???               M         BRA     S8B_CHK_MSB34
001BB8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001BBA EC?? F???          M         CALL    SIO_WRITE_W
001BBE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001BC0 EC?? F???          M         CALL    SIO_WRITE_W
001BC4 D???               M         BRA     S8B_END34
001BC6                    M S8B_CHK_MSB34:
001BC6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001BC8 D???               M         BRA     S8B_SEND_NORMAL34
001BCA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001BCC EC?? F???          M         CALL    SIO_WRITE_W
001BD0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001BD2                    M S8B_SEND_NORMAL34:
001BD2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001BD4 EC?? F???          M         CALL    SIO_WRITE_W     
001BD8                    M S8B_END34:
  00000023                M S8B_LABEL ++
001BD8 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L2, WREG
                          M          SEND_8_BIT_W
001BDC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001BDE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001BE0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001BE2 D???               M         BRA     S8B_CHK_7E35
001BE4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001BE8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001BEA EC?? F???          M         CALL    SIO_WRITE_W                     
001BEE D???               M         BRA     S8B_END35
001BF0                    M S8B_CHK_7E35:
001BF0 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001BF2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001BF4 D???               M         BRA     S8B_CHK_MSB35
001BF6 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001BF8 EC?? F???          M         CALL    SIO_WRITE_W
001BFC 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001BFE EC?? F???          M         CALL    SIO_WRITE_W
001C02 D???               M         BRA     S8B_END35
001C04                    M S8B_CHK_MSB35:
001C04 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001C06 D???               M         BRA     S8B_SEND_NORMAL35
001C08 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001C0A EC?? F???          M         CALL    SIO_WRITE_W
001C0E 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001C10                    M S8B_SEND_NORMAL35:
001C10 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001C12 EC?? F???          M         CALL    SIO_WRITE_W     
001C16                    M S8B_END35:
  00000024                M S8B_LABEL ++
                      00353           QS_SEND_BUTTON_TIME BTN_IDX_X3
001C16 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001C1A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001C1C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001C1E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C20 D???               M         BRA     S8B_CHK_7E36
001C22 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001C26 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001C28 EC?? F???          M         CALL    SIO_WRITE_W                     
001C2C D???               M         BRA     S8B_END36
001C2E                    M S8B_CHK_7E36:
001C2E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001C30 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C32 D???               M         BRA     S8B_CHK_MSB36
001C34 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001C36 EC?? F???          M         CALL    SIO_WRITE_W
001C3A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001C3C EC?? F???          M         CALL    SIO_WRITE_W
001C40 D???               M         BRA     S8B_END36
001C42                    M S8B_CHK_MSB36:
001C42 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001C44 D???               M         BRA     S8B_SEND_NORMAL36
001C46 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001C48 EC?? F???          M         CALL    SIO_WRITE_W
001C4C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001C4E                    M S8B_SEND_NORMAL36:
001C4E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001C50 EC?? F???          M         CALL    SIO_WRITE_W     
001C54                    M S8B_END36:
  00000025                M S8B_LABEL ++
001C54 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001C58 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001C5A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001C5C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C5E D???               M         BRA     S8B_CHK_7E37
001C60 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001C64 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001C66 EC?? F???          M         CALL    SIO_WRITE_W                     
001C6A D???               M         BRA     S8B_END37
001C6C                    M S8B_CHK_7E37:
001C6C 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001C6E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C70 D???               M         BRA     S8B_CHK_MSB37
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C72 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001C74 EC?? F???          M         CALL    SIO_WRITE_W
001C78 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001C7A EC?? F???          M         CALL    SIO_WRITE_W
001C7E D???               M         BRA     S8B_END37
001C80                    M S8B_CHK_MSB37:
001C80 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001C82 D???               M         BRA     S8B_SEND_NORMAL37
001C84 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001C86 EC?? F???          M         CALL    SIO_WRITE_W
001C8A 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001C8C                    M S8B_SEND_NORMAL37:
001C8C 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001C8E EC?? F???          M         CALL    SIO_WRITE_W     
001C92                    M S8B_END37:
  00000026                M S8B_LABEL ++
001C92 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001C96 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001C98 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001C9A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001C9C D???               M         BRA     S8B_CHK_7E38
001C9E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001CA2 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001CA4 EC?? F???          M         CALL    SIO_WRITE_W                     
001CA8 D???               M         BRA     S8B_END38
001CAA                    M S8B_CHK_7E38:
001CAA 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001CAC 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001CAE D???               M         BRA     S8B_CHK_MSB38
001CB0 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001CB2 EC?? F???          M         CALL    SIO_WRITE_W
001CB6 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001CB8 EC?? F???          M         CALL    SIO_WRITE_W
001CBC D???               M         BRA     S8B_END38
001CBE                    M S8B_CHK_MSB38:
001CBE AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001CC0 D???               M         BRA     S8B_SEND_NORMAL38
001CC2 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001CC4 EC?? F???          M         CALL    SIO_WRITE_W
001CC8 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001CCA                    M S8B_SEND_NORMAL38:
001CCA 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001CCC EC?? F???          M         CALL    SIO_WRITE_W     
001CD0                    M S8B_END38:
  00000027                M S8B_LABEL ++
001CD0 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X3, WREG
                          M          SEND_8_BIT_W
001CD4 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001CD6 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001CD8 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001CDA D???               M         BRA     S8B_CHK_7E39
001CDC EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001CE0 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001CE2 EC?? F???          M         CALL    SIO_WRITE_W                     
001CE6 D???               M         BRA     S8B_END39
001CE8                    M S8B_CHK_7E39:
001CE8 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001CEA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001CEC D???               M         BRA     S8B_CHK_MSB39
001CEE 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001CF0 EC?? F???          M         CALL    SIO_WRITE_W
001CF4 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001CF6 EC?? F???          M         CALL    SIO_WRITE_W
001CFA D???               M         BRA     S8B_END39
001CFC                    M S8B_CHK_MSB39:
001CFC AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001CFE D???               M         BRA     S8B_SEND_NORMAL39
001D00 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001D02 EC?? F???          M         CALL    SIO_WRITE_W
001D06 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001D08                    M S8B_SEND_NORMAL39:
001D08 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001D0A EC?? F???          M         CALL    SIO_WRITE_W     
001D0E                    M S8B_END39:
  00000028                M S8B_LABEL ++
                      00354           QS_SEND_BUTTON_TIME BTN_IDX_L3
001D0E C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L3, WREG
                          M          SEND_8_BIT_W
001D12 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001D14 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001D16 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D18 D???               M         BRA     S8B_CHK_7E40
001D1A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001D1E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001D20 EC?? F???          M         CALL    SIO_WRITE_W                     
001D24 D???               M         BRA     S8B_END40
001D26                    M S8B_CHK_7E40:
001D26 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001D28 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D2A D???               M         BRA     S8B_CHK_MSB40
001D2C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001D2E EC?? F???          M         CALL    SIO_WRITE_W
001D32 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001D34 EC?? F???          M         CALL    SIO_WRITE_W
001D38 D???               M         BRA     S8B_END40
001D3A                    M S8B_CHK_MSB40:
001D3A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001D3C D???               M         BRA     S8B_SEND_NORMAL40
001D3E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001D40 EC?? F???          M         CALL    SIO_WRITE_W
001D44 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001D46                    M S8B_SEND_NORMAL40:
001D46 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001D48 EC?? F???          M         CALL    SIO_WRITE_W     
001D4C                    M S8B_END40:
  00000029                M S8B_LABEL ++
001D4C C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L3, WREG
                          M          SEND_8_BIT_W
001D50 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001D52 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001D54 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D56 D???               M         BRA     S8B_CHK_7E41
001D58 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001D5C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001D5E EC?? F???          M         CALL    SIO_WRITE_W                     
001D62 D???               M         BRA     S8B_END41
001D64                    M S8B_CHK_7E41:
001D64 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001D66 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D68 D???               M         BRA     S8B_CHK_MSB41
001D6A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001D6C EC?? F???          M         CALL    SIO_WRITE_W
001D70 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001D72 EC?? F???          M         CALL    SIO_WRITE_W
001D76 D???               M         BRA     S8B_END41
001D78                    M S8B_CHK_MSB41:
001D78 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001D7A D???               M         BRA     S8B_SEND_NORMAL41
001D7C 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001D7E EC?? F???          M         CALL    SIO_WRITE_W
001D82 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001D84                    M S8B_SEND_NORMAL41:
001D84 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001D86 EC?? F???          M         CALL    SIO_WRITE_W     
001D8A                    M S8B_END41:
  0000002A                M S8B_LABEL ++
001D8A C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L3, WREG
                          M          SEND_8_BIT_W
001D8E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001D90 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001D92 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001D94 D???               M         BRA     S8B_CHK_7E42
001D96 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001D9A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001D9C EC?? F???          M         CALL    SIO_WRITE_W                     
001DA0 D???               M         BRA     S8B_END42
001DA2                    M S8B_CHK_7E42:
001DA2 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001DA4 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001DA6 D???               M         BRA     S8B_CHK_MSB42
001DA8 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001DAA EC?? F???          M         CALL    SIO_WRITE_W
001DAE 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001DB0 EC?? F???          M         CALL    SIO_WRITE_W
001DB4 D???               M         BRA     S8B_END42
001DB6                    M S8B_CHK_MSB42:
001DB6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001DB8 D???               M         BRA     S8B_SEND_NORMAL42
001DBA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001DBC EC?? F???          M         CALL    SIO_WRITE_W
001DC0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001DC2                    M S8B_SEND_NORMAL42:
001DC2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001DC4 EC?? F???          M         CALL    SIO_WRITE_W     
001DC8                    M S8B_END42:
  0000002B                M S8B_LABEL ++
001DC8 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L3, WREG
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M          SEND_8_BIT_W
001DCC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001DCE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001DD0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001DD2 D???               M         BRA     S8B_CHK_7E43
001DD4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001DD8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001DDA EC?? F???          M         CALL    SIO_WRITE_W                     
001DDE D???               M         BRA     S8B_END43
001DE0                    M S8B_CHK_7E43:
001DE0 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001DE2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001DE4 D???               M         BRA     S8B_CHK_MSB43
001DE6 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001DE8 EC?? F???          M         CALL    SIO_WRITE_W
001DEC 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001DEE EC?? F???          M         CALL    SIO_WRITE_W
001DF2 D???               M         BRA     S8B_END43
001DF4                    M S8B_CHK_MSB43:
001DF4 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001DF6 D???               M         BRA     S8B_SEND_NORMAL43
001DF8 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001DFA EC?? F???          M         CALL    SIO_WRITE_W
001DFE 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001E00                    M S8B_SEND_NORMAL43:
001E00 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001E02 EC?? F???          M         CALL    SIO_WRITE_W     
001E06                    M S8B_END43:
  0000002C                M S8B_LABEL ++
                      00355           QS_SEND_BUTTON_TIME BTN_IDX_X4
001E06 C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001E0A 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001E0C 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001E0E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E10 D???               M         BRA     S8B_CHK_7E44
001E12 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001E16 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001E18 EC?? F???          M         CALL    SIO_WRITE_W                     
001E1C D???               M         BRA     S8B_END44
001E1E                    M S8B_CHK_7E44:
001E1E 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001E20 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E22 D???               M         BRA     S8B_CHK_MSB44
001E24 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001E26 EC?? F???          M         CALL    SIO_WRITE_W
001E2A 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001E2C EC?? F???          M         CALL    SIO_WRITE_W
001E30 D???               M         BRA     S8B_END44
001E32                    M S8B_CHK_MSB44:
001E32 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001E34 D???               M         BRA     S8B_SEND_NORMAL44
001E36 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001E38 EC?? F???          M         CALL    SIO_WRITE_W
001E3C 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001E3E                    M S8B_SEND_NORMAL44:
001E3E 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001E40 EC?? F???          M         CALL    SIO_WRITE_W     
001E44                    M S8B_END44:
  0000002D                M S8B_LABEL ++
001E44 C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001E48 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001E4A 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001E4C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E4E D???               M         BRA     S8B_CHK_7E45
001E50 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001E54 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001E56 EC?? F???          M         CALL    SIO_WRITE_W                     
001E5A D???               M         BRA     S8B_END45
001E5C                    M S8B_CHK_7E45:
001E5C 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001E5E 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E60 D???               M         BRA     S8B_CHK_MSB45
001E62 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001E64 EC?? F???          M         CALL    SIO_WRITE_W
001E68 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001E6A EC?? F???          M         CALL    SIO_WRITE_W
001E6E D???               M         BRA     S8B_END45
001E70                    M S8B_CHK_MSB45:
001E70 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001E72 D???               M         BRA     S8B_SEND_NORMAL45
001E74 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001E76 EC?? F???          M         CALL    SIO_WRITE_W
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E7A 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001E7C                    M S8B_SEND_NORMAL45:
001E7C 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001E7E EC?? F???          M         CALL    SIO_WRITE_W     
001E82                    M S8B_END45:
  0000002E                M S8B_LABEL ++
001E82 C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001E86 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001E88 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001E8A 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E8C D???               M         BRA     S8B_CHK_7E46
001E8E EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001E92 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001E94 EC?? F???          M         CALL    SIO_WRITE_W                     
001E98 D???               M         BRA     S8B_END46
001E9A                    M S8B_CHK_7E46:
001E9A 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001E9C 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001E9E D???               M         BRA     S8B_CHK_MSB46
001EA0 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001EA2 EC?? F???          M         CALL    SIO_WRITE_W
001EA6 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001EA8 EC?? F???          M         CALL    SIO_WRITE_W
001EAC D???               M         BRA     S8B_END46
001EAE                    M S8B_CHK_MSB46:
001EAE AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001EB0 D???               M         BRA     S8B_SEND_NORMAL46
001EB2 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001EB4 EC?? F???          M         CALL    SIO_WRITE_W
001EB8 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001EBA                    M S8B_SEND_NORMAL46:
001EBA 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001EBC EC?? F???          M         CALL    SIO_WRITE_W     
001EC0                    M S8B_END46:
  0000002F                M S8B_LABEL ++
001EC0 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_X4, WREG
                          M          SEND_8_BIT_W
001EC4 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001EC6 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001EC8 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001ECA D???               M         BRA     S8B_CHK_7E47
001ECC EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001ED0 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001ED2 EC?? F???          M         CALL    SIO_WRITE_W                     
001ED6 D???               M         BRA     S8B_END47
001ED8                    M S8B_CHK_7E47:
001ED8 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001EDA 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001EDC D???               M         BRA     S8B_CHK_MSB47
001EDE 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001EE0 EC?? F???          M         CALL    SIO_WRITE_W
001EE4 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001EE6 EC?? F???          M         CALL    SIO_WRITE_W
001EEA D???               M         BRA     S8B_END47
001EEC                    M S8B_CHK_MSB47:
001EEC AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001EEE D???               M         BRA     S8B_SEND_NORMAL47
001EF0 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001EF2 EC?? F???          M         CALL    SIO_WRITE_W
001EF6 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001EF8                    M S8B_SEND_NORMAL47:
001EF8 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001EFA EC?? F???          M         CALL    SIO_WRITE_W     
001EFE                    M S8B_END47:
  00000030                M S8B_LABEL ++
                      00356           QS_SEND_BUTTON_TIME BTN_IDX_L4
001EFE C??? FFE8          M          MOVFF  BTN_X0_TIME_T + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001F02 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001F04 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001F06 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F08 D???               M         BRA     S8B_CHK_7E48
001F0A EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001F0E 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001F10 EC?? F???          M         CALL    SIO_WRITE_W                     
001F14 D???               M         BRA     S8B_END48
001F16                    M S8B_CHK_7E48:
001F16 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001F18 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F1A D???               M         BRA     S8B_CHK_MSB48
001F1C 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001F1E EC?? F???          M         CALL    SIO_WRITE_W
001F22 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001F24 EC?? F???          M         CALL    SIO_WRITE_W
001F28 D???               M         BRA     S8B_END48
001F2A                    M S8B_CHK_MSB48:
001F2A AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001F2C D???               M         BRA     S8B_SEND_NORMAL48
001F2E 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001F30 EC?? F???          M         CALL    SIO_WRITE_W
001F34 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001F36                    M S8B_SEND_NORMAL48:
001F36 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001F38 EC?? F???          M         CALL    SIO_WRITE_W     
001F3C                    M S8B_END48:
  00000031                M S8B_LABEL ++
001F3C C??? FFE8          M          MOVFF  BTN_X0_TIME_U + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001F40 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001F42 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001F44 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F46 D???               M         BRA     S8B_CHK_7E49
001F48 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001F4C 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001F4E EC?? F???          M         CALL    SIO_WRITE_W                     
001F52 D???               M         BRA     S8B_END49
001F54                    M S8B_CHK_7E49:
001F54 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001F56 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F58 D???               M         BRA     S8B_CHK_MSB49
001F5A 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001F5C EC?? F???          M         CALL    SIO_WRITE_W
001F60 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001F62 EC?? F???          M         CALL    SIO_WRITE_W
001F66 D???               M         BRA     S8B_END49
001F68                    M S8B_CHK_MSB49:
001F68 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001F6A D???               M         BRA     S8B_SEND_NORMAL49
001F6C 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001F6E EC?? F???          M         CALL    SIO_WRITE_W
001F72 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001F74                    M S8B_SEND_NORMAL49:
001F74 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001F76 EC?? F???          M         CALL    SIO_WRITE_W     
001F7A                    M S8B_END49:
  00000032                M S8B_LABEL ++
001F7A C??? FFE8          M          MOVFF  BTN_X0_TIME_H + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001F7E 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001F80 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001F82 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F84 D???               M         BRA     S8B_CHK_7E50
001F86 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001F8A 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001F8C EC?? F???          M         CALL    SIO_WRITE_W                     
001F90 D???               M         BRA     S8B_END50
001F92                    M S8B_CHK_7E50:
001F92 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001F94 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001F96 D???               M         BRA     S8B_CHK_MSB50
001F98 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001F9A EC?? F???          M         CALL    SIO_WRITE_W
001F9E 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001FA0 EC?? F???          M         CALL    SIO_WRITE_W
001FA4 D???               M         BRA     S8B_END50
001FA6                    M S8B_CHK_MSB50:
001FA6 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001FA8 D???               M         BRA     S8B_SEND_NORMAL50
001FAA 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001FAC EC?? F???          M         CALL    SIO_WRITE_W
001FB0 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001FB2                    M S8B_SEND_NORMAL50:
001FB2 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001FB4 EC?? F???          M         CALL    SIO_WRITE_W     
001FB8                    M S8B_END50:
  00000033                M S8B_LABEL ++
001FB8 C??? FFE8          M          MOVFF  BTN_X0_TIME_L + BTN_IDX_L4, WREG
                          M          SEND_8_BIT_W
001FBC 6E00               M         MOVWF   EIGHTBITSIOBUF, ACCESS
001FBE 0E7F               M         MOVLW   0x7F                            ; sending literal $7F?
001FC0 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001FC2 D???               M         BRA     S8B_CHK_7E51
001FC4 EC?? F???          M         CALL    SIO_WRITE_W                     ; send $7F to escape first
001FC8 0E7F               M         MOVLW   0x7F                            ; then the literal $7F itself.
001FCA EC?? F???          M         CALL    SIO_WRITE_W                     
001FCE D???               M         BRA     S8B_END51
001FD0                    M S8B_CHK_7E51:
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001FD0 0E7E               M         MOVLW   0x7E                            ; sending literal $7E?
001FD2 6200               M         CPFSEQ  EIGHTBITSIOBUF, ACCESS
001FD4 D???               M         BRA     S8B_CHK_MSB51
001FD6 0E7F               M         MOVLW   0x7F                            ; send $7F to escape first
001FD8 EC?? F???          M         CALL    SIO_WRITE_W
001FDC 0E7E               M         MOVLW   0x7E                            ; then the literal $7E itself.
001FDE EC?? F???          M         CALL    SIO_WRITE_W
001FE2 D???               M         BRA     S8B_END51
001FE4                    M S8B_CHK_MSB51:
001FE4 AE00               M         BTFSS   EIGHTBITSIOBUF, 7, ACCESS       ; MSB set?
001FE6 D???               M         BRA     S8B_SEND_NORMAL51
001FE8 0E7E               M         MOVLW   0x7E                            ; send $7E to escape first
001FEA EC?? F???          M         CALL    SIO_WRITE_W
001FEE 9E00               M         BCF     EIGHTBITSIOBUF, 7, ACCESS       ; clear MSB and (fall-thru to) send it.
001FF0                    M S8B_SEND_NORMAL51:
001FF0 5000               M         MOVF    EIGHTBITSIOBUF, W, ACCESS       ; send byte
001FF2 EC?? F???          M         CALL    SIO_WRITE_W     
001FF6                    M S8B_END51:
  00000034                M S8B_LABEL ++
                      00357          ELSE
                      00358           ERROR "Invalid chip selection"
                      00359          ENDIF
                      00360         ENDIF
001FF6 EF?? F???      00361         GOTO    QS_QUERY_DONE
                      00362 
001FFA                00363 QS_QUERY_PING:
001FFA 6A00           00364         CLRF    YY_YY, ACCESS                   ; packet length = 0
001FFC B000           00365         BTFSC   QUIZSHOW_FLAGS, QS_FLAG_SCANNING, ACCESS
001FFE 8C00           00366         BSF     YY_YY, 6, ACCESS                ; 02 packet length+s    <0spppppp>
002000 5000           00367         MOVF    YY_YY, W, ACCESS
002002 EC?? F???      00368         CALL    SIO_WRITE_W
                      00369 
002006                00370 QS_QUERY_DONE:                                  ; Final packet:
002006 0E47           00371         MOVLW   B'01000111'                     ; 0spppppp         p=packet length
002008 1400           00372         ANDWF   YY_YY, W, ACCESS                ; 0s000ppp         s=scanner status
00200A 8AE8           00373         BSF     WREG, 5, ACCESS                 ; 0s100ppp
00200C 86E8           00374         BSF     WREG, 3, ACCESS                 ; 0s101ppp
00200E EC?? F???      00375         CALL    SIO_WRITE_W
                      00376 
002012 8400           00377         BSF     SSR_STATE, DRAIN_TR, ACCESS     ; schedule transmitter shut-down
002014 6A00           00378         CLRF    YY_STATE, ACCESS                ; return to idle state for next command
002016 0012           00379         RETURN
                      00380 
                      00381 
002018                00382 S20_DATA:
002018 2CE8           00383         DECFSZ  WREG, W, ACCESS
00201A D???           00384         BRA     S21_DATA
                      00385         ;
                      00386         ; SET_BUTTON_MASKS first byte received
                      00387         ; Store in YY_YY, wait for second byte.
                      00388         ;
00201C C??? F???      00389         MOVFF   YY_DATA, YY_YY
002020 2A00           00390         INCF    YY_STATE, F, ACCESS     ; -> state 21 (wait for final byte)
002022 0012           00391         RETURN
                      00392 
002024                00393 S21_DATA:
002024 2CE8           00394         DECFSZ  WREG, W, ACCESS
002026 D???           00395         BRA     S22_DATA
                      00396         ;
                      00397         ; S21: QS_SET_BUTTON_MASKS command received.
                      00398         ;
                      00399         ;   ___7______6______5______4______3______2______1______0__
                      00400         ;  |                                  |                    |
                      00401         ;  |                0                 |          7         | YY_COMMAND
                      00402         ;  |______|______|______|______|______|______|______|______|
                      00403         ;  |      |      |      |      |                           |
                      00404         ;  |   0  |   0  |   0  |   0  |             11            | (not saved)
                      00405         ;  |______|______|______|______|______|______|______|______|
                      00406         ;  |      |      | BUTTON MASKS (1=disabled, 0=enabled)    |
                      00407         ;  |   0  |   0  |   A  |   B  |   C  |   D  |   L  |   X  | YY_YY  
                      00408         ;  |______|______|__L2__|__X2__|__L1__|__X1__|__L0__|__X0__|        <-- QSRC
                      00409         ;  |      |      |                                         |
                      00410         ;  |   0  |   1  |   1  |   0  |   0  |   0  |   0  |   0  | YY_DATA
                      00411         ;  |______|______|___0__|___0__|__L4__|__X4__|__L3__|__X3__|        <-- QSRC
                      00412         ;
                      00413         ;
002028 AE00           00414         BTFSS   YY_YY, 7, ACCESS        ; Check postbyte 1 constant 00xxxxxx
00202A BC00           00415         BTFSC   YY_YY, 6, ACCESS
00202C EF?? F???      00416         GOTO    ERR_COMMAND
                      00417 
002030 AE00           00418         BTFSS   YY_DATA, 7, ACCESS      ; Check postbyte 2 constant 01xxxxxx
002032 AC00           00419         BTFSS   YY_DATA, 6, ACCESS
002034 EF?? F???      00420         GOTO    ERR_COMMAND
                      00421 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00422 UPDATE_BTN_MASK MACRO BTN_IDX, SRC, BIT
                      00423          BCF    BTN_X0_FLAGS + BTN_IDX, BTN_FLG_MASKED, BANKED
                      00424          BTFSS  SRC, BIT, ACCESS
                      00425          BSF    BTN_X0_FLAGS + BTN_IDX, BTN_FLG_MASKED, BANKED
                      00426         ENDM
                      00427 
                      00428         IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSCC 
                      00429          MOVLW  B'01100000'             ; Check postbyte 2 constant 01100000
                      00430          CPFSEQ YY_DATA, ACCESS
                      00431          GOTO   ERR_COMMAND
                      00432          ;
                      00433          ;  set button masks
                      00434          ;
                      00435          BANKSEL QUIZSHOW_DATA
                      00436          UPDATE_BTN_MASK BTN_IDX_X0, YY_YY, 0
                      00437          UPDATE_BTN_MASK BTN_IDX_L0, YY_YY, 1
                      00438          UPDATE_BTN_MASK BTN_IDX_A0, YY_YY, 5
                      00439          UPDATE_BTN_MASK BTN_IDX_B0, YY_YY, 4
                      00440          UPDATE_BTN_MASK BTN_IDX_C0, YY_YY, 3
                      00441          UPDATE_BTN_MASK BTN_IDX_D0, YY_YY, 2
                      00442         ELSE
                      00443          IF LUMOS_CHIP_TYPE == LUMOS_CHIP_QSRC
002038 AA00           00444           BTFSS YY_DATA, 5, ACCESS      ; Check postbyte 2 constant xx00xxxx
00203A B800           00445           BTFSC YY_DATA, 4, ACCESS
00203C EF?? F???      00446           GOTO  ERR_COMMAND
                      00447           ;
                      00448           ; set button masks
                      00449           ;
002040 010C           00450           BANKSEL QUIZSHOW_DATA
                      00451           UPDATE_BTN_MASK BTN_IDX_X0, YY_YY, 0
002042 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
002044 A000               M          BTFSS  YY_YY, 0, ACCESS
002046 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X0, BTN_FLG_MASKED, BANKED
                      00452           UPDATE_BTN_MASK BTN_IDX_L0, YY_YY, 1
002048 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
00204A A200               M          BTFSS  YY_YY, 1, ACCESS
00204C 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L0, BTN_FLG_MASKED, BANKED
                      00453           UPDATE_BTN_MASK BTN_IDX_X1, YY_YY, 2
00204E 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_MASKED, BANKED
002050 A400               M          BTFSS  YY_YY, 2, ACCESS
002052 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X1, BTN_FLG_MASKED, BANKED
                      00454           UPDATE_BTN_MASK BTN_IDX_L1, YY_YY, 3
002054 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_MASKED, BANKED
002056 A600               M          BTFSS  YY_YY, 3, ACCESS
002058 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L1, BTN_FLG_MASKED, BANKED
                      00455           UPDATE_BTN_MASK BTN_IDX_X2, YY_YY, 4
00205A 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_MASKED, BANKED
00205C A800               M          BTFSS  YY_YY, 4, ACCESS
00205E 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X2, BTN_FLG_MASKED, BANKED
                      00456           UPDATE_BTN_MASK BTN_IDX_L2, YY_YY, 5
002060 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_MASKED, BANKED
002062 AA00               M          BTFSS  YY_YY, 5, ACCESS
002064 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L2, BTN_FLG_MASKED, BANKED
                      00457           UPDATE_BTN_MASK BTN_IDX_X3, YY_DATA, 0
002066 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_MASKED, BANKED
002068 A000               M          BTFSS  YY_DATA, 0, ACCESS
00206A 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X3, BTN_FLG_MASKED, BANKED
                      00458           UPDATE_BTN_MASK BTN_IDX_L3, YY_DATA, 1
00206C 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_MASKED, BANKED
00206E A200               M          BTFSS  YY_DATA, 1, ACCESS
002070 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L3, BTN_FLG_MASKED, BANKED
                      00459           UPDATE_BTN_MASK BTN_IDX_X4, YY_DATA, 2
002072 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_MASKED, BANKED
002074 A400               M          BTFSS  YY_DATA, 2, ACCESS
002076 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_X4, BTN_FLG_MASKED, BANKED
                      00460           UPDATE_BTN_MASK BTN_IDX_L4, YY_DATA, 3
002078 9300               M          BCF    BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_MASKED, BANKED
00207A A600               M          BTFSS  YY_DATA, 3, ACCESS
00207C 8300               M          BSF    BTN_X0_FLAGS + BTN_IDX_L4, BTN_FLG_MASKED, BANKED
                      00461          ENDIF
                      00462         ENDIF
00207E 6A00           00463         CLRF    YY_STATE, ACCESS
002080 0012           00464         RETURN
                      00465           
002082                00466 S22_DATA:
                      00467         ERR_BUG 0x05, ERR_CLASS_OVERRUN
002082 0E05               M          MOVLW  0x05
002084 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_OVERRUN == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_OVERRUN == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_OVERRUN == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_OVERRUN == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_OVERRUN == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
002086 6A00               M          CLRF   YY_STATE, ACCESS
002088 0012               M          RETURN
                      05115         ELSE
                      05116          ERR_BUG 0x0E, ERR_CLASS_OVERRUN
                      05117         ENDIF
                      05118 
00208A                05119 SSR_OUTPUT_VALUE:
                      05120         ;
                      05121         ; Change an SSR's output value.  This does the same thing
                      05122         ; as SET_SSR_VALUE, except the other one is a macro we can
                      05123         ; only use at runtime with constant SSR IDs (but more efficiently)
                      05124         ; while this works at runtime.
                      05125         ;
                      05126         ; Changes the output value of TARGET_SSR to the W register.
                      05127         ; Uses FSR0 register and KK.
                      05128         ;
00208A 0004           05129         CLRWDT
00208C 9E00           05130         BCF     TARGET_SSR, 7, ACCESS
00208E 9C00           05131         BCF     TARGET_SSR, 6, ACCESS
002090 6E00           05132         MOVWF   KK, ACCESS
002092 EE?? F0??      05133         LFSR    0, SSR_00_VALUE
002096 5000           05134         MOVF    TARGET_SSR, W, ACCESS           ; ssr value -> [ssr0 + target]
002098 26E9           05135         ADDWF   FSR0L, F, ACCESS
00209A C??? FFEF      05136         MOVFF   KK, INDF0
00209E 0E14           05137         MOVLW   SSR_BLOCK_LEN
0020A0 26E9           05138         ADDWF   FSR0L, F, ACCESS
0020A2 6AEF           05139         CLRF    INDF0                           ; clear flags
0020A4 26E9           05140         ADDWF   FSR0L, F, ACCESS
0020A6 6AEF           05141         CLRF    INDF0                           ; clear step
0020A8 26E9           05142         ADDWF   FSR0L, F, ACCESS
0020AA 6AEF           05143         CLRF    INDF0                           ; clear speed
0020AC 26E9           05144         ADDWF   FSR0L, F, ACCESS
0020AE 6AEF           05145         CLRF    INDF0                           ; clear counter
0020B0 0012           05146         RETURN
                      05147         
0020B2                05148 XLATE_SSR_ID:
                      05149         ;
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05150         ; Move YY_DATA -> TARGET_SSR
                      05151         ; setting flag bits as appropriate
                      05152         ;   _______________________________________________________
                      05153         ;  |             |                                         |
                      05154         ;  |             |           Channel ID (0-47)             | YY_DATA
                      05155         ;  |______|______|______|______|______|______|______|______|    |
                      05156         ;  |NOT_MY|INVALI|                                         |    V
                      05157         ;  | _SSR |D_SSR |           Channel ID (0-23)             | TARGET_SSR
                      05158         ;  |______|______|______|______|______|______|______|______|
                      05159         ;
                      05160         ; If INVALID_SSR=1, the ID cannot possibly be right for the device; disregard all other bits
                      05161         ; If NOT_MY_SSR=1, this channel exists on the slave chip; Channel ID has been adjusted to that C
                            PU.
                      05162         ; Else, Channel ID is for this chip and is in range [0,23].
                      05163         ;
0020B2 0004           05164         CLRWDT
0020B4 0E3F           05165         MOVLW   0x3F
0020B6 1400           05166         ANDWF   YY_DATA, W, ACCESS
0020B8 6E00           05167         MOVWF   TARGET_SSR, ACCESS
0020BA 0E17           05168         MOVLW   .23
0020BC 6400           05169         CPFSGT  TARGET_SSR, ACCESS
0020BE 0012           05170         RETURN
                      05171         IF ROLE_MASTER
                      05172          MOVLW  .24
                      05173          SUBWF  TARGET_SSR, F, ACCESS
                      05174          CPFSLT TARGET_SSR, ACCESS
                      05175         ENDIF
0020C0 8C00           05176         BSF     TARGET_SSR, INVALID_SSR, ACCESS
0020C2 8E00           05177         BSF     TARGET_SSR, NOT_MY_SSR, ACCESS
0020C4 0012           05178         RETURN
                      05179 
0020C6                05180 UPDATE_SSR_OUTPUTS:
0020C6 0004           05181         CLRWDT
0020C8 0104           05182         BANKSEL SSR_DATA_BANK
0020CA 9A00           05183         BCF     SSR_STATE, SLICE_UPD, ACCESS
0020CC 5000           05184         MOVF    CUR_SLICE, W, ACCESS    ; is this the last cycle?
0020CE E0??           05185         BZ      UPDATE_MINIMUM_LEVEL
                      05186         ;
                      05187         ; For maximum speed in this tight loop, we save time by 
                      05188         ; unrolling all the tests and output settings into a flat
                      05189         ; instruction sequence (via assembly-time macro) instead of
                      05190         ; using a run-time loop or subroutines to calculate the bits
                      05191         ; and ports for each.  (Like we used to in the previous version.)
                      05192         ;
  00000000            05193 X       SET     0
                      05194         WHILE X <= SSR_MAX
0020D0 6300           05195          CPFSEQ SSR_00_VALUE+0,     BANKED      ; is this SSR set to our slice value?
0020D2 D???           05196          BRA    UPDATE_SSR_SKIP_0
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020D4 848B           05198           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn on SSR
                      05201          ENDIF
0020D6                05202 UPDATE_SSR_SKIP_0:
  00000001            05203 X        ++
0020D6 6300           05195          CPFSEQ SSR_00_VALUE+1,     BANKED      ; is this SSR set to our slice value?
0020D8 D???           05196          BRA    UPDATE_SSR_SKIP_1
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020DA 828B           05198           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn on SSR
                      05201          ENDIF
0020DC                05202 UPDATE_SSR_SKIP_1:
  00000002            05203 X        ++
0020DC 6300           05195          CPFSEQ SSR_00_VALUE+2,     BANKED      ; is this SSR set to our slice value?
0020DE D???           05196          BRA    UPDATE_SSR_SKIP_2
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020E0 808B           05198           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn on SSR
                      05201          ENDIF
0020E2                05202 UPDATE_SSR_SKIP_2:
  00000003            05203 X        ++
0020E2 6300           05195          CPFSEQ SSR_00_VALUE+3,     BANKED      ; is this SSR set to our slice value?
0020E4 D???           05196          BRA    UPDATE_SSR_SKIP_3
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020E6 848D           05198           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn on SSR
                      05201          ENDIF
0020E8                05202 UPDATE_SSR_SKIP_3:
  00000004            05203 X        ++
0020E8 6300           05195          CPFSEQ SSR_00_VALUE+4,     BANKED      ; is this SSR set to our slice value?
0020EA D???           05196          BRA    UPDATE_SSR_SKIP_4
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020EC 8E8A           05198           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn on SSR
                      05201          ENDIF
0020EE                05202 UPDATE_SSR_SKIP_4:
  00000005            05203 X        ++
0020EE 6300           05195          CPFSEQ SSR_00_VALUE+5,     BANKED      ; is this SSR set to our slice value?
0020F0 D???           05196          BRA    UPDATE_SSR_SKIP_5
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020F2 8C8A           05198           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn on SSR
                      05201          ENDIF
0020F4                05202 UPDATE_SSR_SKIP_5:
  00000006            05203 X        ++
0020F4 6300           05195          CPFSEQ SSR_00_VALUE+6,     BANKED      ; is this SSR set to our slice value?
0020F6 D???           05196          BRA    UPDATE_SSR_SKIP_6
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020F8 8A8A           05198           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn on SSR
                      05201          ENDIF
0020FA                05202 UPDATE_SSR_SKIP_6:
  00000007            05203 X        ++
0020FA 6300           05195          CPFSEQ SSR_00_VALUE+7,     BANKED      ; is this SSR set to our slice value?
0020FC D???           05196          BRA    UPDATE_SSR_SKIP_7
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0020FE 888A           05198           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn on SSR
                      05201          ENDIF
002100                05202 UPDATE_SSR_SKIP_7:
  00000008            05203 X        ++
002100 6300           05195          CPFSEQ SSR_00_VALUE+8,     BANKED      ; is this SSR set to our slice value?
002102 D???           05196          BRA    UPDATE_SSR_SKIP_8
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002104 868A           05198           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn on SSR
                      05201          ENDIF
002106                05202 UPDATE_SSR_SKIP_8:
  00000009            05203 X        ++
002106 6300           05195          CPFSEQ SSR_00_VALUE+9,     BANKED      ; is this SSR set to our slice value?
002108 D???           05196          BRA    UPDATE_SSR_SKIP_9
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00210A 848A           05198           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn on SSR
                      05201          ENDIF
00210C                05202 UPDATE_SSR_SKIP_9:
  0000000A            05203 X        ++
00210C 6300           05195          CPFSEQ SSR_00_VALUE+10,    BANKED      ; is this SSR set to our slice value?
00210E D???           05196          BRA    UPDATE_SSR_SKIP_10
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002110 828A           05198           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn on SSR
                      05201          ENDIF
002112                05202 UPDATE_SSR_SKIP_10:
  0000000B            05203 X        ++
002112 6300           05195          CPFSEQ SSR_00_VALUE+11,    BANKED      ; is this SSR set to our slice value?
002114 D???           05196          BRA    UPDATE_SSR_SKIP_11
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002116 808D           05198           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn on SSR
                      05201          ENDIF
002118                05202 UPDATE_SSR_SKIP_11:
  0000000C            05203 X        ++
002118 6300           05195          CPFSEQ SSR_00_VALUE+12,    BANKED      ; is this SSR set to our slice value?
00211A D???           05196          BRA    UPDATE_SSR_SKIP_12
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00211C 8E8C           05198           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn on SSR
                      05201          ENDIF
00211E                05202 UPDATE_SSR_SKIP_12:
  0000000D            05203 X        ++
00211E 6300           05195          CPFSEQ SSR_00_VALUE+13,    BANKED      ; is this SSR set to our slice value?
002120 D???           05196          BRA    UPDATE_SSR_SKIP_13
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002122 8C8C           05198           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn on light
                      05199          ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05200           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn on SSR
                      05201          ENDIF
002124                05202 UPDATE_SSR_SKIP_13:
  0000000E            05203 X        ++
002124 6300           05195          CPFSEQ SSR_00_VALUE+14,    BANKED      ; is this SSR set to our slice value?
002126 D???           05196          BRA    UPDATE_SSR_SKIP_14
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002128 8A8C           05198           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn on SSR
                      05201          ENDIF
00212A                05202 UPDATE_SSR_SKIP_14:
  0000000F            05203 X        ++
00212A 6300           05195          CPFSEQ SSR_00_VALUE+15,    BANKED      ; is this SSR set to our slice value?
00212C D???           05196          BRA    UPDATE_SSR_SKIP_15
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00212E 828D           05198           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn on SSR
                      05201          ENDIF
002130                05202 UPDATE_SSR_SKIP_15:
  00000010            05203 X        ++
002130 6300           05195          CPFSEQ SSR_00_VALUE+16,    BANKED      ; is this SSR set to our slice value?
002132 D???           05196          BRA    UPDATE_SSR_SKIP_16
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002134 808A           05198           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn on SSR
                      05201          ENDIF
002136                05202 UPDATE_SSR_SKIP_16:
  00000011            05203 X        ++
002136 6300           05195          CPFSEQ SSR_00_VALUE+17,    BANKED      ; is this SSR set to our slice value?
002138 D???           05196          BRA    UPDATE_SSR_SKIP_17
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00213A 868C           05198           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn on SSR
                      05201          ENDIF
00213C                05202 UPDATE_SSR_SKIP_17:
  00000012            05203 X        ++
00213C 6300           05195          CPFSEQ SSR_00_VALUE+18,    BANKED      ; is this SSR set to our slice value?
00213E D???           05196          BRA    UPDATE_SSR_SKIP_18
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002140 828C           05198           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn on SSR
                      05201          ENDIF
002142                05202 UPDATE_SSR_SKIP_18:
  00000013            05203 X        ++
002142 6300           05195          CPFSEQ SSR_00_VALUE+19,    BANKED      ; is this SSR set to our slice value?
002144 D???           05196          BRA    UPDATE_SSR_SKIP_19
                      05197          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002146 848C           05198           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn on light
                      05199          ELSE
                      05200           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn on SSR
                      05201          ENDIF
002148                05202 UPDATE_SSR_SKIP_19:
  00000014            05203 X        ++
                      05204         ENDW
002148 0600           05205         DECF    CUR_SLICE, F, ACCESS
00214A 0012           05206         RETURN
                      05207 
00214C                05208 UPDATE_MINIMUM_LEVEL:
                      05209         ;
                      05210         ; turn off every output that isn't set to be fully on
                      05211         ; and handle ramping up/down
                      05212         ;
00214C 0104           05213         BANKSEL SSR_DATA_BANK
00214E 8800           05214         BSF     SSR_STATE2, ALL_OFF, ACCESS     
  00000000            05215 X       SET     0
                      05216         WHILE X <= SSR_MAX
002150 1D00           05217          COMF   SSR_00_VALUE+0,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
002152 E1??           05219          BNZ    UPDATE_MIN_DIMMED_0
                      05220          IF X <= OUTPUT_CHAN_MAX
002154 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002156 D???           05223          BRA    UPDATE_MIN_SKIP_0
                      05224 
002158                05225 UPDATE_MIN_DIMMED_0:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002158 948B           05227           BCF   PLAT_0,     BIT_0,     ACCESS   ; turn off light
                      05228          ELSE
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05229           BSF   PLAT_0,     BIT_0,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+0,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
00215A                05233 UPDATE_MIN_SKIP_0:
                      05234 
00215A AF00           05235          BTFSS  SSR_00_FLAGS+0,     FADE_UP, BANKED
00215C D???           05236          BRA    TRY_DOWN_0
00215E 2F00           05237          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay to next step
002160 D???           05238          BRA    END_FADE_0
002162 C??? F???      05239          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0
002166 5100           05240          MOVF   SSR_00_STEP+0,     W, BANKED
002168 2700           05241          ADDWF  SSR_00_VALUE+0,     F, BANKED
00216A E3??           05242          BNC    END_FADE_0
00216C 6900           05243          SETF   SSR_00_VALUE+0,     BANKED              ; reached max value
00216E 9F00           05244          BCF    SSR_00_FLAGS+0,     FADE_UP, BANKED     ; stop fading
002170 AB00           05245          BTFSS  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
002172 D???           05246          BRA    END_FADE_0
002174 8D00           05247          BSF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   
002176 D???           05248          BRA    END_FADE_0
                      05249 
002178                05250 TRY_DOWN_0:
002178 AD00           05251          BTFSS  SSR_00_FLAGS+0,     FADE_DOWN, BANKED
00217A D???           05252          BRA    END_FADE_0
00217C 2F00           05253          DECFSZ SSR_00_COUNTER+0,     F, BANKED         ; delay
00217E D???           05254          BRA    END_FADE_0
002180 C??? F???      05255          MOVFF  SSR_00_SPEED+0,     SSR_00_COUNTER+0; reset delay
002184 5100           05256          MOVF   SSR_00_STEP+0,     W, BANKED
002186 5F00           05257          SUBWF  SSR_00_VALUE+0,     F, BANKED
002188 E2??           05258          BC     END_FADE_0
00218A 6B00           05259          CLRF   SSR_00_VALUE+0,     BANKED              ; reached min value
00218C 9D00           05260          BCF    SSR_00_FLAGS+0,     FADE_DOWN, BANKED   ; stop fading
00218E BB00           05261          BTFSC  SSR_00_FLAGS+0,     FADE_CYCLE, BANKED  ; cycle back?
002190 8F00           05262          BSF    SSR_00_FLAGS+0,     FADE_UP, BANKED
002192 B900           05263          BTFSC  SSR_00_FLAGS+0,     MAX_OFF_TIME, BANKED; maximizing off-time?
002194 6900           05264          SETF   SSR_00_COUNTER+0,     BANKED
                      05265 
002196                05266 END_FADE_0:
  00000001            05267 X        ++
002196 1D00           05217          COMF   SSR_00_VALUE+1,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
002198 E1??           05219          BNZ    UPDATE_MIN_DIMMED_1
                      05220          IF X <= OUTPUT_CHAN_MAX
00219A 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
00219C D???           05223          BRA    UPDATE_MIN_SKIP_1
                      05224 
00219E                05225 UPDATE_MIN_DIMMED_1:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00219E 928B           05227           BCF   PLAT_1,     BIT_1,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_1,     BIT_1,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+1,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0021A0                05233 UPDATE_MIN_SKIP_1:
                      05234 
0021A0 AF00           05235          BTFSS  SSR_00_FLAGS+1,     FADE_UP, BANKED
0021A2 D???           05236          BRA    TRY_DOWN_1
0021A4 2F00           05237          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay to next step
0021A6 D???           05238          BRA    END_FADE_1
0021A8 C??? F???      05239          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1
0021AC 5100           05240          MOVF   SSR_00_STEP+1,     W, BANKED
0021AE 2700           05241          ADDWF  SSR_00_VALUE+1,     F, BANKED
0021B0 E3??           05242          BNC    END_FADE_1
0021B2 6900           05243          SETF   SSR_00_VALUE+1,     BANKED              ; reached max value
0021B4 9F00           05244          BCF    SSR_00_FLAGS+1,     FADE_UP, BANKED     ; stop fading
0021B6 AB00           05245          BTFSS  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
0021B8 D???           05246          BRA    END_FADE_1
0021BA 8D00           05247          BSF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   
0021BC D???           05248          BRA    END_FADE_1
                      05249 
0021BE                05250 TRY_DOWN_1:
0021BE AD00           05251          BTFSS  SSR_00_FLAGS+1,     FADE_DOWN, BANKED
0021C0 D???           05252          BRA    END_FADE_1
0021C2 2F00           05253          DECFSZ SSR_00_COUNTER+1,     F, BANKED         ; delay
0021C4 D???           05254          BRA    END_FADE_1
0021C6 C??? F???      05255          MOVFF  SSR_00_SPEED+1,     SSR_00_COUNTER+1; reset delay
0021CA 5100           05256          MOVF   SSR_00_STEP+1,     W, BANKED
0021CC 5F00           05257          SUBWF  SSR_00_VALUE+1,     F, BANKED
0021CE E2??           05258          BC     END_FADE_1
0021D0 6B00           05259          CLRF   SSR_00_VALUE+1,     BANKED              ; reached min value
0021D2 9D00           05260          BCF    SSR_00_FLAGS+1,     FADE_DOWN, BANKED   ; stop fading
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0021D4 BB00           05261          BTFSC  SSR_00_FLAGS+1,     FADE_CYCLE, BANKED  ; cycle back?
0021D6 8F00           05262          BSF    SSR_00_FLAGS+1,     FADE_UP, BANKED
0021D8 B900           05263          BTFSC  SSR_00_FLAGS+1,     MAX_OFF_TIME, BANKED; maximizing off-time?
0021DA 6900           05264          SETF   SSR_00_COUNTER+1,     BANKED
                      05265 
0021DC                05266 END_FADE_1:
  00000002            05267 X        ++
0021DC 1D00           05217          COMF   SSR_00_VALUE+2,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
0021DE E1??           05219          BNZ    UPDATE_MIN_DIMMED_2
                      05220          IF X <= OUTPUT_CHAN_MAX
0021E0 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
0021E2 D???           05223          BRA    UPDATE_MIN_SKIP_2
                      05224 
0021E4                05225 UPDATE_MIN_DIMMED_2:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0021E4 908B           05227           BCF   PLAT_2,     BIT_2,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_2,     BIT_2,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+2,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0021E6                05233 UPDATE_MIN_SKIP_2:
                      05234 
0021E6 AF00           05235          BTFSS  SSR_00_FLAGS+2,     FADE_UP, BANKED
0021E8 D???           05236          BRA    TRY_DOWN_2
0021EA 2F00           05237          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay to next step
0021EC D???           05238          BRA    END_FADE_2
0021EE C??? F???      05239          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2
0021F2 5100           05240          MOVF   SSR_00_STEP+2,     W, BANKED
0021F4 2700           05241          ADDWF  SSR_00_VALUE+2,     F, BANKED
0021F6 E3??           05242          BNC    END_FADE_2
0021F8 6900           05243          SETF   SSR_00_VALUE+2,     BANKED              ; reached max value
0021FA 9F00           05244          BCF    SSR_00_FLAGS+2,     FADE_UP, BANKED     ; stop fading
0021FC AB00           05245          BTFSS  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
0021FE D???           05246          BRA    END_FADE_2
002200 8D00           05247          BSF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   
002202 D???           05248          BRA    END_FADE_2
                      05249 
002204                05250 TRY_DOWN_2:
002204 AD00           05251          BTFSS  SSR_00_FLAGS+2,     FADE_DOWN, BANKED
002206 D???           05252          BRA    END_FADE_2
002208 2F00           05253          DECFSZ SSR_00_COUNTER+2,     F, BANKED         ; delay
00220A D???           05254          BRA    END_FADE_2
00220C C??? F???      05255          MOVFF  SSR_00_SPEED+2,     SSR_00_COUNTER+2; reset delay
002210 5100           05256          MOVF   SSR_00_STEP+2,     W, BANKED
002212 5F00           05257          SUBWF  SSR_00_VALUE+2,     F, BANKED
002214 E2??           05258          BC     END_FADE_2
002216 6B00           05259          CLRF   SSR_00_VALUE+2,     BANKED              ; reached min value
002218 9D00           05260          BCF    SSR_00_FLAGS+2,     FADE_DOWN, BANKED   ; stop fading
00221A BB00           05261          BTFSC  SSR_00_FLAGS+2,     FADE_CYCLE, BANKED  ; cycle back?
00221C 8F00           05262          BSF    SSR_00_FLAGS+2,     FADE_UP, BANKED
00221E B900           05263          BTFSC  SSR_00_FLAGS+2,     MAX_OFF_TIME, BANKED; maximizing off-time?
002220 6900           05264          SETF   SSR_00_COUNTER+2,     BANKED
                      05265 
002222                05266 END_FADE_2:
  00000003            05267 X        ++
002222 1D00           05217          COMF   SSR_00_VALUE+3,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
002224 E1??           05219          BNZ    UPDATE_MIN_DIMMED_3
                      05220          IF X <= OUTPUT_CHAN_MAX
002226 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002228 D???           05223          BRA    UPDATE_MIN_SKIP_3
                      05224 
00222A                05225 UPDATE_MIN_DIMMED_3:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00222A 948D           05227           BCF   PLAT_3,     BIT_3,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_3,     BIT_3,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+3,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
00222C                05233 UPDATE_MIN_SKIP_3:
                      05234 
00222C AF00           05235          BTFSS  SSR_00_FLAGS+3,     FADE_UP, BANKED
00222E D???           05236          BRA    TRY_DOWN_3
002230 2F00           05237          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay to next step
002232 D???           05238          BRA    END_FADE_3
002234 C??? F???      05239          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3
002238 5100           05240          MOVF   SSR_00_STEP+3,     W, BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00223A 2700           05241          ADDWF  SSR_00_VALUE+3,     F, BANKED
00223C E3??           05242          BNC    END_FADE_3
00223E 6900           05243          SETF   SSR_00_VALUE+3,     BANKED              ; reached max value
002240 9F00           05244          BCF    SSR_00_FLAGS+3,     FADE_UP, BANKED     ; stop fading
002242 AB00           05245          BTFSS  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
002244 D???           05246          BRA    END_FADE_3
002246 8D00           05247          BSF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   
002248 D???           05248          BRA    END_FADE_3
                      05249 
00224A                05250 TRY_DOWN_3:
00224A AD00           05251          BTFSS  SSR_00_FLAGS+3,     FADE_DOWN, BANKED
00224C D???           05252          BRA    END_FADE_3
00224E 2F00           05253          DECFSZ SSR_00_COUNTER+3,     F, BANKED         ; delay
002250 D???           05254          BRA    END_FADE_3
002252 C??? F???      05255          MOVFF  SSR_00_SPEED+3,     SSR_00_COUNTER+3; reset delay
002256 5100           05256          MOVF   SSR_00_STEP+3,     W, BANKED
002258 5F00           05257          SUBWF  SSR_00_VALUE+3,     F, BANKED
00225A E2??           05258          BC     END_FADE_3
00225C 6B00           05259          CLRF   SSR_00_VALUE+3,     BANKED              ; reached min value
00225E 9D00           05260          BCF    SSR_00_FLAGS+3,     FADE_DOWN, BANKED   ; stop fading
002260 BB00           05261          BTFSC  SSR_00_FLAGS+3,     FADE_CYCLE, BANKED  ; cycle back?
002262 8F00           05262          BSF    SSR_00_FLAGS+3,     FADE_UP, BANKED
002264 B900           05263          BTFSC  SSR_00_FLAGS+3,     MAX_OFF_TIME, BANKED; maximizing off-time?
002266 6900           05264          SETF   SSR_00_COUNTER+3,     BANKED
                      05265 
002268                05266 END_FADE_3:
  00000004            05267 X        ++
002268 1D00           05217          COMF   SSR_00_VALUE+4,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
00226A E1??           05219          BNZ    UPDATE_MIN_DIMMED_4
                      05220          IF X <= OUTPUT_CHAN_MAX
00226C 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
00226E D???           05223          BRA    UPDATE_MIN_SKIP_4
                      05224 
002270                05225 UPDATE_MIN_DIMMED_4:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002270 9E8A           05227           BCF   PLAT_4,     BIT_4,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_4,     BIT_4,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+4,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
002272                05233 UPDATE_MIN_SKIP_4:
                      05234 
002272 AF00           05235          BTFSS  SSR_00_FLAGS+4,     FADE_UP, BANKED
002274 D???           05236          BRA    TRY_DOWN_4
002276 2F00           05237          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay to next step
002278 D???           05238          BRA    END_FADE_4
00227A C??? F???      05239          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4
00227E 5100           05240          MOVF   SSR_00_STEP+4,     W, BANKED
002280 2700           05241          ADDWF  SSR_00_VALUE+4,     F, BANKED
002282 E3??           05242          BNC    END_FADE_4
002284 6900           05243          SETF   SSR_00_VALUE+4,     BANKED              ; reached max value
002286 9F00           05244          BCF    SSR_00_FLAGS+4,     FADE_UP, BANKED     ; stop fading
002288 AB00           05245          BTFSS  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
00228A D???           05246          BRA    END_FADE_4
00228C 8D00           05247          BSF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   
00228E D???           05248          BRA    END_FADE_4
                      05249 
002290                05250 TRY_DOWN_4:
002290 AD00           05251          BTFSS  SSR_00_FLAGS+4,     FADE_DOWN, BANKED
002292 D???           05252          BRA    END_FADE_4
002294 2F00           05253          DECFSZ SSR_00_COUNTER+4,     F, BANKED         ; delay
002296 D???           05254          BRA    END_FADE_4
002298 C??? F???      05255          MOVFF  SSR_00_SPEED+4,     SSR_00_COUNTER+4; reset delay
00229C 5100           05256          MOVF   SSR_00_STEP+4,     W, BANKED
00229E 5F00           05257          SUBWF  SSR_00_VALUE+4,     F, BANKED
0022A0 E2??           05258          BC     END_FADE_4
0022A2 6B00           05259          CLRF   SSR_00_VALUE+4,     BANKED              ; reached min value
0022A4 9D00           05260          BCF    SSR_00_FLAGS+4,     FADE_DOWN, BANKED   ; stop fading
0022A6 BB00           05261          BTFSC  SSR_00_FLAGS+4,     FADE_CYCLE, BANKED  ; cycle back?
0022A8 8F00           05262          BSF    SSR_00_FLAGS+4,     FADE_UP, BANKED
0022AA B900           05263          BTFSC  SSR_00_FLAGS+4,     MAX_OFF_TIME, BANKED; maximizing off-time?
0022AC 6900           05264          SETF   SSR_00_COUNTER+4,     BANKED
                      05265 
0022AE                05266 END_FADE_4:
  00000005            05267 X        ++
0022AE 1D00           05217          COMF   SSR_00_VALUE+5,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
0022B0 E1??           05219          BNZ    UPDATE_MIN_DIMMED_5
                      05220          IF X <= OUTPUT_CHAN_MAX
0022B2 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                             flag.
                      05222          ENDIF
0022B4 D???           05223          BRA    UPDATE_MIN_SKIP_5
                      05224 
0022B6                05225 UPDATE_MIN_DIMMED_5:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0022B6 9C8A           05227           BCF   PLAT_5,     BIT_5,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_5,     BIT_5,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+5,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0022B8                05233 UPDATE_MIN_SKIP_5:
                      05234 
0022B8 AF00           05235          BTFSS  SSR_00_FLAGS+5,     FADE_UP, BANKED
0022BA D???           05236          BRA    TRY_DOWN_5
0022BC 2F00           05237          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay to next step
0022BE D???           05238          BRA    END_FADE_5
0022C0 C??? F???      05239          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5
0022C4 5100           05240          MOVF   SSR_00_STEP+5,     W, BANKED
0022C6 2700           05241          ADDWF  SSR_00_VALUE+5,     F, BANKED
0022C8 E3??           05242          BNC    END_FADE_5
0022CA 6900           05243          SETF   SSR_00_VALUE+5,     BANKED              ; reached max value
0022CC 9F00           05244          BCF    SSR_00_FLAGS+5,     FADE_UP, BANKED     ; stop fading
0022CE AB00           05245          BTFSS  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
0022D0 D???           05246          BRA    END_FADE_5
0022D2 8D00           05247          BSF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   
0022D4 D???           05248          BRA    END_FADE_5
                      05249 
0022D6                05250 TRY_DOWN_5:
0022D6 AD00           05251          BTFSS  SSR_00_FLAGS+5,     FADE_DOWN, BANKED
0022D8 D???           05252          BRA    END_FADE_5
0022DA 2F00           05253          DECFSZ SSR_00_COUNTER+5,     F, BANKED         ; delay
0022DC D???           05254          BRA    END_FADE_5
0022DE C??? F???      05255          MOVFF  SSR_00_SPEED+5,     SSR_00_COUNTER+5; reset delay
0022E2 5100           05256          MOVF   SSR_00_STEP+5,     W, BANKED
0022E4 5F00           05257          SUBWF  SSR_00_VALUE+5,     F, BANKED
0022E6 E2??           05258          BC     END_FADE_5
0022E8 6B00           05259          CLRF   SSR_00_VALUE+5,     BANKED              ; reached min value
0022EA 9D00           05260          BCF    SSR_00_FLAGS+5,     FADE_DOWN, BANKED   ; stop fading
0022EC BB00           05261          BTFSC  SSR_00_FLAGS+5,     FADE_CYCLE, BANKED  ; cycle back?
0022EE 8F00           05262          BSF    SSR_00_FLAGS+5,     FADE_UP, BANKED
0022F0 B900           05263          BTFSC  SSR_00_FLAGS+5,     MAX_OFF_TIME, BANKED; maximizing off-time?
0022F2 6900           05264          SETF   SSR_00_COUNTER+5,     BANKED
                      05265 
0022F4                05266 END_FADE_5:
  00000006            05267 X        ++
0022F4 1D00           05217          COMF   SSR_00_VALUE+6,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
0022F6 E1??           05219          BNZ    UPDATE_MIN_DIMMED_6
                      05220          IF X <= OUTPUT_CHAN_MAX
0022F8 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
0022FA D???           05223          BRA    UPDATE_MIN_SKIP_6
                      05224 
0022FC                05225 UPDATE_MIN_DIMMED_6:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0022FC 9A8A           05227           BCF   PLAT_6,     BIT_6,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_6,     BIT_6,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+6,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0022FE                05233 UPDATE_MIN_SKIP_6:
                      05234 
0022FE AF00           05235          BTFSS  SSR_00_FLAGS+6,     FADE_UP, BANKED
002300 D???           05236          BRA    TRY_DOWN_6
002302 2F00           05237          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay to next step
002304 D???           05238          BRA    END_FADE_6
002306 C??? F???      05239          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6
00230A 5100           05240          MOVF   SSR_00_STEP+6,     W, BANKED
00230C 2700           05241          ADDWF  SSR_00_VALUE+6,     F, BANKED
00230E E3??           05242          BNC    END_FADE_6
002310 6900           05243          SETF   SSR_00_VALUE+6,     BANKED              ; reached max value
002312 9F00           05244          BCF    SSR_00_FLAGS+6,     FADE_UP, BANKED     ; stop fading
002314 AB00           05245          BTFSS  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
002316 D???           05246          BRA    END_FADE_6
002318 8D00           05247          BSF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   
00231A D???           05248          BRA    END_FADE_6
                      05249 
00231C                05250 TRY_DOWN_6:
00231C AD00           05251          BTFSS  SSR_00_FLAGS+6,     FADE_DOWN, BANKED
00231E D???           05252          BRA    END_FADE_6
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002320 2F00           05253          DECFSZ SSR_00_COUNTER+6,     F, BANKED         ; delay
002322 D???           05254          BRA    END_FADE_6
002324 C??? F???      05255          MOVFF  SSR_00_SPEED+6,     SSR_00_COUNTER+6; reset delay
002328 5100           05256          MOVF   SSR_00_STEP+6,     W, BANKED
00232A 5F00           05257          SUBWF  SSR_00_VALUE+6,     F, BANKED
00232C E2??           05258          BC     END_FADE_6
00232E 6B00           05259          CLRF   SSR_00_VALUE+6,     BANKED              ; reached min value
002330 9D00           05260          BCF    SSR_00_FLAGS+6,     FADE_DOWN, BANKED   ; stop fading
002332 BB00           05261          BTFSC  SSR_00_FLAGS+6,     FADE_CYCLE, BANKED  ; cycle back?
002334 8F00           05262          BSF    SSR_00_FLAGS+6,     FADE_UP, BANKED
002336 B900           05263          BTFSC  SSR_00_FLAGS+6,     MAX_OFF_TIME, BANKED; maximizing off-time?
002338 6900           05264          SETF   SSR_00_COUNTER+6,     BANKED
                      05265 
00233A                05266 END_FADE_6:
  00000007            05267 X        ++
00233A 1D00           05217          COMF   SSR_00_VALUE+7,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
00233C E1??           05219          BNZ    UPDATE_MIN_DIMMED_7
                      05220          IF X <= OUTPUT_CHAN_MAX
00233E 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002340 D???           05223          BRA    UPDATE_MIN_SKIP_7
                      05224 
002342                05225 UPDATE_MIN_DIMMED_7:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002342 988A           05227           BCF   PLAT_7,     BIT_7,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_7,     BIT_7,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+7,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
002344                05233 UPDATE_MIN_SKIP_7:
                      05234 
002344 AF00           05235          BTFSS  SSR_00_FLAGS+7,     FADE_UP, BANKED
002346 D???           05236          BRA    TRY_DOWN_7
002348 2F00           05237          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay to next step
00234A D???           05238          BRA    END_FADE_7
00234C C??? F???      05239          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7
002350 5100           05240          MOVF   SSR_00_STEP+7,     W, BANKED
002352 2700           05241          ADDWF  SSR_00_VALUE+7,     F, BANKED
002354 E3??           05242          BNC    END_FADE_7
002356 6900           05243          SETF   SSR_00_VALUE+7,     BANKED              ; reached max value
002358 9F00           05244          BCF    SSR_00_FLAGS+7,     FADE_UP, BANKED     ; stop fading
00235A AB00           05245          BTFSS  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
00235C D???           05246          BRA    END_FADE_7
00235E 8D00           05247          BSF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   
002360 D???           05248          BRA    END_FADE_7
                      05249 
002362                05250 TRY_DOWN_7:
002362 AD00           05251          BTFSS  SSR_00_FLAGS+7,     FADE_DOWN, BANKED
002364 D???           05252          BRA    END_FADE_7
002366 2F00           05253          DECFSZ SSR_00_COUNTER+7,     F, BANKED         ; delay
002368 D???           05254          BRA    END_FADE_7
00236A C??? F???      05255          MOVFF  SSR_00_SPEED+7,     SSR_00_COUNTER+7; reset delay
00236E 5100           05256          MOVF   SSR_00_STEP+7,     W, BANKED
002370 5F00           05257          SUBWF  SSR_00_VALUE+7,     F, BANKED
002372 E2??           05258          BC     END_FADE_7
002374 6B00           05259          CLRF   SSR_00_VALUE+7,     BANKED              ; reached min value
002376 9D00           05260          BCF    SSR_00_FLAGS+7,     FADE_DOWN, BANKED   ; stop fading
002378 BB00           05261          BTFSC  SSR_00_FLAGS+7,     FADE_CYCLE, BANKED  ; cycle back?
00237A 8F00           05262          BSF    SSR_00_FLAGS+7,     FADE_UP, BANKED
00237C B900           05263          BTFSC  SSR_00_FLAGS+7,     MAX_OFF_TIME, BANKED; maximizing off-time?
00237E 6900           05264          SETF   SSR_00_COUNTER+7,     BANKED
                      05265 
002380                05266 END_FADE_7:
  00000008            05267 X        ++
002380 1D00           05217          COMF   SSR_00_VALUE+8,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
002382 E1??           05219          BNZ    UPDATE_MIN_DIMMED_8
                      05220          IF X <= OUTPUT_CHAN_MAX
002384 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002386 D???           05223          BRA    UPDATE_MIN_SKIP_8
                      05224 
002388                05225 UPDATE_MIN_DIMMED_8:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002388 968A           05227           BCF   PLAT_8,     BIT_8,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_8,     BIT_8,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+8,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00238A                05233 UPDATE_MIN_SKIP_8:
                      05234 
00238A AF00           05235          BTFSS  SSR_00_FLAGS+8,     FADE_UP, BANKED
00238C D???           05236          BRA    TRY_DOWN_8
00238E 2F00           05237          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay to next step
002390 D???           05238          BRA    END_FADE_8
002392 C??? F???      05239          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8
002396 5100           05240          MOVF   SSR_00_STEP+8,     W, BANKED
002398 2700           05241          ADDWF  SSR_00_VALUE+8,     F, BANKED
00239A E3??           05242          BNC    END_FADE_8
00239C 6900           05243          SETF   SSR_00_VALUE+8,     BANKED              ; reached max value
00239E 9F00           05244          BCF    SSR_00_FLAGS+8,     FADE_UP, BANKED     ; stop fading
0023A0 AB00           05245          BTFSS  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
0023A2 D???           05246          BRA    END_FADE_8
0023A4 8D00           05247          BSF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   
0023A6 D???           05248          BRA    END_FADE_8
                      05249 
0023A8                05250 TRY_DOWN_8:
0023A8 AD00           05251          BTFSS  SSR_00_FLAGS+8,     FADE_DOWN, BANKED
0023AA D???           05252          BRA    END_FADE_8
0023AC 2F00           05253          DECFSZ SSR_00_COUNTER+8,     F, BANKED         ; delay
0023AE D???           05254          BRA    END_FADE_8
0023B0 C??? F???      05255          MOVFF  SSR_00_SPEED+8,     SSR_00_COUNTER+8; reset delay
0023B4 5100           05256          MOVF   SSR_00_STEP+8,     W, BANKED
0023B6 5F00           05257          SUBWF  SSR_00_VALUE+8,     F, BANKED
0023B8 E2??           05258          BC     END_FADE_8
0023BA 6B00           05259          CLRF   SSR_00_VALUE+8,     BANKED              ; reached min value
0023BC 9D00           05260          BCF    SSR_00_FLAGS+8,     FADE_DOWN, BANKED   ; stop fading
0023BE BB00           05261          BTFSC  SSR_00_FLAGS+8,     FADE_CYCLE, BANKED  ; cycle back?
0023C0 8F00           05262          BSF    SSR_00_FLAGS+8,     FADE_UP, BANKED
0023C2 B900           05263          BTFSC  SSR_00_FLAGS+8,     MAX_OFF_TIME, BANKED; maximizing off-time?
0023C4 6900           05264          SETF   SSR_00_COUNTER+8,     BANKED
                      05265 
0023C6                05266 END_FADE_8:
  00000009            05267 X        ++
0023C6 1D00           05217          COMF   SSR_00_VALUE+9,     W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
0023C8 E1??           05219          BNZ    UPDATE_MIN_DIMMED_9
                      05220          IF X <= OUTPUT_CHAN_MAX
0023CA 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
0023CC D???           05223          BRA    UPDATE_MIN_SKIP_9
                      05224 
0023CE                05225 UPDATE_MIN_DIMMED_9:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0023CE 948A           05227           BCF   PLAT_9,     BIT_9,     ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_9,     BIT_9,     ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+9,     BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0023D0                05233 UPDATE_MIN_SKIP_9:
                      05234 
0023D0 AF00           05235          BTFSS  SSR_00_FLAGS+9,     FADE_UP, BANKED
0023D2 D???           05236          BRA    TRY_DOWN_9
0023D4 2F00           05237          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay to next step
0023D6 D???           05238          BRA    END_FADE_9
0023D8 C??? F???      05239          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9
0023DC 5100           05240          MOVF   SSR_00_STEP+9,     W, BANKED
0023DE 2700           05241          ADDWF  SSR_00_VALUE+9,     F, BANKED
0023E0 E3??           05242          BNC    END_FADE_9
0023E2 6900           05243          SETF   SSR_00_VALUE+9,     BANKED              ; reached max value
0023E4 9F00           05244          BCF    SSR_00_FLAGS+9,     FADE_UP, BANKED     ; stop fading
0023E6 AB00           05245          BTFSS  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
0023E8 D???           05246          BRA    END_FADE_9
0023EA 8D00           05247          BSF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   
0023EC D???           05248          BRA    END_FADE_9
                      05249 
0023EE                05250 TRY_DOWN_9:
0023EE AD00           05251          BTFSS  SSR_00_FLAGS+9,     FADE_DOWN, BANKED
0023F0 D???           05252          BRA    END_FADE_9
0023F2 2F00           05253          DECFSZ SSR_00_COUNTER+9,     F, BANKED         ; delay
0023F4 D???           05254          BRA    END_FADE_9
0023F6 C??? F???      05255          MOVFF  SSR_00_SPEED+9,     SSR_00_COUNTER+9; reset delay
0023FA 5100           05256          MOVF   SSR_00_STEP+9,     W, BANKED
0023FC 5F00           05257          SUBWF  SSR_00_VALUE+9,     F, BANKED
0023FE E2??           05258          BC     END_FADE_9
002400 6B00           05259          CLRF   SSR_00_VALUE+9,     BANKED              ; reached min value
002402 9D00           05260          BCF    SSR_00_FLAGS+9,     FADE_DOWN, BANKED   ; stop fading
002404 BB00           05261          BTFSC  SSR_00_FLAGS+9,     FADE_CYCLE, BANKED  ; cycle back?
002406 8F00           05262          BSF    SSR_00_FLAGS+9,     FADE_UP, BANKED
002408 B900           05263          BTFSC  SSR_00_FLAGS+9,     MAX_OFF_TIME, BANKED; maximizing off-time?
00240A 6900           05264          SETF   SSR_00_COUNTER+9,     BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05265 
00240C                05266 END_FADE_9:
  0000000A            05267 X        ++
00240C 1D00           05217          COMF   SSR_00_VALUE+10,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
00240E E1??           05219          BNZ    UPDATE_MIN_DIMMED_10
                      05220          IF X <= OUTPUT_CHAN_MAX
002410 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002412 D???           05223          BRA    UPDATE_MIN_SKIP_10
                      05224 
002414                05225 UPDATE_MIN_DIMMED_10:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002414 928A           05227           BCF   PLAT_10,    BIT_10,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_10,    BIT_10,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+10,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
002416                05233 UPDATE_MIN_SKIP_10:
                      05234 
002416 AF00           05235          BTFSS  SSR_00_FLAGS+10,    FADE_UP, BANKED
002418 D???           05236          BRA    TRY_DOWN_10
00241A 2F00           05237          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay to next step
00241C D???           05238          BRA    END_FADE_10
00241E C??? F???      05239          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10
002422 5100           05240          MOVF   SSR_00_STEP+10,    W, BANKED
002424 2700           05241          ADDWF  SSR_00_VALUE+10,    F, BANKED
002426 E3??           05242          BNC    END_FADE_10
002428 6900           05243          SETF   SSR_00_VALUE+10,    BANKED              ; reached max value
00242A 9F00           05244          BCF    SSR_00_FLAGS+10,    FADE_UP, BANKED     ; stop fading
00242C AB00           05245          BTFSS  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
00242E D???           05246          BRA    END_FADE_10
002430 8D00           05247          BSF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   
002432 D???           05248          BRA    END_FADE_10
                      05249 
002434                05250 TRY_DOWN_10:
002434 AD00           05251          BTFSS  SSR_00_FLAGS+10,    FADE_DOWN, BANKED
002436 D???           05252          BRA    END_FADE_10
002438 2F00           05253          DECFSZ SSR_00_COUNTER+10,    F, BANKED         ; delay
00243A D???           05254          BRA    END_FADE_10
00243C C??? F???      05255          MOVFF  SSR_00_SPEED+10,    SSR_00_COUNTER+10; reset delay
002440 5100           05256          MOVF   SSR_00_STEP+10,    W, BANKED
002442 5F00           05257          SUBWF  SSR_00_VALUE+10,    F, BANKED
002444 E2??           05258          BC     END_FADE_10
002446 6B00           05259          CLRF   SSR_00_VALUE+10,    BANKED              ; reached min value
002448 9D00           05260          BCF    SSR_00_FLAGS+10,    FADE_DOWN, BANKED   ; stop fading
00244A BB00           05261          BTFSC  SSR_00_FLAGS+10,    FADE_CYCLE, BANKED  ; cycle back?
00244C 8F00           05262          BSF    SSR_00_FLAGS+10,    FADE_UP, BANKED
00244E B900           05263          BTFSC  SSR_00_FLAGS+10,    MAX_OFF_TIME, BANKED; maximizing off-time?
002450 6900           05264          SETF   SSR_00_COUNTER+10,    BANKED
                      05265 
002452                05266 END_FADE_10:
  0000000B            05267 X        ++
002452 1D00           05217          COMF   SSR_00_VALUE+11,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
002454 E1??           05219          BNZ    UPDATE_MIN_DIMMED_11
                      05220          IF X <= OUTPUT_CHAN_MAX
002456 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002458 D???           05223          BRA    UPDATE_MIN_SKIP_11
                      05224 
00245A                05225 UPDATE_MIN_DIMMED_11:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00245A 908D           05227           BCF   PLAT_11,    BIT_11,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_11,    BIT_11,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+11,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
00245C                05233 UPDATE_MIN_SKIP_11:
                      05234 
00245C AF00           05235          BTFSS  SSR_00_FLAGS+11,    FADE_UP, BANKED
00245E D???           05236          BRA    TRY_DOWN_11
002460 2F00           05237          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay to next step
002462 D???           05238          BRA    END_FADE_11
002464 C??? F???      05239          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11
002468 5100           05240          MOVF   SSR_00_STEP+11,    W, BANKED
00246A 2700           05241          ADDWF  SSR_00_VALUE+11,    F, BANKED
00246C E3??           05242          BNC    END_FADE_11
00246E 6900           05243          SETF   SSR_00_VALUE+11,    BANKED              ; reached max value
002470 9F00           05244          BCF    SSR_00_FLAGS+11,    FADE_UP, BANKED     ; stop fading
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002472 AB00           05245          BTFSS  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
002474 D???           05246          BRA    END_FADE_11
002476 8D00           05247          BSF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   
002478 D???           05248          BRA    END_FADE_11
                      05249 
00247A                05250 TRY_DOWN_11:
00247A AD00           05251          BTFSS  SSR_00_FLAGS+11,    FADE_DOWN, BANKED
00247C D???           05252          BRA    END_FADE_11
00247E 2F00           05253          DECFSZ SSR_00_COUNTER+11,    F, BANKED         ; delay
002480 D???           05254          BRA    END_FADE_11
002482 C??? F???      05255          MOVFF  SSR_00_SPEED+11,    SSR_00_COUNTER+11; reset delay
002486 5100           05256          MOVF   SSR_00_STEP+11,    W, BANKED
002488 5F00           05257          SUBWF  SSR_00_VALUE+11,    F, BANKED
00248A E2??           05258          BC     END_FADE_11
00248C 6B00           05259          CLRF   SSR_00_VALUE+11,    BANKED              ; reached min value
00248E 9D00           05260          BCF    SSR_00_FLAGS+11,    FADE_DOWN, BANKED   ; stop fading
002490 BB00           05261          BTFSC  SSR_00_FLAGS+11,    FADE_CYCLE, BANKED  ; cycle back?
002492 8F00           05262          BSF    SSR_00_FLAGS+11,    FADE_UP, BANKED
002494 B900           05263          BTFSC  SSR_00_FLAGS+11,    MAX_OFF_TIME, BANKED; maximizing off-time?
002496 6900           05264          SETF   SSR_00_COUNTER+11,    BANKED
                      05265 
002498                05266 END_FADE_11:
  0000000C            05267 X        ++
002498 1D00           05217          COMF   SSR_00_VALUE+12,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
00249A E1??           05219          BNZ    UPDATE_MIN_DIMMED_12
                      05220          IF X <= OUTPUT_CHAN_MAX
00249C 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
00249E D???           05223          BRA    UPDATE_MIN_SKIP_12
                      05224 
0024A0                05225 UPDATE_MIN_DIMMED_12:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0024A0 9E8C           05227           BCF   PLAT_12,    BIT_12,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_12,    BIT_12,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+12,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0024A2                05233 UPDATE_MIN_SKIP_12:
                      05234 
0024A2 AF00           05235          BTFSS  SSR_00_FLAGS+12,    FADE_UP, BANKED
0024A4 D???           05236          BRA    TRY_DOWN_12
0024A6 2F00           05237          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay to next step
0024A8 D???           05238          BRA    END_FADE_12
0024AA C??? F???      05239          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12
0024AE 5100           05240          MOVF   SSR_00_STEP+12,    W, BANKED
0024B0 2700           05241          ADDWF  SSR_00_VALUE+12,    F, BANKED
0024B2 E3??           05242          BNC    END_FADE_12
0024B4 6900           05243          SETF   SSR_00_VALUE+12,    BANKED              ; reached max value
0024B6 9F00           05244          BCF    SSR_00_FLAGS+12,    FADE_UP, BANKED     ; stop fading
0024B8 AB00           05245          BTFSS  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
0024BA D???           05246          BRA    END_FADE_12
0024BC 8D00           05247          BSF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   
0024BE D???           05248          BRA    END_FADE_12
                      05249 
0024C0                05250 TRY_DOWN_12:
0024C0 AD00           05251          BTFSS  SSR_00_FLAGS+12,    FADE_DOWN, BANKED
0024C2 D???           05252          BRA    END_FADE_12
0024C4 2F00           05253          DECFSZ SSR_00_COUNTER+12,    F, BANKED         ; delay
0024C6 D???           05254          BRA    END_FADE_12
0024C8 C??? F???      05255          MOVFF  SSR_00_SPEED+12,    SSR_00_COUNTER+12; reset delay
0024CC 5100           05256          MOVF   SSR_00_STEP+12,    W, BANKED
0024CE 5F00           05257          SUBWF  SSR_00_VALUE+12,    F, BANKED
0024D0 E2??           05258          BC     END_FADE_12
0024D2 6B00           05259          CLRF   SSR_00_VALUE+12,    BANKED              ; reached min value
0024D4 9D00           05260          BCF    SSR_00_FLAGS+12,    FADE_DOWN, BANKED   ; stop fading
0024D6 BB00           05261          BTFSC  SSR_00_FLAGS+12,    FADE_CYCLE, BANKED  ; cycle back?
0024D8 8F00           05262          BSF    SSR_00_FLAGS+12,    FADE_UP, BANKED
0024DA B900           05263          BTFSC  SSR_00_FLAGS+12,    MAX_OFF_TIME, BANKED; maximizing off-time?
0024DC 6900           05264          SETF   SSR_00_COUNTER+12,    BANKED
                      05265 
0024DE                05266 END_FADE_12:
  0000000D            05267 X        ++
0024DE 1D00           05217          COMF   SSR_00_VALUE+13,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
0024E0 E1??           05219          BNZ    UPDATE_MIN_DIMMED_13
                      05220          IF X <= OUTPUT_CHAN_MAX
0024E2 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
0024E4 D???           05223          BRA    UPDATE_MIN_SKIP_13
                      05224 
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0024E6                05225 UPDATE_MIN_DIMMED_13:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0024E6 9C8C           05227           BCF   PLAT_13,    BIT_13,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_13,    BIT_13,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+13,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0024E8                05233 UPDATE_MIN_SKIP_13:
                      05234 
0024E8 AF00           05235          BTFSS  SSR_00_FLAGS+13,    FADE_UP, BANKED
0024EA D???           05236          BRA    TRY_DOWN_13
0024EC 2F00           05237          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay to next step
0024EE D???           05238          BRA    END_FADE_13
0024F0 C??? F???      05239          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13
0024F4 5100           05240          MOVF   SSR_00_STEP+13,    W, BANKED
0024F6 2700           05241          ADDWF  SSR_00_VALUE+13,    F, BANKED
0024F8 E3??           05242          BNC    END_FADE_13
0024FA 6900           05243          SETF   SSR_00_VALUE+13,    BANKED              ; reached max value
0024FC 9F00           05244          BCF    SSR_00_FLAGS+13,    FADE_UP, BANKED     ; stop fading
0024FE AB00           05245          BTFSS  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
002500 D???           05246          BRA    END_FADE_13
002502 8D00           05247          BSF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   
002504 D???           05248          BRA    END_FADE_13
                      05249 
002506                05250 TRY_DOWN_13:
002506 AD00           05251          BTFSS  SSR_00_FLAGS+13,    FADE_DOWN, BANKED
002508 D???           05252          BRA    END_FADE_13
00250A 2F00           05253          DECFSZ SSR_00_COUNTER+13,    F, BANKED         ; delay
00250C D???           05254          BRA    END_FADE_13
00250E C??? F???      05255          MOVFF  SSR_00_SPEED+13,    SSR_00_COUNTER+13; reset delay
002512 5100           05256          MOVF   SSR_00_STEP+13,    W, BANKED
002514 5F00           05257          SUBWF  SSR_00_VALUE+13,    F, BANKED
002516 E2??           05258          BC     END_FADE_13
002518 6B00           05259          CLRF   SSR_00_VALUE+13,    BANKED              ; reached min value
00251A 9D00           05260          BCF    SSR_00_FLAGS+13,    FADE_DOWN, BANKED   ; stop fading
00251C BB00           05261          BTFSC  SSR_00_FLAGS+13,    FADE_CYCLE, BANKED  ; cycle back?
00251E 8F00           05262          BSF    SSR_00_FLAGS+13,    FADE_UP, BANKED
002520 B900           05263          BTFSC  SSR_00_FLAGS+13,    MAX_OFF_TIME, BANKED; maximizing off-time?
002522 6900           05264          SETF   SSR_00_COUNTER+13,    BANKED
                      05265 
002524                05266 END_FADE_13:
  0000000E            05267 X        ++
002524 1D00           05217          COMF   SSR_00_VALUE+14,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
002526 E1??           05219          BNZ    UPDATE_MIN_DIMMED_14
                      05220          IF X <= OUTPUT_CHAN_MAX
002528 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
00252A D???           05223          BRA    UPDATE_MIN_SKIP_14
                      05224 
00252C                05225 UPDATE_MIN_DIMMED_14:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00252C 9A8C           05227           BCF   PLAT_14,    BIT_14,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_14,    BIT_14,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+14,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
00252E                05233 UPDATE_MIN_SKIP_14:
                      05234 
00252E AF00           05235          BTFSS  SSR_00_FLAGS+14,    FADE_UP, BANKED
002530 D???           05236          BRA    TRY_DOWN_14
002532 2F00           05237          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay to next step
002534 D???           05238          BRA    END_FADE_14
002536 C??? F???      05239          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14
00253A 5100           05240          MOVF   SSR_00_STEP+14,    W, BANKED
00253C 2700           05241          ADDWF  SSR_00_VALUE+14,    F, BANKED
00253E E3??           05242          BNC    END_FADE_14
002540 6900           05243          SETF   SSR_00_VALUE+14,    BANKED              ; reached max value
002542 9F00           05244          BCF    SSR_00_FLAGS+14,    FADE_UP, BANKED     ; stop fading
002544 AB00           05245          BTFSS  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
002546 D???           05246          BRA    END_FADE_14
002548 8D00           05247          BSF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   
00254A D???           05248          BRA    END_FADE_14
                      05249 
00254C                05250 TRY_DOWN_14:
00254C AD00           05251          BTFSS  SSR_00_FLAGS+14,    FADE_DOWN, BANKED
00254E D???           05252          BRA    END_FADE_14
002550 2F00           05253          DECFSZ SSR_00_COUNTER+14,    F, BANKED         ; delay
002552 D???           05254          BRA    END_FADE_14
002554 C??? F???      05255          MOVFF  SSR_00_SPEED+14,    SSR_00_COUNTER+14; reset delay
002558 5100           05256          MOVF   SSR_00_STEP+14,    W, BANKED
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00255A 5F00           05257          SUBWF  SSR_00_VALUE+14,    F, BANKED
00255C E2??           05258          BC     END_FADE_14
00255E 6B00           05259          CLRF   SSR_00_VALUE+14,    BANKED              ; reached min value
002560 9D00           05260          BCF    SSR_00_FLAGS+14,    FADE_DOWN, BANKED   ; stop fading
002562 BB00           05261          BTFSC  SSR_00_FLAGS+14,    FADE_CYCLE, BANKED  ; cycle back?
002564 8F00           05262          BSF    SSR_00_FLAGS+14,    FADE_UP, BANKED
002566 B900           05263          BTFSC  SSR_00_FLAGS+14,    MAX_OFF_TIME, BANKED; maximizing off-time?
002568 6900           05264          SETF   SSR_00_COUNTER+14,    BANKED
                      05265 
00256A                05266 END_FADE_14:
  0000000F            05267 X        ++
00256A 1D00           05217          COMF   SSR_00_VALUE+15,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
00256C E1??           05219          BNZ    UPDATE_MIN_DIMMED_15
                      05220          IF X <= OUTPUT_CHAN_MAX
00256E 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002570 D???           05223          BRA    UPDATE_MIN_SKIP_15
                      05224 
002572                05225 UPDATE_MIN_DIMMED_15:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002572 928D           05227           BCF   PLAT_15,    BIT_15,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_15,    BIT_15,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+15,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
002574                05233 UPDATE_MIN_SKIP_15:
                      05234 
002574 AF00           05235          BTFSS  SSR_00_FLAGS+15,    FADE_UP, BANKED
002576 D???           05236          BRA    TRY_DOWN_15
002578 2F00           05237          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay to next step
00257A D???           05238          BRA    END_FADE_15
00257C C??? F???      05239          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15
002580 5100           05240          MOVF   SSR_00_STEP+15,    W, BANKED
002582 2700           05241          ADDWF  SSR_00_VALUE+15,    F, BANKED
002584 E3??           05242          BNC    END_FADE_15
002586 6900           05243          SETF   SSR_00_VALUE+15,    BANKED              ; reached max value
002588 9F00           05244          BCF    SSR_00_FLAGS+15,    FADE_UP, BANKED     ; stop fading
00258A AB00           05245          BTFSS  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
00258C D???           05246          BRA    END_FADE_15
00258E 8D00           05247          BSF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   
002590 D???           05248          BRA    END_FADE_15
                      05249 
002592                05250 TRY_DOWN_15:
002592 AD00           05251          BTFSS  SSR_00_FLAGS+15,    FADE_DOWN, BANKED
002594 D???           05252          BRA    END_FADE_15
002596 2F00           05253          DECFSZ SSR_00_COUNTER+15,    F, BANKED         ; delay
002598 D???           05254          BRA    END_FADE_15
00259A C??? F???      05255          MOVFF  SSR_00_SPEED+15,    SSR_00_COUNTER+15; reset delay
00259E 5100           05256          MOVF   SSR_00_STEP+15,    W, BANKED
0025A0 5F00           05257          SUBWF  SSR_00_VALUE+15,    F, BANKED
0025A2 E2??           05258          BC     END_FADE_15
0025A4 6B00           05259          CLRF   SSR_00_VALUE+15,    BANKED              ; reached min value
0025A6 9D00           05260          BCF    SSR_00_FLAGS+15,    FADE_DOWN, BANKED   ; stop fading
0025A8 BB00           05261          BTFSC  SSR_00_FLAGS+15,    FADE_CYCLE, BANKED  ; cycle back?
0025AA 8F00           05262          BSF    SSR_00_FLAGS+15,    FADE_UP, BANKED
0025AC B900           05263          BTFSC  SSR_00_FLAGS+15,    MAX_OFF_TIME, BANKED; maximizing off-time?
0025AE 6900           05264          SETF   SSR_00_COUNTER+15,    BANKED
                      05265 
0025B0                05266 END_FADE_15:
  00000010            05267 X        ++
0025B0 1D00           05217          COMF   SSR_00_VALUE+16,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
0025B2 E1??           05219          BNZ    UPDATE_MIN_DIMMED_16
                      05220          IF X <= OUTPUT_CHAN_MAX
0025B4 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
0025B6 D???           05223          BRA    UPDATE_MIN_SKIP_16
                      05224 
0025B8                05225 UPDATE_MIN_DIMMED_16:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0025B8 908A           05227           BCF   PLAT_16,    BIT_16,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_16,    BIT_16,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+16,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
0025BA                05233 UPDATE_MIN_SKIP_16:
                      05234 
0025BA AF00           05235          BTFSS  SSR_00_FLAGS+16,    FADE_UP, BANKED
0025BC D???           05236          BRA    TRY_DOWN_16
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0025BE 2F00           05237          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay to next step
0025C0 D???           05238          BRA    END_FADE_16
0025C2 C??? F???      05239          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16
0025C6 5100           05240          MOVF   SSR_00_STEP+16,    W, BANKED
0025C8 2700           05241          ADDWF  SSR_00_VALUE+16,    F, BANKED
0025CA E3??           05242          BNC    END_FADE_16
0025CC 6900           05243          SETF   SSR_00_VALUE+16,    BANKED              ; reached max value
0025CE 9F00           05244          BCF    SSR_00_FLAGS+16,    FADE_UP, BANKED     ; stop fading
0025D0 AB00           05245          BTFSS  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
0025D2 D???           05246          BRA    END_FADE_16
0025D4 8D00           05247          BSF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   
0025D6 D???           05248          BRA    END_FADE_16
                      05249 
0025D8                05250 TRY_DOWN_16:
0025D8 AD00           05251          BTFSS  SSR_00_FLAGS+16,    FADE_DOWN, BANKED
0025DA D???           05252          BRA    END_FADE_16
0025DC 2F00           05253          DECFSZ SSR_00_COUNTER+16,    F, BANKED         ; delay
0025DE D???           05254          BRA    END_FADE_16
0025E0 C??? F???      05255          MOVFF  SSR_00_SPEED+16,    SSR_00_COUNTER+16; reset delay
0025E4 5100           05256          MOVF   SSR_00_STEP+16,    W, BANKED
0025E6 5F00           05257          SUBWF  SSR_00_VALUE+16,    F, BANKED
0025E8 E2??           05258          BC     END_FADE_16
0025EA 6B00           05259          CLRF   SSR_00_VALUE+16,    BANKED              ; reached min value
0025EC 9D00           05260          BCF    SSR_00_FLAGS+16,    FADE_DOWN, BANKED   ; stop fading
0025EE BB00           05261          BTFSC  SSR_00_FLAGS+16,    FADE_CYCLE, BANKED  ; cycle back?
0025F0 8F00           05262          BSF    SSR_00_FLAGS+16,    FADE_UP, BANKED
0025F2 B900           05263          BTFSC  SSR_00_FLAGS+16,    MAX_OFF_TIME, BANKED; maximizing off-time?
0025F4 6900           05264          SETF   SSR_00_COUNTER+16,    BANKED
                      05265 
0025F6                05266 END_FADE_16:
  00000011            05267 X        ++
0025F6 1D00           05217          COMF   SSR_00_VALUE+17,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
0025F8 E1??           05219          BNZ    UPDATE_MIN_DIMMED_17
                      05220          IF X <= OUTPUT_CHAN_MAX
0025FA 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
0025FC D???           05223          BRA    UPDATE_MIN_SKIP_17
                      05224 
0025FE                05225 UPDATE_MIN_DIMMED_17:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
0025FE 968C           05227           BCF   PLAT_17,    BIT_17,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_17,    BIT_17,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+17,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
002600                05233 UPDATE_MIN_SKIP_17:
                      05234 
002600 AF00           05235          BTFSS  SSR_00_FLAGS+17,    FADE_UP, BANKED
002602 D???           05236          BRA    TRY_DOWN_17
002604 2F00           05237          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay to next step
002606 D???           05238          BRA    END_FADE_17
002608 C??? F???      05239          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17
00260C 5100           05240          MOVF   SSR_00_STEP+17,    W, BANKED
00260E 2700           05241          ADDWF  SSR_00_VALUE+17,    F, BANKED
002610 E3??           05242          BNC    END_FADE_17
002612 6900           05243          SETF   SSR_00_VALUE+17,    BANKED              ; reached max value
002614 9F00           05244          BCF    SSR_00_FLAGS+17,    FADE_UP, BANKED     ; stop fading
002616 AB00           05245          BTFSS  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
002618 D???           05246          BRA    END_FADE_17
00261A 8D00           05247          BSF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   
00261C D???           05248          BRA    END_FADE_17
                      05249 
00261E                05250 TRY_DOWN_17:
00261E AD00           05251          BTFSS  SSR_00_FLAGS+17,    FADE_DOWN, BANKED
002620 D???           05252          BRA    END_FADE_17
002622 2F00           05253          DECFSZ SSR_00_COUNTER+17,    F, BANKED         ; delay
002624 D???           05254          BRA    END_FADE_17
002626 C??? F???      05255          MOVFF  SSR_00_SPEED+17,    SSR_00_COUNTER+17; reset delay
00262A 5100           05256          MOVF   SSR_00_STEP+17,    W, BANKED
00262C 5F00           05257          SUBWF  SSR_00_VALUE+17,    F, BANKED
00262E E2??           05258          BC     END_FADE_17
002630 6B00           05259          CLRF   SSR_00_VALUE+17,    BANKED              ; reached min value
002632 9D00           05260          BCF    SSR_00_FLAGS+17,    FADE_DOWN, BANKED   ; stop fading
002634 BB00           05261          BTFSC  SSR_00_FLAGS+17,    FADE_CYCLE, BANKED  ; cycle back?
002636 8F00           05262          BSF    SSR_00_FLAGS+17,    FADE_UP, BANKED
002638 B900           05263          BTFSC  SSR_00_FLAGS+17,    MAX_OFF_TIME, BANKED; maximizing off-time?
00263A 6900           05264          SETF   SSR_00_COUNTER+17,    BANKED
                      05265 
00263C                05266 END_FADE_17:
  00000012            05267 X        ++
00263C 1D00           05217          COMF   SSR_00_VALUE+18,    W, BANKED   ; is this set to maximum?
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
00263E E1??           05219          BNZ    UPDATE_MIN_DIMMED_18
                      05220          IF X <= OUTPUT_CHAN_MAX
002640 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002642 D???           05223          BRA    UPDATE_MIN_SKIP_18
                      05224 
002644                05225 UPDATE_MIN_DIMMED_18:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
002644 928C           05227           BCF   PLAT_18,    BIT_18,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_18,    BIT_18,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+18,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
002646                05233 UPDATE_MIN_SKIP_18:
                      05234 
002646 AF00           05235          BTFSS  SSR_00_FLAGS+18,    FADE_UP, BANKED
002648 D???           05236          BRA    TRY_DOWN_18
00264A 2F00           05237          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay to next step
00264C D???           05238          BRA    END_FADE_18
00264E C??? F???      05239          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18
002652 5100           05240          MOVF   SSR_00_STEP+18,    W, BANKED
002654 2700           05241          ADDWF  SSR_00_VALUE+18,    F, BANKED
002656 E3??           05242          BNC    END_FADE_18
002658 6900           05243          SETF   SSR_00_VALUE+18,    BANKED              ; reached max value
00265A 9F00           05244          BCF    SSR_00_FLAGS+18,    FADE_UP, BANKED     ; stop fading
00265C AB00           05245          BTFSS  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
00265E D???           05246          BRA    END_FADE_18
002660 8D00           05247          BSF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   
002662 D???           05248          BRA    END_FADE_18
                      05249 
002664                05250 TRY_DOWN_18:
002664 AD00           05251          BTFSS  SSR_00_FLAGS+18,    FADE_DOWN, BANKED
002666 D???           05252          BRA    END_FADE_18
002668 2F00           05253          DECFSZ SSR_00_COUNTER+18,    F, BANKED         ; delay
00266A D???           05254          BRA    END_FADE_18
00266C C??? F???      05255          MOVFF  SSR_00_SPEED+18,    SSR_00_COUNTER+18; reset delay
002670 5100           05256          MOVF   SSR_00_STEP+18,    W, BANKED
002672 5F00           05257          SUBWF  SSR_00_VALUE+18,    F, BANKED
002674 E2??           05258          BC     END_FADE_18
002676 6B00           05259          CLRF   SSR_00_VALUE+18,    BANKED              ; reached min value
002678 9D00           05260          BCF    SSR_00_FLAGS+18,    FADE_DOWN, BANKED   ; stop fading
00267A BB00           05261          BTFSC  SSR_00_FLAGS+18,    FADE_CYCLE, BANKED  ; cycle back?
00267C 8F00           05262          BSF    SSR_00_FLAGS+18,    FADE_UP, BANKED
00267E B900           05263          BTFSC  SSR_00_FLAGS+18,    MAX_OFF_TIME, BANKED; maximizing off-time?
002680 6900           05264          SETF   SSR_00_COUNTER+18,    BANKED
                      05265 
002682                05266 END_FADE_18:
  00000013            05267 X        ++
002682 1D00           05217          COMF   SSR_00_VALUE+19,    W, BANKED   ; is this set to maximum?
                      05218          ;BZ    UPDATE_MIN_SKIP_#v(X)
002684 E1??           05219          BNZ    UPDATE_MIN_DIMMED_19
                      05220          IF X <= OUTPUT_CHAN_MAX
002686 9800           05221           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; "light fully on" means they aren't all off.  Clear the
                             flag.
                      05222          ENDIF
002688 D???           05223          BRA    UPDATE_MIN_SKIP_19
                      05224 
00268A                05225 UPDATE_MIN_DIMMED_19:
                      05226          IF (X > OUTPUT_CHAN_MAX) || (QSCC_PORT)
00268A 948C           05227           BCF   PLAT_19,    BIT_19,    ACCESS   ; turn off light
                      05228          ELSE
                      05229           BSF   PLAT_19,    BIT_19,    ACCESS   ; turn off SSR
                      05230           TSTFSZ SSR_00_VALUE+19,    BANKED     ; is this SSR fully off?
                      05231           BCF   SSR_STATE2, ALL_OFF, ACCESS     ; no, ergo they aren't ALL off now. clear the flag
                      05232          ENDIF
00268C                05233 UPDATE_MIN_SKIP_19:
                      05234 
00268C AF00           05235          BTFSS  SSR_00_FLAGS+19,    FADE_UP, BANKED
00268E D???           05236          BRA    TRY_DOWN_19
002690 2F00           05237          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay to next step
002692 D???           05238          BRA    END_FADE_19
002694 C??? F???      05239          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19
002698 5100           05240          MOVF   SSR_00_STEP+19,    W, BANKED
00269A 2700           05241          ADDWF  SSR_00_VALUE+19,    F, BANKED
00269C E3??           05242          BNC    END_FADE_19
00269E 6900           05243          SETF   SSR_00_VALUE+19,    BANKED              ; reached max value
0026A0 9F00           05244          BCF    SSR_00_FLAGS+19,    FADE_UP, BANKED     ; stop fading
0026A2 AB00           05245          BTFSS  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
0026A4 D???           05246          BRA    END_FADE_19
0026A6 8D00           05247          BSF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   
0026A8 D???           05248          BRA    END_FADE_19
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05249 
0026AA                05250 TRY_DOWN_19:
0026AA AD00           05251          BTFSS  SSR_00_FLAGS+19,    FADE_DOWN, BANKED
0026AC D???           05252          BRA    END_FADE_19
0026AE 2F00           05253          DECFSZ SSR_00_COUNTER+19,    F, BANKED         ; delay
0026B0 D???           05254          BRA    END_FADE_19
0026B2 C??? F???      05255          MOVFF  SSR_00_SPEED+19,    SSR_00_COUNTER+19; reset delay
0026B6 5100           05256          MOVF   SSR_00_STEP+19,    W, BANKED
0026B8 5F00           05257          SUBWF  SSR_00_VALUE+19,    F, BANKED
0026BA E2??           05258          BC     END_FADE_19
0026BC 6B00           05259          CLRF   SSR_00_VALUE+19,    BANKED              ; reached min value
0026BE 9D00           05260          BCF    SSR_00_FLAGS+19,    FADE_DOWN, BANKED   ; stop fading
0026C0 BB00           05261          BTFSC  SSR_00_FLAGS+19,    FADE_CYCLE, BANKED  ; cycle back?
0026C2 8F00           05262          BSF    SSR_00_FLAGS+19,    FADE_UP, BANKED
0026C4 B900           05263          BTFSC  SSR_00_FLAGS+19,    MAX_OFF_TIME, BANKED; maximizing off-time?
0026C6 6900           05264          SETF   SSR_00_COUNTER+19,    BANKED
                      05265 
0026C8                05266 END_FADE_19:
  00000014            05267 X        ++
                      05268         ENDW
0026C8 9E00           05269         BCF     SSR_STATE, INCYC, ACCESS        ; shut down slice processing until next ZC
                      05270         ;
                      05271         ; see if we should be asleep
                      05272         ;
0026CA A800           05273         BTFSS   SSR_STATE2, ALL_OFF, ACCESS
0026CC D???           05274         BRA     BE_AWAKE_NOW
0026CE 2E00           05275         DECFSZ  AUTO_OFF_CTRL, F, ACCESS        
0026D0 0012           05276         RETURN
0026D2 6800           05277         SETF    AUTO_OFF_CTRL, ACCESS
0026D4 2E00           05278         DECFSZ  AUTO_OFF_CTRH, F, ACCESS
0026D6 0012           05279         RETURN
                      05280         ; 
                      05281         ; We've been idle too long.  Go to sleep now.
                      05282         ;
0026D8 A600           05283         BTFSS   SSR_STATE, SLEEP_MODE, ACCESS
0026DA EC?? F???      05284         CALL    DO_CMD_SLEEP
0026DE 0012           05285         RETURN
                      05286         
0026E0                05287 BE_AWAKE_NOW:
                      05288         ;
                      05289         ; we should be awake.  Make sure we are and reset counters
                      05290         ;
0026E0 B600           05291         BTFSC   SSR_STATE, SLEEP_MODE, ACCESS
0026E2 EC?? F???      05292         CALL    DO_CMD_WAKE
0026E6 6800           05293         SETF    AUTO_OFF_CTRH, ACCESS
0026E8 6800           05294         SETF    AUTO_OFF_CTRL, ACCESS
0026EA 0012           05295         RETURN
                      05296 
                      05297 
                      05298 
                      05299 ; DMX512 RECEIVER CODE
                      05300 ; Based on Microchip Application Note AN1076
                      05301 ;
                      05302 
                      05303 ;
                      05304 ; If we have DMX mode running but need to shift to Lumos protocol
                      05305 ; (like entering config mode), we need to reset the baud rate to
                      05306 ; whatever is configured for non-DMX use.
                      05307 ;
0026EC                05308 DMX_EXIT_TEMPORARILY:
0026EC 0004           05309         CLRWDT
0026EE AC00           05310         BTFSS   DMX_SLOTH, DMX_SPEED, ACCESS
0026F0 0012           05311         RETURN
                      05312         BEGIN_EEPROM_READ EE_BAUD
0026F2 9EF2               M          BCF    INTCON, GIEH, ACCESS    ; Disable high-priority interrupts
0026F4 9CF2               M          BCF    INTCON, GIEL, ACCESS    ; Disable low-priority interrupts
                          M          SET_EEPROM_ADDRESS EE_BAUD     ; NOTE interrupts need to be OFF here!
0026F6 0E00               M          MOVLW  HIGH(EE_BAUD)           ; NOTE interrupts need to be OFF here!
0026F8 6EAA               M          MOVWF  EEADRH, ACCESS
0026FA 0E01               M          MOVLW  LOW(EE_BAUD)
0026FC 6EA9               M          MOVWF  EEADR, ACCESS
0026FE 9EA6               M          BCF    EECON1, EEPGD, ACCESS   ; select DATA EEPROM as target
002700 9CA6               M          BCF    EECON1, CFGS, ACCESS
002702 94A6               M          BCF    EECON1, WREN, ACCESS    ; disable writing
                      05313         READ_EEPROM_DATA_W
                          M         READ_EEPROM_DATA
002704 80A6               M         BSF     EECON1, RD, ACCESS
002706 CFA8 FFE8          M         MOVFF   EEDATA, WREG
                      05314         END_EEPROM_READ
00270A 8EF2               M          BSF    INTCON, GIEH, ACCESS    ; Enable high-priority interrupts
00270C 8CF2               M          BSF    INTCON, GIEL, ACCESS    ; Enable low-priority interrupts
00270E 6AAA               M          CLRF   EEADRH, ACCESS
002710 6AA9               M          CLRF   EEADR, ACCESS
                      05315         IF ROLE_MASTER
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05316          ; Send F0 72 <baud> 26 -> slave CPU
                      05317          MOVWF  I, ACCESS
                      05318          MOVLW  0xF0
                      05319          CALL   SIO_WRITE_W
                      05320          MOVLW  0x72
                      05321          CALL   SIO_WRITE_W
                      05322          MOVF   I, W, ACCESS
                      05323          CALL   SIO_WRITE_W
                      05324          MOVLW  0x26
                      05325          CALL   SIO_WRITE_W
                      05326          CALL   DRAIN_M_S_TX_BLOCKING
                      05327          MOVF   I, W, ACCESS
                      05328         ENDIF
002712 EC?? F???      05329         CALL    SIO_SET_BAUD_W
002716 9C00           05330         BCF     DMX_SLOTH, DMX_SPEED, ACCESS    ; no longer running at DMX speeds
002718 0012           05331         RETURN
                      05332 
00271A                05333 DMX_RESUME:
00271A 0004           05334         CLRWDT
00271C BE00           05335         BTFSC   DMX_SLOTH, DMX_EN, ACCESS
00271E BC00           05336         BTFSC   DMX_SLOTH, DMX_SPEED, ACCESS
002720 0012           05337         RETURN                                  ; either not using DMX at all or already at speed
                      05338         IF ROLE_MASTER
                      05339          ; Send F0 72 <baud> 26 -> slave CPU
                      05340          MOVLW  0xF0
                      05341          CALL   SIO_WRITE_W
                      05342          MOVLW  0x72
                      05343          CALL   SIO_WRITE_W
                      05344          MOVLW  SIO_250000
                      05345          CALL   SIO_WRITE_W
                      05346          MOVLW  0x26
                      05347          CALL   SIO_WRITE_W
                      05348          CALL   DRAIN_M_S_TX_BLOCKING
                      05349         ENDIF
002722 0E0A           05350         MOVLW   SIO_250000
002724 EC?? F???      05351         CALL    SIO_SET_BAUD_W
002728 8C00           05352         BSF     DMX_SLOTH, DMX_SPEED, ACCESS    ; now at DMX speed
00272A 0012           05353         RETURN
                      05354         
                      05355 ;
                      05356 ; Wait for start of packet
                      05357 ;
                      05358 ;DMX_WAIT_FOR_SYNC:
                      05359 ;       BTFSC   PIR1, RCIF, ACCESS
                      05360 ;       MOVF    RCREG, W, ACCESS        ; throw away received bytes until start of frame
                      05361 ;       BTFSS   RCSTA, FERR, ACCESS     ; wait until frame error
                      05362 ;       BRA     DMX_WAIT_FOR_SYNC
                      05363 ;       MOVF    RCREG, W, ACCESS        ; clear receive buffer
                      05364 ;DMX_WAIT_FOR_START:
                      05365 ;       BTFSS   PIR1, RCIF, ACCESS
                      05366 ;       BRA     DMX_WAIT_FOR_START      ; wait for actual characters to start
                      05367 ;       BTFSC   RCSTA, FERR, ACCESS     ; and break to end
                      05368 ;       BRA     DMX_WAIT_FOR_START
                      05369 ;       MOVF    RCREG, W, ACCESS
                      05370 ;       ANDLW   0xFF                    ; test byte just read, should be 0x00
                      05371 ;       BNZ     DMX_WAIT_FOR_SYNC       ; done here, come back when ready for next packet
                      05372 
                      05373         ; XXX now loop over bytes, aborting on FERR (indicates packet was short)
                      05374         ; or when your data have been received.
                      05375 
00272C                05376 DMX_RECEIVED_BYTE:
00272C 0004           05377         CLRWDT
                      05378         ;
                      05379         ; We just got a DMX byte.  IF DMX_FRAME is set, this is supposedly the start of
                      05380         ; a new frame, so any previous frame in progress is aborted.  The state machine
                      05381         ; in DMX mode is simply:
                      05382         ;       00 IDLE;     waiting for start of frame
                      05383         ;       17 DMX_WAIT; waiting for first slot for this device
                      05384         ;       18 DMX_UPD;  updating channels
                      05385         ;
00272E AA00           05386         BTFSS   DMX_SLOTH, DMX_FRAME, ACCESS
002730 D???           05387         BRA     DMX_NOT_FIRST
002732 9A00           05388         BCF     DMX_SLOTH, DMX_FRAME, ACCESS    ; clear start-of-frame signal
                      05389         ;
                      05390         ; Start of frame
                      05391         ; The first byte received is in WREG.  If this is 0x00, we need to pay
                      05392         ; attention to this frame.  Otherwise, it's something foreign we can ignore.
                      05393         ;
002734 66E8           05394         TSTFSZ  WREG, ACCESS
002736 D???           05395         BRA     DMX_WEIRD_FRAME
002738 0E17           05396         MOVLW   0x17                            ; start of frame -> state 17
00273A 6E00           05397         MOVWF   YY_STATE, ACCESS
00273C C??? F???      05398         MOVFF   DMX_SLOTL, YY_YY                ; YY_COMMAND:YY_YY is the number of slots
002740 6A00           05399         CLRF    YY_COMMAND, ACCESS              ; to skip before we get to ours
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002742 B000           05400         BTFSC   DMX_SLOTH, DMX_BIT8, ACCESS
002744 8000           05401         BSF     YY_COMMAND, 0, ACCESS
002746 0012           05402         RETURN
                      05403 
002748                05404 DMX_WEIRD_FRAME:
                      05405         IF HAS_STATUS_LEDS
                      05406          SET_SSR_BLINK_FADE SSR_RED
                      05407         ENDIF
002748 6A00           05408         CLRF    YY_STATE, ACCESS                ; stay at state 0, wait for next frame.
00274A 0012           05409         RETURN
                      05410 
00274C                05411 DMX_NOT_FIRST:
00274C 6E00           05412         MOVWF   YY_DATA, ACCESS                 ; save input byte in YY_DATA
00274E 0E17           05413         MOVLW   0x17                            ; are we at state 17?
002750 6200           05414         CPFSEQ  YY_STATE, ACCESS
002752 D???           05415         BRA     DMX_18
                      05416         ;
                      05417         ; State 17: waiting for our slot to come up
                      05418         ;
                      05419         IF HAS_STATUS_LEDS
                      05420          SET_SSR_BLINK_FADE SSR_YELLOW
                      05421         ENDIF
002754 6600           05422         TSTFSZ  YY_YY, ACCESS                   ; count off another slot...
002756 D???           05423         BRA     DMX_ST_LSB
002758 A000           05424         BTFSS   YY_COMMAND, 0, ACCESS
00275A D???           05425         BRA     DMX_SLOT_REACHED
00275C 9000           05426         BCF     YY_COMMAND, 0, ACCESS           ; borrow 1 and roll over
00275E                05427 DMX_ST_LSB:
00275E 0600           05428         DECF    YY_YY, F, ACCESS
002760 0012           05429         RETURN
                      05430 
002762                05431 DMX_SLOT_REACHED:
                      05432         ;
                      05433         ; We have waited long enough, we're up now!
                      05434         ;
002762 2A00           05435         INCF    YY_STATE, F, ACCESS             ; move state 17->18 (note YY_YY==0 now)
                      05436 
002764                05437 DMX_18:
002764 0004           05438         CLRWDT
                      05439         IF HAS_ACTIVE
                      05440          SET_SSR_BLINK_FADE SSR_ACTIVE
                      05441         ENDIF
002766 0E18           05442         MOVLW   0x18
002768 6200           05443         CPFSEQ  YY_STATE, ACCESS
00276A D???           05444         BRA     DMX_19
                      05445         ;
                      05446         ; State 18: updating slot value YY_DATA into channel YY_YY.
                      05447         ;
00276C C??? F???      05448         MOVFF   YY_DATA, YY_COMMAND
002770 C??? F???      05449         MOVFF   YY_YY, YY_DATA
002774 2A00           05450         INCF    YY_YY, F, ACCESS
002776 EC?? F???      05451         CALL    XLATE_SSR_ID
00277A BC00           05452         BTFSC   TARGET_SSR, INVALID_SSR, ACCESS
00277C D???           05453         BRA     DMX_DONE
00277E C??? F???      05454         MOVFF   YY_COMMAND, YY_DATA
002782 BE00           05455         BTFSC   TARGET_SSR, NOT_MY_SSR, ACCESS
002784 D???           05456         BRA     DMX_PASS_DOWN_SET_LVL
002786 EF?? F???      05457         GOTO    SSR_OUTPUT_VALUE ; TARGET_SSR <- YY_DATA
                      05458 
00278A                05459 DMX_PASS_DOWN_SET_LVL:
                      05460         IF ROLE_MASTER
                      05461          MOVLW  0xA0
                      05462          CALL   SIO_WRITE_W
                      05463          BCF    TARGET_SSR, 7, ACCESS
                      05464          BCF    TARGET_SSR, 6, ACCESS
                      05465          BCF    STATUS, C, ACCESS
                      05466          RRCF   YY_DATA, F, ACCESS
                      05467          BTFSC  STATUS, C, ACCESS
                      05468          BSF    TARGET_SSR, 6, ACCESS   ; LSB of value
                      05469          MOVF   TARGET_SSR, W, ACCESS
                      05470          SEND_8_BIT_W
                      05471          MOVF   YY_DATA, W, ACCESS
                      05472          SEND_8_BIT_W
                      05473          IF HAS_STATUS_LEDS
                      05474           SET_SSR_BLINK_FADE SSR_YELLOW
                      05475          ENDIF
                      05476          RETURN
                      05477         ELSE
                      05478          ERR_BUG 0x02, ERR_CLASS_IN_VALID
00278A 0E02               M          MOVLW  0x02
00278C 6E00               M          MOVWF  LAST_ERROR, ACCESS
                          M          IF HAS_ACTIVE
                          M           SET_SSR_RAPID_FLASH SSR_ACTIVE
                          M          ENDIF
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M          IF HAS_STATUS_LEDS
                          M           SET_SSR_RAPID_FLASH SSR_YELLOW
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M            SET_SSR_RAPID_FLASH SSR_RED
                          M            SET_SSR_OFF SSR_GREEN
                          M           ELSE
                          M            SET_SSR_OFF SSR_RED
                          M           ENDIF
                          M          ENDIF
                          M          IF ROLE_MASTER
                          M           ; Send extra flags to slave
                          M           MOVLW 0xF0
                          M           CALL  SIO_WRITE_W
                          M           MOVLW 0x21
                          M           CALL  SIO_WRITE_W
                          M           IF ERR_CLASS_IN_VALID == ERR_CLASS_OVERRUN
                          M            MOVLW B'00101000'
                          M            CALL SIO_WRITE_W
                          M            MOVLW B'00000000'
                          M           ELSE
                          M            IF ERR_CLASS_IN_VALID == ERR_CLASS_IN_VALID
                          M             MOVLW B'00111000'
                          M             CALL SIO_WRITE_W
                          M             MOVLW B'00000001'
                          M            ELSE
                          M             IF ERR_CLASS_IN_VALID == ERR_CLASS_FATAL_RESET
                          M              MOVLW B'00101101'
                          M              CALL SIO_WRITE_W
                          M              MOVLW B'00000101'
                          M             ELSE
                          M              IF ERR_CLASS_IN_VALID == ERR_CLASS_DEVICE
                          M               MOVLW B'00111000'
                          M               CALL SIO_WRITE_W
                          M               MOVLW B'00000101'
                          M              ELSE
                          M               IF ERR_CLASS_IN_VALID == ERR_CLASS_INT_COMMAND
                          M                MOVLW B'00111000'
                          M                CALL SIO_WRITE_W
                          M                MOVLW B'00000110'
                          M               ELSE
                          M                MOVLW B'00000101'
                          M                CALL  SIO_WRITE_W
                          M                MOVLW B'00000000'
                          M               ENDIF
                          M              ENDIF
                          M             ENDIF
                          M            ENDIF
                          M           ENDIF
                          M           CALL SIO_WRITE_W
                          M          ENDIF
00278E 6A00               M          CLRF   YY_STATE, ACCESS
002790 0012               M          RETURN
                      05479         ENDIF
                      05480          
002792                05481 DMX_DONE:
                      05482         ;
                      05483         ; reached the end of our range of slots
                      05484         ;
002792 6A00           05485         CLRF    YY_STATE, ACCESS
002794 0012           05486         RETURN
                      05487 
002796                05488 DMX_19:
                      05489         ;
                      05490         ; unknown state!  Force return to idle state
                      05491         ;
002796 6A00           05492         CLRF    YY_STATE, ACCESS
002798 0012           05493         RETURN
                      05494         
00279A                05495 HALT_MODE:
                      05496         ;
                      05497         ; Shut down forever
                      05498         ;
00279A EC?? F???      05499         CALL    S0_CMD0                 ; blackout SSR outputs
00279E 9EF2           05500         BCF     INTCON, GIEH, ACCESS            ; disable high-priority interrupts
0027A0 9CF2           05501         BCF     INTCON, GIEL, ACCESS            ; disable low-priority interrupts
                      05502         IF HAS_STATUS_LEDS
                      05503          BSF    PLAT_RED, BIT_RED, ACCESS       ; set only RED light
                      05504          BCF    PLAT_GREEN, BIT_GREEN, ACCESS
                      05505          BCF    PLAT_YELLOW, BIT_YELLOW, ACCESS
                      05506          IF HAS_ACTIVE
                      05507           BCF   PLAT_ACTIVE, BIT_ACTIVE, ACCESS
                      05508          ENDIF
                      05509         ENDIF
0027A2 0E73           05510         MOVLW   b'01110011'                     ; Set oscillator mode for our long slumber
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05511                 ; 0-------                      ; ~IDLEN enter SLEEP mode, not an idle mode
                      05512                 ; -111----                      ;  IRCF=7 select 8 MHz internal clock speed
                      05513                 ; ------11                      ;  SCS=3 system clock is now internal oscillator
0027A4 6ED3           05514         MOVWF   OSCCON, ACCESS
0027A6 80D1           05515         BSF     WDTCON, SWDTEN, ACCESS          ; make sure WDT is enabled
0027A8                05516 HALT_SLEEP:
0027A8 0004           05517         CLRWDT
0027AA 0003           05518         SLEEP
                      05519         ; when we wake up from WDT, flashes red light briefly
                      05520         IF HAS_STATUS_LEDS
                      05521          BSF    PLAT_RED, BIT_RED, ACCESS
                      05522          CALL   DELAY_1_6_SEC                   ; 1/6 sec
                      05523          BCF    PLAT_RED, BIT_RED, ACCESS
                      05524         ENDIF
0027AC D???           05525         BRA     HALT_SLEEP
                      05526 
                      05527 
0027AE                05528 TR_ON_DELAY:
0027AE 6800           05529         SETF    TR_I, ACCESS
0027B0 0004           05530 TR_ON_L CLRWDT
0027B2 2E00           05531         DECFSZ  TR_I, F, ACCESS
0027B4 D???           05532         BRA     TR_ON_L
0027B6 0012           05533         RETURN
                      05534 
0027B8                05535 TR_OFF_DELAY:
0027B8 D???           05536         BRA     TR_ON_DELAY
                      05537         END
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 143


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABAT                              00000004
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ALL_OFF                           00000004
AN0                               00000000
AN1                               00000001
AN10                              00000000
AN2                               00000002
AN3                               00000003
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
AN8                               00000001
AN9                               00000004
AUTO_OFF_CTRH                     0000001C
AUTO_OFF_CTRL                     0000001D
B0CON                             00000E20
B0D0                              00000E26
B0D00                             00000000
B0D01                             00000001
B0D02                             00000002
B0D03                             00000003
B0D04                             00000004
B0D05                             00000005
B0D06                             00000006
B0D07                             00000007
B0D1                              00000E27
B0D10                             00000000
B0D11                             00000001
B0D12                             00000002
B0D13                             00000003
B0D14                             00000004
B0D15                             00000005
B0D16                             00000006
B0D17                             00000007
B0D2                              00000E28
B0D20                             00000000
B0D21                             00000001
B0D22                             00000002
B0D23                             00000003
B0D24                             00000004
B0D25                             00000005
B0D26                             00000006
B0D27                             00000007
B0D3                              00000E29
B0D30                             00000000
B0D31                             00000001
B0D32                             00000002
B0D33                             00000003
B0D34                             00000004
B0D35                             00000005
B0D36                             00000006
B0D37                             00000007
B0D4                              00000E2A
B0D40                             00000000
B0D41                             00000001
B0D42                             00000002
B0D43                             00000003
B0D44                             00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 144


SYMBOL TABLE
  LABEL                             VALUE 

B0D45                             00000005
B0D46                             00000006
B0D47                             00000007
B0D5                              00000E2B
B0D50                             00000000
B0D51                             00000001
B0D52                             00000002
B0D53                             00000003
B0D54                             00000004
B0D55                             00000005
B0D56                             00000006
B0D57                             00000007
B0D6                              00000E2C
B0D60                             00000000
B0D61                             00000001
B0D62                             00000002
B0D63                             00000003
B0D64                             00000004
B0D65                             00000005
B0D66                             00000006
B0D67                             00000007
B0D7                              00000E2D
B0D70                             00000000
B0D71                             00000001
B0D72                             00000002
B0D73                             00000003
B0D74                             00000004
B0D75                             00000005
B0D76                             00000006
B0D77                             00000007
B0DLC                             00000E25
B0EIDH                            00000E23
B0EIDL                            00000E24
B0IE                              00000002
B0SIDH                            00000E21
B0SIDL                            00000E22
B0TXEN                            00000002
B1CON                             00000E30
B1D0                              00000E36
B1D00                             00000000
B1D01                             00000001
B1D02                             00000002
B1D03                             00000003
B1D04                             00000004
B1D05                             00000005
B1D06                             00000006
B1D07                             00000007
B1D1                              00000E37
B1D10                             00000000
B1D11                             00000001
B1D12                             00000002
B1D13                             00000003
B1D14                             00000004
B1D15                             00000005
B1D16                             00000006
B1D17                             00000007
B1D2                              00000E38
B1D20                             00000000
B1D21                             00000001
B1D22                             00000002
B1D23                             00000003
B1D24                             00000004
B1D25                             00000005
B1D26                             00000006
B1D27                             00000007
B1D3                              00000E39
B1D30                             00000000
B1D31                             00000001
B1D32                             00000002
B1D33                             00000003
B1D34                             00000004
B1D35                             00000005
B1D36                             00000006
B1D37                             00000007
B1D4                              00000E3A
B1D40                             00000000
B1D41                             00000001
B1D42                             00000002
B1D43                             00000003
B1D44                             00000004
B1D45                             00000005
B1D46                             00000006
B1D47                             00000007
B1D5                              00000E3B
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 145


SYMBOL TABLE
  LABEL                             VALUE 

B1D50                             00000000
B1D51                             00000001
B1D52                             00000002
B1D53                             00000003
B1D54                             00000004
B1D55                             00000005
B1D56                             00000006
B1D57                             00000007
B1D6                              00000E3C
B1D60                             00000000
B1D61                             00000001
B1D62                             00000002
B1D63                             00000003
B1D64                             00000004
B1D65                             00000005
B1D66                             00000006
B1D67                             00000007
B1D7                              00000E3D
B1D70                             00000000
B1D71                             00000001
B1D72                             00000002
B1D73                             00000003
B1D74                             00000004
B1D75                             00000005
B1D76                             00000006
B1D77                             00000007
B1DLC                             00000E35
B1EIDH                            00000E33
B1EIDL                            00000E34
B1IE                              00000003
B1SIDH                            00000E31
B1SIDL                            00000E32
B1TXEN                            00000003
B2CON                             00000E40
B2D0                              00000E46
B2D00                             00000000
B2D01                             00000001
B2D02                             00000002
B2D03                             00000003
B2D04                             00000004
B2D05                             00000005
B2D06                             00000006
B2D07                             00000007
B2D1                              00000E47
B2D10                             00000000
B2D11                             00000001
B2D12                             00000002
B2D13                             00000003
B2D14                             00000004
B2D15                             00000005
B2D16                             00000006
B2D17                             00000007
B2D2                              00000E48
B2D20                             00000000
B2D21                             00000001
B2D22                             00000002
B2D23                             00000003
B2D24                             00000004
B2D25                             00000005
B2D26                             00000006
B2D27                             00000007
B2D3                              00000E49
B2D30                             00000000
B2D31                             00000001
B2D32                             00000002
B2D33                             00000003
B2D34                             00000004
B2D35                             00000005
B2D36                             00000006
B2D37                             00000007
B2D4                              00000E4A
B2D40                             00000000
B2D41                             00000001
B2D42                             00000002
B2D43                             00000003
B2D44                             00000004
B2D45                             00000005
B2D46                             00000006
B2D47                             00000007
B2D5                              00000E4B
B2D50                             00000000
B2D51                             00000001
B2D52                             00000002
B2D53                             00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 146


SYMBOL TABLE
  LABEL                             VALUE 

B2D54                             00000004
B2D55                             00000005
B2D56                             00000006
B2D57                             00000007
B2D6                              00000E4C
B2D60                             00000000
B2D61                             00000001
B2D62                             00000002
B2D63                             00000003
B2D64                             00000004
B2D65                             00000005
B2D66                             00000006
B2D67                             00000007
B2D7                              00000E4D
B2D70                             00000000
B2D71                             00000001
B2D72                             00000002
B2D73                             00000003
B2D74                             00000004
B2D75                             00000005
B2D76                             00000006
B2D77                             00000007
B2DLC                             00000E45
B2EIDH                            00000E43
B2EIDL                            00000E44
B2IE                              00000004
B2SIDH                            00000E41
B2SIDL                            00000E42
B2TXEN                            00000004
B32__BCD2ASCII                    00000000
B32__BCD_ASC                      00000000
B32__BIN                          00000000
B32__BIN2BCD                      00000000
B3CON                             00000E50
B3D0                              00000E56
B3D00                             00000000
B3D01                             00000001
B3D02                             00000002
B3D03                             00000003
B3D04                             00000004
B3D05                             00000005
B3D06                             00000006
B3D07                             00000007
B3D1                              00000E57
B3D10                             00000000
B3D11                             00000001
B3D12                             00000002
B3D13                             00000003
B3D14                             00000004
B3D15                             00000005
B3D16                             00000006
B3D17                             00000007
B3D2                              00000E58
B3D20                             00000000
B3D21                             00000001
B3D22                             00000002
B3D23                             00000003
B3D24                             00000004
B3D25                             00000005
B3D26                             00000006
B3D27                             00000007
B3D3                              00000E59
B3D30                             00000000
B3D31                             00000001
B3D32                             00000002
B3D33                             00000003
B3D34                             00000004
B3D35                             00000005
B3D36                             00000006
B3D37                             00000007
B3D4                              00000E5A
B3D40                             00000000
B3D41                             00000001
B3D42                             00000002
B3D43                             00000003
B3D44                             00000004
B3D45                             00000005
B3D46                             00000006
B3D47                             00000007
B3D5                              00000E5B
B3D50                             00000000
B3D51                             00000001
B3D52                             00000002
B3D53                             00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 147


SYMBOL TABLE
  LABEL                             VALUE 

B3D54                             00000004
B3D55                             00000005
B3D56                             00000006
B3D57                             00000007
B3D6                              00000E5C
B3D60                             00000000
B3D61                             00000001
B3D62                             00000002
B3D63                             00000003
B3D64                             00000004
B3D65                             00000005
B3D66                             00000006
B3D67                             00000007
B3D7                              00000E5D
B3D70                             00000000
B3D71                             00000001
B3D72                             00000002
B3D73                             00000003
B3D74                             00000004
B3D75                             00000005
B3D76                             00000006
B3D77                             00000007
B3DLC                             00000E55
B3EIDH                            00000E53
B3EIDL                            00000E54
B3IE                              00000005
B3SIDH                            00000E51
B3SIDL                            00000E52
B3TXEN                            00000005
B46D77                            00000007
B4CON                             00000E60
B4D0                              00000E66
B4D00                             00000000
B4D01                             00000001
B4D02                             00000002
B4D03                             00000003
B4D04                             00000004
B4D05                             00000005
B4D06                             00000006
B4D07                             00000007
B4D1                              00000E67
B4D10                             00000000
B4D11                             00000001
B4D12                             00000002
B4D13                             00000003
B4D14                             00000004
B4D15                             00000005
B4D16                             00000006
B4D17                             00000007
B4D2                              00000E68
B4D20                             00000000
B4D21                             00000001
B4D22                             00000002
B4D23                             00000003
B4D24                             00000004
B4D25                             00000005
B4D26                             00000006
B4D27                             00000007
B4D3                              00000E69
B4D30                             00000000
B4D31                             00000001
B4D32                             00000002
B4D33                             00000003
B4D34                             00000004
B4D35                             00000005
B4D36                             00000006
B4D37                             00000007
B4D4                              00000E6A
B4D40                             00000000
B4D41                             00000001
B4D42                             00000002
B4D43                             00000003
B4D44                             00000004
B4D45                             00000005
B4D46                             00000006
B4D47                             00000007
B4D5                              00000E6B
B4D50                             00000000
B4D51                             00000001
B4D52                             00000002
B4D53                             00000003
B4D54                             00000004
B4D55                             00000005
B4D56                             00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 148


SYMBOL TABLE
  LABEL                             VALUE 

B4D57                             00000007
B4D6                              00000E6C
B4D60                             00000000
B4D61                             00000001
B4D62                             00000002
B4D63                             00000003
B4D64                             00000004
B4D65                             00000005
B4D66                             00000006
B4D67                             00000007
B4D7                              00000E6D
B4D70                             00000000
B4D71                             00000001
B4D72                             00000002
B4D73                             00000003
B4D74                             00000004
B4D75                             00000005
B4D76                             00000006
B4D77                             00000007
B4DLC                             00000E65
B4EIDH                            00000E63
B4EIDL                            00000E64
B4IE                              00000006
B4SIDH                            00000E61
B4SIDL                            00000E62
B4TXEN                            00000006
B57D07                            00000007
B57D23                            00000003
B5CON                             00000E70
B5D0                              00000E76
B5D00                             00000000
B5D01                             00000001
B5D02                             00000002
B5D03                             00000003
B5D04                             00000004
B5D05                             00000005
B5D06                             00000006
B5D07                             00000007
B5D1                              00000E77
B5D10                             00000000
B5D11                             00000001
B5D12                             00000002
B5D13                             00000003
B5D14                             00000004
B5D15                             00000005
B5D16                             00000006
B5D17                             00000007
B5D2                              00000E78
B5D20                             00000000
B5D21                             00000001
B5D22                             00000002
B5D23                             00000003
B5D24                             00000004
B5D25                             00000005
B5D26                             00000006
B5D27                             00000007
B5D3                              00000E79
B5D30                             00000000
B5D31                             00000001
B5D32                             00000002
B5D33                             00000003
B5D34                             00000004
B5D35                             00000005
B5D36                             00000006
B5D37                             00000007
B5D4                              00000E7A
B5D40                             00000000
B5D41                             00000001
B5D42                             00000002
B5D43                             00000003
B5D44                             00000004
B5D45                             00000005
B5D46                             00000006
B5D47                             00000007
B5D5                              00000E7B
B5D50                             00000000
B5D51                             00000001
B5D52                             00000002
B5D53                             00000003
B5D54                             00000004
B5D55                             00000005
B5D56                             00000006
B5D57                             00000007
B5D6                              00000E7C
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 149


SYMBOL TABLE
  LABEL                             VALUE 

B5D60                             00000000
B5D61                             00000001
B5D62                             00000002
B5D63                             00000003
B5D64                             00000004
B5D65                             00000005
B5D66                             00000006
B5D67                             00000007
B5D7                              00000E7D
B5D70                             00000000
B5D71                             00000001
B5D72                             00000002
B5D73                             00000003
B5D74                             00000004
B5D75                             00000005
B5D76                             00000006
B5D77                             00000007
B5DLC                             00000E75
B5EIDH                            00000E73
B5EIDL                            00000E74
B5IE                              00000007
B5SIDH                            00000E71
B5SIDL                            00000E72
B5TXEN                            00000007
BAD_BREAK                         00000868
BANKED                            00000001
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BEGIN_EEPROM_READ                 
BEGIN_EEPROM_WRITE                
BE_AWAKE_NOW                      000026E0
BF                                00000000
BGST                              00000005
BIE0                              00000DFA
BIT_0                             00000002
BIT_1                             00000001
BIT_10                            00000001
BIT_11                            00000000
BIT_12                            00000007
BIT_13                            00000006
BIT_14                            00000005
BIT_15                            00000001
BIT_16                            00000000
BIT_17                            00000003
BIT_18                            00000001
BIT_19                            00000002
BIT_2                             00000000
BIT_3                             00000002
BIT_4                             00000007
BIT_5                             00000006
BIT_6                             00000005
BIT_7                             00000004
BIT_8                             00000003
BIT_9                             00000002
BIT_FADE_CYCLE                    00000020
BIT_FADE_DOWN                     00000040
BIT_FADE_UP                       00000080
BIT_L0                            00000002
BIT_L1                            00000000
BIT_L2                            00000005
BIT_L3                            00000000
BIT_L4                            00000005
BIT_MAX_OFF_TIME                  00000010
BIT_RX                            00000007
BIT_T_R                           00000003
BIT_X0                            00000003
BIT_X1                            00000001
BIT_X2                            00000004
BIT_X3                            00000004
BIT_X4                            00000004
BOR                               00000000
BREAK_CONFIRMED                   00000854
BRG16                             00000003
BRGCON1                           00000F70
BRGCON2                           00000F71
BRGCON3                           00000F72
BRGH                              00000002
BRK_DET                           0000082E
BRK_DET2                          00000826
BRP0                              00000000
BRP1                              00000001
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 150


SYMBOL TABLE
  LABEL                             VALUE 

BRP2                              00000002
BRP3                              00000003
BRP4                              00000004
BRP5                              00000005
BSEL0                             00000DF8
BSR                               00000FE0
BTN_FLG_ACTIVE                    00000003
BTN_FLG_LOCKED                    00000002
BTN_FLG_MASKED                    00000001
BTN_FLG_PRESSED                   00000000
BTN_IDX_L0                        00000001
BTN_IDX_L1                        00000003
BTN_IDX_L2                        00000005
BTN_IDX_L3                        00000007
BTN_IDX_L4                        00000009
BTN_IDX_X0                        00000000
BTN_IDX_X1                        00000002
BTN_IDX_X2                        00000004
BTN_IDX_X3                        00000006
BTN_IDX_X4                        00000008
BTN_X0_FLAGS                      00000000
BTN_X0_TIME_H                     00000000
BTN_X0_TIME_L                     00000000
BTN_X0_TIME_T                     00000000
BTN_X0_TIME_U                     00000000
C                                 00000000
C1INA                             00000001
C1INB                             00000000
C1INV                             00000004
C1OUT                             00000006
C2INA                             00000003
C2INB                             00000002
C2INV                             00000005
C2OUT                             00000007
CANCAP                            00000004
CANCON                            00000F6F
CANCON_RO0                        00000F5F
CANCON_RO1                        00000F4F
CANCON_RO2                        00000F3F
CANCON_RO3                        00000F2F
CANCON_RO4                        00000E7F
CANCON_RO5                        00000E6F
CANCON_RO6                        00000E5F
CANCON_RO7                        00000E4F
CANCON_RO8                        00000E3F
CANCON_RO9                        00000E2F
CANRX                             00000003
CANSTAT                           00000F6E
CANSTAT_RO0                       00000F5E
CANSTAT_RO1                       00000F4E
CANSTAT_RO2                       00000F3E
CANSTAT_RO3                       00000F2E
CANSTAT_RO4                       00000E7E
CANSTAT_RO5                       00000E6E
CANSTAT_RO6                       00000E5E
CANSTAT_RO7                       00000E4E
CANSTAT_RO8                       00000E3E
CANSTAT_RO9                       00000E2E
CANTX                             00000002
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CH                                00000014
CHAN_L0R                          00000003
CHAN_L1R                          00000007
CHAN_L2R                          0000000B
CHAN_L3R                          0000000F
CHAN_L4R                          00000013
CHAN_X0B                          00000002
CHAN_X0G                          00000001
CHAN_X0R                          00000000
CHAN_X1B                          00000006
CHAN_X1G                          00000005
CHAN_X1R                          00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 151


SYMBOL TABLE
  LABEL                             VALUE 

CHAN_X2B                          0000000A
CHAN_X2G                          00000009
CHAN_X2R                          00000008
CHAN_X3B                          0000000E
CHAN_X3G                          0000000D
CHAN_X3R                          0000000C
CHAN_X4B                          00000012
CHAN_X4G                          00000011
CHAN_X4R                          00000010
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIOCON                            00000F73
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CLKI                              00000007
CLKO                              00000006
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMD_BIT                           00000007
CMD_XPRIV                         000014BE
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
COMSTAT                           00000F74
CREN                              00000004
CS                                00000002
CSRC                              00000007
CUR_PRE                           00000015
CUR_PREH                          00000014
CUR_SLICE                         00000016
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREF_CVRCON                      00000004
CVREF_PORTA                       00000000
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
CYCLE_TMR_PERIOD                  00005D3D
D                                 00000005
DATA_ADDRESS                      00000005
DATA_BYTE                         00000A90
DB_CHK_7E                         00000AA4
DB_CHK_7F                         00000AAE
DB_CHK_LITERAL                    00000A9C
DB_HANDLER                        00000AB8
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEFAULT_TBL                       00014000
DELAY_1_12_SEC                    000002F6
DELAY_1_6_SEC                     000002FE
DFLC0                             00000000
DFLC1                             00000001
DFLC2                             00000002
DFLC3                             00000003
DFLC4                             00000004
DLC0                              00000000
DLC1                              00000001
DLC2                              00000002
DLC3                              00000003
DMX_18                            00002764
DMX_19                            00002796
DMX_BIT8                          00000000
DMX_DONE                          00002792
DMX_EN                            00000007
DMX_EXIT_TEMPORARILY              000026EC
DMX_FRAME                         00000005
DMX_NOT_FIRST                     0000274C
DMX_PASS_DOWN_SET_LVL             0000278A
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 152


SYMBOL TABLE
  LABEL                             VALUE 

DMX_RECEIVED_BYTE                 0000272C
DMX_RESUME                        0000271A
DMX_SLOTH                         00000008
DMX_SLOTL                         00000009
DMX_SLOT_REACHED                  00002762
DMX_SPEED                         00000006
DMX_ST_LSB                        0000275E
DMX_WEIRD_FRAME                   00002748
DONE                              00000001
DO_CMD_SLEEP                      00000DF2
DO_CMD_WAKE                       00000E1C
DO_TEST_MODE                      000008B2
DRAIN_M_S_TX_BLOCKING             000008AA
DRAIN_TR                          00000002
DRAIN_TRANSMITTER                 00000892
D_1_6_J                           00000306
D_1_6_K                           00000308
D_1_6_KK                          00000304
D_A                               00000005
D_FLASH                           00000102
D_NOT_A                           00000005
ECANCON                           00000F77
ECCP1                             00000004
ECCP1AS                           00000FB6
ECCP1CON                          00000FBA
ECCP1DEL                          00000FB7
ECCP1IE                           00000000
ECCP1IF                           00000000
ECCP1IP                           00000000
ECCP1M0                           00000000
ECCP1M1                           00000001
ECCP1M2                           00000002
ECCP1M3                           00000003
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
ECCPR1                            00000FBB
ECCPR1H                           00000FBC
ECCPR1L                           00000FBB
EDC1B0                            00000004
EDC1B1                            00000005
EEADR                             00000FA9
EEADRH                            00000FAA
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_SETTINGS_LEN               00000010
EEPROM_USER_END                   000003FF
EEPROM_USER_START                 00000010
EE_BAUD                           00000001
EE_DEV_ID                         00000002
EE_DMX_H                          00000005
EE_DMX_L                          00000006
EE_END                            0000000F
EE_LL_XX                          00000007
EE_PHASE_H                        00000003
EE_PHASE_L                        00000004
EE_RESERVED_8                     00000008
EE_RESERVED_9                     00000009
EE_RESERVED_A                     0000000A
EE_RESERVED_B                     0000000B
EE_RESERVED_C                     0000000C
EE_RESERVED_D                     0000000D
EE_RESERVED_E                     0000000E
EE_SENSOR_CFG                     00000007
EE_START                          00000000
EICODE0                           00000000
EICODE1                           00000001
EICODE1_ICODE0                    00000001
EICODE2                           00000002
EICODE2_ICODE1                    00000002
EICODE3                           00000003
EICODE3_ICODE2                    00000003
EICODE4                           00000004
EID0                              00000000
EID1                              00000001
EID10                             00000002
EID11                             00000003
EID12                             00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 153


SYMBOL TABLE
  LABEL                             VALUE 

EID13                             00000005
EID14                             00000006
EID15                             00000007
EID16                             00000000
EID17                             00000001
EID2                              00000002
EID3                              00000003
EID4                              00000004
EID5                              00000005
EID6                              00000006
EID7                              00000007
EID8                              00000000
EID9                              00000001
EIGHTBITSIOBUF                    0000001E
ENDRHI                            00000005
END_EEPROM_READ                   
END_EEPROM_WRITE                  
END_FADE_0                        00002196
END_FADE_1                        000021DC
END_FADE_10                       00002452
END_FADE_11                       00002498
END_FADE_12                       000024DE
END_FADE_13                       00002524
END_FADE_14                       0000256A
END_FADE_15                       000025B0
END_FADE_16                       000025F6
END_FADE_17                       0000263C
END_FADE_18                       00002682
END_FADE_19                       000026C8
END_FADE_2                        00002222
END_FADE_3                        00002268
END_FADE_4                        000022AE
END_FADE_5                        000022F4
END_FADE_6                        0000233A
END_FADE_7                        00002380
END_FADE_8                        000023C6
END_FADE_9                        0000240C
END_FRJC                          00000284
END_SERIAL_READ                   00000888
EPWM1M0                           00000006
EPWM1M1                           00000007
ERRIE                             00000005
ERRIF                             00000005
ERRIP                             00000005
ERR_ABORT                         00000924
ERR_BUG                           
ERR_CLASS_DEVICE                  00000004
ERR_CLASS_FATAL_RESET             00000003
ERR_CLASS_INT_COMMAND             00000005
ERR_CLASS_IN_VALID                00000002
ERR_CLASS_OVERRUN                 00000001
ERR_CMD_INCOMPLETE                00000910
ERR_COMMAND                       00000920
ERR_NOT_IMP                       00000918
ERR_SERIAL_FRAMING                000008F8
ERR_SERIAL_FULL                   00000908
ERR_SERIAL_OVERRUN                00000902
EWARN                             00000000
EWIN0                             00000000
EWIN1                             00000001
EWIN2                             00000002
EWIN3                             00000003
EWIN4                             00000004
EXID                              00000003
EXIDE                             00000003
EXIDEN                            00000003
F                                 00000005
F0BP_0                            00000000
F0BP_1                            00000001
F0BP_2                            00000002
F0BP_3                            00000003
F10BP_0                           00000000
F10BP_1                           00000001
F10BP_2                           00000002
F10BP_3                           00000003
F11BP_0                           00000004
F11BP_1                           00000005
F11BP_2                           00000006
F11BP_3                           00000007
F12BP_0                           00000000
F12BP_1                           00000001
F12BP_2                           00000002
F12BP_3                           00000003
F13BP_0                           00000004
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 154


SYMBOL TABLE
  LABEL                             VALUE 

F13BP_1                           00000005
F13BP_2                           00000006
F13BP_3                           00000007
F14BP_0                           00000000
F14BP_1                           00000001
F14BP_2                           00000002
F14BP_3                           00000003
F15BP_0                           00000004
F15BP_1                           00000005
F15BP_2                           00000006
F15BP_3                           00000007
F1BP_0                            00000004
F1BP_1                            00000005
F1BP_2                            00000006
F1BP_3                            00000007
F2BP_0                            00000000
F2BP_1                            00000001
F2BP_2                            00000002
F2BP_3                            00000003
F3BP_0                            00000004
F3BP_1                            00000005
F3BP_2                            00000006
F3BP_3                            00000007
F4BP_0                            00000000
F4BP_1                            00000001
F4BP_2                            00000002
F4BP_3                            00000003
F5BP_0                            00000004
F5BP_1                            00000005
F5BP_2                            00000006
F5BP_3                            00000007
F6BP_0                            00000000
F6BP_1                            00000001
F6BP_2                            00000002
F6BP_3                            00000003
F7BP_0                            00000004
F7BP_1                            00000005
F7BP_2                            00000006
F7BP_3                            00000007
F8BP_0                            00000000
F8BP_1                            00000001
F8BP_2                            00000002
F8BP_3                            00000003
F9BP_0                            00000004
F9BP_1                            00000005
F9BP_2                            00000006
F9BP_3                            00000007
FACTORY_RESET                     0000029C
FACTORY_RESET_FLASH               000002F4
FACTORY_RESET_JUMPER_CHECK        00000284
FACTORY_RESET_LOOP                000002C0
FADE_CYCLE                        00000005
FADE_DOWN                         00000006
FADE_UP                           00000007
FAST                              00000001
FERR                              00000002
FIFOEMPTY                         00000007
FIFOMWIE                          00000000
FIFOWM                            00000005
FIFOWMIE                          00000000
FIFOWMIF                          00000000
FIFOWMIP                          00000000
FIL0_0                            00000000
FIL0_1                            00000001
FIL10_0                           00000004
FIL10_1                           00000005
FIL11_0                           00000006
FIL11_1                           00000007
FIL12_0                           00000000
FIL12_1                           00000001
FIL13_0                           00000002
FIL13_1                           00000003
FIL14_0                           00000004
FIL14_1                           00000005
FIL15_0                           00000006
FIL15_1                           00000007
FIL1_0                            00000002
FIL1_1                            00000003
FIL2_0                            00000004
FIL2_1                            00000005
FIL3_0                            00000006
FIL3_1                            00000007
FIL4_0                            00000000
FIL4_1                            00000001
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 155


SYMBOL TABLE
  LABEL                             VALUE 

FIL5_0                            00000002
FIL5_1                            00000003
FIL6_0                            00000004
FIL6_1                            00000005
FIL7_0                            00000006
FIL7_1                            00000007
FIL8_0                            00000000
FIL8_1                            00000001
FIL9_0                            00000002
FIL9_1                            00000003
FILHIT0                           00000000
FILHIT0_TXPRI0                    00000000
FILHIT1                           00000001
FILHIT1_TXPRI1                    00000001
FILHIT2                           00000002
FILHIT2_RTREN                     00000002
FILHIT3                           00000003
FILHIT3_TXREQ                     00000003
FILHIT4                           00000004
FILHIT4_TXERR                     00000004
FLC0                              00000000
FLC1                              00000001
FLC2                              00000002
FLC3                              00000003
FLC4                              00000004
FLT0                              00000000
FP0                               00000000
FP1                               00000001
FP2                               00000002
FP3                               00000003
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HALT_MODE                         0000279A
HALT_SLEEP                        000027A8
HAS_ACTIVE                        00000000
HAS_OPTION                        00000000
HAS_POWER_CTRL                    00000000
HAS_SENSORS                       00000000
HAS_STATUS_LEDS                   00000000
HAS_T_R                           00000001
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
I                                 0000001F
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ICODE0                            00000000
ICODE1                            00000001
ICODE2                            00000002
ICODE3                            00000003
ICODE4                            00000004
IDLEN                             00000007
INCYC                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INHIBIT_OUTPUT                    00000002
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 156


SYMBOL TABLE
  LABEL                             VALUE 

INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTERP_START                      00000948
INTSCR                            00000007
INTSRC                            00000007
INT_HIGH                          0000002A
INT_LOW                           00000000
INT_RX                            00000014
INT_RX_END                        0000001E
INT_TMR2                          00000046
INT_TMR2_DONE                     00000060
INT_TMR2_END                      00000062
INT_TMR2_MSB                      0000006E
INT_TMR2_NEXT                     0000005C
INT_TX                            0000000A
INT_TX_END                        00000014
INT_ZC                            0000002A
INT_ZC_END                        00000046
INVALID_SSR                       00000006
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IPR3                              00000FA5
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
IRXIE                             00000007
IRXIF                             00000007
IRXIP                             00000007
ISR_TMPL_BSR                      00000001
ISR_TMPL_STATUS                   00000000
ISR_TMPL_WREG                     00000002
IVRST                             00000005
J                                 00000020
JTOFF                             00000001
JTOFF_FILHIT1                     00000001
K                                 00000021
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
KK                                00000022
LAST_ERROR                        00000013
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 157


SYMBOL TABLE
  LABEL                             VALUE 

LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LATD                              00000F8C
LATD0                             00000000
LATD1                             00000001
LATD2                             00000002
LATD3                             00000003
LATD4                             00000004
LATD5                             00000005
LATD6                             00000006
LATD7                             00000007
LATE                              00000F8D
LATE0                             00000000
LATE1                             00000001
LATE2                             00000002
LITERAL_ESC                       00000000
LUMOS_ARCH                        LUMOS_ARCH_4685
LUMOS_ARCH_14K50                  (0x1450)
LUMOS_ARCH_4685                   (0x4685)
LUMOS_CHIP_4CHANNEL               0x44
LUMOS_CHIP_MASTER                 0x41
LUMOS_CHIP_QSCC                   0x45
LUMOS_CHIP_QSRC                   0x46
LUMOS_CHIP_SLAVE                  0x42
LUMOS_CHIP_STANDALONE             0x43
LUMOS_CHIP_TYPE                   LUMOS_CHIP_QSRC
LUMOS_CONFIG_INC                  
LUMOS_INIT                        00000000
LUMOS_INTERNAL                    0x58
LUMOS_SET_SSR_INC                 
LUMOS_SLICE_TIMER                 LUMOS_INTERNAL
LUMOS_ZC                          0x55
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAIN                              00000800
MAIN_DATA                         00000500
MAX_OFF_TIME                      00000004
MDSEL0                            00000006
MDSEL1                            00000007
MSB_ESC                           00000001
MSEL0                             00000DF0
MSEL1                             00000DF1
MSEL2                             00000DF2
MSEL3                             00000DF3
MY_ADDRESS                        00000003
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_CS                            00000002
NOT_DMX                           00000864
NOT_DONE                          00000001
NOT_FIFOEMPTY                     00000007
NOT_MY_SSR                        00000007
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RD                            00000000
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 158


SYMBOL TABLE
  LABEL                             VALUE 

NOT_W                             00000002
NOT_WR                            00000001
NOT_WRITE                         00000002
NUM_CHANNELS                      (.20)
N_BUTTONS                         0000000A
OBF                               00000006
OERR                              00000001
ON_OFF_ON                         00000AE0
ON_OFF_YY_DATA                    00000AC6
OPMODE0                           00000005
OPMODE1                           00000006
OPMODE2                           00000007
OPTION_DEBOUNCE                   00000018
OPTION_HOLD                       00000019
OSC1                              00000007
OSC2                              00000006
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OUTPUT_CHAN_MAX                   00000013
OV                                00000003
P                                 00000004
P1A                               00000004
P1B                               00000005
P1C                               00000006
P1D                               00000007
PASS_DOWN_ON_OFF                  00000AE6
PASS_DOWN_SET_LVL                 00000B16
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PHASE_OFFSETH                     00000004
PHASE_OFFSETL                     00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIE3                              00000FA3
PIR1                              00000F9E
PIR2                              00000FA1
PIR3                              00000FA4
PLAT_0                            00000F8B
PLAT_1                            00000F8B
PLAT_10                           00000F8A
PLAT_11                           00000F8D
PLAT_12                           00000F8C
PLAT_13                           00000F8C
PLAT_14                           00000F8C
PLAT_15                           00000F8D
PLAT_16                           00000F8A
PLAT_17                           00000F8C
PLAT_18                           00000F8C
PLAT_19                           00000F8C
PLAT_2                            00000F8B
PLAT_3                            00000F8D
PLAT_4                            00000F8A
PLAT_5                            00000F8A
PLAT_6                            00000F8A
PLAT_7                            00000F8A
PLAT_8                            00000F8A
PLAT_9                            00000F8A
PLAT_T_R                          00000F8B
PLLEN                             00000006
PLUSW0                            00000FEB
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 159


SYMBOL TABLE
  LABEL                             VALUE 

PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
PORT_L0                           00000F80
PORT_L1                           00000F80
PORT_L2                           00000F80
PORT_L3                           00000F83
PORT_L4                           00000F82
PORT_RX                           00000F82
PORT_T_R                          00000F82
PORT_X0                           00000F80
PORT_X1                           00000F80
PORT_X2                           00000F80
PORT_X3                           00000F82
PORT_X4                           00000F83
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PRECYC                            00000006
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRE_PRIV                          00000001
PRIV_FORBID                       00000003
PRIV_MODE                         00000004
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEG0                            00000000
PRSEG1                            00000001
PRSEG2                            00000002
PRSEN                             00000007
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
QSCC_BITS_INC                     
QSCC_CMD5_START                   00000000
QSCC_G_C_1                        00000956
QSCC_G_C_2                        00000964
QSCC_INIT                         00000000
QSCC_INT_END                      0000006C
QSCC_INT_TMR1                     00000062
QSCC_MAIN                         00000000
QSCC_PORT                         (1)
QSCC_START                        00000000
QS_BTN_TMR_T                      00000024
QS_BTN_TMR_U                      00000025
QS_FLAG_DOING120                  00000002
QS_FLAG_ON_120_S                  00000001
QS_FLAG_SCANNING                  00000000
QS_QFLG_BUTTONS                   00000002
QS_QFLG_PING                      00000001
QS_QFLG_STOP                      00000000
QS_QUERY_DONE                     00002006
QS_QUERY_PING                     00001FFA
QS_SEND_BUTTON_TIME               
QS_SENS_CONF                      00000028
QS_SENS_MASK                      0000003F
QS_SENS_PORT                      00000F80
QS_SENS_STAND                     00000006
QS_STOP_SCANNER                   00000000
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 160


SYMBOL TABLE
  LABEL                             VALUE 

QUIZSHOW_DATA                     00000C00
QUIZSHOW_FLAGS                    00000026
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0_B0DLC                         00000004
RB0_B1DLC                         00000004
RB0_B2DLC                         00000004
RB0_B3DLC                         00000004
RB0_B4DLC                         00000004
RB0_B5DLC                         00000004
RB0_DDRB                          00000000
RB0_PORTB                         00000000
RB0_RXB0DLC                       00000004
RB0_RXB1DLC                       00000004
RB0_TRISB                         00000000
RB1_B0DLC                         00000005
RB1_B1DLC                         00000005
RB1_B2DLC                         00000005
RB1_B3DLC                         00000005
RB1_B4DLC                         00000005
RB1_B5DLC                         00000005
RB1_DDRB                          00000001
RB1_PORTB                         00000001
RB1_RXB0DLC                       00000005
RB1_RXB1DLC                       00000005
RB1_TRISB                         00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
READ_EEPROM_DATA                  
READ_EEPROM_DATA_REG              
READ_EEPROM_DATA_W                
READ_EEPROM_DATA_W_INC            
READ_WRITE                        00000002
REC0                              00000000
REC1                              00000001
REC2                              00000002
REC3                              00000003
REC4                              00000004
REC5                              00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 161


SYMBOL TABLE
  LABEL                             VALUE 

REC6                              00000006
REC7                              00000007
RECEIVE_COMMAND                   00000928
REQOP0                            00000005
REQOP1                            00000006
REQOP2                            00000007
RESRB0                            00000004
RESRB1                            00000005
RI                                00000004
ROLE_MASTER                       (0)
ROLE_SLAVE                        (0)
ROLE_STANDALONE                   (1)
RSEN                              00000001
RTREN                             00000002
RTRRO                             00000005
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXB0CON                           00000F60
RXB0D0                            00000F66
RXB0D00                           00000000
RXB0D01                           00000001
RXB0D02                           00000002
RXB0D03                           00000003
RXB0D04                           00000004
RXB0D05                           00000005
RXB0D06                           00000006
RXB0D07                           00000007
RXB0D1                            00000F67
RXB0D10                           00000000
RXB0D11                           00000001
RXB0D12                           00000002
RXB0D13                           00000003
RXB0D14                           00000004
RXB0D15                           00000005
RXB0D16                           00000006
RXB0D17                           00000007
RXB0D2                            00000F68
RXB0D20                           00000000
RXB0D21                           00000001
RXB0D22                           00000002
RXB0D23                           00000003
RXB0D24                           00000004
RXB0D25                           00000005
RXB0D26                           00000006
RXB0D27                           00000007
RXB0D3                            00000F69
RXB0D30                           00000000
RXB0D31                           00000001
RXB0D32                           00000002
RXB0D33                           00000003
RXB0D34                           00000004
RXB0D35                           00000005
RXB0D36                           00000006
RXB0D37                           00000007
RXB0D4                            00000F6A
RXB0D40                           00000000
RXB0D41                           00000001
RXB0D42                           00000002
RXB0D43                           00000003
RXB0D44                           00000004
RXB0D45                           00000005
RXB0D46                           00000006
RXB0D47                           00000007
RXB0D5                            00000F6B
RXB0D50                           00000000
RXB0D51                           00000001
RXB0D52                           00000002
RXB0D53                           00000003
RXB0D54                           00000004
RXB0D55                           00000005
RXB0D56                           00000006
RXB0D57                           00000007
RXB0D6                            00000F6C
RXB0D60                           00000000
RXB0D61                           00000001
RXB0D62                           00000002
RXB0D63                           00000003
RXB0D64                           00000004
RXB0D65                           00000005
RXB0D66                           00000006
RXB0D67                           00000007
RXB0D7                            00000F6D
RXB0D70                           00000000
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 162


SYMBOL TABLE
  LABEL                             VALUE 

RXB0D71                           00000001
RXB0D72                           00000002
RXB0D73                           00000003
RXB0D74                           00000004
RXB0D75                           00000005
RXB0D76                           00000006
RXB0D77                           00000007
RXB0DBEN                          00000002
RXB0DBEN_FILHIT2                  00000002
RXB0DLC                           00000F65
RXB0EIDH                          00000F63
RXB0EIDL                          00000F64
RXB0IE                            00000000
RXB0IF                            00000000
RXB0IP                            00000000
RXB0OVFL                          00000007
RXB0OVFL_NOT_FIFOEMPTY            00000007
RXB0SIDH                          00000F61
RXB0SIDL                          00000F62
RXB1CON                           00000F50
RXB1D0                            00000F56
RXB1D00                           00000000
RXB1D01                           00000001
RXB1D02                           00000002
RXB1D03                           00000003
RXB1D04                           00000004
RXB1D05                           00000005
RXB1D06                           00000006
RXB1D07                           00000007
RXB1D1                            00000F57
RXB1D10                           00000000
RXB1D11                           00000001
RXB1D12                           00000002
RXB1D13                           00000003
RXB1D14                           00000004
RXB1D15                           00000005
RXB1D16                           00000006
RXB1D17                           00000007
RXB1D2                            00000F58
RXB1D20                           00000000
RXB1D21                           00000001
RXB1D22                           00000002
RXB1D23                           00000003
RXB1D24                           00000004
RXB1D25                           00000005
RXB1D26                           00000006
RXB1D27                           00000007
RXB1D3                            00000F59
RXB1D30                           00000000
RXB1D31                           00000001
RXB1D32                           00000002
RXB1D33                           00000003
RXB1D34                           00000004
RXB1D35                           00000005
RXB1D36                           00000006
RXB1D37                           00000007
RXB1D4                            00000F5A
RXB1D40                           00000000
RXB1D41                           00000001
RXB1D42                           00000002
RXB1D43                           00000003
RXB1D44                           00000004
RXB1D45                           00000005
RXB1D46                           00000006
RXB1D47                           00000007
RXB1D5                            00000F5B
RXB1D50                           00000000
RXB1D51                           00000001
RXB1D52                           00000002
RXB1D53                           00000003
RXB1D54                           00000004
RXB1D55                           00000005
RXB1D56                           00000006
RXB1D57                           00000007
RXB1D6                            00000F5C
RXB1D60                           00000000
RXB1D61                           00000001
RXB1D62                           00000002
RXB1D63                           00000003
RXB1D64                           00000004
RXB1D65                           00000005
RXB1D66                           00000006
RXB1D67                           00000007
RXB1D7                            00000F5D
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 163


SYMBOL TABLE
  LABEL                             VALUE 

RXB1D70                           00000000
RXB1D71                           00000001
RXB1D72                           00000002
RXB1D73                           00000003
RXB1D74                           00000004
RXB1D75                           00000005
RXB1D76                           00000006
RXB1D77                           00000007
RXB1DLC                           00000F55
RXB1EIDH                          00000F53
RXB1EIDL                          00000F54
RXB1IE                            00000001
RXB1IF                            00000001
RXB1IP                            00000001
RXB1OVFL                          00000006
RXB1SIDH                          00000F51
RXB1SIDL                          00000F52
RXBODBEN                          00000002
RXBP                              00000003
RXBnIE                            00000001
RXBnIF                            00000001
RXBnIP                            00000001
RXBnOVFL                          00000006
RXDATA_FULL                       00000003
RXDATA_QUEUE                      00000001
RXERRCNT                          00000F75
RXF0EIDH                          00000F02
RXF0EIDL                          00000F03
RXF0EN                            00000000
RXF0SIDH                          00000F00
RXF0SIDL                          00000F01
RXF10EIDH                         00000D76
RXF10EIDL                         00000D77
RXF10EN                           00000002
RXF10SIDH                         00000D74
RXF10SIDL                         00000D75
RXF11EIDH                         00000D7A
RXF11EIDL                         00000D7B
RXF11EN                           00000003
RXF11SIDH                         00000D78
RXF11SIDL                         00000D79
RXF12EIDH                         00000D82
RXF12EIDL                         00000D83
RXF12EN                           00000004
RXF12SIDH                         00000D80
RXF12SIDL                         00000D81
RXF13EIDH                         00000D86
RXF13EIDL                         00000D87
RXF13EN                           00000005
RXF13SIDH                         00000D84
RXF13SIDL                         00000D85
RXF14EIDH                         00000D8A
RXF14EIDL                         00000D8B
RXF14EN                           00000006
RXF14SIDH                         00000D88
RXF14SIDL                         00000D89
RXF15EIDH                         00000D92
RXF15EIDL                         00000D93
RXF15EN                           00000007
RXF15SIDH                         00000D90
RXF15SIDL                         00000D91
RXF1EIDH                          00000F06
RXF1EIDL                          00000F07
RXF1EN                            00000001
RXF1SIDH                          00000F04
RXF1SIDL                          00000F05
RXF2EIDH                          00000F0A
RXF2EIDL                          00000F0B
RXF2EN                            00000002
RXF2SIDH                          00000F08
RXF2SIDL                          00000F09
RXF3EIDH                          00000F0E
RXF3EIDL                          00000F0F
RXF3EN                            00000003
RXF3SIDH                          00000F0C
RXF3SIDL                          00000F0D
RXF4EIDH                          00000F12
RXF4EIDL                          00000F13
RXF4EN                            00000004
RXF4SIDH                          00000F10
RXF4SIDL                          00000F11
RXF5EIDH                          00000F16
RXF5EIDL                          00000F17
RXF5EN                            00000005
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 164


SYMBOL TABLE
  LABEL                             VALUE 

RXF5SIDH                          00000F14
RXF5SIDL                          00000F15
RXF6EIDH                          00000D62
RXF6EIDL                          00000D63
RXF6EN                            00000006
RXF6SIDH                          00000D60
RXF6SIDL                          00000D61
RXF7EIDH                          00000D66
RXF7EIDL                          00000D67
RXF7EN                            00000007
RXF7SIDH                          00000D64
RXF7SIDL                          00000D65
RXF8EIDH                          00000D6A
RXF8EIDL                          00000D6B
RXF8EN                            00000000
RXF8SIDH                          00000D68
RXF8SIDL                          00000D69
RXF9EIDH                          00000D72
RXF9EIDL                          00000D73
RXF9EN                            00000001
RXF9SIDH                          00000D70
RXF9SIDL                          00000D71
RXFBCON0                          00000DE0
RXFBCON1                          00000DE1
RXFBCON2                          00000DE2
RXFBCON3                          00000DE3
RXFBCON4                          00000DE4
RXFBCON5                          00000DE5
RXFBCON6                          00000DE6
RXFBCON7                          00000DE7
RXFCON0                           00000DD4
RXFCON1                           00000DD5
RXFUL                             00000007
RXFUL_TXBIF                       00000007
RXM0                              00000005
RXM0EIDH                          00000F1A
RXM0EIDL                          00000F1B
RXM0SIDH                          00000F18
RXM0SIDL                          00000F19
RXM0_RTRRO                        00000005
RXM1                              00000006
RXM1EIDH                          00000F1E
RXM1EIDL                          00000F1F
RXM1SIDH                          00000F1C
RXM1SIDL                          00000F1D
RXM1_TXABT                        00000006
RXRTR                             00000006
RXRTRRO_B0CON                     00000005
RXRTRRO_B1CON                     00000005
RXRTRRO_B2CON                     00000005
RXRTRRO_B3CON                     00000005
RXRTRRO_B4CON                     00000005
RXRTRRO_B5CON                     00000005
RXRTRRO_FILHIT3                   00000003
RXRTRRO_RXB0CON                   00000003
RXRTRRO_RXB1CON                   00000003
RXRTRRO_TXLARB                    00000005
RXRTR_TXRTR                       00000006
RXWARN                            00000001
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
S0_CMD0                           00000978
S0_CMD1                           00000A44
S0_CMD2                           00000A50
S0_CMD3                           00000A5A
S0_CMD4                           00000A64
S0_CMD5                           00000A6E
S0_CMD6                           00000A76
S0_CMD7                           00000A7E
S0_CMD_ERR                        00000A88
S10_DATA                          00001528
S11_DATA                          00001534
S12_DATA                          00001540
S13_DATA                          0000154C
S14_DATA                          00001558
S15_DATA                          00001574
S16_DATA                          0000157C
S17_DATA                          00001584
S17_DATA_NIL                      00001584
S18_DATA_NIL                      0000158C
S19_DATA                          00001594
S1_DATA                           00000ABE
S20_DATA                          00002018
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 165


SYMBOL TABLE
  LABEL                             VALUE 

S21_DATA                          00002024
S22_DATA                          00002082
S2_DATA                           00000AEA
S3_DATA                           00000B00
S4_DATA                           00000B1E
S5_DATA                           00000B40
S6_0_DATA                         00000B76
S6_0_DATA_N_OK                    00000B8C
S6_0_UPDATE_MASTER                00000BA0
S6_0_UPDATE_NEXT                  00000BBC
S6_10_DATA                        000011E2
S6_10_DEF_SENS                    000011F6
S6_10_VALID                       000011F0
S6_11_CLR_SEQ                     00001212
S6_11_DATA                        000011FE
S6_11_VALID                       0000120C
S6_12_DATA                        00001222
S6_12_DEF_SEQ                     00001246
S6_12_VALID                       0000122E
S6_12_VALID2                      00001240
S6_13_DATA                        00001256
S6_13_VALID                       00001264
S6_14_DATA                        0000127C
S6_14_DATA_QS                     0000127C
S6_14_DISP_TEXT                   00001290
S6_14_VALID                       0000128A
S6_15_DATA                        00001294
S6_15_DISP_BITMAP                 000012A8
S6_15_VALID                       000012A2
S6_16_CF_SET_QS_PARAMS            000012C0
S6_16_DATA                        000012AC
S6_16_VALID                       000012BA
S6_17_DATA                        000012CC
S6_1_CONFIGURE                    00000BEE
S6_1_DATA                         00000BCC
S6_1_VALID_1                      00000BDA
S6_1_VALID_2                      00000BE0
S6_2_DATA                         00000C52
S6_2_SET_BAUD                     00000C74
S6_2_VALID1                       00000C60
S6_2_VALID2                       00000C66
S6_3_DATA                         00000CB6
S6_3_HALT                         00000CE2
S6_3_RESET                        00000CCA
S6_3_VALID                        00000CC4
S6_4_DATA                         00000CE4
S6_4_SET_PHASE                    00000CF8
S6_4_VALID                        00000CF2
S6_5_ADDR                         00000D7E
S6_5_DATA                         00000D6A
S6_5_VALID                        00000D78
S6_6_DATA                         00000DD0
S6_6_SLEEP                        00000DE4
S6_6_VALID                        00000DDE
S6_7_DATA                         00000DFA
S6_7_VALID                        00000E08
S6_7_WAKE                         00000E0E
S6_8_DATA                         00000E28
S6_8_SHUTDOWN                     00000E3C
S6_8_VALID                        00000E36
S6_8_X                            00000E20
S6_9_DATA                         00000E4C
S6_9_QUERY                        00000E60
S6_9_VALID                        00000E5A
S6_DATA                           00000B5E
S6_KEEP_LOOKING                   000012D6
S6_RESTART                        000012D4
S7_DATA                           000012EE
S8B_CHK_7E1                       00000E92
S8B_CHK_7E10                      00001172
S8B_CHK_7E11                      000011B0
S8B_CHK_7E12                      0000165E
S8B_CHK_7E13                      0000169C
S8B_CHK_7E14                      000016DA
S8B_CHK_7E15                      00001718
S8B_CHK_7E16                      00001756
S8B_CHK_7E17                      00001794
S8B_CHK_7E18                      000017D2
S8B_CHK_7E19                      00001810
S8B_CHK_7E2                       00000ECE
S8B_CHK_7E20                      0000184E
S8B_CHK_7E21                      0000188C
S8B_CHK_7E22                      000018CA
S8B_CHK_7E23                      00001908
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 166


SYMBOL TABLE
  LABEL                             VALUE 

S8B_CHK_7E24                      00001946
S8B_CHK_7E25                      00001984
S8B_CHK_7E26                      000019C2
S8B_CHK_7E27                      00001A00
S8B_CHK_7E28                      00001A3E
S8B_CHK_7E29                      00001A7C
S8B_CHK_7E3                       00000F16
S8B_CHK_7E30                      00001ABA
S8B_CHK_7E31                      00001AF8
S8B_CHK_7E32                      00001B36
S8B_CHK_7E33                      00001B74
S8B_CHK_7E34                      00001BB2
S8B_CHK_7E35                      00001BF0
S8B_CHK_7E36                      00001C2E
S8B_CHK_7E37                      00001C6C
S8B_CHK_7E38                      00001CAA
S8B_CHK_7E39                      00001CE8
S8B_CHK_7E4                       00000F54
S8B_CHK_7E40                      00001D26
S8B_CHK_7E41                      00001D64
S8B_CHK_7E42                      00001DA2
S8B_CHK_7E43                      00001DE0
S8B_CHK_7E44                      00001E1E
S8B_CHK_7E45                      00001E5C
S8B_CHK_7E46                      00001E9A
S8B_CHK_7E47                      00001ED8
S8B_CHK_7E48                      00001F16
S8B_CHK_7E49                      00001F54
S8B_CHK_7E5                       00000F98
S8B_CHK_7E50                      00001F92
S8B_CHK_7E51                      00001FD0
S8B_CHK_7E6                       00000FE0
S8B_CHK_7E7                       0000101E
S8B_CHK_7E8                       00001072
S8B_CHK_7E9                       00001116
S8B_CHK_MSB1                      00000EA6
S8B_CHK_MSB10                     00001186
S8B_CHK_MSB11                     000011C4
S8B_CHK_MSB12                     00001672
S8B_CHK_MSB13                     000016B0
S8B_CHK_MSB14                     000016EE
S8B_CHK_MSB15                     0000172C
S8B_CHK_MSB16                     0000176A
S8B_CHK_MSB17                     000017A8
S8B_CHK_MSB18                     000017E6
S8B_CHK_MSB19                     00001824
S8B_CHK_MSB2                      00000EE2
S8B_CHK_MSB20                     00001862
S8B_CHK_MSB21                     000018A0
S8B_CHK_MSB22                     000018DE
S8B_CHK_MSB23                     0000191C
S8B_CHK_MSB24                     0000195A
S8B_CHK_MSB25                     00001998
S8B_CHK_MSB26                     000019D6
S8B_CHK_MSB27                     00001A14
S8B_CHK_MSB28                     00001A52
S8B_CHK_MSB29                     00001A90
S8B_CHK_MSB3                      00000F2A
S8B_CHK_MSB30                     00001ACE
S8B_CHK_MSB31                     00001B0C
S8B_CHK_MSB32                     00001B4A
S8B_CHK_MSB33                     00001B88
S8B_CHK_MSB34                     00001BC6
S8B_CHK_MSB35                     00001C04
S8B_CHK_MSB36                     00001C42
S8B_CHK_MSB37                     00001C80
S8B_CHK_MSB38                     00001CBE
S8B_CHK_MSB39                     00001CFC
S8B_CHK_MSB4                      00000F68
S8B_CHK_MSB40                     00001D3A
S8B_CHK_MSB41                     00001D78
S8B_CHK_MSB42                     00001DB6
S8B_CHK_MSB43                     00001DF4
S8B_CHK_MSB44                     00001E32
S8B_CHK_MSB45                     00001E70
S8B_CHK_MSB46                     00001EAE
S8B_CHK_MSB47                     00001EEC
S8B_CHK_MSB48                     00001F2A
S8B_CHK_MSB49                     00001F68
S8B_CHK_MSB5                      00000FAC
S8B_CHK_MSB50                     00001FA6
S8B_CHK_MSB51                     00001FE4
S8B_CHK_MSB6                      00000FF4
S8B_CHK_MSB7                      00001032
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 167


SYMBOL TABLE
  LABEL                             VALUE 

S8B_CHK_MSB8                      00001086
S8B_CHK_MSB9                      0000112A
S8B_END1                          00000EB8
S8B_END10                         00001198
S8B_END11                         000011D6
S8B_END12                         00001684
S8B_END13                         000016C2
S8B_END14                         00001700
S8B_END15                         0000173E
S8B_END16                         0000177C
S8B_END17                         000017BA
S8B_END18                         000017F8
S8B_END19                         00001836
S8B_END2                          00000EF4
S8B_END20                         00001874
S8B_END21                         000018B2
S8B_END22                         000018F0
S8B_END23                         0000192E
S8B_END24                         0000196C
S8B_END25                         000019AA
S8B_END26                         000019E8
S8B_END27                         00001A26
S8B_END28                         00001A64
S8B_END29                         00001AA2
S8B_END3                          00000F3C
S8B_END30                         00001AE0
S8B_END31                         00001B1E
S8B_END32                         00001B5C
S8B_END33                         00001B9A
S8B_END34                         00001BD8
S8B_END35                         00001C16
S8B_END36                         00001C54
S8B_END37                         00001C92
S8B_END38                         00001CD0
S8B_END39                         00001D0E
S8B_END4                          00000F7A
S8B_END40                         00001D4C
S8B_END41                         00001D8A
S8B_END42                         00001DC8
S8B_END43                         00001E06
S8B_END44                         00001E44
S8B_END45                         00001E82
S8B_END46                         00001EC0
S8B_END47                         00001EFE
S8B_END48                         00001F3C
S8B_END49                         00001F7A
S8B_END5                          00000FBE
S8B_END50                         00001FB8
S8B_END51                         00001FF6
S8B_END6                          00001006
S8B_END7                          00001044
S8B_END8                          00001098
S8B_END9                          0000113C
S8B_LABEL                         00000034
S8B_SEND_NORMAL1                  00000EB2
S8B_SEND_NORMAL10                 00001192
S8B_SEND_NORMAL11                 000011D0
S8B_SEND_NORMAL12                 0000167E
S8B_SEND_NORMAL13                 000016BC
S8B_SEND_NORMAL14                 000016FA
S8B_SEND_NORMAL15                 00001738
S8B_SEND_NORMAL16                 00001776
S8B_SEND_NORMAL17                 000017B4
S8B_SEND_NORMAL18                 000017F2
S8B_SEND_NORMAL19                 00001830
S8B_SEND_NORMAL2                  00000EEE
S8B_SEND_NORMAL20                 0000186E
S8B_SEND_NORMAL21                 000018AC
S8B_SEND_NORMAL22                 000018EA
S8B_SEND_NORMAL23                 00001928
S8B_SEND_NORMAL24                 00001966
S8B_SEND_NORMAL25                 000019A4
S8B_SEND_NORMAL26                 000019E2
S8B_SEND_NORMAL27                 00001A20
S8B_SEND_NORMAL28                 00001A5E
S8B_SEND_NORMAL29                 00001A9C
S8B_SEND_NORMAL3                  00000F36
S8B_SEND_NORMAL30                 00001ADA
S8B_SEND_NORMAL31                 00001B18
S8B_SEND_NORMAL32                 00001B56
S8B_SEND_NORMAL33                 00001B94
S8B_SEND_NORMAL34                 00001BD2
S8B_SEND_NORMAL35                 00001C10
S8B_SEND_NORMAL36                 00001C4E
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 168


SYMBOL TABLE
  LABEL                             VALUE 

S8B_SEND_NORMAL37                 00001C8C
S8B_SEND_NORMAL38                 00001CCA
S8B_SEND_NORMAL39                 00001D08
S8B_SEND_NORMAL4                  00000F74
S8B_SEND_NORMAL40                 00001D46
S8B_SEND_NORMAL41                 00001D84
S8B_SEND_NORMAL42                 00001DC2
S8B_SEND_NORMAL43                 00001E00
S8B_SEND_NORMAL44                 00001E3E
S8B_SEND_NORMAL45                 00001E7C
S8B_SEND_NORMAL46                 00001EBA
S8B_SEND_NORMAL47                 00001EF8
S8B_SEND_NORMAL48                 00001F36
S8B_SEND_NORMAL49                 00001F74
S8B_SEND_NORMAL5                  00000FB8
S8B_SEND_NORMAL50                 00001FB2
S8B_SEND_NORMAL51                 00001FF0
S8B_SEND_NORMAL6                  00001000
S8B_SEND_NORMAL7                  0000103E
S8B_SEND_NORMAL8                  00001092
S8B_SEND_NORMAL9                  00001136
S8_DATA                           000012FA
S8_PASS_DOWN_RAMP_LVL             00001334
S9_CF_ADDR                        00001510
S9_CF_PHASE                       000014F8
S9_DATA                           0000133C
S9_DO_PRIV_CMD                    00001456
S9_INTERNAL_CMD                   00001446
S9_PRIV_0                         00001464
S9_PRIV_0X                        0000146A
S9_PRIV_1                         00001472
S9_PRIV_2                         0000148A
S9_PRIV_3                         000014A2
S9_PRIV_4                         000014BA
S9_PRIV_5                         000014C4
S9_PRIV_6                         000014DC
S9_PRIV_6_QS_PARAM                000014DC
S9_PRIV_7                         000014F4
S9_PRIV_CMD                       0000144A
S9_X0_SLEEP                       0000134C
S9_X1_WAKE                        00001360
S9_X2_SHUTDOWN                    00001378
S9_X3_QUERY                       00001390
S9_X4_DEF_SEQ                     000013A8
S9_X5_EXEC_SEQ                    000013B2
S9_X6_DEF_SENS                    000013BC
S9_X7_MSK_SENS                    000013D4
S9_X8_CLR_SEQ                     000013DE
S9_X9_XPRIV                       000013F6
S9_XA_ERR_COMMAND                 000013FE
S9_XA_QS_QUERY                    000013FE
S9_XB_BTN_MASK                    00001408
S9_XC_DISP_TEXT                   00001412
S9_XD_DISP_BITMAP                 0000142A
S9_XE_ERR_COMMAND                 00001442
SAM                               00000006
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDFLC                             00000DD8
SDI                               00000004
SDO                               00000005
SEG1PH0                           00000003
SEG1PH1                           00000004
SEG1PH2                           00000005
SEG2PH0                           00000000
SEG2PH1                           00000001
SEG2PH2                           00000002
SEG2PHT                           00000007
SEG2PHTS                          00000007
SEN                               00000000
SENDB                             00000003
SEND_8_BIT_W                      
SEQ_DATA                          00000600
SET_EEPROM_ADDRESS                
SET_SSR_BLINK_FADE                
SET_SSR_DMX_MODE                  
SET_SSR_NORMAL_MODE               
SET_SSR_OFF                       
SET_SSR_PATTERN                   
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 169


SYMBOL TABLE
  LABEL                             VALUE 

SET_SSR_RAPID_FADE                
SET_SSR_RAPID_FLASH               
SET_SSR_SLOW_FADE                 
SET_SSR_SLOW_FLASH                
SET_SSR_STEADY                    
SET_SSR_VALUE                     
SID0                              00000005
SID1                              00000006
SID10                             00000007
SID2                              00000007
SID3                              00000000
SID4                              00000001
SID5                              00000002
SID6                              00000003
SID7                              00000004
SID8                              00000005
SID9                              00000006
SIO_115200                        00000009
SIO_1200                          00000002
SIO_19200                         00000006
SIO_2400                          00000003
SIO_250000                        0000000A
SIO_300                           00000000
SIO_38400                         00000007
SIO_4800                          00000004
SIO_57600                         00000008
SIO_600                           00000001
SIO_9600                          00000005
SIO_DATA_START                    00000300
SIO_ECHO                          00000000
SIO_ECHO_W                        00000000
SIO_FERR                          00000005
SIO_FLUSH_INPUT                   00000000
SIO_FLUSH_OUTPUT                  00000000
SIO_GETCHAR                       00000000
SIO_GETCHAR_W                     00000000
SIO_INIT                          00000000
SIO_INPUT                         00000000
SIO_NEWLINE                       00000000
SIO_ORUN                          00000004
SIO_OUTPUT                        00000000
SIO_PRINT_HEX                     00000000
SIO_PRINT_HEX_W                   00000000
SIO_PUTCHAR                       00000000
SIO_PUTCHAR_W                     00000000
SIO_READ                          00000000
SIO_READ_W                        00000000
SIO_RECV                          00000000
SIO_RX_BUFFER_START               00000200
SIO_SEND                          00000000
SIO_SET_BAUD_W                    00000000
SIO_STATUS                        00000000
SIO_TABLE_START                   00015000
SIO_TX_BUFFER_START               00000100
SIO_WRITE                         00000000
SIO_WRITE_W                       00000000
SJW0                              00000006
SJW1                              00000007
SLEEP_MODE                        00000003
SLICE_TMR_PERIOD                  0000009F
SLICE_UPD                         00000005
SMP                               00000007
SND8BIT                           
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SRR                               00000004
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 170


SYMBOL TABLE
  LABEL                             VALUE 

SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
SSR_00_COUNTER                    00000450
SSR_00_FLAGS                      00000414
SSR_00_SPEED                      0000043C
SSR_00_STEP                       00000428
SSR_00_VALUE                      00000400
SSR_BLOCK_LEN                     00000014
SSR_DATA_BANK                     00000400
SSR_MAX                           00000013
SSR_OUTPUT_VALUE                  0000208A
SSR_STATE                         00000006
SSR_STATE2                        00000007
START                             00000104
START_DMX_FRAME                   000008FE
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYS_SNH                           00016FF0
SYS_SNL                           00016FF1
S_FLASH                           00000100
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1INSYNC                          00000002
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3ECCP1                           00000006
T3NSYNC                           00000002
T3SYNC                            00000002
TABLAT                            00000FF5
TARGET_SSR                        00000017
TARGET_SSR_MSK                    0000003F
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEC0                              00000000
TEC1                              00000001
TEC2                              00000002
TEC3                              00000003
TEC4                              00000004
TEC5                              00000005
TEC6                              00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 171


SYMBOL TABLE
  LABEL                             VALUE 

TEC7                              00000007
TEST_BUTTON                       00000005
TEST_CYCLE                        0000001A
TEST_MODE                         00000000
TEST_MODE_1                       000008D0
TEST_MODE_BYPASS                  00000884
TEST_NOT_PRESSED                  000008BC
TEST_NP_1                         000008D0
TEST_NP_2                         000008D0
TEST_PAUSE                        00000007
TEST_SSR                          0000001B
TEST_UPD                          00000006
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1                              00000FCE
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000F95
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 172


SYMBOL TABLE
  LABEL                             VALUE 

TRISE2                            00000002
TRIS_T_R                          00000F94
TRMT                              00000001
TRY_DOWN_0                        00002178
TRY_DOWN_1                        000021BE
TRY_DOWN_10                       00002434
TRY_DOWN_11                       0000247A
TRY_DOWN_12                       000024C0
TRY_DOWN_13                       00002506
TRY_DOWN_14                       0000254C
TRY_DOWN_15                       00002592
TRY_DOWN_16                       000025D8
TRY_DOWN_17                       0000261E
TRY_DOWN_18                       00002664
TRY_DOWN_19                       000026AA
TRY_DOWN_2                        00002204
TRY_DOWN_3                        0000224A
TRY_DOWN_4                        00002290
TRY_DOWN_5                        000022D6
TRY_DOWN_6                        0000231C
TRY_DOWN_7                        00002362
TRY_DOWN_8                        000023A8
TRY_DOWN_9                        000023EE
TR_I                              00000023
TR_OFF_DELAY                      000027B8
TR_ON_DELAY                       000027AE
TR_ON_L                           000027B0
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXABT                             00000006
TXB0CON                           00000F40
TXB0D0                            00000F46
TXB0D00                           00000000
TXB0D01                           00000001
TXB0D02                           00000002
TXB0D03                           00000003
TXB0D04                           00000004
TXB0D05                           00000005
TXB0D06                           00000006
TXB0D07                           00000007
TXB0D1                            00000F47
TXB0D10                           00000000
TXB0D11                           00000001
TXB0D12                           00000002
TXB0D13                           00000003
TXB0D14                           00000004
TXB0D15                           00000005
TXB0D16                           00000006
TXB0D17                           00000007
TXB0D2                            00000F48
TXB0D20                           00000000
TXB0D21                           00000001
TXB0D22                           00000002
TXB0D23                           00000003
TXB0D24                           00000004
TXB0D25                           00000005
TXB0D26                           00000006
TXB0D27                           00000007
TXB0D3                            00000F49
TXB0D30                           00000000
TXB0D31                           00000001
TXB0D32                           00000002
TXB0D33                           00000003
TXB0D34                           00000004
TXB0D35                           00000005
TXB0D36                           00000006
TXB0D37                           00000007
TXB0D4                            00000F4A
TXB0D40                           00000000
TXB0D41                           00000001
TXB0D42                           00000002
TXB0D43                           00000003
TXB0D44                           00000004
TXB0D45                           00000005
TXB0D46                           00000006
TXB0D47                           00000007
TXB0D5                            00000F4B
TXB0D50                           00000000
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 173


SYMBOL TABLE
  LABEL                             VALUE 

TXB0D51                           00000001
TXB0D52                           00000002
TXB0D53                           00000003
TXB0D54                           00000004
TXB0D55                           00000005
TXB0D56                           00000006
TXB0D57                           00000007
TXB0D6                            00000F4C
TXB0D60                           00000000
TXB0D61                           00000001
TXB0D62                           00000002
TXB0D63                           00000003
TXB0D64                           00000004
TXB0D65                           00000005
TXB0D66                           00000006
TXB0D67                           00000007
TXB0D7                            00000F4D
TXB0D70                           00000000
TXB0D71                           00000001
TXB0D72                           00000002
TXB0D73                           00000003
TXB0D74                           00000004
TXB0D75                           00000005
TXB0D76                           00000006
TXB0D77                           00000007
TXB0DLC                           00000F45
TXB0EIDH                          00000F43
TXB0EIDL                          00000F44
TXB0IE                            00000002
TXB0IF                            00000002
TXB0IP                            00000002
TXB0SIDH                          00000F41
TXB0SIDL                          00000F42
TXB1CON                           00000F30
TXB1D0                            00000F36
TXB1D00                           00000000
TXB1D01                           00000001
TXB1D02                           00000002
TXB1D03                           00000003
TXB1D04                           00000004
TXB1D05                           00000005
TXB1D06                           00000006
TXB1D07                           00000007
TXB1D1                            00000F37
TXB1D10                           00000000
TXB1D11                           00000001
TXB1D12                           00000002
TXB1D13                           00000003
TXB1D14                           00000004
TXB1D15                           00000005
TXB1D16                           00000006
TXB1D17                           00000007
TXB1D2                            00000F38
TXB1D20                           00000000
TXB1D21                           00000001
TXB1D22                           00000002
TXB1D23                           00000003
TXB1D24                           00000004
TXB1D25                           00000005
TXB1D26                           00000006
TXB1D27                           00000007
TXB1D3                            00000F39
TXB1D30                           00000000
TXB1D31                           00000001
TXB1D32                           00000002
TXB1D33                           00000003
TXB1D34                           00000004
TXB1D35                           00000005
TXB1D36                           00000006
TXB1D37                           00000007
TXB1D4                            00000F3A
TXB1D40                           00000000
TXB1D41                           00000001
TXB1D42                           00000002
TXB1D43                           00000003
TXB1D44                           00000004
TXB1D45                           00000005
TXB1D46                           00000006
TXB1D47                           00000007
TXB1D5                            00000F3B
TXB1D50                           00000000
TXB1D51                           00000001
TXB1D52                           00000002
TXB1D53                           00000003
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 174


SYMBOL TABLE
  LABEL                             VALUE 

TXB1D54                           00000004
TXB1D55                           00000005
TXB1D56                           00000006
TXB1D57                           00000007
TXB1D6                            00000F3C
TXB1D60                           00000000
TXB1D61                           00000001
TXB1D62                           00000002
TXB1D63                           00000003
TXB1D64                           00000004
TXB1D65                           00000005
TXB1D66                           00000006
TXB1D67                           00000007
TXB1D7                            00000F3D
TXB1D70                           00000000
TXB1D71                           00000001
TXB1D72                           00000002
TXB1D73                           00000003
TXB1D74                           00000004
TXB1D75                           00000005
TXB1D76                           00000006
TXB1D77                           00000007
TXB1DLC                           00000F35
TXB1EIDH                          00000F33
TXB1EIDL                          00000F34
TXB1IE                            00000003
TXB1IF                            00000003
TXB1IP                            00000003
TXB1SIDH                          00000F31
TXB1SIDL                          00000F32
TXB2CON                           00000F20
TXB2D0                            00000F26
TXB2D00                           00000000
TXB2D01                           00000001
TXB2D02                           00000002
TXB2D03                           00000003
TXB2D04                           00000004
TXB2D05                           00000005
TXB2D06                           00000006
TXB2D07                           00000007
TXB2D1                            00000F27
TXB2D10                           00000000
TXB2D11                           00000001
TXB2D12                           00000002
TXB2D13                           00000003
TXB2D14                           00000004
TXB2D15                           00000005
TXB2D16                           00000006
TXB2D17                           00000007
TXB2D2                            00000F28
TXB2D20                           00000000
TXB2D21                           00000001
TXB2D22                           00000002
TXB2D23                           00000003
TXB2D24                           00000004
TXB2D25                           00000005
TXB2D26                           00000006
TXB2D27                           00000007
TXB2D3                            00000F29
TXB2D30                           00000000
TXB2D31                           00000001
TXB2D32                           00000002
TXB2D33                           00000003
TXB2D34                           00000004
TXB2D35                           00000005
TXB2D36                           00000006
TXB2D37                           00000007
TXB2D4                            00000F2A
TXB2D40                           00000000
TXB2D41                           00000001
TXB2D42                           00000002
TXB2D43                           00000003
TXB2D44                           00000004
TXB2D45                           00000005
TXB2D46                           00000006
TXB2D47                           00000007
TXB2D5                            00000F2B
TXB2D50                           00000000
TXB2D51                           00000001
TXB2D52                           00000002
TXB2D53                           00000003
TXB2D54                           00000004
TXB2D55                           00000005
TXB2D56                           00000006
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 175


SYMBOL TABLE
  LABEL                             VALUE 

TXB2D57                           00000007
TXB2D6                            00000F2C
TXB2D60                           00000000
TXB2D61                           00000001
TXB2D62                           00000002
TXB2D63                           00000003
TXB2D64                           00000004
TXB2D65                           00000005
TXB2D66                           00000006
TXB2D67                           00000007
TXB2D7                            00000F2D
TXB2D70                           00000000
TXB2D71                           00000001
TXB2D72                           00000002
TXB2D73                           00000003
TXB2D74                           00000004
TXB2D75                           00000005
TXB2D76                           00000006
TXB2D77                           00000007
TXB2DLC                           00000F25
TXB2EIDH                          00000F23
TXB2EIDL                          00000F24
TXB2IE                            00000004
TXB2IF                            00000004
TXB2IP                            00000004
TXB2SIDH                          00000F21
TXB2SIDL                          00000F22
TXBIE                             00000DFC
TXBIF                             00000007
TXBIFBXB2CON                      00000007
TXBIFTXB1CON                      00000007
TXBIP                             00000004
TXBO                              00000005
TXBP                              00000004
TXBnIE                            00000004
TXBnIF                            00000004
TXBnIP                            00000004
TXCKP                             00000004
TXDATA_FULL                       00000002
TXDATA_QUEUE                      00000000
TXEN                              00000005
TXERR                             00000004
TXERRCNT                          00000F76
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXLARB                            00000005
TXPRI0                            00000000
TXPRI1                            00000001
TXREG                             00000FAD
TXREQ                             00000003
TXRTR                             00000006
TXSTA                             00000FAC
TXWARN                            00000002
UA                                00000001
UPDATE_BTN_MASK                   
UPDATE_MINIMUM_LEVEL              0000214C
UPDATE_MIN_DIMMED_0               00002158
UPDATE_MIN_DIMMED_1               0000219E
UPDATE_MIN_DIMMED_10              00002414
UPDATE_MIN_DIMMED_11              0000245A
UPDATE_MIN_DIMMED_12              000024A0
UPDATE_MIN_DIMMED_13              000024E6
UPDATE_MIN_DIMMED_14              0000252C
UPDATE_MIN_DIMMED_15              00002572
UPDATE_MIN_DIMMED_16              000025B8
UPDATE_MIN_DIMMED_17              000025FE
UPDATE_MIN_DIMMED_18              00002644
UPDATE_MIN_DIMMED_19              0000268A
UPDATE_MIN_DIMMED_2               000021E4
UPDATE_MIN_DIMMED_3               0000222A
UPDATE_MIN_DIMMED_4               00002270
UPDATE_MIN_DIMMED_5               000022B6
UPDATE_MIN_DIMMED_6               000022FC
UPDATE_MIN_DIMMED_7               00002342
UPDATE_MIN_DIMMED_8               00002388
UPDATE_MIN_DIMMED_9               000023CE
UPDATE_MIN_SKIP_0                 0000215A
UPDATE_MIN_SKIP_1                 000021A0
UPDATE_MIN_SKIP_10                00002416
UPDATE_MIN_SKIP_11                0000245C
UPDATE_MIN_SKIP_12                000024A2
UPDATE_MIN_SKIP_13                000024E8
UPDATE_MIN_SKIP_14                0000252E
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 176


SYMBOL TABLE
  LABEL                             VALUE 

UPDATE_MIN_SKIP_15                00002574
UPDATE_MIN_SKIP_16                000025BA
UPDATE_MIN_SKIP_17                00002600
UPDATE_MIN_SKIP_18                00002646
UPDATE_MIN_SKIP_19                0000268C
UPDATE_MIN_SKIP_2                 000021E6
UPDATE_MIN_SKIP_3                 0000222C
UPDATE_MIN_SKIP_4                 00002272
UPDATE_MIN_SKIP_5                 000022B8
UPDATE_MIN_SKIP_6                 000022FE
UPDATE_MIN_SKIP_7                 00002344
UPDATE_MIN_SKIP_8                 0000238A
UPDATE_MIN_SKIP_9                 000023D0
UPDATE_SSR_OUTPUTS                000020C6
UPDATE_SSR_SKIP_0                 000020D6
UPDATE_SSR_SKIP_1                 000020DC
UPDATE_SSR_SKIP_10                00002112
UPDATE_SSR_SKIP_11                00002118
UPDATE_SSR_SKIP_12                0000211E
UPDATE_SSR_SKIP_13                00002124
UPDATE_SSR_SKIP_14                0000212A
UPDATE_SSR_SKIP_15                00002130
UPDATE_SSR_SKIP_16                00002136
UPDATE_SSR_SKIP_17                0000213C
UPDATE_SSR_SKIP_18                00002142
UPDATE_SSR_SKIP_19                00002148
UPDATE_SSR_SKIP_2                 000020E2
UPDATE_SSR_SKIP_3                 000020E8
UPDATE_SSR_SKIP_4                 000020EE
UPDATE_SSR_SKIP_5                 000020F4
UPDATE_SSR_SKIP_6                 000020FA
UPDATE_SSR_SKIP_7                 00002100
UPDATE_SSR_SKIP_8                 00002106
UPDATE_SSR_SKIP_9                 0000210C
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VREFM                             00000002
VREFP                             00000003
W                                 00000000
WAIT_FOR_SENTINEL                 
WAKDIS                            00000007
WAKFIL                            00000006
WAKIE                             00000006
WAKIF                             00000006
WAKIP                             00000006
WATCH_BREAK                       0000083E
WCOL                              00000007
WDTCON                            00000FD1
WIN0                              00000001
WIN0_FP1                          00000001
WIN1                              00000002
WIN1_FP2                          00000002
WIN2                              00000003
WIN2_FP3                          00000003
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_EEPROM_DATA                 
WRITE_EEPROM_DATA_INC             
WRITE_EEPROM_DATA_W               
WRITE_EEPROM_DATA_W_INC           
WRITE_EEPROM_LOOP0                000002D2
WRITE_EEPROM_LOOP1                00000C22
WRITE_EEPROM_LOOP2                00000C3C
WRITE_EEPROM_LOOP3                00000C9A
WRITE_EEPROM_LOOP4                00000D34
WRITE_EEPROM_LOOP5                00000D54
WRITE_EEPROM_LOOP6                00000DBA
WUE                               00000001
X                                 00000014
XLATE_SSR_ID                      000020B2
YCF_RAMP_CYCLE                    00000007
YY_BUFFER                         00000500
YY_BUF_IDX                        00000010
YY_BUF_LEN                        000000C8
YY_CMD_FLAGS                      0000000C
YY_COMMAND                        0000000B
YY_DATA                           0000000D
YY_LOOKAHEAD_MAX                  0000000E
YY_LOOK_FOR                       0000000F
YY_NEXT_STATE                     00000011
YY_STATE                          0000000A
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 177


SYMBOL TABLE
  LABEL                             VALUE 

YY_YY                             00000012
Z                                 00000002
_BBSIZ_1024_4L                    000000CF
_BBSIZ_2048_4L                    000000DF
_BBSIZ_4096_4L                    000000EF
_BOREN_BOACTIVE_2L                000000FD
_BOREN_BOHW_2L                    000000FF
_BOREN_OFF_2L                     000000F9
_BOREN_SBORENCTRL_2L              000000FB
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CP4_OFF_5L                       000000FF
_CP4_ON_5L                        000000EF
_CP5_OFF_5L                       000000FF
_CP5_ON_5L                        000000DF
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTR4_OFF_7L                     000000FF
_EBTR4_ON_7L                      000000EF
_EBTR5_OFF_7L                     000000FF
_EBTR5_ON_7L                      000000DF
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MAIN_EEPROM_TBL                  00014000
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO_1H                      000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_IRCIO67_1H                   000000F8
_OSC_IRCIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
MPASM 5.53                 ../LUMOS_MAIN.ASM   6-14-2014  9:31:58         PAGE 178


SYMBOL TABLE
  LABEL                             VALUE 

_OSC_RCIO_1H                      000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_SYSTEM_MFG_DATA                  00016FF0
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRT4_OFF_6L                      000000FF
_WRT4_ON_6L                       000000EF
_WRT5_OFF_6L                      000000FF
_WRT5_ON_6L                       000000DF
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F4685                         00000001

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

