.TH SHOW.CONF 5 "Lumos" "Software Alchemy" "File Formats"
.SH NAME
show.conf \- show hardware configuration definition file format
.SH DESCRIPTION
.LP
When setting up a show with electrical loads managed by Lumos,
you need to create a configuration file describing the arrangement of hardware
devices to be controlled.
.LP
Generically, we refer to this file as
.RB \*(lq show.conf ,\*(rq
although in fact it can be called anything at all.  If you will set up
the same (or similar) hardware for more than one show, it would be useful
to keep a collection of these files on hand to make it easier to set up
the hardware again the same way.
.LP
This document describes the file format for this file.  We will begin
by describing the general format and options, and then describe the
individual data elements which can appear in the file.
.LP
After creating or editing this file, run
.BR lcheck (1)
on it to check for errors.
.SH "FORMAT OVERVIEW"
.SS Sections
.LP
The show configuration file is organized into named \*(lqsections.\*(rq  
Each section describes a single component of the hardware driven by 
Lumos, and contains a number of data fields specific to that 
section.
.LP
Each section begins with a line containing the section name in square
brackets.  For example, the following line begins a section called 
\*(lqshow\*(rq:
.RS
.B "[show]"
.RE
.LP
There will be many sections in a show configuration file, most of them
given arbitrary names by the author of the file.  However, every file must
have a 
.B [show]
section which provides basic data about the overall show and pointers to
the other sections.
.SS "Data Fields"
.LP
Each section contains one or more named data fields which provide the 
data needed by that section.  Each field is defined on a line by itself,
using the format
.RS
.IB name :
.I value
.RE
or
.RS
.I name
.B =
.I value
.RE
.LP
Note that leading whitespace is stripped from the
.IR value ,
so it doesn't matter whether you put spaces around the colons or equals signs.
.LP
The field
.I name
is case-insensitive, and need only be unique within the section in which it
appears.
.SS "Supported Data Types"
.LP
The values defined in this file are generally character strings and may
contain any text characters.  However, where the following descriptions
mention other data types, the following rules apply:
.TP
.I bool
A Boolean (true/false) value may be written as 
.RB \*(lq 1 \*(rq,
.RB \*(lq yes \*(rq,
.RB \*(lq true \*(rq,
or
.RB \*(lq on \*(rq
to indicate a \*(lqtrue\*(rq value, or as
.RB \*(lq 0 \*(rq,
.RB \*(lq no \*(rq,
.RB \*(lq false \*(rq,
or
.RB \*(lq off \*(rq
to indicate a \*(lqfalse\*(rq value.  Any other value is not allowed and will
generate an error.  (The quotation marks are
.I not
typed in the data value.)
.TP
.I int
An integer value is written as a set of digits 0\-9, optionally preceded by
a plus or minus sign
.RB (\*(lq + \*(rq
or
.RB \*(lq \- \*(rq).
.TP
.I real
A real number value is written either as for 
.I int
values as described above, or as some digits, followed by a decimal
point
.RB (\*(lq . \*(rq),
followed by more digits.  Either (but not both) of the sets of digits may be 
omitted, so
.RB \*(lq 12 \*(rq,
.RB \*(lq \-12.25 \*(rq,
.RB \*(lq +12. \*(rq,
.RB \*(lq 0.3 \*(rq,
and
.RB \*(lq .3 \*(rq
are all valid real number values.
Additionally, numbers may be specified in scientific notation by adding
the letter 
.RB \*(lq e \*(rq
followed by an exponent of 10 to the end of the mantissa.  For example, the
value
.RB \*(lq 1.23e5 \*(rq
represents the real number 123000.0, and the value
.RB \*(lq 1.23e-5 \*(rq
represents the real number 0.0000123.
.SS "Splitting Long Lines"
.LP
Ordinarily, each data field is written on its own line, and takes up the entire line.  It must begin in the first column of its line.
However, a long data value may be split onto multiple lines of the file in
the same way RFC822 mail headers are: any indented line (i.e., a line beginning
with whitespace) is assumed to be a continuation of the line above it.  The
leading whitespace is stripped from the value, but the newline is kept intact.
.LP
For example, in the following field definition:
.RS
.B "description: This is a very long descriptive string"
.br
.B "\ \ \ \ involving two physical lines of the file"
.RE
would define the field called \*(lqdescription\*(rq to have the value:
.RS
This is a very long descriptive string
.br
involving two physical lines of the file
.RE
.SS "Variable Substitution"
.LP
Field definitions may contain the values of other fields using 
.IR printf -style
formatting controls.  Specifically, anywhere in a data field value where the
following pattern is found:
.RS
.BI %( name )s
.RE
This is replaced by the value of the data field called
.I name
defined in the same section, or in a special section called
.BR [DEFAULTS] .
The value being substituted does not need to have been defined 
above the line where it is being used.  The substitutions are 
performed at run-time, after the entire configuration file
has been read.
.LP
You can technically put anything between the 
.RB \*(lq ) \*(rq
and the
.RB \*(lq s \*(rq
that 
.BR printf (3)
would allow, but typically you'd use the pattern exactly as shown here.
Therefore, we won't go into more detail than that.  Advanced or exceedingly
curious users can look at the documentation for 
.B printf
for more details.
.LP
Here is an example where a field is used to define a base value used in
other fields:
.RS
.nf
.na
.B "[show]"
.B "title=Christmas Show"
.B "description=The hardware layout for %(title)s."
.B "[DEFAULTS]"
.B "minilights=.3"
\&...
.B "[chan treea1.1]"
.B "load=%(minilights)s"
.B "[chan treea1.2]"
.B "load=%(minilights)s"
.ad
.fi
.RE
.SS Comments
.LP
Any line beginning with a semi-colon
.RB (\*(lq ; \*(rq)
or pound sign (octothorpe, sharp, whatever you want to call it)
.RB (\*(lq # \*(rq)
is considered to be a comment and is ignored completely.
.SH DETAILS
.LP
The file must contain a 
.B [show]
section, which provides global show information.  
In addition, it defines a set of power sources and power management
hardware to be controlled.
The latter is organized into a hierarchy of communications networks, 
which contain a set of controllers, which contain a set of channels.
Each channel feeds power to a device (such as a string of Christmas
lights).
.SS "Show Section"
.LP
There are really just two fields which describe the show, and two
fields which list what other sections we'll need to load:
.TP
.BI title= text
A short title for the show.
.TP
.BI description= text
A longer description of the show.
.TP
.BI powersources= list
The
.I list
value is a space-separated list of power source circuit ID tags.  These
tags are completely arbitrary names, but we recommend that they be short
alphanumeric strings.  A good choice would be to use the same circuit
designations as are used on the breaker panel where these power feeds
are drawn from.  This will help you locate the proper circuits or breakers
if necessary.
.TP
.BI networks= list
The
.I list
value is a space-separated list of network ID tags.  Like the power source
tags, these are arbitrary names, but we recommend keeping them to short
alphanumeric ID strings.  
.LP
For example, consider the following file excerpt:
.RS
.nf
.na
.B "[show]"
.B "title=Christmas"
.B "description=Our Christmas light display in the front yard."
.B "powersources=1 2a 2b
.B "networks=trees misc floods"
.ad
.fi
.RE
.LP
This indicates that elsewhere in the file we will describe three circuits
of power supplied to us, called 
\*(lq1\*(rq,
\*(lq2a\*(rq, and
\*(lq2b\*(rq; and also three communications networks called
\*(lqtrees\*(rq,
\*(lqmisc\*(rq, and
\*(lqfloods\*(rq.
.SS "Power Sources"
.LP
We need to tell Lumos a little about each circuit supplying
power to our controlled devices.  Each circuit is listed in the
\*(lqpowersources\*(rq value in the 
.B [show]
section.  The details for that power source are in its own section named
.RB \*(lq [power
.IR id \fB]\fP\*(rq,
where 
.I id
is the circuit ID tag we made up for it (note the
.B single
space between 
.RB \*(lq power \*(rq
and the ID tag name).
.LP
Each power source section has two data fields:
.TP
.BI amps= real
The 
.I maximum
load available on that circuit to our show.  
.B "If other loads are on the same circuit, reduce this value by the"
.B "maximum load of all those other devices."
.TP
.BI gfci= bool
Specify true here if the circuit in question has ground-fault protection.
.SS "Networks"
.LP
The controlled devices are connected to the host computer via one or
more serial communications networks (typically RS-232 or RS-485).  The
list of networks which are used with a given show configuration are listed
in the \*(lqnetworks\*(rq value in the
.B [show]
section (as shown above).  Each of those are described in detail in its own
section, named 
.B [net
.IB tag ],
where
.I tag
is the network ID string listed in the \*(lqnetworks\*(rq value.
Note the
.B single
space between the word
.B net
and the ID tag.
.LP
This section contains the parameters necessary to understand how to
interact with the devices on that network.  It contains the following
values:
.TP
.BI description= text
A short description of what the network is for.
.TP
.BI units= list
A space-separated list of controller units attached to this network.
These names are arbitrary but we recommend they be kept to reasonably short,
alphanumeric identifiers which are descriptive of the purpose of the network.
They must be globally unique.  Each of them will be 
described in more detail in a Controller Unit section (see below).
.TP
.BI port= int\fR|\fPname
The serial port to use for communications with this network.  Typically
this is a simple integer.  Port 0 (zero) is the system's \*(lqfirst\*(rq
serial port (however that device is named by the operating system), port 1 
is the next one, and so forth.  Alternatively, you can specify a device
string such as 
.RB \*(lq COM1: \*(rq
or
.RB \*(lq /dev/ttyS1 \*(rq,
but this is discouraged unless absolutely necessary.
.TP
.BI baudrate= int
The bits-per-second speed of the port.  If this value is not present,
it defaults to 
.BR 9600 .
.TP
.BR bits=7 | 8
The number of bits per data byte.  May be either
.B 7
or
.BR 8 .
If this value is not present, it defaults to
.BR 8 .
.TP
.BR parity=none | even | odd
The parity to use.  Use
.RB \*(lq none \*(rq
if using 8 bits/byte, otherwise you can specify no parity,
even parity, or odd parity.  
If this value is not present, it defaults to
.BR none .
.TP
.BR stop=1 | 2
The number of stop bits per frame.  May be either
.B 1
or
.BR 2 .
If this value is not present, it defaults to
.BR 1 .
.TP
.BI xonxoff= bool
Whether to use XON/XOFF (software) flow control on the line. 
If this value is not present, it defaults to
.BR no .
.TP
.BI rtscts= bool
Whether to use RTS/CTS (hardware) flow control on the line. 
If this value is not present, it defaults to
.BR no .
.LP
For example, consider this section:
.RS
.nf
.na
.B "[net trees]"
.B "description=Separate network of controllers for tree displays."
.B "port=0"
.B "baudrate=19200"
.B "units=treea1 treea2 treeb1 treeb2"
.ad
.fi
.RE
This requires that
.RB \*(lq trees \*(rq
appear in the \*(lqnetworks\*(rq value in the
.B [show]
section of the file.  It defines communications parameters for this
network on the first system serial port, running at 19,200 bits/sec, 
8 bits/byte, no parity, no flow control.  There are four controller
units connected here, which will be described in sections called
.RB \*(lq [unit\ treea1] \*(rq,
et al.
.SS "Controller Units"
.LP
Each network lists what controllers are plugged into it (in the
\*(lqunits\*(rq value in its 
.B "[net\ ...]"
section).  Each of those controller units are described in its own
section named
.RB \*(lq [unit
.IB tag ]\fR\*(rq\fP,
which contains the following paramters:
.TP
.BI power= tag
The 
.I tag
ID (see \*(lqPower Sources\*(rq) for the power circuit supplying the
load current for this controller unit.
.TP
.BI type= name
The type of controller unit being described.  The type must be one of
the supported types listed below.  Depending on type, there may be 
additional parameters the section needs to contain.  If your device
is not in this list, a driver object class will need to be created
for it.
.RS
.TP
.B cm17a
The X-10 CM17A serial interface (popularly known as the 
\*(lqfirecracker\*(rq).  It can control up to 256 channels
arranged into 16 \*(lqhouse codes\*(rq of 16 \*(lqunit
codes\*(rq.  These are controlled via RF (radio) signals
sent from the firecracker unit to X-10 RF receiver modules.
One of the ideosyncracies of the CM17A is that it does
.I not
actually receive commands on the serial data port; instead,
it communicates using signal pulses on the serial port's DTR
and RTS lines.  As such, it ignores all of the serial configuration
parameters specified for its network.
The channel addresses as used by Lumos include
house/unit codes in the standard letter-number format used by X-10 equipment,
as 
.RB \*(lq A1 \*(rq
through
.RB \*(lq P16 \*(rq.
Dimmer capability and current capacity depend on each individual control 
unit plugged in to the power line.  Due to the fact that the Firecracker
can only turn on, off, or dim a single channel at a time, and the slowness
of sending X10 signals on the power lines, this device is particularly
ill-suited for use in fast-changing animated light displays.  It could,
however, be used in more static displays or displays where at most one
X10 device at a time is being changed.
.TP
.B lynx10
This is another model of X-10 serial controller.  It can control up to
256 channels arranged into 16 \*(lqhouse codes\*(rq of 16 \*(lqunit
codes\*(rq.  The channel addresses as used by Lumos include
both codes in the standard letter-number format used by X-10 equipment,
as 
.RB \*(lq A1 \*(rq
through
.RB \*(lq P16 \*(rq.
Dimmer capability and current capacity depend on each individual control 
unit plugged in to the power line.
The LynX10 controller is capable of dimming a set of units which share
a common house code in tandem, so while it suffers from the slow 
command propagation time inherent in X10 systems, it's capable of making
reasonable scene-changing fade effects in mostly-static parts of the 
show.  X10 devices are generally unsuitable for use in rapidly-changing
animated light displays.
.TP
.B 48ssr
This is the 48-channel SSR controller circuit that I designed for my
own use.  It can control up to 48 channels with full dimmer capability
with up to 48 amps of current load capacity (in 6 blocks of 8 circuits, 8A
per block, no more than 5A on any individual circuit).  Its channels are
numbered simply
.RB \*(lq 0 \*(rq
through
.RB \*(lq 47 \*(rq.
These units require one additional field:
.RS
.TP
.BI address= int
The controller address used for sending commands to a particular
controller unit.  Must be a number in the range
.RI 0<= address <=15.
.RE
.TP
.B spectrum
A readerboard of the Spectrum Alpha line or something compatible with them.
This is something rather different than the kinds of controllers described
elsewhere, but it may often be desirable to display readerboard messages
as part of the show.  These devices will probably be on their own 
network, separate from the other controllers.  These units require the
following additional fields:
.RS
.TP
.BI address= int
The address of a particular readerboard.  These are simply numbers from 0 
to 255.
.TP
.BI memory= labels
This is an optional field which lists all the memory slots you wish to
reserve for use in the readerboard programs.  If nothing is specified,
the signs default to a single text slot called \*(lqA\*(rq.  If you 
wish to allocate separate text, string, or bitmap slots, you will need
to list their labels here, separated by spaces.  (Labels may each be
a single upper-case letter or a digit.)  Then, you need to define
a 
.B "[spectrum memory"
.IB label ]
section describing each memory slot allocated.  These each contain the 
following fields:
.RS
.TP
.BR type=text | string | image
The type of data to be stored in this slot.  Text slots are the usual
places for holding messages, and may include color, special attributes,
transition effects, etc.  They may also include images and strings as
stored in other slots.  Strings are the storage used for values included in
text slots.  These may be dynamically changed, and the readerboard message
updated, without having to transmit a whole new text message to the
readerboard, which looks much better for updating only part of a message at
a time.  Image slots are used for storing bitmap images which may be
included into text slots as well.
.TP
.BI size= int
The allocated size in bytes of the field.  For image slots, use the
.B rows
and 
.B cols
fields instead.
.TP
.BI locked= bool
If true, this memory slot may not be overwritten using the IR remote 
control for the readerboard.  (Default is locked if this is not specified.)
.TP
.BI start= time
The time of day to begin displaying this slot's contents.  The value of
.I time
may be an integer hour number (0=midnight, 23=11:00 PM) or the string
.RB \*(lq never \*(rq
(to always hide this slot from view) or
.RB \*(lq always \*(rq
(to always display this slot).  Default is 
.RB \*(lq always \*(rq.
This only applies to text slots.
.TP
.BI end= int
If a start time is given, the time of day to end display of the slot may
be specified here, as an integer hour number.
.TP
.BI colors= int
The number of colors to display for a bitmap image slot.  Supported values
are 1 (monochrome), 3, and 8.  The number of colors specified here does 
not include the \*(lqoff\*(rq state as a \*(lqcolor\*(rq.  Bitmap slots
only.  Default is 1 (monochrome).
.TP
.BI rows= int
The number of pixels high the image will be (the
.I y
dimension).  Bitmap slots only.
.TP
.BI cols= int
The number of pixels wide the image will be (the
.I x
dimension).  Bitmap slots only.
.RE
.RE
.RE
.TP
.BI resolution= int
Any controller capable of dimming may specify this value.  This is the
number of discrete steps the dimmer can be set to between fully off and
fully on (inclusive).  For example,
.RB \*(lq resolution=32 \*(rq
means that the dimmer can be fully off, fully on, and 30 levels of varying
brightness inbetween.  If this value is not specified, it will default to
a typical resolution value for that type of controller.
Normally, you should
.I not
need to supply this value; let the controller driver's built-in defaults
handle the typical case and only supply this if you have an unusual
device with a nonstandard resolution.
.SS "Controller Channels"
.LP
Finally, each controller has one or more electrical loads attached
to it.  Each channel is identified in some way which is specific to
the particular controller type as previously described.  (For example,
a house/unit code like 
.RB \*(lq C10 \*(rq
for an X-10 style controller.)
.LP
Each channel is described in its own section named as
.RB \*(lq [chan
.IB unit . channel\fR].\*(rq\fP
The base set of values required for any channel are described first.
Depending on the controller unit type, additional fields may also be
required.  (In the current release, there are no additional fields, but
this may change in future releases.)
.TP
.BI name= text
A short, descriptive name of the load plugged into this channel.
.TP
.BI load= real
The number of amps this load will consume.
.TP
.BI dimmer= bool
Whether this channel's load should be dimmed. 
If this value is not present, it defaults to
.BR yes .
.B NOTE:
Indicating 
.RB \*(lq no \*(rq
here will inform Lumos that it should interpret any non-zero level for that
channel as fully ON, and zero as fully OFF.  However, we
cannot guarantee that a software or hardware bug or malfunction, 
communication glitch or other circumstance might
not cause it to go into dimmer mode anyway.  
.B "DO NOT"
connect anything to a dimmable controller output which
would be damaged if it happens to be dimmed.
.TP
.BI warm= int
The minimum dimmer level (as a percentage) to keep this load
at all times.  This is intended to keep bulbs always warm, by
dimming them to a low level where they won't be (too) visible
instead of turning them fully off and on repeatedly.
If this value is not present, it means that a dimmer can be
turned completely off when called for in the show script.
Contrast this with a 
.B warm
value of 0 (zero), which will force Lumos to leave the channel
\*(lqon\*(rq but dimmed to 0% output level.  On some devices,
there is no real difference between 0% and \*(lqoff\*(rq, but on
some (like many X10 dimmer modules), it makes a great deal of 
difference.  In the case of X10 dimmers, you can't fade up from
\*(lqoff\*(rq, but you can fade up from \*(lqon but at 0%\*(rq.
.TP
.BI resolution= int
This has the same meaning as indicated for controller units above,
but allows for each channel to have its own resolution separate from
the other channels.  This may happen, for example, in X-10 networks
where each \*(lqchannel\*(rq is actually an independent module which
may have its own individual characteristics not shared with other modules
on the same circuit.  If not specified, it defaults to the resolution
specified for the controller.  In most cases, this should
.I not
be specified.
.LP
Some examples:
.RS
.na
.nf
.B "# treea1 controller, channel 0
.B "[chan treea1.0]"
.B "name=Tree1 RED 1"
.B "load=.3"
.B "# X-10 controller 'floodX10', channel C1"
.B "[chan floodX10.C1]"
.B "name=Snowman power"
.B "load=2"
.B "dimmer=no"
.fi
.ad
.RE
.SH AUTHOR
.LP
Steve Willoughby, support@alchemy.com
.SH "SEE ALSO"
.BR lcheck (1),
.BR printf (3).
.SH BUGS
