MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;;; vim:set syntax=pic ts=8:
                      00002 ;
                      00003                 LIST n=90
                      00004 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00005 ;@@                                                                         @@
                      00006 ;@@     @   @@@    @@@   @@@@@  @          48-Channel SSR Controller Board  @@
                      00007 ;@@    @@  @   @  @   @    @    @          Firmware Version 2.0.2           @@
                      00008 ;@@   @ @  @   @  @        @    @                                           @@
                      00009 ;@@  @  @   @@@   @        @    @          For use with controller hardware @@
                      00010 ;@@ @@@@@  @   @  @        @    @          revision 3.1 (boards marked as   @@
                      00011 ;@@     @  @   @  @   @    @    @          "48CTL-3-1")                     @@
                      00012 ;@@     @   @@@    @@@     @    @@@@@                                       @@
                      00013 ;@@                                                                         @@
                      00014 ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      00015 ;
                      00016 ; Copyright (c) 2004, 2005, 2006, 2007 Steven L. Willoughby, Aloha, Oregon,
                      00017 ; USA.  All Rights Reserved.
                      00018 ;
                      00019 ; $Header: /usr/local/cvsroot/ssr/firmware/48ctl-slave-877.lst,v 1.3 2007/11/20 06:19:28 steve Exp $
                      00020 ;
                      00021 ; Target Microcontroller is PIC16F877A and/or PIC16F777, Q=20MHz
                      00022 ;  (200nS instruction cycle) (The master MUST be an 877A, the slave MAY
                      00023 ;  be either.)
                      00024 ; Serial control (RS-485) at 19.2kbps
                      00025 ;
                      00026 ; *** THIS IS THE SLAVE MCU FIRMWARE CODE.
                      00027 ; *** IT MUST BE FLASHED INTO U3 (THE LOWER MCU CHIP ON THE BOARD).
                      00028 ; *** This chip acts upon commands received from the master MCU.  It is
                      00029 ; *** also in control of the RS-485 transceiver mode (although in this
                      00030 ; *** version it leaves it set to RECEIVE mode all the time.)  It would
                      00031 ; *** also be the chip to transmit over the RS-485 bus, but again, this
                      00032 ; *** version never actually does that.
                      00033 ; *** THIS VERSION OF THE FILE MUST BE RUN ON A PIC16F877A *** @@P=877@@
                      00034 ;
                      00035 ;=============================================================================
                      00036 ; HARDWARE DESCRIPTION
                      00037 ;-----------------------------------------------------------------------------
                      00038 ;
                      00039 ;  PIC16F777/877A Microcontroller I/O pin assignments:
                      00040 ;                        ________   _________
                      00041 ;                       |o       \_/         |
                      00042 ;     Vpp /RESET -->  1 | /MCLR      PGD/RB7 | 40 <-> PGD
                      00043 ;         /SSR16 <--  2 | RA0        PGC/RB6 | 39 <-- PGC
                      00044 ;         /SSR14 <--  3 | RA1            RB5 | 38 --> /SSR15
                      00045 ;         /SSR12 <--  4 | RA2            RB4 | 37 --> /SSR13
                      00046 ;         /SSR10 <--  5 | RA3            RB3 | 36 --> /SSR11
                      00047 ;         /SSR08 <--  6 | RA4 (OD)       RB2 | 35 --> /SSR09
                      00048 ;        ACT LED <--  7 | RA5            RB1 | 34 --> /SSR07
                      00049 ;        GRN LED <--  8 | RE0        INT/RB0 | 33 <-- ZC INT
                      00050 ;        YEL LED <--  9 | RE1    PIC     VDD | 32 --- +5V
                      00051 ;        RED LED <-- 10 | RE2    16F     VSS | 31 --- GND
                      00052 ;            +5V --- 11 | VDD    877A    RD7 | 30 --> /SSR17
                      00053 ;            GND --- 12 | VSS     or     RD6 | 29 --> /SSR06
                      00054 ;           xtal --- 13 | OSC    777     RD5 | 28 --> /SSR05
                      00055 ;             +----- 14 | OSC            RD4 | 27 --> /SSR18
                      00056 ;         /SSR04 <-- 15 | RC0         RX/RC7 | 26 <-- Serial RxD
                      00057 ;         /SSR19 <-- 16 | RC1         TX/RC6 | 25 --> Serial TxD
                      00058 ;         /SSR03 <-- 17 | RC2            RC5 | 24 --> /SSR02
                      00059 ;         /SSR01 <-- 18 | RC3            RC4 | 23 --> /SSR00
                      00060 ;         /SSR23 <-- 19 | RD0            RD3 | 22 --> /SSR22
                      00061 ;         /SSR21 <-- 20 | RD1            RD2 | 21 --> /SSR20
                      00062 ;                       |____________________|
                      00063 ;
                      00064 ; Note that the '877A can be used for either master or slave, but the '777
                      00065 ; can ONLY be used for the slave processor.
                      00066 ;
                      00067 ;-----------------------------------------------------------------------------
                      00068 ; I/O PORT ASSIGNMENTS
                      00069 ;-----------------------------------------------------------------------------
                      00070 ;
                      00071 ;          7   6   5_  4   3   2   1   0
                      00072 ; PORT RA --- --- T/R /08 /10 /12 /14 /16
                      00073 ;          <OSC>   O   O   O   O   O   O
                      00074 ;
                      00075 ; PORT RB --- --- /15 /13 /11 /09 /07 ---
                      00076 ;          <PGM>   O   O   O   O   O  INT
                      00077 ;
                      00078 ; PORT RC --- --- /02 /00 /01 /03 /19 /04
                      00079 ;          <I/O>   O   O   O   O   O   O
                      00080 ;
                      00081 ; PORT RD /17 /06 /05 /18 /22 /20 /21 /23
                      00082 ;          O   O   O   O   O   O   O   O
                      00083 ;
                      00084 ; PORT RE --- --- --- --- --- RED YEL GRN
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00085 ;                              O   O   O
                      00086 ;
                      00087 ;
                      00088 ; THESE SSR LINES ARE NEGATIVE-LOGIC CONTROLLED!
                      00089 ; (0=ON, 1=OFF)
                      00090 ;
                      00091 ;=============================================================================
                      00092 ; MEMORY MAP (At least the parts we directly care about)
                      00093 ;-----------------------------------------------------------------------------
                      00094 ;
                      00095 ;-----------------------------------------------------------------------------
                      00096 ; ALL BANKS
                      00097 ;-----------------------------------------------------------------------------
                      00098 ;
                      00099 ;
                      00100 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00101 ; $000 INDF          |                                                       |
                      00102 ;                    |  Access register indirect [FSR]                       |
                      00103 ;                    |______|______|______|______|______|______|______|______|
                      00104 ; $002 PCL           |                                                       |
                      00105 ;                    |                         PC<7:0>                       |
                      00106 ;                    |______|______|______|______|______|______|______|______|
                      00107 ; $003 STATUS        |      |      |      |  __  |  __  |      |      |      |
                      00108 ;                    | IRP  |  RP1 |  RP0 |  TO  |  PD  |  Z   |  DC  |  C   |
                      00109 ;                    |______|______|______|______|______|______|______|______|
                      00110 ; $004 FSR           |                                                       |
                      00111 ;                    |  Address of target of INDF pseudo-register            |
                      00112 ;                    |______|______|______|______|______|______|______|______|
                      00113 ; $00A PCLATH        |////////////////////|                                  |
                      00114 ;                    |////////////////////|      PC<12:8> latch register     |
                      00115 ;                    |////////////////////|______|______|______|______|______|
                      00116 ; $00B INTCON        |      |      |      |      |      |      |      |      |
                      00117 ;                    | GIE  | PEIE |TMR0IE| INTE | RBIE |TMR0IF| INTF | RBIF |
                      00118 ;                    |______|______|______|______|______|______|______|______|
                      00119 ; $070 W_TEMP        |                                                       |
                      00120 ;                    |  Temporary storage for W during int service routine   |
                      00121 ;                    |______|______|______|______|______|______|______|______|
                      00122 ; $071 STATUS_TEMP   |                                                       |
                      00123 ;                    |  Temporary storage for STATUS during ISR              |
                      00124 ;                    |______|______|______|______|______|______|______|______|
                      00125 ; $072 I             |                                                       |
                      00126 ;                    |  General-purpose data counter                         |
                      00127 ;                    |______|______|______|______|______|______|______|______|
                      00128 ; $073 J             |                                                       |
                      00129 ;                    |  General-purpose data counter                         |
                      00130 ;                    |______|______|______|______|______|______|______|______|
                      00131 ; $074 K             |                                                       |
                      00132 ;                    |  General-purpose data counter                         |
                      00133 ;                    |______|______|______|______|______|______|______|______|
                      00134 ; $075 X             |                                                       |
                      00135 ;                    |  General-purpose data register                        |
                      00136 ;                    |______|______|______|______|______|______|______|______|
                      00137 ; $076 Y             |                                                       |
                      00138 ;                    |  General-purpose data register                        |
                      00139 ;                    |______|______|______|______|______|______|______|______|
                      00140 ; $077 PCLATH_TEMP   |                                                       |
                      00141 ;                    |  Temporary storage for PCLATH during ISR              |
                      00142 ;                    |______|______|______|______|______|______|______|______|
                      00143 ; $078               |      |      |      |      |      |      |      |      |
                      00144 ;                    |      |      |      |      |      |      |      |      |
                      00145 ;                    |______|______|______|______|______|______|______|______|
                      00146 ;
                      00147 ;       .                                        .
                      00148 ;       .                                        .
                      00149 ;       .                                        .
                      00150 ;
                      00151 ;                     _______________________________________________________
                      00152 ; $07F               |      |      |      |      |      |      |      |      |
                      00153 ;                    |      |      |      |      |      |      |      |      |
                      00154 ;                    |______|______|______|______|______|______|______|______|
                      00155 ;
                      00156 ;
                      00157 ;-----------------------------------------------------------------------------
                      00158 ; BANK 0
                      00159 ;-----------------------------------------------------------------------------
                      00160 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00161 ; $001 TMR0          |                                                       |
                      00162 ;   (bank 2 too)     |                                                       |
                      00163 ;                    |______|______|______|______|______|______|______|______|
                      00164 ; $005 PORTA         |/////////////|   _  | _____| _____| _____| _____| _____|
                      00165 ;                    |/////////////| T/R  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00166 ;                    |/////////////|______|______|______|______|______|______|
                      00167 ; $006 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00168 ;   (bank 2 too)     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00169 ;                    |/////////////|______|______|______|______|______|//////|
                      00170 ; $007 PORTC         |/////////////| _____| _____| _____| _____| _____| _____|
                      00171 ;                    |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00172 ;                    |/////////////|______|______|______|______|______|______|
                      00173 ; $008 PORTD         | _____| _____| _____| _____| _____| _____| _____| _____|
                      00174 ;                    | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00175 ;                    |______|______|______|______|______|______|______|______|
                      00176 ; $009 PORTE         |//////////////////////////////////|      |      |      |
                      00177 ;                    |//////////////////////////////////| RED  | YEL  | GRN  |
                      00178 ;                    |//////////////////////////////////|______|______|______|
                      00179 ; $00C PIR1          |      |      |      |      |      |      |      |      |
                      00180 ;                    |PSPIF | ADIF | RCIF | TXIF |SSPIF |CCP1IF|TMR2IF|TMR1IF|
                      00181 ;                    |______|______|______|______|______|______|______|______|
                      00182 ; $00D PIR2          |      |      |      |      |      |      |      |      |
                      00183 ;                    |      | CMIF |      | EEIF |BCLIF |      |      |CCP2IF|
                      00184 ;                    |______|______|______|______|______|______|______|______|
                      00185 ; $00E TMR1L         |                                                       |
                      00186 ;                    | Holding register for LSB of TMR1 register             |
                      00187 ;                    |______|______|______|______|______|______|______|______|
                      00188 ; $00F TMR1H         |                                                       |
                      00189 ;                    | Holding register for MSB of TMR1 register             |
                      00190 ;                    |______|______|______|______|______|______|______|______|
                      00191 ; $010 T1CON         |//////|      |             |T1    |______|      |      |
                      00192 ;                    |//////|T1RUN |  T1CKPS1,0  |OSCEN |T1SYNC|TMR1CS|TMR1ON|
                      00193 ;                    |//////|______|______|______|______|______|______|______|
                      00194 ; $011 TMR2          |                                                       |
                      00195 ;                    | Timer2 module register                                |
                      00196 ;                    |______|______|______|______|______|______|______|______|
                      00197 ; $012 T2CON         |//////|                           |      |             |
                      00198 ;                    |//////|       TOUTPS3,2,1,0       |TMR2ON|  T2CKPS1,0  |
                      00199 ;                    |//////|______|______|______|______|______|______|______|
                      00200 ; $018 RCSTA         |      |      |      |      |      |      |      |      |
                      00201 ;                    | SPEN |  RX9 | SREN | CREN |ADDEN | FERR | OERR | RX9D |
                      00202 ;                    |______|______|______|______|______|______|______|______|
                      00203 ; $019 TXREG         |                                                       |
                      00204 ;                    | AUSART transmit data register                         |
                      00205 ;                    |______|______|______|______|______|______|______|______|
                      00206 ; $01A RCREG         |                                                       |
                      00207 ;                    | AUSART receive data register                          |
                      00208 ;                    |______|______|______|______|______|______|______|______|
                      00209 ; $01F ADCON0        |      |      |      |      |      |      |//////|      |
                      00210 ;                    | ADCS1| ADCS0| CHS2 | CHS1 | CHS0 |  GO  |//////| ADON |
                      00211 ;                    |______|______|______|______|______|______|//////|______|
                      00212 ;
                      00213 ; General-purpose data files
                      00214 ;                     _______________________________________________________
                      00215 ; $020 SSR00_VAL     |      |      |      |                                  |
                      00216 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00217 ;                    |______|______|______|______|______|______|______|______|
                      00218 ; $021 SSR01_VAL     |      |      |      |                                  |
                      00219 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00220 ;                    |______|______|______|______|______|______|______|______|
                      00221 ;
                      00222 ;       .                                        .
                      00223 ;       .                                        .
                      00224 ;       .                                        .
                      00225 ;
                      00226 ;                     _______________________________________________________
                      00227 ; $037 SSR23_VAL     |      |      |      |                                  |
                      00228 ;                    |SSR_ON|SSRDIM|      | Dim value (0=off .. 31=full on)  |
                      00229 ;                    |______|______|______|______|______|______|______|______|
                      00230 ; $038 PORTA_BUF     |/////////////|   _  | _____| _____| _____| _____| _____|
                      00231 ;                    |/////////////| T/R  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00232 ;                    |/////////////|______|______|______|______|______|______|
                      00233 ; $039 PORTB_BUF     |/////////////| _____| _____| _____| _____| _____|//////|
                      00234 ;                    |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00235 ;                    |/////////////|______|______|______|______|______|//////|
                      00236 ; $03A PORTC_BUF     |/////////////| _____| _____| _____| _____| _____| _____|
                      00237 ;                    |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00238 ;                    |/////////////|______|______|______|______|______|______|
                      00239 ; $03B PORTD_BUF     | _____| _____| _____| _____| _____| _____| _____| _____|
                      00240 ;                    | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00241 ;                    |______|______|______|______|______|______|______|______|
                      00242 ; $03C PORTE_BUF     |//////////////////////////////////|      |      |      |
                      00243 ;                    |//////////////////////////////////| RED  | YEL  | GRN  |
                      00244 ;                    |//////////////////////////////////|______|______|______|
                      00245 ; $03D PHASE_OFFSET  |                                                       |
                      00246 ;                    |  Number of slices to delay from ZC int to slice 0     |
                      00247 ;                    |______|______|______|______|______|______|______|______|
                      00248 ; $03E SSR_ID        |      |      |      |                                  |
                      00249 ;                    |MY_SSR|ILLSSR|      |  Local device offset from SSR00  |
                      00250 ;                    |______|______|______|______|______|______|______|______|
                      00251 ; $03F FLASH_CT      |                                                       |
                      00252 ;                    |  Value to be flashed on an LED                        |
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00253 ;                    |______|______|______|______|______|______|______|______|
                      00254 ; $040 DEVICE_ID     |///////////////////////////|                           |
                      00255 ;                    |///////////////////////////| This device's ID number   |
                      00256 ;                    |///////////////////////////|______|______|______|______|
                      00257 ; $041 GRN_TMR       |  If SSR_STATE<GRNEN>                                  |
                      00258 ;                    |  Number of 1/120sec until green LED flips state       |
                      00259 ;                    |______|______|______|______|______|______|______|______|
                      00260 ; $042 YEL_TMR       |  If SSR_STATE<YELEN>                                  |
                      00261 ;                    |  Number of 1/120sec until yellow LED turns off        |
                      00262 ;                    |______|______|______|______|______|______|______|______|
                      00263 ; $043 RED_TMR       |  If SSR_STATE<REDEN>                                  |
                      00264 ;                    |  Number of 1/120sec until red LED turns off           |
                      00265 ;                    |______|______|______|______|______|______|______|______|
                      00266 ; $044 SSR_STATE     |      |      |      |      |      |                    |
                      00267 ;                    |INCYC |PRECYC|REDEN |YELEN |GRNEN |       STATE        |
                      00268 ;                    |______|______|______|______|______|______|______|______|
                      00269 ; $045 CUR_SLICE     |  If SSR_STATE<INCYC>                                  |
                      00270 ;                    |  Current slice (counts down) of AC half-wave          |
                      00271 ;                    |______|______|______|______|______|______|______|______|
                      00272 ; $046 CUR_PRE       |  If SSR_STATE<PRECYC>                                 |
                      00273 ;                    |  Countdown from ZC interrupt to start of AC half-wave |
                      00274 ;                    |______|______|______|______|______|______|______|______|
                      00275 ; $047 RX_BYTE       |                                                       |
                      00276 ;                    |  Received byte from serial network                    |
                      00277 ;                    |______|______|______|______|______|______|______|______|
                      00278 ; $048 SSR_STATE2    |SLICE |DIM_  |DIM_  |      |      |      |      |      |
                      00279 ;                    |_UPD  |START |END   |REDOFF|YELOFF|GRNBLK|SSRUPD| TXQUE|
                      00280 ;                    |______|______|______|______|______|______|______|______|
                      00281 ; $049 DATA_BUF      |                                                       |
                      00282 ;                    |  Holding area for data of command being parsed        |
                      00283 ;                    |______|______|______|______|______|______|______|______|
                      00284 ; $04A ACT_TMR       |  If SSR_STATE3<ACTEN>                                 |
                      00285 ;                    |  Number of 1/120sec until ACT LED turns off           |
                      00286 ;                    |______|______|______|______|______|______|______|______|
                      00287 ; $04B SSR_STATE3    |      |      |      |      |      |      |      |      |
                      00288 ;                    |      |      |      |      |      |ACTEN |ACTOFF|PRIVEN|
                      00289 ;                    |______|______|______|______|______|______|______|______|
                      00290 ; $04C               |      |      |      |      |      |      |      |      |
                      00291 ;                    |      |      |      |      |      |      |      |      |
                      00292 ;                    |______|______|______|______|______|______|______|______|
                      00293 ; $04D               |      |      |      |      |      |      |      |      |
                      00294 ;                    |      |      |      |      |      |      |      |      |
                      00295 ;                    |______|______|______|______|______|______|______|______|
                      00296 ; $04E TXBUF_QUEUE   |                           |                           |
                      00297 ;                    |             5             | Addr of next byte to queue|
                      00298 ;                    |______|______|______|______|______|______|______|______|
                      00299 ; $04F TXBUF_SEND    |                           |                           |
                      00300 ;                    |             5             | Addr of next byte to send |
                      00301 ;                    |______|______|______|______|______|______|______|______|
                      00302 ; $050 TXBUF         |                                                       |
                      00303 ;                    |  Transmitter output buffer (byte 1 of 16)             |
                      00304 ;                    |______|______|______|______|______|______|______|______|
                      00305 ;
                      00306 ;       .                                        .
                      00307 ;       .                                        .
                      00308 ;       .                                        .
                      00309 ;
                      00310 ;                     _______________________________________________________
                      00311 ; $05F               |                                                       |
                      00312 ;                    |  Transmitter output buffer (byte 16 of 16)            |
                      00313 ;                    |______|______|______|______|______|______|______|______|
                      00314 ; $060               |      |      |      |      |      |      |      |      |
                      00315 ;                    |      |      |      |      |      |      |      |      |
                      00316 ;                    |______|______|______|______|______|______|______|______|
                      00317 ;
                      00318 ;       .                                        .
                      00319 ;       .                                        .
                      00320 ;       .                                        .
                      00321 ;
                      00322 ;                     _______________________________________________________
                      00323 ; $06F               |      |      |      |      |      |      |      |      |
                      00324 ;                    |      |      |      |      |      |      |      |      |
                      00325 ;                    |______|______|______|______|______|______|______|______|
                      00326 ;
                      00327 ;-----------------------------------------------------------------------------
                      00328 ; BANK 1
                      00329 ;-----------------------------------------------------------------------------
                      00330 ;
                      00331 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00332 ; $085 TRISA         |                                                       |
                      00333 ;                    | Port A tri-state bitmask (1=input, 0=output)          |
                      00334 ;                    |______|______|______|______|______|______|______|______|
                      00335 ; $086 TRISB         |                                                       |
                      00336 ;  (Bank 3 too)      | Port B tri-state bitmask (1=input, 0=output)          |
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00337 ;                    |______|______|______|______|______|______|______|______|
                      00338 ; $087 TRISC         |                                                       |
                      00339 ;                    | Port C tri-state bitmask (1=input, 0=output)          |
                      00340 ;                    |______|______|______|______|______|______|______|______|
                      00341 ; $088 TRISD         |                                                       |
                      00342 ;                    | Port D tri-state bitmask (1=input, 0=output)          |
                      00343 ;                    |______|______|______|______|______|______|______|______|
                      00344 ; $089 TRISE         |      |      |      | PSP  |//////|                    |
                      00345 ;                    |  IBF | OBF  | IBOV | MODE |//////| Port E tri-state   |
                      00346 ;                    |______|______|______|______|//////|______|______|______|
                      00347 ; $08C PIE1          |      |      |      |      |      |      |      |      |
                      00348 ;                    |PSPIE | ADIE | RCIE | TXIE |SSPIE |CCP1IE|TMR2IE|TMR1IE|
                      00349 ;                    |______|______|______|______|______|______|______|______|
                      00350 ; $08D PIE2          |      |      |      |      |      |      |      |      |
                      00351 ;                    |      | CMIE |      | EEIE |BCLIE |      |      |CCP2IE|
                      00352 ;                    |______|______|______|______|______|______|______|______|
                      00353 ; $092 PR2           |                                                       |
                      00354 ;                    | Timer 2 period register                               |
                      00355 ;                    |______|______|______|______|______|______|______|______|
                      00356 ; $098 TXSTA         |      |      |      |      |//////|      |      |      |
                      00357 ;                    | CSRC |  TX9 | TXEN | SYNC |//////| BRGH | TRMT | TX9D |
                      00358 ;                    |______|______|______|______|//////|______|______|______|
                      00359 ; $099 SPBRG         |                                                       |
                      00360 ;                    | Baud Rate Generator Value                             |
                      00361 ;                    |______|______|______|______|______|______|______|______|
                      00362 ; $09F ADCON1        |      |      |//////|//////|      |      |      |      |
                      00363 ;                    | ADFM | ADCS2|//////|//////| PCFG3| PCFG2| PCFG1| PCFG0|
                      00364 ;                    |______|______|//////|//////|______|______|______|______|
                      00365 ; $0AD               |      |      |      |      |      |      |      |      |
                      00366 ;                    |      |      |      |      |      |      |      |      |
                      00367 ;                    |______|______|______|______|______|______|______|______|
                      00368 ;
                      00369 ;       .                                        .
                      00370 ;       .                                        .
                      00371 ;       .                                        .
                      00372 ;
                      00373 ;                     _______________________________________________________
                      00374 ; $0EF               |      |      |      |      |      |      |      |      |
                      00375 ;                    |      |      |      |      |      |      |      |      |
                      00376 ;                    |______|______|______|______|______|______|______|______|
                      00377 ;
                      00378 ;-----------------------------------------------------------------------------
                      00379 ; BANK 2
                      00380 ;-----------------------------------------------------------------------------
                      00381 ;
                      00382 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00383 ; $101 TMR0          |                                                       |
                      00384 ;   (bank 0 too)     | Timer0 module register                                |
                      00385 ;                    |______|______|______|______|______|______|______|______|
                      00386 ; $106 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00387 ;   (bank 0 too)     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00388 ;                    |/////////////|______|______|______|______|______|//////|
                      00389 ; $10C EEDATA        |                                                       |
                      00390 ;                    | EEPROM Data register (LSB)                            |
                      00391 ;                    |______|______|______|______|______|______|______|______|
                      00392 ; $10D EEADR         |                                                       |
                      00393 ;                    | EEPROM Address register (LSB)                         |
                      00394 ;                    |______|______|______|______|______|______|______|______|
                      00395 ; $10E EEDATH        |/////////////|                                         |
                      00396 ;                    |/////////////| EEPROM Data register (MSB)              |
                      00397 ;                    |/////////////|______|______|______|______|______|______|
                      00398 ; $10F EEADRH        |////////////////////|                                  |
                      00399 ;                    |////////////////////| EEPROM Address register (MSB)    |
                      00400 ;                    |////////////////////|______|______|______|______|______|
                      00401 ; $120               |      |      |      |      |      |      |      |      |
                      00402 ;                    |      |      |      |      |      |      |      |      |
                      00403 ;                    |______|______|______|______|______|______|______|______|
                      00404 ;
                      00405 ;       .                                        .
                      00406 ;       .                                        .
                      00407 ;       .                                        .
                      00408 ;
                      00409 ;                     _______________________________________________________
                      00410 ; $16F               |      |      |      |      |      |      |      |      |
                      00411 ;                    |      |      |      |      |      |      |      |      |
                      00412 ;                    |______|______|______|______|______|______|______|______|
                      00413 ;
                      00414 ;-----------------------------------------------------------------------------
                      00415 ; BANK 3
                      00416 ;-----------------------------------------------------------------------------
                      00417 ;
                      00418 ;                     __7___.__6___.__5___.__4___.__3___.__2___.__1___.__0___
                      00419 ; $181 OPTION_REG    | ____ |      |      |      |      |                    |
                      00420 ;                    | RBPU |INTEDG| T0CS | T0SE | PSA  |      PS2,1,0       |
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00421 ;                    |______|______|______|______|______|______|______|______|
                      00422 ; $186 TRISB         |                                                       |
                      00423 ;  (Bank 1 too)      | Port B tri-state bitmask (1=input, 0=output)          |
                      00424 ;                    |______|______|______|______|______|______|______|______|
                      00425 ; $18C EECON1        |      |      |      |      |      |      |      |      |
                      00426 ;                    |EEPGD |      |      |      |WRERR | WREN |  WR  |  RD  |
                      00427 ;                    |______|______|______|______|______|______|______|______|
                      00428 ; $18D EECON2        |                                                       |
                      00429 ;                    | EEPROM Control Register (magic register)              |
                      00430 ;                    |______|______|______|______|______|______|______|______|
                      00431 ; $1A0               |      |      |      |      |      |      |      |      |
                      00432 ;                    |      |      |      |      |      |      |      |      |
                      00433 ;                    |______|______|______|______|______|______|______|______|
                      00434 ;
                      00435 ;       .                                        .
                      00436 ;       .                                        .
                      00437 ;       .                                        .
                      00438 ;
                      00439 ;                     _______________________________________________________
                      00440 ; $1EF               |      |      |      |      |      |      |      |      |
                      00441 ;                    |      |      |      |      |      |      |      |      |
                      00442 ;                    |______|______|______|______|______|______|______|______|
                      00443 ;
                      00444 ;
                      00445 ;=============================================================================
                      00446 ; IMPLEMENTATION NOTES
                      00447 ;-----------------------------------------------------------------------------
                      00448 ;
                      00449 ; The SSR controller firmware consists of a number of somewhat independent
                      00450 ; subsystems:
                      00451 ;
                      00452 ; START
                      00453 ;       Initializes the microcontroller, starts up the required peripherals,
                      00454 ;       indicates the device ID on the front panel, and enters the main loop
                      00455 ;
                      00456 ; ISR
                      00457 ;       The interrupt service routine manages a set of counters and timers:
                      00458 ;       1. At each AC line zero-crossing point, we reset a two-stage waveform
                      00459 ;          slicing timing chain which governs the ability for the SSRs to dim
                      00460 ;          incandescent lamps plugged into them;
                      00461 ;       2. Each front panel LED has a counter for how long their current
                      00462 ;          status is to be held, to allow a human to have enough time to
                      00463 ;          see the LED before it would be extinguished.
                      00464 ;
                      00465 ; MAIN_LOOP
                      00466 ;       Manages the display of the front panel LEDs
                      00467 ;       Updates the status of the SSR lines if it's time to do so
                      00468 ;       Receives a character from the serial line if one's waiting
                      00469 ;
                      00470 ; INTERPRETER
                      00471 ;       When a byte is received on the serial line, it is processed by
                      00472 ;       a small state machine.  The current state is held in SSR_STATE<2:0>.
                      00473 ;
                      00474 ;-----------------------------------------------------------------------------
                      00475 ; Command Protocol:
                      00476 ;                     _______________________________________________________
                      00477 ; Command Byte:      |      |                    |                           |
                      00478 ;                    |  1   |    Command code    |   Target device address   |
                      00479 ;                    |______|______|______|______|______|______|______|______|
                      00480 ;
                      00481 ; Any byte with its MSB set is the beginning of a command.  If the target
                      00482 ; device matches this unit's address, the state machine kicks into gear and
                      00483 ; processes the command (which may require some following data bytes, all
                      00484 ; of which must have their MSB cleared).  Otherwise, the unit ignores the
                      00485 ; byte.
                      00486 ;
                      00487 ; Any byte with its MSB cleared is a data byte, and is ignored unless we're
                      00488 ; in the middle of interpreting a multi-byte command.
                      00489 ;
                      00490 ; Commands recognized:
                      00491 ;       0: All channels off
                      00492 ;       1: Set/clear single channel (requires channel ID byte)
                      00493 ;       2: Set channel to value (requires channel ID and value bytes)
                      00494 ;       3: Reserved
                      00495 ;       4: Reserved
                      00496 ;       5: Reserved
                      00497 ;       6: Reserved
                      00498 ;       7: Administrative command (follow-on byte further decodes):
                      00499 ;          00pppppp Set phase offset=p and display on LEDs
                      00500 ;          010baaaa Set device address=aaaa; b=a<0>
                      00501 ;          01100000 Shutdown device
                      00502 ;          01100001 Disable administrative commands
                      00503 ;          01100010 Reserved
                      00504 ;             .         .
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00505 ;             .         .
                      00506 ;             .         .
                      00507 ;          01101111 Reserved
                      00508 ;          0111xxxx Internal commands MASTER->SLAVE:
                      00509 ;                   011100xx  Reserved
                      00510 ;                   011101yr  Display RED and/or YEL LED 2S
                      00511 ;                   01111gyr  HALT with <g><y><r> displayed on LEDs
                      00512 ;
                      00513 ;                     _______________________________________________________
                      00514 ; Channel ID:        |      |      |                                         |
                      00515 ;                    |  0   | ON   |               Channel ID                |
                      00516 ;                    |______|______|______|______|______|______|______|______|
                      00517 ; The ON bit <6> determines whether the channel is being turned on (1) or
                      00518 ; off (0) for the "Set/clear single channel" command.  it is ignored when
                      00519 ; setting the channel to a specific dimmer value.
                      00520 ;
                      00521 ;                     _______________________________________________________
                      00522 ; Dimmer Value:      |      |      |      |                                  |
                      00523 ;                    |  0   |   x  |   x  | Brightness level (0=off, 31=on)  |
                      00524 ;                    |______|______|______|______|______|______|______|______|
                      00525 ;
                      00526 ;-----------------------------------------------------------------------------
                      00527 ; State Machine Details
                      00528 ;
                      00529 ; Normally sits at state 0 (Idle) where it pretty much spins free waiting
                      00530 ; for the start of a command to come along.
                      00531 ;  ___________________
                      00532 ; | 4 | ADMIN         |
                      00533 ; |___| Waiting for   |
                      00534 ; |     Sub-command   |
                      00535 ; |___________________|
                      00536 ;         ^  |
                      00537 ;         |  |
                      00538 ;         |  |
                      00539 ;         |  |
                      00540 ;  _______|__V________                   _________________
                      00541 ; | 0 | IDLE          |                 | 1 | SETCHAN     |
                      00542 ; |___|               |---------------->|___| Waiting for |
                      00543 ; |                   |<----------------|     Channel byte|
                      00544 ; |___________________|<-------+        |_________________|
                      00545 ;           |                  |
                      00546 ;           |                  |
                      00547 ;           |                  |
                      00548 ;           |                  |
                      00549 ;  _________V_________         |         _________________
                      00550 ; | 2 | DIMCHAN1      |        +--------| 3 | DIMCHAN2    |
                      00551 ; |___| Waiting for   |---------------->|___| Waiting for |
                      00552 ; |     Channel byte  |                 |     Value byte  |
                      00553 ; |___________________|                 |_________________|
                      00554 ;
                      00555 ;
                      00556 ;-----------------------------------------------------------------------------
                      00557 ; System Timing Notes
                      00558 ;
                      00559 ; The system has some fairly specific real-time timing requirements in order
                      00560 ; to function properly.  The main external event we're synchronized to is the
                      00561 ; point where the AC waveform crosses the 0V line (the "zero crossing" point).
                      00562 ;
                      00563 ; An optoisolator on the controller board is connected to the AC input of the
                      00564 ; transformer and sends a positive-logic pulse to the INT pin of the micro-
                      00565 ; controller every time the AC line crosses 0V.  (Actually, the leading edge
                      00566 ; will slightly lead the zero crossing point and the trailing edge will
                      00567 ; slightly lag behind it.)  So we enter our ISR once every 1/120 sec
                      00568 ; (assuming US-standard 60Hz power).  For reference, this is 0.00833333 sec
                      00569 ; or enough time for 41,666.666 instructions to be executed between each
                      00570 ; interrupt.
                      00571 ;
                      00572 ; (Revised; earlier versions of this firmware used 64 levels on the dimmers
                      00573 ; --which are probably too many--and this didn't allow enough time for the
                      00574 ; main loop to run, so we backed it off to 32 here.  We will only run into
                      00575 ; trouble now if all--or most--channels are set to the same level, since
                      00576 ; that one slice may run slightly over its allotted time, but the next slice
                      00577 ; will be shorter as a result and we'll catch back up within a tiny fraction
                      00578 ; of a cycle.)
                      00579 ;
                      00580 ; We divide the half-wave into "slices".  We need a minimum of 32 slices
                      00581 ; to get 32 levels of dimmer control, but we should add at least one on either
                      00582 ; end in case our timing's slightly off between the ZC points and the free-
                      00583 ; running timer.  For good measure, let's throw in a couple more to allow for
                      00584 ; pin settling times, minimum turn-on times for the triacs and just to be
                      00585 ; paranoid.  So let's say 38 slices per half-wave.  This is good, because it
                      00586 ; means that each dimmer level is 1/38th brightness, with the lowest setting
                      00587 ; (other than off) being a minimum of 7/38ths, which means we don't waste
                      00588 ; several dimmer levels below the threshold for an incandescent filament to
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00589 ; even be visibly on at all.
                      00590 ;
                      00591 ; At 38 slices per ZC, each slice is 0.000219298245614 seconds.
                      00592 ; The closest match to this is 0.0002192 sec (a timer value of 137 at 1:8 scale)
                      00593 ; so we're really getting about 38.01703 slices in a half-cycle.
                      00594 ; This works out to around 1,096 instructions per slice, which is more than
                      00595 ; adequate but can get tight if all the channels are at the same dimmer settings,
                      00596 ; but it works well enough.
                      00597 ; We have to be able to handle an incoming byte on the serial port and update all
                      00598 ; the SSRs once in that many instructions.
                      00599 ;
                      00600 ; These times will vary based on what commands are being parsed, the combination
                      00601 ; of SSRs on, off, dim, or at what brightness level, but a general idea is:
                      00602 ;
                      00603 ;    ROUTINE   IDLE  BUSY (total instruction cycles)
                      00604 ;     ISR              46
                      00605 ;     LEDs       12    16
                      00606 ;     SIO Poll    6    17
                      00607 ;     Parser     10     7, 23, 64, up to 129+
                      00608 ;     SSR Upd    22   373 up to 1,141+
                      00609 ;
                      00610 ; So when nothing at all is happening, we only need around 40 instruction
                      00611 ; cycles (0.000008 sec) per slice (3.6% of the available slice time) to run
                      00612 ; an idle main loop iteration.
                      00613 ;
                      00614 ; The overhead of some of the loops and subroutines can be eliminated by
                      00615 ; flattening them into lots of repetitive cut-and-paste inline code.  We do
                      00616 ; have the available program memory to do that, and gain some significant
                      00617 ; runtime performance.  For now, we will keep it less efficient but more
                      00618 ; maintainable until we need that performance.
                      00619 ;
                      00620 ; In the previous (prototype) version of this controller, we took the ZC
                      00621 ; signal from the *secondary* side of the transformer, which meant that it
                      00622 ; was possible for that to be out of phase with the actual AC ZC event, so
                      00623 ; the "phase delay" feature of the event handling code was written to
                      00624 ; compensate for this.  Now that we sample the AC line directly, we set
                      00625 ; this delay to a constant value and that should be good.  We left the
                      00626 ; capability in here, though, to account for any need for adjustment which
                      00627 ; may turn up due to component tolerances, propagation delays, or similar
                      00628 ; things.  We correct for any phase offset by adding a software delay
                      00629 ; from 0-255 (although really only 0-40 make much sense) slices between the ZC
                      00630 ; interrupt and the start of the dimmer cycle of 32 slices.  (The other 6
                      00631 ; slices are idle (not active) slices.)
                      00632 ;
                      00633 ; The value for PHASE_OFFSET should be chosen to start the cycle one or two
                      00634 ; slices into the actual half-wave.  So if there is no phase difference at all
                      00635 ; between sides of the transformer, PHASE_OFFSET shoud be started at 2.
                      00636 ;
                      00637 ; Here's the timeline:
                      00638 ;
                      00639 ;                    REAL                               REAL
                      00640 ;                     ZC                                 ZC
                      00641 ;    |................|..|...............|....|....|.....|..|..............
                      00642 ;    |phase delay------->|               |phase delay------>|
                      00643 ;    |                   |working slices----->|    |        |working slices-->
                      00644 ;    |                                   |    |idle|
                      00645 ;   INT                                 INT
                      00646 ;   (ZC)                                (ZC)
                      00647 ;
                      00648 ; Of course, in the current design, there is no phase shift across
                      00649 ; the transformer, so we'd have the trivial case of PHASE_OFFSET=2 (2 just to
                      00650 ; allow a little fudge room with the free-running slice timer which is not
                      00651 ; *quite* an even factor of the half-wave time):
                      00652 ;
                      00653 ;    REAL                         REAL
                      00654 ;     ZC                           ZC
                      00655 ;    .|..|....................|....|..|.................|
                      00656 ;     |->|                    |    |->|                 |
                      00657 ;     |  |working slices----->|    |  |working slices-->|
                      00658 ;     |  |                    |idle|  |                 |
                      00659 ;    INT                          INT
                      00660 ;
                      00661 ; Since the free-running slice timer isn't exactly in sync with the ZC timing,
                      00662 ; we'll start our working slices some variable fraction of 1/38th of a half-cycle
                      00663 ; each time.  This will cause a "wobble" in brightness level of not more than
                      00664 ; 1/38th brightness level (something less than one brightness increment), which
                      00665 ; ought to be difficult or impossible to notice by looking at an incandescent
                      00666 ; light load.  This is one reason why PHASE_OFFSET should be set to allow 1-2
                      00667 ; idle slices before we start turning on SSRs.
                      00668 ;
                      00669 ; On ZC interrupt, we set CUR_PRE to PHASE_DELAY and set <PRECYC>.
                      00670 ; On TMR2 interrupt, if SSR_STATE<PRECYC>, decrement CUR_PRE.
                      00671 ;   if zero, clear SSR_STATE<PRECYC>, set CUR_SLICE to 32, set <INCYC>,<DIM_START>.
                      00672 ;   if SSR_STATE<INCYC>, decrement CUR_SLICE; if zero, set DIM_END, clr INCYC; else set SLICE_UPD
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00673 ;
                      00674 ; In main polling loop:
                      00675 ;   if DIM_START: turn on "on" SSRs, clear DIM_START
                      00676 ;   if SLICE_UPD: turn on SSR == CUR_SLICE for SSRs with SSRDIM set; clear SLICE_UPD
                      00677 ;   if DIM_END:   turn off all except SSR_ON, clear DIM_END
                      00678 ;
                      00679 ; PRECYC INCYC SLICE_UPD DIM_START DIM_END CUR_PRE CUR_SLICE
                      00680 ;    0     x       x         x        x       x       x
                      00681 ;    1     x       x         x        x       4       x       <--zc
                      00682 ;    1     x       x         x        x       3       x
                      00683 ;    1     x       x         x        x       2       x
                      00684 ;    1     x       x         x        x       1       x
                      00685 ;    0     1     1-->0     1-->0      x       0      31       SSR@31/on turned on
                      00686 ;    0     1     1-->0       0        x       0      30       SSR@30    turned on
                      00687 ;    0     1     1-->0       0        x       0      29       SSR@29    turned on
                      00688 ; ...
                      00689 ;    0     1     1-->0       0        x       0       2       SSR@2     turned on
                      00690 ;    0     1     1-->0       0        x       0       1       SSR@1     turned on
                      00691 ;    0     0     1-->0       0      1-->0     0       0       all non-on turned off
                      00692 ;    0     0       0         0        0       0       0       idle...
                      00693 ; ...
                      00694 ;    1     0       0         0        0       4       0       <--zc
                      00695 ;
                      00696 ;
                      00697 ; We're apparently leaving the call stack half-empty worst-case.
                      00698 ; =============================================================================
                      00699 ;
                      00700 ; Startup LED sequence:
                      00701 ;  --- *set up I/O ports, TRIS bits
                      00702 ;  GYR flash quickly 5 times -- indicates restart of CPU
                      00703 ;  G-- [M] indicates MASTER
                      00704 ;  --R [S] indicates 877A SLAVE
                      00705 ;  -YR [S] indicates 777 SLAVE
                      00706 ;      *set up EEPROM
                      00707 ;      (2s)
                      00708 ;      *start transmitter
                      00709 ;  --- (2s)
                      00710 ;  -Y- flash YEL 1x == ROM ID v2.0
                      00711 ;  --- (2s)
                      00712 ;  G-R [M] GRN steady, flash RED for device ID
                      00713 ;  --- (2s)
                      00714 ;  --R (1s)
                      00715 ;      *set up serial port, interrupt options, etc.
                      00716 ;      (2s)
                      00717 ;      *start receiver
                      00718 ;  --- (.25s)
                      00719 ;  -Y- *slave waits for master
                      00720 ;      *master waits 1s then transmits
                      00721 ;  -YR RED steady, flash YEL MSN of PO
                      00722 ;  -YR YEL steady, flash RED LSN of PO
                      00723 ;  ---
                      00724 ;  GY- GRN blinking slowly => run state
                      00725 ;
                      00726 ;
                      00727 ;
                      00728 ;
                      00729 ; =============================================================================
                      00730 ;
                      00731                 PROCESSOR 16F877A       ; @@P=877@@
                      00732 #include <p16f877a.inc>                 ; @@P=877@@
                      00001         LIST
                      00002 ; P16F877A.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00400         LIST
2007   197E           00733                 __CONFIG        _CP_ALL & _DEBUG_OFF & _WRT_HALF & _CPD_OFF & _LVP_OFF & _BODEN_ON & _PW
                            RTE_OFF & _WDT_ON & _HS_OSC ; @@P=877@@
                      00734 ;
                      00735 ;==============================================================================
                      00736 ; CONSTANTS
                      00737 ;==============================================================================
                      00738 ;
                      00739 ; Flash rates for various LED displays
                      00740 ;
  000000FF            00741 GRN_BLINK_RATE  EQU     .255            ; x 1/120s flash rate for green led
  0000003C            00742 ACT_RX_LEN      EQU     .60             ; x 1/120s active led for Rx data
  00000078            00743 RED_ORERR_LEN   EQU     .120            ; x 1/120s red for data overrun
  000000F0            00744 RED_CMDERR_LEN  EQU     .240            ; x 1/120s red for cmd error
  000000F0            00745 YEL_CMDERR_LEN  EQU     .240            ; x 1/120s yellow for cmd error
  0000001E            00746 SLV_TX_LEN      EQU     .30             ; x 1/120s red for Tx to slave
  0000001E            00747 SLV_RX_LEN      EQU     .30             ; x 1/120s red for Rx from master
  000000F0            00748 SLV_LED_LEN     EQU     .240            ; x 1/120s LED display time
                      00749 ;
                      00750 ;==============================================================================
                      00751 ; COMMAND BYTES
                      00752 ;==============================================================================
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00753 ;                     ___7______6______5______4______3______2______1______0__
                      00754 ; Command Byte:      |      |                    |                           |
                      00755 ;                    |  1   |    Command code    |   Target device address   |
                      00756 ;                    |______|______|______|______|______|______|______|______|
                      00757 ;
  00000007            00758 CMD_BIT         EQU     7               ; X------- Type (cmd=1; data=0)
  00000007            00759 CMD_SW_MASK     EQU     b'00000111'     ; -----XXX Nybble-swapped Command code mask
  00000070            00760 CMD_MASK        EQU     b'01110000'     ; -XXX---- Command code mask
  0000000F            00761 CMD_ADDR_MASK   EQU     b'00001111'     ; ----XXXX Device address mask
                      00762 ;
                      00763 ;                     ___7______6______5______4______3______2______1______0__
                      00764 ; Channel ID:        |      |      |                                         |
                      00765 ;                    |  0   | ON   |               Channel ID                |
                      00766 ;                    |______|______|______|______|______|______|______|______|
                      00767 ;
  00000006            00768 CMD_CHAN_ON     EQU     6               ; -X------ Channel fully on?
  0000003F            00769 CMD_CHAN_MASK   EQU     b'00111111'     ; --XXXXXX Channel ID mask
                      00770 ;
                      00771 ;                     ___7______6______5______4______3______2______1______0__
                      00772 ; Dimmer Value:      |      |      |      |                                  |
                      00773 ;                    |  0   |   x  |   x  | Brightness level (0=off, 31=on)  |
                      00774 ;                    |______|______|______|______|______|______|______|______|
                      00775 ;
  0000001F            00776 CMD_DIM_MASK    EQU     b'00011111'     ; ---XXXXX Dimmer value mask
                      00777 ;
                      00778 ;                     ___7______6______5______4______3______2______1______0__
                      00779 ; Set Phase Command: |      |      |      |                                  |
                      00780 ;                    |  0   |   0  |  Phase offset level (0-63)              |
                      00781 ;                    |______|______|______|______|______|______|______|______|
                      00782 ;
  0000003F            00783 CMD_AD_PH_MASK  EQU     b'00111111'     ; --XXXXXX phase offset value mask
                      00784 ;
                      00785 ;                     ___7______6______5______4______3______2______1______0__
                      00786 ; Set ID Command:    |      |      |      |      |                           |
                      00787 ;                    |  0   |   1  |   0  | ad<0>| New device address (ad)   |
                      00788 ;                    |______|______|______|______|______|______|______|______|
                      00789 ;
  00000004            00790 CMD_AD_ID_CHK   EQU     4               ; ---X---- Must == <0> bit
  0000000F            00791 CMD_AD_ID_MASK  EQU     b'00001111'     ; ----XXXX Device ID mask
                      00792 ;
                      00793 ;                     ___7______6______5______4______3______2______1______0__
                      00794 ; Misc. Admin Cmds:  |      |      |      |      |                           |
                      00795 ;                    |  0   |   1  |   1  |   0  |        command ID         |
                      00796 ;                    |______|______|______|______|______|______|______|______|
                      00797 ;
  0000000F            00798 CMD_AD_CMD_MASK EQU     b'00001111'     ; ----XXXX sub-command mask
                      00799 ;
                      00800 ;                     ___7______6______5______4______3______2______1______0__
                      00801 ; Slave Commands:    |      |      |      |      |                           |
                      00802 ;                    |  0   |   1  |   1  |   1  |    command / data bits    |
                      00803 ;                    |______|______|______|______|______|______|______|______|
                      00804 ;
                      00805 ;      Reserved for future commands:                 0      0      x      x
                      00806 ;      Display yellow/red pattern for 2s:            0      1     YEL    RED
                      00807 ;      Display green/yellow/red pattern, HALT:       1     GRN    YEL    RED
                      00808 ;
  00000004            00809 CMD_AD_SLAVE    EQU     4               ; ---X---- slave command?
  00000003            00810 CMD_AD_S_HALT   EQU     3               ; ----X--- halt w/LED pattern
  00000002            00811 CMD_AD_S_GRN    EQU     2               ; -----X-- green LED lit?
  00000001            00812 CMD_AD_S_YEL    EQU     1               ; ------X- yellow LED lit?
  00000000            00813 CMD_AD_S_RED    EQU     0               ; -------X red LED lit?
                      00814 
                      00815 
                      00816 ;
                      00817 ;==============================================================================
                      00818 ; EEPROM
                      00819 ;==============================================================================
                      00820 ;
                      00821 ; These locations in the EEPROM data area are used for persistent storage
                      00822 ; of important data values:
                      00823 ;
                      00824 ;                     ___7______6______5______4______3______2______1______0__
                      00825 ; $00  EE_IDLE       |      |      |      |      |      |      |      |      |
                      00826 ;                    |   1  |   1  |   1  |   1  |   1  |   1  |   1  |   1  |
                      00827 ;                    |______|______|______|______|______|______|______|______|
                      00828 ; $01  EE_DEV_ID     |///////////////////////////|                           |
                      00829 ;                    |///////////////////////////| This device's ID number   |
                      00830 ;                    |///////////////////////////|______|______|______|______|
                      00831 ; $02  EE_PHASE      |                                                       |
                      00832 ;                    |  Phase offset value                                   |
                      00833 ;                    |______|______|______|______|______|______|______|______|
                      00834 ;
                      00835 ;
  00000000            00836 EE_IDLE         EQU     0x00            ; EEPROM address of 0xff byte (per '877 errata) @@P=877@@
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            00837 EE_DEV_ID       EQU     0x01            ; EEPROM address of device ID                   @@P=877@@
  00000002            00838 EE_PHASE        EQU     0x02            ; EEPROM address of phase offset                @@P=877@@
                      00839 ;                                                @@P=877@@
                      00840 ; Default values when chip is flashed:           @@P=877@@
                      00841 ;                                                @@P=877@@
2100                  00842 EEPROM_DEFAULTS ORG     0x2100          ;        @@P=877@@
2100   00FF           00843 EE_DEF_IDLE     DE      0xFF            ;        @@P=877@@
2101   0000           00844 EE_DEF_DEV_ID   DE      0x00            ;        @@P=877@@
2102   0002           00845 EE_DEF_PHASE    DE      0x02            ;        @@P=877@@
                      00846 ;
                      00847 ;==============================================================================
                      00848 ; REGISTERS
                      00849 ;==============================================================================
                      00850 ;
                      00851 ; Bits and registers used by the firmware
                      00852 ;
                      00853 ;------------------------------------------------------------------------------
                      00854 ; All Banks
                      00855 ;------------------------------------------------------------------------------
                      00856 ;
  00000070            00857 W_TEMP          EQU     0x070           ; Storage for W during ISR
  00000071            00858 STATUS_TEMP     EQU     0x071           ; Storage for STATUS during ISR
  00000072            00859 I               EQU     0x072           ; General-purpose data counter
  00000073            00860 J               EQU     0x073           ; General-purpose data counter
  00000074            00861 K               EQU     0x074           ; General-purpose data counter
  00000075            00862 X               EQU     0x075           ; General-purpose data register
  00000076            00863 Y               EQU     0x076           ; General-purpose data register
  00000077            00864 PCLATH_TEMP     EQU     0x077           ; Storage for PCLATH during ISR
                      00865 ;
                      00866 ;------------------------------------------------------------------------------
                      00867 ; Bank 0
                      00868 ;------------------------------------------------------------------------------
                      00869 ;
                      00870 ; Output Ports mapped to SSR outputs and LEDs.  These have a physical port
                      00871 ; register (e.g., PORTA), writing to which drives the outputs from the chip.
                      00872 ; A buffer register (e.g., PORTA_BUF) mirrors the layout of PORTA, and is
                      00873 ; where our routines update the bits before they're pushed out to the actual
                      00874 ; I/O port.
                      00875 ;
                      00876 ; We define the mappings between logical signals like /SSR08 and the
                      00877 ; registers and bit positions in memory here.
                      00878 ;
                      00879 ;                     ___7______6______5______4______3______2______1______0__
                      00880 ; $005 PORTA         |/////////////|   _  | _____| _____| _____| _____| _____|
                      00881 ; $038 PORTA_BUF     |/////////////| T/R  | SSR08| SSR10| SSR12| SSR14| SSR16|
                      00882 ;                    |/////////////|______|______|______|______|______|______|
                      00883 ;
  00000038            00884 PORTA_BUF       EQU     0x038
                      00885 
  00000005            00886 PORT_TRSEL      EQU     PORTA
  00000038            00887 PBUF_TRSEL      EQU     PORTA_BUF
  00000005            00888 BIT_TRSEL       EQU     5
  00000005            00889 PORT_08         EQU     PORTA
  00000005            00890 PORT_10         EQU     PORTA
  00000005            00891 PORT_12         EQU     PORTA
  00000005            00892 PORT_14         EQU     PORTA
  00000005            00893 PORT_16         EQU     PORTA
                      00894 
  00000038            00895 PBUF_08         EQU     PORTA_BUF
  00000038            00896 PBUF_10         EQU     PORTA_BUF
  00000038            00897 PBUF_12         EQU     PORTA_BUF
  00000038            00898 PBUF_14         EQU     PORTA_BUF
  00000038            00899 PBUF_16         EQU     PORTA_BUF
                      00900 
  00000004            00901 BIT_08          EQU     4
  00000003            00902 BIT_10          EQU     3
  00000002            00903 BIT_12          EQU     2
  00000001            00904 BIT_14          EQU     1
  00000000            00905 BIT_16          EQU     0
                      00906 ;
                      00907 ;                     ___7______6______5______4______3______2______1______0__
                      00908 ; $006 PORTB         |/////////////| _____| _____| _____| _____| _____|//////|
                      00909 ; $039 PORTB_BUF     |/////////////| SSR15| SSR13| SSR11| SSR09| SSR07|//////|
                      00910 ;                    |/////////////|______|______|______|______|______|//////|
                      00911 ;
  00000039            00912 PORTB_BUF       EQU     0x039
                      00913 
  00000006            00914 PORT_15         EQU     PORTB
  00000006            00915 PORT_13         EQU     PORTB
  00000006            00916 PORT_11         EQU     PORTB
  00000006            00917 PORT_09         EQU     PORTB
  00000006            00918 PORT_07         EQU     PORTB
                      00919 
  00000039            00920 PBUF_15         EQU     PORTB_BUF
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000039            00921 PBUF_13         EQU     PORTB_BUF
  00000039            00922 PBUF_11         EQU     PORTB_BUF
  00000039            00923 PBUF_09         EQU     PORTB_BUF
  00000039            00924 PBUF_07         EQU     PORTB_BUF
                      00925 
  00000005            00926 BIT_15          EQU     5
  00000004            00927 BIT_13          EQU     4
  00000003            00928 BIT_11          EQU     3
  00000002            00929 BIT_09          EQU     2
  00000001            00930 BIT_07          EQU     1
                      00931 ;
                      00932 ;                     ___7______6______5______4______3______2______1______0__
                      00933 ; $007 PORTC         |/////////////| _____| _____| _____| _____| _____| _____|
                      00934 ; $03A PORTC_BUF     |/////////////| SSR02| SSR00| SSR01| SSR03| SSR19| SSR04|
                      00935 ;                    |/////////////|______|______|______|______|______|______|
                      00936 ;
  0000003A            00937 PORTC_BUF       EQU     0x03A
                      00938 
  00000007            00939 PORT_02         EQU     PORTC
  00000007            00940 PORT_00         EQU     PORTC
  00000007            00941 PORT_01         EQU     PORTC
  00000007            00942 PORT_03         EQU     PORTC
  00000007            00943 PORT_19         EQU     PORTC
  00000007            00944 PORT_04         EQU     PORTC
                      00945 
  0000003A            00946 PBUF_02         EQU     PORTC_BUF
  0000003A            00947 PBUF_00         EQU     PORTC_BUF
  0000003A            00948 PBUF_01         EQU     PORTC_BUF
  0000003A            00949 PBUF_03         EQU     PORTC_BUF
  0000003A            00950 PBUF_19         EQU     PORTC_BUF
  0000003A            00951 PBUF_04         EQU     PORTC_BUF
                      00952 
  00000005            00953 BIT_02          EQU     5
  00000004            00954 BIT_00          EQU     4
  00000003            00955 BIT_01          EQU     3
  00000002            00956 BIT_03          EQU     2
  00000001            00957 BIT_19          EQU     1
  00000000            00958 BIT_04          EQU     0
                      00959 ;
                      00960 ;                     ___7______6______5______4______3______2______1______0__
                      00961 ; $008 PORTD         | _____| _____| _____| _____| _____| _____| _____| _____|
                      00962 ; $03B PORTD_BUF     | SSR17| SSR06| SSR05| SSR18| SSR22| SSR20| SSR21| SSR23|
                      00963 ;                    |______|______|______|______|______|______|______|______|
                      00964 ;
  0000003B            00965 PORTD_BUF       EQU     0x03B
                      00966 
  00000008            00967 PORT_17         EQU     PORTD
  00000008            00968 PORT_06         EQU     PORTD
  00000008            00969 PORT_05         EQU     PORTD
  00000008            00970 PORT_18         EQU     PORTD
  00000008            00971 PORT_22         EQU     PORTD
  00000008            00972 PORT_20         EQU     PORTD
  00000008            00973 PORT_21         EQU     PORTD
  00000008            00974 PORT_23         EQU     PORTD
                      00975 
  0000003B            00976 PBUF_17         EQU     PORTD_BUF
  0000003B            00977 PBUF_06         EQU     PORTD_BUF
  0000003B            00978 PBUF_05         EQU     PORTD_BUF
  0000003B            00979 PBUF_18         EQU     PORTD_BUF
  0000003B            00980 PBUF_22         EQU     PORTD_BUF
  0000003B            00981 PBUF_20         EQU     PORTD_BUF
  0000003B            00982 PBUF_21         EQU     PORTD_BUF
  0000003B            00983 PBUF_23         EQU     PORTD_BUF
                      00984 
  00000007            00985 BIT_17          EQU     7
  00000006            00986 BIT_06          EQU     6
  00000005            00987 BIT_05          EQU     5
  00000004            00988 BIT_18          EQU     4
  00000003            00989 BIT_22          EQU     3
  00000002            00990 BIT_20          EQU     2
  00000001            00991 BIT_21          EQU     1
  00000000            00992 BIT_23          EQU     0
                      00993 ;
                      00994 ;                     ___7______6______5______4______3______2______1______0__
                      00995 ; $009 PORTE         |//////////////////////////////////|      |      |      |
                      00996 ; $03C PORTE_BUF     |//////////////////////////////////| RED  | YEL  | GRN  |
                      00997 ;                    |//////////////////////////////////|______|______|______|
                      00998 ;
  0000003C            00999 PORTE_BUF       EQU     0x03C
                      01000 
  00000009            01001 PORT_RED        EQU     PORTE
  00000009            01002 PORT_YEL        EQU     PORTE
  00000009            01003 PORT_GRN        EQU     PORTE
                      01004 
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003C            01005 PBUF_RED        EQU     PORTE_BUF
  0000003C            01006 PBUF_YEL        EQU     PORTE_BUF
  0000003C            01007 PBUF_GRN        EQU     PORTE_BUF
                      01008 
  00000002            01009 BIT_RED         EQU     2
  00000001            01010 BIT_YEL         EQU     1
  00000000            01011 BIT_GRN         EQU     0
                      01012 
  00000009            01013 PORT_LEDS       EQU     PORTE
  00000006            01014 MASK_RED_YEL    EQU     0x06    ; RED, YEL on; GRN off
  00000007            01015 MASK_ALL_LEDS   EQU     0x07    ; RED, YEL, GRN on
  00000000            01016 MASK_NO_LEDS    EQU     0x00    ; all off
                      01017 ;
                      01018 ; SSR Value buffers.
                      01019 ; These hold the current dimmer values for the SSR circuit outputs.
                      01020 ; The bits are interpreted as:
                      01021 ;
                      01022 ;  SSR_ON SSRDIM VALUE
                      01023 ;     0      0     x     Channel completely "off"
                      01024 ;     0      1     n     Channel dimmed to level n
                      01025 ;     1      x     x     Channel completely "on" (no dimmer control)
                      01026 ;
                      01027 ;
                      01028 ;                     ___7______6______5______4______3______2______1______0__
                      01029 ; $020 SSR00_VAL     |      |      |//////|                                  |
                      01030 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01031 ;                    |______|______|//////|______|______|______|______|______|
                      01032 ; $021 SSR01_VAL     |      |      |//////|                                  |
                      01033 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01034 ;                    |______|______|//////|______|______|______|______|______|
                      01035 ;
                      01036 ;       .                                        .
                      01037 ;       .                                        .
                      01038 ;       .                                        .
                      01039 ;
                      01040 ;                     _______________________________________________________
                      01041 ; $037 SSR23_VAL     |      |      |//////|                                  |
                      01042 ;                    |SSR_ON|SSRDIM|//////| Dim value (0=off .. 31=full on)  |
                      01043 ;                    |______|______|//////|______|______|______|______|______|
                      01044 ;
  00000007            01045 SSR_ON          EQU     7               ; X------- SSR ON (no dim)
  00000006            01046 SSRDIM          EQU     6               ; -X------ SSR dim
  00000005            01047 SSRVAL_RESV     EQU     5               ; --X----- Reserved bit
  0000001F            01048 SSRVAL_MASK     EQU     b'00011111'     ; ---XXXXX SSR dimmer value
                      01049 
  00000020            01050 SSR00_VAL       EQU     0x020
  00000021            01051 SSR01_VAL       EQU     0x021
  00000022            01052 SSR02_VAL       EQU     0x022
  00000023            01053 SSR03_VAL       EQU     0x023
  00000024            01054 SSR04_VAL       EQU     0x024
  00000025            01055 SSR05_VAL       EQU     0x025
  00000026            01056 SSR06_VAL       EQU     0x026
  00000027            01057 SSR07_VAL       EQU     0x027
  00000028            01058 SSR08_VAL       EQU     0x028
  00000029            01059 SSR09_VAL       EQU     0x029
  0000002A            01060 SSR10_VAL       EQU     0x02A
  0000002B            01061 SSR11_VAL       EQU     0x02B
  0000002C            01062 SSR12_VAL       EQU     0x02C
  0000002D            01063 SSR13_VAL       EQU     0x02D
  0000002E            01064 SSR14_VAL       EQU     0x02E
  0000002F            01065 SSR15_VAL       EQU     0x02F
  00000030            01066 SSR16_VAL       EQU     0x030
  00000031            01067 SSR17_VAL       EQU     0x031
  00000032            01068 SSR18_VAL       EQU     0x032
  00000033            01069 SSR19_VAL       EQU     0x033
  00000034            01070 SSR20_VAL       EQU     0x034
  00000035            01071 SSR21_VAL       EQU     0x035
  00000036            01072 SSR22_VAL       EQU     0x036
  00000037            01073 SSR23_VAL       EQU     0x037
                      01074 ;
                      01075 ; The master CPU reads this value from EEPROM when booting up, and sends
                      01076 ; it to the slave CPU.  From there, they both use this RAM location to
                      01077 ; hold the value during runtime.
                      01078 ;
                      01079 ;                     ___7______6______5______4______3______2______1______0__
                      01080 ; $03D PHASE_OFFSET  |                                                       |
                      01081 ;                    |  Number of slices to delay from ZC int to slice 0     |
                      01082 ;                    |______|______|______|______|______|______|______|______|
                      01083 ;
  0000003D            01084 PHASE_OFFSET    EQU     0x03D
                      01085 ;
                      01086 ; The SSR handling routines fill in this register when receiving a command
                      01087 ; targeted to a single channel.
                      01088 ;
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01089 ;                     ___7______6______5______4______3______2______1______0__
                      01090 ; $03E SSR_ID        |      |      |//////|                                  |
                      01091 ;                    |MY_SSR|ILLSSR|//////|  Local device offset from SSR00  |
                      01092 ;                    |______|______|//////|______|______|______|______|______|
                      01093 ;
  0000003E            01094 SSR_ID          EQU     0x03E
                      01095 
  00000007            01096 MY_SSR          EQU     7               ; X------- Is this SSR for this CPU?
  00000006            01097 ILLSSR          EQU     6               ; -X------ Channel ID is illegal
  00000005            01098 SSR_ID_RESV     EQU     5               ; --X----- Reserved bit
  0000001F            01099 SSR_DEV_MASK    EQU     b'00011111'     ; ---XXXXX Mask for local SSR ID
                      01100 ;
                      01101 ; This is used primarily for the POST LED effects which flash a value
                      01102 ; on the LEDs.  This is the parameter to the function which handles that.
                      01103 ;
                      01104 ;                     ___7______6______5______4______3______2______1______0__
                      01105 ; $03F FLASH_CT      |                                                       |
                      01106 ;                    |  Value to be flashed on an LED                        |
                      01107 ;                    |______|______|______|______|______|______|______|______|
                      01108 ;
  0000003F            01109 FLASH_CT        EQU     0x03F
                      01110 ;
                      01111 ;                     ___7______6______5______4______3______2______1______0__
                      01112 ; $040 DEVICE_ID     |///////////////////////////|                           |
                      01113 ;                    |///////////////////////////| This device's ID number   |
                      01114 ;                    |///////////////////////////|______|______|______|______|
                      01115 ;
                      01116 ; We copy the device ID from EEPROM to this location, where we can compare
                      01117 ; it more easily during runtime.  Note that it's also aligned with the device
                      01118 ; ID field in command bytes.
                      01119 ;
                      01120 ;
                      01121 ; LED Timers
                      01122 ;
                      01123 ; These hold the time remaining for a lit LED until it is scheduled to be
                      01124 ; turned off.  The units are 1/120 sec (i.e., number of ZC interrupts).
                      01125 ;
  00000041            01126 GRN_TMR         EQU     0x041           ; Green LED time until FLIPS STATE
  00000042            01127 YEL_TMR         EQU     0x042           ; Yellow LED time until turns off
  00000043            01128 RED_TMR         EQU     0x043           ; Red LED time until turns off
                      01129 ;
                      01130 ; State machine value and some misc. operating flags.
                      01131 ;
                      01132 ;                     ___7______6______5______4______3______2______1______0__
                      01133 ; $044 SSR_STATE     |      |      |      |      |      |                    |
                      01134 ;                    |INCYC |PRECYC|REDEN |YELEN |GRNEN |       STATE        |
                      01135 ;                    |______|______|______|______|______|______|______|______|
                      01136 ;
  00000044            01137 SSR_STATE       EQU     0x044
                      01138 
  00000007            01139 INCYC           EQU     7               ; X------- In an active ZC cycle?
  00000006            01140 PRECYC          EQU     6               ; -X------ Between int and start of cycle?
  00000005            01141 REDEN           EQU     5               ; --X----- Red LED off timer active
  00000004            01142 YELEN           EQU     4               ; ---X---- Yellow LED off timer active
  00000003            01143 GRNEN           EQU     3               ; ----X--- Green LED flip timer active
  00000002            01144 STATE2          EQU     2               ; -----X-- Bit 2 of state value
  00000001            01145 STATE1          EQU     1               ; ------X- Bit 1 of state value
  00000000            01146 STATE0          EQU     0               ; -------X Bit 0 of state value
  00000007            01147 SSR_STATE_MASK  EQU     b'00000111'     ; -----XXX Mask for state value
                      01148 ;
                      01149 ; Cycle/slice timers
                      01150 ;
  00000045            01151 CUR_SLICE       EQU     0x045           ; current slice number (counts down)
  00000046            01152 CUR_PRE         EQU     0x046           ; pre-slice number (counts down)
                      01153 ;
                      01154 ; Communications buffers
                      01155 ;
  00000047            01156 RX_BYTE         EQU     0x047           ; byte last received from serial port
  00000049            01157 DATA_BUF        EQU     0x049           ; holding area for command data
                      01158 ;
                      01159 ; More operating flags
                      01160 ;
                      01161 ;                     ___7______6______5______4______3______2______1______0__
                      01162 ; $048 SSR_STATE2    |SLICE |DIM_  |DIM_  |      |      |      |      |      |
                      01163 ;                    |_UPD  |START |END   |REDOFF|YELOFF|GRNBLK|SSRUPD| TXQUE|
                      01164 ;                    |______|______|______|______|______|______|______|______|
                      01165 ; $04B SSR_STATE3    |//////////////////////////////////|      |      |      |
                      01166 ;                    |//////////////////////////////////|ACTEN |ACTOFF|PRIVEN|
                      01167 ;                    |//////////////////////////////////|______|______|______|
                      01168 ;
  00000048            01169 SSR_STATE2      EQU     0x048
                      01170 
  00000007            01171 SLICE_UPD       EQU     7               ; X------- Ready to update current slice?
  00000006            01172 DIM_START       EQU     6               ; -X------ First dimmer cycle?
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000005            01173 DIM_END         EQU     5               ; --X----- Last dimmer cycle?
  00000004            01174 REDOFF          EQU     4               ; ---X---- Red LED timer expired, turn off
  00000003            01175 YELOFF          EQU     3               ; ----X--- Yellow LED timer expired, turn off
  00000002            01176 GRNBLK          EQU     2               ; -----X-- Green LED timer expired, blink it
  00000001            01177 SSRUPD          EQU     1               ; ------X- Queued SSR update operation
  00000000            01178 TXQUE           EQU     0               ; -------X Something in transmit queue
                      01179 
  0000004B            01180 SSR_STATE3      EQU     0x04B
                      01181 
  00000007            01182 SSR_STATE3_RES7 EQU     7               ; X------- Reserved bit
  00000006            01183 SSR_STATE3_RES6 EQU     6               ; -X------ Reserved bit
  00000005            01184 SSR_STATE3_RES5 EQU     5               ; --X----- Reserved bit
  00000004            01185 SSR_STATE3_RES4 EQU     4               ; ---X---- Reserved bit
  00000003            01186 SSR_STATE3_RES3 EQU     3               ; ----X--- Reserved bit
  00000002            01187 ACTEN           EQU     2               ; -----X-- Active LED timer active
  00000001            01188 ACTOFF          EQU     1               ; ------X- Active LED timer expired, turn off
  00000000            01189 PRIVEN          EQU     0               ; -------X Privileged commands enabled
                      01190 ;
                      01191 ; Serial Transmitter Ring Buffer
                      01192 ;
                      01193 ; We maintain a buffer of 16 output bytes waiting to be sent out of the
                      01194 ; serial port.  We empty this buffer in an interrupt-driven routine so
                      01195 ; the processing of incoming data isn't stalled while waiting for the
                      01196 ; UART to be idle.  XXX interrupt-driven??? not directly. XXX
                      01197 ;
                      01198 ; This needs to be arranged so that the table is a power of two in length
                      01199 ; and aligned in memory so that it starts on an even boundary of its
                      01200 ; length.  In other words, we can take a pointer P into the table,
                      01201 ; and ((P & TXBUF_MASK) | TXBUF) will yield a valid pointer within
                      01202 ; that space, with proper wraparound in either direction.
                      01203 ;
                      01204 ;                     ___7______6______5______4______3______2______1______0__
                      01205 ; $04E TXBUF_QUEUE   |                           |                           |
                      01206 ;                    |             5             | Addr of next byte to queue|
                      01207 ;                    |______|______|______|______|______|______|______|______|
                      01208 ; $04F TXBUF_SEND    |                           |                           |
                      01209 ;                    |             5             | Addr of next byte to send |
                      01210 ;                    |______|______|______|______|______|______|______|______|
                      01211 ; $050 TXBUF         |                                                       |
                      01212 ;                    |  Transmitter output buffer (byte 1 of 16)             |
                      01213 ;                    |______|______|______|______|______|______|______|______|
                      01214 ;
                      01215 ;       .                                        .
                      01216 ;       .                                        .
                      01217 ;       .                                        .
                      01218 ;
                      01219 ;                     _______________________________________________________
                      01220 ; $05F               |                                                       |
                      01221 ;                    |  Transmitter output buffer (byte 16 of 16)            |
                      01222 ;                    |______|______|______|______|______|______|______|______|
                      01223 ;
  0000004E            01224 TXBUF_QUEUE     EQU     0x04E
  0000004F            01225 TXBUF_SEND      EQU     0x04F
  00000050            01226 TXBUF           EQU     0x050
  0000000F            01227 TXBUF_MASK      EQU     b'00001111'     ; mask off table index
                      01228 ;
                      01229 ;-----------------------------------------------------------------------------
                      01230 ; Banks 1-3
                      01231 ;-----------------------------------------------------------------------------
                      01232 ;
                      01233 ; Nothing defined in these banks.
                      01234 ;
                      01235 
                      01236 ;=============================================================================
                      01237 ; VECTORED ENTRY POINTS
                      01238 ;=============================================================================
0000                  01239 RESTART_VECTOR  ORG     0x0000
0000   28BD           01240                 GOTO    INIT
                      01241 
0004                  01242 INT_VECTOR      ORG     0x0004
0004   2883           01243                 GOTO    ISR
                      01244 
                      01245 ;==============================================================================
                      01246 ; JUMP TABLES
                      01247 ;
                      01248 ; We collect these here so they are all within the $00xx range.  Otherwise
                      01249 ; it's a constant battle to keep the PCLATH register right as the code changes
                      01250 ; and moves these tables around across page boundaries.
                      01251 ;==============================================================================
                      01252 ;
                      01253 ; State 0 Command Dispatch Table
                      01254 ;  Given command in RX_BYTE<6:4>, branch to command #0-#7.
                      01255 ;  Errors (undefined commands) branch to CMD_ERROR.
                      01256 ;
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005   0064           01257 STATE_0_CMD_TBL CLRWDT
0006   018A           01258                 CLRF    PCLATH
0007   0E47           01259                 SWAPF   RX_BYTE, W
0008   3907           01260                 ANDLW   CMD_SW_MASK
0009   0782           01261                 ADDWF   PCL, F
000A   29D6           01262                 GOTO    CMD_0
000B   29D8           01263                 GOTO    CMD_1
000C   29DA           01264                 GOTO    CMD_2
000D   2A61           01265                 GOTO    CMD_ERROR
000E   2A61           01266                 GOTO    CMD_ERROR
000F   2A61           01267                 GOTO    CMD_ERROR
0010   2A61           01268                 GOTO    CMD_ERROR
0011   29DC           01269                 GOTO    CMD_7
0012   2AAC           01270                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01271 ;
                      01272 ; Received data byte dispatch function.
                      01273 ; When receiving a data byte, what happens next
                      01274 ; depends on the state of the parser's state machine.
                      01275 ; This jump table branches to the appropriate handler
                      01276 ; for each state.
                      01277 ;
                      01278 ; In the case of state 0, we just return to the
                      01279 ; original caller, ignoring the byte.
                      01280 ;
0013   0064           01281 DATA_BYTE_TBL   CLRWDT                          ; We received a data byte
0014   018A           01282                 CLRF    PCLATH                  ; We're in $00xx address range
0015   0844           01283                 MOVF    SSR_STATE, W            ; decode state bits
0016   3907           01284                 ANDLW   SSR_STATE_MASK
0017   0782           01285                 ADDWF   PCL, F
0018   0008           01286                 RETURN                          ; [0] ignore data
0019   29E1           01287                 GOTO    DATA_STATE_1            ; [1] handler
001A   29F6           01288                 GOTO    DATA_STATE_2            ; [2] handler
001B   29FB           01289                 GOTO    DATA_STATE_3            ; [3] handler
001C   2A0C           01290                 GOTO    DATA_STATE_4            ; [4] handler
001D   29DF           01291                 GOTO    FAULT_1                 ; [5] illegal state
001E   29DF           01292                 GOTO    FAULT_1                 ; [6] illegal state
001F   29DF           01293                 GOTO    FAULT_1                 ; [7] illegal state
0020   2AAC           01294                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01295 ;
                      01296 ; Administrative Command Dispatch Table
                      01297 ; Dispatch the processing of admin commands, based on value
                      01298 ; of RX_BYTE.
                      01299 ;
0021   0064           01300 CMD_ADMIN_TABLE CLRWDT
0022   018A           01301                 CLRF    PCLATH                  ;
0023   0847           01302                 MOVF    RX_BYTE, W              ; Get and store command
0024   390F           01303                 ANDLW   b'00001111'             ; sub-command mask
0025   0782           01304                 ADDWF   PCL, F
0026   2A40           01305                 GOTO    CMD_AD_SHUTDOWN         ; 0=shutdown cpu
0027   2A51           01306                 GOTO    CMD_AD_DIS_PRIV         ; 1=disable privs
0028   2A61           01307                 GOTO    CMD_ERROR               ; 2=reserved
0029   2A61           01308                 GOTO    CMD_ERROR               ; 3=reserved
002A   2A61           01309                 GOTO    CMD_ERROR               ; 4=reserved
002B   2A61           01310                 GOTO    CMD_ERROR               ; 5=reserved
002C   2A61           01311                 GOTO    CMD_ERROR               ; 6=reserved
002D   2A61           01312                 GOTO    CMD_ERROR               ; 7=reserved
002E   2A61           01313                 GOTO    CMD_ERROR               ; 8=reserved
002F   2A61           01314                 GOTO    CMD_ERROR               ; 9=reserved
0030   2A61           01315                 GOTO    CMD_ERROR               ; A=reserved
0031   2A61           01316                 GOTO    CMD_ERROR               ; B=reserved
0032   2A61           01317                 GOTO    CMD_ERROR               ; C=reserved
0033   2A61           01318                 GOTO    CMD_ERROR               ; D=reserved
0034   2A61           01319                 GOTO    CMD_ERROR               ; E=reserved
0035   2A61           01320                 GOTO    CMD_ERROR               ; F=reserved
0036   2AAC           01321                 GOTO    FAULT                   ; shouldn't happen, but still.
                      01322 ;
                      01323 ;------------------------------------------------------------------------------
                      01324 ; SSR_Y_TO_PBUF
                      01325 ;   return specified SSR's port buffer's address
                      01326 ;
                      01327 ; Input:    Y=SSR channel (0-23)
                      01328 ; Output:   W=address of SSR's port buffer
                      01329 ; Context:  Any Bank
                      01330 ;------------------------------------------------------------------------------
                      01331 ;
                      01332 ; *** THIS CODE MUST BE ON ONE 256-BYTE PAGE ***
0037   0064           01333 SSR_Y_TO_PBUF   CLRWDT
0038   018A           01334                 CLRF    PCLATH          ; Our jump table's code page
0039   0876           01335                 MOVF    Y, W
003A   391F           01336                 ANDLW   b'00011111'     ; limit to 32
003B   0782           01337                 ADDWF   PCL, F          ; jump to SSR # in table
003C   343A           01338                 RETLW   PBUF_00
003D   343A           01339                 RETLW   PBUF_01
003E   343A           01340                 RETLW   PBUF_02
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003F   343A           01341                 RETLW   PBUF_03
0040   343A           01342                 RETLW   PBUF_04
0041   343B           01343                 RETLW   PBUF_05
0042   343B           01344                 RETLW   PBUF_06
0043   3439           01345                 RETLW   PBUF_07
0044   3438           01346                 RETLW   PBUF_08
0045   3439           01347                 RETLW   PBUF_09
0046   3438           01348                 RETLW   PBUF_10
0047   3439           01349                 RETLW   PBUF_11
0048   3438           01350                 RETLW   PBUF_12
0049   3439           01351                 RETLW   PBUF_13
004A   3438           01352                 RETLW   PBUF_14
004B   3439           01353                 RETLW   PBUF_15
004C   3438           01354                 RETLW   PBUF_16
004D   343B           01355                 RETLW   PBUF_17
004E   343B           01356                 RETLW   PBUF_18
004F   343A           01357                 RETLW   PBUF_19
0050   343B           01358                 RETLW   PBUF_20
0051   343B           01359                 RETLW   PBUF_21
0052   343B           01360                 RETLW   PBUF_22
0053   343B           01361                 RETLW   PBUF_23
0054   2AAC           01362                 GOTO    FAULT           ; FAULT 24
0055   2AAC           01363                 GOTO    FAULT           ; FAULT 25
0056   2AAC           01364                 GOTO    FAULT           ; FAULT 26
0057   2AAC           01365                 GOTO    FAULT           ; FAULT 27
0058   2AAC           01366                 GOTO    FAULT           ; FAULT 28
0059   2AAC           01367                 GOTO    FAULT           ; FAULT 29
005A   2AAC           01368                 GOTO    FAULT           ; FAULT 30
005B   2AAC           01369                 GOTO    FAULT           ; FAULT 31
005C   2AAC           01370                 GOTO    FAULT           ; FAULT 32 just to be paranoid
                      01371 ;
                      01372 ;------------------------------------------------------------------------------
                      01373 ; SSR_Y_SET_MASK
                      01374 ;   return bitmask for SSR output in its I/O port
                      01375 ;   If you OR the bit with the port's value the channel is turned on.
                      01376 ;   If you want to get the bitmask for turning it off, see SSR_Y_CLR_MASK.
                      01377 ;
                      01378 ; Input:    Y=SSR channel (0-23)
                      01379 ; Output:   W=bitmask for SETTING the bit (IOR with current value)
                      01380 ; Context:  Any Bank
                      01381 ;------------------------------------------------------------------------------
                      01382 ;
                      01383 ; *** THIS CODE MUST BE ON ONE 256-BYTE PAGE ***
                      01384 ;
005D   0064           01385 SSR_Y_SET_MASK  CLRWDT
005E   018A           01386                 CLRF    PCLATH
005F   0876           01387                 MOVF    Y, W
0060   391F           01388                 ANDLW   b'00011111'     ; limit to 32
0061   0782           01389                 ADDWF   PCL, F          ; jump to SSR # in table
0062   3410           01390                 RETLW   1 << BIT_00
0063   3408           01391                 RETLW   1 << BIT_01
0064   3420           01392                 RETLW   1 << BIT_02
0065   3404           01393                 RETLW   1 << BIT_03
0066   3401           01394                 RETLW   1 << BIT_04
0067   3420           01395                 RETLW   1 << BIT_05
0068   3440           01396                 RETLW   1 << BIT_06
0069   3402           01397                 RETLW   1 << BIT_07
006A   3410           01398                 RETLW   1 << BIT_08
006B   3404           01399                 RETLW   1 << BIT_09
006C   3408           01400                 RETLW   1 << BIT_10
006D   3408           01401                 RETLW   1 << BIT_11
006E   3404           01402                 RETLW   1 << BIT_12
006F   3410           01403                 RETLW   1 << BIT_13
0070   3402           01404                 RETLW   1 << BIT_14
0071   3420           01405                 RETLW   1 << BIT_15
0072   3401           01406                 RETLW   1 << BIT_16
0073   3480           01407                 RETLW   1 << BIT_17
0074   3410           01408                 RETLW   1 << BIT_18
0075   3402           01409                 RETLW   1 << BIT_19
0076   3404           01410                 RETLW   1 << BIT_20
0077   3402           01411                 RETLW   1 << BIT_21
0078   3408           01412                 RETLW   1 << BIT_22
0079   3401           01413                 RETLW   1 << BIT_23
007A   2AAC           01414                 GOTO    FAULT           ; fault 24
007B   2AAC           01415                 GOTO    FAULT           ; fault 25
007C   2AAC           01416                 GOTO    FAULT           ; fault 26
007D   2AAC           01417                 GOTO    FAULT           ; fault 27
007E   2AAC           01418                 GOTO    FAULT           ; fault 28
007F   2AAC           01419                 GOTO    FAULT           ; fault 29
0080   2AAC           01420                 GOTO    FAULT           ; fault 30
0081   2AAC           01421                 GOTO    FAULT           ; fault 31
0082   2AAC           01422                 GOTO    FAULT           ; fault 32 just to be paranoid
                      01423 ;
                      01424 ;==============================================================================
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01425 ; INTERRUPT SERVICE ROUTINE (ISR)
                      01426 ;
                      01427 ; Responsible for handling the timing and synchronization for the unit.
                      01428 ;
                      01429 ; Context: Any Bank (restores original bank when finished)
                      01430 ; Affects: Various flag bits
                      01431 ; Also:    Restores status flags, PC and W when done
                      01432 ;
                      01433 ;==============================================================================
                      01434 ;
0083   00F0           01435 ISR             MOVWF   W_TEMP          ; Save registers during interrupt
0084   0E03           01436                 SWAPF   STATUS, W       ; This moves status w/o disturbing it
0085   00F1           01437                 MOVWF   STATUS_TEMP
0086   080A           01438                 MOVF    PCLATH, W
0087   00F7           01439                 MOVWF   PCLATH_TEMP
0088   018A           01440                 CLRF    PCLATH          ; Force code page 0
0089   1283 1303      01441                 BANKSEL INTCON          ; (Bank 0)
008B   0064           01442                 CLRWDT
                      01443 ;
                      01444 ; Poll interrupts to see who's asking for attention.
                      01445 ;
                      01446 ;------------------------------------------------------------------------------
                      01447 ; INT0 -- 1/120sec timer synchronized with AC half-wave zero-crossing point.
                      01448 ;
008C   1C8B           01449 INT_INT0        BTFSS   INTCON, INTF            ; INT0 line interrupt pending?
008D   28A3           01450                 GOTO    INT_TMR2                ; no: try next vector
008E   108B           01451                 BCF     INTCON, INTF            ; yes: acknowledge interrupt
                      01452 
008F   1A44           01453 INT_YEL         BTFSC   SSR_STATE, YELEN        ; Yellow timer on?
0090   0BC2           01454                 DECFSZ  YEL_TMR, F              ; yes: count it down one step
0091   2894           01455                 GOTO    INT_RED
0092   15C8           01456                 BSF     SSR_STATE2, YELOFF      ; done? queue LED turn off event
0093   1244           01457                 BCF     SSR_STATE, YELEN        ; ...and stop the timer
                      01458 
0094   1AC4           01459 INT_RED         BTFSC   SSR_STATE, REDEN        ; Red timer on?
0095   0BC3           01460                 DECFSZ  RED_TMR, F              ; yes: count it down one step
0096   2899           01461                 GOTO    INT_GRN
0097   1648           01462                 BSF     SSR_STATE2, REDOFF      ; done? queue LED turn off event
0098   12C4           01463                 BCF     SSR_STATE, REDEN        ; ...and stop the timer
                      01464 
0099   19C4           01465 INT_GRN         BTFSC   SSR_STATE, GRNEN        ; Green timer on?
009A   0BC1           01466                 DECFSZ  GRN_TMR, F              ; yes: count it down one step
009B   289F           01467                 GOTO    INT_ACT
009C   1548           01468                 BSF     SSR_STATE2, GRNBLK      ; done? queue LED flip event
009D   30FF           01469                 MOVLW   GRN_BLINK_RATE          ; ...and reset timer for next blink
009E   00C1           01470                 MOVWF   GRN_TMR
                      01471 
009F   0064           01472 INT_ACT         CLRWDT
                      01473 ;
                      01474 ; Handle the cycle timers.
                      01475 ; We just hit a ZC interrupt, so let's start the pre-cycle now.
                      01476 ;
00A0   1744           01477 INT_ZC          BSF     SSR_STATE, PRECYC
00A1   083D           01478                 MOVF    PHASE_OFFSET, W
00A2   00C6           01479                 MOVWF   CUR_PRE
                      01480 ;
                      01481 ;------------------------------------------------------------------------------
                      01482 ; TMR2 -- Timer #2 interrupt
                      01483 ; This is a free-running slice timer (about 38 per INT0)
                      01484 ;
00A3   0064           01485 INT_TMR2        CLRWDT
00A4   1C8C           01486                 BTFSS   PIR1, TMR2IF    ; Timer 2 interrupt pending?
00A5   28B5           01487                 GOTO    INT_END         ; no: try next vector
00A6   108C           01488                 BCF     PIR1, TMR2IF    ; yes: acknowledge interrupt
                      01489 ;
                      01490 ; If in pre-cycle, count down to next real zero crossing event point
                      01491 ;
00A7   1B44           01492 INT_PRECYC      BTFSC   SSR_STATE, PRECYC
00A8   0BC6           01493                 DECFSZ  CUR_PRE, F
00A9   28AF           01494                 GOTO    INT_NEXTSLICE
                      01495 ;
                      01496 ; end of pre-cycle, start first real one
                      01497 ;
00AA   1344           01498                 BCF     SSR_STATE, PRECYC
00AB   17C4           01499                 BSF     SSR_STATE, INCYC
00AC   1748           01500                 BSF     SSR_STATE2, DIM_START
00AD   3020           01501                 MOVLW   .32
00AE   00C5           01502                 MOVWF   CUR_SLICE
                      01503 ;
                      01504 ; start of any active slice
                      01505 ;
00AF   1BC4           01506 INT_NEXTSLICE   BTFSC   SSR_STATE, INCYC
00B0   0BC5           01507                 DECFSZ  CUR_SLICE, F
00B1   28B4           01508                 GOTO    INT_ENDSLICE
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01509 ;
                      01510 ; last slice (#0)
                      01511 ;
00B2   16C8           01512                 BSF     SSR_STATE2, DIM_END
00B3   13C4           01513                 BCF     SSR_STATE, INCYC
                      01514 ;
                      01515 ; slice timing ends
                      01516 ;
00B4   17C8           01517 INT_ENDSLICE    BSF     SSR_STATE2, SLICE_UPD
                      01518 ;
                      01519 ; end of ISR
                      01520 ;
00B5   0064           01521 INT_END         CLRWDT                  ; (Any Bank)
00B6   0877           01522                 MOVF    PCLATH_TEMP, W
00B7   008A           01523                 MOVWF   PCLATH
00B8   0E71           01524                 SWAPF   STATUS_TEMP, W
00B9   0083           01525                 MOVWF   STATUS          ; (Previous Bank Restored)
00BA   0EF0           01526                 SWAPF   W_TEMP, F
00BB   0E70           01527                 SWAPF   W_TEMP, W
                      01528 
00BC   0009           01529                 RETFIE
                      01530 
                      01531 ;=============================================================================
                      01532 ; INIT: device initialization routines
                      01533 ;=============================================================================
00BD   0064           01534 INIT            CLRWDT
00BE   138B           01535                 BCF     INTCON, GIE     ; disable all interrupts
00BF   018A           01536                 CLRF    PCLATH          ; Program page 0
00C0   1683 1703      01537                 BANKSEL EECON1          ; (Bank 3)               @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00C2   110C           01538                 BCF     EECON1, WREN    ; disable EEPROM writes  @@P=877@@
                      01539 ;
                      01540 ; Initialize I/O ports by pre-filling with initial bits, then enabling
                      01541 ; outputs on pins which are supposed to be outputs
                      01542 ;
00C3   0064           01543 SETUP_PORTS     CLRWDT
00C4   1283 1303      01544                 BANKSEL PORTA           ; (Bank 0)
00C6   0185           01545                 CLRF    PORTA           ; ACT off, RCV mode, pins off
00C7   0186           01546                 CLRF    PORTB           ; (Note that this would turn on
00C8   0187           01547                 CLRF    PORTC           ; the SSRs if the ports were
00C9   0188           01548                 CLRF    PORTD           ; enabled yet).
00CA   0189           01549                 CLRF    PORTE           ; LEDs off
00CB   22F4           01550                 CALL    ALL_SSRS_OFF    ; turn OFF SSR ports.
00CC   2318           01551                 CALL    UPDATE_PORTS    ; push out bits to I/O ports.
                      01552 
00CD   1683 1303      01553                 BANKSEL TRISA                   ; (Bank 1)
00CF   30C0           01554                 MOVLW   b'11000000'             ; XXOOOOOO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D0   0085           01555                 MOVWF   TRISA
                      01556 ;               MOVLW   b'10000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D1   0087           01557                 MOVWF   TRISC                   ; Rx/Tx tri-stated here
00D2   30C1           01558                 MOVLW   b'11000001'             ; XXOOOOOI
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D3   0086           01559                 MOVWF   TRISB
00D4   3000           01560                 MOVLW   b'00000000'             ; OOOOOOOO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D5   0088           01561                 MOVWF   TRISD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D6   0089           01562                 MOVWF   TRISE                   ; (also sets PORTD mode)
00D7   3006           01563                 MOVLW   b'00000110'             ; All I/O pins DIGITAL  @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00D8   009F           01564                 MOVWF   ADCON1
                      01565 ;
                      01566 ; Flash LEDs for reset
                      01567 ;
00D9   0064           01568                 CLRWDT
00DA   1283 1303      01569                 BANKSEL PORT_LEDS               ; (Bank 0)
00DC   3005           01570                 MOVLW   .5                      ; flash 5 times
00DD   00F5           01571                 MOVWF   X
00DE   3007           01572 RESET_LEDS_NEXT MOVLW   MASK_ALL_LEDS
00DF   0089           01573                 MOVWF   PORT_LEDS
00E0   22E5           01574                 CALL    DELAY_FFLASH
00E1   3000           01575                 MOVLW   MASK_NO_LEDS
00E2   0089           01576                 MOVWF   PORT_LEDS
00E3   22E5           01577                 CALL    DELAY_FFLASH
00E4   0BF5           01578                 DECFSZ  X, F
00E5   28DE           01579                 GOTO    RESET_LEDS_NEXT
                      01580 ;
                      01581 ; Light green LED on the master and red LED on the slave
                      01582 ;
00E6   1509           01583                 BSF     PORT_RED, BIT_RED       ; @@P=877@@
00E7   0000           01584                 NOP                             ; @@P=877@@
00E8   019F           01585                 CLRF    ADCON0                  ; A/D Converter off
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01586 
                      01587 
                      01588 ; INIT: set up EEPROM idle value
                      01589 ; The 16F877A Rev. B2 has a defect where the power-down current exceeds the
                      01590 ; published tolerances in some (unlikely) circumstances if the CPU enters sleep
                      01591 ; mode while the EEADR register points to an EEPROM location holding a value
                      01592 ; other than 0xFF.
                      01593 ;
                      01594 ; So we make sure that the EEPROM address register is always pointing to a 0xFF value
                      01595 ; when it's not busy doing anything else.
                      01596 ;
                      01597 ; But first, we'll make sure that a reserved EEPROM location holds a 0xFF value
                      01598 ; to start with. We do this every time since we don't /know/ the device was ever
                      01599 ; initialized before, although most likely this value will already be right
                      01600 ; (It /is/ EEPROM, after all!)
                      01601 ;
                      01602 ;
00E9   0064           01603 SETUP_EEPROM    CLRWDT
00EA   1283 1703      01604                 BANKSEL EEADR           ; @@P=877@@ (Bank 2)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EC   018E           01605                 CLRF    EEDATH          ; @@P=877@@ Clear high bits of data...
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00ED   018F           01606                 CLRF    EEADRH          ; @@P=877@@ ...and address
00EE   3000           01607                 MOVLW   EE_IDLE         ; @@P=877@@ Set target EEPROM location
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EF   008D           01608                 MOVWF   EEADR           ; @@P=877@@
00F0   30FF           01609                 MOVLW   0xFF            ; @@P=877@@ Set value to be written
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F1   008C           01610                 MOVWF   EEDATA          ; @@P=877@@
00F2   1683 1703      01611                 BANKSEL EECON1          ; @@P=877@@ (Bank 3)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F4   138C           01612                 BCF     EECON1, EEPGD   ; @@P=877@@ Write to data memory, not flash RAM
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F5   150C           01613                 BSF     EECON1, WREN    ; @@P=877@@ Enable EEPROM writing
00F6   138B           01614                 BCF     INTCON, GIE     ; @@P=877@@ Disable interrupts
00F7   3055           01615                 MOVLW   0x55            ; @@P=877@@ --Begin magic EEPROM write sequence--
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F8   008D           01616                 MOVWF   EECON2          ; @@P=877@@
00F9   30AA           01617                 MOVLW   0xAA            ; @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FA   008D           01618                 MOVWF   EECON2          ; @@P=877@@ --End magic EEPROM write sequence--
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FB   148C           01619                 BSF     EECON1, WR      ; @@P=877@@ Initiate write operation
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FC   110C           01620                 BCF     EECON1, WREN    ; @@P=877@@ Disable EEPROM writing
00FD   0064           01621                 CLRWDT                  ; @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FE   188C           01622                 BTFSC   EECON1, WR      ; @@P=877@@ Wait for write to complete
00FF   28FE           01623                 GOTO    $-1             ; @@P=877@@
0100   1283 1303      01624                 BANKSEL PIR2            ; @@P=877@@ (Bank 0)
0102   120D           01625                 BCF     PIR2, EEIF      ; @@P=877@@ Clear "EEPROM written" interrupt flag
                      01626 ;
                      01627 ; INIT: read our device ID from EEPROM
                      01628 ;
                      01629 ;
                      01630 ; INIT: move EEPROM address to idle block
                      01631 ;
0103   0064           01632 SETUP_EE_FF     CLRWDT                  ; @@P=877@@
0104   1283 1703      01633                 BANKSEL EEADR           ; @@P=877@@ (Bank 2)
0106   3000           01634                 MOVLW   EE_IDLE         ; @@P=877@@
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0107   008D           01635                 MOVWF   EEADR           ; @@P=877@@
                      01636 
                      01637 ;----------------------------------------------------------------
                      01638 ; POST Light Displays
                      01639 ;
                      01640 ; Wait to allow master/slave light to be noticed,
                      01641 ; extinguish all lights, then flash ROM ID (yel),
                      01642 ; GRN+devID (red), then all off.
                      01643 ;----------------------------------------------------------------
0108   22DC           01644 POST_START      CALL    DELAY_2S
0109   1283 1303      01645                 BANKSEL PORT_LEDS       ; (Bank 0)               _
010B   0189           01646                 CLRF    PORT_LEDS       ; XXX also clears ACT, T/R
                      01647                 ;
                      01648                 ; Set baud-rate generator
                      01649                 ;
010C   1683 1303      01650                 BANKSEL SPBRG           ; (Bank 1)
010E   3040           01651                 MOVLW   .64
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
010F   0099           01652                 MOVWF   SPBRG           ; 19,236 baud
                      01653                 ;
                      01654                 ; Enable serial transmitter
                      01655                 ;
0110   1683 1303      01656                 BANKSEL TXSTA           ; (Bank 1)
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0112   0198           01657                 CLRF    TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0113   1518           01658                 BSF     TXSTA, BRGH     ; High Baud Rate
0114   1283 1303      01659                 BANKSEL RCSTA           ; (Bank 0)
0116   0198           01660                 CLRF    RCSTA
0117   1798           01661                 BSF     RCSTA, SPEN     ; Turn on USART
0118   1683 1303      01662                 BANKSEL TXSTA           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
011A   1698           01663                 BSF     TXSTA, TXEN     ; Turn on serial transmitter
011B   1283 1303      01664                 BANKSEL PORT_LEDS       ; (Bank 0)
011D   22DC           01665                 CALL    DELAY_2S
                      01666 
011E   3001           01667 POST_ROM_ID     MOVLW   .1              ; 1=ROM 2.0
011F   228E           01668                 CALL    FLASH_YEL       ; Flash ROM ID
0120   22DC           01669                 CALL    DELAY_2S
                      01670 
0121   1509           01671 POST_STAGE_1    BSF     PORT_RED, BIT_RED
0122   22D4           01672                 CALL    DELAY_1S
                      01673                 ;
                      01674                 ; Set up USART & misc. options
                      01675                 ;
0123   1683 1303      01676                 BANKSEL OPTION_REG           ; (Bank 1)
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0125   1781           01677                 BSF     OPTION_REG, NOT_RBPU ; No pull-up on PORTB
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0126   1301           01678                 BCF     OPTION_REG, INTEDG   ; Int on falling edge
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0127   1281           01679                 BCF     OPTION_REG, T0CS     ; TMR0 internal clock
                      01680                                              ; Prescaler on WDT, 1:128
                      01681                 ;
                      01682                 ; Initialiaze timer2 interrupt
                      01683                 ;
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0128   018C           01684                 CLRF    PIE1            ; Also disables TXIE, RXIE
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0129   148C           01685                 BSF     PIE1, TMR2IE    ; Timer 2 match Interrupt enabled
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
012A   018D           01686                 CLRF    PIE2
                      01687 ;
                      01688 ; set slice timer (TMR2) to period of 137 at 1:8 scale, or 0.0002192 sec,
                      01689 ; which is just less than 1/38 half-cycle (i.e. 38x ZC interrupt rate
                      01690 ; at 60Hz)
                      01691 ;
012B   3089           01692                 MOVLW   .137
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
012C   0092           01693                 MOVWF   PR2
                      01694 
                      01695                 ;
                      01696                 ; Initialize serial port receiver
                      01697                 ;
012D   22DC           01698                 CALL    DELAY_2S        ; Wait to be sure Tx going
012E   1283 1303      01699                 BANKSEL RCSTA           ; (Bank 0)
0130   1618           01700                 BSF     RCSTA, CREN     ; Enable receiver
                      01701                 ;
                      01702                 ; Enable INT0 interrupt
                      01703                 ;
0131   018B           01704                 CLRF    INTCON
0132   170B           01705                 BSF     INTCON, PEIE    ; Peripheral Interrupts enabled
0133   160B           01706                 BSF     INTCON, INTE    ; INT0 enabled
                      01707 
0134   0190           01708                 CLRF    T1CON           ; Timer 1 OFF
0135   3009           01709                 MOVLW   b'00001001'     ; Timer 2 OFF, prescale 1:4 postscale 1:2
0136   0092           01710                 MOVWF   T2CON
0137   0191           01711                 CLRF    TMR2            ; Reset Timer 2 value
                      01712 
0138   1109           01713 POST_STAGE_2    BCF     PORT_RED, BIT_RED
0139   22DF           01714                 CALL    DELAY_250MS
013A   1489           01715                 BSF     PORT_YEL, BIT_YEL
                      01716 
013B   0064           01717 POST_PHASE_SYNC CLRWDT
                      01718 ;
                      01719 ; Meanwhile, in the slave, we hold until we receive the phase offset
                      01720 ; value, then store it and flash it on the display.
                      01721 ;
013C   1283 1303      01722                 BANKSEL PHASE_OFFSET    ; (Bank 0)
013E   0064           01723                 CLRWDT
013F   1E8C           01724                 BTFSS   PIR1, RCIF      ; Wait for Rx byte
0140   293E           01725                 GOTO    $-2
0141   081A           01726                 MOVF    RCREG, W        ; Get byte and store it
0142   00BD           01727                 MOVWF   PHASE_OFFSET
0143   22BF           01728                 CALL    FLASH_PHASE
                      01729 ;
                      01730 ;
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01731 ; Finally, start up the timer and enable interrupts, and enter
                      01732 ; the main program loop.
                      01733 ;
0144   0064           01734 POST_FINAL      CLRWDT
0145   1283 1303      01735                 BANKSEL TMR2            ; (Bank 0)
0147   018C           01736                 CLRF    PIR1            ; Clear interrupt flags
0148   018D           01737                 CLRF    PIR2            ; Clear interrupt flags
0149   018B           01738                 CLRF    INTCON          ; Clear interrupt flags
014A   170B           01739                 BSF     INTCON, PEIE    ; Enable peripheral interrupts
014B   160B           01740                 BSF     INTCON, INTE    ; Enable INT0 interrupt
014C   0191           01741                 CLRF    TMR2            ; Clear timer value
014D   1512           01742                 BSF     T2CON, TMR2ON   ; Start timer running
014E   14BC           01743                 BSF     PBUF_YEL, BIT_YEL
                      01744 
014F   01C2           01745                 CLRF    YEL_TMR         ; Reset LED timer values
0150   01C3           01746                 CLRF    RED_TMR
0151   30FF           01747                 MOVLW   GRN_BLINK_RATE
0152   00C1           01748                 MOVWF   GRN_TMR
                      01749 
0153   01C4           01750                 CLRF    SSR_STATE
0154   01C8           01751                 CLRF    SSR_STATE2
0155   01CB           01752                 CLRF    SSR_STATE3
0156   01C9           01753                 CLRF    DATA_BUF
0157   01C5           01754                 CLRF    CUR_SLICE
0158   01C6           01755                 CLRF    CUR_PRE
0159   01C7           01756                 CLRF    RX_BYTE
                      01757 
015A   15C4           01758                 BSF     SSR_STATE, GRNEN
015B   14C8           01759                 BSF     SSR_STATE2, SSRUPD      ; to make lights appear
015C   144B           01760                 BSF     SSR_STATE3, PRIVEN
                      01761 
015D   3050           01762                 MOVLW   TXBUF
015E   00CE           01763                 MOVWF   TXBUF_QUEUE
015F   00CF           01764                 MOVWF   TXBUF_SEND
                      01765 
0160   22F4           01766                 CALL    ALL_SSRS_OFF
0161   2318           01767                 CALL    UPDATE_PORTS
                      01768 ;
                      01769 ; Assert that some important constants have the values they
                      01770 ; are assumed to have.  This is for critical things where
                      01771 ; the stability of the whole system is at stake.  For example,
                      01772 ; a bitmask which limits how far a jump table can go.
                      01773 ;
0162   0064           01774 POST_ASSERTIONS CLRWDT
0163   3007           01775                 MOVLW   CMD_SW_MASK
0164   3C07           01776                 SUBLW   .7
0165   1D03           01777                 BTFSS   STATUS, Z
0166   2973           01778                 GOTO    ASSERT_FAIL
0167   3007           01779                 MOVLW   SSR_STATE_MASK
0168   3C07           01780                 SUBLW   .7
0169   1D03           01781                 BTFSS   STATUS, Z
016A   2973           01782                 GOTO    ASSERT_FAIL
016B   303F           01783                 MOVLW   CMD_CHAN_MASK
016C   3C3F           01784                 SUBLW   .63
016D   1D03           01785                 BTFSS   STATUS, Z
016E   2973           01786                 GOTO    ASSERT_FAIL
016F   301F           01787                 MOVLW   SSR_DEV_MASK
0170   3C1F           01788                 SUBLW   .31
0171   1903           01789                 BTFSC   STATUS, Z
0172   2975           01790                 GOTO    ASSERT_PASS
0173   3003           01791 ASSERT_FAIL     MOVLW   .3
0174   2AAC           01792                 GOTO    FAULT
0175   178B           01793 ASSERT_PASS     BSF     INTCON, GIE     ; Enable interrupts
                      01794                 ;
                      01795                 ; Fall-through
                      01796                 ;       |
                      01797                 ;       |
                      01798                 ;       V
                      01799 
                      01800 ;================================================================
                      01801 ; MAIN PROGRAM LOOP
                      01802 ;================================================================
                      01803 ;
                      01804 ; This code is run over and over as fast as we can manage.  It keeps the SSR
                      01805 ; logic updated (on cue from the interrupt-driven timing controls), polls for
                      01806 ; serial line input (which it also parses) and keeps the front panel LEDs
                      01807 ; happy.
                      01808 ;
0176   0064           01809 MAIN_LOOP       CLRWDT
0177   1283 1303      01810                 BANKSEL 0                       ; (bank 0)
                      01811 ;
                      01812 ; Blink green LED every GRN_BLINK_RATE zero-crossings (1/120 sec)
                      01813 ; if SSR_STATE<GRNEN> set
                      01814 ;
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0179   1D48           01815 MAIN_GREEN      BTFSS   SSR_STATE2, GRNBLK      ; Time to blink green LED?
017A   297F           01816                 GOTO    MAIN_YELLOW             ; No...skip the following
017B   3001           01817                 MOVLW   1<<BIT_GRN              ; toggle green LED bit
017C   06BC           01818                 XORWF   PBUF_GRN, F
017D   1148           01819                 BCF     SSR_STATE2, GRNBLK      ; done, clear flag
017E   14C8           01820                 BSF     SSR_STATE2, SSRUPD
                      01821 
017F   1DC8           01822 MAIN_YELLOW     BTFSS   SSR_STATE2, YELOFF      ; Time to turn off yellow LED?
0180   2984           01823                 GOTO    MAIN_YEL_PRV
0181   10BC           01824                 BCF     PBUF_YEL, BIT_YEL
0182   11C8           01825                 BCF     SSR_STATE2, YELOFF
0183   14C8           01826                 BSF     SSR_STATE2, SSRUPD
                      01827 
0184   1C4B           01828 MAIN_YEL_PRV    BTFSS   SSR_STATE3, PRIVEN      ; Force YEL on if privs enabled
0185   2988           01829                 GOTO    MAIN_RED
0186   14BC           01830                 BSF     PBUF_YEL, BIT_YEL
0187   14C8           01831                 BSF     SSR_STATE2, SSRUPD
                      01832 
0188   1E48           01833 MAIN_RED        BTFSS   SSR_STATE2, REDOFF      ; Time to turn off red LED?
0189   298D           01834                 GOTO    MAIN_ACT
018A   113C           01835                 BCF     PBUF_RED, BIT_RED
018B   1248           01836                 BCF     SSR_STATE2, REDOFF
018C   14C8           01837                 BSF     SSR_STATE2, SSRUPD
                      01838 
018D   0064           01839 MAIN_ACT        CLRWDT
                      01840 
018E   21BD           01841 MAIN_PROCESS    CALL    POLL_SIO                ; process pending command byte
018F   2199           01842                 CALL    SEND_SIO                ; send outgoing bytes
0190   2326           01843                 CALL    UPDATE_SSRS             ; update the SSR lines
                      01844 
0191   2976           01845 END_MAIN        GOTO    MAIN_LOOP
                      01846 
                      01847 ;------------------------------------------------------------------------------
                      01848 ; SEND_SIO
                      01849 ;  Serial output queue management.
                      01850 ;
                      01851 ; Context: Sets bank 0
                      01852 ; In:      Reads TXBUF
                      01853 ; Also:    Affects INDF, FSR, TXBUF*, SSR_STATE2<TXQUE>
                      01854 ;
                      01855 ; FLUSH_SIO     Drains the entire output buffer before returning (blocking)
                      01856 ; SEND_SIO      Sends at most one character (non-blocking; returns immediately
                      01857 ;               if the transmitter is still busy)
                      01858 ;
                      01859 ;------------------------------------------------------------------------------
0192   0064           01860 FLUSH_SIO       CLRWDT
0193   1283 1303      01861                 BANKSEL SSR_STATE2              ; (Bank 0)
0195   1C48           01862                 BTFSS   SSR_STATE2, TXQUE
0196   0008           01863                 RETURN
0197   2199           01864                 CALL    SEND_SIO
0198   2992           01865                 GOTO    FLUSH_SIO
                      01866 
0199   0064           01867 SEND_SIO        CLRWDT
019A   1283 1303      01868                 BANKSEL SSR_STATE2
019C   1048           01869                 BCF     SSR_STATE2, TXQUE       ; can't Tx from slave
019D   0008           01870                 RETURN
                      01871 
                      01872 ;----------------------------------------------------------------
                      01873 ; SEND_W
                      01874 ;  Queue W to transmit on serial port.
                      01875 ;
                      01876 ; Context: Sets Bank 0
                      01877 ; In:      W=data to send
                      01878 ; Also:    Affects SSR_STATE2<TXQUE>, FSR, TXBUF*, X
                      01879 ;
                      01880 ; Traps Fault 2 if the buffer is full.  This is a fatal error!
                      01881 ; It probably doesn't need to be, but it's safer to err on
                      01882 ; the side of caution here.
                      01883 ;----------------------------------------------------------------
                      01884 
019E   0064           01885 SEND_W          CLRWDT
019F   1283 1303      01886                 BANKSEL SSR_STATE2              ; (Bank 0)
01A1   00F5           01887                 MOVWF   X                       ; save value
01A2   1C48           01888                 BTFSS   SSR_STATE2, TXQUE       ; Check for buffer overflow
01A3   29AA           01889                 GOTO    SEND_W_OK               ; Buffer empty; go ahead
01A4   084F           01890                 MOVF    TXBUF_SEND, W           ; Compare pointers
01A5   024E           01891                 SUBWF   TXBUF_QUEUE, W          ; If equal, buffer is full
01A6   1D03           01892                 BTFSS   STATUS, Z
01A7   29AA           01893                 GOTO    SEND_W_OK
01A8   3002           01894                 MOVLW   .2                      ; oops, buffer full
01A9   2AAC           01895                 GOTO    FAULT
                      01896 
01AA   0064           01897 SEND_W_OK       CLRWDT                          ; insert W into buffer
01AB   1383           01898                 BCF     STATUS, IRP             ; FSR in bank 0/1
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01AC   084E           01899                 MOVF    TXBUF_QUEUE, W
01AD   0084           01900                 MOVWF   FSR
01AE   0875           01901                 MOVF    X, W
01AF   0080           01902                 MOVWF   INDF
01B0   0A4E           01903                 INCF    TXBUF_QUEUE, W          ; bump pointer
01B1   390F           01904                 ANDLW   TXBUF_MASK              ; wrap within table bounds
01B2   3850           01905                 IORLW   TXBUF
01B3   00CE           01906                 MOVWF   TXBUF_QUEUE
01B4   1448           01907                 BSF     SSR_STATE2, TXQUE       ; flag non-empty buffer
                      01908 
01B5   0008           01909                 RETURN
                      01910 
                      01911 ;------------------------------------------------------------------------------
                      01912 ; POLL_SIO
                      01913 ;  Serial I/O handling.
                      01914 ;
                      01915 ; Reads incoming byte from the serial network and interprets it,
                      01916 ; executing the corresponding code to handle the command (assuming
                      01917 ; it's addressed to this unit).
                      01918 ;
                      01919 ; Context: Sets bank 0
                      01920 ;
                      01921 ; 1 start bit, 8 data bits, 1 stop bit, no parity, 19.2Kbaud
                      01922 ; when data received: PIR1<RCIF> set, interrupt raised if enabled
                      01923 ; (PIE1<RCIE>), byte received available in RCREG.  Reading from
                      01924 ; RCREG clears it and the RCIF bit.  (Actually, RCREG is a 2-deep
                      01925 ; FIFO; if it fills up, RCSTA<OERR> (overrun) is raised.  If this
                      01926 ; happens, the I/O locks up and you must turn off and then back
                      01927 ; on the CREN bit.)
                      01928 ;
                      01929 ; Framing errors assert the RCSTA<FERR> bit.
                      01930 ;
                      01931 ; Note that at full speed, you'll get a character every ~.5mS so
                      01932 ; the polling loop has to be at least that fast. (about 2,500
                      01933 ; instruction cycles between characters)
                      01934 ;
01B6   0064           01935 DRAIN_SIO_IN    CLRWDT                  ; drain receiver
01B7   1283 1303      01936                 BANKSEL PIR1            ; (bank 0)
01B9   1E8C           01937                 BTFSS   PIR1, RCIF      ; character received?
01BA   0008           01938                 RETURN                  ; no: stop
                      01939                 ;BCF    PIR1, RCIF      ; yes: acknowledge...
01BB   081A           01940                 MOVF    RCREG, W        ; ...read byte...
01BC   29B6           01941                 GOTO    DRAIN_SIO_IN    ; ...and repeat.
                      01942 
01BD   0064           01943 POLL_SIO        CLRWDT
01BE   1283 1303      01944                 BANKSEL PIR1            ; (bank 0)
01C0   1E8C           01945                 BTFSS   PIR1, RCIF      ; character received?
01C1   0008           01946                 RETURN                  ; no--move along...
                      01947 
                      01948                 ;BCF    PIR1, RCIF      ; acknowledge receipt
                      01949 
01C2   1898           01950                 BTFSC   RCSTA, OERR     ; overrun error?
01C3   2A6A           01951                 GOTO    SIO_OVERRUN
                      01952 
01C4   1918           01953                 BTFSC   RCSTA, FERR     ; framing error?
01C5   2A74           01954                 GOTO    SIO_FRAMERR
                      01955 
01C6   0064           01956                 CLRWDT
01C7   081A           01957                 MOVF    RCREG,W
01C8   00C7           01958                 MOVWF   RX_BYTE                 ; store received byte
                      01959 ;
                      01960 ; Parse the command stream.
                      01961 ; At this point, we've just received a data byte into RX_BYTE.  The
                      01962 ; state of the parser state machine (SSR_STATE<STATE>) dictates what
                      01963 ; we do with the byte we just got.
                      01964 ;
                      01965 ; State:        Byte:
                      01966 ; [0] IDLE      DATA: ignore
                      01967 ;               CMD for other: ignore
                      01968 ;               CMD 0: exec all channels off
                      01969 ;               CMD 1: store cmd; -> 1
                      01970 ;               CMD 2: store cmd; -> 2
                      01971 ;               CMD 3: exec error
                      01972 ;               CMD 4: exec error
                      01973 ;               CMD 5: exec error
                      01974 ;               CMD 6: exec error
                      01975 ;               CMD 7: -> 4
                      01976 ;
                      01977 ; [1] SETCHAN   CMD: error -> 0; rescan
                      01978 ;               DATA: exec set channel on/off -> 0
                      01979 ;
                      01980 ; [2] DIMCHAN1  CMD: error -> 0; rescan
                      01981 ;               DATA: store byte; -> 3
                      01982 ;
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01983 ; [3] DIMCHAN2  CMD: error -> 0; rescan
                      01984 ;               DATA: exec set channel dim level -> 0
                      01985 ;
                      01986 ; [4] ADMIN     CMD: error -> 0; rescan
                      01987 ;               DATA: exec sub-command -> 0
                      01988 ;
                      01989 ; [5-7] UNDEF   HALT ON INTERNAL FAULT
                      01990 ;
01C9   0064           01991 CMD_PARSER      CLRWDT
01CA   1FC7           01992                 BTFSS   RX_BYTE, CMD_BIT        ; is this a command byte?
01CB   29DE           01993                 GOTO    DATA_BYTE               ; no, go process data byte
                      01994 ;--------------------------------------------------------------------------
                      01995 ; RECEIVED COMMAND BYTE
                      01996 ;
                      01997 ; If we were still waiting for bytes to complete a command (state != 0),
                      01998 ; we abort the command with an error.  Otherwise, we act on the command
                      01999 ; if it's addressed to us.
                      02000 ;
01CC   0844           02001                 MOVF    SSR_STATE, W            ; COMMAND BYTE:
01CD   3907           02002                 ANDLW   SSR_STATE_MASK          ; --Error if state != 0
01CE   1D03           02003                 BTFSS   STATUS, Z               ;
01CF   2A62           02004                 GOTO    CMD_ABORT               ;
                      02005 ;
                      02006 ; Received command in state 0 (idle).  If we're the master, we make sure
                      02007 ; the command is addressed to us, and ignore it if it's not.  If we are
                      02008 ; the slave, our commands all come from the master, so we just do them
                      02009 ; unconditionally.
                      02010 ;
01D0   301E           02011                 MOVLW   SLV_RX_LEN              ; Flash red LED
01D1   00C3           02012                 MOVWF   RED_TMR
01D2   16C4           02013                 BSF     SSR_STATE, REDEN
01D3   153C           02014                 BSF     PBUF_RED, BIT_RED
01D4   14C8           02015                 BSF     SSR_STATE2, SSRUPD
01D5   2805           02016                 GOTO    STATE_0_CMD_TBL         ; dispatch command from RX_BYTE
                      02017 ;
                      02018 ; COMMAND 0:    ALL CHANNELS OFF
                      02019 ;               1000aaaa
                      02020 ;                       Set all device channels to OFF state
                      02021 ;
01D6   22F4           02022 CMD_0           CALL    ALL_SSRS_OFF
01D7   2A8A           02023                 GOTO    PASS_DOWN
                      02024 ;
                      02025 ; COMMAND 1:    SET CHANNEL ON/OFF
                      02026 ;               1001aaaa ...
                      02027 ;               Wait for next byte
                      02028 ;
01D8   1444           02029 CMD_1           BSF     SSR_STATE, STATE0       ; -> 1
01D9   0008           02030                 RETURN
                      02031 ;
                      02032 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02033 ;               1010aaaa ...
                      02034 ;               Wait for next byte
                      02035 ;
01DA   14C4           02036 CMD_2           BSF     SSR_STATE, STATE1       ; -> 2
01DB   0008           02037                 RETURN
                      02038 ;
                      02039 ; COMMAND 7:    ADMINISTRATIVE COMMANDS
                      02040 ;               1011aaaa ...
                      02041 ;               Wait for next byte
                      02042 ;
01DC   1544           02043 CMD_7           BSF     SSR_STATE, STATE2       ; -> 4
01DD   0008           02044                 RETURN
                      02045 ;
                      02046 ;--------------------------------------------------------------------------
                      02047 ; RECEIVED DATA BYTE
                      02048 ;
                      02049 ; If we were not waiting for one (state zero), just ignore it.  It's some-
                      02050 ; one else's.  Otherwise, do what we were waiting for.
                      02051 ;
                      02052 ; Data byte handler dispatch based on state machine value.
                      02053 ;
01DE   2813           02054 DATA_BYTE       GOTO    DATA_BYTE_TBL           ; Dispatch command from state
                      02055                                                 ; machine value.
                      02056 
01DF   3001           02057 FAULT_1         MOVLW   .1                      ; Fault code
01E0   2AAC           02058                 GOTO    FAULT                   ; Halt on error
                      02059 ;
                      02060 ; COMMAND 1:    SET CHANNEL ON/OFF
                      02061 ;               1001aaaa 0fvvvvvv
                      02062 ;               Set channel vvvvvv to on if f=1 or off if f=0
                      02063 ;
01E1   0064           02064 DATA_STATE_1    CLRWDT
01E2   1283 1303      02065                 BANKSEL SSR_ID                  ; (bank 0)
01E4   0847           02066                 MOVF    RX_BYTE, W              ; get channel id byte
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01E5   393F           02067                 ANDLW   CMD_CHAN_MASK
01E6   00BE           02068                 MOVWF   SSR_ID
01E7   2275           02069                 CALL    XLATE_SSR_ID            ; get local SSR ID
01E8   1B3E           02070                 BTFSC   SSR_ID, ILLSSR          ; is it a bad SSR?
01E9   2A61           02071                 GOTO    CMD_ERROR
01EA   1FBE           02072                 BTFSS   SSR_ID, MY_SSR          ; is it even my SSR?
01EB   29F0           02073                 GOTO    PASS_CMD_1              ; nope
                      02074 
01EC   0180           02075                 CLRF    INDF                    ; clear dim, on, value
01ED   1B47           02076                 BTFSC   RX_BYTE, CMD_CHAN_ON    ; set ON if on bit set in cmd
01EE   1780           02077                 BSF     INDF, SSR_ON
01EF   29F2           02078                 GOTO    CMD_RESET_STATE
                      02079 
01F0   0064           02080 PASS_CMD_1      CLRWDT                          ; not my SSR, send to slave CPU
01F1   2AAC           02081                 GOTO    FAULT
                      02082 
                      02083 ;
                      02084 ; Reset state machine (-> 0)
                      02085 ; This is usually the last step in any command execution.
                      02086 ;
01F2   0064           02087 CMD_RESET_STATE CLRWDT
01F3   30F8           02088                 MOVLW   ~SSR_STATE_MASK
01F4   05C4           02089                 ANDWF   SSR_STATE, F            ; -> 0
01F5   0008           02090                 RETURN
                      02091 ;
                      02092 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02093 ;               1010aaaa 0xvvvvvv ...
                      02094 ;               Wait for last byte
                      02095 ;
01F6   0064           02096 DATA_STATE_2    CLRWDT
01F7   0847           02097                 MOVF    RX_BYTE, W
01F8   00C9           02098                 MOVWF   DATA_BUF                ; store received byte
01F9   1444           02099                 BSF     SSR_STATE, STATE0       ; -> 3
01FA   0008           02100                 RETURN
                      02101 ;
                      02102 ; COMMAND 2:    SET CHANNEL DIMMER LEVEL
                      02103 ;               1010aaaa 0xvvvvvv 0xxddddd
                      02104 ;               Set channel vvvvvv to dimmer level ddddd.
                      02105 ;
                      02106 ; note that setting value=0 or value=31 here is subtly different
                      02107 ; than just using the "set on/off" command.  This always engages
                      02108 ; the dimmer controls, although in theory a value of 0 should never
                      02109 ; get turned on, and a value of 31 should be pretty darn near fully
                      02110 ; on.
                      02111 ;
01FB   0064           02112 DATA_STATE_3    CLRWDT
01FC   0849           02113                 MOVF    DATA_BUF, W             ; get requested channel
01FD   393F           02114                 ANDLW   CMD_CHAN_MASK
01FE   00BE           02115                 MOVWF   SSR_ID
01FF   2275           02116                 CALL    XLATE_SSR_ID            ; normalize channel ID
0200   1B3E           02117                 BTFSC   SSR_ID, ILLSSR          ; is it even valid?
0201   2A61           02118                 GOTO    CMD_ERROR
0202   1FBE           02119                 BTFSS   SSR_ID, MY_SSR          ; is it for me?
0203   2A0A           02120                 GOTO    PASS_CMD_2              ; no: pass to slave
                      02121 
0204   0847           02122                 MOVF    RX_BYTE, W              ; get dimmer value
0205   391F           02123                 ANDLW   CMD_DIM_MASK
0206   0080           02124                 MOVWF   INDF                    ; write to SSR value buffer
0207   1700           02125                 BSF     INDF, SSRDIM            ; set SSR channel flags
0208   1380           02126                 BCF     INDF, SSR_ON
0209   29F2           02127                 GOTO    CMD_RESET_STATE
                      02128 ;
                      02129 ; If the channel is actually for the slave CPU, we need to send it
                      02130 ; over there.
                      02131 ;
020A   0064           02132 PASS_CMD_2      CLRWDT
020B   2AAC           02133                 GOTO    FAULT
                      02134 ;
                      02135 ; COMMAND 7:    ADMINISTRATIVE FUNCTIONS
                      02136 ;               1111aaaa 0xxxxxxx
                      02137 ;                        00pppppp set phase offset=p(*)
                      02138 ;                        010baaaa set device ID(*)
                      02139 ;                        01100000 shutdown(*)
                      02140 ;                        01100001 disable privileged commands
                      02141 ;                        011101yr (slave) red/yel 2s
                      02142 ;                        01111gyr (slave) halt with LED pattern
                      02143 ;
020C   0064           02144 DATA_STATE_4    CLRWDT
020D   1F47           02145                 BTFSS   RX_BYTE, 6              ; -0------ set phase offset
020E   2A37           02146                 GOTO    CMD_SET_PHASE
020F   1EC7           02147                 BTFSS   RX_BYTE, 5              ; -10----- set device id
0210   2A3B           02148                 GOTO    CMD_SET_DEV_ID
0211   1E47           02149                 BTFSS   RX_BYTE, 4              ; -110---- admin commands
0212   2A3F           02150                 GOTO    CMD_ADMIN
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0213   0064           02151 CMD_SLAVE_CTL   CLRWDT                          ; -111---- slave control commands
0214   19C7           02152                 BTFSC   RX_BYTE, 3              ; -1111--- HALT with LED pattern
0215   2A19           02153                 GOTO    CMD_SLV_HALT
0216   1947           02154                 BTFSC   RX_BYTE, 2              ; -11101-- Display LED pattern 2s
0217   2A27           02155                 GOTO    CMD_SLV_LEDS
0218   2A61           02156                 GOTO    CMD_ERROR               ; -11100xx Reserved for future commands
                      02157 ;
                      02158 ; ADMIN: SLAVE: HALT     1111xxxx 01111gyr
                      02159 ; Display a pattern on the LEDs and halt
                      02160 ;
0219   0064           02161 CMD_SLV_HALT    CLRWDT
021A   138B           02162                 BCF     INTCON, GIE             ; disable interrupts
021B   22F4           02163                 CALL    ALL_SSRS_OFF
021C   01BC           02164                 CLRF    PORTE_BUF
021D   2318           02165                 CALL    UPDATE_PORTS
021E   1947           02166                 BTFSC   RX_BYTE, 2
021F   143C           02167                 BSF     PBUF_GRN, BIT_GRN
0220   18C7           02168                 BTFSC   RX_BYTE, 1
0221   14BC           02169                 BSF     PBUF_YEL, BIT_YEL
0222   1847           02170                 BTFSC   RX_BYTE, 0
0223   153C           02171                 BSF     PBUF_RED, BIT_RED
0224   2318           02172                 CALL    UPDATE_PORTS
0225   0064           02173 CMD_SLV_STOP    CLRWDT
0226   2A25           02174                 GOTO    $-1
                      02175 ;
                      02176 ; ADMIN: SLAVE: LEDS     1111aaaa 011101yr
                      02177 ; Display a pattern on the yellow/red LEDs for 2s
                      02178 ;
0227   0064           02179 CMD_SLV_LEDS    CLRWDT
0228   1CC7           02180                 BTFSS   RX_BYTE, 1
0229   2A2F           02181                 GOTO    CMD_SLV_LED_R
022A   30F0           02182                 MOVLW   SLV_LED_LEN
022B   00C2           02183                 MOVWF   YEL_TMR
022C   1644           02184                 BSF     SSR_STATE, YELEN
022D   14BC           02185                 BSF     PBUF_YEL, BIT_YEL
022E   14C8           02186                 BSF     SSR_STATE2, SSRUPD
022F   1C47           02187 CMD_SLV_LED_R   BTFSS   RX_BYTE, 0
0230   29F2           02188                 GOTO    CMD_RESET_STATE
0231   30F0           02189                 MOVLW   SLV_LED_LEN
0232   00C3           02190                 MOVWF   RED_TMR
0233   16C4           02191                 BSF     SSR_STATE, REDEN
0234   153C           02192                 BSF     PBUF_RED, BIT_RED
0235   14C8           02193                 BSF     SSR_STATE2, SSRUPD
0236   29F2           02194                 GOTO    CMD_RESET_STATE
                      02195 ;
                      02196 ; ADMIN: SET PHASE       1111aaaa 00pppppp
                      02197 ; Set phase offset to p, reboot device
                      02198 ;
0237   0064           02199 CMD_SET_PHASE   CLRWDT
0238   1C4B           02200                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
0239   2A57           02201                 GOTO    CMD_PRIV_ERROR
023A   2800           02202                 GOTO    RESTART_VECTOR          ; Restart device from scratch
                      02203 ;
                      02204 ; ADMIN: SET DEVICE ID   1111aaaa 010baaaa
                      02205 ; Change this device's ID on the serial network
                      02206 ;
                      02207 ; as a check bit, b==a<0>.  So, to set the device
                      02208 ; to ID=2, send 1111aaaa 01000010; to set it
                      02209 ; to ID=5, send 1111aaaa 01010101.
                      02210 ;
023B   0064           02211 CMD_SET_DEV_ID  CLRWDT
023C   1C4B           02212                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
023D   2A57           02213                 GOTO    CMD_PRIV_ERROR
                      02214 ;
023E   2AAC           02215                 GOTO    FAULT
                      02216 ;
                      02217 ; ADMIN: MISC. ADMINISTRATIVE FUNCTIONS
                      02218 ;               1111aaaa 0110xxxx (function x (0-15))
                      02219 ;                        01100000 shutdown(*)
                      02220 ;                        01100001 disable privileged commands
                      02221 ;
023F   2821           02222 CMD_ADMIN       GOTO    CMD_ADMIN_TABLE
                      02223 
                      02224 ;
                      02225 ; ADMIN: SHUTDOWN
                      02226 ;
0240   0064           02227 CMD_AD_SHUTDOWN CLRWDT
0241   1C4B           02228                 BTFSS   SSR_STATE3, PRIVEN      ; not allowed if privs disabled
0242   2A57           02229                 GOTO    CMD_PRIV_ERROR
0243   138B           02230                 BCF     INTCON, GIE             ; turn off interrupts
0244   22F4           02231                 CALL    ALL_SSRS_OFF
0245   01BC           02232                 CLRF    PORTE_BUF
0246   2318           02233                 CALL    UPDATE_PORTS
0247   22DF           02234                 CALL    DELAY_250MS
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0248   1489           02235                 BSF     PORT_YEL, BIT_YEL
0249   22D4           02236                 CALL    DELAY_1S
024A   1089           02237                 BCF     PORT_YEL, BIT_YEL
024B   22DF           02238                 CALL    DELAY_250MS
024C   1509           02239                 BSF     PORT_RED, BIT_RED
024D   22DC           02240                 CALL    DELAY_2S
024E   0063           02241                 SLEEP
024F   0064           02242                 CLRWDT                          ; extra paranoia
0250   2A4F           02243                 GOTO    $-1
                      02244 ;
                      02245 ; ADMIN: DISABLE PRIVILEGED FUNCTIONS
                      02246 ;
0251   0064           02247 CMD_AD_DIS_PRIV CLRWDT
0252   104B           02248                 BCF     SSR_STATE3, PRIVEN
0253   1E44           02249                 BTFSS   SSR_STATE, YELEN
0254   10BC           02250                 BCF     PBUF_YEL, BIT_YEL
0255   14C8           02251                 BSF     SSR_STATE2, SSRUPD
0256   29F2           02252                 GOTO    CMD_RESET_STATE
                      02253 ;------------------------------------------------------------------------------
                      02254 ; ERROR HANDLING
                      02255 ;------------------------------------------------------------------------------
                      02256 ;
                      02257 ; CMD_PRIV_ERROR Received privileged command when not enabled
                      02258 ;
                      02259 ; CMD_ERROR      Received invalid command; flash LED and ignore it
                      02260 ;
                      02261 ; CMD_ABORT      Received invalid byte in command sequence; flash
                      02262 ;                LED and re-parse received byte in case it might be
                      02263 ;                a new command addressed to us
                      02264 ;
0257   0064           02265 CMD_PRIV_ERROR  CLRWDT
                      02266 ; If we detected this in the slave, we can just
                      02267 ; handle it directly here.
0258   14BC           02268                 BSF     PBUF_YEL, BIT_YEL
0259   153C           02269                 BSF     PBUF_RED, BIT_RED
025A   30F0           02270                 MOVLW   .240
025B   00C2           02271                 MOVWF   YEL_TMR
025C   00C3           02272                 MOVWF   RED_TMR
025D   1644           02273                 BSF     SSR_STATE, YELEN
025E   16C4           02274                 BSF     SSR_STATE, REDEN
025F   14C8           02275                 BSF     SSR_STATE2, SSRUPD
0260   29F2           02276                 GOTO    CMD_RESET_STATE
                      02277 
0261   01C7           02278 CMD_ERROR       CLRF    RX_BYTE                 ; clear byte so rescan==ignore
0262   0064           02279 CMD_ABORT       CLRWDT
0263   14BC           02280                 BSF     PBUF_YEL, BIT_YEL
0264   30F0           02281                 MOVLW   YEL_CMDERR_LEN
0265   00C2           02282                 MOVWF   YEL_TMR
0266   1644           02283                 BSF     SSR_STATE, YELEN
0267   14C8           02284                 BSF     SSR_STATE2, SSRUPD
0268   21F2           02285                 CALL    CMD_RESET_STATE         ; -> 0
0269   29C9           02286                 GOTO    CMD_PARSER              ; rescan byte
                      02287 ;
                      02288 ; Data overrun!  Panic!
                      02289 ;
026A   0064           02290 SIO_OVERRUN     CLRWDT
026B   1218           02291                 BCF     RCSTA, CREN             ; shut down receiver
026C   22DF           02292                 CALL    DELAY_250MS             ; for 250mS (maybe longer
026D   1618           02293                 BSF     RCSTA, CREN             ; than strictly necessary)
026E   3078           02294                 MOVLW   RED_ORERR_LEN
026F   00C3           02295                 MOVWF   RED_TMR
0270   16C4           02296                 BSF     SSR_STATE, REDEN
0271   153C           02297                 BSF     PBUF_RED, BIT_RED
0272   14C8           02298                 BSF     SSR_STATE2, SSRUPD
0273   29F2           02299                 GOTO    CMD_RESET_STATE
                      02300 ;
                      02301 ; Framing Error!  Don't Panic!  But flag as a command error, reset state
                      02302 ; machine, etc.
                      02303 ;
0274   2A61           02304 SIO_FRAMERR     GOTO    CMD_ERROR
                      02305 ;
                      02306 ;==============================================================================
                      02307 ; XLATE_SSR_ID
                      02308 ;  Translate the channel number to a local SSR number 0-23.
                      02309 ;
                      02310 ; Context: Sets Bank 0
                      02311 ; In:      SSR_ID=raw command
                      02312 ; Out:     SSR_ID=adjusted value, MY_SSR,ILLSSR flags
                      02313 ;          FSR=pointer to SSR value register
                      02314 ;
                      02315 ;==============================================================================
                      02316 ;
                      02317 ; Given a raw channel number in SSR_ID, convert it to the local
                      02318 ; SSR ID 0-23 and set the MY_SSR bit if this board has that SSR.
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02319 ; Load FSR to point to that SSR's buffer
                      02320 ;
                      02321 ; Otherwise, clear MY_SSR and the other bits are undefined (in
                      02322 ; which case we should ignore the command and let the other board
                      02323 ; handle it).
                      02324 ;
                      02325 ; For this model, SSR ID 00-23 is for the master board,
                      02326 ; and SSR ID 24-47 is 00-23 on the slave board.
                      02327 ;
                      02328 ; If an illegal SSR ID is specified, ILLSSR is set.  In
                      02329 ; this case, disregard ALL OTHER BITS including MY_SSR.
                      02330 ;
0275   0064           02331 XLATE_SSR_ID    CLRWDT
0276   1283 1303      02332                 BANKSEL SSR_ID          ; (bank 0)
0278   303F           02333                 MOVLW   CMD_CHAN_MASK   ; mask off just the channel
0279   05BE           02334                 ANDWF   SSR_ID, F       ; (also clears MY_SSR and ILLSSR)
027A   3018           02335                 MOVLW   .24             ; subtract ch-24
027B   023E           02336                 SUBWF   SSR_ID, W       ; if ch<24, it is
027C   1C03           02337                 BTFSS   STATUS, C       ;
027D   2AAC           02338                 GOTO    FAULT           ; else...wait, we shouldn't see that!
027E   0064           02339                 CLRWDT                  ; slave continues checking...
027F   00BE           02340                 MOVWF   SSR_ID          ; put adjusted channel back
0280   3018           02341                 MOVLW   .24             ; subtract 24 again
0281   023E           02342                 SUBWF   SSR_ID, W       ; just to be sure it was <48
0282   1803           02343                 BTFSC   STATUS, C       ; Skip if < 48
0283   173E           02344                 BSF     SSR_ID, ILLSSR  ; **flag as illegal SSR ID**
0284   17BE           02345                 BSF     SSR_ID, MY_SSR  ; it's mine!
0285   083E           02346                 MOVF    SSR_ID, W
0286   393F           02347                 ANDLW   CMD_CHAN_MASK   ; calculate offset to SSR value register
0287   3E20           02348                 ADDLW   SSR00_VAL
0288   0084           02349                 MOVWF   FSR             ; make FSR point to that register
0289   0008           02350                 RETURN
                      02351 
                      02352 
                      02353 ;----------------------------------------------------------------
                      02354 ; PASS_DOWN
                      02355 ;  Pass received byte (in RX_BYTE) down to slave CPU.
                      02356 ;
                      02357 ; Context: Sets Bank 0
                      02358 ;
                      02359 ;----------------------------------------------------------------
028A   0064           02360 PASS_DOWN       CLRWDT
028B   1283 1303      02361                 BANKSEL RX_BYTE
028D   0008           02362                 RETURN
                      02363 
                      02364 
                      02365 ;----------------------------------------------------------------
                      02366 ; FLASH_YEL
                      02367 ; FLASH_RED
                      02368 ;  Flash yellow or red LED a number of times
                      02369 ;
                      02370 ;  These write directly to the LED I/O port, so can only be
                      02371 ;  used outside normal running mode (POST, etc).
                      02372 ;
                      02373 ;  Context: Bank 0
                      02374 ;  In:      W=flasher count
                      02375 ;  Also:    FLASH_CT I, J, K affected
                      02376 ;----------------------------------------------------------------
028E   0064           02377 FLASH_YEL       CLRWDT
028F   1283 1303      02378                 BANKSEL FLASH_CT        ; (Bank 0)
0291   00BF           02379                 MOVWF   FLASH_CT
0292   22D5           02380                 CALL    FLASH_OFF_DELAY
0293   08BF           02381                 MOVF    FLASH_CT, F     ; If already zero, stop
0294   1903           02382                 BTFSC   STATUS, Z
0295   0008           02383                 RETURN
                      02384 
0296   1489           02385 NEXT_FLASH_YEL  BSF     PORT_YEL, BIT_YEL
0297   22D9           02386                 CALL    FLASH_ON_DELAY
0298   1089           02387                 BCF     PORT_YEL, BIT_YEL
0299   22D5           02388                 CALL    FLASH_OFF_DELAY
029A   0BBF           02389                 DECFSZ  FLASH_CT, F
029B   2A96           02390                 GOTO    NEXT_FLASH_YEL
029C   0008           02391                 RETURN
                      02392 
029D   0064           02393 FLASH_RED       CLRWDT
029E   1283 1303      02394                 BANKSEL FLASH_CT        ; (Bank 0)
02A0   00BF           02395                 MOVWF   FLASH_CT
02A1   22D5           02396                 CALL    FLASH_OFF_DELAY
02A2   08BF           02397                 MOVF    FLASH_CT, F     ; If already zero, stop
02A3   1903           02398                 BTFSC   STATUS, Z
02A4   0008           02399                 RETURN
                      02400 
02A5   1509           02401 NEXT_FLASH_RED  BSF     PORT_RED, BIT_RED
02A6   22D9           02402                 CALL    FLASH_ON_DELAY
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02A7   1109           02403                 BCF     PORT_RED, BIT_RED
02A8   22D5           02404                 CALL    FLASH_OFF_DELAY
02A9   0BBF           02405                 DECFSZ  FLASH_CT, F
02AA   2AA5           02406                 GOTO    NEXT_FLASH_RED
02AB   0008           02407                 RETURN
                      02408 
                      02409 ;----------------------------------------------------------------
                      02410 ; FAULT
                      02411 ;  Register a fault condition and halt operations.
                      02412 ;
                      02413 ; Codes:
                      02414 ;  Value  A GY GYR  Meaning
                      02415 ;  000001 - -- --O  Illegal state machine value
                      02416 ;  000010 - -- -O-  TX buffer overflow
                      02417 ;  000011 - -- -OO  Assertion error in POST
                      02418 ;  (none) x xx OOO  Slave tried to pass cmd downstream
                      02419 ;  (none) x xx OOO  Any fault detected only in slave CPU
                      02420 ;  011000 - OO ---  Internal SSR index out of range (==24)
                      02421 ;     :      :
                      02422 ;  011111 - OO OOO  Internal SSR index out of range (==31)
                      02423 ;
                      02424 ; Context: Sets Bank 0
                      02425 ; In:      W=fault code (0-63)
                      02426 ; Returns: never
                      02427 ;
                      02428 ;----------------------------------------------------------------
02AC   0064           02429 FAULT           CLRWDT
02AD   1283 1303      02430                 BANKSEL INTCON
02AF   138B           02431                 BCF     INTCON, GIE     ; disable interrupts
02B0   22F4           02432                 CALL    ALL_SSRS_OFF    ; kill outputs
02B1   01BC           02433                 CLRF    PORTE_BUF       ; reset T/R, LED outputs
02B2   2318           02434                 CALL    UPDATE_PORTS    ; flush to output
                      02435 ;
                      02436 ;
                      02437 ; In the slave, we can't really report out faults so we'll
                      02438 ; just flash all our lights and halt.
                      02439 ;
02B3   0064           02440 FAULT_HALT      CLRWDT
02B4   153C           02441                 BSF     PBUF_RED, BIT_RED
02B5   14BC           02442                 BSF     PBUF_YEL, BIT_YEL
02B6   143C           02443                 BSF     PBUF_GRN, BIT_GRN
02B7   2318           02444                 CALL    UPDATE_PORTS
02B8   22D8           02445                 CALL    DELAY_500MS
02B9   113C           02446                 BCF     PBUF_RED, BIT_RED
02BA   10BC           02447                 BCF     PBUF_YEL, BIT_YEL
02BB   103C           02448                 BCF     PBUF_GRN, BIT_GRN
02BC   2318           02449                 CALL    UPDATE_PORTS
02BD   22D8           02450                 CALL    DELAY_500MS
02BE   2AB3           02451                 GOTO    FAULT_HALT
                      02452 ;
                      02453 ;
                      02454 
                      02455 
                      02456 ;----------------------------------------------------------------
                      02457 ; FLASH_PHASE
                      02458 ;  Flash the phase offset value on the diagnostic LEDs.
                      02459 ;  Normal interrupt processing should be suspended during this
                      02460 ;  operation.
                      02461 ;
                      02462 ;  Properly turns off LEDs via port buffers, but then takes over
                      02463 ;  direct control of the LEDs like the POST-level commands do.
                      02464 ;  (this is called during POST as well)
                      02465 ;
                      02466 ; Context: Sets Bank 0
                      02467 ; In:      PHASE_OFFSET=phase
                      02468 ; Also:    I, J, K affected
                      02469 ;----------------------------------------------------------------
02BF   0064           02470 FLASH_PHASE     CLRWDT
02C0   1283 1303      02471                 BANKSEL PHASE_OFFSET    ; (Bank 0)
02C2   103C           02472                 BCF     PBUF_GRN, BIT_GRN
02C3   10BC           02473                 BCF     PBUF_YEL, BIT_YEL
02C4   113C           02474                 BCF     PBUF_RED, BIT_RED
02C5   2318           02475                 CALL    UPDATE_PORTS
02C6   22DC           02476                 CALL    DELAY_2S
02C7   1509           02477                 BSF     PORT_RED, BIT_RED
02C8   0E3D           02478                 SWAPF   PHASE_OFFSET, W
02C9   390F           02479                 ANDLW   0x0F
02CA   228E           02480                 CALL    FLASH_YEL
02CB   1109           02481                 BCF     PORT_RED, BIT_RED
02CC   22DC           02482                 CALL    DELAY_2S
02CD   1489           02483                 BSF     PORT_YEL, BIT_YEL
02CE   083D           02484                 MOVF    PHASE_OFFSET, W
02CF   390F           02485                 ANDLW   0x0F
02D0   229D           02486                 CALL    FLASH_RED
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D1   1089           02487                 BCF     PORT_YEL, BIT_YEL
02D2   22DC           02488                 CALL    DELAY_2S
02D3   0008           02489                 RETURN
                      02490 
                      02491 
                      02492 
                      02493 
                      02494 
02D4   0064           02495 DELAY_1S        CLRWDT
02D5   304C           02496 FLASH_OFF_DELAY MOVLW   .76
02D6   00F2           02497                 MOVWF   I
02D7   2AE8           02498                 GOTO    ISPINNER
                      02499 
02D8   0064           02500 DELAY_500MS     CLRWDT
02D9   3026           02501 FLASH_ON_DELAY  MOVLW   .38
02DA   00F2           02502                 MOVWF   I
02DB   2AE8           02503                 GOTO    ISPINNER
                      02504 
02DC   3098           02505 DELAY_2S        MOVLW   .152
02DD   00F2           02506                 MOVWF   I
02DE   2AE8           02507                 GOTO    ISPINNER
                      02508 
02DF   3013           02509 DELAY_250MS     MOVLW   .19
02E0   00F2           02510                 MOVWF   I
02E1   2AE8           02511                 GOTO    ISPINNER
                      02512 
02E2   300A           02513 DELAY_125MS     MOVLW   .10
02E3   00F2           02514                 MOVWF   I
02E4   2AE8           02515                 GOTO    ISPINNER
                      02516 
                      02517 ; fash flasher value
02E5   3005           02518 DELAY_FFLASH    MOVLW   .5
02E6   00F2           02519                 MOVWF   I
02E7   2AE8           02520                 GOTO    ISPINNER
                      02521 
                      02522 ;----------------------------------------------------------------
                      02523 ; ISPINNER
                      02524 ;  Delay for approximately I * 255 * 255 instructions.
                      02525 ;  I=19 is about 250mS
                      02526 ;  I=38 is about 500mS
                      02527 ;
                      02528 ; Context: ANY bank
                      02529 ; In:      I=delay
                      02530 ;
                      02531 ; Also:    J, K, W affected
                      02532 ;----------------------------------------------------------------
02E8   0064           02533 ISPINNER        CLRWDT
02E9   30FF           02534                 MOVLW   .255
02EA   00F3           02535                 MOVWF   J
02EB   30FF           02536 ISP_NEXTJ       MOVLW   .255
02EC   00F4           02537                 MOVWF   K
02ED   0BF4           02538                 DECFSZ  K,F
02EE   2AED           02539                 GOTO    $-1
02EF   0BF3           02540                 DECFSZ  J,F
02F0   2AEB           02541                 GOTO    ISP_NEXTJ
02F1   0BF2           02542                 DECFSZ  I,F
02F2   2AE8           02543                 GOTO    ISPINNER
02F3   0008           02544                 RETURN
                      02545 
                      02546 ;------------------------------------------------------------------------------
                      02547 ; ALL_SSRS_OFF
                      02548 ;
                      02549 ; The fastest route to clearing all SSR channels
                      02550 ; call UPDATE_PORTS after this.
                      02551 ;
                      02552 ; Context: Sets Bank 0
                      02553 ; Also:    Affects W
                      02554 ;
                      02555 ;------------------------------------------------------------------------------
02F4   0064           02556 ALL_SSRS_OFF    CLRWDT
02F5   1283 1303      02557                 BANKSEL SSR00_VAL       ; (Bank 0)
02F7   01A0           02558                 CLRF    SSR00_VAL
02F8   01A1           02559                 CLRF    SSR01_VAL
02F9   01A2           02560                 CLRF    SSR02_VAL
02FA   01A3           02561                 CLRF    SSR03_VAL
02FB   01A4           02562                 CLRF    SSR04_VAL
02FC   01A5           02563                 CLRF    SSR05_VAL
02FD   01A6           02564                 CLRF    SSR06_VAL
02FE   01A7           02565                 CLRF    SSR07_VAL
02FF   01A8           02566                 CLRF    SSR08_VAL
0300   01A9           02567                 CLRF    SSR09_VAL
0301   01AA           02568                 CLRF    SSR10_VAL
0302   01AB           02569                 CLRF    SSR11_VAL
0303   01AC           02570                 CLRF    SSR12_VAL
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0304   01AD           02571                 CLRF    SSR13_VAL
0305   01AE           02572                 CLRF    SSR14_VAL
0306   01AF           02573                 CLRF    SSR15_VAL
0307   01B0           02574                 CLRF    SSR16_VAL
0308   01B1           02575                 CLRF    SSR17_VAL
0309   01B2           02576                 CLRF    SSR18_VAL
030A   01B3           02577                 CLRF    SSR19_VAL
030B   01B4           02578                 CLRF    SSR20_VAL
030C   01B5           02579                 CLRF    SSR21_VAL
030D   01B6           02580                 CLRF    SSR22_VAL
030E   01B7           02581                 CLRF    SSR23_VAL
030F   301F           02582                 MOVLW   b'00011111'
0310   04B8           02583                 IORWF   PORTA_BUF, F
0311   303E           02584                 MOVLW   b'00111110'
0312   04B9           02585                 IORWF   PORTB_BUF, F
0313   303F           02586                 MOVLW   b'00111111'
0314   04BA           02587                 IORWF   PORTC_BUF, F
0315   30FF           02588                 MOVLW   b'11111111'
0316   04BB           02589                 IORWF   PORTD_BUF, F
0317   0008           02590                 RETURN
                      02591 
                      02592 ;----------------------------------------------------------------
                      02593 ; Port Control
                      02594 ;
                      02595 ; Registers PORTx_BUF hold the values we want to write to the
                      02596 ; output pins.  Calling UPDATE_PORTS does the actual writing.
                      02597 ;
                      02598 ; We do it this way to avoid the READ/MODIFY/WRITE effect
                      02599 ; problems we'd have by fiddling with the I/O pins separately.
                      02600 ; Plus, this is more efficient if many pins are changing at
                      02601 ; once.
                      02602 ;
                      02603 ; UPDATE_PORTS
                      02604 ;  Context: Sets Bank 0
                      02605 ;  In:      PORTx_BUF
                      02606 ;  Also:    W affected
                      02607 ;----------------------------------------------------------------
0318   0064           02608 UPDATE_PORTS    CLRWDT
0319   1283 1303      02609                 BANKSEL PORTA           ; (Bank 0)
031B   0838           02610                 MOVF    PORTA_BUF, W
031C   0085           02611                 MOVWF   PORTA
031D   0839           02612                 MOVF    PORTB_BUF, W
031E   0086           02613                 MOVWF   PORTB
031F   083A           02614                 MOVF    PORTC_BUF, W
0320   0087           02615                 MOVWF   PORTC
0321   083B           02616                 MOVF    PORTD_BUF, W
0322   0088           02617                 MOVWF   PORTD
0323   083C           02618                 MOVF    PORTE_BUF, W
0324   0089           02619                 MOVWF   PORTE
0325   0008           02620                 RETURN
                      02621 ;
                      02622 ;=============================================================================
                      02623 ; SSR UPDATE LOOP
                      02624 ;
                      02625 ; Each slice we need to turn on some SSRs and off others.
                      02626 ; We use the SSR_STATE2<SLICE_UPD> flag to indicate that we
                      02627 ; haven't updated the SSR arrays yet in this slice.
                      02628 ;
                      02629 ; *****************************************************************************
                      02630 ; Main SSR update cycle.
                      02631 ;
                      02632 ; This is called repeatedly in the main loop.
                      02633 ; What we do here depends on the flag bits set by the background timing logic.
                      02634 ;
                      02635 ; DIM_START:  All SSRs marked as ON get turned on now
                      02636 ; DIM_END:    All SSRs *not* marked as ON get turned off now; ignore SLICE_UPD
                      02637 ; SLICE_UPD:  All SSRs under dimmer control whose value == CUR_SLICE get turned
                      02638 ;             on now
                      02639 ;
                      02640 ;
0326   0064           02641 UPDATE_SSRS     CLRWDT
0327   1F48           02642                 BTFSS   SSR_STATE2, DIM_START   ; at start of dimmer cycle?
0328   2B3A           02643                 GOTO    UPDATE_END
                      02644 ;
                      02645 ; Start of a dimmer cycle (first active slice): turn on everything that is
                      02646 ; supposed to be on all the time (they won't be turned off again at all until
                      02647 ; they are marked as dimmed or off).
                      02648 ;
0329   1348           02649 UPDATE_START    BCF     SSR_STATE2, DIM_START   ; got the flag, thanks...
032A   3018           02650                 MOVLW   .24                     ; Loop over our 24 SSRs...
032B   00F5           02651                 MOVWF   X                       ; X=loop counter 24->0
032C   01F6           02652                 CLRF    Y                       ; Y=SSR index 0->23
032D   0876           02653 UPDATE_ST_LOOP  MOVF    Y, W
032E   236D           02654                 CALL    SSR_SELECT_REG          ; FSR=ssr control register
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

032F   1F80           02655                 BTFSS   INDF, SSR_ON            ; is this SSR on? (not dimmed)
0330   2B37           02656                 GOTO    UPDATE_ST_NXT           ; else, check next SSR...
0331   2037           02657                 CALL    SSR_Y_TO_PBUF           ; W=buffer for SSR bit
0332   1383           02658                 BCF     STATUS, IRP             ; FSR in bank 0/1
0333   0084           02659                 MOVWF   FSR
0334   2373           02660                 CALL    SSR_Y_CLR_MASK          ; W=bitmask to clear SSR bit
0335   0580           02661                 ANDWF   INDF, F                 ; clear the bit
0336   14C8           02662                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
0337   0AF6           02663 UPDATE_ST_NXT   INCF    Y, F                    ; bump counter and index
0338   0BF5           02664                 DECFSZ  X, F
0339   2B2D           02665                 GOTO    UPDATE_ST_LOOP
                      02666 ;
                      02667 ; End of a dimmer cycle (last active slice): don't bother turning on any
                      02668 ; SSRs with dimmer value zero (duh).  Instead, now is the time to actually
                      02669 ; turn off EVERYTHING which isn't supposed to be on steadily.
                      02670 ;
033A   0064           02671 UPDATE_END      CLRWDT
033B   1EC8           02672                 BTFSS   SSR_STATE2, DIM_END     ; at end of dimmer cycle?
033C   2B4F           02673                 GOTO    UPDATE_SLICE
                      02674 
033D   12C8           02675                 BCF     SSR_STATE2, DIM_END     ; clear flag to do this
033E   13C8           02676                 BCF     SSR_STATE2, SLICE_UPD   ; don't update for slice 0
033F   3018           02677                 MOVLW   .24
0340   00F5           02678                 MOVWF   X
0341   01F6           02679                 CLRF    Y
0342   0876           02680 UPDATE_EN_LOOP  MOVF    Y, W
0343   236D           02681                 CALL    SSR_SELECT_REG          ; FSR=ssr control register
0344   1B80           02682                 BTFSC   INDF, SSR_ON            ; is this SSR not always on?
0345   2B4C           02683                 GOTO    UPDATE_EN_NXT           ; else, check next one...
0346   2037           02684                 CALL    SSR_Y_TO_PBUF           ; W=buffer for SSR bit
0347   1383           02685                 BCF     STATUS, IRP             ; FSR in bank 0/1
0348   0084           02686                 MOVWF   FSR
0349   205D           02687                 CALL    SSR_Y_SET_MASK
034A   0480           02688                 IORWF   INDF, F                 ; set the bit
034B   14C8           02689                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
034C   0AF6           02690 UPDATE_EN_NXT   INCF    Y, F
034D   0BF5           02691                 DECFSZ  X, F
034E   2B42           02692                 GOTO    UPDATE_EN_LOOP
                      02693 ;
                      02694 ; Any active dimmer cycle except the last one: CUR_SLICE holds the slice
                      02695 ; number we're processing, which starts at 63 and counts down to 0.  So
                      02696 ; we turn on any dimmer-controlled SSRs which have dimmer value equal to
                      02697 ; this slice number now.
                      02698 ;
034F   0064           02699 UPDATE_SLICE    CLRWDT
0350   1FC8           02700                 BTFSS   SSR_STATE2, SLICE_UPD   ; are we supposed to update?
0351   2B68           02701                 GOTO    UPDATE_COMMIT           ; no, move along...
                      02702 
0352   13C8           02703                 BCF     SSR_STATE2, SLICE_UPD   ; got it, thanks...
0353   3018           02704                 MOVLW   .24
0354   00F5           02705                 MOVWF   X
0355   01F6           02706                 CLRF    Y
0356   0876           02707 UPDATE_SL_LOOP  MOVF    Y, W
0357   236D           02708                 CALL    SSR_SELECT_REG
0358   1F00           02709                 BTFSS   INDF, SSRDIM            ; under dimmer control?
0359   2B65           02710                 GOTO    UPDATE_SL_NXT           ; nope, try the next one...
035A   301F           02711                 MOVLW   SSRVAL_MASK
035B   0500           02712                 ANDWF   INDF, W
035C   0245           02713                 SUBWF   CUR_SLICE, W
035D   1D03           02714                 BTFSS   STATUS, Z               ; dimmer level == this slice?
035E   2B65           02715                 GOTO    UPDATE_SL_NXT           ; nope, try the next one...
035F   2037           02716                 CALL    SSR_Y_TO_PBUF
0360   1383           02717                 BCF     STATUS, IRP             ; FSR in bank 0/1
0361   0084           02718                 MOVWF   FSR
0362   2373           02719                 CALL    SSR_Y_CLR_MASK
0363   0580           02720                 ANDWF   INDF, F
0364   14C8           02721                 BSF     SSR_STATE2, SSRUPD      ; Flag that a change was made
0365   0AF6           02722 UPDATE_SL_NXT   INCF    Y, F
0366   0BF5           02723                 DECFSZ  X, F
0367   2B56           02724                 GOTO    UPDATE_SL_LOOP
                      02725 ;
                      02726 ; If any of the above routines were selected to actually do anyting with the
                      02727 ; I/O ports, commit any changes they made at this time.
                      02728 ;
0368   0064           02729 UPDATE_COMMIT   CLRWDT
0369   18C8           02730                 BTFSC   SSR_STATE2, SSRUPD
036A   2318           02731                 CALL    UPDATE_PORTS
036B   10C8           02732                 BCF     SSR_STATE2, SSRUPD
036C   0008           02733                 RETURN
                      02734 ;
                      02735 ;------------------------------------------------------------------------------
                      02736 ; SSR_SELECT_REG
                      02737 ;   Get SSR buffer address from SSR number in W
                      02738 ;
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02739 ; Input:  W=SSR (0-23)
                      02740 ; Output: FSR=value register for SSR
                      02741 ;
                      02742 ; Context: Bank 0
                      02743 ;------------------------------------------------------------------------------
036D   0064           02744 SSR_SELECT_REG  CLRWDT
036E   391F           02745                 ANDLW   SSR_DEV_MASK            ; limit to 32
036F   3E20           02746                 ADDLW   SSR00_VAL               ; add offset
0370   0084           02747                 MOVWF   FSR                     ; set as indirect reg
0371   1383           02748                 BCF     STATUS, IRP             ; FSR->Bank{0,1}
0372   0008           02749                 RETURN
                      02750 ;
                      02751 ;------------------------------------------------------------------------------
                      02752 ; SSR_Y_CLR_MASK
                      02753 ;   return inverse bitmask for SSR output in its I/O port
                      02754 ;   If you AND the bitmask with the port's value the channel is turned off.
                      02755 ;   If you want to get the bitmask for turning it on, see SSR_Y_SET_MASK.
                      02756 ;
                      02757 ; Input:    Y=SSR channel (0-23)
                      02758 ; Output:   W=bitmask for CLEARING the bit (AND with current value)
                      02759 ; Context:  Any Bank
                      02760 ;------------------------------------------------------------------------------
                      02761 ;;
0373   205D           02762 SSR_Y_CLR_MASK  CALL    SSR_Y_SET_MASK
0374   3AFF           02763                 XORLW   0xff
0375   0008           02764                 RETURN
                      02765 
                      02766 ;==============================================================================
                      02767 ; Fine.
                      02768 ;==============================================================================
                      02769 
                      02770                 END
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 35


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACTEN                             00000002
ACTOFF                            00000001
ACT_RX_LEN                        0000003C
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALL_SSRS_OFF                      000002F4
ASSERT_FAIL                       00000173
ASSERT_PASS                       00000175
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BIT_00                            00000004
BIT_01                            00000003
BIT_02                            00000005
BIT_03                            00000002
BIT_04                            00000000
BIT_05                            00000005
BIT_06                            00000006
BIT_07                            00000001
BIT_08                            00000004
BIT_09                            00000002
BIT_10                            00000003
BIT_11                            00000003
BIT_12                            00000002
BIT_13                            00000004
BIT_14                            00000001
BIT_15                            00000005
BIT_16                            00000000
BIT_17                            00000007
BIT_18                            00000004
BIT_19                            00000001
BIT_20                            00000002
BIT_21                            00000001
BIT_22                            00000003
BIT_23                            00000000
BIT_GRN                           00000000
BIT_RED                           00000002
BIT_TRSEL                         00000005
BIT_YEL                           00000001
BRGH                              00000002
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CIS                               00000003
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 36


SYMBOL TABLE
  LABEL                             VALUE 

CKE                               00000006
CKP                               00000004
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             0000009C
CMD_0                             000001D6
CMD_1                             000001D8
CMD_2                             000001DA
CMD_7                             000001DC
CMD_ABORT                         00000262
CMD_ADDR_MASK                     0000000F
CMD_ADMIN                         0000023F
CMD_ADMIN_TABLE                   00000021
CMD_AD_CMD_MASK                   0000000F
CMD_AD_DIS_PRIV                   00000251
CMD_AD_ID_CHK                     00000004
CMD_AD_ID_MASK                    0000000F
CMD_AD_PH_MASK                    0000003F
CMD_AD_SHUTDOWN                   00000240
CMD_AD_SLAVE                      00000004
CMD_AD_S_GRN                      00000002
CMD_AD_S_HALT                     00000003
CMD_AD_S_RED                      00000000
CMD_AD_S_YEL                      00000001
CMD_BIT                           00000007
CMD_CHAN_MASK                     0000003F
CMD_CHAN_ON                       00000006
CMD_DIM_MASK                      0000001F
CMD_ERROR                         00000261
CMD_MASK                          00000070
CMD_PARSER                        000001C9
CMD_PRIV_ERROR                    00000257
CMD_RESET_STATE                   000001F2
CMD_SET_DEV_ID                    0000023B
CMD_SET_PHASE                     00000237
CMD_SLAVE_CTL                     00000213
CMD_SLV_HALT                      00000219
CMD_SLV_LEDS                      00000227
CMD_SLV_LED_R                     0000022F
CMD_SLV_STOP                      00000225
CMD_SW_MASK                       00000007
CMIE                              00000006
CMIF                              00000006
CREN                              00000004
CSRC                              00000007
CUR_PRE                           00000046
CUR_SLICE                         00000045
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            0000009D
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
D                                 00000005
DATA_ADDRESS                      00000005
DATA_BUF                          00000049
DATA_BYTE                         000001DE
DATA_BYTE_TBL                     00000013
DATA_STATE_1                      000001E1
DATA_STATE_2                      000001F6
DATA_STATE_3                      000001FB
DATA_STATE_4                      0000020C
DC                                00000001
DELAY_125MS                       000002E2
DELAY_1S                          000002D4
DELAY_250MS                       000002DF
DELAY_2S                          000002DC
DELAY_500MS                       000002D8
DELAY_FFLASH                      000002E5
DIM_END                           00000005
DIM_START                         00000006
DRAIN_SIO_IN                      000001B6
D_A                               00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

EEPGD                             00000007
EEPROM_DEFAULTS                   00002100
EE_DEF_DEV_ID                     00002101
EE_DEF_IDLE                       00002100
EE_DEF_PHASE                      00002102
EE_DEV_ID                         00000001
EE_IDLE                           00000000
EE_PHASE                          00000002
END_MAIN                          00000191
F                                 00000001
FAULT                             000002AC
FAULT_1                           000001DF
FAULT_HALT                        000002B3
FERR                              00000002
FLASH_CT                          0000003F
FLASH_OFF_DELAY                   000002D5
FLASH_ON_DELAY                    000002D9
FLASH_PHASE                       000002BF
FLASH_RED                         0000029D
FLASH_YEL                         0000028E
FLUSH_SIO                         00000192
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GRNBLK                            00000002
GRNEN                             00000003
GRN_BLINK_RATE                    000000FF
GRN_TMR                           00000041
I                                 00000072
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
ILLSSR                            00000006
INCYC                             00000007
INDF                              00000000
INIT                              000000BD
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
INT_ACT                           0000009F
INT_END                           000000B5
INT_ENDSLICE                      000000B4
INT_GRN                           00000099
INT_INT0                          0000008C
INT_NEXTSLICE                     000000AF
INT_PRECYC                        000000A7
INT_RED                           00000094
INT_TMR2                          000000A3
INT_VECTOR                        00000004
INT_YEL                           0000008F
INT_ZC                            000000A0
IRP                               00000007
ISPINNER                          000002E8
ISP_NEXTJ                         000002EB
ISR                               00000083
J                                 00000073
K                                 00000074
MAIN_ACT                          0000018D
MAIN_GREEN                        00000179
MAIN_LOOP                         00000176
MAIN_PROCESS                      0000018E
MAIN_RED                          00000188
MAIN_YELLOW                       0000017F
MAIN_YEL_PRV                      00000184
MASK_ALL_LEDS                     00000007
MASK_NO_LEDS                      00000000
MASK_RED_YEL                      00000006
MY_SSR                            00000007
NEXT_FLASH_RED                    000002A5
NEXT_FLASH_YEL                    00000296
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
P                                 00000004
PASS_CMD_1                        000001F0
PASS_CMD_2                        0000020A
PASS_DOWN                         0000028A
PBUF_00                           0000003A
PBUF_01                           0000003A
PBUF_02                           0000003A
PBUF_03                           0000003A
PBUF_04                           0000003A
PBUF_05                           0000003B
PBUF_06                           0000003B
PBUF_07                           00000039
PBUF_08                           00000038
PBUF_09                           00000039
PBUF_10                           00000038
PBUF_11                           00000039
PBUF_12                           00000038
PBUF_13                           00000039
PBUF_14                           00000038
PBUF_15                           00000039
PBUF_16                           00000038
PBUF_17                           0000003B
PBUF_18                           0000003B
PBUF_19                           0000003A
PBUF_20                           0000003B
PBUF_21                           0000003B
PBUF_22                           0000003B
PBUF_23                           0000003B
PBUF_GRN                          0000003C
PBUF_RED                          0000003C
PBUF_TRSEL                        00000038
PBUF_YEL                          0000003C
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCLATH_TEMP                       00000077
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PHASE_OFFSET                      0000003D
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
POLL_SIO                          000001BD
PORTA                             00000005
PORTA_BUF                         00000038
PORTB                             00000006
PORTB_BUF                         00000039
PORTC                             00000007
PORTC_BUF                         0000003A
PORTD                             00000008
PORTD_BUF                         0000003B
PORTE                             00000009
PORTE_BUF                         0000003C
PORT_00                           00000007
PORT_01                           00000007
PORT_02                           00000007
PORT_03                           00000007
PORT_04                           00000007
PORT_05                           00000008
PORT_06                           00000008
PORT_07                           00000006
PORT_08                           00000005
PORT_09                           00000006
PORT_10                           00000005
PORT_11                           00000006
PORT_12                           00000005
PORT_13                           00000006
PORT_14                           00000005
PORT_15                           00000006
PORT_16                           00000005
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

PORT_17                           00000008
PORT_18                           00000008
PORT_19                           00000007
PORT_20                           00000008
PORT_21                           00000008
PORT_22                           00000008
PORT_23                           00000008
PORT_GRN                          00000009
PORT_LEDS                         00000009
PORT_RED                          00000009
PORT_TRSEL                        00000005
PORT_YEL                          00000009
POST_ASSERTIONS                   00000162
POST_FINAL                        00000144
POST_PHASE_SYNC                   0000013B
POST_ROM_ID                       0000011E
POST_STAGE_1                      00000121
POST_STAGE_2                      00000138
POST_START                        00000108
PR2                               00000092
PRECYC                            00000006
PRIVEN                            00000000
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
REDEN                             00000005
REDOFF                            00000004
RED_CMDERR_LEN                    000000F0
RED_ORERR_LEN                     00000078
RED_TMR                           00000043
RESET_LEDS_NEXT                   000000DE
RESTART_VECTOR                    00000000
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
RX_BYTE                           00000047
R_W                               00000002
S                                 00000003
SEN                               00000000
SEND_SIO                          00000199
SEND_W                            0000019E
SEND_W_OK                         000001AA
SETUP_EEPROM                      000000E9
SETUP_EE_FF                       00000103
SETUP_PORTS                       000000C3
SIO_FRAMERR                       00000274
SIO_OVERRUN                       0000026A
SLICE_UPD                         00000007
SLV_LED_LEN                       000000F0
SLV_RX_LEN                        0000001E
SLV_TX_LEN                        0000001E
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
SSR00_VAL                         00000020
SSR01_VAL                         00000021
SSR02_VAL                         00000022
SSR03_VAL                         00000023
SSR04_VAL                         00000024
SSR05_VAL                         00000025
SSR06_VAL                         00000026
SSR07_VAL                         00000027
SSR08_VAL                         00000028
SSR09_VAL                         00000029
SSR10_VAL                         0000002A
SSR11_VAL                         0000002B
SSR12_VAL                         0000002C
SSR13_VAL                         0000002D
SSR14_VAL                         0000002E
SSR15_VAL                         0000002F
SSR16_VAL                         00000030
SSR17_VAL                         00000031
SSR18_VAL                         00000032
SSR19_VAL                         00000033
SSR20_VAL                         00000034
SSR21_VAL                         00000035
SSR22_VAL                         00000036
SSR23_VAL                         00000037
SSRDIM                            00000006
SSRUPD                            00000001
SSRVAL_MASK                       0000001F
SSRVAL_RESV                       00000005
SSR_DEV_MASK                      0000001F
SSR_ID                            0000003E
SSR_ID_RESV                       00000005
SSR_ON                            00000007
SSR_SELECT_REG                    0000036D
SSR_STATE                         00000044
SSR_STATE2                        00000048
SSR_STATE3                        0000004B
SSR_STATE3_RES3                   00000003
SSR_STATE3_RES4                   00000004
SSR_STATE3_RES5                   00000005
SSR_STATE3_RES6                   00000006
SSR_STATE3_RES7                   00000007
SSR_STATE_MASK                    00000007
SSR_Y_CLR_MASK                    00000373
SSR_Y_SET_MASK                    0000005D
SSR_Y_TO_PBUF                     00000037
STATE0                            00000000
STATE1                            00000001
STATE2                            00000002
STATE_0_CMD_TBL                   00000005
STATUS                            00000003
STATUS_TEMP                       00000071
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

TOUTPS3                           00000006
TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRISD                             00000088
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXBUF                             00000050
TXBUF_MASK                        0000000F
TXBUF_QUEUE                       0000004E
TXBUF_SEND                        0000004F
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXQUE                             00000000
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
UPDATE_COMMIT                     00000368
UPDATE_END                        0000033A
UPDATE_EN_LOOP                    00000342
UPDATE_EN_NXT                     0000034C
UPDATE_PORTS                      00000318
UPDATE_SLICE                      0000034F
UPDATE_SL_LOOP                    00000356
UPDATE_SL_NXT                     00000365
UPDATE_SSRS                       00000326
UPDATE_START                      00000329
UPDATE_ST_LOOP                    0000032D
UPDATE_ST_NXT                     00000337
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
W_TEMP                            00000070
X                                 00000075
XLATE_SSR_ID                      00000275
Y                                 00000076
YELEN                             00000004
YELOFF                            00000003
YEL_CMDERR_LEN                    000000F0
YEL_TMR                           00000042
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00001FFF
_CP_OFF                           00003FFF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
_XT_OSC                           00003FFD
__16F877A                         00000001
MPASM  5.06.4               48CTL-SLAVE-877.ASM   11-19-2007  19:25:18         PAGE 42


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX----------
2000 : -------X-------- ---------------- ---------------- ----------------
2100 : XXX------------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   883
Program Memory Words Free:  7309


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    30 reported,     0 suppressed

