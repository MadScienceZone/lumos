#!/usr/bin/env python
# vi:set ai sm nu ts=4 sw=4 expandtab:
#
# LUMOS SEQUENCE PLAYER
# $Header: /tmp/cvsroot/lumos/bin/lplay,v 1.3 2008-12-31 00:25:19 steve Exp $
#
# Lumos Light Orchestration System
# Copyright (c) 2005, 2006, 2007, 2008 by Steven L. Willoughby, Aloha,
# Oregon, USA.  All Rights Reserved.  Licensed under the Open Software
# License version 3.0.
#
# This product is provided for educational, experimental or personal
# interest use, in accordance with the terms and conditions of the
# aforementioned license agreement, ON AN "AS IS" BASIS AND WITHOUT
# WARRANTY, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION,
# THE WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY OF THE ORIGINAL
# WORK IS WITH YOU.  (See the license agreement for full details, 
# including disclaimer of warranty and limitation of liability.)
#
# Under no curcumstances is this product intended to be used where the
# safety of any person, animal, or property depends upon, or is at
# risk of any kind from, the correct operation of this software or
# the hardware devices which it controls.
#
# USE THIS PRODUCT AT YOUR OWN RISK.
# 
# Load and play a sequence of events in real time

import Lumos
from Lumos.Show      import Show
from Lumos.Sequence  import Sequence
from Lumos.TimeRange import TimeRange
from optparse        import OptionParser

import sys, sched, time
#@@REL@@sys.tracebacklimit=0

#========================================================================
# Command-line option processing
#========================================================================

parser = OptionParser(
        usage="%prog [-hTvx] [-c config] [-s skew] sequence-files...", 
        version='@@RELEASE@@',
        description='''\
Plays one or more sequence files, with audio if the files include an 
audio track.  Each sequence-file is played in the order specified. In
addition, the following special items may be included in place of a
sequence-file in the list:

@mm Delays until the given minutes on the clock (i.e., @15 pauses until
15 minutes past the hour) before continuing to the next sequence.

+mm Delays for mm seconds.

[n ... ] repeats all the files between brackets n times (note the [n and
] must be separate arguments by themselves).  Likewise, [@mm ... ]
repeats all the files between brackets until the clock reads mm (as for @mm above)
at the start of a loop iteration.

+r resets the Lumos controllers by running them through a sleep/wake
cycle.
'''
)
parser.add_option('-c', '--config',  metavar='FILE', help='Specify config file [./lumos.conf]')
parser.add_option('-D', '--debug',   metavar='FILE', help='Dump debugging information to FILE')
parser.add_option('-s', '--skew',    metavar='mS', type='int', help='Delay sequence times vs. audio')
parser.add_option('-T', '--test',    action='store_true', help="Describe playback, don't actually do it")
parser.add_option('-v', '--verbose', action='count', help='Enable more descriptive output')
parser.add_option('-x', '--no-audio', action='store_true', help='Do not load audio support')

parser.set_defaults(config='lumos.conf', skew=0, verbose=0)
(options, files) = parser.parse_args()

if not options.no_audio:
    import pygame
#========================================================================
# Create show object from config file
#========================================================================

show = Show()
show.load_file(options.config, open_device=(not options.test))

#========================================================================
# Functions to support --test mode (real time trace of what actions
# would have been taken on a real run)
#========================================================================

def debug_event(time_stamp):
    global debug_file

    debug_file.write("[Event time {0:.3f}]\n".format(
        time_stamp / 1000.0))

def trace_event_format(expected_time, func, arglist):
    '''
Output format for traced events via --test option:
ACTUAL------ SCHEDULED--- CONTROLLER----- ACTION------------------------
00:00:00.000 00:00:00.000 floodlights     set_channel(17, 0)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             This function returns this portion of the output
    '''
    try:
        obj_name = func.im_self.id
    except:
        try:
            obj_name = 'unknown ' + `func`
        except:
            obj_name = 'unknown'

    return "%s %15s %s%s" % (
        trace_time_stamp(expected_time), obj_name, func.__name__, `arglist`)
    

def trace_event_header():
    return "ACTUAL------ SCHEDULED--- -----CONTROLLER ACTION------------------------"

def trace_time_stamp(msec):
    "format and return milliseconds as h:m:s.ms"
    return "%02d:%02d:%02d.%03d" % (
        msec / 3600000,
        (msec / 60000) % 60,
        (msec / 1000) % 60,
        msec % 1000
    )

def trace_event(str):
    "Describe what the event would do if it were really called."

    print trace_time_stamp((time.time() - start_point) * 1000), str

#========================================================================
# Play each sequence
#========================================================================

if options.verbose:
    print "Lumos Sequence Player, version", parser.version
    print "Show:", show.title
    print "     ", show.description

debug_file = None
if options.debug:
    debug_file = open(options.debug, 'a')
    debug_file.write("==========[Lumos lplay debug trace {0}]==========\n".format(
        time.ctime()))
    for network_ID in show.networks:
        show.networks[network_ID].set_verbose(debug_file)
        debug_file.write("Tracing I/O for network {0} ({1})\n".format(
            network_ID, show.networks[network_ID].description))

if not options.no_audio:
    pygame.mixer.pre_init(22050, -16, 2, 4096)
    pygame.mixer.init()
    pygame.init()

if not options.test:
    for unit_ID in show.controllers:
        if options.verbose: print 'Initializing device "' + unit_ID + '"'
        show.controllers[unit_ID].initialize_device()

file_next = 0
repeat_stack = []

class RepeatMarker (object):
    def __init__(self, return_idx, count=None, until=None):
        self.return_idx = return_idx
        self.count = count
        self.until = until

def wait_for(minutes, query=False):
    global options

    mm = TimeRange(minutes).list
    compare_point = time.localtime()
    if query:
        return compare_point.tm_min in mm

    while compare_point.tm_min not in mm:
        if options.verbose:
            print "{0}: Waiting for {4}, current time is {1:02d}:{2:02d}:{3:02d}...".format(
                    minutes, 
                    compare_point.tm_hour, compare_point.tm_min, 
                    compare_point.tm_sec, mm)
        time.sleep(60 - compare_point.tm_sec)
        compare_point = time.localtime()
    else:
        if options.verbose:
            print "{0}: Current time {1:02d}:{2:02d}:{3:02d} in allowed list {4}. Proceeding...".format(
                    minutes, 
                    compare_point.tm_hour, compare_point.tm_min, 
                    compare_point.tm_sec, mm)

while file_next < len(files):
    file = files[file_next]
    if options.verbose > 1:
        print "At #{0}: {1}".format(file_next, file)
    file_next += 1

    #
    # Delays:  
    #
    # @mm              - delay until time indicated
    # +sec             - delay number of seconds (may be real number)
    # [n ... ]         - loop everything up to "]" n times
    # [@mm ... ]       - repeat until time indicated
    #
    # future:
    #
    # @hh:mm:ss        - delay until time indicated
    # +hh:mm:ss        - delay for a certain length of time
    #

    if file.startswith('[@'):
        if wait_for(file[2:], query=True):
            if options.verbose:
                print "{0}: Skipping repeat because the exit time is already here ({1}).".format(file, time.asctime())
            level = 1
            file_next += 1
            while file_next < len(files):
                file = files[file_next]
                file_next += 1
                if file.startswith('['):
                    level += 1
                elif file == ']':
                    level -= 1
                    if level <= 0:
                        break

        else:
            repeat_stack.append(RepeatMarker(file_next, until=file[2:]))
            if options.verbose:
                print "{0}: Starting repeat, target={1}...".format(file, TimeRange(file[2:]).list)

    elif file.startswith('['):
        try:
            repeat_stack.append(RepeatMarker(file_next, count=int(file[1:])))
            if options.verbose:
                print "{0}: Starting repeat ({1}, level {2})".format(
                        file, repeat_stack[-1], len(repeat_stack)
                )
        except:
            print "{0}: Can't understand repeat expression (ignored)".format(file)

        continue

    elif file == ']':
        if not repeat_stack:
            print "{0}: End-of-repeat marker encountered outside a repeat (ignored)".format(file)
            continue

        if repeat_stack[-1].until:
            if wait_for(repeat_stack[-1].until, query=True):
                if options.verbose:
                    print "End of repeat, target time {0} is here ({1}), continuing...".format(
                            repeat_stack[-1].until, time.asctime())
                repeat_stack.pop()
                continue
            if options.verbose:
                print "End of repeat, looping back until {0} (now {1})".format(
                        repeat_stack[-1].until, time.asctime())
                file_next = repeat_stack[-1].return_idx
                continue
               
        elif repeat_stack[-1].count > 1:
            repeat_stack[-1].count -= 1
            file_next = repeat_stack[-1].return_idx
            if options.verbose:
                print "End of repeat, looping back {0} more time{1}".format(
                        repeat_stack[-1].count, '' if repeat_stack[-1].count==1 else 's')

        else:
            repeat_stack.pop()

    elif file.startswith('@'):
        wait_for(file[1:])
        continue

    elif file == '+r':
        for controller in show.controllers.values():
            try:
		if controller.type.startswith("Lumos"):
                    if options.verbose: print "Sleeping {0}".format(controller)
                    controller.flush()
		    controller.kill_all_channels()
                    controller.raw_control('sleep')
                    controller.flush()
            except Exception as e:
                print "Could not reset controller {0} ({1})".format(controller, e)
        time.sleep(1)
        for controller in show.controllers.values():
            try:
                if controller.type.startswith("Lumos"):
                    if options.verbose: print "Waking   {0}".format(controller)
                    controller.raw_control('wake')
                    controller.flush()
            except Exception as e:
                print "Could not reset controller {0} ({1})".format(controller, e)

    elif file.startswith('+'):
        try:
            delay = float(file[1:])
        except:
            print "{0}: Can't understand delay count; ignoring this delay.".format(file)
            continue

        if options.verbose:
            print "{0}: Delaying {1} seconds...".format(file, delay)

        time.sleep(delay)
        continue

    else:
        sequence = Sequence()
        sequence.load_file(file, show.controllers)
        if not options.no_audio and sequence.audio is not None:
            pygame.mixer.pre_init(sequence.audio.frequency,
                    sequence.audio.bits,
                    sequence.audio.channels,
                    256)
                    #sequence.audio.bufsize)
            pygame.mixer.init()
            pygame.mixer.music.load(sequence.audio.filename)
            pygame.mixer.music.set_volume(sequence.audio.volume / 100.0)

        if options.verbose:
            print 'Sequence "%s": duration %s; %d intervals' % (
                file, trace_time_stamp(sequence.total_time),
                len(sequence.intervals)
            )
            if sequence.audio is not None:
                print 'Audio track "%s" (%d Hz, %d bits, %d chan, %d buffer)' % (
                        sequence.audio.filename,
                        sequence.audio.frequency,
                        sequence.audio.bits,
                        sequence.audio.channels,
                        sequence.audio.bufsize)

        schedule = sched.scheduler(time.time, time.sleep)
        if options.test:
            # queue up event trace calls, paying as much runtime penalty
            # as possible NOW instead of during playback
            print trace_event_header()
            for time_stamp, method, arglist, priority in sequence.compile(keep_state=True, skew=options.skew):
                schedule.enter(time_stamp / 1000.0, priority, trace_event, 
                    (trace_event_format(time_stamp, method, arglist),))
            start_point = time.time()
        else:
            last_timestamp = None
            for time_stamp, method, arglist, priority in sequence.compile_stream(keep_state=True, skew=options.skew):
                if options.debug and last_timestamp != time_stamp:
                    schedule.enter(time_stamp / 1000.0, 0, debug_event, (time_stamp,))
                    last_timestamp = time_stamp
                schedule.enter(time_stamp / 1000.0, priority, method, arglist)

        if not options.no_audio and sequence.audio is not None:
            pygame.mixer.music.play()

        schedule.run()

        if not options.no_audio and sequence.audio is not None:
            pygame.mixer.music.stop()

#        print "Dumping stats"
#        for cid in show.controllers:
#            print "--", cid
#            try:
#                show.controllers[cid].dumpstats('/tmp/lumosstats.'+cid)
#            except Exception, e:
#                print "Can't dump stats for {} ({})".format(cid, e)
#
if options.verbose:
    print "Scene complete."

if debug_file:
    debug_file.write("----------[End Debugging Output: {0}]----------\n".format(time.ctime()))
    debug_file.close()
#
# $Log: not supported by cvs2svn $
# Revision 1.2  2008/12/30 22:58:02  steve
# General cleanup and updating before 0.3 alpha release.
#
#
